language: swift
name: HumanEval_142_sum_squares
results:
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in lst {\n        if index%3 == 0 && index%4 == 0 {\n   \
    \         sum += index\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpljhq6x4v/tmpljhq6x4v.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade96b4fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade96846b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade96846988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade968457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpljhq6x4v                        0x000056193606c502 <unavailable> + 5378

    5    libc.so.6                          0x00002ade96d3b460 __libc_start_main +
    245

    6    tmpljhq6x4v                        0x000056193606c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in 0..<lst.count {\n        if index % 3 == 0 && index %\
    \ 4 == 0 {\n            sum += lst[index]\n        } else if index % 3 == 0 {\n\
    \            sum += lst[index] * lst[index]\n        } else if index % 4 == 0\
    \ {\n            sum += lst[index] * lst[index]\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1, 2,\
    \ 3]) == 6)\nassert(sum_squares(lst: [1, 4, 9]) == 14)\nassert(sum_squares(lst:\
    \ [] as [Int]) == 0)\nassert(sum_squares(lst: [1, 1, 1, 1, 1, 1, 1, 1, 1]) ==\
    \ 9)\nassert(sum_squares(lst: [-1, -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst:\
    \ [0]) == 0)\nassert(sum_squares(lst: [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst:\
    \ [-56, -99, 1, 0, -2]) == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0,\
    \ 0, 0, -1]) == 0)\nassert(sum_squares(lst: [-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]) == -14196)\nassert(sum_squares(lst: [-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)"
  status: Exception
  stderr: 'tmplessk0ry/tmplessk0ry.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc9cee7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc9cbdeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc9cbde988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc9cbdd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplessk0ry                        0x000055a483997542 <unavailable> + 5442

    5    libc.so.6                          0x00002afc9d0d3460 __libc_start_main +
    245

    6    tmplessk0ry                        0x000055a4839971a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in 0..<lst.count {\n        if index % 3 == 0 && index %\
    \ 4 == 0 {\n            sum += lst[index]\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmp9yol7h5w/tmp9yol7h5w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6fa7cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6fa4c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6fa4c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6fa4c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9yol7h5w                        0x000056514a600542 <unavailable> + 5442

    5    libc.so.6                          0x00002ae6fa9b7460 __libc_start_main +
    245

    6    tmp9yol7h5w                        0x000056514a6001a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in lst {\n        if index % 3 == 0 && index % 4 == 0 {\n\
    \            sum += index\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpe3uskicu/tmpe3uskicu.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba090aabc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0907a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0907a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0907a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe3uskicu                        0x000055ddff624502 <unavailable> + 5378

    5    libc.so.6                          0x00002ba090c97460 __libc_start_main +
    245

    6    tmpe3uskicu                        0x000055ddff624169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for i in lst {\n        if i % 3 == 0 && i % 4 == 0 {\n           \
    \ sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst: [1, 4,\
    \ 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpe8tn2d1v/tmpe8tn2d1v.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae40ea52c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae40e749b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae40e749988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae40e7487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe8tn2d1v                        0x000055b15a762502 <unavailable> + 5378

    5    libc.so.6                          0x00002ae40ec3e460 __libc_start_main +
    245

    6    tmpe8tn2d1v                        0x000055b15a762169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in 0..<lst.count {\n        if index % 3 == 0 && index %\
    \ 4 == 0 {\n            sum += lst[index]\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmp9yol7h5w/tmp9yol7h5w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6fa7cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6fa4c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6fa4c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6fa4c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9yol7h5w                        0x000056514a600542 <unavailable> + 5442

    5    libc.so.6                          0x00002ae6fa9b7460 __libc_start_main +
    245

    6    tmp9yol7h5w                        0x000056514a6001a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in lst {\n        if index % 3 == 0 && index % 4 == 0 {\n\
    \            sum += index\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpe3uskicu/tmpe3uskicu.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba090aabc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0907a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0907a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0907a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe3uskicu                        0x000055ddff624502 <unavailable> + 5378

    5    libc.so.6                          0x00002ba090c97460 __libc_start_main +
    245

    6    tmpe3uskicu                        0x000055ddff624169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in lst {\n        if index % 3 == 0 && index % 4 == 0 {\n\
    \            sum += index\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpe3uskicu/tmpe3uskicu.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba090aabc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0907a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0907a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0907a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe3uskicu                        0x000055ddff624502 <unavailable> + 5378

    5    libc.so.6                          0x00002ba090c97460 __libc_start_main +
    245

    6    tmpe3uskicu                        0x000055ddff624169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for i in lst {\n        if i % 3 == 0 && i % 4 == 0 {\n           \
    \ sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst: [1, 4,\
    \ 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpe8tn2d1v/tmpe8tn2d1v.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae40ea52c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae40e749b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae40e749988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae40e7487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe8tn2d1v                        0x000055b15a762502 <unavailable> + 5378

    5    libc.so.6                          0x00002ae40ec3e460 __libc_start_main +
    245

    6    tmpe8tn2d1v                        0x000055b15a762169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in 0..<lst.count {\n        if index % 3 == 0 && index %\
    \ 4 == 0 {\n            sum += lst[index]\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmp9yol7h5w/tmp9yol7h5w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6fa7cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6fa4c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6fa4c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6fa4c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9yol7h5w                        0x000056514a600542 <unavailable> + 5442

    5    libc.so.6                          0x00002ae6fa9b7460 __libc_start_main +
    245

    6    tmp9yol7h5w                        0x000056514a6001a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for x in lst {\n        if x % 3 == 0 && x % 4 == 0 {\n           \
    \ sum += x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst: [1, 4,\
    \ 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpi1et6uol/tmpi1et6uol.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b79524c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b79521c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b79521c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b79521bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi1et6uol                        0x0000556f7e8b6502 <unavailable> + 5378

    5    libc.so.6                          0x00002b79526b5460 __libc_start_main +
    245

    6    tmpi1et6uol                        0x0000556f7e8b6169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in lst {\n        if index % 3 == 0 && index % 4 == 0 {\n\
    \            sum += index\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpe3uskicu/tmpe3uskicu.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba090aabc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0907a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0907a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0907a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe3uskicu                        0x000055ddff624502 <unavailable> + 5378

    5    libc.so.6                          0x00002ba090c97460 __libc_start_main +
    245

    6    tmpe3uskicu                        0x000055ddff624169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for i in lst {\n        if i % 3 == 0 && i % 4 == 0 {\n           \
    \ sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst: [1, 4,\
    \ 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpe8tn2d1v/tmpe8tn2d1v.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae40ea52c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae40e749b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae40e749988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae40e7487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe8tn2d1v                        0x000055b15a762502 <unavailable> + 5378

    5    libc.so.6                          0x00002ae40ec3e460 __libc_start_main +
    245

    6    tmpe8tn2d1v                        0x000055b15a762169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in lst {\n        if index % 3 == 0 && index % 4 == 0 {\n\
    \            sum += index\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpe3uskicu/tmpe3uskicu.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba090aabc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0907a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0907a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0907a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe3uskicu                        0x000055ddff624502 <unavailable> + 5378

    5    libc.so.6                          0x00002ba090c97460 __libc_start_main +
    245

    6    tmpe3uskicu                        0x000055ddff624169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in lst {\n        if index % 3 == 0 && index % 4 == 0 {\n\
    \            sum += index\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpe3uskicu/tmpe3uskicu.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba090aabc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0907a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0907a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0907a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe3uskicu                        0x000055ddff624502 <unavailable> + 5378

    5    libc.so.6                          0x00002ba090c97460 __libc_start_main +
    245

    6    tmpe3uskicu                        0x000055ddff624169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for x in lst {\n        if x % 3 == 0 {\n            sum += x * x\n\
    \        } else if x % 4 == 0 {\n            sum += x * x\n        } else {\n\
    \            sum += x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmp10yionpu/tmp10yionpu.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac43839bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac438092b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac438092988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac4380917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp10yionpu                        0x0000559dd6c29502 <unavailable> + 5378

    5    libc.so.6                          0x00002ac438587460 __libc_start_main +
    245

    6    tmp10yionpu                        0x0000559dd6c29169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in lst {\n        if index%3 == 0 && index%4 == 0 {\n   \
    \         sum += index\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpljhq6x4v/tmpljhq6x4v.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade96b4fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade96846b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade96846988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade968457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpljhq6x4v                        0x000056193606c502 <unavailable> + 5378

    5    libc.so.6                          0x00002ade96d3b460 __libc_start_main +
    245

    6    tmpljhq6x4v                        0x000056193606c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for x in lst {\n        if x % 3 == 0 {\n            sum += x * x\n\
    \        } else if x % 4 == 0 {\n            sum += x * x\n        } else {\n\
    \            sum += x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmp10yionpu/tmp10yionpu.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac43839bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac438092b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac438092988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac4380917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp10yionpu                        0x0000559dd6c29502 <unavailable> + 5378

    5    libc.so.6                          0x00002ac438587460 __libc_start_main +
    245

    6    tmp10yionpu                        0x0000559dd6c29169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in 0..<lst.count {\n        if index % 3 == 0 && index %\
    \ 4 == 0 {\n            sum += lst[index]\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmp9yol7h5w/tmp9yol7h5w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6fa7cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6fa4c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6fa4c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6fa4c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9yol7h5w                        0x000056514a600542 <unavailable> + 5442

    5    libc.so.6                          0x00002ae6fa9b7460 __libc_start_main +
    245

    6    tmp9yol7h5w                        0x000056514a6001a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in 0..<lst.count {\n        if index % 3 == 0 && index %\
    \ 4 == 0 {\n            sum += lst[index]\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmp9yol7h5w/tmp9yol7h5w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6fa7cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6fa4c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6fa4c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6fa4c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9yol7h5w                        0x000056514a600542 <unavailable> + 5442

    5    libc.so.6                          0x00002ae6fa9b7460 __libc_start_main +
    245

    6    tmp9yol7h5w                        0x000056514a6001a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for i in lst {\n        if i % 3 == 0 && i % 4 == 0 {\n           \
    \ sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst: [1, 4,\
    \ 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpe8tn2d1v/tmpe8tn2d1v.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae40ea52c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae40e749b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae40e749988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae40e7487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe8tn2d1v                        0x000055b15a762502 <unavailable> + 5378

    5    libc.so.6                          0x00002ae40ec3e460 __libc_start_main +
    245

    6    tmpe8tn2d1v                        0x000055b15a762169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in 0..<lst.count {\n        if index % 3 == 0 && index %\
    \ 4 == 0 {\n            sum += lst[index]\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmp9yol7h5w/tmp9yol7h5w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6fa7cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6fa4c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6fa4c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6fa4c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9yol7h5w                        0x000056514a600542 <unavailable> + 5442

    5    libc.so.6                          0x00002ae6fa9b7460 __libc_start_main +
    245

    6    tmp9yol7h5w                        0x000056514a6001a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in 0..<lst.count {\n        if index % 3 == 0 && index %\
    \ 4 == 0 {\n            sum += lst[index]\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmp9yol7h5w/tmp9yol7h5w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6fa7cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6fa4c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6fa4c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6fa4c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9yol7h5w                        0x000056514a600542 <unavailable> + 5442

    5    libc.so.6                          0x00002ae6fa9b7460 __libc_start_main +
    245

    6    tmp9yol7h5w                        0x000056514a6001a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in lst {\n        if index%3 == 0 && index%4 == 0 {\n   \
    \         sum += index\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpljhq6x4v/tmpljhq6x4v.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade96b4fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade96846b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade96846988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade968457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpljhq6x4v                        0x000056193606c502 <unavailable> + 5378

    5    libc.so.6                          0x00002ade96d3b460 __libc_start_main +
    245

    6    tmpljhq6x4v                        0x000056193606c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for i in lst {\n        if i % 3 == 0 && i % 4 == 0 {\n           \
    \ sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst: [1, 4,\
    \ 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpe8tn2d1v/tmpe8tn2d1v.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae40ea52c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae40e749b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae40e749988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae40e7487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe8tn2d1v                        0x000055b15a762502 <unavailable> + 5378

    5    libc.so.6                          0x00002ae40ec3e460 __libc_start_main +
    245

    6    tmpe8tn2d1v                        0x000055b15a762169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in 0..<lst.count {\n        if index % 3 == 0 && index %\
    \ 4 == 0 {\n            sum += lst[index]\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmp9yol7h5w/tmp9yol7h5w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6fa7cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6fa4c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6fa4c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6fa4c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9yol7h5w                        0x000056514a600542 <unavailable> + 5442

    5    libc.so.6                          0x00002ae6fa9b7460 __libc_start_main +
    245

    6    tmp9yol7h5w                        0x000056514a6001a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for i in lst {\n        if i % 3 == 0 {\n            sum += i * i\n\
    \        } else if i % 4 == 0 {\n            sum += i * i\n        } else {\n\
    \            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpz6_tme29/tmpz6_tme29.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee886aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee883a1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee883a1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee883a07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz6_tme29                        0x000056391614d502 <unavailable> + 5378

    5    libc.so.6                          0x00002aee88896460 __libc_start_main +
    245

    6    tmpz6_tme29                        0x000056391614d169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in lst {\n        if index % 3 == 0 && index % 4 == 0 {\n\
    \            sum += index\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpe3uskicu/tmpe3uskicu.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba090aabc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0907a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0907a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0907a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe3uskicu                        0x000055ddff624502 <unavailable> + 5378

    5    libc.so.6                          0x00002ba090c97460 __libc_start_main +
    245

    6    tmpe3uskicu                        0x000055ddff624169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for x in lst {\n        if x % 3 == 0 && x % 4 == 0 {\n           \
    \ sum += x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst: [1, 4,\
    \ 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpi1et6uol/tmpi1et6uol.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b79524c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b79521c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b79521c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b79521bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi1et6uol                        0x0000556f7e8b6502 <unavailable> + 5378

    5    libc.so.6                          0x00002b79526b5460 __libc_start_main +
    245

    6    tmpi1et6uol                        0x0000556f7e8b6169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in lst {\n        if index % 3 == 0 && index % 4 == 0 {\n\
    \            sum += index\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpe3uskicu/tmpe3uskicu.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba090aabc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0907a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0907a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0907a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe3uskicu                        0x000055ddff624502 <unavailable> + 5378

    5    libc.so.6                          0x00002ba090c97460 __libc_start_main +
    245

    6    tmpe3uskicu                        0x000055ddff624169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for i in lst {\n        if i % 3 == 0 && i % 4 == 0 {\n           \
    \ sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst: [1, 4,\
    \ 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpe8tn2d1v/tmpe8tn2d1v.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae40ea52c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae40e749b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae40e749988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae40e7487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe8tn2d1v                        0x000055b15a762502 <unavailable> + 5378

    5    libc.so.6                          0x00002ae40ec3e460 __libc_start_main +
    245

    6    tmpe8tn2d1v                        0x000055b15a762169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in 0..<lst.count {\n        if index % 3 == 0 && index %\
    \ 4 == 0 {\n            sum += lst[index]\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmp9yol7h5w/tmp9yol7h5w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6fa7cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6fa4c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6fa4c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6fa4c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9yol7h5w                        0x000056514a600542 <unavailable> + 5442

    5    libc.so.6                          0x00002ae6fa9b7460 __libc_start_main +
    245

    6    tmp9yol7h5w                        0x000056514a6001a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in lst {\n        if index % 3 == 0 && index % 4 == 0 {\n\
    \            sum += index\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpe3uskicu/tmpe3uskicu.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba090aabc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0907a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0907a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0907a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe3uskicu                        0x000055ddff624502 <unavailable> + 5378

    5    libc.so.6                          0x00002ba090c97460 __libc_start_main +
    245

    6    tmpe3uskicu                        0x000055ddff624169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in 0..<lst.count {\n        if index % 3 == 0 && index %\
    \ 4 == 0 {\n            sum += lst[index]\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmp9yol7h5w/tmp9yol7h5w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6fa7cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6fa4c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6fa4c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6fa4c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9yol7h5w                        0x000056514a600542 <unavailable> + 5442

    5    libc.so.6                          0x00002ae6fa9b7460 __libc_start_main +
    245

    6    tmp9yol7h5w                        0x000056514a6001a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for x in lst {\n        if x % 3 == 0 && x % 4 == 0 {\n           \
    \ sum += x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst: [1, 4,\
    \ 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpi1et6uol/tmpi1et6uol.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b79524c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b79521c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b79521c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b79521bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi1et6uol                        0x0000556f7e8b6502 <unavailable> + 5378

    5    libc.so.6                          0x00002b79526b5460 __libc_start_main +
    245

    6    tmpi1et6uol                        0x0000556f7e8b6169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in lst {\n        if index % 3 == 0 && index % 4 == 0 {\n\
    \            sum += index\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpe3uskicu/tmpe3uskicu.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba090aabc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0907a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0907a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0907a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe3uskicu                        0x000055ddff624502 <unavailable> + 5378

    5    libc.so.6                          0x00002ba090c97460 __libc_start_main +
    245

    6    tmpe3uskicu                        0x000055ddff624169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in lst {\n        if index % 3 == 0 && index % 4 == 0 {\n\
    \            sum += index\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpe3uskicu/tmpe3uskicu.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba090aabc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0907a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0907a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0907a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe3uskicu                        0x000055ddff624502 <unavailable> + 5378

    5    libc.so.6                          0x00002ba090c97460 __libc_start_main +
    245

    6    tmpe3uskicu                        0x000055ddff624169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for i in lst {\n        if i % 3 == 0 {\n            sum += i * i\n\
    \        } else if i % 4 == 0 {\n            sum += i * i\n        } else {\n\
    \            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpz6_tme29/tmpz6_tme29.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee886aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee883a1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee883a1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee883a07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz6_tme29                        0x000056391614d502 <unavailable> + 5378

    5    libc.so.6                          0x00002aee88896460 __libc_start_main +
    245

    6    tmpz6_tme29                        0x000056391614d169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in 0..<lst.count {\n        if index % 3 == 0 && index %\
    \ 4 == 0 {\n            sum += lst[index]\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmp9yol7h5w/tmp9yol7h5w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6fa7cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6fa4c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6fa4c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6fa4c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9yol7h5w                        0x000056514a600542 <unavailable> + 5442

    5    libc.so.6                          0x00002ae6fa9b7460 __libc_start_main +
    245

    6    tmp9yol7h5w                        0x000056514a6001a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in 0..<lst.count {\n        if index % 3 == 0 && index %\
    \ 4 == 0 {\n            sum += lst[index]\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmp9yol7h5w/tmp9yol7h5w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6fa7cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6fa4c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6fa4c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6fa4c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9yol7h5w                        0x000056514a600542 <unavailable> + 5442

    5    libc.so.6                          0x00002ae6fa9b7460 __libc_start_main +
    245

    6    tmp9yol7h5w                        0x000056514a6001a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in lst {\n        if index % 3 == 0 && index % 4 == 0 {\n\
    \            sum += index\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpe3uskicu/tmpe3uskicu.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba090aabc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0907a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0907a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0907a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe3uskicu                        0x000055ddff624502 <unavailable> + 5378

    5    libc.so.6                          0x00002ba090c97460 __libc_start_main +
    245

    6    tmpe3uskicu                        0x000055ddff624169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in 0..<lst.count {\n        if index % 3 == 0 && index %\
    \ 4 == 0 {\n            sum += lst[index]\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmp9yol7h5w/tmp9yol7h5w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6fa7cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6fa4c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6fa4c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6fa4c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9yol7h5w                        0x000056514a600542 <unavailable> + 5442

    5    libc.so.6                          0x00002ae6fa9b7460 __libc_start_main +
    245

    6    tmp9yol7h5w                        0x000056514a6001a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for i : Int in lst {\n        if i % 3 == 0 {\n            sum += i\n\
    \        }\n        if i % 4 == 0 {\n            sum += i\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1,\
    \ 2, 3]) == 6)\nassert(sum_squares(lst: [1, 4, 9]) == 14)\nassert(sum_squares(lst:\
    \ [] as [Int]) == 0)\nassert(sum_squares(lst: [1, 1, 1, 1, 1, 1, 1, 1, 1]) ==\
    \ 9)\nassert(sum_squares(lst: [-1, -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst:\
    \ [0]) == 0)\nassert(sum_squares(lst: [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst:\
    \ [-56, -99, 1, 0, -2]) == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0,\
    \ 0, 0, -1]) == 0)\nassert(sum_squares(lst: [-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]) == -14196)\nassert(sum_squares(lst: [-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)"
  status: Exception
  stderr: 'tmpt3tsyobc/tmpt3tsyobc.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5315c0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5315901b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5315901988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53159007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt3tsyobc                        0x000055db3394d502 <unavailable> + 5378

    5    libc.so.6                          0x00002b5315df6460 __libc_start_main +
    245

    6    tmpt3tsyobc                        0x000055db3394d169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in 0..<lst.count {\n        if index % 3 == 0 && index %\
    \ 4 == 0 {\n            sum += lst[index]\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmp9yol7h5w/tmp9yol7h5w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6fa7cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6fa4c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6fa4c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6fa4c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9yol7h5w                        0x000056514a600542 <unavailable> + 5442

    5    libc.so.6                          0x00002ae6fa9b7460 __libc_start_main +
    245

    6    tmp9yol7h5w                        0x000056514a6001a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for i in lst {\n        if i % 3 == 0 && i % 4 == 0 {\n           \
    \ sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst: [1, 4,\
    \ 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpe8tn2d1v/tmpe8tn2d1v.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae40ea52c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae40e749b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae40e749988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae40e7487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe8tn2d1v                        0x000055b15a762502 <unavailable> + 5378

    5    libc.so.6                          0x00002ae40ec3e460 __libc_start_main +
    245

    6    tmpe8tn2d1v                        0x000055b15a762169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in 0..<lst.count {\n        if index % 3 == 0 && index %\
    \ 4 == 0 {\n            sum += lst[index]\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmp9yol7h5w/tmp9yol7h5w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6fa7cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6fa4c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6fa4c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6fa4c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9yol7h5w                        0x000056514a600542 <unavailable> + 5442

    5    libc.so.6                          0x00002ae6fa9b7460 __libc_start_main +
    245

    6    tmp9yol7h5w                        0x000056514a6001a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in 0..<lst.count {\n        if index % 3 == 0 && index %\
    \ 4 == 0 {\n            sum += lst[index]\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmp9yol7h5w/tmp9yol7h5w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6fa7cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6fa4c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6fa4c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6fa4c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9yol7h5w                        0x000056514a600542 <unavailable> + 5442

    5    libc.so.6                          0x00002ae6fa9b7460 __libc_start_main +
    245

    6    tmp9yol7h5w                        0x000056514a6001a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in lst {\n        if index % 3 == 0 && index % 4 == 0 {\n\
    \            sum += index\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpe3uskicu/tmpe3uskicu.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba090aabc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0907a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0907a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0907a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe3uskicu                        0x000055ddff624502 <unavailable> + 5378

    5    libc.so.6                          0x00002ba090c97460 __libc_start_main +
    245

    6    tmpe3uskicu                        0x000055ddff624169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for i in lst {\n        if i % 3 == 0 {\n            sum += i\n   \
    \     }\n        else if i % 4 == 0 {\n            sum += i * i\n        }\n \
    \       else {\n            sum += i * i * i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmp9bmhu6ye/tmp9bmhu6ye.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7052718c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b705240fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b705240f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b705240e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9bmhu6ye                        0x000055bfda484502 <unavailable> + 5378

    5    libc.so.6                          0x00002b7052904460 __libc_start_main +
    245

    6    tmp9bmhu6ye                        0x000055bfda484169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in 0..<lst.count {\n        if index % 3 == 0 && index %\
    \ 4 == 0 {\n            sum += lst[index]\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmp9yol7h5w/tmp9yol7h5w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6fa7cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6fa4c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6fa4c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6fa4c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9yol7h5w                        0x000056514a600542 <unavailable> + 5442

    5    libc.so.6                          0x00002ae6fa9b7460 __libc_start_main +
    245

    6    tmp9yol7h5w                        0x000056514a6001a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in 0..<lst.count {\n        if index % 3 == 0 && index %\
    \ 4 == 0 {\n            sum += lst[index]\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmp9yol7h5w/tmp9yol7h5w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6fa7cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6fa4c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6fa4c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6fa4c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9yol7h5w                        0x000056514a600542 <unavailable> + 5442

    5    libc.so.6                          0x00002ae6fa9b7460 __libc_start_main +
    245

    6    tmp9yol7h5w                        0x000056514a6001a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for x in lst {\n        if x % 3 == 0 && x % 4 == 0 {\n           \
    \ sum += x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst: [1, 4,\
    \ 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpi1et6uol/tmpi1et6uol.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b79524c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b79521c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b79521c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b79521bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi1et6uol                        0x0000556f7e8b6502 <unavailable> + 5378

    5    libc.so.6                          0x00002b79526b5460 __libc_start_main +
    245

    6    tmpi1et6uol                        0x0000556f7e8b6169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in lst {\n        if index%3 == 0 && index%4 == 0 {\n   \
    \         sum += index\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpljhq6x4v/tmpljhq6x4v.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade96b4fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade96846b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade96846988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade968457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpljhq6x4v                        0x000056193606c502 <unavailable> + 5378

    5    libc.so.6                          0x00002ade96d3b460 __libc_start_main +
    245

    6    tmpljhq6x4v                        0x000056193606c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in 0..<lst.count {\n        if index % 3 == 0 && index %\
    \ 4 == 0 {\n            sum += lst[index]\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmp9yol7h5w/tmp9yol7h5w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6fa7cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6fa4c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6fa4c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6fa4c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9yol7h5w                        0x000056514a600542 <unavailable> + 5442

    5    libc.so.6                          0x00002ae6fa9b7460 __libc_start_main +
    245

    6    tmp9yol7h5w                        0x000056514a6001a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for i in lst {\n        if i % 3 == 0 && i % 4 == 0 {\n           \
    \ sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst: [1, 4,\
    \ 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpe8tn2d1v/tmpe8tn2d1v.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae40ea52c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae40e749b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae40e749988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae40e7487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe8tn2d1v                        0x000055b15a762502 <unavailable> + 5378

    5    libc.so.6                          0x00002ae40ec3e460 __libc_start_main +
    245

    6    tmpe8tn2d1v                        0x000055b15a762169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in 0..<lst.count {\n        if index % 3 == 0 && index %\
    \ 4 == 0 {\n            sum += lst[index]\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmp9yol7h5w/tmp9yol7h5w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6fa7cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6fa4c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6fa4c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6fa4c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9yol7h5w                        0x000056514a600542 <unavailable> + 5442

    5    libc.so.6                          0x00002ae6fa9b7460 __libc_start_main +
    245

    6    tmp9yol7h5w                        0x000056514a6001a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in lst {\n        if index % 3 == 0 && index % 4 == 0 {\n\
    \            sum += index\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpe3uskicu/tmpe3uskicu.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba090aabc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0907a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0907a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0907a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe3uskicu                        0x000055ddff624502 <unavailable> + 5378

    5    libc.so.6                          0x00002ba090c97460 __libc_start_main +
    245

    6    tmpe3uskicu                        0x000055ddff624169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for i in lst {\n        if i % 3 == 0 && i % 4 == 0 {\n           \
    \ sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst: [1, 4,\
    \ 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpe8tn2d1v/tmpe8tn2d1v.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae40ea52c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae40e749b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae40e749988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae40e7487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe8tn2d1v                        0x000055b15a762502 <unavailable> + 5378

    5    libc.so.6                          0x00002ae40ec3e460 __libc_start_main +
    245

    6    tmpe8tn2d1v                        0x000055b15a762169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for x in lst {\n        if x % 3 == 0 && x % 4 == 0 {\n           \
    \ sum += x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst: [1, 4,\
    \ 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpi1et6uol/tmpi1et6uol.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b79524c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b79521c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b79521c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b79521bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi1et6uol                        0x0000556f7e8b6502 <unavailable> + 5378

    5    libc.so.6                          0x00002b79526b5460 __libc_start_main +
    245

    6    tmpi1et6uol                        0x0000556f7e8b6169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in 0..<lst.count {\n        if index % 3 == 0 && index %\
    \ 4 == 0 {\n            sum += lst[index]\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmp9yol7h5w/tmp9yol7h5w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6fa7cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6fa4c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6fa4c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6fa4c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9yol7h5w                        0x000056514a600542 <unavailable> + 5442

    5    libc.so.6                          0x00002ae6fa9b7460 __libc_start_main +
    245

    6    tmp9yol7h5w                        0x000056514a6001a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in lst {\n        if index % 3 == 0 {\n            sum +=\
    \ index\n        }\n        else if index % 4 == 0 {\n            sum += index\n\
    \        }\n        else {\n            sum += index * index\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1,\
    \ 2, 3]) == 6)\nassert(sum_squares(lst: [1, 4, 9]) == 14)\nassert(sum_squares(lst:\
    \ [] as [Int]) == 0)\nassert(sum_squares(lst: [1, 1, 1, 1, 1, 1, 1, 1, 1]) ==\
    \ 9)\nassert(sum_squares(lst: [-1, -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst:\
    \ [0]) == 0)\nassert(sum_squares(lst: [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst:\
    \ [-56, -99, 1, 0, -2]) == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0,\
    \ 0, 0, -1]) == 0)\nassert(sum_squares(lst: [-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]) == -14196)\nassert(sum_squares(lst: [-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)"
  status: Exception
  stderr: 'tmpfjj8mz13/tmpfjj8mz13.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d021bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d01eb1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d01eb1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d01eb07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfjj8mz13                        0x000056258628b502 <unavailable> + 5378

    5    libc.so.6                          0x00002b8d023a6460 __libc_start_main +
    245

    6    tmpfjj8mz13                        0x000056258628b169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for i in lst {\n        if i % 3 == 0 {\n            sum += i * i\n\
    \        } else if i % 4 == 0 {\n            sum += i * i\n        } else {\n\
    \            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpz6_tme29/tmpz6_tme29.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee886aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee883a1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee883a1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee883a07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz6_tme29                        0x000056391614d502 <unavailable> + 5378

    5    libc.so.6                          0x00002aee88896460 __libc_start_main +
    245

    6    tmpz6_tme29                        0x000056391614d169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in lst {\n        if index % 3 == 0 && index % 4 == 0 {\n\
    \            sum += index\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpe3uskicu/tmpe3uskicu.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba090aabc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0907a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0907a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0907a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe3uskicu                        0x000055ddff624502 <unavailable> + 5378

    5    libc.so.6                          0x00002ba090c97460 __libc_start_main +
    245

    6    tmpe3uskicu                        0x000055ddff624169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for i in lst {\n        if i % 3 == 0 && i % 4 == 0 {\n           \
    \ sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst: [1, 4,\
    \ 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpe8tn2d1v/tmpe8tn2d1v.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae40ea52c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae40e749b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae40e749988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae40e7487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe8tn2d1v                        0x000055b15a762502 <unavailable> + 5378

    5    libc.so.6                          0x00002ae40ec3e460 __libc_start_main +
    245

    6    tmpe8tn2d1v                        0x000055b15a762169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in 0..<lst.count {\n        if index % 3 == 0 && index %\
    \ 4 == 0 {\n            sum += lst[index]\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmp9yol7h5w/tmp9yol7h5w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6fa7cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6fa4c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6fa4c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6fa4c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9yol7h5w                        0x000056514a600542 <unavailable> + 5442

    5    libc.so.6                          0x00002ae6fa9b7460 __libc_start_main +
    245

    6    tmp9yol7h5w                        0x000056514a6001a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for i : Int in lst {\n        if i % 3 == 0 && i % 4 == 0 {\n     \
    \       sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpw42wfb56/tmpw42wfb56.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc1bc6bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc1b962b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc1b962988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc1b9617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw42wfb56                        0x0000557398f1a502 <unavailable> + 5378

    5    libc.so.6                          0x00002afc1be57460 __libc_start_main +
    245

    6    tmpw42wfb56                        0x0000557398f1a169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in 0..<lst.count {\n        if index % 3 == 0 && index %\
    \ 4 == 0 {\n            sum += lst[index]\n        } else if index % 3 == 0 {\n\
    \            sum += lst[index] * lst[index]\n        } else if index % 4 == 0\
    \ {\n            sum += lst[index] * lst[index]\n        } else {\n          \
    \  sum += lst[index]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpk3jb868k/tmpk3jb868k.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39993cfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b39990c6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b39990c6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b39990c57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk3jb868k                        0x000055d6f51a08be <unavailable> + 6334

    5    libc.so.6                          0x00002b39995bb460 __libc_start_main +
    245

    6    tmpk3jb868k                        0x000055d6f51a01a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in lst {\n        if index % 3 == 0 && index % 4 == 0 {\n\
    \            sum += index\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpe3uskicu/tmpe3uskicu.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba090aabc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0907a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0907a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0907a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe3uskicu                        0x000055ddff624502 <unavailable> + 5378

    5    libc.so.6                          0x00002ba090c97460 __libc_start_main +
    245

    6    tmpe3uskicu                        0x000055ddff624169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in 0..<lst.count {\n        if index % 3 == 0 {\n       \
    \     sum += lst[index]\n        }\n        else if index % 4 == 0 {\n       \
    \     sum += lst[index]\n        }\n        else {\n            sum += lst[index]\
    \ * lst[index]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmptaxq6d97/tmptaxq6d97.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed100a5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed0fd9cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed0fd9c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed0fd9b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptaxq6d97                        0x000055e5e89a8542 <unavailable> + 5442

    5    libc.so.6                          0x00002aed10291460 __libc_start_main +
    245

    6    tmptaxq6d97                        0x000055e5e89a81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in 0..<lst.count {\n        if index % 3 == 0 && index %\
    \ 4 == 0 {\n            sum += lst[index]\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmp9yol7h5w/tmp9yol7h5w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6fa7cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6fa4c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6fa4c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6fa4c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9yol7h5w                        0x000056514a600542 <unavailable> + 5442

    5    libc.so.6                          0x00002ae6fa9b7460 __libc_start_main +
    245

    6    tmp9yol7h5w                        0x000056514a6001a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in 0..<lst.count {\n        if index % 3 == 0 && index %\
    \ 4 == 0 {\n            sum += lst[index]\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmp9yol7h5w/tmp9yol7h5w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6fa7cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6fa4c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6fa4c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6fa4c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9yol7h5w                        0x000056514a600542 <unavailable> + 5442

    5    libc.so.6                          0x00002ae6fa9b7460 __libc_start_main +
    245

    6    tmp9yol7h5w                        0x000056514a6001a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in lst {\n        if index % 3 == 0 && index % 4 == 0 {\n\
    \            sum += index\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpe3uskicu/tmpe3uskicu.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba090aabc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0907a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0907a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0907a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe3uskicu                        0x000055ddff624502 <unavailable> + 5378

    5    libc.so.6                          0x00002ba090c97460 __libc_start_main +
    245

    6    tmpe3uskicu                        0x000055ddff624169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in 0..<lst.count {\n        if index % 3 == 0 && index %\
    \ 4 == 0 {\n            sum += lst[index]\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmp9yol7h5w/tmp9yol7h5w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6fa7cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6fa4c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6fa4c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6fa4c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9yol7h5w                        0x000056514a600542 <unavailable> + 5442

    5    libc.so.6                          0x00002ae6fa9b7460 __libc_start_main +
    245

    6    tmp9yol7h5w                        0x000056514a6001a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for i in lst {\n        if i % 3 == 0 && i % 4 == 0 {\n           \
    \ sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst: [1, 4,\
    \ 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpe8tn2d1v/tmpe8tn2d1v.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae40ea52c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae40e749b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae40e749988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae40e7487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe8tn2d1v                        0x000055b15a762502 <unavailable> + 5378

    5    libc.so.6                          0x00002ae40ec3e460 __libc_start_main +
    245

    6    tmpe8tn2d1v                        0x000055b15a762169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in lst {\n        if index % 3 == 0 && index % 4 == 0 {\n\
    \            sum += index\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpe3uskicu/tmpe3uskicu.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba090aabc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0907a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0907a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0907a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe3uskicu                        0x000055ddff624502 <unavailable> + 5378

    5    libc.so.6                          0x00002ba090c97460 __libc_start_main +
    245

    6    tmpe3uskicu                        0x000055ddff624169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in 0..<lst.count {\n        if index % 3 == 0 && index %\
    \ 4 == 0 {\n            sum += lst[index]\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmp9yol7h5w/tmp9yol7h5w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6fa7cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6fa4c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6fa4c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6fa4c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9yol7h5w                        0x000056514a600542 <unavailable> + 5442

    5    libc.so.6                          0x00002ae6fa9b7460 __libc_start_main +
    245

    6    tmp9yol7h5w                        0x000056514a6001a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for i in lst {\n        if i % 3 == 0 {\n            sum += i * i\n\
    \        } else if i % 4 == 0 {\n            sum += i * i\n        } else {\n\
    \            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpz6_tme29/tmpz6_tme29.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee886aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee883a1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee883a1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee883a07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz6_tme29                        0x000056391614d502 <unavailable> + 5378

    5    libc.so.6                          0x00002aee88896460 __libc_start_main +
    245

    6    tmpz6_tme29                        0x000056391614d169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in 0..<lst.count {\n        if index % 3 == 0 && index %\
    \ 4 == 0 {\n            sum += lst[index]\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmp9yol7h5w/tmp9yol7h5w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6fa7cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6fa4c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6fa4c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6fa4c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9yol7h5w                        0x000056514a600542 <unavailable> + 5442

    5    libc.so.6                          0x00002ae6fa9b7460 __libc_start_main +
    245

    6    tmp9yol7h5w                        0x000056514a6001a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for i in lst {\n        if i % 3 == 0 {\n            sum += i\n   \
    \     }\n        else if i % 4 == 0 {\n            sum += i * i\n        }\n \
    \       else {\n            sum += i * i * i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmp9bmhu6ye/tmp9bmhu6ye.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7052718c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b705240fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b705240f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b705240e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9bmhu6ye                        0x000055bfda484502 <unavailable> + 5378

    5    libc.so.6                          0x00002b7052904460 __libc_start_main +
    245

    6    tmp9bmhu6ye                        0x000055bfda484169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for x in lst {\n        if x % 3 == 0 && x % 4 == 0 {\n           \
    \ sum += x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst: [1, 4,\
    \ 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpi1et6uol/tmpi1et6uol.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b79524c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b79521c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b79521c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b79521bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi1et6uol                        0x0000556f7e8b6502 <unavailable> + 5378

    5    libc.so.6                          0x00002b79526b5460 __libc_start_main +
    245

    6    tmpi1et6uol                        0x0000556f7e8b6169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in lst {\n        if index % 3 == 0 && index % 4 == 0 {\n\
    \            sum += index\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpe3uskicu/tmpe3uskicu.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba090aabc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0907a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0907a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0907a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe3uskicu                        0x000055ddff624502 <unavailable> + 5378

    5    libc.so.6                          0x00002ba090c97460 __libc_start_main +
    245

    6    tmpe3uskicu                        0x000055ddff624169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for i in lst {\n        if i % 3 == 0 && i % 4 == 0 {\n           \
    \ sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst: [1, 4,\
    \ 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpe8tn2d1v/tmpe8tn2d1v.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae40ea52c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae40e749b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae40e749988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae40e7487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe8tn2d1v                        0x000055b15a762502 <unavailable> + 5378

    5    libc.so.6                          0x00002ae40ec3e460 __libc_start_main +
    245

    6    tmpe8tn2d1v                        0x000055b15a762169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in lst {\n        if index%3 == 0 && index%4 == 0 {\n   \
    \         sum += index\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpljhq6x4v/tmpljhq6x4v.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade96b4fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade96846b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade96846988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade968457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpljhq6x4v                        0x000056193606c502 <unavailable> + 5378

    5    libc.so.6                          0x00002ade96d3b460 __libc_start_main +
    245

    6    tmpljhq6x4v                        0x000056193606c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in 0..<lst.count {\n        if index % 3 == 0 && index %\
    \ 4 == 0 {\n            sum += lst[index]\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmp9yol7h5w/tmp9yol7h5w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6fa7cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6fa4c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6fa4c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6fa4c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9yol7h5w                        0x000056514a600542 <unavailable> + 5442

    5    libc.so.6                          0x00002ae6fa9b7460 __libc_start_main +
    245

    6    tmp9yol7h5w                        0x000056514a6001a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for i : Int in lst {\n        if i % 3 == 0 && i % 4 == 0 {\n     \
    \       sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpw42wfb56/tmpw42wfb56.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc1bc6bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc1b962b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc1b962988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc1b9617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw42wfb56                        0x0000557398f1a502 <unavailable> + 5378

    5    libc.so.6                          0x00002afc1be57460 __libc_start_main +
    245

    6    tmpw42wfb56                        0x0000557398f1a169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for i in lst {\n        if i % 3 == 0 && i % 4 == 0 {\n           \
    \ sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst: [1, 4,\
    \ 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpe8tn2d1v/tmpe8tn2d1v.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae40ea52c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae40e749b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae40e749988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae40e7487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe8tn2d1v                        0x000055b15a762502 <unavailable> + 5378

    5    libc.so.6                          0x00002ae40ec3e460 __libc_start_main +
    245

    6    tmpe8tn2d1v                        0x000055b15a762169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in lst {\n        if index % 3 == 0 && index % 4 == 0 {\n\
    \            sum += index\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpe3uskicu/tmpe3uskicu.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba090aabc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0907a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0907a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0907a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe3uskicu                        0x000055ddff624502 <unavailable> + 5378

    5    libc.so.6                          0x00002ba090c97460 __libc_start_main +
    245

    6    tmpe3uskicu                        0x000055ddff624169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in lst {\n        if index % 3 == 0 && index % 4 == 0 {\n\
    \            sum += index\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpe3uskicu/tmpe3uskicu.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba090aabc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0907a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0907a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0907a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe3uskicu                        0x000055ddff624502 <unavailable> + 5378

    5    libc.so.6                          0x00002ba090c97460 __libc_start_main +
    245

    6    tmpe3uskicu                        0x000055ddff624169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in 0..<lst.count {\n        if index % 3 == 0 && index %\
    \ 4 == 0 {\n            sum += lst[index]\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmp9yol7h5w/tmp9yol7h5w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6fa7cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6fa4c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6fa4c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6fa4c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9yol7h5w                        0x000056514a600542 <unavailable> + 5442

    5    libc.so.6                          0x00002ae6fa9b7460 __libc_start_main +
    245

    6    tmp9yol7h5w                        0x000056514a6001a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in lst {\n        if index % 3 == 0 && index % 4 == 0 {\n\
    \            sum += index\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpe3uskicu/tmpe3uskicu.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba090aabc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0907a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0907a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0907a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe3uskicu                        0x000055ddff624502 <unavailable> + 5378

    5    libc.so.6                          0x00002ba090c97460 __libc_start_main +
    245

    6    tmpe3uskicu                        0x000055ddff624169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in lst {\n        if index % 3 == 0 && index % 4 == 0 {\n\
    \            sum += index\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpe3uskicu/tmpe3uskicu.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba090aabc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0907a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0907a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0907a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe3uskicu                        0x000055ddff624502 <unavailable> + 5378

    5    libc.so.6                          0x00002ba090c97460 __libc_start_main +
    245

    6    tmpe3uskicu                        0x000055ddff624169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in lst {\n        if index%3 == 0 && index%4 == 0 {\n   \
    \         sum += index\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpljhq6x4v/tmpljhq6x4v.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade96b4fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade96846b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade96846988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade968457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpljhq6x4v                        0x000056193606c502 <unavailable> + 5378

    5    libc.so.6                          0x00002ade96d3b460 __libc_start_main +
    245

    6    tmpljhq6x4v                        0x000056193606c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in lst {\n        if index % 3 == 0 && index % 4 == 0 {\n\
    \            sum += index\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpe3uskicu/tmpe3uskicu.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba090aabc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0907a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0907a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0907a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe3uskicu                        0x000055ddff624502 <unavailable> + 5378

    5    libc.so.6                          0x00002ba090c97460 __libc_start_main +
    245

    6    tmpe3uskicu                        0x000055ddff624169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in 0..<lst.count {\n        if index % 3 == 0 && index %\
    \ 4 == 0 {\n            sum += lst[index]\n        } else if index % 3 == 0 {\n\
    \            sum += lst[index] * lst[index]\n        } else if index % 4 == 0\
    \ {\n            sum += lst[index] * lst[index]\n        } else {\n          \
    \  sum += lst[index]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpk3jb868k/tmpk3jb868k.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39993cfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b39990c6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b39990c6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b39990c57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk3jb868k                        0x000055d6f51a08be <unavailable> + 6334

    5    libc.so.6                          0x00002b39995bb460 __libc_start_main +
    245

    6    tmpk3jb868k                        0x000055d6f51a01a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in 0..<lst.count {\n        if index % 3 == 0 && index %\
    \ 4 == 0 {\n            sum += lst[index]\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmp9yol7h5w/tmp9yol7h5w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6fa7cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6fa4c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6fa4c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6fa4c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9yol7h5w                        0x000056514a600542 <unavailable> + 5442

    5    libc.so.6                          0x00002ae6fa9b7460 __libc_start_main +
    245

    6    tmp9yol7h5w                        0x000056514a6001a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in 0..<lst.count {\n        if index % 3 == 0 && index %\
    \ 4 == 0 {\n            sum += lst[index]\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmp9yol7h5w/tmp9yol7h5w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6fa7cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6fa4c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6fa4c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6fa4c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9yol7h5w                        0x000056514a600542 <unavailable> + 5442

    5    libc.so.6                          0x00002ae6fa9b7460 __libc_start_main +
    245

    6    tmp9yol7h5w                        0x000056514a6001a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for x in lst {\n        if x % 3 == 0 && x % 4 == 0 {\n           \
    \ sum += x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst: [1, 4,\
    \ 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpi1et6uol/tmpi1et6uol.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b79524c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b79521c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b79521c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b79521bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi1et6uol                        0x0000556f7e8b6502 <unavailable> + 5378

    5    libc.so.6                          0x00002b79526b5460 __libc_start_main +
    245

    6    tmpi1et6uol                        0x0000556f7e8b6169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in 0..<lst.count {\n        if index % 3 == 0 && index %\
    \ 4 == 0 {\n            sum += lst[index]\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmp9yol7h5w/tmp9yol7h5w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6fa7cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6fa4c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6fa4c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6fa4c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9yol7h5w                        0x000056514a600542 <unavailable> + 5442

    5    libc.so.6                          0x00002ae6fa9b7460 __libc_start_main +
    245

    6    tmp9yol7h5w                        0x000056514a6001a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in lst {\n        if index % 3 == 0 && index % 4 == 0 {\n\
    \            sum += index\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpe3uskicu/tmpe3uskicu.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba090aabc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0907a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0907a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0907a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe3uskicu                        0x000055ddff624502 <unavailable> + 5378

    5    libc.so.6                          0x00002ba090c97460 __libc_start_main +
    245

    6    tmpe3uskicu                        0x000055ddff624169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in 0..<lst.count {\n        if index % 3 == 0 && index %\
    \ 4 == 0 {\n            sum += lst[index]\n        } else if index % 3 == 0 {\n\
    \            sum += lst[index] * lst[index]\n        } else if index % 4 == 0\
    \ {\n            sum += lst[index] * lst[index]\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1, 2,\
    \ 3]) == 6)\nassert(sum_squares(lst: [1, 4, 9]) == 14)\nassert(sum_squares(lst:\
    \ [] as [Int]) == 0)\nassert(sum_squares(lst: [1, 1, 1, 1, 1, 1, 1, 1, 1]) ==\
    \ 9)\nassert(sum_squares(lst: [-1, -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst:\
    \ [0]) == 0)\nassert(sum_squares(lst: [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst:\
    \ [-56, -99, 1, 0, -2]) == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0,\
    \ 0, 0, -1]) == 0)\nassert(sum_squares(lst: [-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]) == -14196)\nassert(sum_squares(lst: [-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)"
  status: Exception
  stderr: 'tmplessk0ry/tmplessk0ry.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc9cee7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc9cbdeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc9cbde988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc9cbdd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplessk0ry                        0x000055a483997542 <unavailable> + 5442

    5    libc.so.6                          0x00002afc9d0d3460 __libc_start_main +
    245

    6    tmplessk0ry                        0x000055a4839971a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in lst {\n        if index % 3 == 0 && index % 4 == 0 {\n\
    \            sum += index\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpe3uskicu/tmpe3uskicu.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba090aabc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0907a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0907a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0907a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe3uskicu                        0x000055ddff624502 <unavailable> + 5378

    5    libc.so.6                          0x00002ba090c97460 __libc_start_main +
    245

    6    tmpe3uskicu                        0x000055ddff624169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for i in lst {\n        if i % 3 == 0 {\n            sum += i * i\n\
    \        } else if i % 4 == 0 {\n            sum += i * i\n        } else {\n\
    \            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpz6_tme29/tmpz6_tme29.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee886aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee883a1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee883a1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee883a07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz6_tme29                        0x000056391614d502 <unavailable> + 5378

    5    libc.so.6                          0x00002aee88896460 __libc_start_main +
    245

    6    tmpz6_tme29                        0x000056391614d169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in lst {\n        if index % 3 == 0 && index % 4 == 0 {\n\
    \            sum += index\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpe3uskicu/tmpe3uskicu.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba090aabc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0907a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0907a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0907a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe3uskicu                        0x000055ddff624502 <unavailable> + 5378

    5    libc.so.6                          0x00002ba090c97460 __libc_start_main +
    245

    6    tmpe3uskicu                        0x000055ddff624169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in lst {\n        if index % 3 == 0 && index % 4 == 0 {\n\
    \            sum += index\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpe3uskicu/tmpe3uskicu.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba090aabc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0907a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0907a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0907a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe3uskicu                        0x000055ddff624502 <unavailable> + 5378

    5    libc.so.6                          0x00002ba090c97460 __libc_start_main +
    245

    6    tmpe3uskicu                        0x000055ddff624169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for x in lst {\n        if x % 3 == 0 && x % 4 == 0 {\n           \
    \ sum += x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst: [1, 4,\
    \ 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpi1et6uol/tmpi1et6uol.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b79524c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b79521c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b79521c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b79521bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi1et6uol                        0x0000556f7e8b6502 <unavailable> + 5378

    5    libc.so.6                          0x00002b79526b5460 __libc_start_main +
    245

    6    tmpi1et6uol                        0x0000556f7e8b6169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in lst {\n        if index % 3 == 0 && index % 4 == 0 {\n\
    \            sum += index\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpe3uskicu/tmpe3uskicu.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba090aabc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0907a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0907a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0907a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe3uskicu                        0x000055ddff624502 <unavailable> + 5378

    5    libc.so.6                          0x00002ba090c97460 __libc_start_main +
    245

    6    tmpe3uskicu                        0x000055ddff624169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in 0..<lst.count {\n        if index % 3 == 0 && index %\
    \ 4 == 0 {\n            sum += lst[index]\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmp9yol7h5w/tmp9yol7h5w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6fa7cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6fa4c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6fa4c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6fa4c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9yol7h5w                        0x000056514a600542 <unavailable> + 5442

    5    libc.so.6                          0x00002ae6fa9b7460 __libc_start_main +
    245

    6    tmp9yol7h5w                        0x000056514a6001a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for x in lst {\n        if x % 3 == 0 && x % 4 == 0 {\n           \
    \ sum += x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst: [1, 4,\
    \ 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpi1et6uol/tmpi1et6uol.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b79524c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b79521c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b79521c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b79521bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi1et6uol                        0x0000556f7e8b6502 <unavailable> + 5378

    5    libc.so.6                          0x00002b79526b5460 __libc_start_main +
    245

    6    tmpi1et6uol                        0x0000556f7e8b6169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for i in lst {\n        if i % 3 == 0 && i % 4 == 0 {\n           \
    \ sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst: [1, 4,\
    \ 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpe8tn2d1v/tmpe8tn2d1v.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae40ea52c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae40e749b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae40e749988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae40e7487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe8tn2d1v                        0x000055b15a762502 <unavailable> + 5378

    5    libc.so.6                          0x00002ae40ec3e460 __libc_start_main +
    245

    6    tmpe8tn2d1v                        0x000055b15a762169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in lst {\n        if index % 3 == 0 && index % 4 == 0 {\n\
    \            sum += index\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpe3uskicu/tmpe3uskicu.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba090aabc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0907a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0907a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0907a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe3uskicu                        0x000055ddff624502 <unavailable> + 5378

    5    libc.so.6                          0x00002ba090c97460 __libc_start_main +
    245

    6    tmpe3uskicu                        0x000055ddff624169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in lst {\n        if index % 3 == 0 {\n            sum +=\
    \ index\n        }\n        else if index % 4 == 0 {\n            sum += index\n\
    \        }\n        else {\n            sum += index * index\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1,\
    \ 2, 3]) == 6)\nassert(sum_squares(lst: [1, 4, 9]) == 14)\nassert(sum_squares(lst:\
    \ [] as [Int]) == 0)\nassert(sum_squares(lst: [1, 1, 1, 1, 1, 1, 1, 1, 1]) ==\
    \ 9)\nassert(sum_squares(lst: [-1, -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst:\
    \ [0]) == 0)\nassert(sum_squares(lst: [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst:\
    \ [-56, -99, 1, 0, -2]) == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0,\
    \ 0, 0, -1]) == 0)\nassert(sum_squares(lst: [-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]) == -14196)\nassert(sum_squares(lst: [-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)"
  status: Exception
  stderr: 'tmpfjj8mz13/tmpfjj8mz13.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d021bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d01eb1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d01eb1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d01eb07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfjj8mz13                        0x000056258628b502 <unavailable> + 5378

    5    libc.so.6                          0x00002b8d023a6460 __libc_start_main +
    245

    6    tmpfjj8mz13                        0x000056258628b169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in lst {\n        if index%3 != 0 && index%4 != 0 {\n   \
    \         sum += index\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpsy6d3n1e/tmpsy6d3n1e.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2f37fa5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2f37c9cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2f37c9c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2f37c9b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsy6d3n1e                        0x000055c623a3e502 <unavailable> + 5378

    5    libc.so.6                          0x00002b2f38191460 __libc_start_main +
    245

    6    tmpsy6d3n1e                        0x000055c623a3e169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in 0..<lst.count {\n        if index % 3 == 0 {\n       \
    \     sum += lst[index]\n        }\n        if index % 4 == 0 {\n            sum\
    \ += lst[index]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpz58io_f6/tmpz58io_f6.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b90ce8edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b90ce5e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b90ce5e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b90ce5e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz58io_f6                        0x000055ec46997542 <unavailable> + 5442

    5    libc.so.6                          0x00002b90cead9460 __libc_start_main +
    245

    6    tmpz58io_f6                        0x000055ec469971a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in 0..<lst.count {\n        if index % 3 == 0 && index %\
    \ 4 == 0 {\n            sum += lst[index]\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmp9yol7h5w/tmp9yol7h5w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6fa7cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6fa4c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6fa4c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6fa4c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9yol7h5w                        0x000056514a600542 <unavailable> + 5442

    5    libc.so.6                          0x00002ae6fa9b7460 __libc_start_main +
    245

    6    tmp9yol7h5w                        0x000056514a6001a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in 0..<lst.count {\n        if index % 3 == 0 {\n       \
    \     sum += lst[index]\n        }\n        if index % 4 == 0 {\n            sum\
    \ += lst[index]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpz58io_f6/tmpz58io_f6.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b90ce8edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b90ce5e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b90ce5e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b90ce5e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz58io_f6                        0x000055ec46997542 <unavailable> + 5442

    5    libc.so.6                          0x00002b90cead9460 __libc_start_main +
    245

    6    tmpz58io_f6                        0x000055ec469971a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in lst {\n        if index % 3 == 0 && index % 4 == 0 {\n\
    \            sum += index\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpe3uskicu/tmpe3uskicu.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba090aabc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0907a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0907a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0907a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe3uskicu                        0x000055ddff624502 <unavailable> + 5378

    5    libc.so.6                          0x00002ba090c97460 __libc_start_main +
    245

    6    tmpe3uskicu                        0x000055ddff624169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in lst {\n        if index % 3 == 0 && index % 4 == 0 {\n\
    \            sum += index\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpe3uskicu/tmpe3uskicu.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba090aabc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0907a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0907a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0907a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe3uskicu                        0x000055ddff624502 <unavailable> + 5378

    5    libc.so.6                          0x00002ba090c97460 __libc_start_main +
    245

    6    tmpe3uskicu                        0x000055ddff624169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in 0..<lst.count {\n        if index % 3 == 0 && index %\
    \ 4 == 0 {\n            sum += lst[index]\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmp9yol7h5w/tmp9yol7h5w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6fa7cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6fa4c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6fa4c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6fa4c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9yol7h5w                        0x000056514a600542 <unavailable> + 5442

    5    libc.so.6                          0x00002ae6fa9b7460 __libc_start_main +
    245

    6    tmp9yol7h5w                        0x000056514a6001a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in lst {\n        if index % 3 == 0 && index % 4 == 0 {\n\
    \            sum += index\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpe3uskicu/tmpe3uskicu.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba090aabc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0907a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0907a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0907a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe3uskicu                        0x000055ddff624502 <unavailable> + 5378

    5    libc.so.6                          0x00002ba090c97460 __libc_start_main +
    245

    6    tmpe3uskicu                        0x000055ddff624169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in lst {\n        if index%3 != 0 {\n            sum += index\n\
    \        }\n        if index%4 != 0 {\n            sum += index*index\n      \
    \  }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1, 2, 3]) == 6)\nassert(sum_squares(lst: [1, 4, 9]) == 14)\nassert(sum_squares(lst:\
    \ [] as [Int]) == 0)\nassert(sum_squares(lst: [1, 1, 1, 1, 1, 1, 1, 1, 1]) ==\
    \ 9)\nassert(sum_squares(lst: [-1, -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst:\
    \ [0]) == 0)\nassert(sum_squares(lst: [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst:\
    \ [-56, -99, 1, 0, -2]) == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0,\
    \ 0, 0, -1]) == 0)\nassert(sum_squares(lst: [-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]) == -14196)\nassert(sum_squares(lst: [-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)"
  status: Exception
  stderr: 'tmpmev9uwhc/tmpmev9uwhc.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a668bdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a665b4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a665b4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a665b37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmev9uwhc                        0x00005629d0ab2502 <unavailable> + 5378

    5    libc.so.6                          0x00002b3a66aa9460 __libc_start_main +
    245

    6    tmpmev9uwhc                        0x00005629d0ab2169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in lst {\n        if index % 3 == 0 && index % 4 == 0 {\n\
    \            sum += index\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpe3uskicu/tmpe3uskicu.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba090aabc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0907a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0907a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0907a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe3uskicu                        0x000055ddff624502 <unavailable> + 5378

    5    libc.so.6                          0x00002ba090c97460 __libc_start_main +
    245

    6    tmpe3uskicu                        0x000055ddff624169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in 0..<lst.count {\n        if index % 3 == 0 && index %\
    \ 4 == 0 {\n            sum += lst[index]\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmp9yol7h5w/tmp9yol7h5w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6fa7cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6fa4c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6fa4c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6fa4c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9yol7h5w                        0x000056514a600542 <unavailable> + 5442

    5    libc.so.6                          0x00002ae6fa9b7460 __libc_start_main +
    245

    6    tmp9yol7h5w                        0x000056514a6001a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in 0..<lst.count {\n        if index % 3 == 0 && index %\
    \ 4 == 0 {\n            sum += lst[index]\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmp9yol7h5w/tmp9yol7h5w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6fa7cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6fa4c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6fa4c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6fa4c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9yol7h5w                        0x000056514a600542 <unavailable> + 5442

    5    libc.so.6                          0x00002ae6fa9b7460 __libc_start_main +
    245

    6    tmp9yol7h5w                        0x000056514a6001a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in 0..<lst.count {\n        if index % 3 == 0 && index %\
    \ 4 == 0 {\n            sum += lst[index]\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmp9yol7h5w/tmp9yol7h5w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6fa7cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6fa4c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6fa4c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6fa4c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9yol7h5w                        0x000056514a600542 <unavailable> + 5442

    5    libc.so.6                          0x00002ae6fa9b7460 __libc_start_main +
    245

    6    tmp9yol7h5w                        0x000056514a6001a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for x in lst {\n        if x % 3 == 0 && x % 4 == 0 {\n           \
    \ sum += x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst: [1, 4,\
    \ 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpi1et6uol/tmpi1et6uol.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b79524c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b79521c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b79521c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b79521bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi1et6uol                        0x0000556f7e8b6502 <unavailable> + 5378

    5    libc.so.6                          0x00002b79526b5460 __libc_start_main +
    245

    6    tmpi1et6uol                        0x0000556f7e8b6169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in 0..<lst.count {\n        if index % 3 == 0 && index %\
    \ 4 == 0 {\n            sum += lst[index]\n        } else if index % 3 == 0 {\n\
    \            sum += lst[index] * lst[index]\n        } else if index % 4 == 0\
    \ {\n            sum += lst[index] * lst[index]\n        } else {\n          \
    \  sum += lst[index]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpk3jb868k/tmpk3jb868k.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39993cfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b39990c6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b39990c6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b39990c57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk3jb868k                        0x000055d6f51a08be <unavailable> + 6334

    5    libc.so.6                          0x00002b39995bb460 __libc_start_main +
    245

    6    tmpk3jb868k                        0x000055d6f51a01a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in lst {\n        if index % 3 == 0 && index % 4 == 0 {\n\
    \            sum += index\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpe3uskicu/tmpe3uskicu.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba090aabc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0907a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0907a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0907a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe3uskicu                        0x000055ddff624502 <unavailable> + 5378

    5    libc.so.6                          0x00002ba090c97460 __libc_start_main +
    245

    6    tmpe3uskicu                        0x000055ddff624169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in 0..<lst.count {\n        if index % 3 == 0 && index %\
    \ 4 == 0 {\n            sum += lst[index]\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmp9yol7h5w/tmp9yol7h5w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6fa7cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6fa4c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6fa4c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6fa4c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9yol7h5w                        0x000056514a600542 <unavailable> + 5442

    5    libc.so.6                          0x00002ae6fa9b7460 __libc_start_main +
    245

    6    tmp9yol7h5w                        0x000056514a6001a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for i in lst {\n        if i % 3 == 0 && i % 4 == 0 {\n           \
    \ sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst: [1, 4,\
    \ 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpe8tn2d1v/tmpe8tn2d1v.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae40ea52c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae40e749b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae40e749988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae40e7487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe8tn2d1v                        0x000055b15a762502 <unavailable> + 5378

    5    libc.so.6                          0x00002ae40ec3e460 __libc_start_main +
    245

    6    tmpe8tn2d1v                        0x000055b15a762169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for i in lst {\n        if i % 3 == 0 && i % 4 == 0 {\n           \
    \ sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst: [1, 4,\
    \ 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpe8tn2d1v/tmpe8tn2d1v.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae40ea52c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae40e749b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae40e749988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae40e7487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe8tn2d1v                        0x000055b15a762502 <unavailable> + 5378

    5    libc.so.6                          0x00002ae40ec3e460 __libc_start_main +
    245

    6    tmpe8tn2d1v                        0x000055b15a762169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in 0..<lst.count {\n        if index % 3 == 0 && index %\
    \ 4 == 0 {\n            sum += lst[index]\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmp9yol7h5w/tmp9yol7h5w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6fa7cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6fa4c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6fa4c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6fa4c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9yol7h5w                        0x000056514a600542 <unavailable> + 5442

    5    libc.so.6                          0x00002ae6fa9b7460 __libc_start_main +
    245

    6    tmp9yol7h5w                        0x000056514a6001a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in lst {\n        if index%3 == 0 && index%4 == 0 {\n   \
    \         sum += index\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpljhq6x4v/tmpljhq6x4v.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade96b4fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade96846b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade96846988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade968457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpljhq6x4v                        0x000056193606c502 <unavailable> + 5378

    5    libc.so.6                          0x00002ade96d3b460 __libc_start_main +
    245

    6    tmpljhq6x4v                        0x000056193606c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in lst {\n        if index % 3 == 0 && index % 4 == 0 {\n\
    \            sum += index\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpe3uskicu/tmpe3uskicu.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba090aabc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0907a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0907a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0907a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe3uskicu                        0x000055ddff624502 <unavailable> + 5378

    5    libc.so.6                          0x00002ba090c97460 __libc_start_main +
    245

    6    tmpe3uskicu                        0x000055ddff624169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for i : Int in lst {\n        if i % 3 == 0 && i % 4 == 0 {\n     \
    \       sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpw42wfb56/tmpw42wfb56.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc1bc6bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc1b962b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc1b962988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc1b9617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw42wfb56                        0x0000557398f1a502 <unavailable> + 5378

    5    libc.so.6                          0x00002afc1be57460 __libc_start_main +
    245

    6    tmpw42wfb56                        0x0000557398f1a169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in 0..<lst.count {\n        if index % 3 == 0 && index %\
    \ 4 == 0 {\n            sum += lst[index]\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmp9yol7h5w/tmp9yol7h5w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6fa7cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6fa4c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6fa4c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6fa4c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9yol7h5w                        0x000056514a600542 <unavailable> + 5442

    5    libc.so.6                          0x00002ae6fa9b7460 __libc_start_main +
    245

    6    tmp9yol7h5w                        0x000056514a6001a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in 0..<lst.count {\n        if index % 3 == 0 && index %\
    \ 4 == 0 {\n            sum += lst[index]\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmp9yol7h5w/tmp9yol7h5w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6fa7cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6fa4c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6fa4c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6fa4c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9yol7h5w                        0x000056514a600542 <unavailable> + 5442

    5    libc.so.6                          0x00002ae6fa9b7460 __libc_start_main +
    245

    6    tmp9yol7h5w                        0x000056514a6001a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in 0..<lst.count {\n        if index % 3 == 0 && index %\
    \ 4 == 0 {\n            sum += lst[index]\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmp9yol7h5w/tmp9yol7h5w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6fa7cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6fa4c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6fa4c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6fa4c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9yol7h5w                        0x000056514a600542 <unavailable> + 5442

    5    libc.so.6                          0x00002ae6fa9b7460 __libc_start_main +
    245

    6    tmp9yol7h5w                        0x000056514a6001a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for i in lst {\n        if i % 3 == 0 {\n            sum += i * i\n\
    \        } else if i % 4 == 0 {\n            sum += i * i\n        } else {\n\
    \            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpz6_tme29/tmpz6_tme29.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee886aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee883a1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee883a1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee883a07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz6_tme29                        0x000056391614d502 <unavailable> + 5378

    5    libc.so.6                          0x00002aee88896460 __libc_start_main +
    245

    6    tmpz6_tme29                        0x000056391614d169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in lst {\n        if index % 3 == 0 && index % 4 == 0 {\n\
    \            sum += index\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpe3uskicu/tmpe3uskicu.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba090aabc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0907a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0907a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0907a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe3uskicu                        0x000055ddff624502 <unavailable> + 5378

    5    libc.so.6                          0x00002ba090c97460 __libc_start_main +
    245

    6    tmpe3uskicu                        0x000055ddff624169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in 0..<lst.count {\n        if index % 3 == 0 && index %\
    \ 4 == 0 {\n            sum += lst[index]\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmp9yol7h5w/tmp9yol7h5w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6fa7cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6fa4c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6fa4c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6fa4c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9yol7h5w                        0x000056514a600542 <unavailable> + 5442

    5    libc.so.6                          0x00002ae6fa9b7460 __libc_start_main +
    245

    6    tmp9yol7h5w                        0x000056514a6001a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in lst {\n        if index % 3 == 0 && index % 4 == 0 {\n\
    \            sum += index\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpe3uskicu/tmpe3uskicu.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba090aabc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0907a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0907a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0907a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe3uskicu                        0x000055ddff624502 <unavailable> + 5378

    5    libc.so.6                          0x00002ba090c97460 __libc_start_main +
    245

    6    tmpe3uskicu                        0x000055ddff624169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in 0..<lst.count {\n        if index % 3 == 0 && index %\
    \ 4 == 0 {\n            sum += lst[index]\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmp9yol7h5w/tmp9yol7h5w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6fa7cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6fa4c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6fa4c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6fa4c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9yol7h5w                        0x000056514a600542 <unavailable> + 5442

    5    libc.so.6                          0x00002ae6fa9b7460 __libc_start_main +
    245

    6    tmp9yol7h5w                        0x000056514a6001a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in 0..<lst.count {\n        if index % 3 == 0 && index %\
    \ 4 == 0 {\n            sum += lst[index]\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmp9yol7h5w/tmp9yol7h5w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6fa7cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6fa4c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6fa4c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6fa4c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9yol7h5w                        0x000056514a600542 <unavailable> + 5442

    5    libc.so.6                          0x00002ae6fa9b7460 __libc_start_main +
    245

    6    tmp9yol7h5w                        0x000056514a6001a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in 0..<lst.count {\n        if index % 3 == 0 && index %\
    \ 4 == 0 {\n            sum += lst[index]\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmp9yol7h5w/tmp9yol7h5w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6fa7cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6fa4c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6fa4c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6fa4c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9yol7h5w                        0x000056514a600542 <unavailable> + 5442

    5    libc.so.6                          0x00002ae6fa9b7460 __libc_start_main +
    245

    6    tmp9yol7h5w                        0x000056514a6001a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in 0..<lst.count {\n        if index % 3 == 0 {\n       \
    \     sum += lst[index]\n        }\n        else if index % 4 == 0 {\n       \
    \     sum += lst[index]\n        }\n        else {\n            sum += lst[index]\
    \ * lst[index]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmptaxq6d97/tmptaxq6d97.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed100a5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed0fd9cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed0fd9c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed0fd9b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptaxq6d97                        0x000055e5e89a8542 <unavailable> + 5442

    5    libc.so.6                          0x00002aed10291460 __libc_start_main +
    245

    6    tmptaxq6d97                        0x000055e5e89a81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for i in lst {\n        if i % 3 == 0 {\n            sum += i * i\n\
    \        } else if i % 4 == 0 {\n            sum += i * i\n        } else {\n\
    \            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpz6_tme29/tmpz6_tme29.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee886aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee883a1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee883a1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee883a07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz6_tme29                        0x000056391614d502 <unavailable> + 5378

    5    libc.so.6                          0x00002aee88896460 __libc_start_main +
    245

    6    tmpz6_tme29                        0x000056391614d169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for i in lst {\n        if i % 3 == 0 && i % 4 == 0 {\n           \
    \ sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst: [1, 4,\
    \ 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpe8tn2d1v/tmpe8tn2d1v.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae40ea52c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae40e749b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae40e749988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae40e7487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe8tn2d1v                        0x000055b15a762502 <unavailable> + 5378

    5    libc.so.6                          0x00002ae40ec3e460 __libc_start_main +
    245

    6    tmpe8tn2d1v                        0x000055b15a762169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in lst {\n        if index%3 != 0 && index%4 != 0 {\n   \
    \         sum += index\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpsy6d3n1e/tmpsy6d3n1e.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2f37fa5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2f37c9cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2f37c9c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2f37c9b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsy6d3n1e                        0x000055c623a3e502 <unavailable> + 5378

    5    libc.so.6                          0x00002b2f38191460 __libc_start_main +
    245

    6    tmpsy6d3n1e                        0x000055c623a3e169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for i in lst {\n        if i % 3 == 0 {\n            sum += i * i\n\
    \        }\n        else if i % 4 == 0 {\n            sum += i * i\n        }\n\
    \        else {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmp3duyzcwy/tmp3duyzcwy.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ce349bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ce3192b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ce3192988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ce31917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3duyzcwy                        0x0000564b3d758502 <unavailable> + 5378

    5    libc.so.6                          0x00002b8ce3687460 __libc_start_main +
    245

    6    tmp3duyzcwy                        0x0000564b3d758169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for x in lst {\n        if x % 3 == 0 && x % 4 == 0 {\n           \
    \ sum += x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst: [1, 4,\
    \ 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpi1et6uol/tmpi1et6uol.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b79524c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b79521c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b79521c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b79521bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi1et6uol                        0x0000556f7e8b6502 <unavailable> + 5378

    5    libc.so.6                          0x00002b79526b5460 __libc_start_main +
    245

    6    tmpi1et6uol                        0x0000556f7e8b6169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in 0..<lst.count {\n        if index % 3 == 0 && index %\
    \ 4 == 0 {\n            sum += lst[index]\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmp9yol7h5w/tmp9yol7h5w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6fa7cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6fa4c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6fa4c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6fa4c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9yol7h5w                        0x000056514a600542 <unavailable> + 5442

    5    libc.so.6                          0x00002ae6fa9b7460 __libc_start_main +
    245

    6    tmp9yol7h5w                        0x000056514a6001a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in 0..<lst.count {\n        if index % 3 == 0 && index %\
    \ 4 == 0 {\n            sum += lst[index]\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmp9yol7h5w/tmp9yol7h5w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6fa7cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6fa4c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6fa4c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6fa4c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9yol7h5w                        0x000056514a600542 <unavailable> + 5442

    5    libc.so.6                          0x00002ae6fa9b7460 __libc_start_main +
    245

    6    tmp9yol7h5w                        0x000056514a6001a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in 0..<lst.count {\n        if index % 3 == 0 && index %\
    \ 4 == 0 {\n            sum += lst[index]\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmp9yol7h5w/tmp9yol7h5w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6fa7cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6fa4c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6fa4c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6fa4c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9yol7h5w                        0x000056514a600542 <unavailable> + 5442

    5    libc.so.6                          0x00002ae6fa9b7460 __libc_start_main +
    245

    6    tmp9yol7h5w                        0x000056514a6001a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in 0..<lst.count {\n        if index % 3 == 0 && index %\
    \ 4 == 0 {\n            sum += lst[index]\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmp9yol7h5w/tmp9yol7h5w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6fa7cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6fa4c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6fa4c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6fa4c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9yol7h5w                        0x000056514a600542 <unavailable> + 5442

    5    libc.so.6                          0x00002ae6fa9b7460 __libc_start_main +
    245

    6    tmp9yol7h5w                        0x000056514a6001a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in 0..<lst.count {\n        if index % 3 == 0 && index %\
    \ 4 == 0 {\n            sum += lst[index]\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmp9yol7h5w/tmp9yol7h5w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6fa7cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6fa4c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6fa4c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6fa4c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9yol7h5w                        0x000056514a600542 <unavailable> + 5442

    5    libc.so.6                          0x00002ae6fa9b7460 __libc_start_main +
    245

    6    tmp9yol7h5w                        0x000056514a6001a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for i in lst {\n        if i % 3 == 0 && i % 4 == 0 {\n           \
    \ sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst: [1, 4,\
    \ 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpe8tn2d1v/tmpe8tn2d1v.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae40ea52c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae40e749b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae40e749988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae40e7487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe8tn2d1v                        0x000055b15a762502 <unavailable> + 5378

    5    libc.so.6                          0x00002ae40ec3e460 __libc_start_main +
    245

    6    tmpe8tn2d1v                        0x000055b15a762169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in lst {\n        if index % 3 == 0 {\n            sum +=\
    \ index\n        }\n        else if index % 4 == 0 {\n            sum += index\n\
    \        }\n        else {\n            sum *= index\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1, 2,\
    \ 3]) == 6)\nassert(sum_squares(lst: [1, 4, 9]) == 14)\nassert(sum_squares(lst:\
    \ [] as [Int]) == 0)\nassert(sum_squares(lst: [1, 1, 1, 1, 1, 1, 1, 1, 1]) ==\
    \ 9)\nassert(sum_squares(lst: [-1, -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst:\
    \ [0]) == 0)\nassert(sum_squares(lst: [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst:\
    \ [-56, -99, 1, 0, -2]) == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0,\
    \ 0, 0, -1]) == 0)\nassert(sum_squares(lst: [-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]) == -14196)\nassert(sum_squares(lst: [-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)"
  status: Exception
  stderr: 'tmp3fyncrf2/tmp3fyncrf2.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb76590c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb76287b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb76287988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb762867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3fyncrf2                        0x0000560309208502 <unavailable> + 5378

    5    libc.so.6                          0x00002abb7677c460 __libc_start_main +
    245

    6    tmp3fyncrf2                        0x0000560309208169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in 0..<lst.count {\n        if index % 3 == 0 && index %\
    \ 4 == 0 {\n            sum += lst[index]\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmp9yol7h5w/tmp9yol7h5w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6fa7cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6fa4c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6fa4c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6fa4c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9yol7h5w                        0x000056514a600542 <unavailable> + 5442

    5    libc.so.6                          0x00002ae6fa9b7460 __libc_start_main +
    245

    6    tmp9yol7h5w                        0x000056514a6001a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in 0..<lst.count {\n        if index % 3 == 0 && index %\
    \ 4 == 0 {\n            sum += lst[index]\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmp9yol7h5w/tmp9yol7h5w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6fa7cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6fa4c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6fa4c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6fa4c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9yol7h5w                        0x000056514a600542 <unavailable> + 5442

    5    libc.so.6                          0x00002ae6fa9b7460 __libc_start_main +
    245

    6    tmp9yol7h5w                        0x000056514a6001a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in lst {\n        if index % 3 == 0 && index % 4 == 0 {\n\
    \            sum += index\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpe3uskicu/tmpe3uskicu.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba090aabc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0907a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0907a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0907a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe3uskicu                        0x000055ddff624502 <unavailable> + 5378

    5    libc.so.6                          0x00002ba090c97460 __libc_start_main +
    245

    6    tmpe3uskicu                        0x000055ddff624169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in lst {\n        if index % 3 == 0 && index % 4 == 0 {\n\
    \            sum += index\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpe3uskicu/tmpe3uskicu.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba090aabc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0907a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0907a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0907a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe3uskicu                        0x000055ddff624502 <unavailable> + 5378

    5    libc.so.6                          0x00002ba090c97460 __libc_start_main +
    245

    6    tmpe3uskicu                        0x000055ddff624169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for i in lst {\n        if i % 3 == 0 {\n            sum += i * i\n\
    \        } else if i % 4 == 0 {\n            sum += i * i\n        } else {\n\
    \            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpz6_tme29/tmpz6_tme29.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee886aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee883a1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee883a1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee883a07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz6_tme29                        0x000056391614d502 <unavailable> + 5378

    5    libc.so.6                          0x00002aee88896460 __libc_start_main +
    245

    6    tmpz6_tme29                        0x000056391614d169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in 0..<lst.count {\n        if index % 3 == 0 && index %\
    \ 4 == 0 {\n            sum += lst[index]\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmp9yol7h5w/tmp9yol7h5w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6fa7cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6fa4c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6fa4c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6fa4c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9yol7h5w                        0x000056514a600542 <unavailable> + 5442

    5    libc.so.6                          0x00002ae6fa9b7460 __libc_start_main +
    245

    6    tmp9yol7h5w                        0x000056514a6001a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in lst {\n        if index%3 != 0 {\n            sum += index\n\
    \        }\n        if index%4 != 0 {\n            sum += index\n        }\n \
    \   }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1, 2, 3]) == 6)\nassert(sum_squares(lst: [1, 4, 9]) == 14)\nassert(sum_squares(lst:\
    \ [] as [Int]) == 0)\nassert(sum_squares(lst: [1, 1, 1, 1, 1, 1, 1, 1, 1]) ==\
    \ 9)\nassert(sum_squares(lst: [-1, -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst:\
    \ [0]) == 0)\nassert(sum_squares(lst: [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst:\
    \ [-56, -99, 1, 0, -2]) == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0,\
    \ 0, 0, -1]) == 0)\nassert(sum_squares(lst: [-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]) == -14196)\nassert(sum_squares(lst: [-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)"
  status: Exception
  stderr: 'tmpurei2v8v/tmpurei2v8v.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fe788fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fe7586b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8fe7586988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8fe75857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpurei2v8v                        0x000055e0c89e1502 <unavailable> + 5378

    5    libc.so.6                          0x00002b8fe7a7b460 __libc_start_main +
    245

    6    tmpurei2v8v                        0x000055e0c89e1169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for i in lst {\n        if i % 3 == 0 && i % 4 == 0 {\n           \
    \ sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst: [1, 4,\
    \ 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpe8tn2d1v/tmpe8tn2d1v.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae40ea52c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae40e749b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae40e749988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae40e7487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe8tn2d1v                        0x000055b15a762502 <unavailable> + 5378

    5    libc.so.6                          0x00002ae40ec3e460 __libc_start_main +
    245

    6    tmpe8tn2d1v                        0x000055b15a762169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in lst {\n        if index%3 != 0 {\n            sum += index\n\
    \        }\n        if index%4 != 0 {\n            sum += index\n        }\n \
    \   }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1, 2, 3]) == 6)\nassert(sum_squares(lst: [1, 4, 9]) == 14)\nassert(sum_squares(lst:\
    \ [] as [Int]) == 0)\nassert(sum_squares(lst: [1, 1, 1, 1, 1, 1, 1, 1, 1]) ==\
    \ 9)\nassert(sum_squares(lst: [-1, -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst:\
    \ [0]) == 0)\nassert(sum_squares(lst: [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst:\
    \ [-56, -99, 1, 0, -2]) == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0,\
    \ 0, 0, -1]) == 0)\nassert(sum_squares(lst: [-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]) == -14196)\nassert(sum_squares(lst: [-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)"
  status: Exception
  stderr: 'tmpurei2v8v/tmpurei2v8v.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fe788fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fe7586b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8fe7586988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8fe75857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpurei2v8v                        0x000055e0c89e1502 <unavailable> + 5378

    5    libc.so.6                          0x00002b8fe7a7b460 __libc_start_main +
    245

    6    tmpurei2v8v                        0x000055e0c89e1169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for i in lst {\n        if i % 3 == 0 && i % 4 == 0 {\n           \
    \ sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst: [1, 4,\
    \ 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpe8tn2d1v/tmpe8tn2d1v.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae40ea52c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae40e749b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae40e749988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae40e7487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe8tn2d1v                        0x000055b15a762502 <unavailable> + 5378

    5    libc.so.6                          0x00002ae40ec3e460 __libc_start_main +
    245

    6    tmpe8tn2d1v                        0x000055b15a762169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for i : Int in lst {\n        if i % 3 == 0 && i % 4 == 0 {\n     \
    \       sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpw42wfb56/tmpw42wfb56.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc1bc6bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc1b962b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc1b962988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc1b9617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw42wfb56                        0x0000557398f1a502 <unavailable> + 5378

    5    libc.so.6                          0x00002afc1be57460 __libc_start_main +
    245

    6    tmpw42wfb56                        0x0000557398f1a169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in 0..<lst.count {\n        if index % 3 == 0 && index %\
    \ 4 == 0 {\n            sum += lst[index]\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmp9yol7h5w/tmp9yol7h5w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6fa7cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6fa4c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6fa4c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6fa4c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9yol7h5w                        0x000056514a600542 <unavailable> + 5442

    5    libc.so.6                          0x00002ae6fa9b7460 __libc_start_main +
    245

    6    tmp9yol7h5w                        0x000056514a6001a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in lst {\n        if index % 3 == 0 && index % 4 == 0 {\n\
    \            sum += index\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpe3uskicu/tmpe3uskicu.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba090aabc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0907a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0907a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0907a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe3uskicu                        0x000055ddff624502 <unavailable> + 5378

    5    libc.so.6                          0x00002ba090c97460 __libc_start_main +
    245

    6    tmpe3uskicu                        0x000055ddff624169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for i in lst {\n        if i % 3 == 0 && i % 4 == 0 {\n           \
    \ sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst: [1, 4,\
    \ 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpe8tn2d1v/tmpe8tn2d1v.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae40ea52c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae40e749b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae40e749988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae40e7487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe8tn2d1v                        0x000055b15a762502 <unavailable> + 5378

    5    libc.so.6                          0x00002ae40ec3e460 __libc_start_main +
    245

    6    tmpe8tn2d1v                        0x000055b15a762169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in lst {\n        if index % 3 == 0 && index % 4 == 0 {\n\
    \            sum += index\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpe3uskicu/tmpe3uskicu.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba090aabc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0907a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0907a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0907a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe3uskicu                        0x000055ddff624502 <unavailable> + 5378

    5    libc.so.6                          0x00002ba090c97460 __libc_start_main +
    245

    6    tmpe3uskicu                        0x000055ddff624169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in 0..<lst.count {\n        if index % 3 == 0 && index %\
    \ 4 == 0 {\n            sum += lst[index]\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmp9yol7h5w/tmp9yol7h5w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6fa7cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6fa4c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6fa4c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6fa4c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9yol7h5w                        0x000056514a600542 <unavailable> + 5442

    5    libc.so.6                          0x00002ae6fa9b7460 __libc_start_main +
    245

    6    tmp9yol7h5w                        0x000056514a6001a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in 0..<lst.count {\n        if index % 3 == 0 && index %\
    \ 4 == 0 {\n            sum += lst[index]\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmp9yol7h5w/tmp9yol7h5w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6fa7cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6fa4c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6fa4c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6fa4c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9yol7h5w                        0x000056514a600542 <unavailable> + 5442

    5    libc.so.6                          0x00002ae6fa9b7460 __libc_start_main +
    245

    6    tmp9yol7h5w                        0x000056514a6001a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for x in lst {\n        if x % 3 == 0 {\n            sum += x * x\n\
    \        } else if x % 4 == 0 {\n            sum += x * x\n        } else {\n\
    \            sum += x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmp10yionpu/tmp10yionpu.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac43839bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac438092b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac438092988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac4380917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp10yionpu                        0x0000559dd6c29502 <unavailable> + 5378

    5    libc.so.6                          0x00002ac438587460 __libc_start_main +
    245

    6    tmp10yionpu                        0x0000559dd6c29169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in lst {\n        if index % 3 == 0 && index % 4 == 0 {\n\
    \            sum += index\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpe3uskicu/tmpe3uskicu.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba090aabc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0907a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0907a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0907a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe3uskicu                        0x000055ddff624502 <unavailable> + 5378

    5    libc.so.6                          0x00002ba090c97460 __libc_start_main +
    245

    6    tmpe3uskicu                        0x000055ddff624169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in lst {\n        if index % 3 == 0 && index % 4 == 0 {\n\
    \            sum += index\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpe3uskicu/tmpe3uskicu.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba090aabc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0907a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0907a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0907a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe3uskicu                        0x000055ddff624502 <unavailable> + 5378

    5    libc.so.6                          0x00002ba090c97460 __libc_start_main +
    245

    6    tmpe3uskicu                        0x000055ddff624169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in 0..<lst.count {\n        if index % 3 == 0 && index %\
    \ 4 == 0 {\n            sum += lst[index]\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmp9yol7h5w/tmp9yol7h5w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6fa7cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6fa4c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6fa4c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6fa4c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9yol7h5w                        0x000056514a600542 <unavailable> + 5442

    5    libc.so.6                          0x00002ae6fa9b7460 __libc_start_main +
    245

    6    tmp9yol7h5w                        0x000056514a6001a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in 0..<lst.count {\n        if index % 3 == 0 && index %\
    \ 4 == 0 {\n            sum += lst[index]\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmp9yol7h5w/tmp9yol7h5w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6fa7cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6fa4c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6fa4c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6fa4c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9yol7h5w                        0x000056514a600542 <unavailable> + 5442

    5    libc.so.6                          0x00002ae6fa9b7460 __libc_start_main +
    245

    6    tmp9yol7h5w                        0x000056514a6001a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in lst {\n        if index % 3 == 0 && index % 4 == 0 {\n\
    \            sum += index\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpe3uskicu/tmpe3uskicu.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba090aabc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0907a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0907a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0907a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe3uskicu                        0x000055ddff624502 <unavailable> + 5378

    5    libc.so.6                          0x00002ba090c97460 __libc_start_main +
    245

    6    tmpe3uskicu                        0x000055ddff624169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in lst {\n        if index % 3 == 0 {\n            sum +=\
    \ index\n        }\n        else if index % 4 == 0 {\n            sum += index\n\
    \        }\n        else {\n            sum += index * index\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1,\
    \ 2, 3]) == 6)\nassert(sum_squares(lst: [1, 4, 9]) == 14)\nassert(sum_squares(lst:\
    \ [] as [Int]) == 0)\nassert(sum_squares(lst: [1, 1, 1, 1, 1, 1, 1, 1, 1]) ==\
    \ 9)\nassert(sum_squares(lst: [-1, -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst:\
    \ [0]) == 0)\nassert(sum_squares(lst: [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst:\
    \ [-56, -99, 1, 0, -2]) == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0,\
    \ 0, 0, -1]) == 0)\nassert(sum_squares(lst: [-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]) == -14196)\nassert(sum_squares(lst: [-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)"
  status: Exception
  stderr: 'tmpfjj8mz13/tmpfjj8mz13.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d021bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d01eb1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d01eb1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d01eb07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfjj8mz13                        0x000056258628b502 <unavailable> + 5378

    5    libc.so.6                          0x00002b8d023a6460 __libc_start_main +
    245

    6    tmpfjj8mz13                        0x000056258628b169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for x in lst {\n        if x % 3 == 0 && x % 4 == 0 {\n           \
    \ sum += x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst: [1, 4,\
    \ 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpi1et6uol/tmpi1et6uol.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b79524c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b79521c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b79521c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b79521bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi1et6uol                        0x0000556f7e8b6502 <unavailable> + 5378

    5    libc.so.6                          0x00002b79526b5460 __libc_start_main +
    245

    6    tmpi1et6uol                        0x0000556f7e8b6169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in 0..<lst.count {\n        if index % 3 == 0 && index %\
    \ 4 == 0 {\n            sum += lst[index]\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmp9yol7h5w/tmp9yol7h5w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6fa7cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6fa4c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6fa4c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6fa4c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9yol7h5w                        0x000056514a600542 <unavailable> + 5442

    5    libc.so.6                          0x00002ae6fa9b7460 __libc_start_main +
    245

    6    tmp9yol7h5w                        0x000056514a6001a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in 0..<lst.count {\n        if index % 3 == 0 && index %\
    \ 4 == 0 {\n            sum += lst[index]\n        } else if index % 3 == 0 {\n\
    \            sum += lst[index] * lst[index]\n        } else if index % 4 == 0\
    \ {\n            sum += lst[index] * lst[index] * lst[index]\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst: [1,\
    \ 2, 3]) == 6)\nassert(sum_squares(lst: [1, 4, 9]) == 14)\nassert(sum_squares(lst:\
    \ [] as [Int]) == 0)\nassert(sum_squares(lst: [1, 1, 1, 1, 1, 1, 1, 1, 1]) ==\
    \ 9)\nassert(sum_squares(lst: [-1, -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst:\
    \ [0]) == 0)\nassert(sum_squares(lst: [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst:\
    \ [-56, -99, 1, 0, -2]) == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0,\
    \ 0, 0, -1]) == 0)\nassert(sum_squares(lst: [-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]) == -14196)\nassert(sum_squares(lst: [-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)"
  status: Exception
  stderr: 'tmpa54gzzk3/tmpa54gzzk3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5771410c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5771107b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5771107988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57711067b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa54gzzk3                        0x00005583e29f5542 <unavailable> + 5442

    5    libc.so.6                          0x00002b57715fc460 __libc_start_main +
    245

    6    tmpa54gzzk3                        0x00005583e29f51a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in lst {\n        if index%3 == 0 && index%4 == 0 {\n   \
    \         sum += index\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpljhq6x4v/tmpljhq6x4v.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade96b4fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade96846b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade96846988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade968457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpljhq6x4v                        0x000056193606c502 <unavailable> + 5378

    5    libc.so.6                          0x00002ade96d3b460 __libc_start_main +
    245

    6    tmpljhq6x4v                        0x000056193606c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in 0..<lst.count {\n        if index % 3 == 0 && index %\
    \ 4 == 0 {\n            sum += lst[index]\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmp9yol7h5w/tmp9yol7h5w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6fa7cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6fa4c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6fa4c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6fa4c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9yol7h5w                        0x000056514a600542 <unavailable> + 5442

    5    libc.so.6                          0x00002ae6fa9b7460 __libc_start_main +
    245

    6    tmp9yol7h5w                        0x000056514a6001a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for x in lst {\n        if x % 3 == 0 && x % 4 == 0 {\n           \
    \ sum += x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst: [1, 4,\
    \ 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpi1et6uol/tmpi1et6uol.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b79524c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b79521c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b79521c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b79521bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi1et6uol                        0x0000556f7e8b6502 <unavailable> + 5378

    5    libc.so.6                          0x00002b79526b5460 __libc_start_main +
    245

    6    tmpi1et6uol                        0x0000556f7e8b6169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in lst {\n        if index % 3 == 0 && index % 4 == 0 {\n\
    \            sum += index\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpe3uskicu/tmpe3uskicu.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba090aabc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0907a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0907a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0907a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe3uskicu                        0x000055ddff624502 <unavailable> + 5378

    5    libc.so.6                          0x00002ba090c97460 __libc_start_main +
    245

    6    tmpe3uskicu                        0x000055ddff624169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for x in lst {\n        if x % 3 == 0 {\n            sum += x * x\n\
    \        } else if x % 4 == 0 {\n            sum += x * x\n        } else {\n\
    \            sum += x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmp10yionpu/tmp10yionpu.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac43839bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac438092b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac438092988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac4380917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp10yionpu                        0x0000559dd6c29502 <unavailable> + 5378

    5    libc.so.6                          0x00002ac438587460 __libc_start_main +
    245

    6    tmp10yionpu                        0x0000559dd6c29169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in 0..<lst.count {\n        if index % 3 == 0 && index %\
    \ 4 == 0 {\n            sum += lst[index]\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmp9yol7h5w/tmp9yol7h5w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6fa7cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6fa4c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6fa4c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6fa4c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9yol7h5w                        0x000056514a600542 <unavailable> + 5442

    5    libc.so.6                          0x00002ae6fa9b7460 __libc_start_main +
    245

    6    tmp9yol7h5w                        0x000056514a6001a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for i in lst {\n        if i % 3 == 0 && i % 4 == 0 {\n           \
    \ sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst: [1, 4,\
    \ 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpe8tn2d1v/tmpe8tn2d1v.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae40ea52c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae40e749b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae40e749988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae40e7487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe8tn2d1v                        0x000055b15a762502 <unavailable> + 5378

    5    libc.so.6                          0x00002ae40ec3e460 __libc_start_main +
    245

    6    tmpe8tn2d1v                        0x000055b15a762169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in 0..<lst.count {\n        if index % 3 == 0 && index %\
    \ 4 == 0 {\n            sum += lst[index]\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmp9yol7h5w/tmp9yol7h5w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6fa7cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6fa4c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6fa4c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6fa4c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9yol7h5w                        0x000056514a600542 <unavailable> + 5442

    5    libc.so.6                          0x00002ae6fa9b7460 __libc_start_main +
    245

    6    tmp9yol7h5w                        0x000056514a6001a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in 0..<lst.count {\n        if index % 3 == 0 && index %\
    \ 4 == 0 {\n            sum += lst[index]\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmp9yol7h5w/tmp9yol7h5w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6fa7cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6fa4c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6fa4c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6fa4c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9yol7h5w                        0x000056514a600542 <unavailable> + 5442

    5    libc.so.6                          0x00002ae6fa9b7460 __libc_start_main +
    245

    6    tmp9yol7h5w                        0x000056514a6001a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in lst {\n        if index % 3 == 0 && index % 4 == 0 {\n\
    \            sum += index\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpe3uskicu/tmpe3uskicu.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba090aabc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0907a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0907a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0907a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe3uskicu                        0x000055ddff624502 <unavailable> + 5378

    5    libc.so.6                          0x00002ba090c97460 __libc_start_main +
    245

    6    tmpe3uskicu                        0x000055ddff624169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for i in lst {\n        if i % 3 == 0 && i % 4 == 0 {\n           \
    \ sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst: [1, 4,\
    \ 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpe8tn2d1v/tmpe8tn2d1v.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae40ea52c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae40e749b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae40e749988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae40e7487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe8tn2d1v                        0x000055b15a762502 <unavailable> + 5378

    5    libc.so.6                          0x00002ae40ec3e460 __libc_start_main +
    245

    6    tmpe8tn2d1v                        0x000055b15a762169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in lst {\n        if index % 3 == 0 && index % 4 == 0 {\n\
    \            sum += index\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpe3uskicu/tmpe3uskicu.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba090aabc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0907a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0907a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0907a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe3uskicu                        0x000055ddff624502 <unavailable> + 5378

    5    libc.so.6                          0x00002ba090c97460 __libc_start_main +
    245

    6    tmpe3uskicu                        0x000055ddff624169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for i in lst {\n        if i % 3 == 0 && i % 4 == 0 {\n           \
    \ sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst: [1, 4,\
    \ 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpe8tn2d1v/tmpe8tn2d1v.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae40ea52c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae40e749b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae40e749988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae40e7487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe8tn2d1v                        0x000055b15a762502 <unavailable> + 5378

    5    libc.so.6                          0x00002ae40ec3e460 __libc_start_main +
    245

    6    tmpe8tn2d1v                        0x000055b15a762169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for index in lst {\n        if index % 3 == 0 && index % 4 == 0 {\n\
    \            sum += index\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpe3uskicu/tmpe3uskicu.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba090aabc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0907a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0907a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0907a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe3uskicu                        0x000055ddff624502 <unavailable> + 5378

    5    libc.so.6                          0x00002ba090c97460 __libc_start_main +
    245

    6    tmpe3uskicu                        0x000055ddff624169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for i in lst {\n        if i % 3 == 0 {\n            sum += i * i\n\
    \        } else if i % 4 == 0 {\n            sum += i * i\n        } else {\n\
    \            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
    \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpz6_tme29/tmpz6_tme29.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee886aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee883a1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee883a1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee883a07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz6_tme29                        0x000056391614d502 <unavailable> + 5378

    5    libc.so.6                          0x00002aee88896460 __libc_start_main +
    245

    6    tmpz6_tme29                        0x000056391614d169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
- exit_code: -4
  program: "\n/// \"\n/// This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    /// multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n/// change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n    var sum\
    \ = 0\n    for i in lst {\n        if i % 3 == 0 && i % 4 == 0 {\n           \
    \ sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst: [1, 4,\
    \ 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
    \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
    \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2])\
    \ == 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
    \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
    assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
    \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
  status: Exception
  stderr: 'tmpe8tn2d1v/tmpe8tn2d1v.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae40ea52c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae40e749b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae40e749988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae40e7487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe8tn2d1v                        0x000055b15a762502 <unavailable> + 5378

    5    libc.so.6                          0x00002ae40ec3e460 __libc_start_main +
    245

    6    tmpe8tn2d1v                        0x000055b15a762169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659823220
