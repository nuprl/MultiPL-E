name: HumanEval_69_search
language: swift
prompt: "\n/// You are given a non-empty list of positive integers. Return the greatest\
  \ integer that is greater than \n/// zero, and has a frequency greater than or equal\
  \ to the value of the integer itself. \n/// The frequency of an integer is the number\
  \ of times it appears in the list.\n/// If no such a value exist, return -1.\n///\
  \ Examples:\n/// search([4, 1, 2, 2, 3, 1]) == 2\n/// search([1, 2, 2, 3, 3, 3,\
  \ 4, 4, 4]) == 3\n/// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst: [Int]) ->\
  \ Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(search(lst: [5, 5, 5, 5, 1]) == 1)\nassert(search(lst:\
  \ [4, 1, 4, 1, 4, 4]) == 4)\nassert(search(lst: [3, 3]) == -1)\nassert(search(lst:\
  \ [8, 8, 8, 8, 8, 8, 8, 8]) == 8)\nassert(search(lst: [2, 3, 3, 2, 2]) == 2)\nassert(search(lst:\
  \ [2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1)\n\
  assert(search(lst: [3, 2, 8, 2]) == 2)\nassert(search(lst: [6, 7, 1, 8, 8, 10, 5,\
  \ 8, 5, 3, 10]) == 1)\nassert(search(lst: [8, 8, 3, 6, 5, 6, 4]) == -1)\nassert(search(lst:\
  \ [6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9])\
  \ == 1)\nassert(search(lst: [1, 9, 10, 1, 3]) == 1)\nassert(search(lst: [6, 9, 7,\
  \ 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5)\nassert(search(lst:\
  \ [1]) == 1)\nassert(search(lst: [8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10,\
  \ 4, 2, 1, 10, 2, 1, 1, 5]) == 4)\nassert(search(lst: [2, 10, 4, 8, 2, 10, 5, 1,\
  \ 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2)\nassert(search(lst: [1, 6, 10, 1, 6, 9,\
  \ 10, 8, 6, 8, 7, 3]) == 1)\nassert(search(lst: [9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7,\
  \ 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4)\nassert(search(lst:\
  \ [2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4)\n\
  assert(search(lst: [9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) ==\
  \ 2)\nassert(search(lst: [5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
  \ 7, 7, 10, 8]) == -1)\nassert(search(lst: [10]) == -1)\nassert(search(lst: [9,\
  \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2)\nassert(search(lst: [5, 4, 10, 2,\
  \ 1, 1, 10, 3, 6, 1, 8]) == 1)\nassert(search(lst: [7, 9, 9, 9, 3, 4, 1, 5, 9, 1,\
  \ 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1)\nassert(search(lst: [3, 10, 10, 9,\
  \ 2]) == -1)"
completions: ["    var max = 0\n    var maxCount = 0\n    for el in lst {\n      \
    \  if el > 0 {\n            if maxCount < el {\n                max = el\n   \
    \             maxCount = el\n            }\n        } else {\n            if maxCount\
    \ > 0 {\n                maxCount = -1\n            }\n        }\n    }\n    return\
    \ max", "    var max = 0\n    var freq = 0\n    for el in lst {\n        if el\
    \ > 0 {\n            freq++\n            if freq > max {\n                max\
    \ = el\n            }\n        }\n    }\n    return max", "    var max: Int =\
    \ 0\n    var maxCount: Int = 0\n    for x in lst {\n        if x > max {\n   \
    \         max = x\n            maxCount = 1\n        } else if x == max {\n  \
    \          maxCount += 1\n        }\n    }\n    if maxCount == 0 {\n        return\
    \ -1\n    }\n    return max", "    var max = 0\n    var maxCount = 0\n    for\
    \ el in lst {\n        if el > 0 {\n            if maxCount < el {\n         \
    \       max = el\n                maxCount = el\n            }\n        }\n  \
    \  }\n    if maxCount == 0 {\n        return -1\n    }\n    return max", "   \
    \ var max = 0\n    var maxCount = 0\n    for el in lst {\n        if max < el\
    \ {\n            max = el\n            maxCount = 1\n        } else if max ==\
    \ el {\n            maxCount += 1\n        }\n    }\n    if maxCount == 0 {\n\
    \        return -1\n    }\n    return max", "    var max = 0\n    var maxFreq\
    \ = lst[0]\n    for i in lst {\n        if i > 0 {\n            if maxFreq < i\
    \ {\n                max = i\n                maxFreq = i\n            }\n   \
    \     }\n    }\n    return max", "    var max = 0\n    var freq = 0\n    for num\
    \ in lst {\n        if freq == 0 {\n            freq = num\n        } else {\n\
    \            if num > max {\n                max = num\n            }\n      \
    \      freq -= 1\n        }\n    }\n    return max", "    var max = 0\n    var\
    \ freq = 0\n    for x in lst {\n        freq += x\n        if freq > max {\n \
    \           max = freq\n        }\n    }\n    if freq == 0 {\n        return -1\n\
    \    }\n    return max", "    var max = 0\n    var maxCount = 0\n    for el in\
    \ lst {\n        if maxCount < el {\n            max = el\n            maxCount\
    \ = el\n        }\n    }\n    if maxCount == 0 {\n        return -1\n    }\n \
    \   for el in lst {\n        if el == max {\n            if maxCount > el {\n\
    \                max = el\n                maxCount = el\n            }\n    \
    \    }\n    }\n    return max", "    var max = 0\n    var freq = 0\n    for x\
    \ in lst {\n        freq = freq + 1\n        if freq > max {\n            max\
    \ = freq\n        }\n        if freq == x {\n            return x\n        }\n\
    \    }\n    return -1", "    var max = 0\n    var freq = 0\n    for el in lst\
    \ {\n        if el > 0 {\n            freq++\n            if freq > max {\n  \
    \              max = el\n            }\n        }\n    }\n    if freq == 0 {\n\
    \        return -1\n    }\n    return max", "    var max = 0\n    var maxCount\
    \ = 0\n    for x in lst {\n        if x > max {\n            max = x\n       \
    \     maxCount = 1\n        } else if x == max {\n            maxCount += 1\n\
    \        }\n    }\n    if maxCount == 0 {\n        return -1\n    }\n    return\
    \ max", "    var max = 0\n    var maxCount = 0\n    for el in lst {\n        if\
    \ maxCount < el {\n            max = el\n            maxCount = el\n        }\n\
    \    }\n    if maxCount > 0 {\n        return max\n    }\n    return -1", "  \
    \  var max = 0\n    var freq = 0\n    for v in lst {\n        freq += v\n    \
    \    if freq > max {\n            max = freq\n        }\n    }\n    if freq ==\
    \ 0 {\n        return -1\n    }\n    return max", "    var max = 0\n    var freq\
    \ = 0\n    for num in lst {\n        if freq == 0 {\n            freq = num\n\
    \        } else {\n            if freq > num {\n                max = num\n  \
    \              freq = num\n            }\n        }\n    }\n    return max", " \
    \   var max: Int = 0\n    var freq: Int = 0\n    for num in lst {\n        freq\
    \ = freq + Int(num)\n        if freq > max {\n            max = freq\n       \
    \ }\n    }\n    if freq == 0 {\n        return -1\n    }\n    return max", " \
    \   var max: Int = 0\n    var freq: Int = 0\n    for x in lst {\n        freq\
    \ = freq + x\n        if freq > max {\n            max = freq\n        }\n   \
    \ }\n    if freq > max {\n        return -1\n    }\n    return max", "    var\
    \ max = 0\n    var freq = 0\n    for num in lst {\n        if freq == 0 {\n  \
    \          freq = 1\n        } else {\n            freq *= num\n        }\n  \
    \      if freq > max {\n            max = freq\n        }\n    }\n    return max",
  "    var max = 0\n    var maxFreq = 0\n    for el in lst {\n        if el > 0 {\n\
    \            if maxFreq < el {\n                max = el\n                maxFreq\
    \ = el\n            }\n        }\n    }\n    return max", "    var max = 0\n \
    \   var freq = 0\n    for x in lst {\n        if freq == 0 {\n            freq\
    \ = x\n        } else {\n            if freq > x {\n                max = x\n\
    \                freq = x\n            } else {\n                freq = freq *\
    \ x\n            }\n        }\n    }\n    if freq > 0 {\n        return max\n\
    \    } else {\n        return -1\n    }"]
stop_tokens:
- "\n}"
