language: swift
name: HumanEval_81_numerical_letter_grade
results:
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    var gpa: Double = 0.0\n\
    \    var letterGrade: String = \"\"\n    for grade in grades {\n        gpa =\
    \ grade * 4.0\n        if gpa > 3.0 {\n            letterGrade = \"A+\"\n    \
    \    } else if gpa > 2.7 {\n            letterGrade = \"A\"\n        } else if\
    \ gpa > 2.3 {\n            letterGrade = \"A-\"\n        } else if gpa > 1.7 &&\
    \ gpa < 2.0 {\n            letterGrade = \"B+\"\n        } else if gpa > 1.3 &&\
    \ gpa < 1.7 {\n            letterGrade = \"B\"\n        } else if gpa > 1.0 &&\
    \ gpa < 1.3 {\n            letterGrade = \"B-\"\n        } else if gpa > 0.7 &&\
    \ gpa < 1.0 {\n            letterGrade = \"C+\"\n        } else if gpa > 0.3 &&\
    \ gpa < 0.7 {\n            letterGrade = \"C\"\n        } else if gpa > 0.0 {\n\
    \            letterGrade = \"C-\"\n        } else {\n            letterGrade =\
    \ \"D+\"\n        }\n        gradesArray.append(letterGrade)\n    }\n    return\
    \ gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpxr2hvhu3/tmpxr2hvhu3.swift:68: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b06db8ddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b06db5d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b06db5d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b06db5d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxr2hvhu3                        0x000055b1b58e47a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b06dbac9460 __libc_start_main +
    245

    6    tmpxr2hvhu3                        0x000055b1b58e42c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014654
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades = [String]()\n    for grade in grades {\n\
    \        switch grade {\n        case 4.0:\n            letterGrades.append(\"\
    A+\")\n        case 3.7:\n            letterGrades.append(\"A\")\n        case\
    \ 3.3:\n            letterGrades.append(\"A-\")\n        case 3.0:\n         \
    \   letterGrades.append(\"B+\")\n        case 2.7:\n            letterGrades.append(\"\
    B\")\n        case 2.3:\n            letterGrades.append(\"B-\")\n        case\
    \ 2.0:\n            letterGrades.append(\"C+\")\n        case 1.7:\n         \
    \   letterGrades.append(\"C\")\n        case 1.3:\n            letterGrades.append(\"\
    C-\")\n        case 1.0:\n            letterGrades.append(\"D+\")\n        case\
    \ 0.7:\n            letterGrades.append(\"D\")\n        case 0.0:\n          \
    \  letterGrades.append(\"D-\")\n        case 0.0:\n            letterGrades.append(\"\
    E\")\n        default:\n            break\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpee6dyp10/tmpee6dyp10.swift:73: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2fc17dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2fbe74b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2fbe74988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2fbe737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpee6dyp10                        0x000055ab4f0637f6 <unavailable> + 6134

    5    libc.so.6                          0x00002ba2fc369460 __libc_start_main +
    245

    6    tmpee6dyp10                        0x000055ab4f063319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014654
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    \n    for grade in grades\
    \ {\n        switch grade {\n        case 4.0:\n            gradesArray.append(\"\
    A+\")\n        case 3.7...3.0:\n            gradesArray.append(\"A\")\n      \
    \  case 3.3...2.7:\n            gradesArray.append(\"A-\")\n        case 3.0...2.3:\n\
    \            gradesArray.append(\"B+\")\n        case 2.7...2.0:\n           \
    \ gradesArray.append(\"B\")\n        case 2.3...1.7:\n            gradesArray.append(\"\
    B-\")\n        case 2.0...1.3:\n            gradesArray.append(\"C+\")\n     \
    \   case 1.7...1.0:\n            gradesArray.append(\"C\")\n        case 1.3...0.7:\n\
    \            gradesArray.append(\"C-\")\n        case 1.0...0.0:\n           \
    \ gradesArray.append(\"D+\")\n        case 0.7...0.0:\n            gradesArray.append(\"\
    D\")\n        case 0.0:\n            gradesArray.append(\"D-\")\n        default:\n\
    \            gradesArray.append(\"E\")\n        }\n    }\n    \n    return gradesArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b58f88c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b58c7f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6b58c7f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6b58c7f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6b58c7ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp5vcoieog                        0x000056029ced937c <unavailable> + 9084

    6    tmp5vcoieog                        0x000056029ced878d <unavailable> + 6029

    7    libc.so.6                          0x00002b6b59174460 __libc_start_main +
    245

    8    tmp5vcoieog                        0x000056029ced8449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660014654
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = grades\n    var gradesArrayCopy = gradesArray\n\
    \    var gradesArrayCopy2 = gradesArray\n    var gradesArrayCopy3 = gradesArray\n\
    \    var gradesArrayCopy4 = gradesArray\n    var gradesArrayCopy5 = gradesArray\n\
    \    var gradesArrayCopy6 = gradesArray\n    var gradesArrayCopy7 = gradesArray\n\
    \    var gradesArrayCopy8 = gradesArray\n    var gradesArrayCopy9 = gradesArray\n\
    \    var gradesArrayCopy10 = gradesArray\n    var gradesArrayCopy11 = gradesArray\n\
    \    var gradesArrayCopy12 = gradesArray\n    var gradesArrayCopy13 = gradesArray\n\
    \    var gradesArrayCopy14 = gradesArray\n    var gradesArrayCopy15 = gradesArray\n\
    \    var gradesArrayCopy16 = gradesArray\n    var gradesArrayCopy17 = gradesArray\n\
    \    var gradesArrayCopy18 = gradesArray\n    var gradesArrayCopy19 = gradesArray\n\
    \    var gradesArrayCopy20 = gradesArray\n    var gradesArrayCopy21 = gradesArray\n\
    \    var gradesArrayCopy22 = gradesArray\n    var gradesArrayCopy23 = gradesArray\n\
    \    var gradesArrayCopy24 = gradesArray\n    var gradesArrayCopy25 = gradesArray\n\
    \    var gradesArrayCopy26 = gradesArray\n    var gradesArrayCopy27 = gradesArray\n\
    \    var gradesArrayCopy28 = gradesArray\n    var gradesArrayCopy29 = gradesArray\n\
    \    var gradesArrayCopy30 = gradesArray\n    var gradesArrayCopy31 = gradesArray\n\
    \    var gradesArrayCopy32 = gradesArray\n    var gradesArrayCopy33 = gradesArray\n\
    \    var gradesArrayCopy34 = gradesArray\n    var gradesArrayCopy35 = gradesArray\n\
    \    var gradesArrayCopy36 = gradesArray\n    var gradesArrayCopy37 = gradesArray\n\
    \    var gradesArrayCopy38 = gradesArray\n    var gradesArrayCopy39 = gradesArray\n\
    \    var gradesArrayCopy40 = gradesArray\n    var gradesArrayCopy41 = gradesArray\n\
    \    var gradesArrayCopy42 = gradesArray\n    var gradesArrayCopy43 = gradesArray\n\
    \    var gradesArrayCopy44 = gradesArray\n    var gradesArrayCopy45 = gradesArray\n\
    \    var gradesArrayCopy46 = gradesArray\n    var gradesArrayCopy47 = gradesArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpg71swbp2.swift:24:9: warning: variable 'gradesArray' was never\
    \ mutated; consider changing to 'let' constant\n    var gradesArray = grades\n\
    \    ~~~ ^\n    let\n/tmp/tmpg71swbp2.swift:25:9: warning: initialization of variable\
    \ 'gradesArrayCopy' was never used; consider replacing with assignment to '_'\
    \ or removing it\n    var gradesArrayCopy = gradesArray\n    ~~~~^~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpg71swbp2.swift:26:9: warning: initialization of variable 'gradesArrayCopy2'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var gradesArrayCopy2 = gradesArray\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpg71swbp2.swift:27:9:\
    \ warning: initialization of variable 'gradesArrayCopy3' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var gradesArrayCopy3 =\
    \ gradesArray\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpg71swbp2.swift:28:9: warning:\
    \ initialization of variable 'gradesArrayCopy4' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var gradesArrayCopy4 = gradesArray\n\
    \    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpg71swbp2.swift:29:9: warning: initialization\
    \ of variable 'gradesArrayCopy5' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var gradesArrayCopy5 = gradesArray\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpg71swbp2.swift:30:9: warning: initialization of variable 'gradesArrayCopy6'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var gradesArrayCopy6 = gradesArray\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpg71swbp2.swift:31:9:\
    \ warning: initialization of variable 'gradesArrayCopy7' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var gradesArrayCopy7 =\
    \ gradesArray\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpg71swbp2.swift:32:9: warning:\
    \ initialization of variable 'gradesArrayCopy8' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var gradesArrayCopy8 = gradesArray\n\
    \    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpg71swbp2.swift:33:9: warning: initialization\
    \ of variable 'grades"
  stdout: ''
  timestamp: 1660014654
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var grades_string = \"\"\n    for grade in grades {\n   \
    \     switch grade {\n        case 4.0:\n            grades_string += \"A+\"\n\
    \        case 3.7:\n            grades_string += \"A\"\n        case 3.3:\n  \
    \          grades_string += \"A-\"\n        case 3.0:\n            grades_string\
    \ += \"B+\"\n        case 2.7:\n            grades_string += \"B\"\n        case\
    \ 2.3:\n            grades_string += \"B-\"\n        case 2.0:\n            grades_string\
    \ += \"C+\"\n        case 1.7:\n            grades_string += \"C\"\n        case\
    \ 1.3:\n            grades_string += \"C-\"\n        case 1.0:\n            grades_string\
    \ += \"D+\"\n        case 0.7:\n            grades_string += \"D\"\n        case\
    \ 0.0:\n            grades_string += \"D-\"\n        default:\n            grades_string\
    \ += \"E\"\n        }\n    }\n    return grades_string\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp50c7nuq8.swift:55:12: error: cannot convert return expression of\
    \ type 'String' to return type '[String]'\n    return grades_string\n        \
    \   ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014654
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var letterGrade = \"\"\n    switch gpa {\n    case 4.0:\n \
    \       letterGrade = \"A+\"\n    case 3.7:\n        letterGrade = \"A\"\n   \
    \ case 3.3:\n        letterGrade = \"A-\"\n    case 3.0:\n        letterGrade\
    \ = \"B+\"\n    case 2.7:\n        letterGrade = \"B\"\n    case 2.3:\n      \
    \  letterGrade = \"B-\"\n    case 2.0:\n        letterGrade = \"C+\"\n    case\
    \ 1.7:\n        letterGrade = \"C\"\n    case 1.3:\n        letterGrade = \"C-\"\
    \n    case 1.0:\n        letterGrade = \"D+\"\n    case 0.7:\n        letterGrade\
    \ = \"D\"\n    case 0.0:\n        letterGrade = \"D-\"\n    case 0.0:\n      \
    \  letterGrade = \"E\"\n    default:\n        break\n    }\n    gradesArray.append(letterGrade)\n\
    \    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp8xgq6mmp.swift:25:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n"
  stdout: ''
  timestamp: 1660014654
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades = [String]()\n    \n    // Your code goes\
    \ here\n    \n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpcx4dne3s/tmpcx4dne3s.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2557046c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2556d3db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2556d3d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2556d3c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcx4dne3s                        0x000055c7659d3636 <unavailable> + 5686

    5    libc.so.6                          0x00002b2557232460 __libc_start_main +
    245

    6    tmpcx4dne3s                        0x000055c7659d3159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1660014654
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradeLetters = [String]()\n    var totalGrade = grades.reduce(0,\
    \ combine: +)\n    var gpa = totalGrade / Double(grades.count)\n    var gpaIndex\
    \ = grades.firstIndex(where: { $0 > gpa })!\n    var gpaLetter = grades[gpaIndex]\n\
    \    var gpaIndex2 = grades.firstIndex(where: { $0 < gpa })!\n    var gpaLetter2\
    \ = grades[gpaIndex2]\n    var gpaIndex3 = grades.firstIndex(where: { $0 > gpa\
    \ })!\n    var gpaLetter3 = grades[gpaIndex3]\n    var gpaIndex4 = grades.firstIndex(where:\
    \ { $0 < gpa })!\n    var gpaLetter4 = grades[gpaIndex4]\n    var gpaIndex5 =\
    \ grades.firstIndex(where: { $0 > gpa })!\n    var gpaLetter5 = grades[gpaIndex5]\n\
    \    var gpaIndex6 = grades.firstIndex(where: { $0 < gpa })!\n    var gpaLetter6\
    \ = grades[gpaIndex6]\n    var gpaIndex7 = grades.firstIndex(where: { $0 > gpa\
    \ })!\n    var gpaLetter7 = grades[gpaIndex7]\n    var gpaIndex8 = grades.firstIndex(where:\
    \ { $0 < gpa })!\n    var gpaLetter8 = grades[gpaIndex8]\n    var gpaIndex9 =\
    \ grades.firstIndex(where: { $0 < gpa })!\n    var gpaLetter9 = grades[gpaIndex9]\n\
    \    var gpaIndex10 = grades.firstIndex(where: { $0 < gpa })!\n    var gpaLetter10\
    \ = grades[gpaIndex10]\n    var gpaIndex11 = grades.firstIndex(where: { $0 < gpa\
    \ })!\n    var gpaLetter11 = grades[gpaIndex11]\n    var gpaIndex12 = grades.firstIndex(where:\
    \ { $0 < gpa })!\n    var gpaLetter12 = grades[gpaIndex12]\n    var gpaIndex13\
    \ = grades.firstIndex(where: { $0 < gpa })!\n    var gpaLetter13 = grades[gpaIndex13]\n\
    \    var gpaIndex14 = grades.firstIndex(where: { $0 < gpa })!\n    var gpaLetter14\
    \ = grades[gpaIndex14]\n    var gpaIndex15 = grades.firstIndex(where: { $0 < gpa\
    \ })!\n    var gpaLetter15 = grades[gpaIndex15]\n    var gpaIndex16 = grades.firstIndex(where:\
    \ { $0 < \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpzbcilzup.swift:58:1: error: expected expression after operator\n\
    }\n^\n/tmp/tmpzbcilzup.swift:61:1: error: expected ')' in expression list\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n^\n/tmp/tmpzbcilzup.swift:57:39:\
    \ note: to match this opening '('\n    var gpaIndex16 = grades.firstIndex(where:\
    \ { $0 < \n                                      ^\n/tmp/tmpzbcilzup.swift:78:66:\
    \ error: expected '}' at end of brace statement\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])\n                                          \
    \                       ^\n/tmp/tmpzbcilzup.swift:23:59: note: to match this opening\
    \ '{'\nfunc numerical_letter_grade(grades: [Double]) -> [String] {\n         \
    \                                                 ^\n/tmp/tmpzbcilzup.swift:25:35:\
    \ error: extraneous argument label 'combine:' in call\n    var totalGrade = grades.reduce(0,\
    \ combine: +)\n                                  ^   ~~~~~~~~~\n             \
    \                         \n/tmp/tmpzbcilzup.swift:61:6: error: operator functions\
    \ can only be declared at global or in type scope\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014654
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var grades_string = \"\"\n    var total_grades = grades.reduce(0,\
    \ combine: +)\n    var total_gpa = grades.reduce(0, combine: *)\n    var gpa_percent\
    \ = total_gpa/total_grades\n    var letter_grade = \"\"\n    var letter_grade_index\
    \ = 0\n    for grade in grades {\n        if grade > 3.0 {\n            letter_grade\
    \ = \"B-\"\n            letter_grade_index += 1\n        } else if grade > 2.7\
    \ {\n            letter_grade = \"B-\"\n            letter_grade_index += 1\n\
    \        } else if grade > 2.3 {\n            letter_grade = \"B-\"\n        \
    \    letter_grade_index += 1\n        } else if grade > 2.0 {\n            letter_grade\
    \ = \"B-\"\n            letter_grade_index += 1\n        } else if grade > 1.7\
    \ {\n            letter_grade = \"B-\"\n            letter_grade_index += 1\n\
    \        } else if grade > 1.3 {\n            letter_grade = \"B-\"\n        \
    \    letter_grade_index += 1\n        } else if grade > 1.0 {\n            letter_grade\
    \ = \"B-\"\n            letter_grade_index += 1\n        } else if grade > 0.7\
    \ {\n            letter_grade = \"B-\"\n            letter_grade_index += 1\n\
    \        } else if grade > 0.3 {\n            letter_grade = \"B-\"\n        \
    \    letter_grade_index += 1\n        } else if grade > 0.0 {\n            letter_grade\
    \ = \"B-\"\n            letter_grade_index += 1\n        } else if grade > -0.3\
    \ {\n            letter_grade = \"B-\"\n            letter_grade_index += 1\n\
    \        } else if grade > -0.7 {\n            letter_grade = \"B-\"\n       \
    \     letter_grade_index += 1\n        } else if grade > -1.0 {\n            letter_grade\
    \ = \"B-\"\n            letter_grade_index += 1\n        } else if grade > -1.7\
    \ {\n            letter_grade = \"B-\"\n            letter_grade_index += 1\n\
    \        } else if grade > -2.0 {\n            letter_grade = \"B-\"\n       \
    \     letter_grade_index += 1\n        } else if grade > -3.0 {\n            letter_grade\
    \ = \"B-\"\n            letter_grade_index += 1\n        } else if grade > -3.7\
    \ {\n            letter_grade = \"B-\"\n            letter_grade_index += 1\n\
    \        } else if grade > -4.0 {\n            letter_grade = \"B-\"\n       \
    \     letter_grade_index += 1\n        } else if grade > -4.7 {\n            letter_grade\
    \ = \"B-\"\n            letter_grade_index += 1\n        } else if grade > -5.0\
    \ {\n            letter_grade = \"B-\"\n            letter_grade_index += 1\n\
    \        } else if grade > -5.\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkuxx_hfz.swift:91:29: error: expected member name following '.'\n\
    \        } else if grade > -5.\n                            ^\n/tmp/tmpkuxx_hfz.swift:91:30:\
    \ error: expected '{' after 'if' condition\n        } else if grade > -5.\n  \
    \                           ^\n/tmp/tmpkuxx_hfz.swift:112:66: error: expected\
    \ '}' at end of brace statement\nassert(numerical_letter_grade(grades: [0.0, 0.7])\
    \ == [\"E\", \"D-\"])\n                                                      \
    \           ^\n/tmp/tmpkuxx_hfz.swift:23:59: note: to match this opening '{'\n\
    func numerical_letter_grade(grades: [Double]) -> [String] {\n                \
    \                                          ^\n/tmp/tmpkuxx_hfz.swift:25:37: error:\
    \ extraneous argument label 'combine:' in call\n    var total_grades = grades.reduce(0,\
    \ combine: +)\n                                    ^   ~~~~~~~~~\n           \
    \                             \n/tmp/tmpkuxx_hfz.swift:26:34: error: extraneous\
    \ argument label 'combine:' in call\n    var total_gpa = grades.reduce(0, combine:\
    \ *)\n                                 ^   ~~~~~~~~~\n                       \
    \              \n/tmp/tmpkuxx_hfz.swift:91:25: error: binary operator '>' cannot\
    \ be applied to operands of type 'Double' and 'Float16'\n        } else if grade\
    \ > -5.\n                  ~~~~~ ^ ~~~\n/tmp/tmpkuxx_hfz.swift:95:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014654
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    var gpa = grades[0]\n \
    \   var gpaArray = [Double]()\n    for grade in grades {\n        gpaArray.append(grade)\n\
    \    }\n    for index in 0..<gpaArray.count {\n        let gpa = Double(gpaArray[index])\n\
    \        let letterGrade = letterGrade(gpa)\n        gradesArray.append(letterGrade)\n\
    \    }\n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp12e74gol.swift:32:27: error: use of local variable 'letterGrade'\
    \ before its declaration\n        let letterGrade = letterGrade(gpa)\n       \
    \                   ^\n/tmp/tmp12e74gol.swift:32:13: note: 'letterGrade' declared\
    \ here\n        let letterGrade = letterGrade(gpa)\n            ^\n"
  stdout: ''
  timestamp: 1660014654
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var gpaSum = grades.reduce(0, combine: +)\n    var gpaDiff\
    \ = grades.reduce(0, combine: +)\n    var gpaDiffSum = grades.reduce(0, combine:\
    \ +)\n    var gpaDiffSum2 = grades.reduce(0, combine: +)\n    var gpaDiffSum3\
    \ = grades.reduce(0, combine: +)\n    var gpaDiffSum4 = grades.reduce(0, combine:\
    \ +)\n    var gpaDiffSum5 = grades.reduce(0, combine: +)\n    var gpaDiffSum6\
    \ = grades.reduce(0, combine: +)\n    var gpaDiffSum7 = grades.reduce(0, combine:\
    \ +)\n    var gpaDiffSum8 = grades.reduce(0, combine: +)\n    var gpaDiffSum9\
    \ = grades.reduce(0, combine: +)\n    var gpaDiffSum10 = grades.reduce(0, combine:\
    \ +)\n    var gpaDiffSum11 = grades.reduce(0, combine: +)\n    var gpaDiffSum12\
    \ = grades.reduce(0, combine: +)\n    var gpaDiffSum13 = grades.reduce(0, combine:\
    \ +)\n    var gpaDiffSum14 = grades.reduce(0, combine: +)\n    var gpaDiffSum15\
    \ = grades.reduce(0, combine: +)\n    var gpaDiffSum16 = grades.reduce(0, combine:\
    \ +)\n    var gpaDiffSum17 = grades.reduce(0, combine: +)\n    var gpaDiffSum18\
    \ = grades.reduce(0, combine: +)\n    var gpaDiffSum19 = grades.reduce(0, combine:\
    \ +)\n    var gpaDiffSum20 = grades.reduce(0, combine: +)\n    var gpaDiffSum21\
    \ = grades.reduce(0, combine: +)\n    var gpaDiffSum22 = grades.reduce(0, combine:\
    \ +)\n    var gpaDiffSum23 = grades.reduce(0, combine: +)\n    var gpaDiffSum24\
    \ = grades.reduce(0, combine: +)\n    var gpaDiffSum25 = grades.reduce(0, combine:\
    \ +)\n    var gpaDiffSum26 = grades.reduce(0, combine: +)\n    var gpaDiffSum27\
    \ = grades.reduce(0, combine: +)\n    var gpaDiffSum28 = grades.reduce(0, combine:\
    \ +)\n    var gpaDiffSum29 = grades.reduce(0, combine: +)\n    var gpaDiffSum30\
    \ = grades.reduce(0, combine: +)\n    var gpaDiffSum31 = grades.reduce(0, combine:\
    \ +)\n    var gpaDiffSum32 = grades.reduce(0, combine\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp66wail_0.swift:60:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmp66wail_0.swift:59:37: note: to match this opening '('\n    var gpaDiffSum32\
    \ = grades.reduce(0, combine\n                                    ^\n/tmp/tmp66wail_0.swift:25:28:\
    \ error: extraneous argument label 'combine:' in call\n    var gpa = grades.reduce(0,\
    \ combine: +)\n                           ^   ~~~~~~~~~\n                    \
    \           \n/tmp/tmp66wail_0.swift:26:31: error: extraneous argument label 'combine:'\
    \ in call\n    var gpaSum = grades.reduce(0, combine: +)\n                   \
    \           ^   ~~~~~~~~~\n                                  \n/tmp/tmp66wail_0.swift:27:32:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaDiff = grades.reduce(0,\
    \ combine: +)\n                               ^   ~~~~~~~~~\n                \
    \                   \n/tmp/tmp66wail_0.swift:28:35: error: extraneous argument\
    \ label 'combine:' in call\n    var gpaDiffSum = grades.reduce(0, combine: +)\n\
    \                                  ^   ~~~~~~~~~\n                           \
    \           \n/tmp/tmp66wail_0.swift:29:36: error: extraneous argument label 'combine:'\
    \ in call\n    var gpaDiffSum2 = grades.reduce(0, combine: +)\n              \
    \                     ^   ~~~~~~~~~\n                                       \n\
    /tmp/tmp66wail_0.swift:30:36: error: extraneous argument label 'combine:' in call\n\
    \    var gpaDiffSum3 = grades.reduce(0, combine: +)\n                        \
    \           ^   ~~~~~~~~~\n                                       \n/tmp/tmp66wail_0.swift:31:36:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaDiffSum4 = grades.reduce(0,\
    \ combine: +)\n                                   ^   ~~~~~~~~~\n            \
    \                           \n/tmp/tmp66wail_0.swift:32:36: error: extraneous\
    \ argument label 'combine:' in call\n    var gpaDiffSum5 = grades.reduce(0, combine:\
    \ +)\n                                   ^   ~~~~~~~~~\n                     \
    \                  \n/tmp/tmp66wail_0.swift:33:36: error: extraneous argument\
    \ label 'combine:' in call\n    var gpaDiffSum6 = gr"
  stdout: ''
  timestamp: 1660014654
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    \n    for grade in grades\
    \ {\n        let gradeString = String(format: \"%.1f\", grade)\n        \n   \
    \     if grade >= 4.0 {\n            gradesArray.append(gradeString + \"+\")\n\
    \        } else if grade > 3.7 {\n            gradesArray.append(gradeString +\
    \ \"A\")\n        } else if grade > 3.3 {\n            gradesArray.append(gradeString\
    \ + \"A-\")\n        } else if grade > 3.0 {\n            gradesArray.append(gradeString\
    \ + \"B+\")\n        } else if grade > 2.7 {\n            gradesArray.append(gradeString\
    \ + \"B\")\n        } else if grade > 2.3 {\n            gradesArray.append(gradeString\
    \ + \"B-\")\n        } else if grade > 2.0 {\n            gradesArray.append(gradeString\
    \ + \"C+\")\n        } else if grade > 1.7 {\n            gradesArray.append(gradeString\
    \ + \"C\")\n        } else if grade > 1.3 {\n            gradesArray.append(gradeString\
    \ + \"C-\")\n        } else if grade > 1.0 {\n            gradesArray.append(gradeString\
    \ + \"D+\")\n        } else if grade > 0.7 {\n            gradesArray.append(gradeString\
    \ + \"D\")\n        } else if grade > 0.0 {\n            gradesArray.append(gradeString\
    \ + \"D-\")\n        } else {\n            gradesArray.append(gradeString + \"\
    E\")\n        }\n    }\n    \n    return gradesArray\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp1qzb1cim.swift:27:27: error: no exact matches in call to initializer\
    \ \n        let gradeString = String(format: \"%.1f\", grade)\n              \
    \            ^\nSwift.String:4:23: note: candidate '(String) -> String' requires\
    \ 1 argument, but 2 were provided\n    @inlinable public init<T>(_ value: T) where\
    \ T : LosslessStringConvertible\n                      ^\n/tmp/tmp1qzb1cim.swift:27:27:\
    \ note: candidate has partially matching parameter list (repeating: String, count:\
    \ Int)\n        let gradeString = String(format: \"%.1f\", grade)\n          \
    \                ^\nSwift.String:3:12: note: candidate '(String) -> String' requires\
    \ 1 argument, but 2 were provided\n    public init<S>(_ other: S) where S : LosslessStringConvertible,\
    \ S : Sequence, S.Element == Character\n           ^\nSwift.String:4:12: note:\
    \ candidate '(String) -> String' requires 1 argument, but 2 were provided\n  \
    \  public init<S>(_ characters: S) where S : Sequence, S.Element == Character\n\
    \           ^\nSwift.RangeReplaceableCollection:3:23: note: candidate '(String)\
    \ -> String' requires 1 argument, but 2 were provided\n    @inlinable public init<S>(_\
    \ elements: S) where S : Sequence, Self.Element == S.Element\n               \
    \       ^\n"
  stdout: ''
  timestamp: 1660014654
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = grades\n    gradesArray = gradesArray.sorted()\n\
    \    var letterGrades = [String]()\n    var currentGrade = gradesArray[0]\n  \
    \  var currentLetterGrade = \"\"\n    for grade in gradesArray {\n        if grade\
    \ > currentGrade {\n            letterGrades.append(currentLetterGrade)\n    \
    \        currentGrade = grade\n            currentLetterGrade = \"\"\n       \
    \ }\n        currentLetterGrade += \"+\"\n        if grade < currentGrade {\n\
    \            currentLetterGrade += \"-\"\n        }\n    }\n    letterGrades.append(currentLetterGrade)\n\
    \    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpde359d5h/tmpde359d5h.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adb5a412c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adb5a109b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adb5a109988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adb5a1087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpde359d5h                        0x000056109562e946 <unavailable> + 6470

    5    libc.so.6                          0x00002adb5a5fe460 __libc_start_main +
    245

    6    tmpde359d5h                        0x000056109562e469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1660014654
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    var gpa: Double = 0.0\n\
    \    var letterGrade: String = \"\"\n    for grade in grades {\n        gpa +=\
    \ grade\n        if gpa > 3.0 {\n            letterGrade = \"A+\"\n        } else\
    \ if gpa > 2.7 {\n            letterGrade = \"A\"\n        } else if gpa > 2.3\
    \ {\n            letterGrade = \"A-\"\n        } else if gpa > 1.7 && gpa < 3.0\
    \ {\n            letterGrade = \"B+\"\n        } else if gpa > 1.3 && gpa < 2.7\
    \ {\n            letterGrade = \"B\"\n        } else if gpa > 1.0 && gpa < 2.3\
    \ {\n            letterGrade = \"B-\"\n        } else if gpa > 0.7 && gpa < 1.0\
    \ {\n            letterGrade = \"C+\"\n        } else if gpa > 0.3 && gpa < 1.7\
    \ {\n            letterGrade = \"C\"\n        } else if gpa > 0.0 {\n        \
    \    letterGrade = \"C-\"\n        } else {\n            letterGrade = \"D+\"\n\
    \        }\n        gradesArray.append(letterGrade)\n        gpa = 0.0\n    }\n\
    \    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp7o7cuv7q/tmp7o7cuv7q.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adc8b63cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc8b333b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adc8b333988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adc8b3327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7o7cuv7q                        0x0000557714eef7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002adc8b828460 __libc_start_main +
    245

    6    tmp7o7cuv7q                        0x0000557714eef2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014654
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    var gpa: Double = 0.0\n\
    \    for grade in grades {\n        gpa += grade\n    }\n    gpa /= Double(grades.count)\n\
    \    var letterGrade: String = \"\"\n    if gpa < 4.0 {\n        letterGrade =\
    \ \"A+\"\n    } else if gpa < 3.7 {\n        letterGrade = \"A\"\n    } else if\
    \ gpa < 3.3 {\n        letterGrade = \"A-\"\n    } else if gpa < 3.0 {\n     \
    \   letterGrade = \"B+\"\n    } else if gpa < 2.7 {\n        letterGrade = \"\
    B\"\n    } else if gpa < 2.3 {\n        letterGrade = \"B-\"\n    } else if gpa\
    \ < 2.0 {\n        letterGrade = \"C+\"\n    } else if gpa < 1.7 {\n        letterGrade\
    \ = \"C\"\n    } else if gpa < 1.3 {\n        letterGrade = \"C-\"\n    } else\
    \ if gpa < 1.0 {\n        letterGrade = \"D+\"\n    } else if gpa < 0.7 {\n  \
    \      letterGrade = \"D\"\n    } else if gpa < 0.0 {\n        letterGrade = \"\
    D-\"\n    } else {\n        letterGrade = \"E\"\n    }\n    gradesArray.append(letterGrade)\n\
    \    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpnt4sx248/tmpnt4sx248.swift:75: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b285e097c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b285dd8eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b285dd8e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b285dd8d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnt4sx248                        0x000055ae979de806 <unavailable> + 6150

    5    libc.so.6                          0x00002b285e283460 __libc_start_main +
    245

    6    tmpnt4sx248                        0x000055ae979de329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1660014654
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [Double] = grades\n    var gradesArrayCopy:\
    \ [Double] = gradesArray\n    gradesArray.removeFirst()\n    gradesArray.removeLast()\n\
    \    gradesArrayCopy.removeFirst()\n    gradesArrayCopy.removeLast()\n    var\
    \ gradesArrayCopyCopy: [Double] = gradesArrayCopy\n    var gradesArrayCopyCopy:\
    \ [Double] = gradesArrayCopy\n    var gradesArrayCopyCopy: [Double] = gradesArrayCopy\n\
    \    var gradesArrayCopyCopy: [Double] = gradesArrayCopy\n    var gradesArrayCopyCopy:\
    \ [Double] = gradesArrayCopy\n    var gradesArrayCopyCopy: [Double] = gradesArrayCopy\n\
    \    var gradesArrayCopyCopy: [Double] = gradesArrayCopy\n    var gradesArrayCopyCopy:\
    \ [Double] = gradesArrayCopy\n    var gradesArrayCopyCopy: [Double] = gradesArrayCopy\n\
    \    var gradesArrayCopyCopy: [Double] = gradesArrayCopy\n    var gradesArrayCopyCopy:\
    \ [Double] = gradesArrayCopy\n    var gradesArrayCopyCopy: [Double] = gradesArrayCopy\n\
    \    var gradesArrayCopyCopy: [Double] = gradesArrayCopy\n    var gradesArrayCopyCopy:\
    \ [Double] = gradesArrayCopy\n    var gradesArrayCopyCopy: [Double] = gradesArrayCopy\n\
    \    var gradesArrayCopyCopy: [Double] = gradesArrayCopy\n    var gradesArrayCopyCopy:\
    \ [Double] = gradesArrayCopy\n    var gradesArrayCopyCopy: [Double] = gradesArrayCopy\n\
    \    var gradesArrayCopyCopy: [Double] = gradesArrayCopy\n    var gradesArrayCopyCopy:\
    \ [Double] = gradesArrayCopy\n    var gradesArrayCopyCopy: [Double] = gradesArrayCopy\n\
    \    var gradesArrayCopyCopy: [Double] = gradesArrayCopy\n    var gradesArrayCopyCopy:\
    \ [Double] = gradesArrayCopy\n    var gradesArrayCopyCopy: [Double] = gradesArrayCopy\n\
    \    var gradesArrayCopyCopy: [Double] = gradesArrayCopy\n    var gradesArrayCopyCopy:\
    \ [Double] = gradesArrayCopy\n    var gradesArrayCopyCopy: [Double] = gradesArrayCopy\n\
    \    var gradesArrayCopyCopy: [Double] = gradesArrayCopy\n    var gradesArrayCopyCopy:\
    \ [Double] = gradesArrayCopy\n    var gradesArrayCopyCopy: [Double] = gradesArrayCopy\n\
    \    var gradesArrayCopyCopy: [Double] = gradesArrayCopy\n    var gradesArrayCopyCopy:\
    \ [Double] = gradesArrayCopy\n    var gradesArrayCopyCopy: [Double\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp752h1jns.swift:62:37: error: expected ']' in array type\n    var\
    \ gradesArrayCopyCopy: [Double\n                                    ^\n/tmp/tmp752h1jns.swift:62:30:\
    \ note: to match this opening '['\n    var gradesArrayCopyCopy: [Double\n    \
    \                         ^\n/tmp/tmp752h1jns.swift:31:9: error: invalid redeclaration\
    \ of 'gradesArrayCopyCopy'\n    var gradesArrayCopyCopy: [Double] = gradesArrayCopy\n\
    \        ^\n/tmp/tmp752h1jns.swift:30:9: note: 'gradesArrayCopyCopy' previously\
    \ declared here\n    var gradesArrayCopyCopy: [Double] = gradesArrayCopy\n   \
    \     ^\n/tmp/tmp752h1jns.swift:32:9: error: invalid redeclaration of 'gradesArrayCopyCopy'\n\
    \    var gradesArrayCopyCopy: [Double] = gradesArrayCopy\n        ^\n/tmp/tmp752h1jns.swift:30:9:\
    \ note: 'gradesArrayCopyCopy' previously declared here\n    var gradesArrayCopyCopy:\
    \ [Double] = gradesArrayCopy\n        ^\n/tmp/tmp752h1jns.swift:33:9: error: invalid\
    \ redeclaration of 'gradesArrayCopyCopy'\n    var gradesArrayCopyCopy: [Double]\
    \ = gradesArrayCopy\n        ^\n/tmp/tmp752h1jns.swift:30:9: note: 'gradesArrayCopyCopy'\
    \ previously declared here\n    var gradesArrayCopyCopy: [Double] = gradesArrayCopy\n\
    \        ^\n/tmp/tmp752h1jns.swift:34:9: error: invalid redeclaration of 'gradesArrayCopyCopy'\n\
    \    var gradesArrayCopyCopy: [Double] = gradesArrayCopy\n        ^\n/tmp/tmp752h1jns.swift:30:9:\
    \ note: 'gradesArrayCopyCopy' previously declared here\n    var gradesArrayCopyCopy:\
    \ [Double] = gradesArrayCopy\n        ^\n/tmp/tmp752h1jns.swift:35:9: error: invalid\
    \ redeclaration of 'gradesArrayCopyCopy'\n    var gradesArrayCopyCopy: [Double]\
    \ = gradesArrayCopy\n        ^\n/tmp/tmp752h1jns.swift:30:9: note: 'gradesArrayCopyCopy'\
    \ previously declared here\n    var gradesArrayCopyCopy: [Double] = gradesArrayCopy\n\
    \        ^\n/tmp/tmp752h1jns.swift:36:9: error: invalid redeclaration of 'gradesArrayCopyCopy'\n\
    \    var gradesArrayCopyCopy: [Double] = gradesArrayCopy\n        ^\n/tmp/tmp752h1jns.swift:30:9:\
    \ note: 'gradesArrayCopyCopy' previously declared here\n    var gradesArrayCopyCopy:\
    \ [Double] = gradesArrayCopy\n       "
  stdout: ''
  timestamp: 1660014654
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = grades.sorted()\n    var gradesArrayCount\
    \ = grades.count\n    var gradesArraySum = grades.reduce(0.0, +)\n    var gradesArrayAverage\
    \ = gradesArraySum / gradesArrayCount\n    var gradesArrayMin = grades.min()\n\
    \    var gradesArrayMax = grades.max()\n    var gradesArraySumOfSquares = grades.reduce(0.0,\
    \ +)\n    var gradesArraySumOfSquaresOfDifferences = gradesArraySumOfSquares -\
    \ gradesArraySum * gradesArraySum\n    var gradesArraySumOfSquaresOfSquaredDifferences\
    \ = gradesArraySumOfSquaresOfDifferences * gradesArraySumOfSquaresOfDifferences\n\
    \    var gradesArraySumOfSquaresOfSquaredDifferencesSquared = gradesArraySumOfSquaresOfSquaredDifferences\
    \ * gradesArraySumOfSquaresOfDifferences\n    var gradesArraySumOfSquaresOfSquaredDifferencesSquaredSquared\
    \ = gradesArraySumOfSquaresOfSquaredDifferencesSquared * gradesArraySumOfSquaresOfDifferencesSquared\n\
    \    var gradesArraySumOfSquaresOfSquaredDifferencesSquaredSquaredSquared = gradesArraySumOfSquaresOfSquaredDifferencesSquaredSquared\
    \ * gradesArraySumOfSquaresOfDifferencesSquaredSquared\n    var gradesArraySumOfSquaresOfSquaredDifferencesSquaredSquaredSquared\
    \ = gradesArraySumOfSquaresOfSquaredDifferencesSquaredSquared * gradesArraySumOfSquaresOfDifferencesSquaredSquaredSquared\n\
    \    var gradesArraySumOfSquaresOfSquaredDifferencesSquaredSquaredSquaredSquared\
    \ = gradesArraySumOfSquaresOfSquaredDifferencesSquaredSquared * gradesArraySumOfSquaresOfDifferencesSquaredSquaredSquaredSquared\n\
    \    var gradesArraySumOfSquaresOfSquaredDifferencesSquaredSquaredSquaredSquared\
    \ = gradesArraySumOfSquaresOfSquaredDifferencesSquaredSquared * gradesArraySumOfSquaresOfDifferencesSquaredSquaredSquaredSquared\n\
    \    var gradesArraySumOfSquaresOfSquaredDifferencesSquaredSquaredSquaredSquared\
    \ = gradesArraySumOfSquaresOfSquaredDifferencesSquaredSquared * gradesArraySumOfSquaresOfDifferencesSquaredSquaredSquaredSquared\n\
    \    var gradesArraySumOfSquaresOfSqu\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpt8hc3twx.swift:27:45: error: binary operator '/' cannot be applied\
    \ to operands of type 'Double' and 'Int'\n    var gradesArrayAverage = gradesArraySum\
    \ / gradesArrayCount\n                             ~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~~\n\
    /tmp/tmpt8hc3twx.swift:27:45: note: overloads for '/' exist with these partially\
    \ matching parameter lists: (Double, Double), (Int, Int)\n    var gradesArrayAverage\
    \ = gradesArraySum / gradesArrayCount\n                                      \
    \      ^\n/tmp/tmpt8hc3twx.swift:34:122: error: cannot find 'gradesArraySumOfSquaresOfDifferencesSquared'\
    \ in scope\n    var gradesArraySumOfSquaresOfSquaredDifferencesSquaredSquared\
    \ = gradesArraySumOfSquaresOfSquaredDifferencesSquared * gradesArraySumOfSquaresOfDifferencesSquared\n\
    \                                                                            \
    \                                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpt8hc3twx.swift:35:136: error: cannot find 'gradesArraySumOfSquaresOfDifferencesSquaredSquared'\
    \ in scope\n    var gradesArraySumOfSquaresOfSquaredDifferencesSquaredSquaredSquared\
    \ = gradesArraySumOfSquaresOfSquaredDifferencesSquaredSquared * gradesArraySumOfSquaresOfDifferencesSquaredSquared\n\
    \                                                                            \
    \                                                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpt8hc3twx.swift:36:136: error: cannot find 'gradesArraySumOfSquaresOfDifferencesSquaredSquaredSquared'\
    \ in scope\n    var gradesArraySumOfSquaresOfSquaredDifferencesSquaredSquaredSquared\
    \ = gradesArraySumOfSquaresOfSquaredDifferencesSquaredSquared * gradesArraySumOfSquaresOfDifferencesSquaredSquaredSquared\n\
    \                                                                            \
    \                                                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpt8hc3twx.swift:37:143: error: cannot find 'gradesArraySumOfSquaresOfDifferencesSquaredSquaredSquaredSquared'\
    \ in scope\n    var grade"
  stdout: ''
  timestamp: 1660014654
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades[0]\n\
    \    var grade = grades[1]\n    var gpaIndex = 0\n    var gradeIndex = 1\n   \
    \ while gpa > 0 {\n        if gpa > 3.0 {\n            letterGrades[gpaIndex]\
    \ = \"A+\"\n            gpaIndex += 1\n        } else if gpa > 2.7 {\n       \
    \     letterGrades[gpaIndex] = \"A\"\n            gpaIndex += 1\n        } else\
    \ if gpa > 2.3 {\n            letterGrades[gpaIndex] = \"A-\"\n            gpaIndex\
    \ += 1\n        } else if gpa > 1.3 {\n            letterGrades[gpaIndex] = \"\
    B+\"\n            gpaIndex += 1\n        } else if gpa > 1.7 {\n            letterGrades[gpaIndex]\
    \ = \"B\"\n            gpaIndex += 1\n        } else if gpa > 1.0 {\n        \
    \    letterGrades[gpaIndex] = \"B-\"\n            gpaIndex += 1\n        } else\
    \ if gpa > 0.7 {\n            letterGrades[gpaIndex] = \"C+\"\n            gpaIndex\
    \ += 1\n        } else if gpa > 0.3 {\n            letterGrades[gpaIndex] = \"\
    C\"\n            gpaIndex += 1\n        } else if gpa > 0.0 {\n            letterGrades[gpaIndex]\
    \ = \"C-\"\n            gpaIndex += 1\n        } else if gpa > 0.0 {\n       \
    \     letterGrades[gpaIndex] = \"D+\"\n            gpaIndex += 1\n        } else\
    \ if gpa > 0.0 {\n            letterGrades[gpaIndex] = \"D\"\n            gpaIndex\
    \ += 1\n        } else if gpa > 0.0 {\n            letterGrades[gpaIndex] = \"\
    D-\"\n            gpaIndex += 1\n        } else {\n            letterGrades[gpaIndex]\
    \ = \"E\"\n            gpaIndex += 1\n        }\n        gpa -= grade\n      \
    \  grade += grade\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac5921a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac591e9b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac591e9b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac591e9b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac591e9abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac591c9a9a0 specialized Array.subscript.modify
    + 0

    6    tmp4bpnzauu                        0x000055d67ee56019 <unavailable> + 8217

    7    tmp4bpnzauu                        0x000055d67ee5554d <unavailable> + 5453

    8    libc.so.6                          0x00002ac592390460 __libc_start_main +
    245

    9    tmp4bpnzauu                        0x000055d67ee55209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014654
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradeLetters: [String] = []\n    var gpa = grades[0]\n\
    \    for grade in grades {\n        if gpa > grade {\n            gradeLetters.append(\"\
    A+\")\n            gpa = grade\n        } else if gpa < grade {\n            gradeLetters.append(\"\
    A-\")\n            gpa = grade\n        } else if gpa == grade {\n           \
    \ gradeLetters.append(\"A\")\n            gpa = grade\n        } else if gpa >\
    \ grade && gpa < 3.0 {\n            gradeLetters.append(\"B+\")\n            gpa\
    \ = grade\n        } else if gpa > 3.0 && gpa < 3.7 {\n            gradeLetters.append(\"\
    B\")\n            gpa = grade\n        } else if gpa > 3.7 && gpa < 4.0 {\n  \
    \          gradeLetters.append(\"B-\")\n            gpa = grade\n        } else\
    \ if gpa > 4.0 && gpa < 5.0 {\n            gradeLetters.append(\"C+\")\n     \
    \       gpa = grade\n        } else if gpa > 5.0 && gpa < 6.0 {\n            gradeLetters.append(\"\
    C\")\n            gpa = grade\n        } else if gpa > 6.0 && gpa < 7.0 {\n  \
    \          gradeLetters.append(\"C-\")\n            gpa = grade\n        } else\
    \ if gpa > 7.0 && gpa < 8.0 {\n            gradeLetters.append(\"D+\")\n     \
    \       gpa = grade\n        } else if gpa > 8.0 && gpa < 9.0 {\n            gradeLetters.append(\"\
    D\")\n            gpa = grade\n        } else if gpa > 9.0 && gpa < 10.0 {\n \
    \           gradeLetters.append(\"D-\")\n            gpa = grade\n        } else\
    \ if gpa > 10.0 {\n            gradeLetters.append(\"E\")\n            gpa = grade\n\
    \        } else {\n            gradeLetters.append(\"E\")\n        }\n    }\n\
    \    return gradeLetters\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp9e7c7d1g/tmp9e7c7d1g.swift:86: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af733b28c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af73381fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af73381f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af73381e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9e7c7d1g                        0x000055e8640497f6 <unavailable> + 6134

    5    libc.so.6                          0x00002af733d14460 __libc_start_main +
    245

    6    tmp9e7c7d1g                        0x000055e864049319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014654
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades = [String]()\n    \n    for grade in grades\
    \ {\n        switch grade {\n        case 0...0.2:\n            letterGrades.append(\"\
    E\")\n        case 0.2...0.4:\n            letterGrades.append(\"D-\")\n     \
    \   case 0.4...0.6:\n            letterGrades.append(\"C-\")\n        case 0.6...0.8:\n\
    \            letterGrades.append(\"B-\")\n        case 0.8...1.0:\n          \
    \  letterGrades.append(\"B-\")\n        case 1.0...1.2:\n            letterGrades.append(\"\
    B-\")\n        case 1.2...1.4:\n            letterGrades.append(\"B-\")\n    \
    \    case 1.4...1.6:\n            letterGrades.append(\"B-\")\n        case 1.6...1.8:\n\
    \            letterGrades.append(\"B-\")\n        case 1.8...2.0:\n          \
    \  letterGrades.append(\"B-\")\n        case 2.0...2.2:\n            letterGrades.append(\"\
    B-\")\n        case 2.2...2.4:\n            letterGrades.append(\"B-\")\n    \
    \    case 2.4...2.6:\n            letterGrades.append(\"B-\")\n        case 2.6...2.8:\n\
    \            letterGrades.append(\"B-\")\n        case 2.8...3.0:\n          \
    \  letterGrades.append(\"B-\")\n        case 3.0...3.2:\n            letterGrades.append(\"\
    B-\")\n        case 3.2...3.4:\n            letterGrades.append(\"B-\")\n    \
    \    case 3.4...3.6:\n            letterGrades.append(\"B-\")\n        case 3.6...3.8:\n\
    \            letterGrades.append(\"B-\")\n        case 3.8...4.0:\n          \
    \  letterGrades.append(\"B-\")\n        case 4.0...4.2:\n            letterGrades.append(\"\
    B-\")\n        case 4.2...4.4:\n            letterGrades.append(\"B-\")\n    \
    \    case 4.4...4.6:\n            letterGrades.append(\"B-\")\n        case 4.6...4.8:\n\
    \            letterGrades.append(\"B-\")\n        case 4.8...5.0:\n          \
    \  letterGrades.append(\"B-\")\n        case 5.0...5.2:\n            letterGrades.append(\"\
    B-\")\n        case 5.2...5.4:\n            letterGrades.append(\"B-\")\n    \
    \    case 5.4...5.6:\n            letterGrades.append(\"B-\")\n        case 5.6...5.8:\n\
    \            letterGrades.append(\"B-\")\n        case 5.8...6.0:\n          \
    \  letterGrades.append(\"B-\")\n        case 6.0...6.2:\n            letterGrades.append(\"\
    B-\")\n        case 6.2...6.4:\n            letterGrades.append(\"B-\")\n    \
    \    case 6.4...6.6:\n            letterGrades.append(\"B-\")\n        case 6.6...6.8:\n\
    \            letter\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpzxm84aw1.swift:116:66: error: expected '}' at end of brace statement\n\
    assert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"])\n      \
    \                                                           ^\n/tmp/tmpzxm84aw1.swift:26:25:\
    \ note: to match this opening '{'\n    for grade in grades {\n               \
    \         ^\n/tmp/tmpzxm84aw1.swift:116:66: error: expected '}' at end of brace\
    \ statement\nassert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"\
    ])\n                                                                 ^\n/tmp/tmpzxm84aw1.swift:23:59:\
    \ note: to match this opening '{'\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n                                                          ^\n\
    /tmp/tmpzxm84aw1.swift:95:13: error: cannot find 'letter' in scope\n         \
    \   letter\n            ^~~~~~\n/tmp/tmpzxm84aw1.swift:27:9: error: switch must\
    \ be exhaustive\n        switch grade {\n        ^\n/tmp/tmpzxm84aw1.swift:27:9:\
    \ note: do you want to add a default clause?\n        switch grade {\n       \
    \ ^\n/tmp/tmpzxm84aw1.swift:99:6: error: operator functions can only be declared\
    \ at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014654
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var grades_string = \"\"\n    for grade in grades {\n   \
    \     switch grade {\n        case 0...3.0:\n            grades_string += \"D-\"\
    \n        case 3.0...5.0:\n            grades_string += \"D+\"\n        case 5.0...7.0:\n\
    \            grades_string += \"C\"\n        case 7.0...9.0:\n            grades_string\
    \ += \"C+\"\n        case 9.0...11.0:\n            grades_string += \"B\"\n  \
    \      case 11.0...13.0:\n            grades_string += \"B+\"\n        case 13.0...15.0:\n\
    \            grades_string += \"A-\"\n        case 15.0...17.0:\n            grades_string\
    \ += \"A+\"\n        case 17.0...19.0:\n            grades_string += \"A\"\n \
    \       case 19.0...20.0:\n            grades_string += \"A+\"\n        case 20.0...21.0:\n\
    \            grades_string += \"A-\"\n        case 21.0...22.0:\n            grades_string\
    \ += \"B+\"\n        case 22.0...23.0:\n            grades_string += \"B\"\n \
    \       case 23.0...24.0:\n            grades_string += \"B-\"\n        case 24.0...25.0:\n\
    \            grades_string += \"B-\"\n        case 25.0...26.0:\n            grades_string\
    \ += \"B-\"\n        case 26.0...27.0:\n            grades_string += \"B+\"\n\
    \        case 27.0...28.0:\n            grades_string += \"B\"\n        case 28.0...29.0:\n\
    \            grades_string += \"B+\"\n        case 29.0...30.0:\n            grades_string\
    \ += \"B+\"\n        case 30.0...31:\n            grades_string += \"B-\"\n  \
    \      case 31.0...32.0:\n            grades_string += \"B-\"\n        case 32.0...33.0:\n\
    \            grades_string += \"B-\"\n        case 33.0...34.0:\n            grades_string\
    \ += \"B-\"\n        case 34.0...35.0:\n            grades_string += \"B-\"\n\
    \        case 35.0...36.0:\n            grades_string += \"B-\"\n        case\
    \ 36.0...37.0:\n            grades_string += \"B-\"\n        case 37.0...38.0:\n\
    \            grades_string += \"B-\"\n        case 38.0...39.0:\n            grades_string\
    \ += \"B-\"\n        case 39.0...40.0:\n            grades_string += \"B-\"\n\
    \        case 40.0...41:\n            grades_string += \"B-\"\n        case 41.0...42.0:\n\
    \            grades_string += \"B-\"\n        case 42.0...43.0:\n            grades_string\
    \ += \"B-\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpyvm5je2x.swift:92:30: error: unterminated string literal\n    \
    \        grades_string += \"B-\n                             ^\n/tmp/tmpyvm5je2x.swift:113:66:\
    \ error: expected '}' at end of brace statement\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])\n                                          \
    \                       ^\n/tmp/tmpyvm5je2x.swift:25:25: note: to match this opening\
    \ '{'\n    for grade in grades {\n                        ^\n/tmp/tmpyvm5je2x.swift:113:66:\
    \ error: expected '}' at end of brace statement\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])\n                                          \
    \                       ^\n/tmp/tmpyvm5je2x.swift:23:59: note: to match this opening\
    \ '{'\nfunc numerical_letter_grade(grades: [Double]) -> [String] {\n         \
    \                                                 ^\n/tmp/tmpyvm5je2x.swift:26:9:\
    \ error: switch must be exhaustive\n        switch grade {\n        ^\n/tmp/tmpyvm5je2x.swift:26:9:\
    \ note: do you want to add a default clause?\n        switch grade {\n       \
    \ ^\n/tmp/tmpyvm5je2x.swift:96:6: error: operator functions can only be declared\
    \ at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014654
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = grades\n    var letterGrades = [String]()\n\
    \    \n    for i in gradesArray {\n        if i > 3.0 {\n            letterGrades.append(\"\
    A+\")\n        } else if i > 2.0 {\n            letterGrades.append(\"A\")\n \
    \       } else if i > 1.0 {\n            letterGrades.append(\"B+\")\n       \
    \ } else if i > 0.7 {\n            letterGrades.append(\"B\")\n        } else\
    \ if i > 0.3 {\n            letterGrades.append(\"B-\")\n        } else if i >\
    \ 0.0 {\n            letterGrades.append(\"C+\")\n        } else if i > -0.3 {\n\
    \            letterGrades.append(\"C\")\n        } else if i > -0.7 {\n      \
    \      letterGrades.append(\"C-\")\n        } else if i > -1.0 {\n           \
    \ letterGrades.append(\"D+\")\n        } else if i > -1.7 {\n            letterGrades.append(\"\
    D\")\n        } else if i > -2.0 {\n            letterGrades.append(\"D-\")\n\
    \        } else if i > -3.0 {\n            letterGrades.append(\"E\")\n      \
    \  } else {\n            letterGrades.append(\"F\")\n        }\n    }\n    return\
    \ letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpt6da7b93/tmpt6da7b93.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed30553c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed3024ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed3024a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed302497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt6da7b93                        0x00005578f5c867f6 <unavailable> + 6134

    5    libc.so.6                          0x00002aed3073f460 __libc_start_main +
    245

    6    tmpt6da7b93                        0x00005578f5c86319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014654
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var grades_string = \"\"\n    var total_grade = grades.reduce(0,\
    \ combine: +)\n    var total_letter_grade = \"\"\n    var total_letter_grade_index\
    \ = 0\n    var total_letter_grade_index2 = 0\n    var total_letter_grade_index3\
    \ = 0\n    var total_letter_grade_index4 = 0\n    var total_letter_grade_index5\
    \ = 0\n    var total_letter_grade_index6 = 0\n    var total_letter_grade_index7\
    \ = 0\n    var total_letter_grade_index8 = 0\n    var total_letter_grade_index9\
    \ = 0\n    var total_letter_grade_index10 = 0\n    var total_letter_grade_index11\
    \ = 0\n    var total_letter_grade_index12 = 0\n    var total_letter_grade_index13\
    \ = 0\n    var total_letter_grade_index14 = 0\n    var total_letter_grade_index15\
    \ = 0\n    var total_letter_grade_index16 = 0\n    var total_letter_grade_index17\
    \ = 0\n    var total_letter_grade_index18 = 0\n    var total_letter_grade_index19\
    \ = 0\n    var total_letter_grade_index20 = 0\n    var total_letter_grade_index21\
    \ = 0\n    var total_letter_grade_index22 = 0\n    var total_letter_grade_index23\
    \ = 0\n    var total_letter_grade_index24 = 0\n    var total_letter_grade_index25\
    \ = 0\n    var total_letter_grade_index26 = 0\n    var total_letter_grade_index27\
    \ = 0\n    var total_letter_grade_index28 = 0\n    var total_letter_grade_index29\
    \ = 0\n    var total_letter_grade_index30 = 0\n    var total_letter_grade_index31\
    \ = 0\n    var total_letter_grade_index32 = 0\n    var total_letter_grade_index33\
    \ = 0\n    var total_letter_grade_index34 = 0\n    var total_letter_grade_index35\
    \ = 0\n    var total_letter_grade_index36 = 0\n    var total_letter_grade_index37\
    \ = 0\n    var total_letter_grade_index38 = 0\n    var total_letter_grade_index39\
    \ = 0\n    var total_letter_grade_index40 = 0\n    var total_letter_grade_index41\
    \ = 0\n    var total_letter_grade_index42 = 0\n    var total_letter_grade_index43\
    \ = 0\n    var total_letter_grade_index44 = 0\n    var total_letter_grade_index45\
    \ = 0\n    var total_letter_grade_index46 = 0\n    var total_letter_grade_index47\
    \ = 0\n    var total_letter_grade_index48 = 0\n    var total_letter_grade_index49\
    \ = 0\n    var total_letter_grade_index50 = 0\n    var total_letter_grade_index51\
    \ = 0\n    var total_letter_grade_index52 = 0\n    var total_letter_grade_index53\
    \ = 0\n    var total_letter_grade_index54 = 0\n    var total_letter_grade_index55\
    \ = 0\n    var total_letter_grade_index56 = 0\n    var total_letter_grade_index57\
    \ = 0\n    var total_letter_grade_index58 = 0\n    var total_letter_grade_index59\
    \ = 0\n    var total_letter_grade_index60 = 0\n    var total_letter_grade_index61\
    \ = 0\n    var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp7oijypj2.swift:88:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp7oijypj2.swift:25:36: error: extraneous argument label 'combine:'\
    \ in call\n    var total_grade = grades.reduce(0, combine: +)\n              \
    \                     ^   ~~~~~~~~~\n                                       \n"
  stdout: ''
  timestamp: 1660014654
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    var totalGrade = grades.reduce(0,\
    \ combine: +)\n    var averageGrade = totalGrade / Double(grades.count)\n    var\
    \ letterGrade = \"\"\n    var gradeIndex = 0\n    \n    for grade in grades {\n\
    \        if grade >= averageGrade {\n            letterGrade = \"A+\"\n      \
    \      gradeIndex += 1\n        } else if grade >= averageGrade - 0.3 {\n    \
    \        letterGrade = \"A\"\n            gradeIndex += 1\n        } else if grade\
    \ >= averageGrade - 0.1 {\n            letterGrade = \"A-\"\n            gradeIndex\
    \ += 1\n        } else if grade >= averageGrade - 0.05 {\n            letterGrade\
    \ = \"B+\"\n            gradeIndex += 1\n        } else if grade >= averageGrade\
    \ - 0.01 {\n            letterGrade = \"B\"\n            gradeIndex += 1\n   \
    \     } else if grade >= averageGrade - 0.005 {\n            letterGrade = \"\
    B-\"\n            gradeIndex += 1\n        } else if grade >= averageGrade - 0.001\
    \ {\n            letterGrade = \"C+\"\n            gradeIndex += 1\n        }\
    \ else if grade >= averageGrade - 0.0005 {\n            letterGrade = \"C\"\n\
    \            gradeIndex += 1\n        } else if grade >= averageGrade - 0.0001\
    \ {\n            letterGrade = \"C-\"\n            gradeIndex += 1\n        }\
    \ else if grade >= averageGrade - 0.00005 {\n            letterGrade = \"D+\"\n\
    \            gradeIndex += 1\n        } else if grade >= averageGrade - 0.00001\
    \ {\n            letterGrade = \"D\"\n            gradeIndex += 1\n        } else\
    \ if grade >= averageGrade - 0.0000005 {\n            letterGrade = \"D-\"\n \
    \           gradeIndex += 1\n        } else {\n            letterGrade = \"E\"\
    \n            gradeIndex += 1\n        }\n        \n        gradesArray.append(letterGrade)\n\
    \    }\n    \n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpvf87hys_.swift:25:35: error: extraneous argument label 'combine:'\
    \ in call\n    var totalGrade = grades.reduce(0, combine: +)\n               \
    \                   ^   ~~~~~~~~~\n                                      \n"
  stdout: ''
  timestamp: 1660014654
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var grades_letter = [String]()\n    var gpa = grades[0]\n\
    \    var gpa_letter = String(gpa)\n    \n    for grade in grades {\n        if\
    \ grade > gpa {\n            grades_letter.append(gpa_letter)\n            gpa\
    \ = grade\n            gpa_letter = String(gpa)\n        } else {\n          \
    \  grades_letter.append(String(grade - gpa))\n        }\n    }\n    grades_letter.append(gpa_letter)\n\
    \    return grades_letter\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmptiq_sc5t/tmptiq_sc5t.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab518f68c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab518c5fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab518c5f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab518c5e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptiq_sc5t                        0x0000557ef26df916 <unavailable> + 6422

    5    libc.so.6                          0x00002ab519154460 __libc_start_main +
    245

    6    tmptiq_sc5t                        0x0000557ef26df439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1660014654
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var grades_string = \"\"\n    for grade in grades {\n   \
    \     switch grade {\n        case 0...0.1:\n            grades_string += \"E\"\
    \n        case 0.1:\n            grades_string += \"D+\"\n        case 0.2:\n\
    \            grades_string += \"D\"\n        case 0.3:\n            grades_string\
    \ += \"C+\"\n        case 0.4:\n            grades_string += \"C\"\n        case\
    \ 0.5:\n            grades_string += \"B+\"\n        case 0.6:\n            grades_string\
    \ += \"B\"\n        case 0.7:\n            grades_string += \"A+\"\n        case\
    \ 0.8:\n            grades_string += \"A\"\n        case 0.9:\n            grades_string\
    \ += \"A-\"\n        case 1.0:\n            grades_string += \"B+\"\n        case\
    \ 1.1:\n            grades_string += \"B\"\n        case 1.2:\n            grades_string\
    \ += \"C+\"\n        case 1.3:\n            grades_string += \"C\"\n        case\
    \ 1.4:\n            grades_string += \"D+\"\n        case 1.5:\n            grades_string\
    \ += \"D\"\n        case 1.6:\n            grades_string += \"E\"\n        default:\n\
    \            grades_string += \"F\"\n        }\n    }\n    return grades_string\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp8g_4tcsx.swift:65:12: error: cannot convert return expression of\
    \ type 'String' to return type '[String]'\n    return grades_string\n        \
    \   ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014654
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    var gpa: Double = 0\n\
    \    for grade in grades {\n        gpa += grade\n    }\n    if gpa < 4.0 {\n\
    \        gradesArray.append(\"A+\")\n    } else if gpa < 3.7 {\n        gradesArray.append(\"\
    A\")\n    } else if gpa < 3.3 {\n        gradesArray.append(\"A-\")\n    } else\
    \ if gpa < 3.0 {\n        gradesArray.append(\"B+\")\n    } else if gpa < 2.7\
    \ {\n        gradesArray.append(\"B\")\n    } else if gpa < 2.3 {\n        gradesArray.append(\"\
    B-\")\n    } else if gpa < 2.0 {\n        gradesArray.append(\"C+\")\n    } else\
    \ if gpa < 1.7 {\n        gradesArray.append(\"C\")\n    } else if gpa < 1.3 {\n\
    \        gradesArray.append(\"C-\")\n    } else if gpa < 1.0 {\n        gradesArray.append(\"\
    D+\")\n    } else if gpa < 0.7 {\n        gradesArray.append(\"D\")\n    } else\
    \ if gpa < 0.0 {\n        gradesArray.append(\"D-\")\n    } else {\n        gradesArray.append(\"\
    E\")\n    }\n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmppvbfxxqb/tmppvbfxxqb.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b72fae8ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b72fab81b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b72fab81988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b72fab807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppvbfxxqb                        0x000055fadc3e97a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b72fb076460 __libc_start_main +
    245

    6    tmppvbfxxqb                        0x000055fadc3e92c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014654
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var grades_copy = grades\n    grades_copy.sort()\n    var\
    \ grades_string = \"\"\n    var current_grade = 0.0\n    var current_letter =\
    \ \"\"\n    for grade in grades_copy {\n        if current_grade == 0.0 {\n  \
    \          current_letter = \"E\"\n        } else {\n            if current_grade\
    \ > 0.0 {\n                current_letter = \"D-\"\n            } else {\n   \
    \             current_letter = \"D\"\n            }\n        }\n        if current_grade\
    \ > 0.0 {\n            current_letter = \"B+\"\n        } else {\n           \
    \ current_letter = \"B\"\n        }\n        if current_grade > 0.0 {\n      \
    \      current_letter = \"B-\"\n        } else {\n            current_letter =\
    \ \"B\"\n        }\n        if current_grade > 0.0 {\n            current_letter\
    \ = \"A+\"\n        } else {\n            current_letter = \"A\"\n        }\n\
    \        if current_grade > 0.0 {\n            current_letter = \"A-\"\n     \
    \   } else {\n            current_letter = \"A\"\n        }\n        if current_grade\
    \ > 0.0 {\n            current_letter = \"C+\"\n        } else {\n           \
    \ current_letter = \"C\"\n        }\n        if current_grade > 0.0 {\n      \
    \      current_letter = \"C\"\n        } else {\n            current_letter =\
    \ \"C\"\n        }\n        if current_grade > 0.0 {\n            current_letter\
    \ = \"B\"\n        } else {\n            current_letter = \"B\"\n        }\n \
    \       if current_grade > 0.0 {\n            current_letter = \"A\"\n       \
    \ } else {\n            current_letter = \"A\"\n        }\n        if current_grade\
    \ > 0.0 {\n            current_letter = \"A\"\n        } else {\n            current_letter\
    \ = \"A\"\n        }\n        if current_grade > 0.0 {\n            current_letter\
    \ = \"+\"\n        } else {\n            current_letter = \"+\"\n        }\n \
    \       if current_grade > 0.0 {\n            current_letter = \"-\"\n       \
    \ } else {\n            current_letter = \"-\"\n        }\n        if current_grade\
    \ > 0.0 {\n            current_letter = \"0\"\n        } else {\n            current_letter\
    \ = \"0\"\n        }\n        if current_grade > 0.0 {\n            current_letter\
    \ = \"0\"\n        } else {\n            current_letter = \"0\"\n        }\n \
    \       if current_grade > 0.0 {\n            current_letter = \"0\"\n       \
    \ } else {\n            current_letter = \"0\"\n        }\n        if current_grade\
    \ > 0.0 {\n            current_letter = \"0\"\n        } else {\n            current_letter\
    \ = \"0\"\n        }\n        if current_grade > 0.0 {\n            current_letter\
    \ = \"0\"\n        } else {\n            current_letter = \"0\"\n        }\n \
    \       if current_grade > 0.0 {\n            current_letter = \"0\"\n       \
    \ } else {\n            current_letter = \"0\"\n        }\n        if current_grade\
    \ > 0.0 {\n            current_letter = \"0\"\n        } else {\n            current_letter\
    \ = \"0\"\n        }\n        if current_grade > 0.0 {\n            current_letter\
    \ = \"0\"\n        } else {\n            current_letter = \"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp27kd27jo.swift:132:30: error: unterminated string literal\n   \
    \         current_letter = \"\n                             ^\n/tmp/tmp27kd27jo.swift:153:66:\
    \ error: expected '}' at end of brace statement\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])\n                                          \
    \                       ^\n/tmp/tmp27kd27jo.swift:29:30: note: to match this opening\
    \ '{'\n    for grade in grades_copy {\n                             ^\n/tmp/tmp27kd27jo.swift:153:66:\
    \ error: expected '}' at end of brace statement\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])\n                                          \
    \                       ^\n/tmp/tmp27kd27jo.swift:23:59: note: to match this opening\
    \ '{'\nfunc numerical_letter_grade(grades: [Double]) -> [String] {\n         \
    \                                                 ^\n/tmp/tmp27kd27jo.swift:136:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014654
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    var gpa: Double = 0\n\
    \    var letterGrade: String = \"\"\n    for grade in grades {\n        gpa +=\
    \ grade\n        if gpa > 3.0 {\n            letterGrade = \"B+\"\n        } else\
    \ if gpa > 2.7 {\n            letterGrade = \"B\"\n        } else if gpa > 2.3\
    \ {\n            letterGrade = \"B-\"\n        } else if gpa > 1.3 {\n       \
    \     letterGrade = \"C+\"\n        } else if gpa > 0.7 {\n            letterGrade\
    \ = \"C\"\n        } else if gpa > 0.3 {\n            letterGrade = \"C-\"\n \
    \       } else if gpa > 0.0 {\n            letterGrade = \"D+\"\n        } else\
    \ if gpa > 0.0 {\n            letterGrade = \"D\"\n        } else if gpa > 0.0\
    \ {\n            letterGrade = \"D-\"\n        } else {\n            letterGrade\
    \ = \"E\"\n        }\n        gradesArray.append(letterGrade)\n        gpa = 0\n\
    \    }\n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpkhbxb28p/tmpkhbxb28p.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4b7b096c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4b7ad8db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4b7ad8d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4b7ad8c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkhbxb28p                        0x000055ebef1747a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b4b7b282460 __libc_start_main +
    245

    6    tmpkhbxb28p                        0x000055ebef1742c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014654
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradeLetters = [String]()\n    \n    for grade in grades\
    \ {\n        if grade > 3.0 {\n            gradeLetters.append(\"A+\")\n     \
    \   } else if grade > 2.0 {\n            gradeLetters.append(\"A\")\n        }\
    \ else if grade > 1.0 {\n            gradeLetters.append(\"B+\")\n        } else\
    \ if grade > 0.7 {\n            gradeLetters.append(\"B\")\n        } else if\
    \ grade > 0.3 {\n            gradeLetters.append(\"B-\")\n        } else if grade\
    \ > 0.0 {\n            gradeLetters.append(\"C+\")\n        } else if grade >\
    \ -0.3 {\n            gradeLetters.append(\"C\")\n        } else if grade > -0.7\
    \ {\n            gradeLetters.append(\"C-\")\n        } else if grade > -1.0 {\n\
    \            gradeLetters.append(\"D+\")\n        } else if grade > -1.7 {\n \
    \           gradeLetters.append(\"D\")\n        } else if grade > -2.0 {\n   \
    \         gradeLetters.append(\"D-\")\n        } else if grade > -3.0 {\n    \
    \        gradeLetters.append(\"E\")\n        } else {\n            gradeLetters.append(\"\
    E\")\n        }\n    }\n    return gradeLetters\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpn9_w370p/tmpn9_w370p.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00b2761c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00b2458b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00b2458988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00b24577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn9_w370p                        0x000055e2435327f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b00b294d460 __libc_start_main +
    245

    6    tmpn9_w370p                        0x000055e243532319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014654
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    var gradesArrayCopy = [Double]()\n\
    \    var gradesArrayCopy2 = [Double]()\n    var gradesArrayCopy3 = [Double]()\n\
    \    var gradesArrayCopy4 = [Double]()\n    var gradesArrayCopy5 = [Double]()\n\
    \    var gradesArrayCopy6 = [Double]()\n    var gradesArrayCopy7 = [Double]()\n\
    \    var gradesArrayCopy8 = [Double]()\n    var gradesArrayCopy9 = [Double]()\n\
    \    var gradesArrayCopy10 = [Double]()\n    var gradesArrayCopy11 = [Double]()\n\
    \    var gradesArrayCopy12 = [Double]()\n    var gradesArrayCopy13 = [Double]()\n\
    \    var gradesArrayCopy14 = [Double]()\n    var gradesArrayCopy15 = [Double]()\n\
    \    var gradesArrayCopy16 = [Double]()\n    var gradesArrayCopy17 = [Double]()\n\
    \    var gradesArrayCopy18 = [Double]()\n    var gradesArrayCopy19 = [Double]()\n\
    \    var gradesArrayCopy20 = [Double]()\n    var gradesArrayCopy21 = [Double]()\n\
    \    var gradesArrayCopy22 = [Double]()\n    var gradesArrayCopy23 = [Double]()\n\
    \    var gradesArrayCopy24 = [Double]()\n    var gradesArrayCopy25 = [Double]()\n\
    \    var gradesArrayCopy26 = [Double]()\n    var gradesArrayCopy27 = [Double]()\n\
    \    var gradesArrayCopy28 = [Double]()\n    var gradesArrayCopy29 = [Double]()\n\
    \    var gradesArrayCopy30 = [Double]()\n    var gradesArrayCopy31 = [Double]()\n\
    \    var gradesArrayCopy32 = [Double]()\n    var gradesArrayCopy33 = [Double]()\n\
    \    var gradesArrayCopy34 = [Double]()\n    var gradesArrayCopy35 = [Double]()\n\
    \    var gradesArrayCopy36 = [Double]()\n    var gradesArrayCopy37 = [Double]()\n\
    \    var gradesArrayCopy38 = [Double]()\n    var gradesArrayCopy39 = [Double]()\n\
    \    var gradesArrayCopy40 = [Double]()\n    var gradesArrayCopy41 = [Double]()\n\
    \    var gradesArrayCopy42 = [Double]()\n    var gradesArrayCopy43 = [Double]()\n\
    \    var gradesArrayCopy44 = [Double]()\n    var gradesArrayCopy45 = [Double]()\n\
    \    var gradesArrayCopy46 = [\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: '/tmp/tmpgahiz55_.swift:71:1: error: expected expression in container literal

    }

    ^

    '
  stdout: ''
  timestamp: 1660014654
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = grades\n    gradesArray = gradesArray.sorted()\n\
    \    var letterGrades = [String]()\n    var currentGrade = gradesArray[0]\n  \
    \  var currentLetterGrade = \"\"\n    var currentLetterGradeIndex = 0\n    for\
    \ index in 0..<gradesArray.count {\n        let currentGrade = gradesArray[index]\n\
    \        if currentGrade > currentGrade{\n            letterGrades[currentLetterGradeIndex]\
    \ = currentLetterGrade\n            currentLetterGrade = \"\"\n            currentLetterGradeIndex\
    \ += 1\n        }\n        if currentGrade == currentGrade{\n            letterGrades[currentLetterGradeIndex]\
    \ = currentLetterGrade + String(currentGrade)\n            currentLetterGrade\
    \ = \"\"\n            currentLetterGradeIndex += 1\n        }\n        if currentGrade\
    \ < currentGrade{\n            letterGrades[currentLetterGradeIndex] = currentLetterGrade\
    \ + String(currentGrade)\n            currentLetterGrade = \"\"\n            currentLetterGradeIndex\
    \ += 1\n        }\n    }\n    letterGrades[currentLetterGradeIndex] = currentLetterGrade\n\
    \    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002acd7f492c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd7f189561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002acd7f189286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002acd7f18913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002acd7f188bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002acd7ef889a0 specialized Array.subscript.modify
    + 0

    6    tmpegwl7r37                        0x000055fb32495706 <unavailable> + 9990

    7    tmpegwl7r37                        0x000055fb324948dd <unavailable> + 6365

    8    libc.so.6                          0x00002acd7f67e460 __libc_start_main +
    245

    9    tmpegwl7r37                        0x000055fb32494599 <unavailable> + 5529

    '
  stdout: ''
  timestamp: 1660014655
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades = [String]()\n    var totalGrade = grades.reduce(0,\
    \ combine: +)\n    var totalLetterGrade = grades.reduce(0, combine: +)\n    var\
    \ currentLetterGrade = \"\"\n    var currentGrade = totalGrade / Double(grades.count)\n\
    \    \n    for grade in grades {\n        totalGrade -= grade\n        totalLetterGrade\
    \ += grade\n        if totalLetterGrade >= currentGrade {\n            currentLetterGrade\
    \ = \"A+\"\n            totalLetterGrade -= currentGrade\n        } else if totalLetterGrade\
    \ >= currentGrade - 0.3 {\n            currentLetterGrade = \"A\"\n          \
    \  totalLetterGrade -= currentGrade - 0.3\n        } else if totalLetterGrade\
    \ >= currentGrade - 0.1 {\n            currentLetterGrade = \"A-\"\n         \
    \   totalLetterGrade -= currentGrade - 0.1\n        } else if totalLetterGrade\
    \ >= currentGrade - 0.05 {\n            currentLetterGrade = \"B+\"\n        \
    \    totalLetterGrade -= currentGrade - 0.05\n        } else if totalLetterGrade\
    \ >= currentGrade - 0.01 {\n            currentLetterGrade = \"B\"\n         \
    \   totalLetterGrade -= currentGrade - 0.01\n        } else if totalLetterGrade\
    \ >= currentGrade - 0.005 {\n            currentLetterGrade = \"B-\"\n       \
    \     totalLetterGrade -= currentGrade - 0.005\n        } else if totalLetterGrade\
    \ >= currentGrade - 0.001 {\n            currentLetterGrade = \"C+\"\n       \
    \     totalLetterGrade -= currentGrade - 0.001\n        } else if totalLetterGrade\
    \ >= currentGrade - 0.0005 {\n            currentLetterGrade = \"C\"\n       \
    \     totalLetterGrade -= currentGrade - 0.0005\n        } else if totalLetterGrade\
    \ >= currentGrade - 0.0001 {\n            currentLetterGrade = \"C-\"\n      \
    \      totalLetterGrade -= currentGrade - 0.0001\n        } else if totalLetterGrade\
    \ >= currentGrade - 0.00005 {\n            currentLetterGrade = \"D+\"\n     \
    \       totalLetterGrade -= currentGrade - 0.00005\n        } else if totalLetterGrade\
    \ >= currentGrade - 0.00001 {\n            currentLetterGrade = \"D\"\n      \
    \      totalLetterGrade -= currentGrade - 0.00001\n        } else if totalLetterGrade\
    \ >= currentGrade - 0.000005 {\n            currentLetterGrade = \"D-\"\n    \
    \        totalLetterGra\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp6_91h062.swift:89:66: error: expected '}' at end of brace statement\n\
    assert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"])\n      \
    \                                                           ^\n/tmp/tmp6_91h062.swift:30:25:\
    \ note: to match this opening '{'\n    for grade in grades {\n               \
    \         ^\n/tmp/tmp6_91h062.swift:89:66: error: expected '}' at end of brace\
    \ statement\nassert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"\
    ])\n                                                                 ^\n/tmp/tmp6_91h062.swift:23:59:\
    \ note: to match this opening '{'\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n                                                          ^\n\
    /tmp/tmp6_91h062.swift:25:35: error: extraneous argument label 'combine:' in call\n\
    \    var totalGrade = grades.reduce(0, combine: +)\n                         \
    \         ^   ~~~~~~~~~\n                                      \n/tmp/tmp6_91h062.swift:26:41:\
    \ error: extraneous argument label 'combine:' in call\n    var totalLetterGrade\
    \ = grades.reduce(0, combine: +)\n                                        ^  \
    \ ~~~~~~~~~\n                                            \n/tmp/tmp6_91h062.swift:68:13:\
    \ error: cannot find 'totalLetterGra' in scope\n            totalLetterGra\n \
    \           ^~~~~~~~~~~~~~\n/tmp/tmp6_91h062.swift:72:6: error: operator functions\
    \ can only be declared at global or in type scope\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014655
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    var gradesArrayCopy:\
    \ [Double] = []\n    var gradesArrayCopyCopy: [Double] = []\n    var gradesArrayCopyCopyCopy:\
    \ [Double] = []\n    var gradesArrayCopyCopyCopyCopy: [Double] = []\n    var gradesArrayCopyCopyCopyCopyCopy:\
    \ [Double] = []\n    var gradesArrayCopyCopyCopyCopyCopyCopy: [Double] = []\n\
    \    var gradesArrayCopyCopyCopyCopyCopyCopy: [Double] = []\n    var gradesArrayCopyCopyCopyCopyCopyCopyCopy:\
    \ [Double] = []\n    var gradesArrayCopyCopyCopyCopyCopyCopyCopy: [Double] = []\n\
    \    var gradesArrayCopyCopyCopyCopyCopyCopyCopyCopy: [Double] = []\n    var gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopy:\
    \ [Double] = []\n    var gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy:\
    \ [Double] = []\n    var gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy:\
    \ [Double] = []\n    var gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy:\
    \ [Double] = []\n    var gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy:\
    \ [Double] = []\n    var gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy:\
    \ [Double] = []\n    var gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy:\
    \ [Double] = []\n    var gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy:\
    \ [Double] = []\n    var gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy:\
    \ [Double] = []\n    var gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy:\
    \ [Double] = []\n    var gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy:\
    \ [Double] = []\n    var gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy:\
    \ [Double] = []\n    var gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy:\
    \ [Double] = []\n    var gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy:\
    \ [Double] = []\n    var gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy:\
    \ [Double] = []\n    var gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy:\
    \ [Double] = []\n    var gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpeus009eo.swift:31:9: error: invalid redeclaration of 'gradesArrayCopyCopyCopyCopyCopyCopy'\n\
    \    var gradesArrayCopyCopyCopyCopyCopyCopy: [Double] = []\n        ^\n/tmp/tmpeus009eo.swift:30:9:\
    \ note: 'gradesArrayCopyCopyCopyCopyCopyCopy' previously declared here\n    var\
    \ gradesArrayCopyCopyCopyCopyCopyCopy: [Double] = []\n        ^\n/tmp/tmpeus009eo.swift:33:9:\
    \ error: invalid redeclaration of 'gradesArrayCopyCopyCopyCopyCopyCopyCopy'\n\
    \    var gradesArrayCopyCopyCopyCopyCopyCopyCopy: [Double] = []\n        ^\n/tmp/tmpeus009eo.swift:32:9:\
    \ note: 'gradesArrayCopyCopyCopyCopyCopyCopyCopy' previously declared here\n \
    \   var gradesArrayCopyCopyCopyCopyCopyCopyCopy: [Double] = []\n        ^\n/tmp/tmpeus009eo.swift:37:9:\
    \ error: invalid redeclaration of 'gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy'\n\
    \    var gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy: [Double] = []\n\
    \        ^\n/tmp/tmpeus009eo.swift:36:9: note: 'gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy'\
    \ previously declared here\n    var gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy:\
    \ [Double] = []\n        ^\n/tmp/tmpeus009eo.swift:39:9: error: invalid redeclaration\
    \ of 'gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy'\n    var gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy:\
    \ [Double] = []\n        ^\n/tmp/tmpeus009eo.swift:38:9: note: 'gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy'\
    \ previously declared here\n    var gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy:\
    \ [Double] = []\n        ^\n/tmp/tmpeus009eo.swift:43:9: error: invalid redeclaration\
    \ of 'gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy'\n\
    \    var gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy:\
    \ [Double] = []\n        ^\n/tmp/tmpeus009eo.swift:42:9: note: 'gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy'\
    \ previously declared here\n    var gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy:\
    \ [Double] = []\n        ^\n/tmp/tmpeus009eo.swift:44:9: error: invalid redeclaration\
    \ of 'gradesA"
  stdout: ''
  timestamp: 1660014654
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    var gradesArrayIndex =\
    \ 0\n    var gradesArrayLength = grades.count\n    var gpa = grades[0]\n    var\
    \ gpaIndex = 0\n    var gpaLength = grades.count\n    var letterGrade = \"\"\n\
    \    \n    while (gpaIndex < gpaLength) {\n        gpa = grades[gpaIndex]\n  \
    \      \n        if gpa > 3.0 {\n            letterGrade = \"B+\"\n          \
    \  gradesArray[gradesArrayIndex] = letterGrade\n            gradesArrayIndex +=\
    \ 1\n        }\n        else if gpa > 2.7 {\n            letterGrade = \"B\"\n\
    \            gradesArray[gradesArrayIndex] = letterGrade\n            gradesArrayIndex\
    \ += 1\n        }\n        else if gpa > 2.3 {\n            letterGrade = \"B-\"\
    \n            gradesArray[gradesArrayIndex] = letterGrade\n            gradesArrayIndex\
    \ += 1\n        }\n        else if gpa > 1.3 {\n            letterGrade = \"C+\"\
    \n            gradesArray[gradesArrayIndex] = letterGrade\n            gradesArrayIndex\
    \ += 1\n        }\n        else if gpa > 1.7 {\n            letterGrade = \"C\"\
    \n            gradesArray[gradesArrayIndex] = letterGrade\n            gradesArrayIndex\
    \ += 1\n        }\n        else if gpa > 1.0 {\n            letterGrade = \"C-\"\
    \n            gradesArray[gradesArrayIndex] = letterGrade\n            gradesArrayIndex\
    \ += 1\n        }\n        else if gpa > 0.7 {\n            letterGrade = \"D+\"\
    \n            gradesArray[gradesArrayIndex] = letterGrade\n            gradesArrayIndex\
    \ += 1\n        }\n        else if gpa > 0.3 {\n            letterGrade = \"D\"\
    \n            gradesArray[gradesArrayIndex] = letterGrade\n            gradesArrayIndex\
    \ += 1\n        }\n        else if gpa > 0.0 {\n            letterGrade = \"D-\"\
    \n            gradesArray[gradesArrayIndex] = letterGrade\n            gradesArrayIndex\
    \ += 1\n        }\n        else if gpa > 0.0 {\n            letterGrade = \"E\"\
    \n            gradesArray[gradesArrayIndex] = letterGrade\n            gradesArrayIndex\
    \ += 1\n        }\n        else {\n            letterGrade = \"F\"\n         \
    \   gradesArray[gradesArrayIndex] = letterGrade\n            gradesArrayIndex\
    \ += 1\n        }\n        gpaIndex += 1\n    }\n    return gradesArray\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b3f917d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3f914c8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3f914c8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b3f914c813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3f914c7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b3f912c79a0 specialized Array.subscript.modify
    + 0

    6    tmpuby1xooy                        0x000055aa3bdd30f1 <unavailable> + 8433

    7    tmpuby1xooy                        0x000055aa3bdd259d <unavailable> + 5533

    8    libc.so.6                          0x00002b3f919bd460 __libc_start_main +
    245

    9    tmpuby1xooy                        0x000055aa3bdd2259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660014655
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = grades\n    var gradesArrayCopy = gradesArray\n\
    \    var gradesArrayCopy2 = gradesArray\n    var gradesArrayCopy3 = gradesArray\n\
    \    var gradesArrayCopy4 = gradesArray\n    var gradesArrayCopy5 = gradesArray\n\
    \    var gradesArrayCopy6 = gradesArray\n    var gradesArrayCopy7 = gradesArray\n\
    \    var gradesArrayCopy8 = gradesArray\n    var gradesArrayCopy9 = gradesArray\n\
    \    var gradesArrayCopy10 = gradesArray\n    var gradesArrayCopy11 = gradesArray\n\
    \    var gradesArrayCopy12 = gradesArray\n    var gradesArrayCopy13 = gradesArray\n\
    \    var gradesArrayCopy14 = gradesArray\n    var gradesArrayCopy15 = gradesArray\n\
    \    var gradesArrayCopy16 = gradesArray\n    var gradesArrayCopy17 = gradesArray\n\
    \    var gradesArrayCopy18 = gradesArray\n    var gradesArrayCopy19 = gradesArray\n\
    \    var gradesArrayCopy20 = gradesArray\n    var gradesArrayCopy21 = gradesArray\n\
    \    var gradesArrayCopy22 = gradesArray\n    var gradesArrayCopy23 = gradesArray\n\
    \    var gradesArrayCopy24 = gradesArray\n    var gradesArrayCopy25 = gradesArray\n\
    \    var gradesArrayCopy26 = gradesArray\n    var gradesArrayCopy27 = gradesArray\n\
    \    var gradesArrayCopy28 = gradesArray\n    var gradesArrayCopy29 = gradesArray\n\
    \    var gradesArrayCopy30 = gradesArray\n    var gradesArrayCopy31 = gradesArray\n\
    \    var gradesArrayCopy32 = gradesArray\n    var gradesArrayCopy33 = gradesArray\n\
    \    var gradesArrayCopy34 = gradesArray\n    var gradesArrayCopy35 = gradesArray\n\
    \    var gradesArrayCopy36 = gradesArray\n    var gradesArrayCopy37 = gradesArray\n\
    \    var gradesArrayCopy38 = gradesArray\n    var gradesArrayCopy39 = gradesArray\n\
    \    var gradesArrayCopy40 = gradesArray\n    var gradesArrayCopy41 = gradesArray\n\
    \    var gradesArrayCopy42 = gradesArray\n    var gradesArrayCopy43 = gradesArray\n\
    \    var gradesArrayCopy44 = gradesArray\n    var gradesArrayCopy45 = gradesArray\n\
    \    var gradesArrayCopy46 = gradesArray\n    var gradesArrayCopy47 = gradesArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpg71swbp2.swift:24:9: warning: variable 'gradesArray' was never\
    \ mutated; consider changing to 'let' constant\n    var gradesArray = grades\n\
    \    ~~~ ^\n    let\n/tmp/tmpg71swbp2.swift:25:9: warning: initialization of variable\
    \ 'gradesArrayCopy' was never used; consider replacing with assignment to '_'\
    \ or removing it\n    var gradesArrayCopy = gradesArray\n    ~~~~^~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpg71swbp2.swift:26:9: warning: initialization of variable 'gradesArrayCopy2'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var gradesArrayCopy2 = gradesArray\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpg71swbp2.swift:27:9:\
    \ warning: initialization of variable 'gradesArrayCopy3' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var gradesArrayCopy3 =\
    \ gradesArray\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpg71swbp2.swift:28:9: warning:\
    \ initialization of variable 'gradesArrayCopy4' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var gradesArrayCopy4 = gradesArray\n\
    \    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpg71swbp2.swift:29:9: warning: initialization\
    \ of variable 'gradesArrayCopy5' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var gradesArrayCopy5 = gradesArray\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpg71swbp2.swift:30:9: warning: initialization of variable 'gradesArrayCopy6'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var gradesArrayCopy6 = gradesArray\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpg71swbp2.swift:31:9:\
    \ warning: initialization of variable 'gradesArrayCopy7' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var gradesArrayCopy7 =\
    \ gradesArray\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpg71swbp2.swift:32:9: warning:\
    \ initialization of variable 'gradesArrayCopy8' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var gradesArrayCopy8 = gradesArray\n\
    \    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpg71swbp2.swift:33:9: warning: initialization\
    \ of variable 'grades"
  stdout: ''
  timestamp: 1660014654
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    grades.forEach {\n    \
    \    if $0 > 3.0 {\n            gradesArray.append(\"B-\")\n        } else if\
    \ $0 > 2.7 {\n            gradesArray.append(\"B-\")\n        } else if $0 > 2.3\
    \ {\n            gradesArray.append(\"B-\")\n        } else if $0 > 1.9 {\n  \
    \          gradesArray.append(\"B-\")\n        } else if $0 > 1.7 {\n        \
    \    gradesArray.append(\"B-\")\n        } else if $0 > 1.3 {\n            gradesArray.append(\"\
    B-\")\n        } else if $0 > 0.9 {\n            gradesArray.append(\"B-\")\n\
    \        } else if $0 > 0.7 {\n            gradesArray.append(\"B-\")\n      \
    \  } else if $0 > 0.3 {\n            gradesArray.append(\"B-\")\n        } else\
    \ if $0 > 0.0 {\n            gradesArray.append(\"B-\")\n        } else if $0\
    \ > -0.3 {\n            gradesArray.append(\"B-\")\n        } else if $0 > -0.7\
    \ {\n            gradesArray.append(\"B-\")\n        } else if $0 > -1.0 {\n \
    \           gradesArray.append(\"B-\")\n        } else if $0 > -1.7 {\n      \
    \      gradesArray.append(\"B-\")\n        } else if $0 > -2.0 {\n           \
    \ gradesArray.append(\"B-\")\n        } else if $0 > -3.0 {\n            gradesArray.append(\"\
    B-\")\n        } else if $0 > -3.7 {\n            gradesArray.append(\"B-\")\n\
    \        } else if $0 > -4.0 {\n            gradesArray.append(\"B-\")\n     \
    \   } else if $0 > -4.7 {\n            gradesArray.append(\"B-\")\n        } else\
    \ if $0 > -5.0 {\n            gradesArray.append(\"B-\")\n        } else if $0\
    \ > -5.7 {\n            gradesArray.append(\"B-\")\n        } else if $0 > -6.0\
    \ {\n            gradesArray.append(\"B-\")\n        } else if $0 > -6.7 {\n \
    \           gradesArray.append(\"B-\")\n        } else if $0 > -7.0 {\n      \
    \      gradesArray.append(\"B-\")\n        } else if $0 > -7.7 {\n           \
    \ gradesArray.append(\"B-\")\n        } else if $0 > -8.0 {\n            gradesArray.append(\"\
    B-\")\n        } else if $0 > -8.7 {\n            gradesArray.append(\"B-\")\n\
    \        } else if $0 > -9.0 {\n            gradesArray.append(\"B-\")\n     \
    \   } else if $0 > -9.7\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpzeugf2bl.swift:82:28: error: expected '{' after 'if' condition\n\
    \        } else if $0 > -9.7\n                           ^\n/tmp/tmpzeugf2bl.swift:103:66:\
    \ error: expected '}' at end of brace statement\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])\n                                          \
    \                       ^\n/tmp/tmpzeugf2bl.swift:23:59: note: to match this opening\
    \ '{'\nfunc numerical_letter_grade(grades: [Double]) -> [String] {\n         \
    \                                                 ^\n/tmp/tmpzeugf2bl.swift:86:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014654
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    var gradesArrayIndex\
    \ = 0\n    var gradesArrayIndexMax = grades.count - 1\n    for grade in grades\
    \ {\n        gradesArray[gradesArrayIndex] = \"\"\n        if grade > 3.0 {\n\
    \            gradesArray[gradesArrayIndex] = \"A+\"\n        } else if grade >\
    \ 2.7 {\n            gradesArray[gradesArrayIndex] = \"A\"\n        } else if\
    \ grade > 2.3 {\n            gradesArray[gradesArrayIndex] = \"A-\"\n        }\
    \ else if grade > 1.3 {\n            gradesArray[gradesArrayIndex] = \"B+\"\n\
    \        } else if grade > 1.7 {\n            gradesArray[gradesArrayIndex] =\
    \ \"B\"\n        } else if grade > 1.0 {\n            gradesArray[gradesArrayIndex]\
    \ = \"B-\"\n        } else if grade > 0.7 {\n            gradesArray[gradesArrayIndex]\
    \ = \"C+\"\n        } else if grade > 0.3 {\n            gradesArray[gradesArrayIndex]\
    \ = \"C\"\n        } else if grade > 0.0 {\n            gradesArray[gradesArrayIndex]\
    \ = \"C-\"\n        } else if grade > 0.0 {\n            gradesArray[gradesArrayIndex]\
    \ = \"D+\"\n        } else if grade > 0.0 {\n            gradesArray[gradesArrayIndex]\
    \ = \"D\"\n        } else if grade > 0.0 {\n            gradesArray[gradesArrayIndex]\
    \ = \"D-\"\n        } else {\n            gradesArray[gradesArrayIndex] = \"E\"\
    \n        }\n        gradesArrayIndex += 1\n        if gradesArrayIndex == gradesArrayIndexMax\
    \ {\n            gradesArrayIndex = 0\n        }\n    }\n    return gradesArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b27423ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b27420e2561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b27420e2286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b27420e213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b27420e1bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b2741ee19a0 specialized Array.subscript.modify
    + 0

    6    tmpm8unvpqr                        0x00005564fe75c1bd <unavailable> + 8637

    7    tmpm8unvpqr                        0x00005564fe75b65d <unavailable> + 5725

    8    libc.so.6                          0x00002b27425d7460 __libc_start_main +
    245

    9    tmpm8unvpqr                        0x00005564fe75b319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014655
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var grades_string = \"\"\n    for grade in grades {\n   \
    \     switch grade {\n        case 4.0:\n            grades_string += \"A+\"\n\
    \        case 3.7:\n            grades_string += \"A\"\n        case 3.3:\n  \
    \          grades_string += \"A-\"\n        case 3.0:\n            grades_string\
    \ += \"B+\"\n        case 2.7:\n            grades_string += \"B\"\n        case\
    \ 2.3:\n            grades_string += \"B-\"\n        case 2.0:\n            grades_string\
    \ += \"C+\"\n        case 1.7:\n            grades_string += \"C\"\n        case\
    \ 1.3:\n            grades_string += \"C-\"\n        case 1.0:\n            grades_string\
    \ += \"D+\"\n        case 0.7:\n            grades_string += \"D\"\n        case\
    \ 0.0:\n            grades_string += \"D-\"\n        default:\n            grades_string\
    \ += \"E\"\n        }\n    }\n    return grades_string\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp50c7nuq8.swift:55:12: error: cannot convert return expression of\
    \ type 'String' to return type '[String]'\n    return grades_string\n        \
    \   ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014654
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var gpaSum = grades.reduce(0, combine: +)\n    var gpaSum2\
    \ = grades.reduce(0, combine: +)\n    var gpaSum3 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum4 = grades.reduce(0, combine: +)\n    var gpaSum5 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum6 = grades.reduce(0, combine: +)\n    var gpaSum7\
    \ = grades.reduce(0, combine: +)\n    var gpaSum8 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum9 = grades.reduce(0, combine: +)\n    var gpaSum10 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum11 = grades.reduce(0, combine: +)\n    var gpaSum12\
    \ = grades.reduce(0, combine: +)\n    var gpaSum13 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum14 = grades.reduce(0, combine: +)\n    var gpaSum15 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum16 = grades.reduce(0, combine: +)\n    var gpaSum17\
    \ = grades.reduce(0, combine: +)\n    var gpaSum18 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum19 = grades.reduce(0, combine: +)\n    var gpaSum20 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum21 = grades.reduce(0, combine: +)\n    var gpaSum22\
    \ = grades.reduce(0, combine: +)\n    var gpaSum23 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum24 = grades.reduce(0, combine: +)\n    var gpaSum25 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum26 = grades.reduce(0, combine: +)\n    var gpaSum27\
    \ = grades.reduce(0, combine: +)\n    var gpaSum28 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum29 = grades.reduce(0, combine: +)\n    var gpaSum30 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum31 = grades.reduce(0, combine: +)\n    var gpaSum32\
    \ = grades.reduce(0, combine: +)\n    var gpaSum33 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum34 = grades.reduce(0, combine: +)\n    var gpaSum35 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum36 = grades.reduce(0, combine: +)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpvxhipmzz.swift:25:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n/tmp/tmpvxhipmzz.swift:26:31:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaSum = grades.reduce(0,\
    \ combine: +)\n                              ^   ~~~~~~~~~\n                 \
    \                 \n/tmp/tmpvxhipmzz.swift:27:32: error: extraneous argument label\
    \ 'combine:' in call\n    var gpaSum2 = grades.reduce(0, combine: +)\n       \
    \                        ^   ~~~~~~~~~\n                                   \n\
    /tmp/tmpvxhipmzz.swift:28:32: error: extraneous argument label 'combine:' in call\n\
    \    var gpaSum3 = grades.reduce(0, combine: +)\n                            \
    \   ^   ~~~~~~~~~\n                                   \n/tmp/tmpvxhipmzz.swift:29:32:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaSum4 = grades.reduce(0,\
    \ combine: +)\n                               ^   ~~~~~~~~~\n                \
    \                   \n/tmp/tmpvxhipmzz.swift:30:32: error: extraneous argument\
    \ label 'combine:' in call\n    var gpaSum5 = grades.reduce(0, combine: +)\n \
    \                              ^   ~~~~~~~~~\n                               \
    \    \n/tmp/tmpvxhipmzz.swift:31:32: error: extraneous argument label 'combine:'\
    \ in call\n    var gpaSum6 = grades.reduce(0, combine: +)\n                  \
    \             ^   ~~~~~~~~~\n                                   \n/tmp/tmpvxhipmzz.swift:32:32:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaSum7 = grades.reduce(0,\
    \ combine: +)\n                               ^   ~~~~~~~~~\n                \
    \                   \n/tmp/tmpvxhipmzz.swift:33:32: error: extraneous argument\
    \ label 'combine:' in call\n    var gpaSum8 = grades.reduce(0, combine: +)\n \
    \                              ^   ~~~~~~~~~\n                               \
    \    \n/tmp/tmpvxhipmzz.swift:34:32: error: extraneous argument label 'combine:'\
    \ in call\n    var gpaSum9 = grades.reduce(0, combine: +)\n                  \
    \             ^   ~~~~~~~~~"
  stdout: ''
  timestamp: 1660014654
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var grades_string = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var gpa_rounded = round(gpa)\n    var gpa_rounded_string =\
    \ String(gpa_rounded)\n    var gpa_rounded_string = String(gpa_rounded_string)\n\
    \    var gpa_rounded_string = String(gpa_rounded_string)\n    var gpa_rounded_string\
    \ = String(gpa_rounded_string)\n    var gpa_rounded_string = String(gpa_rounded_string)\n\
    \    var gpa_rounded_string = String(gpa_rounded_string)\n    var gpa_rounded_string\
    \ = String(gpa_rounded_string)\n    var gpa_rounded_string = String(gpa_rounded_string)\n\
    \    var gpa_rounded_string = String(gpa_rounded_string)\n    var gpa_rounded_string\
    \ = String(gpa_rounded_string)\n    var gpa_rounded_string = String(gpa_rounded_string)\n\
    \    var gpa_rounded_string = String(gpa_rounded_string)\n    var gpa_rounded_string\
    \ = String(gpa_rounded_string)\n    var gpa_rounded_string = String(gpa_rounded_string)\n\
    \    var gpa_rounded_string = String(gpa_rounded_string)\n    var gpa_rounded_string\
    \ = String(gpa_rounded_string)\n    var gpa_rounded_string = String(gpa_rounded_string)\n\
    \    var gpa_rounded_string = String(gpa_rounded_string)\n    var gpa_rounded_string\
    \ = String(gpa_rounded_string)\n    var gpa_rounded_string = String(gpa_rounded_string)\n\
    \    var gpa_rounded_string = String(gpa_rounded_string)\n    var gpa_rounded_string\
    \ = String(gpa_rounded_string)\n    var gpa_rounded_string = String(gpa_rounded_string)\n\
    \    var gpa_rounded_string = String(gpa_rounded_string)\n    var gpa_rounded_string\
    \ = String(gpa_rounded_string)\n    var gpa_rounded_string = String(gpa_rounded_string)\n\
    \    var gpa_rounded_string = String(gpa_rounded_string)\n    var gpa_rounded_string\
    \ = String(gpa_rounded_string)\n    var gpa_rounded_string = String(gpa_rounded_string)\n\
    \    var gpa_rounded_string = String(gpa_rounded_string)\n    var gpa_rounded_string\
    \ = String(gpa_rounded_string)\n    var gpa_rounded_string = String(gpa_rounded_string)\n\
    \    var gpa_rounded_string = String(gpa_rounded_string)\n    var gpa_rounded_string\
    \ = String(gpa_rounded_string)\n    var gpa_rounded_string = String(gpa_rounded_string)\n\
    \    var gpa_rounded_string = String(gpa_rounded_string)\n    var gpa_rounded_string\
    \ = String(gpa_rounded_string)\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp3xop03tk.swift:25:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n/tmp/tmp3xop03tk.swift:26:23:\
    \ error: cannot find 'round' in scope\n    var gpa_rounded = round(gpa)\n    \
    \                  ^~~~~\n"
  stdout: ''
  timestamp: 1660014654
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var grades_string = [String]()\n    var gpa = grades[0]\n\
    \    var gpa_count = grades.count\n    var letter_grade = \"\"\n    \n    if gpa_count\
    \ > 0 {\n        letter_grade = grades[gpa_count - 1]\n    }\n    \n    for _\
    \ in 0..<gpa_count {\n        if gpa < 3.0 {\n            letter_grade = \"A+\"\
    \n        } else if gpa < 3.7 {\n            letter_grade = \"A\"\n        } else\
    \ if gpa < 4.0 {\n            letter_grade = \"A-\"\n        } else if gpa < 4.3\
    \ {\n            letter_grade = \"B+\"\n        } else if gpa < 4.6 {\n      \
    \      letter_grade = \"B\"\n        } else if gpa < 4.9 {\n            letter_grade\
    \ = \"B-\"\n        } else if gpa < 5.3 {\n            letter_grade = \"C+\"\n\
    \        } else if gpa < 5.6 {\n            letter_grade = \"C\"\n        } else\
    \ if gpa < 5.9 {\n            letter_grade = \"C-\"\n        } else if gpa < 6.3\
    \ {\n            letter_grade = \"D+\"\n        } else if gpa < 6.6 {\n      \
    \      letter_grade = \"D\"\n        } else if gpa < 6.9 {\n            letter_grade\
    \ = \"D-\"\n        } else if gpa < 7.3 {\n            letter_grade = \"E\"\n\
    \        } else {\n            letter_grade = \"D\"\n        }\n        \n   \
    \     gpa += 0.1\n        grades_string.append(letter_grade)\n    }\n    \n  \
    \  return grades_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpcp4h8m07.swift:30:30: error: cannot assign value of type 'Double'\
    \ to type 'String'\n        letter_grade = grades[gpa_count - 1]\n           \
    \            ~~~~~~^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014654
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var grades_string = \"\"\n    var total_grades = grades.reduce(0,\
    \ +)\n    var total_letters = grades.reduce(0, +)\n    var total_letters_string\
    \ = \"\"\n    var total_letters_string_index = 0\n    var letter_grade = \"\"\n\
    \    var letter_grade_index = 0\n    var letter_grade_count = 0\n    var letter_grade_count_index\
    \ = 0\n    var letter_grade_count_string = \"\"\n    var letter_grade_count_string_index\
    \ = 0\n    var letter_grade_count_string_index = 0\n    var letter_grade_count_string_index\
    \ = 0\n    var letter_grade_count_string_index = 0\n    var letter_grade_count_string_index\
    \ = 0\n    var letter_grade_count_string_index = 0\n    var letter_grade_count_string_index\
    \ = 0\n    var letter_grade_count_string_index = 0\n    var letter_grade_count_string_index\
    \ = 0\n    var letter_grade_count_string_index = 0\n    var letter_grade_count_string_index\
    \ = 0\n    var letter_grade_count_string_index = 0\n    var letter_grade_count_string_index\
    \ = 0\n    var letter_grade_count_string_index = 0\n    var letter_grade_count_string_index\
    \ = 0\n    var letter_grade_count_string_index = 0\n    var letter_grade_count_string_index\
    \ = 0\n    var letter_grade_count_string_index = 0\n    var letter_grade_count_string_index\
    \ = 0\n    var letter_grade_count_string_index = 0\n    var letter_grade_count_string_index\
    \ = 0\n    var letter_grade_count_string_index = 0\n    var letter_grade_count_string_index\
    \ = 0\n    var letter_grade_count_string_index = 0\n    var letter_grade_count_string_index\
    \ = 0\n    var letter_grade_count_string_index = 0\n    var letter_grade_count_string_index\
    \ = 0\n    var letter_grade_count_string_index = 0\n    var letter_grade_count_string_index\
    \ = 0\n    var letter_grade_count_string_index = 0\n    var letter_grade_count_string_index\
    \ = 0\n    var letter_grade_count_string_index = 0\n    var letter_grade_count_string_index\
    \ = 0\n    var letter_grade_count_string_index = 0\n    var letter_grade_count_string_index\
    \ = 0\n    var letter_grade_count_string_index = 0\n    var letter_grade_count_string_index\
    \ = 0\n    var letter_grade_count_string_index = 0\n    var letter_grade_count_string_index\
    \ = 0\n    var letter_grade_count_string_index = 0\n    var letter_grade_count_string_index\
    \ = 0\n    var letter_grade_count_string_index = 0\n    var letter_grade_count_string_index\
    \ = 0\n    var letter_grade_count_string_index = 0\n    var letter_grade_count_string_index\
    \ = 0\n    var letter_grade_count_string_index = 0\n    var letter_grade_count_string_index\
    \ = 0\n    var letter_grade_count_string_index = 0\n    var letter_grade_count_string\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpz37wqplg.swift:35:9: error: invalid redeclaration of 'letter_grade_count_string_index'\n\
    \    var letter_grade_count_string_index = 0\n        ^\n/tmp/tmpz37wqplg.swift:34:9:\
    \ note: 'letter_grade_count_string_index' previously declared here\n    var letter_grade_count_string_index\
    \ = 0\n        ^\n/tmp/tmpz37wqplg.swift:36:9: error: invalid redeclaration of\
    \ 'letter_grade_count_string_index'\n    var letter_grade_count_string_index =\
    \ 0\n        ^\n/tmp/tmpz37wqplg.swift:34:9: note: 'letter_grade_count_string_index'\
    \ previously declared here\n    var letter_grade_count_string_index = 0\n    \
    \    ^\n/tmp/tmpz37wqplg.swift:37:9: error: invalid redeclaration of 'letter_grade_count_string_index'\n\
    \    var letter_grade_count_string_index = 0\n        ^\n/tmp/tmpz37wqplg.swift:34:9:\
    \ note: 'letter_grade_count_string_index' previously declared here\n    var letter_grade_count_string_index\
    \ = 0\n        ^\n/tmp/tmpz37wqplg.swift:38:9: error: invalid redeclaration of\
    \ 'letter_grade_count_string_index'\n    var letter_grade_count_string_index =\
    \ 0\n        ^\n/tmp/tmpz37wqplg.swift:34:9: note: 'letter_grade_count_string_index'\
    \ previously declared here\n    var letter_grade_count_string_index = 0\n    \
    \    ^\n/tmp/tmpz37wqplg.swift:39:9: error: invalid redeclaration of 'letter_grade_count_string_index'\n\
    \    var letter_grade_count_string_index = 0\n        ^\n/tmp/tmpz37wqplg.swift:34:9:\
    \ note: 'letter_grade_count_string_index' previously declared here\n    var letter_grade_count_string_index\
    \ = 0\n        ^\n/tmp/tmpz37wqplg.swift:40:9: error: invalid redeclaration of\
    \ 'letter_grade_count_string_index'\n    var letter_grade_count_string_index =\
    \ 0\n        ^\n/tmp/tmpz37wqplg.swift:34:9: note: 'letter_grade_count_string_index'\
    \ previously declared here\n    var letter_grade_count_string_index = 0\n    \
    \    ^\n/tmp/tmpz37wqplg.swift:41:9: error: invalid redeclaration of 'letter_grade_count_string_index'\n\
    \    var letter_grade_count_string_index = 0\n        ^\n/tmp/tmpz37wqplg.swift:34:9:\
    \ note: 'letter_grade_count_string_index' previously declared here\n    var letter_grade_co"
  stdout: ''
  timestamp: 1660014654
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var grades_string = \"\"\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var gpa_percent = gpa / grades.reduce(0, combine: *)\n    var\
    \ letter_grade = \"\"\n    switch gpa_percent {\n    case 0.0 < gpa < 1.0:\n \
    \       letter_grade = \"D+\"\n    case 1.0 < gpa < 2.0:\n        letter_grade\
    \ = \"D\"\n    case 2.0 < gpa < 3.0:\n        letter_grade = \"C-\"\n    case\
    \ 3.0 < gpa < 4.0:\n        letter_grade = \"C\"\n    case 4.0 < gpa < 5.0:\n\
    \        letter_grade = \"B-\"\n    case 5.0 < gpa < 6.0:\n        letter_grade\
    \ = \"B\"\n    case 6.0 < gpa < 7.0:\n        letter_grade = \"B-\"\n    case\
    \ 7.0 < gpa < 8.0:\n        letter_grade = \"B\"\n    case 8.0 < gpa < 9.0:\n\
    \        letter_grade = \"B-\"\n    case 9.0 < gpa < 10.0:\n        letter_grade\
    \ = \"B\"\n    case 10.0 < gpa < 11.0:\n        letter_grade = \"B-\"\n    case\
    \ 11.0 < gpa < 12.0:\n        letter_grade = \"B\"\n    case 12.0 < gpa < 13.0:\n\
    \        letter_grade = \"B-\"\n    case 13.0 < gpa < 14.0:\n        letter_grade\
    \ = \"B\"\n    case 14.0 < gpa < 15.0:\n        letter_grade = \"B-\"\n    case\
    \ 15.0 < gpa < 16.0:\n        letter_grade = \"B\"\n    case 16.0 < gpa < 17.0:\n\
    \        letter_grade = \"B-\"\n    case 17.0 < gpa < 18.0:\n        letter_grade\
    \ = \"B\"\n    case 18.0 < gpa < 19.0:\n        letter_grade = \"B-\"\n    case\
    \ 19.0 < gpa < 20.0:\n        letter_grade = \"B\"\n    case 20.0 < gpa < 21.0:\n\
    \        letter_grade = \"B-\"\n    case 21.0 < gpa < 22.0:\n        letter_grade\
    \ = \"B\"\n    case 22.0 < gpa < 23.0:\n        letter_grade = \"B-\"\n    case\
    \ 23.0 < gpa < 24.0:\n        letter_grade = \"B\"\n    case 24.0 < gpa < 25.0:\n\
    \        letter_grade = \"B-\"\n    case 25.0 < gpa < 26.0:\n        letter_grade\
    \ = \"B\"\n    case 26.0 < gpa < 27.0:\n        letter_grade = \"B-\"\n    case\
    \ 27.0 < gpa < 28.0:\n        letter_grade = \"B\"\n    case 28.0 < gpa < 29.0:\n\
    \        letter_grade = \"B-\"\n    case \n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpv_2a_zqy.swift:87:9: error: expected pattern\n    case \n     \
    \   ^\n/tmp/tmpv_2a_zqy.swift:87:9: error: expected ':' after 'case'\n    case\
    \ \n        ^\n/tmp/tmpv_2a_zqy.swift:108:66: error: expected '}' at end of brace\
    \ statement\nassert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"\
    ])\n                                                                 ^\n/tmp/tmpv_2a_zqy.swift:23:59:\
    \ note: to match this opening '{'\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n                                                          ^\n\
    /tmp/tmpv_2a_zqy.swift:25:28: error: extraneous argument label 'combine:' in call\n\
    \    var gpa = grades.reduce(0, combine: +)\n                           ^   ~~~~~~~~~\n\
    \                               \n/tmp/tmpv_2a_zqy.swift:26:42: error: extraneous\
    \ argument label 'combine:' in call\n    var gpa_percent = gpa / grades.reduce(0,\
    \ combine: *)\n                                         ^   ~~~~~~~~~\n      \
    \                                       \n/tmp/tmpv_2a_zqy.swift:91:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014654
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var grades_string = \"\"\n    for grade in grades {\n   \
    \     if grade < 3.0 {\n            grades_string += \"A+\"\n        } else if\
    \ grade < 3.3 {\n            grades_string += \"A\"\n        } else if grade <\
    \ 3.7 {\n            grades_string += \"A-\"\n        } else if grade < 4.0 {\n\
    \            grades_string += \"B+\"\n        } else if grade < 4.3 {\n      \
    \      grades_string += \"B\"\n        } else if grade < 4.7 {\n            grades_string\
    \ += \"B-\"\n        } else if grade < 5.0 {\n            grades_string += \"\
    C+\"\n        } else if grade < 5.3 {\n            grades_string += \"C\"\n  \
    \      } else if grade < 5.7 {\n            grades_string += \"C-\"\n        }\
    \ else if grade < 6.0 {\n            grades_string += \"D+\"\n        } else if\
    \ grade < 6.3 {\n            grades_string += \"D\"\n        } else if grade <\
    \ 6.7 {\n            grades_string += \"D-\"\n        } else if grade < 7.0 {\n\
    \            grades_string += \"E\"\n        } else {\n            grades_string\
    \ += \"F\"\n        }\n    }\n    return grades_string.characters.reversed().map\
    \ { String($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsqz1u5vj.swift:56:26: error: 'characters' is unavailable: Please\
    \ use String directly\n    return grades_string.characters.reversed().map { String($0)\
    \ }\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014655
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    var gpa: Double = 0.0\n\
    \    var letterGrade: String = \"\"\n    for grade in grades {\n        gpa +=\
    \ grade\n        if gpa > 3.0 {\n            letterGrade = \"B+\"\n        } else\
    \ if gpa > 2.7 {\n            letterGrade = \"B\"\n        } else if gpa > 2.3\
    \ {\n            letterGrade = \"B-\"\n        } else if gpa > 1.7 {\n       \
    \     letterGrade = \"C+\"\n        } else if gpa > 1.3 {\n            letterGrade\
    \ = \"C\"\n        } else if gpa > 1.0 {\n            letterGrade = \"C-\"\n \
    \       } else if gpa > 0.7 {\n            letterGrade = \"D+\"\n        } else\
    \ if gpa > 0.0 {\n            letterGrade = \"D\"\n        } else {\n        \
    \    letterGrade = \"D-\"\n        }\n        gradesArray.append(letterGrade)\n\
    \        gpa = 0.0\n    }\n    return gradesArray\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp53tcwd4a/tmp53tcwd4a.swift:67: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4f9d9fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4f9d6f5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4f9d6f5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4f9d6f47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp53tcwd4a                        0x0000563b7665d7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b4f9dbea460 __libc_start_main +
    245

    6    tmp53tcwd4a                        0x0000563b7665d2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014655
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    var gpa: Double = 0.0\n\
    \    var letterGrade: String = \"\"\n    for grade in grades {\n        gpa =\
    \ grade * 4.0\n        if gpa > 3.7 {\n            letterGrade = \"A+\"\n    \
    \    } else if gpa > 3.3 {\n            letterGrade = \"A\"\n        } else if\
    \ gpa > 3.0 {\n            letterGrade = \"B+\"\n        } else if gpa > 2.7 {\n\
    \            letterGrade = \"B\"\n        } else if gpa > 2.3 {\n            letterGrade\
    \ = \"B-\"\n        } else if gpa > 2.0 {\n            letterGrade = \"C+\"\n\
    \        } else if gpa > 1.7 {\n            letterGrade = \"C\"\n        } else\
    \ if gpa > 1.3 {\n            letterGrade = \"C-\"\n        } else if gpa > 1.0\
    \ {\n            letterGrade = \"D+\"\n        } else if gpa > 0.7 {\n       \
    \     letterGrade = \"D\"\n        } else if gpa > 0.0 {\n            letterGrade\
    \ = \"D-\"\n        } else {\n            letterGrade = \"E\"\n        }\n   \
    \     gradesArray.append(letterGrade)\n    }\n    return gradesArray\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpqpz4_i90/tmpqpz4_i90.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4e93d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4e90c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4e90c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4e90c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqpz4_i90                        0x000055ca9ab447a6 <unavailable> + 6054

    5    libc.so.6                          0x00002ae4e95bc460 __libc_start_main +
    245

    6    tmpqpz4_i90                        0x000055ca9ab442c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014655
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradeLetters = [String]()\n    for grade in grades {\n\
    \        let gradeLetter = grade >= 3.0 ? \"A+\" :\n            grade >= 2.7 ?\
    \ \"B\" :\n            grade >= 2.3 ? \"B-\" :\n            grade >= 2.0 ? \"\
    C+\" :\n            grade >= 1.7 ? \"C\" :\n            grade >= 1.3 ? \"C-\"\
    \ :\n            grade >= 1.0 ? \"D+\" :\n            grade >= 0.7 ? \"D\" :\n\
    \            grade >= 0.0 ? \"D-\" :\n            \"E\"\n        gradeLetters.append(gradeLetter)\n\
    \    }\n    return gradeLetters\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp01nucgsg/tmp01nucgsg.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b81d6ffcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b81d6cf3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b81d6cf3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b81d6cf27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp01nucgsg                        0x0000558256a317f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b81d71e8460 __libc_start_main +
    245

    6    tmp01nucgsg                        0x0000558256a31319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014655
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var letterGrade: String = \"\"\n    \n    if gpa > 4.0 {\n\
    \        letterGrade = \"A+\"\n    } else if gpa > 3.7 {\n        letterGrade\
    \ = \"A\"\n    } else if gpa > 3.3 {\n        letterGrade = \"A-\"\n    } else\
    \ if gpa > 3.0 {\n        letterGrade = \"B+\"\n    } else if gpa > 2.7 {\n  \
    \      letterGrade = \"B\"\n    } else if gpa > 2.3 {\n        letterGrade = \"\
    B-\"\n    } else if gpa > 2.0 {\n        letterGrade = \"C+\"\n    } else if gpa\
    \ > 1.7 {\n        letterGrade = \"C\"\n    } else if gpa > 1.3 {\n        letterGrade\
    \ = \"C-\"\n    } else if gpa > 1.0 {\n        letterGrade = \"D+\"\n    } else\
    \ if gpa > 0.7 {\n        letterGrade = \"D\"\n    } else if gpa > 0.0 {\n   \
    \     letterGrade = \"D-\"\n    } else {\n        letterGrade = \"E\"\n    }\n\
    \    \n    gradesArray.append(letterGrade)\n    return gradesArray\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpi8h4ga9f.swift:25:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n"
  stdout: ''
  timestamp: 1660014655
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = grades\n    gradesArray = gradesArray.sorted()\n\
    \    var gradesArrayCount = gradesArray.count\n    var gradesArraySum = gradesArray.reduce(0.0,\
    \ +)\n    var gradesArrayAverage = gradesArraySum / Double(gradesArrayCount)\n\
    \    var gradesArrayMin = gradesArray.reduce(0.0, min)\n    var gradesArrayMax\
    \ = gradesArray.reduce(0.0, max)\n    var gradesArraySumOfSquares = gradesArray.reduce(0.0,\
    \ { $0 * $0 })\n    var gradesArraySumOfSquaresOfDifference = gradesArray.reduce(0.0,\
    \ { $0 + $1 })\n    var gradesArraySumOfSquaresOfDifferenceSquare = gradesArray.reduce(0.0,\
    \ { $0 + $0 + $1 })\n    var gradesArraySumOfSquaresOfDifferenceSquareOfDifference\
    \ = gradesArray.reduce(0.0, { $0 + $0 + $0 + $1 })\n    var gradesArraySumOfSquaresOfDifferenceSquareOfDifferenceSquare\
    \ = gradesArray.reduce(0.0, { $0 + $0 + $0 + $0 + $1 })\n    var gradesArraySumOfSquaresOfDifferenceSquareOfDifferenceSquareOfDifference\
    \ = gradesArray.reduce(0.0, { $0 + $0 + $0 + $0 + $0 + $1 })\n    var gradesArraySumOfSquaresOfDifferenceSquareOfDifferenceSquareOfDifferenceSquare\
    \ = gradesArray.reduce(0.0, { $0 + $0 + $0 + $0 + $0 + $0 + $1 })\n    var gradesArraySumOfSquaresOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifference\
    \ = gradesArray.reduce(0.0, { $0 + $0 + $0 + $0 + $0 + $0 + $0 + $1 })\n    var\
    \ gradesArraySumOfSquaresOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifference\
    \ = gradesArray.reduce(0.0, { $0 + $0 + $0 + $0 + $0 + $0 + $0 + $0 + $0 + $1\
    \ })\n    var gradesArraySumOfSquaresOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquare\
    \ = gradesArray.reduce(0.0, { $0 + $0 + $0 + $0 + $0 + $0 + $0 + $0 + $0 + $0\
    \ + $1 })\n    var gradesArraySumOfSquaresOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquare\
    \ = gradesArray.reduce(0.0, { $0 + $0 + $0 + $0 + $0 + $0 + $0 + $0 + $0 + $0\
    \ + $0 + $1 })\n    var gradesArraySum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5yxr1jkf.swift:31:59: error: contextual closure type '(Double,\
    \ Double) throws -> Double' expects 2 arguments, but 1 was used in closure body\n\
    \    var gradesArraySumOfSquares = gradesArray.reduce(0.0, { $0 * $0 })\n    \
    \                                                      ^\n/tmp/tmp5yxr1jkf.swift:39:9:\
    \ error: invalid redeclaration of 'gradesArraySumOfSquaresOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifference'\n\
    \    var gradesArraySumOfSquaresOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifference\
    \ = gradesArray.reduce(0.0, { $0 + $0 + $0 + $0 + $0 + $0 + $0 + $0 + $0 + $1\
    \ })\n        ^\n/tmp/tmp5yxr1jkf.swift:38:9: note: 'gradesArraySumOfSquaresOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifference'\
    \ previously declared here\n    var gradesArraySumOfSquaresOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifference\
    \ = gradesArray.reduce(0.0, { $0 + $0 + $0 + $0 + $0 + $0 + $0 + $1 })\n     \
    \   ^\n/tmp/tmp5yxr1jkf.swift:41:9: error: invalid redeclaration of 'gradesArraySumOfSquaresOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquare'\n\
    \    var gradesArraySumOfSquaresOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquare\
    \ = gradesArray.reduce(0.0, { $0 + $0 + $0 + $0 + $0 + $0 + $0 + $0 + $0 + $0\
    \ + $0 + $1 })\n        ^\n/tmp/tmp5yxr1jkf.swift:40:9: note: 'gradesArraySumOfSquaresOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquare'\
    \ previously declared here\n    var gradesArraySumOfSquaresOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquare\
    \ = gradesArray.reduce(0.0, { $0 + $0 + $0 + $0 + $0 + $0 + $0 + $0 + $0 + $0\
    \ + $1 })\n        ^\n/tmp/tmp5yxr1jkf.swift:42:9: error: type annotation missing\
    \ in pattern\n    var gradesArraySum\n        ^\n"
  stdout: ''
  timestamp: 1660014655
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades[0]\n\
    \    var letterGrade = \"\"\n    for grade in grades {\n        if gpa > grade\
    \ {\n            letterGrade = \"A+\"\n            letterGrades.append(letterGrade)\n\
    \            gpa = grade - gpa\n        } else if gpa < grade {\n            letterGrade\
    \ = \"A\"\n            letterGrades.append(letterGrade)\n            gpa = grade\
    \ - gpa\n        } else if gpa == grade {\n            letterGrade = \"A+\"\n\
    \            letterGrades.append(letterGrade)\n            gpa = grade - gpa\n\
    \        } else {\n            letterGrade = \"B+\"\n            letterGrades.append(letterGrade)\n\
    \            gpa = grade - gpa\n        }\n    }\n    return letterGrades\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpti_0su6n/tmpti_0su6n.swift:62: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8926838c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b892652fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b892652f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b892652e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpti_0su6n                        0x000055b5f3131856 <unavailable> + 6230

    5    libc.so.6                          0x00002b8926a24460 __libc_start_main +
    245

    6    tmpti_0su6n                        0x000055b5f3131379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660014655
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = grades\n    var gradesArrayCopy = gradesArray\n\
    \    gradesArray.removeFirst()\n    gradesArray.removeLast()\n    gradesArrayCopy.removeFirst()\n\
    \    gradesArrayCopy.removeLast()\n    var gradesArrayCopy2 = gradesArrayCopy\n\
    \    var gradesArrayCopy3 = gradesArrayCopy\n    var gradesArrayCopy4 = gradesArrayCopy\n\
    \    var gradesArrayCopy5 = gradesArrayCopy\n    var gradesArrayCopy6 = gradesArrayCopy\n\
    \    var gradesArrayCopy7 = gradesArrayCopy\n    var gradesArrayCopy8 = gradesArrayCopy\n\
    \    var gradesArrayCopy9 = gradesArrayCopy\n    var gradesArrayCopy10 = gradesArrayCopy\n\
    \    var gradesArrayCopy11 = gradesArrayCopy\n    var gradesArrayCopy12 = gradesArrayCopy\n\
    \    var gradesArrayCopy13 = gradesArrayCopy\n    var gradesArrayCopy14 = gradesArrayCopy\n\
    \    var gradesArrayCopy15 = gradesArrayCopy\n    var gradesArrayCopy16 = gradesArrayCopy\n\
    \    var gradesArrayCopy17 = gradesArrayCopy\n    var gradesArrayCopy18 = gradesArrayCopy\n\
    \    var gradesArrayCopy19 = gradesArrayCopy\n    var gradesArrayCopy20 = gradesArrayCopy\n\
    \    var gradesArrayCopy21 = gradesArrayCopy\n    var gradesArrayCopy22 = gradesArrayCopy\n\
    \    var gradesArrayCopy23 = gradesArrayCopy\n    var gradesArrayCopy24 = gradesArrayCopy\n\
    \    var gradesArrayCopy25 = gradesArrayCopy\n    var gradesArrayCopy26 = gradesArrayCopy\n\
    \    var gradesArrayCopy27 = gradesArrayCopy\n    var gradesArrayCopy28 = gradesArrayCopy\n\
    \    var gradesArrayCopy29 = gradesArrayCopy\n    var gradesArrayCopy30 = gradesArrayCopy\n\
    \    var gradesArrayCopy31 = gradesArrayCopy\n    var gradesArrayCopy32 = gradesArrayCopy\n\
    \    var gradesArrayCopy33 = gradesArrayCopy\n    var gradesArrayCopy34 = gradesArrayCopy\n\
    \    var gradesArrayCopy35 = gradesArrayCopy\n    var gradesArrayCopy36 = gradesArrayCopy\n\
    \    var gradesArrayCopy37 = gradesArrayCopy\n    var gradesArrayCopy38 = gradesArrayCopy\n\
    \    var gradesArrayCopy39 = gradesArrayCopy\n    var gradesArrayCopy40 = gradesArrayCopy\n\
    \    var grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpq12ygiuj.swift:69:9: error: type annotation missing in pattern\n\
    \    var grades\n        ^\n"
  stdout: ''
  timestamp: 1660014655
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    var gpa: Double = 0.0\n\
    \    var letterGrade: String = \"\"\n    for grade in grades {\n        gpa =\
    \ grade * 4.0\n        if gpa > 3.0 {\n            letterGrade = \"A+\"\n    \
    \    } else if gpa > 2.7 {\n            letterGrade = \"A\"\n        } else if\
    \ gpa > 2.3 {\n            letterGrade = \"A-\"\n        } else if gpa > 1.7 &&\
    \ gpa < 2.0 {\n            letterGrade = \"B+\"\n        } else if gpa > 1.3 &&\
    \ gpa < 1.7 {\n            letterGrade = \"B\"\n        } else if gpa > 1.0 &&\
    \ gpa < 1.3 {\n            letterGrade = \"B-\"\n        } else if gpa > 0.7 &&\
    \ gpa < 1.0 {\n            letterGrade = \"C+\"\n        } else if gpa > 0.3 &&\
    \ gpa < 0.7 {\n            letterGrade = \"C\"\n        } else if gpa > 0.0 {\n\
    \            letterGrade = \"C-\"\n        } else {\n            letterGrade =\
    \ \"D+\"\n        }\n        gradesArray.append(letterGrade)\n    }\n    return\
    \ gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpxr2hvhu3/tmpxr2hvhu3.swift:68: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b06db8ddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b06db5d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b06db5d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b06db5d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxr2hvhu3                        0x000055b1b58e47a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b06dbac9460 __libc_start_main +
    245

    6    tmpxr2hvhu3                        0x000055b1b58e42c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014654
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = grades\n    gradesArray = gradesArray.reversed()\n\
    \    var letterGrades = [String]()\n    var currentGrade = gradesArray[0]\n  \
    \  var currentLetterGrade = \"E\"\n    var currentLetterGradeIndex = 0\n    var\
    \ currentLetterGradeIndexCount = 0\n    var currentLetterGradeIndexCountMax =\
    \ gradesArray.count\n    \n    for index in 0..<gradesArray.count {\n        if\
    \ currentGrade < gradesArray[index] {\n            currentGrade = gradesArray[index]\n\
    \            currentLetterGrade = \"E\"\n            currentLetterGradeIndex =\
    \ 0\n            currentLetterGradeIndexCount = 0\n            currentLetterGradeIndexCountMax\
    \ = gradesArray.count\n        }\n        \n        if currentGrade == gradesArray[index]\
    \ {\n            currentLetterGrade = letterGrades[currentLetterGradeIndex]\n\
    \            currentLetterGradeIndex += 1\n            currentLetterGradeIndexCount\
    \ += 1\n            if currentLetterGradeIndexCount == currentLetterGradeIndexCountMax\
    \ {\n                currentLetterGradeIndexCount = 0\n                currentLetterGradeIndex\
    \ += 1\n            }\n        }\n        \n        letterGrades.append(currentLetterGrade)\n\
    \    }\n    \n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8eb390cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8eb3603561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8eb3603286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8eb360313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8eb3602bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8eb3402fc3 <unavailable> + 188355

    6    tmp7wvxn_jm                        0x000055ac01f9a61b <unavailable> + 9755

    7    tmp7wvxn_jm                        0x000055ac01f997dd <unavailable> + 6109

    8    libc.so.6                          0x00002b8eb3af8460 __libc_start_main +
    245

    9    tmp7wvxn_jm                        0x000055ac01f99499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1660014655
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades = [String]()\n    \n    for grade in grades\
    \ {\n        if grade > 3.0 {\n            letterGrades.append(\"A+\")\n     \
    \   } else if grade > 2.7 {\n            letterGrades.append(\"B+\")\n       \
    \ } else if grade > 2.3 {\n            letterGrades.append(\"B-\")\n        }\
    \ else if grade > 1.3 {\n            letterGrades.append(\"C+\")\n        } else\
    \ if grade > 0.7 {\n            letterGrades.append(\"C\")\n        } else if\
    \ grade > 0.3 {\n            letterGrades.append(\"C-\")\n        } else if grade\
    \ > 0.0 {\n            letterGrades.append(\"D+\")\n        } else if grade >\
    \ -0.3 {\n            letterGrades.append(\"D-\")\n        } else if grade > -0.7\
    \ {\n            letterGrades.append(\"D\")\n        } else if grade > -1.0 {\n\
    \            letterGrades.append(\"D+\")\n        } else if grade > -1.7 {\n \
    \           letterGrades.append(\"D\")\n        } else if grade > -2.0 {\n   \
    \         letterGrades.append(\"D-\")\n        } else if grade > -3.0 {\n    \
    \        letterGrades.append(\"D\")\n        } else if grade > -3.7 {\n      \
    \      letterGrades.append(\"D+\")\n        } else if grade > -4.0 {\n       \
    \     letterGrades.append(\"D-\")\n        } else if grade > -4.7 {\n        \
    \    letterGrades.append(\"D\")\n        } else if grade > -5.0 {\n          \
    \  letterGrades.append(\"D+\")\n        } else if grade > -5.7 {\n           \
    \ letterGrades.append(\"D-\")\n        } else if grade > -6.0 {\n            letterGrades.append(\"\
    D\")\n        } else if grade > -6.7 {\n            letterGrades.append(\"D+\"\
    )\n        } else if grade > -7.0 {\n            letterGrades.append(\"D-\")\n\
    \        } else if grade > -7.7 {\n            letterGrades.append(\"D\")\n  \
    \      } else if grade > -8.0 {\n            letterGrades.append(\"D+\")\n   \
    \     } else if grade > -8.7 {\n            letterGrades.append(\"D-\")\n    \
    \    } else if grade > -9.0 {\n            letterGrades.append(\"D\")\n      \
    \  } else if grade > -9.7 {\n            letterGrades.append(\"D+\")\n       \
    \ } else if grade > -10.0 {\n            letterGrades.append(\"D-\")\n       \
    \ } else if grade > -10.7 {\n            letterGrades.append(\"D\")\n        }\
    \ else \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpy69jpecx.swift:83:15: error: expected '{' or 'if' after 'else'\n\
    \        } else \n              ^\n/tmp/tmpy69jpecx.swift:104:66: error: expected\
    \ '}' at end of brace statement\nassert(numerical_letter_grade(grades: [0.0, 0.7])\
    \ == [\"E\", \"D-\"])\n                                                      \
    \           ^\n/tmp/tmpy69jpecx.swift:23:59: note: to match this opening '{'\n\
    func numerical_letter_grade(grades: [Double]) -> [String] {\n                \
    \                                          ^\n/tmp/tmpy69jpecx.swift:87:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014655
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var grades_string = \"\"\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var gpa_rounded = round(gpa)\n    var gpa_rounded_string =\
    \ String(gpa_rounded)\n    var gpa_rounded_string_to_int = gpa_rounded_string.characters.reduce(0)\
    \ {\n        guard let char = $0 else { return 0 }\n        return char.unicodeScalars.reduce(0)\
    \ {\n            guard let char = $0 else { return 0 }\n            return char.value\
    \ - 48\n        }\n    }\n    var gpa_rounded_string_to_float = gpa_rounded_string.characters.reduce(0)\
    \ {\n        guard let char = $0 else { return 0 }\n        return char.unicodeScalars.reduce(0)\
    \ {\n            guard let char = $0 else { return 0 }\n            return char.value\
    \ - 48\n        }\n    }\n    var gpa_rounded_string_to_double = gpa_rounded_string.characters.reduce(0)\
    \ {\n        guard let char = $0 else { return 0 }\n        return char.unicodeScalars.reduce(0)\
    \ {\n            guard let char = $0 else { return 0 }\n            return char.value\
    \ - 48\n        }\n    }\n    var gpa_rounded_string_to_bool = gpa_rounded_string.characters.reduce(0)\
    \ {\n        guard let char = $0 else { return 0 }\n        return char.unicodeScalars.reduce(0)\
    \ {\n            guard let char = $0 else { return 0 }\n            return char.value\
    \ - 48\n        }\n    }\n    var gpa_rounded_string_to_bool2 = gpa_rounded_string.characters.reduce(0)\
    \ {\n        guard let char = $0 else { return 0 }\n        return char.unicodeScalars.reduce(0)\
    \ {\n            guard let char = $0 else { return 0 }\n            return char.value\
    \ - 48\n        }\n    }\n    var gpa_rounded_string_to_bool3 = gpa_rounded_string.characters.reduce(0)\
    \ {\n        guard let char = $0 else { return 0 }\n        return char.unicodeScalars.reduce(0)\
    \ {\n            guard let char = $0 else { return 0 }\n            return char.value\
    \ - 48\n        }\n    }\n    var gpa_rounded_string_to_bool4 = gpa_rounded_string.characters.reduce(0)\
    \ {\n        guard let char = $0 else { return 0 }\n        return char.unicodeScalars.reduce(0)\
    \ {\n            guard let char = $0 else { return 0 }\n            return char.value\
    \ - 48\n        }\n    }\n    var gpa_rounded_string_to_bool5 = gpa_rounded_string.characters.reduce(0)\
    \ {\n        guard let char = $0 else { return 0 }\n        return char.unicodeScalars.reduce(0)\
    \ {\n            guard let char = $0 else { return 0 }\n            return char.value\
    \ - 48\n        }\n    }\n    var gpa_\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpk_edzgqn.swift:25:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n/tmp/tmpk_edzgqn.swift:26:23:\
    \ error: cannot find 'round' in scope\n    var gpa_rounded = round(gpa)\n    \
    \                  ^~~~~\n/tmp/tmpk_edzgqn.swift:84:9: error: type annotation\
    \ missing in pattern\n    var gpa_\n        ^\n"
  stdout: ''
  timestamp: 1660014655
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var grades_string = \"\"\n    for grade in grades {\n   \
    \     if grade > 3.0 {\n            grades_string += \"B+\"\n        } else if\
    \ grade > 2.7 {\n            grades_string += \"B\"\n        } else if grade >\
    \ 2.3 {\n            grades_string += \"B-\"\n        } else if grade > 2.0 {\n\
    \            grades_string += \"C+\"\n        } else if grade > 1.7 {\n      \
    \      grades_string += \"C\"\n        } else if grade > 1.3 {\n            grades_string\
    \ += \"C-\"\n        } else if grade > 1.0 {\n            grades_string += \"\
    D+\"\n        } else if grade > 0.7 {\n            grades_string += \"D\"\n  \
    \      } else if grade > 0.0 {\n            grades_string += \"D-\"\n        }\
    \ else {\n            grades_string += \"E\"\n        }\n    }\n    return grades_string\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmphiqjrg3p.swift:48:12: error: cannot convert return expression of\
    \ type 'String' to return type '[String]'\n    return grades_string\n        \
    \   ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014655
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var grades_string = \"\"\n    for grade in grades {\n   \
    \     if grade > 3.0 {\n            grades_string += \"B-\"\n        } else if\
    \ grade > 2.7 {\n            grades_string += \"B-\"\n        } else if grade\
    \ > 2.3 {\n            grades_string += \"B-\"\n        } else if grade > 1.3\
    \ {\n            grades_string += \"B-\"\n        } else if grade > 0.7 {\n  \
    \          grades_string += \"B-\"\n        } else if grade > 0.3 {\n        \
    \    grades_string += \"B-\"\n        } else if grade > 0.0 {\n            grades_string\
    \ += \"B-\"\n        } else if grade > -1.0 {\n            grades_string += \"\
    B-\"\n        } else if grade > -2.7 {\n            grades_string += \"B-\"\n\
    \        } else if grade > -3.3 {\n            grades_string += \"B-\"\n     \
    \   } else if grade > -3.0 {\n            grades_string += \"B-\"\n        } else\
    \ if grade > -3.7 {\n            grades_string += \"B-\"\n        } else if grade\
    \ > -4.3 {\n            grades_string += \"B-\"\n        } else if grade > -4.0\
    \ {\n            grades_string += \"B-\"\n        } else if grade > -4.7 {\n \
    \           grades_string += \"B-\"\n        } else if grade > -5.3 {\n      \
    \      grades_string += \"B-\"\n        } else if grade > -5.0 {\n           \
    \ grades_string += \"B-\"\n        } else if grade > -5.7 {\n            grades_string\
    \ += \"B-\"\n        } else if grade > -6.3 {\n            grades_string += \"\
    B-\"\n        } else if grade > -6.0 {\n            grades_string += \"B-\"\n\
    \        } else if grade > -6.7 {\n            grades_string += \"B-\"\n     \
    \   } else if grade > -7.3 {\n            grades_string += \"B-\"\n        } else\
    \ if grade > -7.0 {\n            grades_string += \"B-\"\n        } else if grade\
    \ > -7.7 {\n            grades_string += \"B-\"\n        } else if grade > -8.3\
    \ {\n            grades_string += \"B-\"\n        } else if grade > -8.0 {\n \
    \           grades_string += \"B-\"\n        } else if grade > -8.7 {\n      \
    \      grades_string += \"B-\"\n        } else if grade > -9.3 {\n           \
    \ grades_string += \"B-\"\n        } else if grade > -9.0 {\n            \n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp31s72pot.swift:104:66: error: expected '}' at end of brace statement\n\
    assert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"])\n      \
    \                                                           ^\n/tmp/tmp31s72pot.swift:25:25:\
    \ note: to match this opening '{'\n    for grade in grades {\n               \
    \         ^\n/tmp/tmp31s72pot.swift:104:66: error: expected '}' at end of brace\
    \ statement\nassert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"\
    ])\n                                                                 ^\n/tmp/tmp31s72pot.swift:23:59:\
    \ note: to match this opening '{'\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n                                                          ^\n\
    /tmp/tmp31s72pot.swift:87:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014655
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    \n    for i in grades\
    \ {\n        let grade = Double(i)\n        \n        if grade < 3.0 {\n     \
    \       gradesArray.append(\"A+\")\n        } else if grade < 3.7 {\n        \
    \    gradesArray.append(\"A\")\n        } else if grade < 4.0 {\n            gradesArray.append(\"\
    A-\")\n        } else if grade < 4.3 {\n            gradesArray.append(\"B+\"\
    )\n        } else if grade < 4.6 {\n            gradesArray.append(\"B\")\n  \
    \      } else if grade < 4.9 {\n            gradesArray.append(\"B-\")\n     \
    \   } else if grade < 5.2 {\n            gradesArray.append(\"C+\")\n        }\
    \ else if grade < 5.5 {\n            gradesArray.append(\"C\")\n        } else\
    \ if grade < 5.8 {\n            gradesArray.append(\"C-\")\n        } else if\
    \ grade < 6.1 {\n            gradesArray.append(\"D+\")\n        } else if grade\
    \ < 6.4 {\n            gradesArray.append(\"D\")\n        } else if grade < 6.7\
    \ {\n            gradesArray.append(\"D-\")\n        } else if grade < 7 {\n \
    \           gradesArray.append(\"E\")\n        } else {\n            gradesArray.append(\"\
    D-\")\n        }\n    }\n    \n    return gradesArray\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp4fsb3zqh/tmp4fsb3zqh.swift:76: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b97998c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b97995bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b97995bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b97995bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4fsb3zqh                        0x000056500c2ad7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b9799ab2460 __libc_start_main +
    245

    6    tmp4fsb3zqh                        0x000056500c2ad319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014655
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradeLetters: [String] = []\n    var gpa: Double = 0.0\n\
    \    for grade in grades {\n        gpa += grade\n    }\n    for grade in grades\
    \ {\n        if gpa > 3.0 {\n            gradeLetters.append(\"A+\")\n       \
    \ } else if gpa > 2.7 {\n            gradeLetters.append(\"B+\")\n        } else\
    \ if gpa > 2.3 {\n            gradeLetters.append(\"B-\")\n        } else if gpa\
    \ > 1.7 {\n            gradeLetters.append(\"C+\")\n        } else if gpa > 1.0\
    \ {\n            gradeLetters.append(\"C\")\n        } else if gpa > 0.7 {\n \
    \           gradeLetters.append(\"C-\")\n        } else if gpa > 0.3 {\n     \
    \       gradeLetters.append(\"D+\")\n        } else if gpa > 0.0 {\n         \
    \   gradeLetters.append(\"D\")\n        } else if gpa > -0.3 {\n            gradeLetters.append(\"\
    D-\")\n        } else if gpa > -0.7 {\n            gradeLetters.append(\"E\")\n\
    \        } else {\n            gradeLetters.append(\"E\")\n        }\n       \
    \ gpa -= grade\n    }\n    return gradeLetters\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpdm6eaxr3/tmpdm6eaxr3.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac0c0dc6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac0c0abdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac0c0abd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac0c0abc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdm6eaxr3                        0x0000556a7d2777a6 <unavailable> + 6054

    5    libc.so.6                          0x00002ac0c0fb2460 __libc_start_main +
    245

    6    tmpdm6eaxr3                        0x0000556a7d2772c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014655
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = grades\n    var gradesArrayCopy = gradesArray\n\
    \    var gradesArrayCopyCount = gradesArrayCopy.count\n    var gradesArrayCopyIndex\
    \ = 0\n    var gradesArrayCopyIndexCount = 0\n    var gradesArrayCopyIndexCountMax\
    \ = gradesArrayCopyCount - 1\n    var gradesArrayCopyIndexCountMin = 0\n    var\
    \ gradesArrayCopyIndexCountMinMax = gradesArrayCopyCount - 1\n    var gradesArrayCopyIndexCountMinMax\
    \ = gradesArrayCopyCount - 1\n    var gradesArrayCopyIndexCountMinMax = gradesArrayCopyCount\
    \ - 1\n    var gradesArrayCopyIndexCountMinMax = gradesArrayCopyCount - 1\n  \
    \  var gradesArrayCopyIndexCountMinMax = gradesArrayCopyCount - 1\n    var gradesArrayCopyIndexCountMinMax\
    \ = gradesArrayCopyCount - 1\n    var gradesArrayCopyIndexCountMinMax = gradesArrayCopyCount\
    \ - 1\n    var gradesArrayCopyIndexCountMinMax = gradesArrayCopyCount - 1\n  \
    \  var gradesArrayCopyIndexCountMinMax = gradesArrayCopyCount - 1\n    var gradesArrayCopyIndexCountMinMax\
    \ = gradesArrayCopyCount - 1\n    var gradesArrayCopyIndexCountMinMax = gradesArrayCopyCount\
    \ - 1\n    var gradesArrayCopyIndexCountMinMax = gradesArrayCopyCount - 1\n  \
    \  var gradesArrayCopyIndexCountMinMax = gradesArrayCopyCount - 1\n    var gradesArrayCopyIndexCountMinMax\
    \ = gradesArrayCopyCount - 1\n    var gradesArrayCopyIndexCountMinMax = gradesArrayCopyCount\
    \ - 1\n    var gradesArrayCopyIndexCountMinMax = gradesArrayCopyCount - 1\n  \
    \  var gradesArrayCopyIndexCountMinMax = gradesArrayCopyCount - 1\n    var gradesArrayCopyIndexCountMinMax\
    \ = gradesArrayCopyCount - 1\n    var gradesArrayCopyIndexCountMinMax = gradesArrayCopyCount\
    \ - 1\n    var gradesArrayCopyIndexCountMinMax = gradesArrayCopyCount - 1\n  \
    \  var gradesArrayCopyIndexCountMinMax = gradesArrayCopyCount - 1\n    var gradesArrayCopyIndexCountMinMax\
    \ = gradesArrayCopyCount - 1\n    var gradesArrayCopyIndexCountMinMax = gradesArrayCopyCount\
    \ - 1\n    var gradesArrayCopyIndexCountMinMax = gradesArrayCopyCount - 1\n  \
    \  var gradesArrayCopyIndexCountMinMax = gradesArrayCopyCount - 1\n    var gradesArrayCopyIndexCountMinMax\
    \ = gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpz7a0jqnp.swift:32:9: error: invalid redeclaration of 'gradesArrayCopyIndexCountMinMax'\n\
    \    var gradesArrayCopyIndexCountMinMax = gradesArrayCopyCount - 1\n        ^\n\
    /tmp/tmpz7a0jqnp.swift:31:9: note: 'gradesArrayCopyIndexCountMinMax' previously\
    \ declared here\n    var gradesArrayCopyIndexCountMinMax = gradesArrayCopyCount\
    \ - 1\n        ^\n/tmp/tmpz7a0jqnp.swift:33:9: error: invalid redeclaration of\
    \ 'gradesArrayCopyIndexCountMinMax'\n    var gradesArrayCopyIndexCountMinMax =\
    \ gradesArrayCopyCount - 1\n        ^\n/tmp/tmpz7a0jqnp.swift:31:9: note: 'gradesArrayCopyIndexCountMinMax'\
    \ previously declared here\n    var gradesArrayCopyIndexCountMinMax = gradesArrayCopyCount\
    \ - 1\n        ^\n/tmp/tmpz7a0jqnp.swift:34:9: error: invalid redeclaration of\
    \ 'gradesArrayCopyIndexCountMinMax'\n    var gradesArrayCopyIndexCountMinMax =\
    \ gradesArrayCopyCount - 1\n        ^\n/tmp/tmpz7a0jqnp.swift:31:9: note: 'gradesArrayCopyIndexCountMinMax'\
    \ previously declared here\n    var gradesArrayCopyIndexCountMinMax = gradesArrayCopyCount\
    \ - 1\n        ^\n/tmp/tmpz7a0jqnp.swift:35:9: error: invalid redeclaration of\
    \ 'gradesArrayCopyIndexCountMinMax'\n    var gradesArrayCopyIndexCountMinMax =\
    \ gradesArrayCopyCount - 1\n        ^\n/tmp/tmpz7a0jqnp.swift:31:9: note: 'gradesArrayCopyIndexCountMinMax'\
    \ previously declared here\n    var gradesArrayCopyIndexCountMinMax = gradesArrayCopyCount\
    \ - 1\n        ^\n/tmp/tmpz7a0jqnp.swift:36:9: error: invalid redeclaration of\
    \ 'gradesArrayCopyIndexCountMinMax'\n    var gradesArrayCopyIndexCountMinMax =\
    \ gradesArrayCopyCount - 1\n        ^\n/tmp/tmpz7a0jqnp.swift:31:9: note: 'gradesArrayCopyIndexCountMinMax'\
    \ previously declared here\n    var gradesArrayCopyIndexCountMinMax = gradesArrayCopyCount\
    \ - 1\n        ^\n/tmp/tmpz7a0jqnp.swift:37:9: error: invalid redeclaration of\
    \ 'gradesArrayCopyIndexCountMinMax'\n    var gradesArrayCopyIndexCountMinMax =\
    \ gradesArrayCopyCount - 1\n        ^\n/tmp/tmpz7a0jqnp.swift:31:9: note: 'gradesArrayCopyIndexCountMinMax'\
    \ previously declared here\n    var gradesArrayCopyIndexCountMinMax = gradesArrayCopyCount\
    \ - 1\n"
  stdout: ''
  timestamp: 1660014655
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var gpaSum = gpa\n    var gpaIndex = 0\n    while gpa > 0 {\n\
    \        let gpaDiff = gpa - gpaSum\n        let gpaSum = gpaSum + gpaDiff\n \
    \       let gpaIndex = gpaIndex + gpaDiff\n        let letterGrade = letterGrades[gpaIndex]\n\
    \        if letterGrade != nil {\n            letterGrades.append(letterGrade!)\n\
    \        }\n        gpa = gpaSum\n    }\n    return letterGrades\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpidm2nnv0.swift:25:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n"
  stdout: ''
  timestamp: 1660014655
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    var totalGrade: Double\
    \ = 0\n    var totalGradeIndex = 0\n    var totalGradeIndex2: Int = 0\n    var\
    \ totalGradeIndex3: Int = 0\n    var totalGradeIndex4: Int = 0\n    var totalGradeIndex5:\
    \ Int = 0\n    var totalGradeIndex6: Int = 0\n    var totalGradeIndex7: Int =\
    \ 0\n    var totalGradeIndex8: Int = 0\n    var totalGradeIndex9: Int = 0\n  \
    \  var totalGradeIndex10: Int = 0\n    var totalGradeIndex11: Int = 0\n    var\
    \ totalGradeIndex12: Int = 0\n    var totalGradeIndex13: Int = 0\n    var totalGradeIndex14:\
    \ Int = 0\n    var totalGradeIndex15: Int = 0\n    var totalGradeIndex16: Int\
    \ = 0\n    var totalGradeIndex17: Int = 0\n    var totalGradeIndex18: Int = 0\n\
    \    var totalGradeIndex19: Int = 0\n    var totalGradeIndex20: Int = 0\n    var\
    \ totalGradeIndex21: Int = 0\n    var totalGradeIndex22: Int = 0\n    var totalGradeIndex23:\
    \ Int = 0\n    var totalGradeIndex24: Int = 0\n    var totalGradeIndex25: Int\
    \ = 0\n    var totalGradeIndex26: Int = 0\n    var totalGradeIndex27: Int = 0\n\
    \    var totalGradeIndex28: Int = 0\n    var totalGradeIndex29: Int = 0\n    var\
    \ totalGradeIndex30: Int = 0\n    var totalGradeIndex31: Int = 0\n    var totalGradeIndex32:\
    \ Int = 0\n    var totalGradeIndex33: Int = 0\n    var totalGradeIndex34: Int\
    \ = 0\n    var totalGradeIndex35: Int = 0\n    var totalGradeIndex36: Int = 0\n\
    \    var totalGradeIndex37: Int = 0\n    var totalGradeIndex38: Int = 0\n    var\
    \ totalGradeIndex39: Int = 0\n    var totalGradeIndex40: Int = 0\n    var totalGradeIndex41:\
    \ Int = 0\n    var totalGradeIndex42: Int = 0\n    var totalGradeIndex43: Int\
    \ = 0\n    var totalGradeIndex44: Int = 0\n    var totalGradeIndex45: Int = 0\n\
    \    var totalGradeIndex46: Int = 0\n    var totalGradeIndex47: Int = 0\n    var\
    \ totalGradeIndex48: Int = 0\n    var totalGradeIndex49: Int = 0\n    var totalGradeIndex50:\
    \ Int = 0\n    var totalGra\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp1mmr0xe_.swift:76:9: error: type annotation missing in pattern\n\
    \    var totalGra\n        ^\n"
  stdout: ''
  timestamp: 1660014655
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var grades_string = [String]()\n    \n    // The first letter\
    \ grade is always A+\n    grades_string.append(String(grades[0]))\n    \n    //\
    \ The second letter grade is always A if the first letter grade is A+\n    if\
    \ grades[0] > 3.0 {\n        grades_string.append(String(grades[0] - 3.0))\n \
    \   }\n    \n    // The third letter grade is always A if the first two letter\
    \ grades are A+\n    if grades[0] > 3.0 && grades[1] > 3.0 {\n        grades_string.append(String(grades[0]\
    \ - 3.0 - 3.0))\n    }\n    \n    // The fourth letter grade is always B if the\
    \ third letter grade is A+\n    if grades[0] > 3.0 && grades[1] > 3.0 && grades[2]\
    \ > 3.0 {\n        grades_string.append(String(grades[0] - 3.0 - 3.0 - 3.0))\n\
    \    }\n    \n    // The fifth letter grade is always B if the fourth letter grade\
    \ is A+\n    if grades[0] > 3.0 && grades[1] > 3.0 && grades[2] > 3.0 && grades[3]\
    \ > 3.0 {\n        grades_string.append(String(grades[0] - 3.0 - 3.0 - 3.0 - 3.0))\n\
    \    }\n    \n    // The sixth letter grade is always B if the fifth letter grade\
    \ is A+\n    if grades[0] > 3.0 && grades[1] > 3.0 && grades[2] > 3.0 && grades[3]\
    \ > 3.0 && grades[4] > 3.0 {\n        grades_string.append(String(grades[0] -\
    \ 3.0 - 3.0 - 3.0 - 3.0 - 3.0))\n    }\n    \n    // The seventh letter grade\
    \ is always C if the sixth letter grade is A+\n    if grades[0] > 3.0 && grades[1]\
    \ > 3.0 && grades[2] > 3.0 && grades[3] > 3.0 && grades[4] > 3.0 && grades[5]\
    \ > 3.0 {\n        grades_string.append(String(grades[0] - 3.0 - 3.0 - 3.0 - 3.0\
    \ - 3.0 - 3.0))\n    }\n    \n    // The eighth letter grade is always C if the\
    \ seventh letter grade is A+\n    if grades[0] > 3.0 && grades[1] > 3.0 && grades[2]\
    \ > 3.0 && grades[3] > 3.0 && grades[4] > 3.0 && grades[5] > 3.0 && grades[6]\
    \ > 3.0 {\n        grades_string.append(String(grades[0] - 3.0 - 3.0 - 3.0 - 3.0\
    \ - 3.0 - 3.0 - 3.0))\n    }\n    \n    // The ninth letter grade is always C\
    \ if the eighth letter grade is A+\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: '/tmp/tmp2h3cvleu.swift:65:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014655
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades = [String]()\n    \n    for i in 0..<grades.count\
    \ {\n        let gpa = grades[i]\n        let letterGrade = letterGradeForGPA(gpa)\n\
    \        letterGrades.append(letterGrade)\n    }\n    \n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpf3z41uas.swift:28:27: error: cannot find 'letterGradeForGPA' in\
    \ scope\n        let letterGrade = letterGradeForGPA(gpa)\n                  \
    \        ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014655
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var grades_letters = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    let gpa_index = grades.firstIndex(where: { $0 > gpa })\n  \
    \  if gpa_index == grades.count - 1 {\n        grades_letters.append(\"E\")\n\
    \    } else {\n        grades_letters.append(grades[gpa_index].description)\n\
    \    }\n    for index in stride(from: gpa_index + 1, to: grades.count, by: 1)\
    \ {\n        let gpa = grades[index]\n        let letter = grades_letters[index]\n\
    \        if gpa > 3.0 {\n            grades_letters[index] = \"B-\"\n        }\
    \ else if gpa > 2.7 {\n            grades_letters[index] = \"B-\"\n        } else\
    \ if gpa > 2.3 {\n            grades_letters[index] = \"B-\"\n        } else if\
    \ gpa > 1.7 {\n            grades_letters[index] = \"B-\"\n        } else if gpa\
    \ > 1.0 {\n            grades_letters[index] = \"B-\"\n        } else if gpa >\
    \ 0.7 {\n            grades_letters[index] = \"B-\"\n        } else if gpa > 0.3\
    \ {\n            grades_letters[index] = \"B-\"\n        } else if gpa > 0.0 {\n\
    \            grades_letters[index] = \"B-\"\n        } else if gpa > -0.3 {\n\
    \            grades_letters[index] = \"B-\"\n        } else if gpa > -0.7 {\n\
    \            grades_letters[index] = \"B-\"\n        } else if gpa > -1.0 {\n\
    \            grades_letters[index] = \"B-\"\n        } else if gpa > -1.7 {\n\
    \            grades_letters[index] = \"B-\"\n        } else if gpa > -2.0 {\n\
    \            grades_letters[index] = \"B-\"\n        } else if gpa > -3.0 {\n\
    \            grades_letters[index] = \"B-\"\n        } else if gpa > -3.7 {\n\
    \            grades_letters[index] = \"B-\"\n        } else if gpa > -4.0 {\n\
    \            grades_letters[index] = \"B-\"\n        } else if gpa > -4.7 {\n\
    \            grades_letters[index] = \"B-\"\n        } else if gpa > -5.0 {\n\
    \            grades_letters[index] = \"B-\"\n        } else if gpa > -5.7 {\n\
    \            grades_letters[index] = \"B-\"\n        } else if gpa > -6.0 {\n\
    \            grades_letters[index] = \"B-\"\n        } else if gpa > -6.7 {\n\
    \            grades_letters[index] = \"B-\"\n        } else if gpa > -7.0 {\n\
    \            grades_letters[index] = \"B-\"\n        } else if \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5mob48ws.swift:79:18: error: expected expression, var, or let in\
    \ 'if' condition\n        } else if \n                 ^\n/tmp/tmp5mob48ws.swift:100:66:\
    \ error: expected '}' at end of brace statement\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])\n                                          \
    \                       ^\n/tmp/tmp5mob48ws.swift:23:59: note: to match this opening\
    \ '{'\nfunc numerical_letter_grade(grades: [Double]) -> [String] {\n         \
    \                                                 ^\n/tmp/tmp5mob48ws.swift:25:28:\
    \ error: extraneous argument label 'combine:' in call\n    var gpa = grades.reduce(0,\
    \ combine: +)\n                           ^   ~~~~~~~~~\n                    \
    \           \n/tmp/tmp5mob48ws.swift:83:6: error: operator functions can only\
    \ be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014655
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    for grade in grades {\n\
    \        switch grade {\n        case 4.0:\n            gradesArray.append(\"\
    A+\")\n        case 3.7:\n            gradesArray.append(\"A\")\n        case\
    \ 3.3:\n            gradesArray.append(\"A-\")\n        case 3.0:\n          \
    \  gradesArray.append(\"B+\")\n        case 2.7:\n            gradesArray.append(\"\
    B\")\n        case 2.3:\n            gradesArray.append(\"B-\")\n        case\
    \ 2.0:\n            gradesArray.append(\"C+\")\n        case 1.7:\n          \
    \  gradesArray.append(\"C\")\n        case 1.3:\n            gradesArray.append(\"\
    C-\")\n        case 1.0:\n            gradesArray.append(\"D+\")\n        case\
    \ 0.7:\n            gradesArray.append(\"D\")\n        case 0.0:\n           \
    \ gradesArray.append(\"D-\")\n        case 0.0:\n            gradesArray.append(\"\
    E\")\n        default:\n            break\n        }\n    }\n    return gradesArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmph5enhjx3/tmph5enhjx3.swift:73: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3f8d305c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3f8cffcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3f8cffc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3f8cffb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph5enhjx3                        0x000055c6a9dec7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b3f8d4f1460 __libc_start_main +
    245

    6    tmph5enhjx3                        0x000055c6a9dec319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014655
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades = [String]()\n    for grade in grades {\n\
    \        if grade > 3.0 {\n            letterGrades.append(\"A+\")\n        }\
    \ else if grade > 2.7 {\n            letterGrades.append(\"A\")\n        } else\
    \ if grade > 2.3 {\n            letterGrades.append(\"A-\")\n        } else if\
    \ grade > 2.0 {\n            letterGrades.append(\"B+\")\n        } else if grade\
    \ > 1.7 {\n            letterGrades.append(\"B\")\n        } else if grade > 1.3\
    \ {\n            letterGrades.append(\"B-\")\n        } else if grade > 1.0 {\n\
    \            letterGrades.append(\"C+\")\n        } else if grade > 0.7 {\n  \
    \          letterGrades.append(\"C\")\n        } else if grade > 0.0 {\n     \
    \       letterGrades.append(\"C-\")\n        } else if grade > 0.0 {\n       \
    \     letterGrades.append(\"D+\")\n        } else if grade > 0.0 {\n         \
    \   letterGrades.append(\"D\")\n        } else {\n            letterGrades.append(\"\
    D-\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpu0kynx4c/tmpu0kynx4c.swift:68: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b02e4d7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b02e4a72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b02e4a72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02e4a717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu0kynx4c                        0x000056428b4d17f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b02e4f67460 __libc_start_main +
    245

    6    tmpu0kynx4c                        0x000056428b4d1319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014655
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades = [String]()\n    var totalGrade = grades.reduce(0,\
    \ combine: +)\n    var totalLetterGrade = grades.reduce(0, combine: +)\n    var\
    \ totalLetterGradePercent = grades.reduce(0, combine: +)\n    var totalLetterGradePercentPercent\
    \ = grades.reduce(0, combine: +)\n    var totalLetterGradePercentPercentPercent\
    \ = grades.reduce(0, combine: +)\n    var totalLetterGradePercentPercentPercent\
    \ = grades.reduce(0, combine: +)\n    var totalLetterGradePercentPercentPercent\
    \ = grades.reduce(0, combine: +)\n    var totalLetterGradePercentPercentPercent\
    \ = grades.reduce(0, combine: +)\n    var totalLetterGradePercentPercentPercent\
    \ = grades.reduce(0, combine: +)\n    var totalLetterGradePercentPercentPercent\
    \ = grades.reduce(0, combine: +)\n    var totalLetterGradePercentPercentPercent\
    \ = grades.reduce(0, combine: +)\n    var totalLetterGradePercentPercentPercent\
    \ = grades.reduce(0, combine: +)\n    var totalLetterGradePercentPercentPercent\
    \ = grades.reduce(0, combine: +)\n    var totalLetterGradePercentPercentPercent\
    \ = grades.reduce(0, combine: +)\n    var totalLetterGradePercentPercentPercent\
    \ = grades.reduce(0, combine: +)\n    var totalLetterGradePercentPercentPercent\
    \ = grades.reduce(0, combine: +)\n    var totalLetterGradePercentPercentPercent\
    \ = grades.reduce(0, combine: +)\n    var totalLetterGradePercentPercentPercent\
    \ = grades.reduce(0, combine: +)\n    var totalLetterGradePercentPercentPercent\
    \ = grades.reduce(0, combine: +)\n    var totalLetterGradePercentPercentPercent\
    \ = grades.reduce(0, combine: +)\n    var totalLetterGradePercentPercentPercent\
    \ = grades.reduce(0, combine: +)\n    var totalLetterGradePercentPercentPercent\
    \ = grades.reduce(0, combine: +)\n    var totalLetterGradePercentPercentPercent\
    \ = grades.reduce(0, combine: +)\n    var totalLetterGradePercentPercentPercent\
    \ = grades.reduce(0, combine: +)\n    var totalLetterGradePercentPercentPercent\
    \ = grades.reduce(0, combine: +)\n    var totalLetterGradePercentPercentPercent\
    \ = grades.reduce(0, combine: +)\n    var totalLetterGradePercentPercentPercent\
    \ = grades.reduce(0, combine: +)\n    var totalLetterGradePercentPercentPercent\
    \ = grades.reduce(0, combine: +)\n    var totalLetterGradePercentPercentPercent\
    \ = grades.reduce(0, combine: +)\n    var totalLetterGradePercentPercentPercent\
    \ = grades.reduce(0, combine: +)\n    var totalLetter\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbf1o0n5t.swift:25:35: error: extraneous argument label 'combine:'\
    \ in call\n    var totalGrade = grades.reduce(0, combine: +)\n               \
    \                   ^   ~~~~~~~~~\n                                      \n/tmp/tmpbf1o0n5t.swift:26:41:\
    \ error: extraneous argument label 'combine:' in call\n    var totalLetterGrade\
    \ = grades.reduce(0, combine: +)\n                                        ^  \
    \ ~~~~~~~~~\n                                            \n/tmp/tmpbf1o0n5t.swift:27:48:\
    \ error: extraneous argument label 'combine:' in call\n    var totalLetterGradePercent\
    \ = grades.reduce(0, combine: +)\n                                           \
    \    ^   ~~~~~~~~~\n                                                   \n/tmp/tmpbf1o0n5t.swift:28:55:\
    \ error: extraneous argument label 'combine:' in call\n    var totalLetterGradePercentPercent\
    \ = grades.reduce(0, combine: +)\n                                           \
    \           ^   ~~~~~~~~~\n                                                  \
    \        \n/tmp/tmpbf1o0n5t.swift:29:62: error: extraneous argument label 'combine:'\
    \ in call\n    var totalLetterGradePercentPercentPercent = grades.reduce(0, combine:\
    \ +)\n                                                             ^   ~~~~~~~~~\n\
    \                                                                 \n/tmp/tmpbf1o0n5t.swift:30:62:\
    \ error: extraneous argument label 'combine:' in call\n    var totalLetterGradePercentPercentPercent\
    \ = grades.reduce(0, combine: +)\n                                           \
    \                  ^   ~~~~~~~~~\n                                           \
    \                      \n/tmp/tmpbf1o0n5t.swift:31:62: error: extraneous argument\
    \ label 'combine:' in call\n    var totalLetterGradePercentPercentPercent = grades.reduce(0,\
    \ combine: +)\n                                                             ^\
    \   ~~~~~~~~~\n                                                              \
    \   \n/tmp/tmpbf1o0n5t.swift:32:62: error: extraneous argument label 'combine:'\
    \ in call\n    var totalLetterGradePercentPercentPercent = grades.reduce(0, combine:"
  stdout: ''
  timestamp: 1660014655
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    \n    for i in grades\
    \ {\n        if i > 3.0 {\n            gradesArray.append(\"A+\")\n        } else\
    \ if i > 2.0 {\n            gradesArray.append(\"A\")\n        } else if i > 1.0\
    \ {\n            gradesArray.append(\"B+\")\n        } else if i > 0.7 {\n   \
    \         gradesArray.append(\"B\")\n        } else if i > 0.3 {\n           \
    \ gradesArray.append(\"B-\")\n        } else if i > 0.1 {\n            gradesArray.append(\"\
    C+\")\n        } else if i > 0.0 {\n            gradesArray.append(\"C\")\n  \
    \      } else if i > -0.1 {\n            gradesArray.append(\"C-\")\n        }\
    \ else if i > -0.3 {\n            gradesArray.append(\"D+\")\n        } else if\
    \ i > -0.7 {\n            gradesArray.append(\"D\")\n        } else if i > -1.0\
    \ {\n            gradesArray.append(\"D-\")\n        } else if i > -3.0 {\n  \
    \          gradesArray.append(\"E\")\n        } else {\n            gradesArray.append(\"\
    E\")\n        }\n    }\n    \n    return gradesArray\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpbkqpsdzt/tmpbkqpsdzt.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad05b55ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad05b251b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad05b251988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad05b2507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbkqpsdzt                        0x00005624acadf7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002ad05b746460 __libc_start_main +
    245

    6    tmpbkqpsdzt                        0x00005624acadf2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014655
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    var gradesArrayIndex\
    \ = 0\n    var gradesArrayIndex2 = 0\n    var gradesArrayIndex3 = 0\n    var gradesArrayIndex4\
    \ = 0\n    var gradesArrayIndex5 = 0\n    var gradesArrayIndex6 = 0\n    var gradesArrayIndex7\
    \ = 0\n    var gradesArrayIndex8 = 0\n    var gradesArrayIndex9 = 0\n    var gradesArrayIndex10\
    \ = 0\n    var gradesArrayIndex11 = 0\n    var gradesArrayIndex12 = 0\n    var\
    \ gradesArrayIndex13 = 0\n    var gradesArrayIndex14 = 0\n    var gradesArrayIndex15\
    \ = 0\n    var gradesArrayIndex16 = 0\n    var gradesArrayIndex17 = 0\n    var\
    \ gradesArrayIndex18 = 0\n    var gradesArrayIndex19 = 0\n    var gradesArrayIndex20\
    \ = 0\n    var gradesArrayIndex21 = 0\n    var gradesArrayIndex22 = 0\n    var\
    \ gradesArrayIndex23 = 0\n    var gradesArrayIndex24 = 0\n    var gradesArrayIndex25\
    \ = 0\n    var gradesArrayIndex26 = 0\n    var gradesArrayIndex27 = 0\n    var\
    \ gradesArrayIndex28 = 0\n    var gradesArrayIndex29 = 0\n    var gradesArrayIndex30\
    \ = 0\n    var gradesArrayIndex31 = 0\n    var gradesArrayIndex32 = 0\n    var\
    \ gradesArrayIndex33 = 0\n    var gradesArrayIndex34 = 0\n    var gradesArrayIndex35\
    \ = 0\n    var gradesArrayIndex36 = 0\n    var gradesArrayIndex37 = 0\n    var\
    \ gradesArrayIndex38 = 0\n    var gradesArrayIndex39 = 0\n    var gradesArrayIndex40\
    \ = 0\n    var gradesArrayIndex41 = 0\n    var gradesArrayIndex42 = 0\n    var\
    \ gradesArrayIndex43 = 0\n    var gradesArrayIndex44 = 0\n    var gradesArrayIndex45\
    \ = 0\n    var gradesArrayIndex46 = 0\n    var gradesArrayIndex47 = 0\n    var\
    \ gradesArrayIndex48 = 0\n    var gradesArrayIndex49 = 0\n    var gradesArrayIndex50\
    \ = 0\n    var gradesArrayIndex51 = 0\n    var gradesArrayIndex52 = 0\n    var\
    \ gradesArrayIndex53 = 0\n    var gradesArrayIndex54 = 0\n    var gradesArrayIndex55\
    \ = 0\n    var gradesArrayIndex56 = 0\n    var gradesArrayIndex57 = 0\n    var\
    \ gradesArrayIndex58 = 0\n    var gradesArrayIndex59 = 0\n    var gradesArrayIndex60\
    \ = 0\n    var gradesArrayIndex61 = 0\n    var gradesArrayIndex62 = 0\n    var\
    \ gradesArrayIndex63 = 0\n    var \n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpd2kjx_m3.swift:88:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpd2kjx_m3.swift:24:9: warning: variable 'gradesArray' was never used;\
    \ consider replacing with '_' or removing it\n    var gradesArray: [String] =\
    \ []\n        ^~~~~~~~~~~\n        _\n/tmp/tmpd2kjx_m3.swift:25:9: warning: initialization\
    \ of variable 'gradesArrayIndex' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var gradesArrayIndex = 0\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpd2kjx_m3.swift:26:9: warning: initialization of variable 'gradesArrayIndex2'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var gradesArrayIndex2 = 0\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpd2kjx_m3.swift:27:9:\
    \ warning: initialization of variable 'gradesArrayIndex3' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var gradesArrayIndex3 =\
    \ 0\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpd2kjx_m3.swift:28:9: warning: initialization\
    \ of variable 'gradesArrayIndex4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var gradesArrayIndex4 = 0\n    ~~~~^~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpd2kjx_m3.swift:29:9: warning: initialization of variable 'gradesArrayIndex5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var gradesArrayIndex5 = 0\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpd2kjx_m3.swift:30:9:\
    \ warning: initialization of variable 'gradesArrayIndex6' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var gradesArrayIndex6 =\
    \ 0\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpd2kjx_m3.swift:31:9: warning: initialization\
    \ of variable 'gradesArrayIndex7' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var gradesArrayIndex7 = 0\n    ~~~~^~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpd2kjx_m3.swift:32:9: warning: initialization of variable 'gradesArrayIndex8'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var gradesArrayIndex8 = 0\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpd2kjx_m3.swift:33:9:\
    \ warnin"
  stdout: ''
  timestamp: 1660014655
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    var gpa: Double = 0\n\
    \    var letterGrade: String = \"\"\n    for grade in grades {\n        gpa =\
    \ grade * 4\n        if gpa > 3.0 {\n            letterGrade = \"B+\"\n      \
    \  } else if gpa > 2.7 {\n            letterGrade = \"B\"\n        } else if gpa\
    \ > 2.3 {\n            letterGrade = \"B-\"\n        } else if gpa > 1.7 { \n\
    \            letterGrade = \"C+\"\n        } else if gpa > 1.3 {\n           \
    \ letterGrade = \"C\"\n        } else if gpa > 1.0 {\n            letterGrade\
    \ = \"C-\"\n        } else if gpa > 0.7 {\n            letterGrade = \"D+\"\n\
    \        } else if gpa > 0.3 {\n            letterGrade = \"D\"\n        } else\
    \ if gpa > 0.0 {\n            letterGrade = \"D-\"\n        } else {\n       \
    \     letterGrade = \"E\"\n        }\n        gradesArray.append(letterGrade)\n\
    \    }\n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpiirlbr26/tmpiirlbr26.swift:68: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0fc4c6bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0fc4962b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0fc4962988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0fc49617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiirlbr26                        0x000055feaebed7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b0fc4e57460 __libc_start_main +
    245

    6    tmpiirlbr26                        0x000055feaebed2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014655
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    var gpa: Double = 0\n\
    \    var letterGrade: String = \"\"\n    for grade in grades {\n        gpa +=\
    \ grade\n        if gpa >= 3.0 {\n            letterGrade = \"A+\"\n        }\
    \ else if gpa >= 2.7 {\n            letterGrade = \"B\"\n        } else if gpa\
    \ >= 2.3 {\n            letterGrade = \"B-\"\n        } else if gpa >= 1.7 &&\
    \ gpa < 2.3 {\n            letterGrade = \"C\"\n        } else if gpa >= 1.3 &&\
    \ gpa < 1.7 {\n            letterGrade = \"C-\"\n        } else if gpa >= 1.0\
    \ {\n            letterGrade = \"D+\"\n        } else if gpa >= 0.7 {\n      \
    \      letterGrade = \"D\"\n        } else if gpa >= 0.0 {\n            letterGrade\
    \ = \"D-\"\n        } else {\n            letterGrade = \"E\"\n        }\n   \
    \     gradesArray.append(letterGrade)\n        gpa = 0\n    }\n    return gradesArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpnnz60h75/tmpnnz60h75.swift:67: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2437ca3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b243799ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b243799a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b24379997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnnz60h75                        0x00005629dbb597a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b2437e8f460 __libc_start_main +
    245

    6    tmpnnz60h75                        0x00005629dbb592c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014655
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    for grade in grades {\n\
    \        switch grade {\n        case 4.0:\n            gradesArray.append(\"\
    A+\")\n        case 3.7:\n            gradesArray.append(\"A\")\n        case\
    \ 3.3:\n            gradesArray.append(\"A-\")\n        case 3.0:\n          \
    \  gradesArray.append(\"B+\")\n        case 2.7:\n            gradesArray.append(\"\
    B\")\n        case 2.3:\n            gradesArray.append(\"B-\")\n        case\
    \ 2.0:\n            gradesArray.append(\"C+\")\n        case 1.7:\n          \
    \  gradesArray.append(\"C\")\n        case 1.3:\n            gradesArray.append(\"\
    C-\")\n        case 1.0:\n            gradesArray.append(\"D+\")\n        case\
    \ 0.7:\n            gradesArray.append(\"D\")\n        case 0.0:\n           \
    \ gradesArray.append(\"D-\")\n        default:\n            gradesArray.append(\"\
    E\")\n        }\n    }\n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpp0vme0p5/tmpp0vme0p5.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8f0d70ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8f0d401b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8f0d401988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8f0d4007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp0vme0p5                        0x000055a9977847a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b8f0d8f6460 __libc_start_main +
    245

    6    tmpp0vme0p5                        0x000055a9977842c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014655
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var grades_string = \"\"\n    for grade in grades {\n   \
    \     switch grade {\n        case 4.0:\n            grades_string += \"A+\"\n\
    \        case 3.7:\n            grades_string += \"A\"\n        case 3.3:\n  \
    \          grades_string += \"A-\"\n        case 3.0:\n            grades_string\
    \ += \"B+\"\n        case 2.7:\n            grades_string += \"B\"\n        case\
    \ 2.3:\n            grades_string += \"B-\"\n        case 2.0:\n            grades_string\
    \ += \"C+\"\n        case 1.7:\n            grades_string += \"C\"\n        case\
    \ 1.3:\n            grades_string += \"C-\"\n        case 1.0:\n            grades_string\
    \ += \"D+\"\n        case 0.7:\n            grades_string += \"D\"\n        case\
    \ 0.0:\n            grades_string += \"D-\"\n        case 0.1:\n            grades_string\
    \ += \"E\"\n        default:\n            grades_string += \"E\"\n        }\n\
    \    }\n    return grades_string.characters.split{$0 == \" \"}.map(String.init)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpiv9xwsn8.swift:57:26: error: 'characters' is unavailable: Please\
    \ use String directly\n    return grades_string.characters.split{$0 == \" \"}.map(String.init)\n\
    \                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n"
  stdout: ''
  timestamp: 1660014655
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = grades\n    gradesArray = gradesArray.sorted()\n\
    \    var gradesArrayCount = gradesArray.count\n    var gradesArraySum = gradesArray.reduce(0.0,\
    \ +)\n    var gradesArrayAverage = gradesArraySum / gradesArrayCount\n    var\
    \ gradesArrayMin = gradesArray[0]\n    var gradesArrayMax = gradesArray[gradesArrayCount\
    \ - 1]\n    var gradesArraySumOfSquares = gradesArray.reduce(0.0, +)\n    var\
    \ gradesArraySumOfSquaresAverage = gradesArraySumOfSquares / gradesArrayCount\n\
    \    var gradesArraySumOfSquaresMin = gradesArraySumOfSquares\n    var gradesArraySumOfSquaresMax\
    \ = gradesArraySumOfSquares\n    var gradesArraySumOfSquaresSum = gradesArray.reduce(0.0,\
    \ +)\n    var gradesArraySumOfSquaresSumAverage = gradesArraySumOfSquaresSum /\
    \ gradesArrayCount\n    var gradesArraySumOfSquaresSumMin = gradesArraySumOfSquaresSum\n\
    \    var gradesArraySumOfSquaresSumMax = gradesArraySumOfSquaresSum\n    var gradesArraySumOfSquaresSumSum\
    \ = gradesArray.reduce(0.0, +)\n    var gradesArraySumOfSquaresSumSumAverage =\
    \ gradesArraySumOfSquaresSumSum / gradesArrayCount\n    var gradesArraySumOfSquaresSumSumMin\
    \ = gradesArraySumOfSquaresSumSum\n    var gradesArraySumOfSquaresSumSumMax =\
    \ gradesArraySumOfSquaresSumSum\n    var gradesArraySumOfSquaresSumSumSum = gradesArray.reduce(0.0,\
    \ +)\n    var gradesArraySumOfSquaresSumSumSumAverage = gradesArraySumOfSquaresSumSumSum\
    \ / gradesArrayCount\n    var gradesArraySumOfSquaresSumSumSumMin = gradesArraySumOfSquaresSumSumSum\n\
    \    var gradesArraySumOfSquaresSumSumSumMax = gradesArraySumOfSquaresSumSumSum\n\
    \    var gradesArraySumOfSquaresSumSumSumSum = gradesArray.reduce(0.0, +)\n  \
    \  var gradesArraySumOfSquaresSumSumSumSumAverage = gradesArraySumOfSquaresSumSumSumSum\
    \ / gradesArrayCount\n    var gradesArraySumOfSquaresSumSumSumSumMin = gradesArraySumOfSquaresSumSumSumSum\n\
    \    var grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp3be3ebjv.swift:28:45: error: binary operator '/' cannot be applied\
    \ to operands of type 'Double' and 'Int'\n    var gradesArrayAverage = gradesArraySum\
    \ / gradesArrayCount\n                             ~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~~\n\
    /tmp/tmp3be3ebjv.swift:28:45: note: overloads for '/' exist with these partially\
    \ matching parameter lists: (Double, Double), (Int, Int)\n    var gradesArrayAverage\
    \ = gradesArraySum / gradesArrayCount\n                                      \
    \      ^\n/tmp/tmp3be3ebjv.swift:32:66: error: binary operator '/' cannot be applied\
    \ to operands of type 'Double' and 'Int'\n    var gradesArraySumOfSquaresAverage\
    \ = gradesArraySumOfSquares / gradesArrayCount\n                             \
    \            ~~~~~~~~~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~~\n/tmp/tmp3be3ebjv.swift:32:66:\
    \ note: overloads for '/' exist with these partially matching parameter lists:\
    \ (Double, Double), (Int, Int)\n    var gradesArraySumOfSquaresAverage = gradesArraySumOfSquares\
    \ / gradesArrayCount\n                                                       \
    \          ^\n/tmp/tmp3be3ebjv.swift:36:72: error: binary operator '/' cannot\
    \ be applied to operands of type 'Double' and 'Int'\n    var gradesArraySumOfSquaresSumAverage\
    \ = gradesArraySumOfSquaresSum / gradesArrayCount\n                          \
    \                  ~~~~~~~~~~~~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~~\n/tmp/tmp3be3ebjv.swift:36:72:\
    \ note: overloads for '/' exist with these partially matching parameter lists:\
    \ (Double, Double), (Int, Int)\n    var gradesArraySumOfSquaresSumAverage = gradesArraySumOfSquaresSum\
    \ / gradesArrayCount\n                                                       \
    \                ^\n/tmp/tmp3be3ebjv.swift:40:78: error: binary operator '/' cannot\
    \ be applied to operands of type 'Double' and 'Int'\n    var gradesArraySumOfSquaresSumSumAverage\
    \ = gradesArraySumOfSquaresSumSum / gradesArrayCount\n                       \
    \                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~~\n/tmp/tmp3be3ebjv.swift:40:78:\
    \ note: overloads for '/' exist with these partially matching param"
  stdout: ''
  timestamp: 1660014655
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    var totalGrade: Double\
    \ = 0.0\n    var totalGradeLetter: String = String()\n    var totalGradeLetterIndex:\
    \ Int = 0\n    \n    for grade in grades {\n        totalGrade += grade\n    \
    \    totalGradeLetter = String(format: \"%.1f\", totalGrade)\n        totalGradeLetterIndex\
    \ = totalGradeLetterIndex + Int(totalGradeLetter)\n        gradesArray.append(totalGradeLetter)\n\
    \    }\n    \n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmps86j853k.swift:31:28: error: no exact matches in call to initializer\
    \ \n        totalGradeLetter = String(format: \"%.1f\", totalGrade)\n        \
    \                   ^\nSwift.String:4:23: note: candidate '(String) -> String'\
    \ requires 1 argument, but 2 were provided\n    @inlinable public init<T>(_ value:\
    \ T) where T : LosslessStringConvertible\n                      ^\n/tmp/tmps86j853k.swift:31:28:\
    \ note: candidate has partially matching parameter list (repeating: String, count:\
    \ Int)\n        totalGradeLetter = String(format: \"%.1f\", totalGrade)\n    \
    \                       ^\nSwift.String:3:12: note: candidate '(String) -> String'\
    \ requires 1 argument, but 2 were provided\n    public init<S>(_ other: S) where\
    \ S : LosslessStringConvertible, S : Sequence, S.Element == Character\n      \
    \     ^\nSwift.String:4:12: note: candidate '(String) -> String' requires 1 argument,\
    \ but 2 were provided\n    public init<S>(_ characters: S) where S : Sequence,\
    \ S.Element == Character\n           ^\nSwift.RangeReplaceableCollection:3:23:\
    \ note: candidate '(String) -> String' requires 1 argument, but 2 were provided\n\
    \    @inlinable public init<S>(_ elements: S) where S : Sequence, Self.Element\
    \ == S.Element\n                      ^\n/tmp/tmps86j853k.swift:32:57: error:\
    \ value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n \
    \       totalGradeLetterIndex = totalGradeLetterIndex + Int(totalGradeLetter)\n\
    \                                                        ^\n/tmp/tmps86j853k.swift:32:57:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        totalGradeLetterIndex = totalGradeLetterIndex + Int(totalGradeLetter)\n\
    \                                                        ^\n                 \
    \                                       (                     ?? <#default value#>)\n\
    /tmp/tmps86j853k.swift:32:57: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n        totalGradeLetterIndex = totalGradeLetterIndex\
    \ + Int(totalGradeLetter)\n                                              "
  stdout: ''
  timestamp: 1660014655
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var grades_string = \"\"\n    var gpa = grades[0]\n    var\
    \ letter_grade = \"\"\n    for grade in grades {\n        if gpa > grade {\n \
    \           letter_grade = \"A+\"\n            grades_string += letter_grade\n\
    \            gpa = grade\n        } else if gpa < grade {\n            letter_grade\
    \ = \"A\"\n            grades_string += letter_grade\n            gpa = grade\n\
    \        } else if gpa == grade {\n            letter_grade = \"B+\"\n       \
    \     grades_string += letter_grade\n            gpa = grade\n        } else if\
    \ gpa > grade {\n            letter_grade = \"B\"\n            grades_string +=\
    \ letter_grade\n            gpa = grade\n        } else if gpa < grade {\n   \
    \         letter_grade = \"B-\"\n            grades_string += letter_grade\n \
    \           gpa = grade\n        } else if gpa == grade {\n            letter_grade\
    \ = \"C+\"\n            grades_string += letter_grade\n            gpa = grade\n\
    \        } else if gpa > grade {\n            letter_grade = \"C\"\n         \
    \   grades_string += letter_grade\n            gpa = grade\n        } else if\
    \ gpa < grade {\n            letter_grade = \"C-\"\n            grades_string\
    \ += letter_grade\n            gpa = grade\n        } else if gpa == grade {\n\
    \            letter_grade = \"D+\"\n            grades_string += letter_grade\n\
    \            gpa = grade\n        } else if gpa > grade {\n            letter_grade\
    \ = \"D\"\n            grades_string += letter_grade\n            gpa = grade\n\
    \        } else if gpa < grade {\n            letter_grade = \"D-\"\n        \
    \    grades_string += letter_grade\n            gpa = grade\n        } else if\
    \ gpa == grade {\n            letter_grade = \"E\"\n            grades_string\
    \ += letter_grade\n            gpa = grade\n        }\n    }\n    return grades_string\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpto1ot4tz.swift:78:12: error: cannot convert return expression of\
    \ type 'String' to return type '[String]'\n    return grades_string\n        \
    \   ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014655
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var gpaArray: [Double] = [gpa]\n    var gpaSum: Double = gpaArray[0]\n\
    \    var gpaIndex = 0\n    var gpaSumIndex = 0\n    var gpaSumIndex2 = 1\n   \
    \ var gpaSumIndex3 = 2\n    var gpaSumIndex4 = 3\n    var gpaSumIndex5 = 4\n \
    \   var gpaSumIndex6 = 5\n    var gpaSumIndex7 = 6\n    var gpaSumIndex8 = 7\n\
    \    var gpaSumIndex9 = 8\n    var gpaSumIndex10 = 9\n    var gpaSumIndex11 =\
    \ 10 \n    var gpaSumIndex12 = 11\n    var gpaSumIndex13 = 12\n    var gpaSumIndex14\
    \ = 13\n    var gpaSumIndex15 = 14\n    var gpaSumIndex16 = 15\n    var gpaSumIndex17\
    \ = 16\n    var gpaSumIndex18 = 17\n    var gpaSumIndex19 = 18\n    var gpaSumIndex20\
    \ = 19\n    var gpaSumIndex21 = 20\n    var gpaSumIndex22 = 21\n    var gpaSumIndex23\
    \ = 22\n    var gpaSumIndex24 = 23\n    var gpaSumIndex25 = 24\n    var gpaSumIndex26\
    \ = 25\n    var gpaSumIndex27 = 26\n    var gpaSumIndex28 = 27\n    var gpaSumIndex29\
    \ = 28\n    var gpaSumIndex30 = 29\n    var gpaSumIndex31 = 30\n    var gpaSumIndex32\
    \ = 31\n    var gpaSumIndex33 = 32\n    var gpaSumIndex34 = 33\n    var gpaSumIndex35\
    \ = 34\n    var gpaSumIndex36 = 35\n    var gpaSumIndex37 = 36\n    var gpaSumIndex38\
    \ = 37\n    var gpaSumIndex39 = 38\n    var gpaSumIndex40 = 39\n    var gpaSumIndex41\
    \ = 40\n    var gpaSumIndex42 = 41\n    var gpaSumIndex43 = 42\n    var gpaSumIndex44\
    \ = 43\n    var gpaSumIndex45 = 44\n    var gpaSumIndex46 = 45\n    var gpaSumIndex47\
    \ = 46\n    var gpaSumIndex48 = 47\n    var gpaSumIndex49 = 48\n    var gpaSumIndex50\
    \ = 49\n    var gpaSumIndex51 = 50\n    var gpaSumIndex52 = 51\n    var gpaSumIndex53\
    \ = 52\n    var gpaSumIndex54 = \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp42ksp1tf.swift:82:24: error: expected initial value after '='\n\
    \    var gpaSumIndex54 = \n                       ^\n/tmp/tmp42ksp1tf.swift:25:28:\
    \ error: extraneous argument label 'combine:' in call\n    var gpa = grades.reduce(0,\
    \ combine: +)\n                           ^   ~~~~~~~~~\n                    \
    \           \n"
  stdout: ''
  timestamp: 1660014655
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradeLetters = [String]()\n    \n    // Sort the grades\
    \ in descending order\n    grades.sort{$1 > $0}\n    \n    // Calculate the average\
    \ of the grades\n    let average = grades.reduce(0, combine: +)/ grades.count\n\
    \    \n    // Calculate the letter grade\n    for grade in grades {\n        if\
    \ grade > average {\n            gradeLetters.append(\"A+\")\n        } else if\
    \ grade > average - 0.3 {\n            gradeLetters.append(\"A-\")\n        }\
    \ else if grade > average - 0.1 {\n            gradeLetters.append(\"B+\")\n \
    \       } else if grade > average - 0.07 {\n            gradeLetters.append(\"\
    B\")\n        } else if grade > average - 0.03 {\n            gradeLetters.append(\"\
    B-\")\n        } else if grade > average - 0.01 {\n            gradeLetters.append(\"\
    C+\")\n        } else if grade > average - 0.007 {\n            gradeLetters.append(\"\
    C\")\n        } else if grade > average - 0.003 {\n            gradeLetters.append(\"\
    C-\")\n        } else if grade > average - 0.001 {\n            gradeLetters.append(\"\
    D+\")\n        } else if grade > average - 0.0007 {\n            gradeLetters.append(\"\
    D\")\n        } else if grade > average - 0.003 {\n            gradeLetters.append(\"\
    D-\")\n        } else {\n            gradeLetters.append(\"E\")\n        }\n \
    \   }\n    \n    return gradeLetters\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp0rlctjt8.swift:30:48: error: consecutive statements on a line must\
    \ be separated by ';'\n    let average = grades.reduce(0, combine: +)/ grades.count\n\
    \                                               ^\n                          \
    \                     ;\n/tmp/tmp0rlctjt8.swift:27:12: error: cannot use mutating\
    \ member on immutable value: 'grades' is a 'let' constant\n    grades.sort{$1\
    \ > $0}\n    ~~~~~~ ^\n/tmp/tmp0rlctjt8.swift:30:47: error: '/' is not a postfix\
    \ unary operator\n    let average = grades.reduce(0, combine: +)/ grades.count\n\
    \                                              ^\n/tmp/tmp0rlctjt8.swift:30:32:\
    \ error: extraneous argument label 'combine:' in call\n    let average = grades.reduce(0,\
    \ combine: +)/ grades.count\n                               ^   ~~~~~~~~~\n  \
    \                                 \n/tmp/tmp0rlctjt8.swift:30:56: warning: expression\
    \ of type 'Int' is unused\n    let average = grades.reduce(0, combine: +)/ grades.count\n\
    \                                                ~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1660014655
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = grades\n    var gradesArrayCopy = gradesArray\n\
    \    var gradesArrayCopy2 = gradesArray\n    var gradesArrayCopy3 = gradesArray\n\
    \    var gradesArrayCopy4 = gradesArray\n    var gradesArrayCopy5 = gradesArray\n\
    \    var gradesArrayCopy6 = gradesArray\n    var gradesArrayCopy7 = gradesArray\n\
    \    var gradesArrayCopy8 = gradesArray\n    var gradesArrayCopy9 = gradesArray\n\
    \    var gradesArrayCopy10 = gradesArray\n    var gradesArrayCopy11 = gradesArray\n\
    \    var gradesArrayCopy12 = gradesArray\n    var gradesArrayCopy13 = gradesArray\n\
    \    var gradesArrayCopy14 = gradesArray\n    var gradesArrayCopy15 = gradesArray\n\
    \    var gradesArrayCopy16 = gradesArray\n    var gradesArrayCopy17 = gradesArray\n\
    \    var gradesArrayCopy18 = gradesArray\n    var gradesArrayCopy19 = gradesArray\n\
    \    var gradesArrayCopy20 = gradesArray\n    var gradesArrayCopy21 = gradesArray\n\
    \    var gradesArrayCopy22 = gradesArray\n    var gradesArrayCopy23 = gradesArray\n\
    \    var gradesArrayCopy24 = gradesArray\n    var gradesArrayCopy25 = gradesArray\n\
    \    var gradesArrayCopy26 = gradesArray\n    var gradesArrayCopy27 = gradesArray\n\
    \    var gradesArrayCopy28 = gradesArray\n    var gradesArrayCopy29 = gradesArray\n\
    \    var gradesArrayCopy30 = gradesArray\n    var gradesArrayCopy31 = gradesArray\n\
    \    var gradesArrayCopy32 = gradesArray\n    var gradesArrayCopy33 = gradesArray\n\
    \    var gradesArrayCopy34 = gradesArray\n    var gradesArrayCopy35 = gradesArray\n\
    \    var gradesArrayCopy36 = gradesArray\n    var gradesArrayCopy37 = gradesArray\n\
    \    var gradesArrayCopy38 = gradesArray\n    var gradesArrayCopy39 = gradesArray\n\
    \    var gradesArrayCopy40 = gradesArray\n    var gradesArrayCopy41 = gradesArray\n\
    \    var gradesArrayCopy42 = gradesArray\n    var gradesArrayCopy43 = gradesArray\n\
    \    var gradesArrayCopy44 = gradesArray\n    var gradesArrayCopy45 = gradesArray\n\
    \    var gradesArrayCopy46 = gradesArray\n    var gradesArrayCopy47 = gradesArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpg71swbp2.swift:24:9: warning: variable 'gradesArray' was never\
    \ mutated; consider changing to 'let' constant\n    var gradesArray = grades\n\
    \    ~~~ ^\n    let\n/tmp/tmpg71swbp2.swift:25:9: warning: initialization of variable\
    \ 'gradesArrayCopy' was never used; consider replacing with assignment to '_'\
    \ or removing it\n    var gradesArrayCopy = gradesArray\n    ~~~~^~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpg71swbp2.swift:26:9: warning: initialization of variable 'gradesArrayCopy2'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var gradesArrayCopy2 = gradesArray\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpg71swbp2.swift:27:9:\
    \ warning: initialization of variable 'gradesArrayCopy3' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var gradesArrayCopy3 =\
    \ gradesArray\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpg71swbp2.swift:28:9: warning:\
    \ initialization of variable 'gradesArrayCopy4' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var gradesArrayCopy4 = gradesArray\n\
    \    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpg71swbp2.swift:29:9: warning: initialization\
    \ of variable 'gradesArrayCopy5' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var gradesArrayCopy5 = gradesArray\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpg71swbp2.swift:30:9: warning: initialization of variable 'gradesArrayCopy6'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var gradesArrayCopy6 = gradesArray\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpg71swbp2.swift:31:9:\
    \ warning: initialization of variable 'gradesArrayCopy7' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var gradesArrayCopy7 =\
    \ gradesArray\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpg71swbp2.swift:32:9: warning:\
    \ initialization of variable 'gradesArrayCopy8' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var gradesArrayCopy8 = gradesArray\n\
    \    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpg71swbp2.swift:33:9: warning: initialization\
    \ of variable 'grades"
  stdout: ''
  timestamp: 1660014654
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var grades_string = [String]()\n    var total_grade = grades.reduce(0,\
    \ combine: +)\n    var total_letter_grade = \"\"\n    var total_letter_grade_count\
    \ = 0\n    \n    for grade in grades {\n        let letter_grade = grade >= total_grade\
    \ ? \"D-\" : grade >= 3.0 ? \"C-\" : grade >= 2.0 ? \"B-\" : grade >= 1.0 ? \"\
    B-\" : grade >= 0.7 ? \"B-\" : grade >= 0.3 ? \"B-\" : grade >= 0.0 ? \"B-\" :\
    \ grade >= 0.3 ? \"B-\" : grade >= 0.7 ? \"B-\" : grade >= 1.0 ? \"B-\" : grade\
    \ >= 1.3 ? \"B-\" : grade >= 1.7 ? \"B-\" : grade >= 2.0 ? \"B-\" : grade >= 2.3\
    \ ? \"B-\" : grade >= 2.7 ? \"B-\" : grade >= 3.0 ? \"B-\" : grade >= 3.3 ? \"\
    B-\" : grade >= 3.7 ? \"B-\" : grade >= 4.0 ? \"B-\" : grade >= 4.3 ? \"B-\" :\
    \ grade >= 4.7 ? \"B-\" : grade >= 5.0 ? \"B-\" : grade >= 5.3 ? \"B-\" : grade\
    \ >= 5.7 ? \"B-\" : grade >= 6.0 ? \"B-\" : grade >= 6.3 ? \"B-\" : grade >= 6.7\
    \ ? \"B-\" : grade >= 7.0 ? \"B-\" : grade >= 7.3 ? \"B-\" : grade >= 7.7 ? \"\
    B-\" : grade >= 8.0 ? \"B-\" : grade >= 8.3 ? \"B-\" : grade >= 8.7 ? \"B-\" :\
    \ grade >= 9.0 ? \"B-\" : grade >= 9.3 ? \"B-\" : grade >= 9.7 ? \"B-\" : grade\
    \ >= 10.0 ? \"B-\" : grade >= 10.3 ? \"B-\" : grade >= 10.7 ? \"B-\" : grade >=\
    \ 11.0 ? \"B-\" : grade >= 11.3 ? \"B-\" : grade >= 11.7 ? \"B-\" : grade >= 12.0\
    \ ? \"B-\" : grade >= 12.3 ? \"B-\" : grade >= 12.7 ? \"B-\" : grade >= 13.0 ?\
    \ \"B-\" : grade >= 13.3 ? \"B-\" : grade >= 13.7 ? \"B-\" : grade >= 14.0 ? \"\
    B-\" : grade >= 14.3 ? \"B-\" : grade >= 14.7 ? \"B-\" : grade >= 15.0 ? \"B-\"\
    \ : grade >= 15.3 ? \"B-\" : grade >= 15.7 ? \"B-\" : grade >= 16.0 ? \"B-\" :\
    \ grade >= 16.3 ? \"B-\" : grade >= 16.7 ? \"B-\" : grade >= 17.0 ? \"B-\" : grade\
    \ \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp3uebixi5.swift:51:66: error: expected '}' at end of brace statement\n\
    assert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"])\n      \
    \                                                           ^\n/tmp/tmp3uebixi5.swift:23:59:\
    \ note: to match this opening '{'\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n                                                          ^\n\
    /tmp/tmp3uebixi5.swift:25:36: error: extraneous argument label 'combine:' in call\n\
    \    var total_grade = grades.reduce(0, combine: +)\n                        \
    \           ^   ~~~~~~~~~\n                                       \n/tmp/tmp3uebixi5.swift:30:1334:\
    \ error: result values in '? :' expression have mismatching types 'String' and\
    \ 'Double'\n        let letter_grade = grade >= total_grade ? \"D-\" : grade >=\
    \ 3.0 ? \"C-\" : grade >= 2.0 ? \"B-\" : grade >= 1.0 ? \"B-\" : grade >= 0.7\
    \ ? \"B-\" : grade >= 0.3 ? \"B-\" : grade >= 0.0 ? \"B-\" : grade >= 0.3 ? \"\
    B-\" : grade >= 0.7 ? \"B-\" : grade >= 1.0 ? \"B-\" : grade >= 1.3 ? \"B-\" :\
    \ grade >= 1.7 ? \"B-\" : grade >= 2.0 ? \"B-\" : grade >= 2.3 ? \"B-\" : grade\
    \ >= 2.7 ? \"B-\" : grade >= 3.0 ? \"B-\" : grade >= 3.3 ? \"B-\" : grade >= 3.7\
    \ ? \"B-\" : grade >= 4.0 ? \"B-\" : grade >= 4.3 ? \"B-\" : grade >= 4.7 ? \"\
    B-\" : grade >= 5.0 ? \"B-\" : grade >= 5.3 ? \"B-\" : grade >= 5.7 ? \"B-\" :\
    \ grade >= 6.0 ? \"B-\" : grade >= 6.3 ? \"B-\" : grade >= 6.7 ? \"B-\" : grade\
    \ >= 7.0 ? \"B-\" : grade >= 7.3 ? \"B-\" : grade >= 7.7 ? \"B-\" : grade >= 8.0\
    \ ? \"B-\" : grade >= 8.3 ? \"B-\" : grade >= 8.7 ? \"B-\" : grade >= 9.0 ? \"\
    B-\" : grade >= 9.3 ? \"B-\" : grade >= 9.7 ? \"B-\" : grade >= 10.0 ? \"B-\"\
    \ : grade >= 10.3 ? \"B-\" : grade >= 10.7 ? \"B-\" : grade >= 11.0 ? \"B-\" :\
    \ grade >= 11.3 ? \"B-\" : grade >= 11.7 ? \"B-\" : grade >= 12.0 ? \"B-\" : grade\
    \ >= 12.3 ? \"B-\" : grade >= 12.7 ? \"B-\" : grade >= 13.0 ? \"B-\" : grade >=\
    \ 13.3 ? \"B-\" : grade >= 13.7 ? \"B-\" : grade >= 14.0 ? \"B-\" : grade >= 14.3\
    \ ? \"B-\" : grade >= 14.7 ? \"B-\" : grade >= 15.0 ? \"B-\" : grade >= 15.3 ?\
    \ \"B-\" : grade >= 15.7 ? \"B-\" : grade >= 16.0 ? \"B-\" : grade >= 16.3 ? \"\
    B-\" : grade >= 16.7 ? \"B-\" : grade >"
  stdout: ''
  timestamp: 1660014655
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    var sum = 0.0\n    for\
    \ grade in grades {\n        sum += grade\n    }\n    for grade in grades {\n\
    \        let gradeLetter = grade > 3.0 ? \"A+\" :\n            grade > 2.7 ? \"\
    B\" :\n            grade > 2.3 ? \"B-\" :\n            grade > 2.0 ? \"C+\" :\n\
    \            grade > 1.7 ? \"C\" :\n            grade > 1.3 ? \"C-\" :\n     \
    \       grade > 1.0 ? \"D+\" :\n            grade > 0.7 ? \"D\" :\n          \
    \  grade > 0.0 ? \"D-\" :\n            \"E\"\n        gradesArray.append(gradeLetter)\n\
    \    }\n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp4z6a8gzs/tmp4z6a8gzs.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b022d90ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b022d605b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b022d605988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b022d6047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4z6a8gzs                        0x0000557d87f387f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b022dafa460 __libc_start_main +
    245

    6    tmp4z6a8gzs                        0x0000557d87f38319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014655
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var grades_string = \"\"\n    for grade in grades {\n   \
    \     if grade > 3.0 {\n            grades_string += \"B+\"\n        } else if\
    \ grade > 2.7 {\n            grades_string += \"B\"\n        } else if grade >\
    \ 2.3 {\n            grades_string += \"B-\"\n        } else if grade > 1.3 {\n\
    \            grades_string += \"C+\"\n        } else if grade > 1.0 {\n      \
    \      grades_string += \"C\"\n        } else if grade > 0.7 {\n            grades_string\
    \ += \"C-\"\n        } else if grade > 0.3 {\n            grades_string += \"\
    D+\"\n        } else if grade > 0.0 {\n            grades_string += \"D\"\n  \
    \      } else if grade > -0.3 {\n            grades_string += \"D-\"\n       \
    \ } else if grade > -0.7 {\n            grades_string += \"E\"\n        } else\
    \ {\n            grades_string += \"E\"\n        }\n    }\n    return grades_string.characters.map\
    \ { String($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmptt4e4ao2.swift:50:26: error: 'characters' is unavailable: Please\
    \ use String directly\n    return grades_string.characters.map { String($0) }\n\
    \                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n"
  stdout: ''
  timestamp: 1660014655
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades = [String]()\n    \n    for grade in grades\
    \ {\n        let letterGrade = grade > 3.0 ? \"A+\" :\n            grade > 2.7\
    \ ? \"B\" :\n            grade > 2.3 ? \"B-\" :\n            grade > 2.0 ? \"\
    C+\" :\n            grade > 1.7 ? \"C\" :\n            grade > 1.3 ? \"C-\" :\n\
    \            grade > 1.0 ? \"D+\" :\n            grade > 0.7 ? \"D\" :\n     \
    \       grade > 0.0 ? \"D-\" :\n            \"E\"\n        letterGrades.append(letterGrade)\n\
    \    }\n    \n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp0t99ds0r/tmp0t99ds0r.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b55301d9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b552fed0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b552fed0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b552fecf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0t99ds0r                        0x000055b5573447f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b55303c5460 __libc_start_main +
    245

    6    tmp0t99ds0r                        0x000055b557344319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014655
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var grades_letters = [String]()\n    var total_grade = grades.reduce(0,\
    \ combine: +)\n    var total_letter_grade = \"\"\n    var current_grade = grades[0]\n\
    \    for grade in grades {\n        let letter_grade = grade_letters(grade)\n\
    \        if current_grade < grade {\n            total_grade += grade - current_grade\n\
    \            current_grade = grade\n        } else {\n            total_grade\
    \ -= current_grade - grade\n            current_grade = grade\n        }\n   \
    \     total_letter_grade += letter_grade\n    }\n    grades_letters.append(total_letter_grade)\n\
    \    grades_letters.append(total_grade < 0 ? \"E\" : \"\")\n    return grades_letters\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp2p1k_3eb.swift:25:36: error: extraneous argument label 'combine:'\
    \ in call\n    var total_grade = grades.reduce(0, combine: +)\n              \
    \                     ^   ~~~~~~~~~\n                                       \n\
    /tmp/tmp2p1k_3eb.swift:29:28: error: cannot find 'grade_letters' in scope\n  \
    \      let letter_grade = grade_letters(grade)\n                           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014655
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var grades_string = \"\"\n    for grade in grades {\n   \
    \     if grade > 3.0 {\n            grades_string += \"B+\"\n        } else if\
    \ grade > 2.0 {\n            grades_string += \"B\"\n        } else if grade >\
    \ 1.0 {\n            grades_string += \"B-\"\n        } else if grade > 0.7 {\n\
    \            grades_string += \"C\"\n        } else if grade > 0.3 {\n       \
    \     grades_string += \"C+\"\n        } else if grade > 0.0 {\n            grades_string\
    \ += \"C-\"\n        } else if grade > -0.3 {\n            grades_string += \"\
    D-\"\n        } else if grade > -0.7 {\n            grades_string += \"D\"\n \
    \       } else if grade > -1.0 {\n            grades_string += \"D+\"\n      \
    \  } else if grade > -2.0 {\n            grades_string += \"E\"\n        } else\
    \ {\n            grades_string += \"A+\"\n        }\n    }\n    return grades_string\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpvdnwp158.swift:50:12: error: cannot convert return expression of\
    \ type 'String' to return type '[String]'\n    return grades_string\n        \
    \   ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014655
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    var gradesArrayCopy:\
    \ [Double] = []\n    var gradesArrayCopyCopy: [Double] = []\n    var gradesArrayCopyCopyCopy:\
    \ [Double] = []\n    var gradesArrayCopyCopyCopyCopy: [Double] = []\n    var gradesArrayCopyCopyCopyCopyCopy:\
    \ [Double] = []\n    var gradesArrayCopyCopyCopyCopyCopyCopy: [Double] = []\n\
    \    var gradesArrayCopyCopyCopyCopyCopyCopy: [Double] = []\n    var gradesArrayCopyCopyCopyCopyCopyCopyCopy:\
    \ [Double] = []\n    var gradesArrayCopyCopyCopyCopyCopyCopyCopyCopy: [Double]\
    \ = []\n    var gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopy: [Double] = []\n\
    \    var gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy: [Double] = []\n\
    \    var gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy: [Double] = []\n\
    \    var gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy: [Double] = []\n\
    \    var gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy: [Double]\
    \ = []\n    var gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy:\
    \ [Double] = []\n    var gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy:\
    \ [Double] = []\n    var gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy:\
    \ [Double] = []\n    var gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy:\
    \ [Double] = []\n    var gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy:\
    \ [Double] = []\n    var gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy:\
    \ [Double] = []\n    var gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy:\
    \ [Double] = []\n    var gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy:\
    \ [Double] = []\n    var gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy:\
    \ [Double] = []\n    var gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy:\
    \ [Double] = []\n    var gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy:\
    \ [Double] = []\n    var gradesArrayCopyCopyCopyCopyCopyCopyCopy\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp7k5p2cqk.swift:31:9: error: invalid redeclaration of 'gradesArrayCopyCopyCopyCopyCopyCopy'\n\
    \    var gradesArrayCopyCopyCopyCopyCopyCopy: [Double] = []\n        ^\n/tmp/tmp7k5p2cqk.swift:30:9:\
    \ note: 'gradesArrayCopyCopyCopyCopyCopyCopy' previously declared here\n    var\
    \ gradesArrayCopyCopyCopyCopyCopyCopy: [Double] = []\n        ^\n/tmp/tmp7k5p2cqk.swift:37:9:\
    \ error: invalid redeclaration of 'gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy'\n\
    \    var gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy: [Double] = []\n\
    \        ^\n/tmp/tmp7k5p2cqk.swift:36:9: note: 'gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy'\
    \ previously declared here\n    var gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy:\
    \ [Double] = []\n        ^\n/tmp/tmp7k5p2cqk.swift:43:9: error: invalid redeclaration\
    \ of 'gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy'\n\
    \    var gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy:\
    \ [Double] = []\n        ^\n/tmp/tmp7k5p2cqk.swift:42:9: note: 'gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy'\
    \ previously declared here\n    var gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy:\
    \ [Double] = []\n        ^\n/tmp/tmp7k5p2cqk.swift:48:9: error: invalid redeclaration\
    \ of 'gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy'\n\
    \    var gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy:\
    \ [Double] = []\n        ^\n/tmp/tmp7k5p2cqk.swift:47:9: note: 'gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy'\
    \ previously declared here\n    var gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy:\
    \ [Double] = []\n        ^\n/tmp/tmp7k5p2cqk.swift:50:9: error: type annotation\
    \ missing in pattern\n    var gradesArrayCopyCopyCopyCopyCopyCopyCopy\n      \
    \  ^\n"
  stdout: ''
  timestamp: 1660014655
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    var gpa: Double = 0.0\n\
    \    var letterGrade: String = \"\"\n    \n    for grade in grades {\n       \
    \ gpa = grade * 4.0\n        \n        if gpa > 3.7 { \n            letterGrade\
    \ = \"A+\"\n        } else if gpa > 3.3 { \n            letterGrade = \"A\"\n\
    \        } else if gpa > 3.0 { \n            letterGrade = \"B+\"\n        } else\
    \ if gpa > 2.7 { \n            letterGrade = \"B\"\n        } else if gpa > 2.3\
    \ { \n            letterGrade = \"B-\"\n        } else if gpa > 2.0 { \n     \
    \       letterGrade = \"C+\"\n        } else if gpa > 1.7 { \n            letterGrade\
    \ = \"C\"\n        } else if gpa > 1.3 { \n            letterGrade = \"C-\"\n\
    \        } else if gpa > 1.0 { \n            letterGrade = \"D+\"\n        } else\
    \ if gpa > 0.7 { \n            letterGrade = \"D\"\n        } else if gpa > 0.0\
    \ { \n            letterGrade = \"D-\"\n        } else { \n            letterGrade\
    \ = \"E\"\n        }\n        \n        gradesArray.append(letterGrade)\n    }\n\
    \    \n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpa03ecto3/tmpa03ecto3.swift:76: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad85b0aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad85ada5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad85ada5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad85ada47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa03ecto3                        0x000055d2d7ff77a6 <unavailable> + 6054

    5    libc.so.6                          0x00002ad85b29a460 __libc_start_main +
    245

    6    tmpa03ecto3                        0x000055d2d7ff72c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014655
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades = [String]()\n    for grade in grades {\n\
    \        switch grade {\n        case 0...0.1:\n            letterGrades.append(\"\
    E\")\n        case 0.1:\n            letterGrades.append(\"D-\")\n        case\
    \ 0.2:\n            letterGrades.append(\"D\")\n        case 0.3:\n          \
    \  letterGrades.append(\"C-\")\n        case 0.4:\n            letterGrades.append(\"\
    C\")\n        case 0.5:\n            letterGrades.append(\"B-\")\n        case\
    \ 0.6:\n            letterGrades.append(\"B\")\n        case 0.7:\n          \
    \  letterGrades.append(\"B-\")\n        case 0.8:\n            letterGrades.append(\"\
    B\")\n        case 0.9:\n            letterGrades.append(\"B-\")\n        case\
    \ 1.0:\n            letterGrades.append(\"B\")\n        case 1.1:\n          \
    \  letterGrades.append(\"B-\")\n        case 1.2:\n            letterGrades.append(\"\
    B\")\n        case 1.3:\n            letterGrades.append(\"B-\")\n        case\
    \ 1.4:\n            letterGrades.append(\"B\")\n        case 1.5:\n          \
    \  letterGrades.append(\"B-\")\n        case 1.6:\n            letterGrades.append(\"\
    B\")\n        case 1.7:\n            letterGrades.append(\"B-\")\n        case\
    \ 1.8:\n            letterGrades.append(\"B\")\n        case 1.9:\n          \
    \  letterGrades.append(\"B-\")\n        case 2.0:\n            letterGrades.append(\"\
    B\")\n        case 2.1:\n            letterGrades.append(\"B-\")\n        case\
    \ 2.2:\n            letterGrades.append(\"B\")\n        case 2.3:\n          \
    \  letterGrades.append(\"B-\")\n        case 2.4:\n            letterGrades.append(\"\
    B\")\n        case 2.5:\n            letterGrades.append(\"B-\")\n        case\
    \ 2.6:\n            letterGrades.append(\"B\")\n        case 2.7:\n          \
    \  letterGrades.append(\"B-\")\n        case 2.8:\n            letterGrades.append(\"\
    B\")\n        case 2.9:\n            letterGrades.append(\"B-\")\n        case\
    \ 3.0:\n            letterGrades.append(\"B\")\n        case 3.1:\n          \
    \  letterGrades.append(\"B-\")\n        case 3.2:\n            letterGrades.append(\"\
    B\")\n        case 3.3:\n            letterGrades.append(\"B-\")\n        case\
    \ 3.4:\n            letterGrades.append(\"B\")\n        case 3.5:\n          \
    \  letterGrades.append(\"B-\")\n        case 3.6:\n            letterGrades.append(\"\
    B\")\n        case 3.7:\n            letterGrades.append(\"B-\")\n        case\
    \ 3.8:\n            letterGrades.append(\"B\")\n        case 3.9:\n          \
    \  letterGrades.append(\"B-\")\n        case 4.0:\n            letterGrade\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp1mva1335.swift:129:66: error: expected '}' at end of brace statement\n\
    assert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"])\n      \
    \                                                           ^\n/tmp/tmp1mva1335.swift:25:25:\
    \ note: to match this opening '{'\n    for grade in grades {\n               \
    \         ^\n/tmp/tmp1mva1335.swift:129:66: error: expected '}' at end of brace\
    \ statement\nassert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"\
    ])\n                                                                 ^\n/tmp/tmp1mva1335.swift:23:59:\
    \ note: to match this opening '{'\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n                                                          ^\n\
    /tmp/tmp1mva1335.swift:108:13: error: cannot find 'letterGrade' in scope\n   \
    \         letterGrade\n            ^~~~~~~~~~~\n/tmp/tmp1mva1335.swift:26:9: error:\
    \ switch must be exhaustive\n        switch grade {\n        ^\n/tmp/tmp1mva1335.swift:26:9:\
    \ note: do you want to add a default clause?\n        switch grade {\n       \
    \ ^\n/tmp/tmp1mva1335.swift:112:6: error: operator functions can only be declared\
    \ at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014655
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var grades_string = \"\"\n    for grade in grades {\n   \
    \     switch grade {\n        case 4.0:\n            grades_string += \"A+\"\n\
    \        case 3.7:\n            grades_string += \"A\"\n        case 3.3:\n  \
    \          grades_string += \"A-\"\n        case 3.0:\n            grades_string\
    \ += \"B+\"\n        case 2.7:\n            grades_string += \"B\"\n        case\
    \ 2.3:\n            grades_string += \"B-\"\n        case 2.0:\n            grades_string\
    \ += \"C+\"\n        case 1.7:\n            grades_string += \"C\"\n        case\
    \ 1.3:\n            grades_string += \"C-\"\n        case 1.0:\n            grades_string\
    \ += \"D+\"\n        case 0.7:\n            grades_string += \"D\"\n        case\
    \ 0.0:\n            grades_string += \"D-\"\n        default:\n            grades_string\
    \ += \"E\"\n        }\n    }\n    return grades_string\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp50c7nuq8.swift:55:12: error: cannot convert return expression of\
    \ type 'String' to return type '[String]'\n    return grades_string\n        \
    \   ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014654
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    for grade in grades {\n\
    \        switch grade {\n        case 4.0:\n            gradesArray.append(\"\
    A+\")\n        case 3.7:\n            gradesArray.append(\"A\")\n        case\
    \ 3.3:\n            gradesArray.append(\"A-\")\n        case 3.0:\n          \
    \  gradesArray.append(\"B+\")\n        case 2.7:\n            gradesArray.append(\"\
    B\")\n        case 2.3:\n            gradesArray.append(\"B-\")\n        case\
    \ 2.0:\n            gradesArray.append(\"C+\")\n        case 1.7:\n          \
    \  gradesArray.append(\"C\")\n        case 1.3:\n            gradesArray.append(\"\
    C-\")\n        case 1.0:\n            gradesArray.append(\"D+\")\n        case\
    \ 0.7:\n            gradesArray.append(\"D\")\n        case 0.0:\n           \
    \ gradesArray.append(\"D-\")\n        case 0.0:\n            gradesArray.append(\"\
    E\")\n        default:\n            gradesArray.append(\"E\")\n        }\n   \
    \ }\n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpt3357_il/tmpt3357_il.swift:73: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b77d907cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b77d8d73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b77d8d73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b77d8d727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt3357_il                        0x00005599f07847a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b77d9268460 __libc_start_main +
    245

    6    tmpt3357_il                        0x00005599f07842c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014655
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = grades\n    var gradesArrayCopy = gradesArray\n\
    \    var gradesArrayCopyCopy = gradesArrayCopy\n    var gradesArrayCopyCopyCopy\
    \ = gradesArrayCopyCopy\n    var gradesArrayCopyCopyCopyCopy = gradesArrayCopyCopyCopy\n\
    \    var gradesArrayCopyCopyCopyCopyCopy = gradesArrayCopyCopyCopyCopyCopy\n \
    \   var gradesArrayCopyCopyCopyCopyCopyCopy = gradesArrayCopyCopyCopyCopyCopyCopy\n\
    \    var gradesArrayCopyCopyCopyCopyCopyCopyCopy = gradesArrayCopyCopyCopyCopyCopyCopyCopyCopy\n\
    \    var gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopy = gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy\n\
    \    var gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy = gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy\n\
    \    var gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy = gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy\n\
    \    var gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy =\
    \ gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy\n\
    \    var gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy\
    \ = gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy\n\
    \    var gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy\
    \ = gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy\n\
    \    var gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy\
    \ = gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy\n\
    \    var gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy\
    \ = gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy\n\
    \    var gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy\
    \ = gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpzfp0nmff.swift:29:43: error: use of local variable 'gradesArrayCopyCopyCopyCopyCopy'\
    \ before its declaration\n    var gradesArrayCopyCopyCopyCopyCopy = gradesArrayCopyCopyCopyCopyCopy\n\
    \                                          ^\n/tmp/tmpzfp0nmff.swift:29:9: note:\
    \ 'gradesArrayCopyCopyCopyCopyCopy' declared here\n    var gradesArrayCopyCopyCopyCopyCopy\
    \ = gradesArrayCopyCopyCopyCopyCopy\n        ^\n/tmp/tmpzfp0nmff.swift:30:47:\
    \ error: use of local variable 'gradesArrayCopyCopyCopyCopyCopyCopy' before its\
    \ declaration\n    var gradesArrayCopyCopyCopyCopyCopyCopy = gradesArrayCopyCopyCopyCopyCopyCopy\n\
    \                                              ^\n/tmp/tmpzfp0nmff.swift:30:9:\
    \ note: 'gradesArrayCopyCopyCopyCopyCopyCopy' declared here\n    var gradesArrayCopyCopyCopyCopyCopyCopy\
    \ = gradesArrayCopyCopyCopyCopyCopyCopy\n        ^\n/tmp/tmpzfp0nmff.swift:31:51:\
    \ error: cannot find 'gradesArrayCopyCopyCopyCopyCopyCopyCopyCopy' in scope\n\
    \    var gradesArrayCopyCopyCopyCopyCopyCopyCopy = gradesArrayCopyCopyCopyCopyCopyCopyCopyCopy\n\
    \                                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpzfp0nmff.swift:32:59: error: cannot find 'gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy'\
    \ in scope\n    var gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopy = gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy\n\
    \                                                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpzfp0nmff.swift:33:67: error: use of local variable 'gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy'\
    \ before its declaration\n    var gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy\
    \ = gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy\n            \
    \                                                      ^\n/tmp/tmpzfp0nmff.swift:34:9:\
    \ note: 'gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy' declared\
    \ here\n    var gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy =\
    \ gradesArrayCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy\n       "
  stdout: ''
  timestamp: 1660014655
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    var gpa: Double = 0.0\n\
    \    var letterGrade: String = \"\"\n    \n    for grade in grades {\n       \
    \ gpa = grade * 4.0\n        letterGrade = letterGrade + String(gpa)\n    }\n\
    \    \n    gradesArray.append(letterGrade)\n    \n    return gradesArray\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpkw8lajy4/tmpkw8lajy4.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b15659c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b15656b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b15656b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b15656b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkw8lajy4                        0x000055891cd758b6 <unavailable> + 6326

    5    libc.so.6                          0x00002b1565bae460 __libc_start_main +
    245

    6    tmpkw8lajy4                        0x000055891cd753d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1660014655
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var grades_string = \"\"\n    var total_grade = 0.0\n   \
    \ for grade in grades {\n        total_grade += grade\n    }\n    var letter_grade\
    \ = \"\"\n    if total_grade >= 4.0 {\n        letter_grade = \"A+\"\n    } else\
    \ if total_grade >= 3.7 {\n        letter_grade = \"A\"\n    } else if total_grade\
    \ >= 3.3 {\n        letter_grade = \"A-\"\n    } else if total_grade >= 3.0 {\n\
    \        letter_grade = \"B+\"\n    } else if total_grade >= 2.7 {\n        letter_grade\
    \ = \"B\"\n    } else if total_grade >= 2.3 {\n        letter_grade = \"B-\"\n\
    \    } else if total_grade >= 2.0 {\n        letter_grade = \"C+\"\n    } else\
    \ if total_grade >= 1.7 {\n        letter_grade = \"C\"\n    } else if total_grade\
    \ >= 1.3 {\n        letter_grade = \"C-\"\n    } else if total_grade >= 1.0 {\n\
    \        letter_grade = \"D+\"\n    } else if total_grade >= 0.7 {\n        letter_grade\
    \ = \"D\"\n    } else if total_grade >= 0.0 {\n        letter_grade = \"D-\"\n\
    \    } else {\n        letter_grade = \"E\"\n    }\n    for grade in grades {\n\
    \        grades_string += letter_grade\n    }\n    return grades_string\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpt6co99t1.swift:60:12: error: cannot convert return expression of\
    \ type 'String' to return type '[String]'\n    return grades_string\n        \
    \   ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014655
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var grades_string = \"\"\n    var grades_string_array = [String]()\n\
    \    var total_grades = grades.reduce(0, combine: +)\n    var total_grades_string\
    \ = \"\"\n    var total_grades_string_array = [String]()\n    var total_grades_string_index\
    \ = 0\n    var total_grades_string_array_index = 0\n    var total_grades_string_index\
    \ = 0\n    var total_grades_string_array_index = 0\n    var total_grades_string_index\
    \ = 0\n    var total_grades_string_array_index = 0\n    var total_grades_string_index\
    \ = 0\n    var total_grades_string_array_index = 0\n    var total_grades_string_index\
    \ = 0\n    var total_grades_string_array_index = 0\n    var total_grades_string_index\
    \ = 0\n    var total_grades_string_array_index = 0\n    var total_grades_string_index\
    \ = 0\n    var total_grades_string_array_index = 0\n    var total_grades_string_index\
    \ = 0\n    var total_grades_string_array_index = 0\n    var total_grades_string_index\
    \ = 0\n    var total_grades_string_array_index = 0\n    var total_grades_string_index\
    \ = 0\n    var total_grades_string_array_index = 0\n    var total_grades_string_index\
    \ = 0\n    var total_grades_string_array_index = 0\n    var total_grades_string_index\
    \ = 0\n    var total_grades_string_array_index = 0\n    var total_grades_string_index\
    \ = 0\n    var total_grades_string_array_index = 0\n    var total_grades_string_index\
    \ = 0\n    var total_grades_string_array_index = 0\n    var total_grades_string_index\
    \ = 0\n    var total_grades_string_array_index = 0\n    var total_grades_string_index\
    \ = 0\n    var total_grades_string_array_index = 0\n    var total_grades_string_index\
    \ = 0\n    var total_grades_string_array_index = 0\n    var total_grades_string_index\
    \ = 0\n    var total_grades_string_array_index = 0\n    var total_grades_string_index\
    \ = 0\n    var total_grades_string_array_index = 0\n    var total_grades_string_index\
    \ = 0\n    var total_grades_string_array_index = 0\n    var total_grades_string_index\
    \ = 0\n    var total_grades_string_array_index = 0\n    var total_grades_string_index\
    \ = 0\n    var total_grades_string_array_index = 0\n    var total_grades_string_index\
    \ = 0\n    var total_grades_string_array_index = 0\n    var total_grades_string_index\
    \ = 0\n    var total_grades_string_array_index = 0\n    var total_grades_string_index\
    \ = 0\n    var total_grades_string_array_index = 0\n    var total_grades_string_index\
    \ = 0\n    var total_grades_string_array_index = 0\n    var total_grades_string_index\
    \ = 0\n    var total_grades_string_array_index = 0\n    var total_grades_string_index\
    \ = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpqjc5r0on.swift:26:37: error: extraneous argument label 'combine:'\
    \ in call\n    var total_grades = grades.reduce(0, combine: +)\n             \
    \                       ^   ~~~~~~~~~\n                                      \
    \  \n/tmp/tmpqjc5r0on.swift:31:9: error: invalid redeclaration of 'total_grades_string_index'\n\
    \    var total_grades_string_index = 0\n        ^\n/tmp/tmpqjc5r0on.swift:29:9:\
    \ note: 'total_grades_string_index' previously declared here\n    var total_grades_string_index\
    \ = 0\n        ^\n/tmp/tmpqjc5r0on.swift:32:9: error: invalid redeclaration of\
    \ 'total_grades_string_array_index'\n    var total_grades_string_array_index =\
    \ 0\n        ^\n/tmp/tmpqjc5r0on.swift:30:9: note: 'total_grades_string_array_index'\
    \ previously declared here\n    var total_grades_string_array_index = 0\n    \
    \    ^\n/tmp/tmpqjc5r0on.swift:33:9: error: invalid redeclaration of 'total_grades_string_index'\n\
    \    var total_grades_string_index = 0\n        ^\n/tmp/tmpqjc5r0on.swift:29:9:\
    \ note: 'total_grades_string_index' previously declared here\n    var total_grades_string_index\
    \ = 0\n        ^\n/tmp/tmpqjc5r0on.swift:34:9: error: invalid redeclaration of\
    \ 'total_grades_string_array_index'\n    var total_grades_string_array_index =\
    \ 0\n        ^\n/tmp/tmpqjc5r0on.swift:30:9: note: 'total_grades_string_array_index'\
    \ previously declared here\n    var total_grades_string_array_index = 0\n    \
    \    ^\n/tmp/tmpqjc5r0on.swift:35:9: error: invalid redeclaration of 'total_grades_string_index'\n\
    \    var total_grades_string_index = 0\n        ^\n/tmp/tmpqjc5r0on.swift:29:9:\
    \ note: 'total_grades_string_index' previously declared here\n    var total_grades_string_index\
    \ = 0\n        ^\n/tmp/tmpqjc5r0on.swift:36:9: error: invalid redeclaration of\
    \ 'total_grades_string_array_index'\n    var total_grades_string_array_index =\
    \ 0\n        ^\n/tmp/tmpqjc5r0on.swift:30:9: note: 'total_grades_string_array_index'\
    \ previously declared here\n    var total_grades_string_array_index = 0\n    \
    \    ^\n/tmp/tmpqjc5r0on.swift:37:9: error: invalid redeclaration of 'total_grades_string_index'\n\
    \    var total_grades_str"
  stdout: ''
  timestamp: 1660014655
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var gpaArray = [Double]()\n    gpaArray.append(gpa)\n    gradesArray.append(gpaArray)\n\
    \    var gpaSum = grades.reduce(0, combine: +)\n    var gpaSumArray = [Double]()\n\
    \    gpaSumArray.append(gpaSum)\n    gradesArray.append(gpaSumArray)\n    var\
    \ gpaAverage = grades.reduce(0, combine: +) / Double(grades.count)\n    var gpaAverageArray\
    \ = [Double]()\n    gpaAverageArray.append(gpaAverage)\n    gradesArray.append(gpaAverageArray)\n\
    \    var gpaSum = grades.reduce(0, combine: +)\n    var gpaSumArray = [Double]()\n\
    \    gpaSumArray.append(gpaSum)\n    gradesArray.append(gpaSumArray)\n    var\
    \ gpaAverage = grades.reduce(0, combine: +) / Double(grades.count)\n    var gpaAverageArray\
    \ = [Double]()\n    gpaAverageArray.append(gpaAverage)\n    gradesArray.append(gpaAverageArray)\n\
    \    var gpaSum = grades.reduce(0, combine: +)\n    var gpaSumArray = [Double]()\n\
    \    gpaSumArray.append(gpaSum)\n    gradesArray.append(gpaSumArray)\n    var\
    \ gpaAverage = grades.reduce(0, combine: +) / Double(grades.count)\n    var gpaAverageArray\
    \ = [Double]()\n    gpaAverageArray.append(gpaAverage)\n    gradesArray.append(gpaAverageArray)\n\
    \    var gpaSum = grades.reduce(0, combine: +)\n    var gpaSumArray = [Double]()\n\
    \    gpaSumArray.append(gpaSum)\n    gradesArray.append(gpaSumArray)\n    var\
    \ gpaAverage = grades.reduce(0, combine: +) / Double(grades.count)\n    var gpaAverageArray\
    \ = [Double]()\n    gpaAverageArray.append(gpaAverage)\n    gradesArray.append(gpaAverageArray)\n\
    \    var gpaSum = grades.reduce(0, combine: +)\n    var gpaSumArray = [Double]()\n\
    \    gpaSumArray.append(gpaSum)\n    gradesArray.append(gpaSumArray)\n    var\
    \ gpaAverage = grades.reduce(0, combine: +) / Double(grades.count)\n    var gpaAverageArray\
    \ = [Double]()\n    gpaAverageArray.append(gpaAverage)\n    gradesArray.append(gpaAverageArray)\n\
    \    var gpaSum = \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpw9b8u3u_.swift:69:17: error: expected initial value after '='\n\
    \    var gpaSum = \n                ^\n/tmp/tmpw9b8u3u_.swift:25:28: error: extraneous\
    \ argument label 'combine:' in call\n    var gpa = grades.reduce(0, combine: +)\n\
    \                           ^   ~~~~~~~~~\n                               \n/tmp/tmpw9b8u3u_.swift:28:17:\
    \ error: no exact matches in call to instance method 'append'\n    gradesArray.append(gpaArray)\n\
    \                ^\nSwift.Array:6:37: note: candidate expects value of type 'String'\
    \ for parameter #1 (got '[Double]')\n    @inlinable public mutating func append(_\
    \ newElement: __owned Element)\n                                    ^\nSwift.RangeReplaceableCollection:4:37:\
    \ note: candidate expects value of type 'String' for parameter #1 (got '[Double]')\n\
    \    @inlinable public mutating func append(_ newElement: __owned Self.Element)\n\
    \                                    ^\n/tmp/tmpw9b8u3u_.swift:28:17: note: found\
    \ candidate with type '(__owned [Double]) -> ()'\n    gradesArray.append(gpaArray)\n\
    \                ^\n/tmp/tmpw9b8u3u_.swift:29:31: error: extraneous argument label\
    \ 'combine:' in call\n    var gpaSum = grades.reduce(0, combine: +)\n        \
    \                      ^   ~~~~~~~~~\n                                  \n/tmp/tmpw9b8u3u_.swift:32:17:\
    \ error: no exact matches in call to instance method 'append'\n    gradesArray.append(gpaSumArray)\n\
    \                ^\nSwift.Array:6:37: note: candidate expects value of type 'String'\
    \ for parameter #1 (got '[Double]')\n    @inlinable public mutating func append(_\
    \ newElement: __owned Element)\n                                    ^\nSwift.RangeReplaceableCollection:4:37:\
    \ note: candidate expects value of type 'String' for parameter #1 (got '[Double]')\n\
    \    @inlinable public mutating func append(_ newElement: __owned Self.Element)\n\
    \                                    ^\n/tmp/tmpw9b8u3u_.swift:32:17: note: found\
    \ candidate with type '(__owned [Double]) -> ()'\n    gradesArray.append(gpaSumArray)\n\
    \                ^\n/tmp/tmpw9b8u3u_.swift:33:35: error: extraneous argument label\
    \ 'combine:'"
  stdout: ''
  timestamp: 1660014656
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    \n    for grade in grades\
    \ {\n        switch grade {\n        case 0...0.1:\n            gradesArray.append(\"\
    E\")\n        case 0.1:\n            gradesArray.append(\"D+\")\n        case\
    \ 0.2:\n            gradesArray.append(\"D\")\n        case 0.3:\n           \
    \ gradesArray.append(\"D-\")\n        case 0.4:\n            gradesArray.append(\"\
    C+\")\n        case 0.5:\n            gradesArray.append(\"C\")\n        case\
    \ 0.6:\n            gradesArray.append(\"C-\")\n        case 0.7:\n          \
    \  gradesArray.append(\"B+\")\n        case 0.8:\n            gradesArray.append(\"\
    B\")\n        case 0.9:\n            gradesArray.append(\"B-\")\n        case\
    \ 1.0:\n            gradesArray.append(\"A+\")\n        case 1.1:\n          \
    \  gradesArray.append(\"A\")\n        case 1.2:\n            gradesArray.append(\"\
    A-\")\n        case 1.3:\n            gradesArray.append(\"B+\")\n        case\
    \ 1.4:\n            gradesArray.append(\"B\")\n        case 1.5:\n           \
    \ gradesArray.append(\"B-\")\n        case 1.6:\n            gradesArray.append(\"\
    C+\")\n        case 1.7:\n            gradesArray.append(\"C\")\n        case\
    \ 1.8:\n            gradesArray.append(\"C-\")\n        case 1.9:\n          \
    \  gradesArray.append(\"D+\")\n        case 1.10:\n            gradesArray.append(\"\
    D\")\n        case 1.11:\n            gradesArray.append(\"D-\")\n        case\
    \ 1.12:\n            gradesArray.append(\"E\")\n        default:\n           \
    \ gradesArray.append(\"A\")\n        }\n    }\n    return gradesArray\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpncgpotb0/tmpncgpotb0.swift:94: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab6e6bd1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab6e68c8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab6e68c8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab6e68c77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpncgpotb0                        0x0000557c3fd998d6 <unavailable> + 6358

    5    libc.so.6                          0x00002ab6e6dbd460 __libc_start_main +
    245

    6    tmpncgpotb0                        0x0000557c3fd993f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660014655
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var grades_string = \"\"\n    var grades_length = grades.count\n\
    \    var gpa = grades[0]\n    var gpa_length = grades.count\n    var letter_grade\
    \ = \"\"\n    var letter_grade_length = grades.count\n    \n    if gpa_length\
    \ == 0 {\n        return [\"E\"]\n    }\n    \n    if gpa_length == 1 {\n    \
    \    letter_grade = \"A+\"\n    }\n    \n    if gpa_length == 2 {\n        letter_grade\
    \ = \"A\"\n    }\n    \n    if gpa_length == 3 {\n        letter_grade = \"A-\"\
    \n    }\n    \n    if gpa_length == 4 {\n        letter_grade = \"B+\"\n    }\n\
    \    \n    if gpa_length == 5 {\n        letter_grade = \"B\"\n    }\n    \n \
    \   if gpa_length == 6 {\n        letter_grade = \"B-\"\n    }\n    \n    if gpa_length\
    \ == 7 {\n        letter_grade = \"C+\"\n    }\n    \n    if gpa_length == 8 {\n\
    \        letter_grade = \"C\"\n    }\n    \n    if gpa_length == 9 {\n       \
    \ letter_grade = \"C-\"\n    }\n    \n    if gpa_length == 10 {\n        letter_grade\
    \ = \"D+\"\n    }\n    \n    if gpa_length == 11 {\n        letter_grade = \"\
    D\"\n    }\n    \n    if gpa_length == 12 {\n        letter_grade = \"D-\"\n \
    \   }\n    \n    if gpa_length == 13 {\n        letter_grade = \"E\"\n    }\n\
    \    \n    if gpa_length == 14 {\n        letter_grade = \"F\"\n    }\n    \n\
    \    if gpa_length == 15 {\n        letter_grade = \"F\"\n    }\n    \n    if\
    \ gpa_length == 16 {\n        letter_grade = \"F\"\n    }\n    \n    if gpa_length\
    \ == 17 {\n        letter_grade = \"F\"\n    }\n    \n    if gpa_length == 18\
    \ {\n        letter_grade = \"F\"\n    }\n    \n    if gpa_length == 19 {\n  \
    \      letter_grade = \"F\"\n    }\n    \n    if gpa_length == 20 {\n        letter_grade\
    \ = \"F\"\n    }\n    \n    if gpa_length == 21 {\n        letter_grade = \"F\"\
    \n    }\n    \n    if gpa_length == 22 {\n        letter_grade = \"F\"\n    }\n\
    \    \n    if gpa_length == 23 {\n        letter_grade = \"F\"\n    }\n    \n\
    \    if gpa_length == 24 {\n        letter_grade = \"F\"\n    }\n    \n    if\
    \ gpa_length == 25 {\n        \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpvwjcz3rl.swift:153:66: error: expected '}' at end of brace statement\n\
    assert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"])\n      \
    \                                                           ^\n/tmp/tmpvwjcz3rl.swift:23:59:\
    \ note: to match this opening '{'\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n                                                          ^\n\
    /tmp/tmpvwjcz3rl.swift:136:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n/tmp/tmpvwjcz3rl.swift:24:9: warning: initialization of variable\
    \ 'grades_string' was never used; consider replacing with assignment to '_' or\
    \ removing it\n    var grades_string = \"\"\n    ~~~~^~~~~~~~~~~~~\n    _\n/tmp/tmpvwjcz3rl.swift:25:9:\
    \ warning: initialization of variable 'grades_length' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var grades_length = grades.count\n\
    \    ~~~~^~~~~~~~~~~~~\n    _\n/tmp/tmpvwjcz3rl.swift:26:9: warning: initialization\
    \ of variable 'gpa' was never used; consider replacing with assignment to '_'\
    \ or removing it\n    var gpa = grades[0]\n    ~~~~^~~\n    _\n/tmp/tmpvwjcz3rl.swift:27:9:\
    \ warning: variable 'gpa_length' was never mutated; consider changing to 'let'\
    \ constant\n    var gpa_length = grades.count\n    ~~~ ^\n    let\n/tmp/tmpvwjcz3rl.swift:28:9:\
    \ warning: variable 'letter_grade' was written to, but never read\n    var letter_grade\
    \ = \"\"\n        ^\n/tmp/tmpvwjcz3rl.swift:29:9: warning: initialization of variable\
    \ 'letter_grade_length' was never used; consider replacing with assignment to\
    \ '_' or removing it\n    var letter_grade_length = grades.count\n    ~~~~^~~~~~~~~~~~~~~~~~~\n\
    \    _\n"
  stdout: ''
  timestamp: 1660014655
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades[0]\n\
    \    for grade in grades {\n        if gpa > grade {\n            letterGrades.append(\"\
    A+\")\n            gpa = grade\n        } else if gpa > 3.7 {\n            letterGrades.append(\"\
    A\")\n            gpa = grade - 3.7\n        } else if gpa > 3.3 {\n         \
    \   letterGrades.append(\"A-\")\n            gpa = grade - 3.3\n        } else\
    \ if gpa > 3.0 {\n            letterGrades.append(\"B+\")\n            gpa = grade\
    \ - 3.0\n        } else if gpa > 2.7 {\n            letterGrades.append(\"B\"\
    )\n            gpa = grade - 2.7\n        } else if gpa > 2.3 {\n            letterGrades.append(\"\
    B-\")\n            gpa = grade - 2.3\n        } else if gpa > 2.0 {\n        \
    \    letterGrades.append(\"C+\")\n            gpa = grade - 2.0\n        } else\
    \ if gpa > 1.7 {\n            letterGrades.append(\"C\")\n            gpa = grade\
    \ - 1.7\n        } else if gpa > 1.3 {\n            letterGrades.append(\"C-\"\
    )\n            gpa = grade - 1.3\n        } else if gpa > 1.0 {\n            letterGrades.append(\"\
    D+\")\n            gpa = grade - 1.0\n        } else if gpa > 0.7 {\n        \
    \    letterGrades.append(\"D\")\n            gpa = grade - 0.7\n        } else\
    \ if gpa > 0.0 {\n            letterGrades.append(\"D-\")\n            gpa = grade\
    \ - 0.0\n        } else {\n            letterGrades.append(\"E\")\n        }\n\
    \    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmppzj0qhh6/tmppzj0qhh6.swift:83: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4017578c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b401726fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b401726f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b401726e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppzj0qhh6                        0x00005575278d9856 <unavailable> + 6230

    5    libc.so.6                          0x00002b4017764460 __libc_start_main +
    245

    6    tmppzj0qhh6                        0x00005575278d9379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660014655
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var grades_string = \"\"\n    for grade in grades {\n   \
    \     switch grade {\n        case 4.0:\n            grades_string += \"A+\"\n\
    \        case 3.7:\n            grades_string += \"A\"\n        case 3.3:\n  \
    \          grades_string += \"A-\"\n        case 3.0:\n            grades_string\
    \ += \"B+\"\n        case 2.7:\n            grades_string += \"B\"\n        case\
    \ 2.3:\n            grades_string += \"B-\"\n        case 2.0:\n            grades_string\
    \ += \"C+\"\n        case 1.7:\n            grades_string += \"C\"\n        case\
    \ 1.3:\n            grades_string += \"C-\"\n        case 1.0:\n            grades_string\
    \ += \"D+\"\n        case 0.7:\n            grades_string += \"D\"\n        case\
    \ 0.0:\n            grades_string += \"D-\"\n        case 0.0:\n            grades_string\
    \ += \"E\"\n        default:\n            grades_string += \"?\"\n        }\n\
    \    }\n    return grades_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmput5ai4yt.swift:51:14: warning: literal value is already handled\
    \ by previous pattern; consider removing it\n        case 0.0:\n             ^~~\n\
    /tmp/tmput5ai4yt.swift:49:14: note: first occurrence of identical literal pattern\
    \ is here\n        case 0.0:\n             ^~~\n/tmp/tmput5ai4yt.swift:57:12:\
    \ error: cannot convert return expression of type 'String' to return type '[String]'\n\
    \    return grades_string\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014655
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var grades_string = \"\"\n    var total_grade = grades.reduce(0,\
    \ combine: +)\n    var total_letter_grade = \"\"\n    var total_letter_grade_index\
    \ = 0\n    var total_letter_grade_index2 = 0\n    var total_letter_grade_index3\
    \ = 0\n    var total_letter_grade_index4 = 0\n    var total_letter_grade_index5\
    \ = 0\n    var total_letter_grade_index6 = 0\n    var total_letter_grade_index7\
    \ = 0\n    var total_letter_grade_index8 = 0\n    var total_letter_grade_index9\
    \ = 0\n    var total_letter_grade_index10 = 0\n    var total_letter_grade_index11\
    \ = 0\n    var total_letter_grade_index12 = 0\n    var total_letter_grade_index13\
    \ = 0\n    var total_letter_grade_index14 = 0\n    var total_letter_grade_index15\
    \ = 0\n    var total_letter_grade_index16 = 0\n    var total_letter_grade_index17\
    \ = 0\n    var total_letter_grade_index18 = 0\n    var total_letter_grade_index19\
    \ = 0\n    var total_letter_grade_index20 = 0\n    var total_letter_grade_index21\
    \ = 0\n    var total_letter_grade_index22 = 0\n    var total_letter_grade_index23\
    \ = 0\n    var total_letter_grade_index24 = 0\n    var total_letter_grade_index25\
    \ = 0\n    var total_letter_grade_index26 = 0\n    var total_letter_grade_index27\
    \ = 0\n    var total_letter_grade_index28 = 0\n    var total_letter_grade_index29\
    \ = 0\n    var total_letter_grade_index30 = 0\n    var total_letter_grade_index31\
    \ = 0\n    var total_letter_grade_index32 = 0\n    var total_letter_grade_index33\
    \ = 0\n    var total_letter_grade_index34 = 0\n    var total_letter_grade_index35\
    \ = 0\n    var total_letter_grade_index36 = 0\n    var total_letter_grade_index37\
    \ = 0\n    var total_letter_grade_index38 = 0\n    var total_letter_grade_index39\
    \ = 0\n    var total_letter_grade_index40 = 0\n    var total_letter_grade_index41\
    \ = 0\n    var total_letter_grade_index42 = 0\n    var total_letter_grade_index43\
    \ = 0\n    var total_letter_grade_index44 = 0\n    var total_letter_grade_index45\
    \ = 0\n    var total_letter_grade_index46 = 0\n    var total_letter_grade_index47\
    \ = 0\n    var total_letter_grade_index48 = 0\n    var total_letter_grade_index49\
    \ = 0\n    var total_letter_grade_index50 = 0\n    var total_letter_grade_index51\
    \ = 0\n    var total_letter_grade_index52 = 0\n    var total_letter_grade_index53\
    \ = 0\n    var total_letter_grade_index54 = 0\n    var total_letter_grade_index55\
    \ = 0\n    var total_letter_grade_index56 = 0\n    var total_letter_grade_index57\
    \ = 0\n    var total_letter_grade_index58 = 0\n    var total_letter_grade_index59\
    \ = 0\n    var total_letter_grade_index60 = 0\n    var total_letter_grade_index61\
    \ = 0\n    var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp7oijypj2.swift:88:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp7oijypj2.swift:25:36: error: extraneous argument label 'combine:'\
    \ in call\n    var total_grade = grades.reduce(0, combine: +)\n              \
    \                     ^   ~~~~~~~~~\n                                       \n"
  stdout: ''
  timestamp: 1660014654
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    var gradesArrayIndex\
    \ = 0\n    var gradesArrayIndexMax = grades.count - 1\n    \n    for grade in\
    \ grades {\n        if grade < 3.0 {\n            gradesArray[gradesArrayIndex]\
    \ = \"E\"\n        } else if grade < 3.3 {\n            gradesArray[gradesArrayIndex]\
    \ = \"D-\"\n        } else if grade < 3.7 {\n            gradesArray[gradesArrayIndex]\
    \ = \"D+\"\n        } else if grade < 4.0 {\n            gradesArray[gradesArrayIndex]\
    \ = \"C+\"\n        } else if grade < 4.3 {\n            gradesArray[gradesArrayIndex]\
    \ = \"C\"\n        } else if grade < 4.7 {\n            gradesArray[gradesArrayIndex]\
    \ = \"B-\"\n        } else if grade < 5.0 {\n            gradesArray[gradesArrayIndex]\
    \ = \"B+\"\n        } else if grade < 5.3 {\n            gradesArray[gradesArrayIndex]\
    \ = \"B\"\n        } else if grade < 5.7 {\n            gradesArray[gradesArrayIndex]\
    \ = \"A-\"\n        } else if grade < 6.0 {\n            gradesArray[gradesArrayIndex]\
    \ = \"A+\"\n        } else if grade < 6.3 {\n            gradesArray[gradesArrayIndex]\
    \ = \"A\"\n        } else if grade < 6.7 {\n            gradesArray[gradesArrayIndex]\
    \ = \"A-\"\n        } else if grade < 7.0 {\n            gradesArray[gradesArrayIndex]\
    \ = \"A+\"\n        } else if grade < 7.3 {\n            gradesArray[gradesArrayIndex]\
    \ = \"A\"\n        } else if grade < 7.7 {\n            gradesArray[gradesArrayIndex]\
    \ = \"A-\"\n        } else if grade < 8.0 {\n            gradesArray[gradesArrayIndex]\
    \ = \"A+\"\n        } else if grade < 8.3 {\n            gradesArray[gradesArrayIndex]\
    \ = \"A\"\n        } else if grade < 8.7 {\n            gradesArray[gradesArrayIndex]\
    \ = \"A-\"\n        } else if grade < 9.0 {\n            gradesArray[gradesArrayIndex]\
    \ = \"A+\"\n        } else if grade < 9.3 {\n            gradesArray[gradesArrayIndex]\
    \ = \"A\"\n        } else if grade < 9.7 {\n            gradesArray[gradesArrayIndex]\
    \ = \"A-\"\n        } else if grade < 10.0 {\n\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp6nrqiiym.swift:93:66: error: expected '}' at end of brace statement\n\
    assert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"])\n      \
    \                                                           ^\n/tmp/tmp6nrqiiym.swift:28:25:\
    \ note: to match this opening '{'\n    for grade in grades {\n               \
    \         ^\n/tmp/tmp6nrqiiym.swift:93:66: error: expected '}' at end of brace\
    \ statement\nassert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"\
    ])\n                                                                 ^\n/tmp/tmp6nrqiiym.swift:23:59:\
    \ note: to match this opening '{'\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n                                                          ^\n\
    /tmp/tmp6nrqiiym.swift:76:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n/tmp/tmp6nrqiiym.swift:25:9: warning: variable 'gradesArrayIndex'\
    \ was never mutated; consider changing to 'let' constant\n    var gradesArrayIndex\
    \ = 0\n    ~~~ ^\n    let\n/tmp/tmp6nrqiiym.swift:26:9: warning: initialization\
    \ of variable 'gradesArrayIndexMax' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var gradesArrayIndexMax = grades.count - 1\n    ~~~~^~~~~~~~~~~~~~~~~~~\n\
    \    _\n"
  stdout: ''
  timestamp: 1660014655
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades = [String]()\n    \n    // Your code here\n\
    \    \n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp31rnlbl_/tmp31rnlbl_.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b212c56cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b212c263b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b212c263988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b212c2627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp31rnlbl_                        0x000055899e22d636 <unavailable> + 5686

    5    libc.so.6                          0x00002b212c758460 __libc_start_main +
    245

    6    tmp31rnlbl_                        0x000055899e22d159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1660014655
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    var totalGrade: Double\
    \ = 0.0\n    \n    for grade in grades {\n        totalGrade += grade\n    }\n\
    \    \n    for grade in grades {\n        let letterGrade: String\n        \n\
    \        if totalGrade >= 4.0 {\n            letterGrade = \"A+\"\n        } else\
    \ if totalGrade >= 3.7 {\n            letterGrade = \"A\"\n        } else if totalGrade\
    \ >= 3.3 {\n            letterGrade = \"A-\"\n        } else if totalGrade >=\
    \ 3.0 {\n            letterGrade = \"B+\"\n        } else if totalGrade >= 2.7\
    \ {\n            letterGrade = \"B\"\n        } else if totalGrade >= 2.3 {\n\
    \            letterGrade = \"B-\"\n        } else if totalGrade >= 2.0 {\n   \
    \         letterGrade = \"C+\"\n        } else if totalGrade >= 1.7 {\n      \
    \      letterGrade = \"C\"\n        } else if totalGrade >= 1.3 {\n          \
    \  letterGrade = \"C-\"\n        } else if totalGrade >= 1.0 {\n            letterGrade\
    \ = \"D+\"\n        } else if totalGrade >= 0.7 {\n            letterGrade = \"\
    D\"\n        } else if totalGrade >= 0.0 {\n            letterGrade = \"D-\"\n\
    \        } else {\n            letterGrade = \"E\"\n        }\n        \n    \
    \    gradesArray.append(letterGrade)\n        totalGrade = 0.0\n    }\n    \n\
    \    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpojrv02qg/tmpojrv02qg.swift:82: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afbedf2cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afbedc23b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afbedc23988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afbedc227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpojrv02qg                        0x000055e5131607a6 <unavailable> + 6054

    5    libc.so.6                          0x00002afbee118460 __libc_start_main +
    245

    6    tmpojrv02qg                        0x000055e5131602c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014655
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    \n    for grade in grades\
    \ {\n        switch grade {\n        case 4.0:\n            gradesArray.append(\"\
    A+\")\n        case 3.7...3.0:\n            gradesArray.append(\"A\")\n      \
    \  case 3.3...2.7:\n            gradesArray.append(\"A-\")\n        case 3.0...2.3:\n\
    \            gradesArray.append(\"B+\")\n        case 2.7...2.0:\n           \
    \ gradesArray.append(\"B\")\n        case 2.3...1.7:\n            gradesArray.append(\"\
    B-\")\n        case 2.0...1.3:\n            gradesArray.append(\"C+\")\n     \
    \   case 1.7...1.0:\n            gradesArray.append(\"C\")\n        case 1.3...0.7:\n\
    \            gradesArray.append(\"C-\")\n        case 1.0...0.0:\n           \
    \ gradesArray.append(\"D+\")\n        case 0.7...0.0:\n            gradesArray.append(\"\
    D\")\n        case 0.0:\n            gradesArray.append(\"D-\")\n        case\
    \ _:\n            gradesArray.append(\"E\")\n        }\n    }\n    \n    return\
    \ gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b5d1c302c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5d1bff9561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5d1bff9286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b5d1bff913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5d1bff8bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp8_tn1vrv                        0x000055cf5029637c <unavailable> + 9084

    6    tmp8_tn1vrv                        0x000055cf5029578d <unavailable> + 6029

    7    libc.so.6                          0x00002b5d1c4ee460 __libc_start_main +
    245

    8    tmp8_tn1vrv                        0x000055cf50295449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660014655
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    grades.forEach { grade\
    \ in\n        switch grade {\n        case 4.0:\n            gradesArray.append(\"\
    A+\")\n        case 3.7:\n            gradesArray.append(\"A\")\n        case\
    \ 3.3:\n            gradesArray.append(\"A-\")\n        case 3.0:\n          \
    \  gradesArray.append(\"B+\")\n        case 2.7:\n            gradesArray.append(\"\
    B\")\n        case 2.3:\n            gradesArray.append(\"B-\")\n        case\
    \ 2.0:\n            gradesArray.append(\"C+\")\n        case 1.7:\n          \
    \  gradesArray.append(\"C\")\n        case 1.3:\n            gradesArray.append(\"\
    C-\")\n        case 1.0:\n            gradesArray.append(\"D+\")\n        case\
    \ 0.7:\n            gradesArray.append(\"D\")\n        case 0.0:\n           \
    \ gradesArray.append(\"D-\")\n        default:\n            gradesArray.append(\"\
    E\")\n        }\n    }\n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp6ssberu4/tmp6ssberu4.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b45e49bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b45e46b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b45e46b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b45e46b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6ssberu4                        0x0000558b9563f6a6 <unavailable> + 5798

    5    libc.so.6                          0x00002b45e4ba8460 __libc_start_main +
    245

    6    tmp6ssberu4                        0x0000558b9563f1c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1660014655
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var grades_string = \"\"\n    for grade in grades {\n   \
    \     if grade > 3.0 {\n            grades_string += \"B-\"\n        } else if\
    \ grade > 2.7 {\n            grades_string += \"B-\"\n        } else if grade\
    \ > 2.3 {\n            grades_string += \"B-\"\n        } else if grade > 1.3\
    \ {\n            grades_string += \"B-\"\n        } else if grade > 0.7 {\n  \
    \          grades_string += \"B-\"\n        } else if grade > 0.3 {\n        \
    \    grades_string += \"B-\"\n        } else if grade > 0.0 {\n            grades_string\
    \ += \"B-\"\n        } else if grade > -1.0 {\n            grades_string += \"\
    B-\"\n        } else if grade > -2.7 {\n            grades_string += \"B-\"\n\
    \        } else if grade > -3.3 {\n            grades_string += \"B-\"\n     \
    \   } else if grade > -3.0 {\n            grades_string += \"B-\"\n        } else\
    \ if grade > -3.7 {\n            grades_string += \"B-\"\n        } else if grade\
    \ > -4.3 {\n            grades_string += \"B-\"\n        } else if grade > -4.0\
    \ {\n            grades_string += \"B-\"\n        } else if grade > -4.7 {\n \
    \           grades_string += \"B-\"\n        } else if grade > -5.3 {\n      \
    \      grades_string += \"B-\"\n        } else if grade > -5.0 {\n           \
    \ grades_string += \"B-\"\n        } else if grade > -5.7 {\n            grades_string\
    \ += \"B-\"\n        } else if grade > -6.3 {\n            grades_string += \"\
    B-\"\n        } else if grade > -6.0 {\n            grades_string += \"B-\"\n\
    \        } else if grade > -6.7 {\n            grades_string += \"B-\"\n     \
    \   } else if grade > -7.3 {\n            grades_string += \"B-\"\n        } else\
    \ if grade > -7.0 {\n            grades_string += \"B-\"\n        } else if grade\
    \ > -7.7 {\n            grades_string += \"B-\"\n        } else if grade > -8.3\
    \ {\n            grades_string += \"B-\"\n        } else if grade > -8.0 {\n \
    \           grades_string += \"B-\"\n        } else if grade > -8.7 {\n      \
    \      grades_string += \"B-\"\n        } else if grade > -9.3 {\n           \
    \ grades_string += \"B-\"\n        } else if grade > -9.0 {\n            \n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp31s72pot.swift:104:66: error: expected '}' at end of brace statement\n\
    assert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"])\n      \
    \                                                           ^\n/tmp/tmp31s72pot.swift:25:25:\
    \ note: to match this opening '{'\n    for grade in grades {\n               \
    \         ^\n/tmp/tmp31s72pot.swift:104:66: error: expected '}' at end of brace\
    \ statement\nassert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"\
    ])\n                                                                 ^\n/tmp/tmp31s72pot.swift:23:59:\
    \ note: to match this opening '{'\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n                                                          ^\n\
    /tmp/tmp31s72pot.swift:87:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014655
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades = [String]()\n    var totalGrade = grades.reduce(0,\
    \ +)\n    var gpa = totalGrade / grades.count\n    var letterGrade = \"\"\n  \
    \  if gpa >= 4.0 {\n        letterGrade = \"A+\"\n    }\n    if gpa > 3.7 {\n\
    \        letterGrade = \"A\"\n    }\n    if gpa > 3.3 {\n        letterGrade =\
    \ \"A-\"\n    }\n    if gpa > 3.0 {\n        letterGrade = \"B+\"\n    }\n   \
    \ if gpa > 2.7 {\n        letterGrade = \"B\"\n    }\n    if gpa > 2.3 {\n   \
    \     letterGrade = \"B-\"\n    }\n    if gpa > 2.0 {\n        letterGrade = \"\
    C+\"\n    }\n    if gpa > 1.7 {\n        letterGrade = \"C\"\n    }\n    if gpa\
    \ > 1.3 {\n        letterGrade = \"C-\"\n    }\n    if gpa > 1.0 {\n        letterGrade\
    \ = \"D+\"\n    }\n    if gpa > 0.7 {\n        letterGrade = \"D\"\n    }\n  \
    \  if gpa > 0.0 {\n        letterGrade = \"D-\"\n    }\n    if gpa > 0.0 {\n \
    \       letterGrade = \"E\"\n    }\n    letterGrades.append(letterGrade)\n   \
    \ return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp6em42ld0.swift:26:26: error: binary operator '/' cannot be applied\
    \ to operands of type 'Double' and 'Int'\n    var gpa = totalGrade / grades.count\n\
    \              ~~~~~~~~~~ ^ ~~~~~~~~~~~~\n/tmp/tmp6em42ld0.swift:26:26: note:\
    \ overloads for '/' exist with these partially matching parameter lists: (Double,\
    \ Double), (Int, Int)\n    var gpa = totalGrade / grades.count\n             \
    \            ^\n"
  stdout: ''
  timestamp: 1660014655
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var grades_letter = [String]()\n    var gpa = grades[0]\n\
    \    var gpa_letter = String()\n    var gpa_letter_count = String()\n    var gpa_letter_count_max\
    \ = String()\n    var gpa_letter_count_min = String()\n    var gpa_letter_count_sum\
    \ = String()\n    var gpa_letter_count_average = String()\n    var gpa_letter_count_median\
    \ = String()\n    var gpa_letter_count_mode = String()\n    var gpa_letter_count_std\
    \ = String()\n    var gpa_letter_count_variance = String()\n    var gpa_letter_count_sum\
    \ = String()\n    var gpa_letter_count_min = String()\n    var gpa_letter_count_max\
    \ = String()\n    var gpa_letter_count_average = String()\n    var gpa_letter_count_median\
    \ = String()\n    var gpa_letter_count_mode = String()\n    var gpa_letter_count_std\
    \ = String()\n    var gpa_letter_count_variance = String()\n    var gpa_letter_count_sum\
    \ = String()\n    var gpa_letter_count_min = String()\n    var gpa_letter_count_max\
    \ = String()\n    var gpa_letter_count_average = String()\n    var gpa_letter_count_median\
    \ = String()\n    var gpa_letter_count_mode = String()\n    var gpa_letter_count_std\
    \ = String()\n    var gpa_letter_count_variance = String()\n    var gpa_letter_count_sum\
    \ = String()\n    var gpa_letter_count_min = String()\n    var gpa_letter_count_max\
    \ = String()\n    var gpa_letter_count_average = String()\n    var gpa_letter_count_median\
    \ = String()\n    var gpa_letter_count_mode = String()\n    var gpa_letter_count_std\
    \ = String()\n    var gpa_letter_count_variance = String()\n    var gpa_letter_count_sum\
    \ = String()\n    var gpa_letter_count_min = String()\n    var gpa_letter_count_max\
    \ = String()\n    var gpa_letter_count_average = String()\n    var gpa_letter_count_median\
    \ = String()\n    var gpa_letter_count_mode = String()\n    var gpa_letter_count_std\
    \ = String()\n    var gpa_letter_count_variance = String()\n    var gpa_letter_count_sum\
    \ = String()\n    var gpa_letter_count_min = String()\n    var gpa_letter_count_max\
    \ = String()\n    var gpa_letter_count_average = String()\n    var gpa_letter_count_median\
    \ = String()\n    var gpa_letter_count_mode = String()\n    var gpa_letter_count_std\
    \ = String()\n    var gpa_letter_count_variance = String()\n    var gpa_letter_count_sum\
    \ = String()\n    var gpa_letter_count_min = String()\n    var gpa_letter_count_max\
    \ = String()\n    var gpa_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpd3uzm4vx.swift:36:9: error: invalid redeclaration of 'gpa_letter_count_sum'\n\
    \    var gpa_letter_count_sum = String()\n        ^\n/tmp/tmpd3uzm4vx.swift:30:9:\
    \ note: 'gpa_letter_count_sum' previously declared here\n    var gpa_letter_count_sum\
    \ = String()\n        ^\n/tmp/tmpd3uzm4vx.swift:37:9: error: invalid redeclaration\
    \ of 'gpa_letter_count_min'\n    var gpa_letter_count_min = String()\n       \
    \ ^\n/tmp/tmpd3uzm4vx.swift:29:9: note: 'gpa_letter_count_min' previously declared\
    \ here\n    var gpa_letter_count_min = String()\n        ^\n/tmp/tmpd3uzm4vx.swift:38:9:\
    \ error: invalid redeclaration of 'gpa_letter_count_max'\n    var gpa_letter_count_max\
    \ = String()\n        ^\n/tmp/tmpd3uzm4vx.swift:28:9: note: 'gpa_letter_count_max'\
    \ previously declared here\n    var gpa_letter_count_max = String()\n        ^\n\
    /tmp/tmpd3uzm4vx.swift:39:9: error: invalid redeclaration of 'gpa_letter_count_average'\n\
    \    var gpa_letter_count_average = String()\n        ^\n/tmp/tmpd3uzm4vx.swift:31:9:\
    \ note: 'gpa_letter_count_average' previously declared here\n    var gpa_letter_count_average\
    \ = String()\n        ^\n/tmp/tmpd3uzm4vx.swift:40:9: error: invalid redeclaration\
    \ of 'gpa_letter_count_median'\n    var gpa_letter_count_median = String()\n \
    \       ^\n/tmp/tmpd3uzm4vx.swift:32:9: note: 'gpa_letter_count_median' previously\
    \ declared here\n    var gpa_letter_count_median = String()\n        ^\n/tmp/tmpd3uzm4vx.swift:41:9:\
    \ error: invalid redeclaration of 'gpa_letter_count_mode'\n    var gpa_letter_count_mode\
    \ = String()\n        ^\n/tmp/tmpd3uzm4vx.swift:33:9: note: 'gpa_letter_count_mode'\
    \ previously declared here\n    var gpa_letter_count_mode = String()\n       \
    \ ^\n/tmp/tmpd3uzm4vx.swift:42:9: error: invalid redeclaration of 'gpa_letter_count_std'\n\
    \    var gpa_letter_count_std = String()\n        ^\n/tmp/tmpd3uzm4vx.swift:34:9:\
    \ note: 'gpa_letter_count_std' previously declared here\n    var gpa_letter_count_std\
    \ = String()\n        ^\n/tmp/tmpd3uzm4vx.swift:43:9: error: invalid redeclaration\
    \ of 'gpa_letter_count_variance'\n    var gpa_letter_count_variance = String()\n\
    \        ^\n/tm"
  stdout: ''
  timestamp: 1660014655
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades[0]\n\
    \    var gpaIndex = 0\n    var gpaIndexMax = grades.count - 1\n    while gpaIndex\
    \ < gpaIndexMax {\n        if gpa >= grades[gpaIndex] && gpa < grades[gpaIndex\
    \ + 1] {\n            letterGrades.append(String(format: \"%@\", grades[gpaIndex]))\n\
    \            gpaIndex++\n        } else {\n            if gpa < grades[gpaIndex]\
    \ {\n                letterGrades.append(String(format: \"%@\", grades[gpaIndex]))\n\
    \                gpaIndex++\n            } else {\n                letterGrades.append(String(format:\
    \ \"%@\", grades[gpaIndex + 1]))\n                gpaIndex++\n            }\n\
    \        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpcflc8qno.swift:30:33: error: no exact matches in call to initializer\
    \ \n            letterGrades.append(String(format: \"%@\", grades[gpaIndex]))\n\
    \                                ^\nSwift.String:4:23: note: candidate '(String)\
    \ -> String' requires 1 argument, but 2 were provided\n    @inlinable public init<T>(_\
    \ value: T) where T : LosslessStringConvertible\n                      ^\n/tmp/tmpcflc8qno.swift:30:33:\
    \ note: candidate has partially matching parameter list (repeating: String, count:\
    \ Int)\n            letterGrades.append(String(format: \"%@\", grades[gpaIndex]))\n\
    \                                ^\nSwift.String:3:12: note: candidate '(String)\
    \ -> String' requires 1 argument, but 2 were provided\n    public init<S>(_ other:\
    \ S) where S : LosslessStringConvertible, S : Sequence, S.Element == Character\n\
    \           ^\nSwift.String:4:12: note: candidate '(String) -> String' requires\
    \ 1 argument, but 2 were provided\n    public init<S>(_ characters: S) where S\
    \ : Sequence, S.Element == Character\n           ^\nSwift.RangeReplaceableCollection:3:23:\
    \ note: candidate '(String) -> String' requires 1 argument, but 2 were provided\n\
    \    @inlinable public init<S>(_ elements: S) where S : Sequence, Self.Element\
    \ == S.Element\n                      ^\n/tmp/tmpcflc8qno.swift:31:21: error:\
    \ cannot find operator '++' in scope; did you mean '+= 1'?\n            gpaIndex++\n\
    \                    ^~\n/tmp/tmpcflc8qno.swift:34:37: error: no exact matches\
    \ in call to initializer \n                letterGrades.append(String(format:\
    \ \"%@\", grades[gpaIndex]))\n                                    ^\nSwift.String:4:23:\
    \ note: candidate '(String) -> String' requires 1 argument, but 2 were provided\n\
    \    @inlinable public init<T>(_ value: T) where T : LosslessStringConvertible\n\
    \                      ^\n/tmp/tmpcflc8qno.swift:34:37: note: candidate has partially\
    \ matching parameter list (repeating: String, count: Int)\n                letterGrades.append(String(format:\
    \ \"%@\", grades[gpaIndex]))\n                                    ^\nSwift.String:3:12:\
    \ note: candidate '(String) -"
  stdout: ''
  timestamp: 1660014656
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var gpaArray = [Double]()\n    gpaArray.append(gpa)\n    gradesArray.append(gpaArray)\n\
    \    \n    for i in 0..<grades.count {\n        var gpa = grades[i]\n        var\
    \ gpaArray = [Double]()\n        gpaArray.append(gpa)\n        gradesArray.append(gpaArray)\n\
    \    }\n    \n    for i in 0..<grades.count {\n        var gpa = grades[i]\n \
    \       var gpaArray = [Double]()\n        gpaArray.append(gpa)\n        gradesArray.append(gpaArray)\n\
    \    }\n    \n    for i in 0..<grades.count {\n        var gpa = grades[i]\n \
    \       var gpaArray = [Double]()\n        gpaArray.append(gpa)\n        gradesArray.append(gpaArray)\n\
    \    }\n    \n    for i in 0..<grades.count {\n        var gpa = grades[i]\n \
    \       var gpaArray = [Double]()\n        gpaArray.append(gpa)\n        gradesArray.append(gpaArray)\n\
    \    }\n    \n    for i in 0..<grades.count {\n        var gpa = grades[i]\n \
    \       var gpaArray = [Double]()\n        gpaArray.append(gpa)\n        gradesArray.append(gpaArray)\n\
    \    }\n    \n    for i in 0..<grades.count {\n        var gpa = grades[i]\n \
    \       var gpaArray = [Double]()\n        gpaArray.append(gpa)\n        gradesArray.append(gpaArray)\n\
    \    }\n    \n    for i in 0..<grades.count {\n        var gpa = grades[i]\n \
    \       var gpaArray = [Double]()\n        gpaArray.append(gpa)\n        gradesArray.append(gpaArray)\n\
    \    }\n    \n    for i in 0..<grades.count {\n        var gpa = grades[i]\n \
    \       var gpaArray = [Double]()\n        gpaArray.append(gpa)\n        gradesArray.append(gpaArray)\n\
    \    }\n    \n    for i in 0..<grades.count {\n        var gpa = grades[i]\n \
    \       var gpaArray = [Double]()\n        gpaArray.append(gpa)\n        gradesArray.append(gpaArray)\n\
    \    }\n    \n    for i in 0..<grades.count {\n        var gpa = grades[i]\n \
    \       var gpaArray = [Double]()\n        gpaArray.append(gpa)\n        gradesArray.append(gpaArray)\n\
    \    }\n    \n    for i in 0..\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpodcoagmf.swift:100:17: error: expected '{' to start the body of\
    \ for-each loop\n    for i in 0..\n                ^\n/tmp/tmpodcoagmf.swift:25:28:\
    \ error: extraneous argument label 'combine:' in call\n    var gpa = grades.reduce(0,\
    \ combine: +)\n                           ^   ~~~~~~~~~\n                    \
    \           \n/tmp/tmpodcoagmf.swift:28:17: error: no exact matches in call to\
    \ instance method 'append'\n    gradesArray.append(gpaArray)\n               \
    \ ^\nSwift.Array:6:37: note: candidate expects value of type 'String' for parameter\
    \ #1 (got '[Double]')\n    @inlinable public mutating func append(_ newElement:\
    \ __owned Element)\n                                    ^\nSwift.RangeReplaceableCollection:4:37:\
    \ note: candidate expects value of type 'String' for parameter #1 (got '[Double]')\n\
    \    @inlinable public mutating func append(_ newElement: __owned Self.Element)\n\
    \                                    ^\n/tmp/tmpodcoagmf.swift:28:17: note: found\
    \ candidate with type '(__owned [Double]) -> ()'\n    gradesArray.append(gpaArray)\n\
    \                ^\n/tmp/tmpodcoagmf.swift:34:21: error: no exact matches in call\
    \ to instance method 'append'\n        gradesArray.append(gpaArray)\n        \
    \            ^\nSwift.Array:6:37: note: candidate expects value of type 'String'\
    \ for parameter #1 (got '[Double]')\n    @inlinable public mutating func append(_\
    \ newElement: __owned Element)\n                                    ^\nSwift.RangeReplaceableCollection:4:37:\
    \ note: candidate expects value of type 'String' for parameter #1 (got '[Double]')\n\
    \    @inlinable public mutating func append(_ newElement: __owned Self.Element)\n\
    \                                    ^\n/tmp/tmpodcoagmf.swift:34:21: note: found\
    \ candidate with type '(__owned [Double]) -> ()'\n        gradesArray.append(gpaArray)\n\
    \                    ^\n/tmp/tmpodcoagmf.swift:41:21: error: no exact matches\
    \ in call to instance method 'append'\n        gradesArray.append(gpaArray)\n\
    \                    ^\nSwift.Array:6:37: note: candidate expects value of type\
    \ 'String' for parameter #1 (got '[Double]')\n    @in"
  stdout: ''
  timestamp: 1660014655
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var letterGrade = \"\"\n    if gpa < 3.0 {\n        letterGrade\
    \ = \"D-\"\n    } else if gpa < 3.3 {\n        letterGrade = \"C-\"\n    } else\
    \ if gpa < 3.7 {\n        letterGrade = \"B-\"\n    } else if gpa < 4.0 {\n  \
    \      letterGrade = \"B-\"\n    } else if gpa < 4.3 {\n        letterGrade =\
    \ \"B-\"\n    } else if gpa < 4.7 {\n        letterGrade = \"B-\"\n    } else\
    \ if gpa < 5.0 {\n        letterGrade = \"B-\"\n    } else if gpa < 5.3 {\n  \
    \      letterGrade = \"B-\"\n    } else if gpa < 5.7 {\n        letterGrade =\
    \ \"B-\"\n    } else if gpa < 6.0 {\n        letterGrade = \"B-\"\n    } else\
    \ if gpa < 6.3 {\n        letterGrade = \"B-\"\n    } else if gpa < 6.7 {\n  \
    \      letterGrade = \"B-\"\n    } else if gpa < 7.0 {\n        letterGrade =\
    \ \"B-\"\n    } else if gpa < 7.3 {\n        letterGrade = \"B-\"\n    } else\
    \ if gpa < 7.7 {\n        letterGrade = \"B-\"\n    } else if gpa < 8.0 {\n  \
    \      letterGrade = \"B-\"\n    } else if gpa < 8.3 {\n        letterGrade =\
    \ \"B-\"\n    } else if gpa < 8.7 {\n        letterGrade = \"B-\"\n    } else\
    \ if gpa < 9.0 {\n        letterGrade = \"B-\"\n    } else if gpa < 9.3 {\n  \
    \      letterGrade = \"B-\"\n    } else if gpa < 9.7 {\n        letterGrade =\
    \ \"B-\"\n    } else if gpa < 10.0 {\n        letterGrade = \"B-\"\n    } else\
    \ if gpa < 10.3 {\n        letterGrade = \"B-\"\n    } else if gpa < 10.7 {\n\
    \        letterGrade = \"B-\"\n    } else if gpa < 11.0 {\n        letterGrade\
    \ = \"B-\"\n    } else if gpa < 11.3 {\n        letterGrade = \"B-\"\n    } else\
    \ if gpa < 11.7 {\n        letterGrade = \"B-\"\n    } else if gpa < 12.0 {\n\
    \        letterGrade = \"B-\"\n    } else \n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgp7nh3wj.swift:83:11: error: expected '{' or 'if' after 'else'\n\
    \    } else \n          ^\n/tmp/tmpgp7nh3wj.swift:25:28: error: extraneous argument\
    \ label 'combine:' in call\n    var gpa = grades.reduce(0, combine: +)\n     \
    \                      ^   ~~~~~~~~~\n                               \n"
  stdout: ''
  timestamp: 1660014655
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var grades_letter = [String]()\n    \n    for grade in grades\
    \ {\n        if grade < 3.0 {\n            grades_letter.append(\"A+\")\n    \
    \    } else if grade < 3.7 {\n            grades_letter.append(\"A\")\n      \
    \  } else if grade < 4.0 {\n            grades_letter.append(\"B+\")\n       \
    \ } else if grade < 4.7 {\n            grades_letter.append(\"B\")\n        }\
    \ else if grade < 5.0 {\n            grades_letter.append(\"B-\")\n        } else\
    \ if grade < 5.7 {\n            grades_letter.append(\"B\")\n        } else if\
    \ grade < 6.0 {\n            grades_letter.append(\"C+\")\n        } else if grade\
    \ < 6.7 {\n            grades_letter.append(\"C\")\n        } else if grade <\
    \ 7.0 {\n            grades_letter.append(\"C-\")\n        } else if grade < 7.7\
    \ {\n            grades_letter.append(\"C\")\n        } else if grade < 8.0 {\n\
    \            grades_letter.append(\"D+\")\n        } else if grade < 8.7 {\n \
    \           grades_letter.append(\"D\")\n        } else if grade < 9.0 {\n   \
    \         grades_letter.append(\"D-\")\n        } else if grade < 9.7 {\n    \
    \        grades_letter.append(\"D\")\n        } else if grade < 10.0 {\n     \
    \       grades_letter.append(\"E\")\n        } else {\n            grades_letter.append(\"\
    F\")\n        }\n    }\n    return grades_letter\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpj4wdl1rl/tmpj4wdl1rl.swift:77: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1289513c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b128920ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b128920a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b12892097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj4wdl1rl                        0x000056415cc197f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b12896ff460 __libc_start_main +
    245

    6    tmpj4wdl1rl                        0x000056415cc19319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014656
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = grades\n    var letterGrades = [String]()\n\
    \    var totalGrade = grades.reduce(0, +)\n    var totalGradeInt = Int(totalGrade)\n\
    \    var totalGradeFraction = totalGrade - totalGradeInt\n    var totalGradeFractionInt\
    \ = Int(totalGradeFraction)\n    var totalGradeFractionFraction = totalGradeFraction\
    \ - totalGradeFractionInt\n    var totalGradeFractionFractionInt = Int(totalGradeFractionFraction)\n\
    \    var totalGradeFractionFractionFraction = totalGradeFractionFraction - totalGradeFractionFractionInt\n\
    \    var totalGradeFractionFractionFractionInt = Int(totalGradeFractionFractionFraction)\n\
    \    var totalGradeFractionFractionFractionFraction = totalGradeFractionFractionFraction\
    \ - totalGradeFractionFractionFractionInt\n    var totalGradeFractionFractionFractionFractionInt\
    \ = Int(totalGradeFractionFractionFractionFraction)\n    var totalGradeFractionFractionFractionFractionFraction\
    \ = totalGradeFractionFractionFractionFraction - totalGradeFractionFractionFractionFractionInt\n\
    \    var totalGradeFractionFractionFractionFractionFractionInt = Int(totalGradeFractionFractionFractionFractionFraction)\n\
    \    var totalGradeFractionFractionFractionFractionFractionFraction = totalGradeFractionFractionFractionFractionFractionFraction\
    \ - totalGradeFractionFractionFractionFractionFractionFractionInt\n    var totalGradeFractionFractionFractionFractionFractionFractionFractionInt\
    \ = Int(totalGradeFractionFractionFractionFractionFractionFractionFractionFraction)\n\
    \    var totalGradeFractionFractionFractionFractionFractionFractionFractionFractionInt\
    \ = Int(totalGradeFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction)\n\
    \    var totalGradeFractionFractionFractionFractionFractionFractionFractionFractionFractionInt\
    \ = Int(totalGradeFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction)\n\
    \    var totalGradeFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionInt\
    \ = Int(totalGradeFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction)\n\
    \    var totalGradeFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionInt\
    \ = Int(totalGradeFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction)\n\
    \    var totalGradeFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionInt\
    \ = Int(totalGradeFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction)\n\
    \    var totalGradeFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionInt\
    \ = Int(totalGradeFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpnxxenyzd.swift:46:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmpnxxenyzd.swift:45:148: note: to match this opening '('\n    var totalGradeFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionInt\
    \ = Int(totalGradeFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction\n\
    \                                                                            \
    \                                                                       ^\n/tmp/tmpnxxenyzd.swift:28:41:\
    \ error: binary operator '-' cannot be applied to operands of type 'Double' and\
    \ 'Int'\n    var totalGradeFraction = totalGrade - totalGradeInt\n           \
    \                  ~~~~~~~~~~ ^ ~~~~~~~~~~~~~\n/tmp/tmpnxxenyzd.swift:28:41: note:\
    \ overloads for '-' exist with these partially matching parameter lists: (Double,\
    \ Double), (Int, Int)\n    var totalGradeFraction = totalGrade - totalGradeInt\n\
    \                                        ^\n/tmp/tmpnxxenyzd.swift:38:70: error:\
    \ use of local variable 'totalGradeFractionFractionFractionFractionFractionFraction'\
    \ before its declaration\n    var totalGradeFractionFractionFractionFractionFractionFraction\
    \ = totalGradeFractionFractionFractionFractionFractionFraction - totalGradeFractionFractionFractionFractionFractionFractionInt\n\
    \                                                                     ^\n/tmp/tmpnxxenyzd.swift:38:9:\
    \ note: 'totalGradeFractionFractionFractionFractionFractionFraction' declared\
    \ here\n    var totalGradeFractionFractionFractionFractionFractionFraction = totalGradeFractionFractionFractionFractionFractionFraction\
    \ - totalGradeFractionFractionFractionFractionFractionFractionInt\n        ^\n\
    /tmp/tmpnxxenyzd.swift:38:131: error: cannot find 'totalGradeFractionFractionFractionFractionFractionFractionInt'\
    \ in scope\n    var totalGradeFractionFractionFractionFractionFractionFraction\
    \ = totalGradeFractionFractionFractionFractionFractionFraction - totalGradeFractionFractionFractionFractionFractionFractionInt\n\
    \                "
  stdout: ''
  timestamp: 1660014655
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var grades_letters = [String]()\n    for grade in grades\
    \ {\n        let letter = grade_letters(grade)\n        grades_letters.append(letter)\n\
    \    }\n    return grades_letters\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpmlikhkx5.swift:26:22: error: cannot find 'grade_letters' in scope\n\
    \        let letter = grade_letters(grade)\n                     ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014655
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    var gradesArrayIndex =\
    \ 0\n    var gradesArrayCount = 0\n    var gradesArrayCountMax = grades.count\n\
    \    var gradesArrayCountMin = grades.count\n    \n    while gradesArrayIndex\
    \ < gradesArrayCountMax {\n        gradesArray[gradesArrayIndex] = \"\"\n    \
    \    gradesArray[gradesArrayIndex] += \"A+\"\n        if grades[gradesArrayIndex]\
    \ > 3.7 {\n            gradesArray[gradesArrayIndex] += \"A\"\n        } else\
    \ if grades[gradesArrayIndex] > 3.3 {\n            gradesArray[gradesArrayIndex]\
    \ += \"A-\"\n        } else if grades[gradesArrayIndex] > 3.0 {\n            gradesArray[gradesArrayIndex]\
    \ += \"B+\"\n        } else if grades[gradesArrayIndex] > 2.7 {\n            gradesArray[gradesArrayIndex]\
    \ += \"B\"\n        } else if grades[gradesArrayIndex] > 2.3 {\n            gradesArray[gradesArrayIndex]\
    \ += \"B-\"\n        } else if grades[gradesArrayIndex] > 2.0 {\n            gradesArray[gradesArrayIndex]\
    \ += \"C+\"\n        } else if grades[gradesArrayIndex] > 1.7 {\n            gradesArray[gradesArrayIndex]\
    \ += \"C\"\n        } else if grades[gradesArrayIndex] > 1.3 {\n            gradesArray[gradesArrayIndex]\
    \ += \"C-\"\n        } else if grades[gradesArrayIndex] > 1.0 {\n            gradesArray[gradesArrayIndex]\
    \ += \"D+\"\n        } else if grades[gradesArrayIndex] > 0.7 {\n            gradesArray[gradesArrayIndex]\
    \ += \"D\"\n        } else if grades[gradesArrayIndex] > 0.0 {\n            gradesArray[gradesArrayIndex]\
    \ += \"D-\"\n        } else {\n            gradesArray[gradesArrayIndex] += \"\
    E\"\n        }\n        gradesArrayIndex += 1\n    }\n    return gradesArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b689523ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6894f31561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6894f31286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6894f3113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6894f30bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b6894d309a0 specialized Array.subscript.modify
    + 0

    6    tmpjbc3ke8s                        0x000055fb91eda099 <unavailable> + 8345

    7    tmpjbc3ke8s                        0x000055fb91ed95ed <unavailable> + 5613

    8    libc.so.6                          0x00002b6895426460 __libc_start_main +
    245

    9    tmpjbc3ke8s                        0x000055fb91ed92a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660014656
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var grades_string = \"\"\n    for grade in grades {\n   \
    \     switch grade {\n        case 0...0.1:\n            grades_string += \"E\"\
    \n        case 0.1:\n            grades_string += \"D-\"\n        case 0.2:\n\
    \            grades_string += \"C-\"\n        case 0.3:\n            grades_string\
    \ += \"B-\"\n        case 0.4:\n            grades_string += \"B-\"\n        case\
    \ 0.5:\n            grades_string += \"B+\"\n        case 0.6:\n            grades_string\
    \ += \"B+\"\n        case 0.7:\n            grades_string += \"B+\"\n        case\
    \ 0.8:\n            grades_string += \"B+\"\n        case 0.9:\n            grades_string\
    \ += \"B+\"\n        case 1.0:\n            grades_string += \"B+\"\n        case\
    \ 1.1:\n            grades_string += \"B+\"\n        case 1.2:\n            grades_string\
    \ += \"B+\"\n        case 1.3:\n            grades_string += \"B+\"\n        case\
    \ 1.4:\n            grades_string += \"B+\"\n        case 1.5:\n            grades_string\
    \ += \"B+\"\n        case 1.6:\n            grades_string += \"B+\"\n        case\
    \ 1.7:\n            grades_string += \"B+\"\n        case 1.8:\n            grades_string\
    \ += \"B+\"\n        case 1.9:\n            grades_string += \"B+\"\n        case\
    \ 2.0:\n            grades_string += \"B+\"\n        case 2.1:\n            grades_string\
    \ += \"B+\"\n        case 2.2:\n            grades_string += \"B+\"\n        case\
    \ 2.3:\n            grades_string += \"B+\"\n        case 2.4:\n            grades_string\
    \ += \"B+\"\n        case 2.5:\n            grades_string += \"B+\"\n        case\
    \ 2.6:\n            grades_string += \"B+\"\n        case 2.7:\n            grades_string\
    \ += \"B+\"\n        case 2.8:\n            grades_string += \"B+\"\n        case\
    \ 2.9:\n            grades_string += \"B+\"\n        case 3.0:\n            grades_string\
    \ += \"B+\"\n        case 3.1:\n            grades_string += \"B+\"\n        case\
    \ 3.2:\n            grades_string += \"B+\"\n        case 3.3:\n            grades_string\
    \ += \"B+\"\n        case 3.4:\n            grades_string += \"B+\"\n        case\
    \ 3.5:\n            grades_string += \"B+\"\n        case 3.6:\n            grades_string\
    \ += \"B+\"\n        case 3.7:\n            grades_string += \"B+\"\n        case\
    \ 3.8:\n            grades_string += \"B+\"\n        case 3.9:\n            grades_string\
    \ += \"B+\"\n        case 4.0:\n            grades_string += \"B+\"\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpup9qvfko.swift:129:66: error: expected '}' at end of brace statement\n\
    assert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"])\n      \
    \                                                           ^\n/tmp/tmpup9qvfko.swift:25:25:\
    \ note: to match this opening '{'\n    for grade in grades {\n               \
    \         ^\n/tmp/tmpup9qvfko.swift:129:66: error: expected '}' at end of brace\
    \ statement\nassert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"\
    ])\n                                                                 ^\n/tmp/tmpup9qvfko.swift:23:59:\
    \ note: to match this opening '{'\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n                                                          ^\n\
    /tmp/tmpup9qvfko.swift:26:9: error: switch must be exhaustive\n        switch\
    \ grade {\n        ^\n/tmp/tmpup9qvfko.swift:26:9: note: do you want to add a\
    \ default clause?\n        switch grade {\n        ^\n/tmp/tmpup9qvfko.swift:112:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014655
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var grades_string = \"\"\n    for grade in grades {\n   \
    \     if grade > 3.0 {\n            grades_string += \"B+\"\n        } else if\
    \ grade > 2.7 {\n            grades_string += \"B\"\n        } else if grade >\
    \ 2.3 {\n            grades_string += \"B-\"\n        } else if grade > 1.3 {\n\
    \            grades_string += \"C+\"\n        } else if grade > 1.0 {\n      \
    \      grades_string += \"C\"\n        } else if grade > 0.7 {\n            grades_string\
    \ += \"C-\"\n        } else if grade > 0.3 {\n            grades_string += \"\
    D+\"\n        } else if grade > 0.0 {\n            grades_string += \"D\"\n  \
    \      } else if grade > -0.3 {\n            grades_string += \"D-\"\n       \
    \ } else if grade > -0.7 {\n            grades_string += \"E\"\n        } else\
    \ {\n            grades_string += \"E\"\n        }\n    }\n    return grades_string\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfoxrszwz.swift:50:12: error: cannot convert return expression of\
    \ type 'String' to return type '[String]'\n    return grades_string\n        \
    \   ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014655
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = grades\n    gradesArray = gradesArray.reversed()\n\
    \    var gradesArrayLength = gradesArray.count\n    var gradesArrayIndex = 0\n\
    \    var gradesArrayIndexMax = gradesArrayLength - 1\n    var gradesArrayIndexMin\
    \ = 0\n    var gradesArraySum = 0.0\n    var gradesArraySumMax = 0.0\n    var\
    \ gradesArraySumMin = 0.0\n    var gradesArraySumMaxIndex = gradesArrayLength\
    \ - 1\n    var gradesArraySumMinIndex = gradesArrayLength - 1\n    var gradesArraySumMaxIndex\
    \ = 0\n    var gradesArraySumMinIndex = 0\n    var gradesArraySumMaxIndexMax =\
    \ gradesArrayLength - 1\n    var gradesArraySumMinIndexMax = gradesArrayLength\
    \ - 1\n    var gradesArraySumMaxIndexMin = gradesArrayLength - 1\n    var gradesArraySumMinIndexMin\
    \ = gradesArrayLength - 1\n    var gradesArraySumMaxIndexMax = gradesArrayLength\
    \ - 1\n    var gradesArraySumMinIndexMax = gradesArrayLength - 1\n    var gradesArraySumMaxIndexMin\
    \ = gradesArrayLength - 1\n    var gradesArraySumMinIndexMin = gradesArrayLength\
    \ - 1\n    var gradesArraySumMaxIndexMax = gradesArrayLength - 1\n    var gradesArraySumMinIndexMax\
    \ = gradesArrayLength - 1\n    var gradesArraySumMaxIndexMin = gradesArrayLength\
    \ - 1\n    var gradesArraySumMinIndexMin = gradesArrayLength - 1\n    var gradesArraySumMaxIndexMax\
    \ = gradesArrayLength - 1\n    var gradesArraySumMinIndexMax = gradesArrayLength\
    \ - 1\n    var gradesArraySumMinIndexMin = gradesArrayLength - 1\n    var gradesArraySumMaxIndexMax\
    \ = gradesArrayLength - 1\n    var gradesArraySumMinIndexMax = gradesArrayLength\
    \ - 1\n    var gradesArraySumMinIndexMin = gradesArrayLength - 1\n    var gradesArraySumMaxIndexMax\
    \ = gradesArrayLength - 1\n    var gradesArraySumMinIndexMax = gradesArrayLength\
    \ - 1\n    var gradesArraySumMinIndexMin = gradesArrayLength - 1\n    var gradesArraySumMaxIndexMax\
    \ = gradesArrayLength - 1\n    var gradesArraySumMinIndexMax = gradesArrayLength\
    \ - 1\n    var gradesArraySumMinIndexMin = gradesArrayLength - 1\n    var gradesArraySumMaxIndexMax\
    \ = gradesArrayLength - 1\n    var gradesArraySumMinIndexMax = gradesArrayLength\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp833rpel8.swift:35:9: error: invalid redeclaration of 'gradesArraySumMaxIndex'\n\
    \    var gradesArraySumMaxIndex = 0\n        ^\n/tmp/tmp833rpel8.swift:33:9: note:\
    \ 'gradesArraySumMaxIndex' previously declared here\n    var gradesArraySumMaxIndex\
    \ = gradesArrayLength - 1\n        ^\n/tmp/tmp833rpel8.swift:36:9: error: invalid\
    \ redeclaration of 'gradesArraySumMinIndex'\n    var gradesArraySumMinIndex =\
    \ 0\n        ^\n/tmp/tmp833rpel8.swift:34:9: note: 'gradesArraySumMinIndex' previously\
    \ declared here\n    var gradesArraySumMinIndex = gradesArrayLength - 1\n    \
    \    ^\n/tmp/tmp833rpel8.swift:41:9: error: invalid redeclaration of 'gradesArraySumMaxIndexMax'\n\
    \    var gradesArraySumMaxIndexMax = gradesArrayLength - 1\n        ^\n/tmp/tmp833rpel8.swift:37:9:\
    \ note: 'gradesArraySumMaxIndexMax' previously declared here\n    var gradesArraySumMaxIndexMax\
    \ = gradesArrayLength - 1\n        ^\n/tmp/tmp833rpel8.swift:42:9: error: invalid\
    \ redeclaration of 'gradesArraySumMinIndexMax'\n    var gradesArraySumMinIndexMax\
    \ = gradesArrayLength - 1\n        ^\n/tmp/tmp833rpel8.swift:38:9: note: 'gradesArraySumMinIndexMax'\
    \ previously declared here\n    var gradesArraySumMinIndexMax = gradesArrayLength\
    \ - 1\n        ^\n/tmp/tmp833rpel8.swift:43:9: error: invalid redeclaration of\
    \ 'gradesArraySumMaxIndexMin'\n    var gradesArraySumMaxIndexMin = gradesArrayLength\
    \ - 1\n        ^\n/tmp/tmp833rpel8.swift:39:9: note: 'gradesArraySumMaxIndexMin'\
    \ previously declared here\n    var gradesArraySumMaxIndexMin = gradesArrayLength\
    \ - 1\n        ^\n/tmp/tmp833rpel8.swift:44:9: error: invalid redeclaration of\
    \ 'gradesArraySumMinIndexMin'\n    var gradesArraySumMinIndexMin = gradesArrayLength\
    \ - 1\n        ^\n/tmp/tmp833rpel8.swift:40:9: note: 'gradesArraySumMinIndexMin'\
    \ previously declared here\n    var gradesArraySumMinIndexMin = gradesArrayLength\
    \ - 1\n        ^\n/tmp/tmp833rpel8.swift:45:9: error: invalid redeclaration of\
    \ 'gradesArraySumMaxIndexMax'\n    var gradesArraySumMaxIndexMax = gradesArrayLength\
    \ - 1\n        ^\n/tmp/tmp833rpel8.swift:37:9: note: 'gradesArraySumMaxIndexMax'\
    \ previously dec"
  stdout: ''
  timestamp: 1660014655
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var gpaSum = grades.reduce(0, combine: +)\n    var gpaSum2\
    \ = grades.reduce(0, combine: +)\n    var gpaSum3 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum4 = grades.reduce(0, combine: +)\n    var gpaSum5 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum6 = grades.reduce(0, combine: +)\n    var gpaSum7\
    \ = grades.reduce(0, combine: +)\n    var gpaSum8 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum9 = grades.reduce(0, combine: +)\n    var gpaSum10 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum11 = grades.reduce(0, combine: +)\n    var gpaSum12\
    \ = grades.reduce(0, combine: +)\n    var gpaSum13 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum14 = grades.reduce(0, combine: +)\n    var gpaSum15 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum16 = grades.reduce(0, combine: +)\n    var gpaSum17\
    \ = grades.reduce(0, combine: +)\n    var gpaSum18 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum19 = grades.reduce(0, combine: +)\n    var gpaSum20 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum21 = grades.reduce(0, combine: +)\n    var gpaSum22\
    \ = grades.reduce(0, combine: +)\n    var gpaSum23 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum24 = grades.reduce(0, combine: +)\n    var gpaSum25 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum26 = grades.reduce(0, combine: +)\n    var gpaSum27\
    \ = grades.reduce(0, combine: +)\n    var gpaSum28 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum29 = grades.reduce(0, combine: +)\n    var gpaSum30 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum31 = grades.reduce(0, combine: +)\n    var gpaSum32\
    \ = grades.reduce(0, combine: +)\n    var gpaSum33 = grades.reduce(0, combine:\
    \ +)\n    var gpaSum34 = grades.reduce(0, combine: +)\n    var gpaSum35 = grades.reduce(0,\
    \ combine: +)\n    var gpaSum36 = grades.reduce(0, combine: +)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpvxhipmzz.swift:25:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n/tmp/tmpvxhipmzz.swift:26:31:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaSum = grades.reduce(0,\
    \ combine: +)\n                              ^   ~~~~~~~~~\n                 \
    \                 \n/tmp/tmpvxhipmzz.swift:27:32: error: extraneous argument label\
    \ 'combine:' in call\n    var gpaSum2 = grades.reduce(0, combine: +)\n       \
    \                        ^   ~~~~~~~~~\n                                   \n\
    /tmp/tmpvxhipmzz.swift:28:32: error: extraneous argument label 'combine:' in call\n\
    \    var gpaSum3 = grades.reduce(0, combine: +)\n                            \
    \   ^   ~~~~~~~~~\n                                   \n/tmp/tmpvxhipmzz.swift:29:32:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaSum4 = grades.reduce(0,\
    \ combine: +)\n                               ^   ~~~~~~~~~\n                \
    \                   \n/tmp/tmpvxhipmzz.swift:30:32: error: extraneous argument\
    \ label 'combine:' in call\n    var gpaSum5 = grades.reduce(0, combine: +)\n \
    \                              ^   ~~~~~~~~~\n                               \
    \    \n/tmp/tmpvxhipmzz.swift:31:32: error: extraneous argument label 'combine:'\
    \ in call\n    var gpaSum6 = grades.reduce(0, combine: +)\n                  \
    \             ^   ~~~~~~~~~\n                                   \n/tmp/tmpvxhipmzz.swift:32:32:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaSum7 = grades.reduce(0,\
    \ combine: +)\n                               ^   ~~~~~~~~~\n                \
    \                   \n/tmp/tmpvxhipmzz.swift:33:32: error: extraneous argument\
    \ label 'combine:' in call\n    var gpaSum8 = grades.reduce(0, combine: +)\n \
    \                              ^   ~~~~~~~~~\n                               \
    \    \n/tmp/tmpvxhipmzz.swift:34:32: error: extraneous argument label 'combine:'\
    \ in call\n    var gpaSum9 = grades.reduce(0, combine: +)\n                  \
    \             ^   ~~~~~~~~~"
  stdout: ''
  timestamp: 1660014654
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    for grade in grades {\n\
    \        if grade < 3.0 {\n            gradesArray.append(\"A+\")\n        } else\
    \ if grade < 3.3 {\n            gradesArray.append(\"A\")\n        } else if grade\
    \ < 3.7 {\n            gradesArray.append(\"A-\")\n        } else if grade < 4.0\
    \ {\n            gradesArray.append(\"B+\")\n        } else if grade < 4.3 {\n\
    \            gradesArray.append(\"B\")\n        } else if grade < 4.7 {\n    \
    \        gradesArray.append(\"B-\")\n        } else if grade < 5.0 {\n       \
    \     gradesArray.append(\"C+\")\n        } else if grade < 5.3 {\n          \
    \  gradesArray.append(\"C\")\n        } else if grade < 5.7 {\n            gradesArray.append(\"\
    C-\")\n        } else if grade < 6.0 {\n            gradesArray.append(\"D+\"\
    )\n        } else if grade < 6.3 {\n            gradesArray.append(\"D\")\n  \
    \      } else if grade < 6.7 {\n            gradesArray.append(\"D-\")\n     \
    \   } else if grade < 7.0 {\n            gradesArray.append(\"E\")\n        }\
    \ else {\n            gradesArray.append(\"D-\")\n        }\n    }\n    return\
    \ gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp86iidc_i/tmp86iidc_i.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b88d58f1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b88d55e8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b88d55e8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b88d55e77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp86iidc_i                        0x0000560fb82027a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b88d5add460 __libc_start_main +
    245

    6    tmp86iidc_i                        0x0000560fb82022c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014656
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    var gradesArrayIndex\
    \ = 0\n    var gradesArrayIndexMax = grades.count - 1\n    \n    for grade in\
    \ grades {\n        if grade >= 3.0 {\n            gradesArray[gradesArrayIndex]\
    \ = \"A+\"\n            gradesArrayIndex += 1\n        } else if grade >= 2.7\
    \ {\n            gradesArray[gradesArrayIndex] = \"B+\"\n            gradesArrayIndex\
    \ += 1\n        } else if grade >= 2.3 {\n            gradesArray[gradesArrayIndex]\
    \ = \"B\"\n            gradesArrayIndex += 1\n        } else if grade >= 1.3 {\n\
    \            gradesArray[gradesArrayIndex] = \"B-\"\n            gradesArrayIndex\
    \ += 1\n        } else if grade >= 1.0 {\n            gradesArray[gradesArrayIndex]\
    \ = \"C+\"\n            gradesArrayIndex += 1\n        } else if grade >= 0.7\
    \ {\n            gradesArray[gradesArrayIndex] = \"C\"\n            gradesArrayIndex\
    \ += 1\n        } else if grade >= 0.3 {\n            gradesArray[gradesArrayIndex]\
    \ = \"C-\"\n            gradesArrayIndex += 1\n        } else if grade >= 0.0\
    \ {\n            gradesArray[gradesArrayIndex] = \"D+\"\n            gradesArrayIndex\
    \ += 1\n        } else if grade >= -0.3 {\n            gradesArray[gradesArrayIndex]\
    \ = \"D\"\n            gradesArrayIndex += 1\n        } else if grade >= -0.7\
    \ {\n            gradesArray[gradesArrayIndex] = \"D-\"\n            gradesArrayIndex\
    \ += 1\n        } else if grade >= -1.0 {\n            gradesArray[gradesArrayIndex]\
    \ = \"E\"\n            gradesArrayIndex += 1\n        } else {\n            gradesArray[gradesArrayIndex]\
    \ = \"F\"\n            gradesArrayIndex += 1\n        }\n    }\n    return gradesArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b539ef23c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b539ec1a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b539ec1a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b539ec1a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b539ec19bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b539ea199a0 specialized Array.subscript.modify
    + 0

    6    tmppkok1fiw                        0x000056461b7fb1d3 <unavailable> + 8659

    7    tmppkok1fiw                        0x000056461b7fa65d <unavailable> + 5725

    8    libc.so.6                          0x00002b539f10f460 __libc_start_main +
    245

    9    tmppkok1fiw                        0x000056461b7fa319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014656
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var grades_letters: [String] = []\n    var gpa: Double =\
    \ 0.0\n    for grade in grades {\n        gpa += grade\n        if gpa > 4.0 {\n\
    \            grades_letters.append(\"A+\")\n            gpa = gpa - 4.0\n    \
    \    } else if gpa > 3.7 {\n            grades_letters.append(\"A\")\n       \
    \     gpa = gpa - 3.7\n        } else if gpa > 3.3 {\n            grades_letters.append(\"\
    A-\")\n            gpa = gpa - 3.3\n        } else if gpa > 3.0 {\n          \
    \  grades_letters.append(\"B+\")\n            gpa = gpa - 3.0\n        } else\
    \ if gpa > 2.7 {\n            grades_letters.append(\"B\")\n            gpa =\
    \ gpa - 2.7\n        } else if gpa > 2.3 {\n            grades_letters.append(\"\
    B-\")\n            gpa = gpa - 2.3\n        } else if gpa > 2.0 {\n          \
    \  grades_letters.append(\"C+\")\n            gpa = gpa - 2.0\n        } else\
    \ if gpa > 1.7 {\n            grades_letters.append(\"C\")\n            gpa =\
    \ gpa - 1.7\n        } else if gpa > 1.3 {\n            grades_letters.append(\"\
    C-\")\n            gpa = gpa - 1.3\n        } else if gpa > 1.0 {\n          \
    \  grades_letters.append(\"D+\")\n            gpa = gpa - 1.0\n        } else\
    \ if gpa > 0.7 {\n            grades_letters.append(\"D\")\n            gpa =\
    \ gpa - 0.7\n        } else if gpa > 0.0 {\n            grades_letters.append(\"\
    D-\")\n            gpa = gpa - 0.0\n        } else {\n            grades_letters.append(\"\
    E\")\n        }\n    }\n    return grades_letters\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp82gu9mcr/tmp82gu9mcr.swift:84: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b46c5730c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b46c5427b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b46c5427988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b46c54267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp82gu9mcr                        0x0000564401b197a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b46c591c460 __libc_start_main +
    245

    6    tmp82gu9mcr                        0x0000564401b192c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014656
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var gpaDouble = Double(gpa)\n    var gpaInt: Int = Int(gpaDouble)\n\
    \    var gpaString: String = \"\"\n    var gpaArray: [Double] = [gpaDouble]\n\
    \    var gpaIndex: Int = 0\n    var gpaIndexDouble: Double = 0\n    var gpaIndexInt:\
    \ Int = 0\n    var gpaIndexString: String = \"\"\n    var gpaIndexArray: [Double]\
    \ = [gpaIndex]\n    var gpaIndexInt: Int = 0\n    var gpaIndexString: String =\
    \ \"\"\n    var gpaIndexArray: [Double] = [gpaIndex]\n    var gpaIndexInt: Int\
    \ = 0\n    var gpaIndexString: String = \"\"\n    var gpaIndexArray: [Double]\
    \ = [gpaIndex]\n    var gpaIndexInt: Int = 0\n    var gpaIndexString: String =\
    \ \"\"\n    var gpaIndexArray: [Double] = [gpaIndex]\n    var gpaIndexInt: Int\
    \ = 0\n    var gpaIndexString: String = \"\"\n    var gpaIndexArray: [Double]\
    \ = [gpaIndex]\n    var gpaIndexInt: Int = 0\n    var gpaIndexString: String =\
    \ \"\"\n    var gpaIndexArray: [Double] = [gpaIndex]\n    var gpaIndexInt: Int\
    \ = 0\n    var gpaIndexString: String = \"\"\n    var gpaIndexArray: [Double]\
    \ = [gpaIndex]\n    var gpaIndexInt: Int = 0\n    var gpaIndexString: String =\
    \ \"\"\n    var gpaIndexArray: [Double] = [gpaIndex]\n    var gpaIndexInt: Int\
    \ = 0\n    var gpaIndexString: String = \"\"\n    var gpaIndexArray: [Double]\
    \ = [gpaIndex]\n    var gpaIndexInt: Int = 0\n    var gpaIndexString: String =\
    \ \"\"\n    var gpaIndexArray: [Double] = [gpaIndex]\n    var gpaIndexInt: Int\
    \ = 0\n    var gpaIndexString: String = \"\"\n    var gpaIndexArray: [Double]\
    \ = [gpaIndex]\n    var gpaIndexInt: Int = 0\n    var gpaIndexString: String =\
    \ \"\"\n    var gpaIndexArray: [Double] = [gpaIndex]\n    var gpaIndexInt: Int\
    \ = 0\n    var gpaIndexString: String = \"\"\n    var gpaIndexArray: [Double]\
    \ = [gpaIndex]\n    var gpaIndexInt: Int = 0\n    var gpaIndexString: String =\
    \ \"\"\n    var gpaIndexArray: [Double] = [gpaIndex]\n    var gpaIndexInt: Int\
    \ = 0\n    var gpaIndexString: String = \"\"\n    var gpaIndexArray: [Double]\
    \ = [gpa\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmppvfxkuc0.swift:76:39: error: expected ']' in container literal\
    \ expression\n    var gpaIndexArray: [Double] = [gpa\n                       \
    \               ^\n/tmp/tmppvfxkuc0.swift:76:35: note: to match this opening '['\n\
    \    var gpaIndexArray: [Double] = [gpa\n                                  ^\n\
    /tmp/tmppvfxkuc0.swift:25:28: error: extraneous argument label 'combine:' in call\n\
    \    var gpa = grades.reduce(0, combine: +)\n                           ^   ~~~~~~~~~\n\
    \                               \n/tmp/tmppvfxkuc0.swift:34:36: error: cannot\
    \ convert value of type 'Int' to expected element type 'Double'\n    var gpaIndexArray:\
    \ [Double] = [gpaIndex]\n                                   ^\n/tmp/tmppvfxkuc0.swift:35:9:\
    \ error: invalid redeclaration of 'gpaIndexInt'\n    var gpaIndexInt: Int = 0\n\
    \        ^\n/tmp/tmppvfxkuc0.swift:32:9: note: 'gpaIndexInt' previously declared\
    \ here\n    var gpaIndexInt: Int = 0\n        ^\n/tmp/tmppvfxkuc0.swift:36:9:\
    \ error: invalid redeclaration of 'gpaIndexString'\n    var gpaIndexString: String\
    \ = \"\"\n        ^\n/tmp/tmppvfxkuc0.swift:33:9: note: 'gpaIndexString' previously\
    \ declared here\n    var gpaIndexString: String = \"\"\n        ^\n/tmp/tmppvfxkuc0.swift:37:36:\
    \ error: cannot convert value of type 'Int' to expected element type 'Double'\n\
    \    var gpaIndexArray: [Double] = [gpaIndex]\n                              \
    \     ^\n/tmp/tmppvfxkuc0.swift:37:9: error: invalid redeclaration of 'gpaIndexArray'\n\
    \    var gpaIndexArray: [Double] = [gpaIndex]\n        ^\n/tmp/tmppvfxkuc0.swift:34:9:\
    \ note: 'gpaIndexArray' previously declared here\n    var gpaIndexArray: [Double]\
    \ = [gpaIndex]\n        ^\n/tmp/tmppvfxkuc0.swift:38:9: error: invalid redeclaration\
    \ of 'gpaIndexInt'\n    var gpaIndexInt: Int = 0\n        ^\n/tmp/tmppvfxkuc0.swift:32:9:\
    \ note: 'gpaIndexInt' previously declared here\n    var gpaIndexInt: Int = 0\n\
    \        ^\n/tmp/tmppvfxkuc0.swift:39:9: error: invalid redeclaration of 'gpaIndexString'\n\
    \    var gpaIndexString: String = \"\"\n        ^\n/tmp/tmppvfxkuc0.swift:33:9:\
    \ note: 'gpaIndexString' previously declared here\n    var gpa"
  stdout: ''
  timestamp: 1660014656
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var gpaArray = [Double]()\n    gpaArray.append(gpa)\n    gradesArray.append(gpaArray)\n\
    \    gradesArray.append(gpaArray)\n    gradesArray.append(gpaArray)\n    gradesArray.append(gpaArray)\n\
    \    gradesArray.append(gpaArray)\n    gradesArray.append(gpaArray)\n    gradesArray.append(gpaArray)\n\
    \    gradesArray.append(gpaArray)\n    gradesArray.append(gpaArray)\n    gradesArray.append(gpaArray)\n\
    \    gradesArray.append(gpaArray)\n    gradesArray.append(gpaArray)\n    gradesArray.append(gpaArray)\n\
    \    gradesArray.append(gpaArray)\n    gradesArray.append(gpaArray)\n    gradesArray.append(gpaArray)\n\
    \    gradesArray.append(gpaArray)\n    gradesArray.append(gpaArray)\n    gradesArray.append(gpaArray)\n\
    \    gradesArray.append(gpaArray)\n    gradesArray.append(gpaArray)\n    gradesArray.append(gpaArray)\n\
    \    gradesArray.append(gpaArray)\n    gradesArray.append(gpaArray)\n    gradesArray.append(gpaArray)\n\
    \    gradesArray.append(gpaArray)\n    gradesArray.append(gpaArray)\n    gradesArray.append(gpaArray)\n\
    \    gradesArray.append(gpaArray)\n    gradesArray.append(gpaArray)\n    gradesArray.append(gpaArray)\n\
    \    gradesArray.append(gpaArray)\n    gradesArray.append(gpaArray)\n    gradesArray.append(gpaArray)\n\
    \    gradesArray.append(gpaArray)\n    gradesArray.append(gpaArray)\n    gradesArray.append(gpaArray)\n\
    \    gradesArray.append(gpaArray)\n    gradesArray.append(gpaArray)\n    gradesArray.append(gpaArray)\n\
    \    gradesArray.append(gpaArray)\n    gradesArray.append(gpaArray)\n    gradesArray.append(gpaArray)\n\
    \    gradesArray.append(gpaArray)\n    gradesArray.append(gpaArray)\n    gradesArray.append(gpaArray)\n\
    \    gradesArray.append(gpaArray)\n    gradesArray.append(gpaArray)\n    gradesArray.append(gpaArray)\n\
    \    gradesArray.append(gpaArray)\n    gradesArray.append(gpaArray)\n    gradesArray.append(gpaArray)\n\
    \    gradesArray.append(g\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkftol8tb.swift:81:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmpkftol8tb.swift:80:23: note: to match this opening '('\n    gradesArray.append(g\n\
    \                      ^\n/tmp/tmpkftol8tb.swift:25:28: error: extraneous argument\
    \ label 'combine:' in call\n    var gpa = grades.reduce(0, combine: +)\n     \
    \                      ^   ~~~~~~~~~\n                               \n/tmp/tmpkftol8tb.swift:28:17:\
    \ error: no exact matches in call to instance method 'append'\n    gradesArray.append(gpaArray)\n\
    \                ^\nSwift.Array:6:37: note: candidate expects value of type 'String'\
    \ for parameter #1 (got '[Double]')\n    @inlinable public mutating func append(_\
    \ newElement: __owned Element)\n                                    ^\nSwift.RangeReplaceableCollection:4:37:\
    \ note: candidate expects value of type 'String' for parameter #1 (got '[Double]')\n\
    \    @inlinable public mutating func append(_ newElement: __owned Self.Element)\n\
    \                                    ^\n/tmp/tmpkftol8tb.swift:28:17: note: found\
    \ candidate with type '(__owned [Double]) -> ()'\n    gradesArray.append(gpaArray)\n\
    \                ^\n/tmp/tmpkftol8tb.swift:29:17: error: no exact matches in call\
    \ to instance method 'append'\n    gradesArray.append(gpaArray)\n            \
    \    ^\nSwift.Array:6:37: note: candidate expects value of type 'String' for parameter\
    \ #1 (got '[Double]')\n    @inlinable public mutating func append(_ newElement:\
    \ __owned Element)\n                                    ^\nSwift.RangeReplaceableCollection:4:37:\
    \ note: candidate expects value of type 'String' for parameter #1 (got '[Double]')\n\
    \    @inlinable public mutating func append(_ newElement: __owned Self.Element)\n\
    \                                    ^\n/tmp/tmpkftol8tb.swift:29:17: note: found\
    \ candidate with type '(__owned [Double]) -> ()'\n    gradesArray.append(gpaArray)\n\
    \                ^\n/tmp/tmpkftol8tb.swift:30:17: error: no exact matches in call\
    \ to instance method 'append'\n    gradesArray.append(gpaArray)\n            \
    \    ^\nSwift.Array:6:37: note: candidate expects value of type 'String' for"
  stdout: ''
  timestamp: 1660014656
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    var totalGrade: Double\
    \ = 0.0\n    var totalGradeIndex: Int = 0\n    var gradeIndex: Int = 0\n    var\
    \ grade: Double = 0.0\n    var letterGrade: String = \"\"\n    \n    for grade\
    \ in grades {\n        totalGrade = totalGrade + grade\n        totalGradeIndex\
    \ = totalGradeIndex + 1\n    }\n    \n    for grade in grades {\n        gradeIndex\
    \ = gradeIndex + 1\n        \n        if totalGradeIndex == 1 {\n            letterGrade\
    \ = \"A+\"\n        }\n        else if totalGradeIndex == 2 {\n            letterGrade\
    \ = \"A\"\n        }\n        else if totalGradeIndex == 3 {\n            letterGrade\
    \ = \"A-\"\n        }\n        else if totalGradeIndex == 4 {\n            letterGrade\
    \ = \"B+\"\n        }\n        else if totalGradeIndex == 5 {\n            letterGrade\
    \ = \"B\"\n        }\n        else if totalGradeIndex == 6 {\n            letterGrade\
    \ = \"B-\"\n        }\n        else if totalGradeIndex == 7 {\n            letterGrade\
    \ = \"C+\"\n        }\n        else if totalGradeIndex == 8 {\n            letterGrade\
    \ = \"C\"\n        }\n        else if totalGradeIndex == 9 {\n            letterGrade\
    \ = \"C-\"\n        }\n        else if totalGradeIndex == 10 {\n            letterGrade\
    \ = \"D+\"\n        }\n        else if totalGradeIndex == 11 {\n            letterGrade\
    \ = \"D\"\n        }\n        else if totalGradeIndex == 12 {\n            letterGrade\
    \ = \"D-\"\n        }\n        else if totalGradeIndex == 13 {\n            letterGrade\
    \ = \"E\"\n        }\n        else if totalGradeIndex == 14 {\n            letterGrade\
    \ = \"F\"\n        }\n        else if totalGradeIndex == 15 {\n            letterGrade\
    \ = \"F\"\n        }\n        else if totalGradeIndex == 16 {\n            letterGrade\
    \ = \"F\"\n        }\n        else if totalGradeIndex == 17 {\n            letterGrade\
    \ = \"F\"\n        }\n        else if totalGradeIndex == 18 {\n            letterGrade\
    \ = \"F\"\n        }\n        else if totalGradeIndex == 19 {\n            letterGrade\
    \ = \"F\"\n        }\n        else if totalGradeIndex == 20 {\n            letterGrade\
    \ = \"F\"\n        }\n        else if totalGradeIndex == 21 {\n            letterGrade\
    \ = \"F\"\n        }\n        else if totalGradeIndex == 22 {\n\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmptbzzsukv.swift:124:66: error: expected '}' at end of brace statement\n\
    assert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"])\n      \
    \                                                           ^\n/tmp/tmptbzzsukv.swift:36:25:\
    \ note: to match this opening '{'\n    for grade in grades {\n               \
    \         ^\n/tmp/tmptbzzsukv.swift:124:66: error: expected '}' at end of brace\
    \ statement\nassert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"\
    ])\n                                                                 ^\n/tmp/tmptbzzsukv.swift:23:59:\
    \ note: to match this opening '{'\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n                                                          ^\n\
    /tmp/tmptbzzsukv.swift:107:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n/tmp/tmptbzzsukv.swift:24:9: warning: variable 'gradesArray'\
    \ was never used; consider replacing with '_' or removing it\n    var gradesArray:\
    \ [String] = []\n        ^~~~~~~~~~~\n        _\n/tmp/tmptbzzsukv.swift:28:9:\
    \ warning: variable 'grade' was never used; consider replacing with '_' or removing\
    \ it\n    var grade: Double = 0.0\n        ^~~~~\n        _\n/tmp/tmptbzzsukv.swift:29:9:\
    \ warning: variable 'letterGrade' was written to, but never read\n    var letterGrade:\
    \ String = \"\"\n        ^\n/tmp/tmptbzzsukv.swift:36:9: warning: immutable value\
    \ 'grade' was never used; consider replacing with '_' or removing it\n    for\
    \ grade in grades {\n        ^~~~~\n        _\n"
  stdout: ''
  timestamp: 1660014656
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    var totalGrade: Double\
    \ = 0.0\n    var totalGradeLetter: String = \"\"\n    for grade in grades {\n\
    \        totalGrade += grade\n    }\n    totalGrade = totalGrade / Double(grades.count)\n\
    \    for grade in grades {\n        let gradeLetter = grade_to_letter(grade)\n\
    \        gradesArray.append(gradeLetter)\n    }\n    for grade in gradesArray\
    \ {\n        if grade == \"E\" {\n            gradesArray.remove(grade)\n    \
    \    }\n    }\n    if totalGrade > 4.0 {\n        gradesArray.remove(\"D\")\n\
    \    }\n    if totalGrade > 3.0 {\n        gradesArray.remove(\"C\")\n    }\n\
    \    if totalGrade > 2.0 {\n        gradesArray.remove(\"B\")\n    }\n    if totalGrade\
    \ > 1.0 {\n        gradesArray.remove(\"A\")\n    }\n    if totalGrade > 0.7 {\n\
    \        gradesArray.remove(\"A+\")\n    }\n    if totalGrade > 0.3 {\n      \
    \  gradesArray.remove(\"A-\")\n    }\n    if totalGrade > 0.0 {\n        gradesArray.remove(\"\
    B+\")\n    }\n    if totalGrade > -0.3 {\n        gradesArray.remove(\"B-\")\n\
    \    }\n    if totalGrade > -0.7 {\n        gradesArray.remove(\"C+\")\n    }\n\
    \    if totalGrade > -1.0 {\n        gradesArray.remove(\"C\")\n    }\n    if\
    \ totalGrade > -1.7 {\n        gradesArray.remove(\"C-\")\n    }\n    if totalGrade\
    \ > -2.0 {\n        gradesArray.remove(\"D+\")\n    }\n    if totalGrade > -3.0\
    \ {\n        gradesArray.remove(\"D\")\n    }\n    if totalGrade > -3.7 {\n  \
    \      gradesArray.remove(\"D-\")\n    }\n    if totalGrade > -4.0 {\n       \
    \ gradesArray.remove(\"E\")\n    }\n    return gradesArray\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpxn_ynin7.swift:32:27: error: cannot find 'grade_to_letter' in scope\n\
    \        let gradeLetter = grade_to_letter(grade)\n                          ^~~~~~~~~~~~~~~\n\
    /tmp/tmpxn_ynin7.swift:37:25: error: no exact matches in call to instance method\
    \ 'remove'\n            gradesArray.remove(grade)\n                        ^\n\
    /tmp/tmpxn_ynin7.swift:37:25: note: candidate expects value of type 'Int' for\
    \ parameter #1 (got 'String')\n            gradesArray.remove(grade)\n       \
    \                 ^\n/tmp/tmpxn_ynin7.swift:37:25: note: candidate expects value\
    \ of type 'Array<String>.Index' (aka 'Int') for parameter #1 (got 'String')\n\
    \            gradesArray.remove(grade)\n                        ^\n/tmp/tmpxn_ynin7.swift:41:21:\
    \ error: no exact matches in call to instance method 'remove'\n        gradesArray.remove(\"\
    D\")\n                    ^\n/tmp/tmpxn_ynin7.swift:41:21: note: candidate expects\
    \ value of type 'Int' for parameter #1 (got 'String')\n        gradesArray.remove(\"\
    D\")\n                    ^\n/tmp/tmpxn_ynin7.swift:41:21: note: candidate expects\
    \ value of type 'Array<String>.Index' (aka 'Int') for parameter #1 (got 'String')\n\
    \        gradesArray.remove(\"D\")\n                    ^\n/tmp/tmpxn_ynin7.swift:44:21:\
    \ error: no exact matches in call to instance method 'remove'\n        gradesArray.remove(\"\
    C\")\n                    ^\n/tmp/tmpxn_ynin7.swift:44:21: note: candidate expects\
    \ value of type 'Int' for parameter #1 (got 'String')\n        gradesArray.remove(\"\
    C\")\n                    ^\n/tmp/tmpxn_ynin7.swift:44:21: note: candidate expects\
    \ value of type 'Array<String>.Index' (aka 'Int') for parameter #1 (got 'String')\n\
    \        gradesArray.remove(\"C\")\n                    ^\n/tmp/tmpxn_ynin7.swift:47:21:\
    \ error: no exact matches in call to instance method 'remove'\n        gradesArray.remove(\"\
    B\")\n                    ^\n/tmp/tmpxn_ynin7.swift:47:21: note: candidate expects\
    \ value of type 'Int' for parameter #1 (got 'String')\n        gradesArray.remove(\"\
    B\")\n                    ^\n/tmp/tmpxn_ynin7.swift:47:21: note: candidate expects\
    \ value of type 'Ar"
  stdout: ''
  timestamp: 1660014656
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var letterGrade = \"\"\n    var letterGradeArray = [String]()\n\
    \    \n    if gpa < 4.0 {\n        letterGrade = \"E\"\n        letterGradeArray.append(letterGrade)\n\
    \    } else {\n        letterGrade = \"D-\"\n        letterGradeArray.append(letterGrade)\n\
    \    }\n    \n    if gpa < 3.7 {\n        letterGrade = \"D+\"\n        letterGradeArray.append(letterGrade)\n\
    \    } else {\n        letterGrade = \"C-\"\n        letterGradeArray.append(letterGrade)\n\
    \    }\n    \n    if gpa < 3.3 {\n        letterGrade = \"C\"\n        letterGradeArray.append(letterGrade)\n\
    \    } else {\n        letterGrade = \"B-\"\n        letterGradeArray.append(letterGrade)\n\
    \    }\n    \n    if gpa < 3.0 {\n        letterGrade = \"B\"\n        letterGradeArray.append(letterGrade)\n\
    \    } else {\n        letterGrade = \"A-\"\n        letterGradeArray.append(letterGrade)\n\
    \    }\n    \n    if gpa < 2.7 {\n        letterGrade = \"A\"\n        letterGradeArray.append(letterGrade)\n\
    \    } else {\n        letterGrade = \"A+\"\n        letterGradeArray.append(letterGrade)\n\
    \    }\n    \n    if gpa < 2.3 {\n        letterGrade = \"A+\"\n        letterGradeArray.append(letterGrade)\n\
    \    } else {\n        letterGrade = \"A-\"\n        letterGradeArray.append(letterGrade)\n\
    \    }\n    \n    if gpa < 2.0 {\n        letterGrade = \"A\"\n        letterGradeArray.append(letterGrade)\n\
    \    } else {\n        letterGrade = \"B+\"\n        letterGradeArray.append(letterGrade)\n\
    \    }\n    \n    if gpa < 1.7 {\n        letterGrade = \"B\"\n        letterGradeArray.append(letterGrade)\n\
    \    } else {\n        letterGrade = \"B+\"\n        letterGradeArray.append(letterGrade)\n\
    \    }\n    \n    if gpa < 1.3 {\n        letterGrade = \"B\"\n        letterGradeArray.append(letterGrade)\n\
    \    } else {\n        letterGrade = \"C+\"\n        letterGradeArray.append(letterGrade)\n\
    \    }\n    \n    if gpa < 1.0 {\n        letterGrade = \"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpajd3ohif.swift:102:23: error: unterminated string literal\n   \
    \     letterGrade = \"\n                      ^\n/tmp/tmpajd3ohif.swift:123:66:\
    \ error: expected '}' at end of brace statement\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])\n                                          \
    \                       ^\n/tmp/tmpajd3ohif.swift:23:59: note: to match this opening\
    \ '{'\nfunc numerical_letter_grade(grades: [Double]) -> [String] {\n         \
    \                                                 ^\n/tmp/tmpajd3ohif.swift:25:28:\
    \ error: extraneous argument label 'combine:' in call\n    var gpa = grades.reduce(0,\
    \ combine: +)\n                           ^   ~~~~~~~~~\n                    \
    \           \n/tmp/tmpajd3ohif.swift:106:6: error: operator functions can only\
    \ be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014656
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = grades\n    var letterGrades = [String]()\n\
    \    var currentGrade = grades[0]\n    var currentLetterGrade = \"\"\n    var\
    \ currentLetter = \"\"\n    \n    for grade in gradesArray {\n        if grade\
    \ < currentGrade {\n            letterGrades.append(currentLetterGrade)\n    \
    \        currentLetterGrade = \"\"\n            currentLetter = \"\"\n       \
    \ }\n        \n        if grade == currentGrade {\n            currentLetterGrade\
    \ = currentLetterGrade + currentLetter\n        }\n        \n        if grade\
    \ > currentGrade {\n            currentLetterGrade = currentLetterGrade + currentLetter\n\
    \            currentLetter = \"\"\n        }\n        \n        currentGrade =\
    \ grade\n        currentLetter = grade < currentGrade ? \"-\" : \"+\"\n    }\n\
    \    \n    letterGrades.append(currentLetterGrade)\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpmqoi5os8/tmpmqoi5os8.swift:67: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e883adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e880a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e880a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e880a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmqoi5os8                        0x00005575bea838a6 <unavailable> + 6310

    5    libc.so.6                          0x00002b1e88599460 __libc_start_main +
    245

    6    tmpmqoi5os8                        0x00005575bea833c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1660014656
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    var totalGrade: Double\
    \ = 0.0\n    var totalGradeIndex = 0\n    var currentGrade: Double = 0.0\n   \
    \ var currentGradeIndex = 0\n    var currentLetterGrade: String = \"\"\n    var\
    \ currentLetterGradeIndex = 0\n    var currentGPA: Double = 0.0\n    var currentGPAIndex\
    \ = 0\n    \n    for currentGPA in grades {\n        totalGrade += currentGPA\n\
    \        totalGradeIndex += 1\n    }\n    \n    for currentGPA in grades {\n \
    \       currentGrade = currentGPA / totalGrade\n        currentGradeIndex += 1\n\
    \        \n        if currentGradeIndex == 1 {\n            currentLetterGrade\
    \ = \"A+\"\n            currentLetterGradeIndex = 1\n        } else if currentGradeIndex\
    \ == 2 {\n            currentLetterGrade = \"A\"\n            currentLetterGradeIndex\
    \ = 1\n        } else if currentGradeIndex == 3 {\n            currentLetterGrade\
    \ = \"A-\"\n            currentLetterGradeIndex = 1\n        } else if currentGradeIndex\
    \ == 4 {\n            currentLetterGrade = \"B+\"\n            currentLetterGradeIndex\
    \ = 2\n        } else if currentGradeIndex == 5 {\n            currentLetterGrade\
    \ = \"B\"\n            currentLetterGradeIndex = 2\n        } else if currentGradeIndex\
    \ == 6 {\n            currentLetterGrade = \"B-\"\n            currentLetterGradeIndex\
    \ = 2\n        } else if currentGradeIndex == 7 {\n            currentLetterGrade\
    \ = \"C+\"\n            currentLetterGradeIndex = 3\n        } else if currentGradeIndex\
    \ == 8 {\n            currentLetterGrade = \"C\"\n            currentLetterGradeIndex\
    \ = 3\n        } else if currentGradeIndex == 9 {\n            currentLetterGrade\
    \ = \"C-\"\n            currentLetterGradeIndex = 3\n        } else if currentGradeIndex\
    \ == 10 {\n            currentLetterGrade = \"D+\"\n            currentLetterGradeIndex\
    \ = 4\n        } else if currentGradeIndex == 11 {\n            currentLetterGrade\
    \ = \"D\"\n            currentLetterGradeIndex = 4\n        } else if currentGradeIndex\
    \ == 12 {\n            currentLetterGrade = \"D-\"\n            currentLetterGradeIndex\
    \ = 4\n        } else if currentGradeIndex == 13 {\n            currentLetterGrade\
    \ = \"E\"\n            currentLetterGradeIndex = 0\n        }\n        \n    \
    \    gradesArray.append(currentLetterGrade)\n    }\n    \n    return gradesArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp4zw4zotc/tmp4zw4zotc.swift:103: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b18f3119c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b18f2e10b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b18f2e10988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b18f2e0f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4zw4zotc                        0x0000556294e097a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b18f3305460 __libc_start_main +
    245

    6    tmp4zw4zotc                        0x0000556294e092c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014656
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var grades_string = \"\"\n    for grade in grades {\n   \
    \     if grade > 3.0 {\n            grades_string += \"B-\"\n        } else if\
    \ grade > 2.7 {\n            grades_string += \"B-\"\n        } else if grade\
    \ > 2.3 {\n            grades_string += \"B-\"\n        } else if grade > 2.0\
    \ {\n            grades_string += \"B-\"\n        } else if grade > 1.7 {\n  \
    \          grades_string += \"B-\"\n        } else if grade > 1.3 {\n        \
    \    grades_string += \"B-\"\n        } else if grade > 1.0 {\n            grades_string\
    \ += \"B-\"\n        } else if grade > 0.7 {\n            grades_string += \"\
    B-\"\n        } else if grade > 0.3 {\n            grades_string += \"B-\"\n \
    \       } else if grade > 0.0 {\n            grades_string += \"B-\"\n       \
    \ } else if grade > -0.3 {\n            grades_string += \"B-\"\n        } else\
    \ if grade > -0.7 {\n            grades_string += \"B-\"\n        } else if grade\
    \ > -1.0 {\n            grades_string += \"B-\"\n        } else if grade > -1.7\
    \ {\n            grades_string += \"B-\"\n        } else if grade > -2.0 {\n \
    \           grades_string += \"B-\"\n        } else if grade > -3.0 {\n      \
    \      grades_string += \"B-\"\n        } else if grade > -3.7 {\n           \
    \ grades_string += \"B-\"\n        } else if grade > -4.0 {\n            grades_string\
    \ += \"B-\"\n        } else if grade > -4.7 {\n            grades_string += \"\
    B-\"\n        } else if grade > -5.0 {\n            grades_string += \"B-\"\n\
    \        } else if grade > -5.7 {\n            grades_string += \"B-\"\n     \
    \   } else if grade > -6.0 {\n            grades_string += \"B-\"\n        } else\
    \ if grade > -6.7 {\n            grades_string += \"B-\"\n        } else if grade\
    \ > -7.0 {\n            grades_string += \"B-\"\n        } else if grade > -7.7\
    \ {\n            grades_string += \"B-\"\n        } else if grade > -8.0 {\n \
    \           grades_string += \"B-\"\n        } else if grade > -8.7 {\n      \
    \      grades_string += \"B-\"\n        } else if grade > -9.0 {\n           \
    \ grades_string += \"B-\"\n        } else if grade > -9.7 {\n            \n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmps_7m_cmf.swift:104:66: error: expected '}' at end of brace statement\n\
    assert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"])\n      \
    \                                                           ^\n/tmp/tmps_7m_cmf.swift:25:25:\
    \ note: to match this opening '{'\n    for grade in grades {\n               \
    \         ^\n/tmp/tmps_7m_cmf.swift:104:66: error: expected '}' at end of brace\
    \ statement\nassert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"\
    ])\n                                                                 ^\n/tmp/tmps_7m_cmf.swift:23:59:\
    \ note: to match this opening '{'\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n                                                          ^\n\
    /tmp/tmps_7m_cmf.swift:87:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014656
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    var gradesArrayIndex\
    \ = 0\n    var gradesArrayIndexMax = grades.count - 1\n    for index in 0..<grades.count\
    \ {\n        if grades[index] > 3.0 {\n            gradesArray[gradesArrayIndex]\
    \ = \"B+\"\n            gradesArrayIndex += 1\n        } else if grades[index]\
    \ > 2.7 {\n            gradesArray[gradesArrayIndex] = \"B\"\n            gradesArrayIndex\
    \ += 1\n        } else if grades[index] > 2.3 {\n            gradesArray[gradesArrayIndex]\
    \ = \"B-\"\n            gradesArrayIndex += 1\n        } else if grades[index]\
    \ > 2.0 {\n            gradesArray[gradesArrayIndex] = \"C+\"\n            gradesArrayIndex\
    \ += 1\n        } else if grades[index] > 1.7 {\n            gradesArray[gradesArrayIndex]\
    \ = \"C\"\n            gradesArrayIndex += 1\n        } else if grades[index]\
    \ > 1.3 {\n            gradesArray[gradesArrayIndex] = \"C-\"\n            gradesArrayIndex\
    \ += 1\n        } else if grades[index] > 1.0 {\n            gradesArray[gradesArrayIndex]\
    \ = \"D+\"\n            gradesArrayIndex += 1\n        } else if grades[index]\
    \ > 0.7 {\n            gradesArray[gradesArrayIndex] = \"D\"\n            gradesArrayIndex\
    \ += 1\n        } else if grades[index] > 0.0 {\n            gradesArray[gradesArrayIndex]\
    \ = \"D-\"\n            gradesArrayIndex += 1\n        } else {\n            gradesArray[gradesArrayIndex]\
    \ = \"E\"\n            gradesArrayIndex += 1\n        }\n    }\n    return gradesArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b956158ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9561281561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b9561281286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b956128113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b9561280bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b95610809a0 specialized Array.subscript.modify
    + 0

    6    tmpswepzzj_                        0x0000559cbe42f298 <unavailable> + 8856

    7    tmpswepzzj_                        0x0000559cbe42e6cd <unavailable> + 5837

    8    libc.so.6                          0x00002b9561776460 __libc_start_main +
    245

    9    tmpswepzzj_                        0x0000559cbe42e389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660014656
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    var gpa: Double = 0.0\n\
    \    var letterGrade: String = \"\"\n    \n    for grade in grades {\n       \
    \ gpa = grade * 4.0\n        letterGrade = letterGrade + String(gpa)\n    }\n\
    \    \n    gradesArray.append(letterGrade)\n    \n    return gradesArray\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpkw8lajy4/tmpkw8lajy4.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b15659c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b15656b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b15656b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b15656b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkw8lajy4                        0x000055891cd758b6 <unavailable> + 6326

    5    libc.so.6                          0x00002b1565bae460 __libc_start_main +
    245

    6    tmpkw8lajy4                        0x000055891cd753d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1660014655
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    var gpa: Double = 0.0\n\
    \    var letterGrade: String = \"\"\n    \n    for grade in grades {\n       \
    \ gpa = grade * 4.0\n        letterGrade = letterGrade + String(gpa)\n       \
    \ \n        if gpa > 3.7 {\n            letterGrade = letterGrade + \"+\"\n  \
    \      }\n        else if gpa > 3.3 {\n            letterGrade = letterGrade +\
    \ \"-\"\n        }\n        else if gpa > 3.0 {\n            letterGrade = letterGrade\
    \ + \"+\"\n        }\n        else if gpa > 2.7 {\n            letterGrade = letterGrade\
    \ + \"-\"\n        }\n        else if gpa > 2.3 {\n            letterGrade = letterGrade\
    \ + \"+\"\n        }\n        else if gpa > 2.0 {\n            letterGrade = letterGrade\
    \ + \"-\"\n        }\n        else if gpa > 1.7 {\n            letterGrade = letterGrade\
    \ + \"+\"\n        }\n        else if gpa > 1.3 {\n            letterGrade = letterGrade\
    \ + \"-\"\n        }\n        else if gpa > 1.0 {\n            letterGrade = letterGrade\
    \ + \"+\"\n        }\n        else if gpa > 0.7 {\n            letterGrade = letterGrade\
    \ + \"-\"\n        }\n        else {\n            letterGrade = letterGrade +\
    \ \"-\"\n        }\n    }\n    \n    return gradesArray\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp3vixzq5w/tmp3vixzq5w.swift:83: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89a6ab1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89a67a8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89a67a8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89a67a77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3vixzq5w                        0x000055edb4af2866 <unavailable> + 6246

    5    libc.so.6                          0x00002b89a6c9d460 __libc_start_main +
    245

    6    tmp3vixzq5w                        0x000055edb4af2389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660014656
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades = [String]()\n    for grade in grades {\n\
    \        letterGrades.append(String(grade >= 3.0 ? \"A+\" :\n            grade\
    \ >= 3.7 ? \"A\" :\n            grade >= 3.3 ? \"A-\" :\n            grade >=\
    \ 3.0 ? \"B+\" :\n            grade >= 2.7 ? \"B\" :\n            grade >= 2.3\
    \ ? \"B-\" :\n            grade >= 2.0 ? \"C+\" :\n            grade >= 1.7 ?\
    \ \"C\" :\n            grade >= 1.3 ? \"C-\" :\n            grade >= 1.0 ? \"\
    D+\" :\n            grade >= 0.7 ? \"D\" :\n            grade >= 0.0 ? \"D-\"\
    \ :\n            \"E\"))\n    }\n    return letterGrades\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpl6erayar/tmpl6erayar.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4a5765c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4a545cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4a545c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4a545b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl6erayar                        0x000055b0f8de2906 <unavailable> + 6406

    5    libc.so.6                          0x00002ae4a5951460 __libc_start_main +
    245

    6    tmpl6erayar                        0x000055b0f8de2429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1660014656
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var grades_string = \"\"\n    for grade in grades {\n   \
    \     let letter = grade_letter((grade * 100) / 4.0)\n        grades_string +=\
    \ letter\n    }\n    return grades_string.characters.map { String($0) }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp52kn7qwf.swift:26:22: error: cannot find 'grade_letter' in scope\n\
    \        let letter = grade_letter((grade * 100) / 4.0)\n                    \
    \ ^~~~~~~~~~~~\n/tmp/tmp52kn7qwf.swift:29:26: error: 'characters' is unavailable:\
    \ Please use String directly\n    return grades_string.characters.map { String($0)\
    \ }\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014656
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var grades_string = \"\"\n    for grade in grades {\n   \
    \     switch grade {\n        case 4.0:\n            grades_string += \"A+\"\n\
    \        case 3.7:\n            grades_string += \"A\"\n        case 3.3:\n  \
    \          grades_string += \"A-\"\n        case 3.0:\n            grades_string\
    \ += \"B+\"\n        case 2.7:\n            grades_string += \"B\"\n        case\
    \ 2.3:\n            grades_string += \"B-\"\n        case 2.0:\n            grades_string\
    \ += \"C+\"\n        case 1.7:\n            grades_string += \"C\"\n        case\
    \ 1.3:\n            grades_string += \"C-\"\n        case 1.0:\n            grades_string\
    \ += \"D+\"\n        case 0.7:\n            grades_string += \"D\"\n        case\
    \ 0.0:\n            grades_string += \"D-\"\n        case 0.0:\n            grades_string\
    \ += \"E\"\n        default:\n            break\n        }\n    }\n    return\
    \ grades_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpjd7pddo4.swift:51:14: warning: literal value is already handled\
    \ by previous pattern; consider removing it\n        case 0.0:\n             ^~~\n\
    /tmp/tmpjd7pddo4.swift:49:14: note: first occurrence of identical literal pattern\
    \ is here\n        case 0.0:\n             ^~~\n/tmp/tmpjd7pddo4.swift:57:12:\
    \ error: cannot convert return expression of type 'String' to return type '[String]'\n\
    \    return grades_string\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014656
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    var totalGrade: Double\
    \ = 0.0\n    var grade: Double = 0.0\n    var gradeLetter: String = String()\n\
    \    \n    for grade in grades {\n        totalGrade += grade\n    }\n    \n \
    \   for grade in grades {\n        gradeLetter = String()\n        if totalGrade\
    \ >= grade {\n            gradeLetter = \"A+\"\n            totalGrade -= grade\n\
    \        } else if totalGrade >= grade - 0.3 {\n            gradeLetter = \"A\"\
    \n            totalGrade -= grade - 0.3\n        } else if totalGrade >= grade\
    \ - 0.2 {\n            gradeLetter = \"A-\"\n            totalGrade -= grade -\
    \ 0.2\n        } else if totalGrade >= grade - 0.1 {\n            gradeLetter\
    \ = \"B+\"\n            totalGrade -= grade - 0.1\n        } else if totalGrade\
    \ >= grade - 0.05 {\n            gradeLetter = \"B\"\n            totalGrade -=\
    \ grade - 0.05\n        } else if totalGrade >= grade - 0.03 {\n            gradeLetter\
    \ = \"B-\"\n            totalGrade -= grade - 0.03\n        } else if totalGrade\
    \ >= grade - 0.01 {\n            gradeLetter = \"C+\"\n            totalGrade\
    \ -= grade - 0.01\n        } else if totalGrade >= grade - 0.005 {\n         \
    \   gradeLetter = \"C\"\n            totalGrade -= grade - 0.005\n        } else\
    \ if totalGrade >= grade - 0.003 {\n            gradeLetter = \"C-\"\n       \
    \     totalGrade -= grade - 0.003\n        } else if totalGrade >= grade - 0.001\
    \ {\n            gradeLetter = \"D+\"\n            totalGrade -= grade - 0.001\n\
    \        } else if totalGrade >= grade - 0.0005 {\n            gradeLetter = \"\
    D\"\n            totalGrade -= grade - 0.0005\n        } else if totalGrade >=\
    \ grade - 0.0003 {\n            gradeLetter = \"D-\"\n            totalGrade -=\
    \ grade - 0.0003\n        } else if totalGrade >= grade - 0.0001 {\n         \
    \   gradeLetter = \"E\"\n            totalGrade -= grade - 0.0001\n        }\n\
    \        gradesArray.append(gradeLetter)\n    }\n    return gradesArray\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp9k_12gtz/tmp9k_12gtz.swift:93: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b18a82c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b18779b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b18779988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b187787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9k_12gtz                        0x000055573fd177f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b9b18c6e460 __libc_start_main +
    245

    6    tmp9k_12gtz                        0x000055573fd17319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014656
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades = [String]()\n    var totalGrade = grades.reduce(0,\
    \ combine: +)\n    var average = totalGrade / Double(grades.count)\n    var gradeIndex\
    \ = 0\n    var grade = grades[gradeIndex]\n    while grade > 0 {\n        letterGrades.append(String(gradeIndex\
    \ % 2 == 0 ? \"A+\" : \"A-\"))\n        gradeIndex += 1\n        grade = grades[gradeIndex]\
    \ - average\n    }\n    letterGrades.append(String(gradeIndex % 2 == 0 ? \"A+\"\
    \ : \"A-\"))\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpj9ko16ms.swift:25:35: error: extraneous argument label 'combine:'\
    \ in call\n    var totalGrade = grades.reduce(0, combine: +)\n               \
    \                   ^   ~~~~~~~~~\n                                      \n"
  stdout: ''
  timestamp: 1660014656
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var grades_string = \"\"\n    for grade in grades {\n   \
    \     if grade >= 3.0 {\n            grades_string += \"A+\"\n        } else if\
    \ grade >= 2.7 {\n            grades_string += \"B+\"\n        } else if grade\
    \ >= 2.3 {\n            grades_string += \"B\"\n        } else if grade >= 1.7\
    \ && grade < 2.3 {\n            grades_string += \"C+\"\n        } else if grade\
    \ >= 1.3 && grade < 1.7 {\n            grades_string += \"C\"\n        } else\
    \ if grade >= 1.0 {\n            grades_string += \"D+\"\n        } else if grade\
    \ >= 0.7 {\n            grades_string += \"D\"\n        } else if grade >= 0.0\
    \ {\n            grades_string += \"D-\"\n        } else {\n            grades_string\
    \ += \"E\"\n        }\n    }\n    return grades_string.characters.reversed()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpalcy06s4.swift:46:37: error: no 'reversed' candidates produce the\
    \ expected contextual result type '[String]'\n    return grades_string.characters.reversed()\n\
    \                                    ^\nSwift.Sequence:2:40: note: 'reversed()'\
    \ produces '[String.Element]' (aka 'Array<Character>'), not the expected contextual\
    \ result type '[String]'\n    @inlinable public __consuming func reversed() ->\
    \ [Self.Element]\n                                       ^\nSwift.BidirectionalCollection:2:40:\
    \ note: 'reversed()' produces 'ReversedCollection<String>', not the expected contextual\
    \ result type '[String]'\n    @inlinable public __consuming func reversed() ->\
    \ ReversedCollection<Self>\n                                       ^\n"
  stdout: ''
  timestamp: 1660014656
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    \n    // The first element\
    \ of the array is the GPA of the student who is grading\n    gradesArray.append(String(grades[0]))\n\
    \    \n    // The rest of the array is the letter grade for each GPA \n    for\
    \ grade in grades.dropFirst() {\n        let gradeLetter = letterGrade(grade)\n\
    \        gradesArray.append(gradeLetter)\n    }\n    \n    return gradesArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpz7x1srtr.swift:31:27: error: cannot find 'letterGrade' in scope\n\
    \        let gradeLetter = letterGrade(grade)\n                          ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014656
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    var gpa = grades[0]\n\
    \    var letterGrade = \"\"\n    for grade in grades {\n        if gpa > grade\
    \ {\n            letterGrade = \"A+\"\n            gpa -= grade\n        } else\
    \ if gpa < grade {\n            letterGrade = \"A-\"\n            gpa -= grade\n\
    \        } else if gpa == grade {\n            letterGrade = \"A\"\n         \
    \   gpa = 0\n        } else {\n            letterGrade = \"B+\"\n            gpa\
    \ -= grade\n        }\n        gradesArray.append(letterGrade)\n    }\n    return\
    \ gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpbguae9y8/tmpbguae9y8.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada3e8e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada3e5dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada3e5db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada3e5da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbguae9y8                        0x000055838b23d7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002ada3ead0460 __libc_start_main +
    245

    6    tmpbguae9y8                        0x000055838b23d319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014656
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var grades_string = \"\"\n    for i in 0..<grades.count {\n\
    \        if grades[i] >= 3.0 {\n            grades_string += \"A+\"\n        }\
    \ else if grades[i] >= 2.7 {\n            grades_string += \"B+\"\n        } else\
    \ if grades[i] >= 2.3 {\n            grades_string += \"B\"\n        } else if\
    \ grades[i] >= 1.7 && grades[i] < 2.3 {\n            grades_string += \"C+\"\n\
    \        } else if grades[i] >= 1.3 && grades[i] < 1.7 {\n            grades_string\
    \ += \"C\"\n        } else if grades[i] >= 1.0 {\n            grades_string +=\
    \ \"D+\"\n        } else if grades[i] < 1.0 {\n            grades_string += \"\
    D\"\n        } else {\n            grades_string += \"E\"\n        }\n    }\n\
    \    return grades_string.characters.map { String($0) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpm2_ouacp.swift:44:26: error: 'characters' is unavailable: Please\
    \ use String directly\n    return grades_string.characters.map { String($0) }\n\
    \                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n"
  stdout: ''
  timestamp: 1660014656
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var grades_string = \"\"\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var gpa_percent = gpa / grades.reduce(0, combine: *)\n    var\
    \ gpa_percent = Double(gpa_percent)\n    var letter_grade = \"\"\n    switch gpa_percent\
    \ {\n    case 0.0 < 0.1:\n        letter_grade = \"E\"\n    case 0.1 < 0.2:\n\
    \        letter_grade = \"D-\"\n    case 0.2 < 0.3:\n        letter_grade = \"\
    C+\"\n    case 0.3 < 0.4:\n        letter_grade = \"B-\"\n    case 0.4 < 0.5:\n\
    \        letter_grade = \"B+\"\n    case 0.5 < 0.6:\n        letter_grade = \"\
    A-\"\n    case 0.6 < 0.7:\n        letter_grade = \"A+\"\n    case 0.7 < 0.8:\n\
    \        letter_grade = \"A\"\n    case 0.8 < 0.9:\n        letter_grade = \"\
    A+\"\n    case 0.9 < 1.0:\n        letter_grade = \"B\"\n    case 1.0 < 1.1:\n\
    \        letter_grade = \"C\"\n    case 1.1 < 1.2:\n        letter_grade = \"\
    C+\"\n    case 1.2 < 1.3:\n        letter_grade = \"D\"\n    case 1.3 < 1.4:\n\
    \        letter_grade = \"D+\"\n    case 1.4 < 1.5:\n        letter_grade = \"\
    D-\"\n    case 1.5 < 1.6:\n        letter_grade = \"E\"\n    default:\n      \
    \  letter_grade = \"F\"\n    }\n    grades_string = grades_string + letter_grade\n\
    \    return grades_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpj1q2y0u1.swift:25:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n/tmp/tmpj1q2y0u1.swift:26:42:\
    \ error: extraneous argument label 'combine:' in call\n    var gpa_percent = gpa\
    \ / grades.reduce(0, combine: *)\n                                         ^ \
    \  ~~~~~~~~~\n                                             \n/tmp/tmpj1q2y0u1.swift:66:12:\
    \ error: cannot convert return expression of type 'String' to return type '[String]'\n\
    \    return grades_string\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014656
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var grades_string = \"\"\n    for grade in grades {\n   \
    \     switch grade {\n        case 4.0:\n            grades_string += \"A+\"\n\
    \        case 3.7:\n            grades_string += \"A\"\n        case 3.3:\n  \
    \          grades_string += \"A-\"\n        case 3.0:\n            grades_string\
    \ += \"B+\"\n        case 2.7:\n            grades_string += \"B\"\n        case\
    \ 2.3:\n            grades_string += \"B-\"\n        case 2.0:\n            grades_string\
    \ += \"C+\"\n        case 1.7:\n            grades_string += \"C\"\n        case\
    \ 1.3:\n            grades_string += \"C-\"\n        case 1.0:\n            grades_string\
    \ += \"D+\"\n        case 0.7:\n            grades_string += \"D\"\n        case\
    \ 0.0:\n            grades_string += \"D-\"\n        case 0.1:\n            grades_string\
    \ += \"E\"\n        default:\n            grades_string += \"E\"\n        }\n\
    \    }\n    return grades_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbiw_ro1q.swift:57:12: error: cannot convert return expression of\
    \ type 'String' to return type '[String]'\n    return grades_string\n        \
    \   ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014656
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    var totalGrade = grades.reduce(0,\
    \ combine: +)\n    var averageGrade = totalGrade / Double(grades.count)\n    var\
    \ gradeIndex = 0\n    for grade in grades {\n        gradeIndex += 1\n       \
    \ if grade >= averageGrade {\n            gradesArray.append(String(gradeIndex))\n\
    \        }\n    }\n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9x191mjq.swift:25:35: error: extraneous argument label 'combine:'\
    \ in call\n    var totalGrade = grades.reduce(0, combine: +)\n               \
    \                   ^   ~~~~~~~~~\n                                      \n"
  stdout: ''
  timestamp: 1660014656
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var grades_letters: [String] = []\n    var gpa: Double =\
    \ 0.0\n    for grade in grades {\n        gpa += grade\n        if gpa > 4.0 {\n\
    \            grades_letters.append(\"A+\")\n            gpa = gpa - 4.0\n    \
    \    } else if gpa > 3.7 {\n            grades_letters.append(\"A\")\n       \
    \     gpa = gpa - 3.7\n        } else if gpa > 3.3 {\n            grades_letters.append(\"\
    A-\")\n            gpa = gpa - 3.3\n        } else if gpa > 3.0 {\n          \
    \  grades_letters.append(\"B+\")\n            gpa = gpa - 3.0\n        } else\
    \ if gpa > 2.7 {\n            grades_letters.append(\"B\")\n            gpa =\
    \ gpa - 2.7\n        } else if gpa > 2.3 {\n            grades_letters.append(\"\
    B-\")\n            gpa = gpa - 2.3\n        } else if gpa > 2.0 {\n          \
    \  grades_letters.append(\"C+\")\n            gpa = gpa - 2.0\n        } else\
    \ if gpa > 1.7 {\n            grades_letters.append(\"C\")\n            gpa =\
    \ gpa - 1.7\n        } else if gpa > 1.3 {\n            grades_letters.append(\"\
    C-\")\n            gpa = gpa - 1.3\n        } else if gpa > 1.0 {\n          \
    \  grades_letters.append(\"D+\")\n            gpa = gpa - 1.0\n        } else\
    \ if gpa > 0.7 {\n            grades_letters.append(\"D\")\n            gpa =\
    \ gpa - 0.7\n        } else if gpa > 0.0 {\n            grades_letters.append(\"\
    D-\")\n            gpa = gpa - 0.0\n        } else {\n            grades_letters.append(\"\
    E\")\n        }\n    }\n    return grades_letters\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp82gu9mcr/tmp82gu9mcr.swift:84: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b46c5730c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b46c5427b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b46c5427988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b46c54267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp82gu9mcr                        0x0000564401b197a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b46c591c460 __libc_start_main +
    245

    6    tmp82gu9mcr                        0x0000564401b192c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014656
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var grades_string = \"\"\n    for grade in grades {\n   \
    \     if grade >= 4.0 {\n            grades_string += \"A+\"\n        } else if\
    \ grade >= 3.7 {\n            grades_string += \"A\"\n        } else if grade\
    \ >= 3.3 {\n            grades_string += \"A-\"\n        } else if grade >= 3.0\
    \ {\n            grades_string += \"B+\"\n        } else if grade >= 2.7 {\n \
    \           grades_string += \"B\"\n        } else if grade >= 2.3 {\n       \
    \     grades_string += \"B-\"\n        } else if grade >= 2.0 {\n            grades_string\
    \ += \"C+\"\n        } else if grade >= 1.7 {\n            grades_string += \"\
    C\"\n        } else if grade >= 1.3 {\n            grades_string += \"C-\"\n \
    \       } else if grade >= 1.0 {\n            grades_string += \"D+\"\n      \
    \  } else if grade >= 0.7 {\n            grades_string += \"D\"\n        } else\
    \ if grade >= 0.0 {\n            grades_string += \"D-\"\n        } else {\n \
    \           grades_string += \"E\"\n        }\n    }\n    return grades_string.characters.reversed().map\
    \ { String($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmplo983bua.swift:54:26: error: 'characters' is unavailable: Please\
    \ use String directly\n    return grades_string.characters.reversed().map { String($0)\
    \ }\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014656
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var grades_string = \"\"\n    for grade in grades {\n   \
    \     let letter = grade_letters[grade]\n        grades_string += letter\n   \
    \ }\n    return grades_string.characters.split{$0 == \" \"}.map(String.init)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpmdk6syo4.swift:26:22: error: cannot find 'grade_letters' in scope\n\
    \        let letter = grade_letters[grade]\n                     ^~~~~~~~~~~~~\n\
    /tmp/tmpmdk6syo4.swift:29:26: error: 'characters' is unavailable: Please use String\
    \ directly\n    return grades_string.characters.split{$0 == \" \"}.map(String.init)\n\
    \                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n"
  stdout: ''
  timestamp: 1660014656
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var grades_string = \"\"\n    for grade in grades {\n   \
    \     switch grade {\n        case 0...0.1:\n            grades_string += \"E\"\
    \n        case 0.1:\n            grades_string += \"D+\"\n        case 0.2:\n\
    \            grades_string += \"D\"\n        case 0.3:\n            grades_string\
    \ += \"C+\"\n        case 0.4:\n            grades_string += \"C\"\n        case\
    \ 0.5:\n            grades_string += \"B+\"\n        case 0.6:\n            grades_string\
    \ += \"B\"\n        case 0.7:\n            grades_string += \"A-\"\n        case\
    \ 0.8:\n            grades_string += \"A\"\n        case 0.9:\n            grades_string\
    \ += \"A+\"\n        case 1.0:\n            grades_string += \"A\"\n        default:\n\
    \            grades_string += \"A\"\n        }\n    }\n    return grades_string\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmple5z8w4v.swift:53:12: error: cannot convert return expression of\
    \ type 'String' to return type '[String]'\n    return grades_string\n        \
    \   ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014656
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    var gpa = grades[0]\n\
    \    for grade in grades {\n        if gpa > 3.0 {\n            gradesArray.append(\"\
    A+\")\n        } else if gpa > 2.7 {\n            gradesArray.append(\"A\")\n\
    \        } else if gpa > 2.3 {\n            gradesArray.append(\"A-\")\n     \
    \   } else if gpa > 1.7 && gpa < 2.0 {\n            gradesArray.append(\"B+\"\
    )\n        } else if gpa > 1.3 && gpa < 1.7 {\n            gradesArray.append(\"\
    B\")\n        } else if gpa > 1.0 && gpa < 1.3 {\n            gradesArray.append(\"\
    B-\")\n        } else if gpa > 0.7 && gpa < 1.0 {\n            gradesArray.append(\"\
    C+\")\n        } else if gpa > 0.3 && gpa < 0.7 {\n            gradesArray.append(\"\
    C\")\n        } else if gpa > 0.0 {\n            gradesArray.append(\"C-\")\n\
    \        } else {\n            gradesArray.append(\"D+\")\n        }\n       \
    \ gpa -= grade\n    }\n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmppfob693s/tmppfob693s.swift:66: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e16947c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e1663eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e1663e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e1663d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppfob693s                        0x00005556f32b07f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b1e16b33460 __libc_start_main +
    245

    6    tmppfob693s                        0x00005556f32b0319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014656
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var letterGrade = \"\"\n    switch gpa {\n    case 4.0:\n \
    \       letterGrade = \"A+\"\n    case 3.7:\n        letterGrade = \"A\"\n   \
    \ case 3.3:\n        letterGrade = \"A-\"\n    case 3.0:\n        letterGrade\
    \ = \"B+\"\n    case 2.7:\n        letterGrade = \"B\"\n    case 2.3:\n      \
    \  letterGrade = \"B-\"\n    case 2.0:\n        letterGrade = \"C+\"\n    case\
    \ 1.7:\n        letterGrade = \"C\"\n    case 1.3:\n        letterGrade = \"C-\"\
    \n    case 1.0:\n        letterGrade = \"D+\"\n    case 0.7:\n        letterGrade\
    \ = \"D\"\n    case 0.0:\n        letterGrade = \"D-\"\n    case 0.1:\n      \
    \  letterGrade = \"E\"\n    default:\n        letterGrade = \"E\"\n    }\n   \
    \ letterGrades.append(letterGrade)\n    return letterGrades\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5mo23goz.swift:25:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n"
  stdout: ''
  timestamp: 1660014656
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var grades_string = \"\"\n    for grade in grades {\n   \
    \     if grade < 3.0 {\n            grades_string += \"A+\"\n        } else if\
    \ grade < 3.7 {\n            grades_string += \"A\"\n        } else if grade <\
    \ 4.0 {\n            grades_string += \"B+\"\n        } else if grade < 4.7 {\n\
    \            grades_string += \"B\"\n        } else if grade < 5.0 {\n       \
    \     grades_string += \"B-\"\n        } else if grade < 5.7 {\n            grades_string\
    \ += \"B\"\n        } else if grade < 6.0 {\n            grades_string += \"C+\"\
    \n        } else if grade < 6.7 {\n            grades_string += \"C\"\n      \
    \  } else if grade < 7.0 {\n            grades_string += \"C-\"\n        } else\
    \ if grade < 7.7 {\n            grades_string += \"C\"\n        } else if grade\
    \ < 8.0 {\n            grades_string += \"D+\"\n        } else if grade < 8.7\
    \ {\n            grades_string += \"D\"\n        } else if grade < 9.0 {\n   \
    \         grades_string += \"D-\"\n        } else if grade < 9.7 {\n         \
    \   grades_string += \"D\"\n        } else if grade < 10.0 {\n            grades_string\
    \ += \"E\"\n        } else {\n            grades_string += \"F\"\n        }\n\
    \    }\n    return grades_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpecl6kq4o.swift:60:12: error: cannot convert return expression of\
    \ type 'String' to return type '[String]'\n    return grades_string\n        \
    \   ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014656
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var grades_string = \"\"\n    var total_grades = grades.reduce(0,\
    \ combine: +)\n    var total_letter_grade = \"\"\n    var total_letter_grade_index\
    \ = 0\n    var total_letter_grade_index2 = 0\n    var total_letter_grade_index3\
    \ = 0\n    var total_letter_grade_index4 = 0\n    var total_letter_grade_index5\
    \ = 0\n    var total_letter_grade_index6 = 0\n    var total_letter_grade_index7\
    \ = 0\n    var total_letter_grade_index8 = 0\n    var total_letter_grade_index9\
    \ = 0\n    var total_letter_grade_index10 = 0\n    var total_letter_grade_index11\
    \ = 0\n    var total_letter_grade_index12 = 0\n    var total_letter_grade_index13\
    \ = 0\n    var total_letter_grade_index14 = 0\n    var total_letter_grade_index15\
    \ = 0\n    var total_letter_grade_index16 = 0\n    var total_letter_grade_index17\
    \ = 0\n    var total_letter_grade_index18 = 0\n    var total_letter_grade_index19\
    \ = 0\n    var total_letter_grade_index20 = 0\n    var total_letter_grade_index21\
    \ = 0\n    var total_letter_grade_index22 = 0\n    var total_letter_grade_index23\
    \ = 0\n    var total_letter_grade_index24 = 0\n    var total_letter_grade_index25\
    \ = 0\n    var total_letter_grade_index26 = 0\n    var total_letter_grade_index27\
    \ = 0\n    var total_letter_grade_index28 = 0\n    var total_letter_grade_index29\
    \ = 0\n    var total_letter_grade_index30 = 0\n    var total_letter_grade_index31\
    \ = 0\n    var total_letter_grade_index32 = 0\n    var total_letter_grade_index33\
    \ = 0\n    var total_letter_grade_index34 = 0\n    var total_letter_grade_index35\
    \ = 0\n    var total_letter_grade_index36 = 0\n    var total_letter_grade_index37\
    \ = 0\n    var total_letter_grade_index38 = 0\n    var total_letter_grade_index39\
    \ = 0\n    var total_letter_grade_index40 = 0\n    var total_letter_grade_index41\
    \ = 0\n    var total_letter_grade_index42 = 0\n    var total_letter_grade_index43\
    \ = 0\n    var total_letter_grade_index44 = 0\n    var total_letter_grade_index45\
    \ = 0\n    var total_letter_grade_index46 = 0\n    var total_letter_grade_index47\
    \ = 0\n    var total_letter_grade_index48 = 0\n    var total_letter_grade_index49\
    \ = 0\n    var total_letter_grade_index50 = 0\n    var total_letter_grade_index51\
    \ = 0\n    var total_letter_grade_index52 = 0\n    var total_letter_grade_index53\
    \ = 0\n    var total_letter_grade_index54 = 0\n    var total_letter_grade_index55\
    \ = 0\n    var total_letter_grade_index56 = 0\n    var total_letter_grade_index57\
    \ = 0\n    var total_letter_grade_index58 = 0\n    var total_letter_grade_index59\
    \ = 0\n    var total_letter_grade_index60 = 0\n    var total_letter_grade_index61\
    \ = 0\n    var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpc5kxifzf.swift:88:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpc5kxifzf.swift:25:37: error: extraneous argument label 'combine:'\
    \ in call\n    var total_grades = grades.reduce(0, combine: +)\n             \
    \                       ^   ~~~~~~~~~\n                                      \
    \  \n"
  stdout: ''
  timestamp: 1660014656
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    var gpa: Double = 0\n\
    \    var letterGrade: String = \"\"\n    \n    for grade in grades {\n       \
    \ gpa = grade * 4\n        \n        if gpa > 3.7 {\n            letterGrade =\
    \ \"A+\"\n        } else if gpa > 3.3 {\n            letterGrade = \"A\"\n   \
    \     } else if gpa > 3 {\n            letterGrade = \"A-\"\n        } else if\
    \ gpa > 2.7 {\n            letterGrade = \"B+\"\n        } else if gpa > 2.3 {\n\
    \            letterGrade = \"B\"\n        } else if gpa > 2 {\n            letterGrade\
    \ = \"B-\"\n        } else if gpa > 1.7 {\n            letterGrade = \"C+\"\n\
    \        } else if gpa > 1.3 {\n            letterGrade = \"C\"\n        } else\
    \ if gpa > 1 {\n            letterGrade = \"C-\"\n        } else if gpa > 0.7\
    \ {\n            letterGrade = \"D+\"\n        } else if gpa > 0 {\n         \
    \   letterGrade = \"D\"\n        } else {\n            letterGrade = \"D-\"\n\
    \        }\n        \n        gradesArray.append(letterGrade)\n    }\n    \n \
    \   return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp6_hzax23/tmp6_hzax23.swift:76: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5faee00c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5faeaf7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5faeaf7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5faeaf67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6_hzax23                        0x00005646787377a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b5faefec460 __libc_start_main +
    245

    6    tmp6_hzax23                        0x00005646787372c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014656
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = grades\n    var gradesArrayCopy = gradesArray\n\
    \    var gradesArrayCopyCount = gradesArray.count\n    var gradesArrayCopyIndex\
    \ = 0\n    var gradesArrayCopyIndexCount = 0\n    var gradesArrayCopyIndexCountMax\
    \ = gradesArrayCopyCount - 1\n    var gradesArrayCopyIndexCountMin = 0\n    var\
    \ gradesArrayCopyIndexCountMinMax = gradesArrayCopyCount - 1\n    var gradesArrayCopyIndexCountMaxMin\
    \ = 0\n    var gradesArrayCopyIndexCountMaxMinMax = gradesArrayCopyCount - 1\n\
    \    var gradesArrayCopyIndexCountMinMaxMin = 0\n    var gradesArrayCopyIndexCountMinMaxMinMax\
    \ = gradesArrayCopyCount - 1\n    var gradesArrayCopyIndexCountMaxMinMaxMin =\
    \ 0\n    var gradesArrayCopyIndexCountMaxMinMaxMinMax = gradesArrayCopyCount -\
    \ 1\n    var gradesArrayCopyIndexCountMinMaxMinMaxMin = 0\n    var gradesArrayCopyIndexCountMinMaxMinMaxMinMax\
    \ = gradesArrayCopyCount - 1\n    var gradesArrayCopyIndexCountMaxMinMaxMinMaxMin\
    \ = 0\n    var gradesArrayCopyIndexCountMaxMinMaxMinMaxMinMax = gradesArrayCopyCount\
    \ - 1\n    var gradesArrayCopyIndexCountMinMaxMinMaxMinMaxMin = 0\n    var gradesArrayCopyIndexCountMinMaxMinMaxMinMaxMinMax\
    \ = gradesArrayCopyCount - 1\n    var gradesArrayCopyIndexCountMaxMinMaxMinMaxMinMaxMin\
    \ = 0\n    var gradesArrayCopyIndexCountMaxMinMaxMinMaxMinMaxMinMax = gradesArrayCopyCount\
    \ - 1\n    var gradesArrayCopyIndexCountMinMaxMinMaxMinMaxMinMaxMin = 0\n    var\
    \ gradesArrayCopyIndexCountMinMaxMinMaxMinMaxMinMaxMinMax = gradesArrayCopyCount\
    \ - 1\n    var gradesArrayCopyIndexCountMaxMinMaxMinMaxMinMaxMinMaxMin = 0\n \
    \   var gradesArrayCopyIndexCountMaxMinMaxMinMaxMinMaxMinMaxMinMax = gradesArrayCopyCount\
    \ - 1\n    var gradesArrayCopyIndexCountMinMaxMinMaxMinMaxMinMaxMinMaxMin = 0\n\
    \    var gradesArrayCopyIndexCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = gradesArrayCopyCount\
    \ - 1\n    var gradesArrayCopyIndexCountMaxMinMaxMinMaxMinMaxMinMaxMinMaxMin =\
    \ 0\n    var gradesArrayCopyIndexCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax\
    \ = \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgd2rhdvy.swift:53:78: error: expected initial value after '='\n\
    \    var gradesArrayCopyIndexCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax =\
    \ \n                                                                         \
    \    ^\n"
  stdout: ''
  timestamp: 1660014656
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    var sum = 0.0\n    for\
    \ grade in grades {\n        sum += grade\n    }\n    var average = sum / Double(grades.count)\n\
    \    for grade in grades {\n        if grade >= average {\n            gradesArray.append(\"\
    A+\")\n        } else if grade < average && grade >= 3.0 {\n            gradesArray.append(\"\
    A\")\n        } else if grade < 3.0 && grade >= 2.0 {\n            gradesArray.append(\"\
    B+\")\n        } else if grade < 2.0 && grade >= 1.0 {\n            gradesArray.append(\"\
    B\")\n        } else if grade < 1.0 && grade >= 0.7 {\n            gradesArray.append(\"\
    B-\")\n        } else if grade < 0.7 && grade >= 0.3 {\n            gradesArray.append(\"\
    C+\")\n        } else if grade < 0.3 && grade >= 0.1 {\n            gradesArray.append(\"\
    C\")\n        } else if grade < 0.1 && grade >= 0.0 {\n            gradesArray.append(\"\
    C-\")\n        } else if grade < 0.0 {\n            gradesArray.append(\"D+\"\
    )\n        } else if grade < 0.0 && grade >= -0.1 {\n            gradesArray.append(\"\
    D\")\n        } else if grade < -0.1 && grade >= -0.3 {\n            gradesArray.append(\"\
    D-\")\n        } else if grade < -0.3 {\n            gradesArray.append(\"E\"\
    )\n        }\n    }\n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpotka9pdl/tmpotka9pdl.swift:73: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adcbc4aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adcbc1a1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adcbc1a1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adcbc1a07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpotka9pdl                        0x00005615127f6856 <unavailable> + 6230

    5    libc.so.6                          0x00002adcbc696460 __libc_start_main +
    245

    6    tmpotka9pdl                        0x00005615127f6379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660014656
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var grades_string = \"\"\n    for grade in grades {\n   \
    \     switch grade {\n        case 4.0:\n            grades_string += \"A+\"\n\
    \        case 3.7:\n            grades_string += \"A\"\n        case 3.3:\n  \
    \          grades_string += \"A-\"\n        case 3.0:\n            grades_string\
    \ += \"B+\"\n        case 2.7:\n            grades_string += \"B\"\n        case\
    \ 2.3:\n            grades_string += \"B-\"\n        case 2.0:\n            grades_string\
    \ += \"C+\"\n        case 1.7:\n            grades_string += \"C\"\n        case\
    \ 1.3:\n            grades_string += \"C-\"\n        case 1.0:\n            grades_string\
    \ += \"D+\"\n        case 0.7:\n            grades_string += \"D\"\n        case\
    \ 0.0:\n            grades_string += \"D-\"\n        case 0.0:\n            grades_string\
    \ += \"E\"\n        default:\n            break\n        }\n    }\n    return\
    \ grades_string.characters.split{$0 == \" \"}.map(String.init)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmphsos9amu.swift:51:14: warning: literal value is already handled\
    \ by previous pattern; consider removing it\n        case 0.0:\n             ^~~\n\
    /tmp/tmphsos9amu.swift:49:14: note: first occurrence of identical literal pattern\
    \ is here\n        case 0.0:\n             ^~~\n/tmp/tmphsos9amu.swift:57:26:\
    \ error: 'characters' is unavailable: Please use String directly\n    return grades_string.characters.split{$0\
    \ == \" \"}.map(String.init)\n                         ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014656
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    var gradesArrayCopy:\
    \ [Double] = grades\n    gradesArrayCopy.removeFirst()\n    gradesArrayCopy.removeLast()\n\
    \    gradesArrayCopy.removeLast()\n    gradesArrayCopy.removeLast()\n    gradesArrayCopy.removeLast()\n\
    \    gradesArrayCopy.removeLast()\n    gradesArrayCopy.removeLast()\n    gradesArrayCopy.removeLast()\n\
    \    gradesArrayCopy.removeLast()\n    gradesArrayCopy.removeLast()\n    gradesArrayCopy.removeLast()\n\
    \    gradesArrayCopy.removeLast()\n    gradesArrayCopy.removeLast()\n    gradesArrayCopy.removeLast()\n\
    \    gradesArrayCopy.removeLast()\n    gradesArrayCopy.removeLast()\n    gradesArrayCopy.removeLast()\n\
    \    gradesArrayCopy.removeLast()\n    gradesArrayCopy.removeLast()\n    gradesArrayCopy.removeLast()\n\
    \    gradesArrayCopy.removeLast()\n    gradesArrayCopy.removeLast()\n    gradesArrayCopy.removeLast()\n\
    \    gradesArrayCopy.removeLast()\n    gradesArrayCopy.removeLast()\n    gradesArrayCopy.removeLast()\n\
    \    gradesArrayCopy.removeLast()\n    gradesArrayCopy.removeLast()\n    gradesArrayCopy.removeLast()\n\
    \    gradesArrayCopy.removeLast()\n    gradesArrayCopy.removeLast()\n    gradesArrayCopy.removeLast()\n\
    \    gradesArrayCopy.removeLast()\n    gradesArrayCopy.removeLast()\n    gradesArrayCopy.removeLast()\n\
    \    gradesArrayCopy.removeLast()\n    gradesArrayCopy.removeLast()\n    gradesArrayCopy.removeLast()\n\
    \    gradesArrayCopy.removeLast()\n    gradesArrayCopy.removeLast()\n    gradesArrayCopy.removeLast()\n\
    \    gradesArrayCopy.removeLast()\n    gradesArrayCopy.removeLast()\n    gradesArrayCopy.removeLast()\n\
    \    gradesArrayCopy.removeLast()\n    gradesArrayCopy.removeLast()\n    gradesArrayCopy.removeLast()\n\
    \    gradesArrayCopy.removeLast()\n    gradesArrayCopy.removeLast()\n    gradesArrayCopy.removeLast()\n\
    \    gradesArrayCopy.removeLast()\n    gradesArrayCopy.removeLast()\n    gradesArrayCopy.removeLast()\n\
    \    gradesArrayCopy.removeLast()\n    gradesArrayCopy.removeLast\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmps9h4w_px.swift:80:21: error: type of expression is ambiguous without\
    \ more context\n    gradesArrayCopy.removeLast\n    ~~~~~~~~~~~~~~~~^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014656
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var letterGrade = \"\"\n    \n    if gpa < 4.0 {\n        letterGrade\
    \ = \"A+\"\n    }\n    else if gpa >= 4.0 && gpa < 3.7 {\n        letterGrade\
    \ = \"A\"\n    }\n    else if gpa >= 3.7 && gpa < 3.3 {\n        letterGrade =\
    \ \"A-\"\n    }\n    else if gpa >= 3.3 && gpa < 3.0 {\n        letterGrade =\
    \ \"B+\"\n    }\n    else if gpa >= 3.0 && gpa < 2.7 {\n        letterGrade =\
    \ \"B\"\n    }\n    else if gpa >= 2.7 && gpa < 2.3 {\n        letterGrade = \"\
    B-\"\n    }\n    else if gpa >= 2.3 && gpa < 2.0 {\n        letterGrade = \"C+\"\
    \n    }\n    else if gpa >= 2.0 && gpa < 1.7 {\n        letterGrade = \"C\"\n\
    \    }\n    else if gpa >= 1.7 && gpa < 1.3 {\n        letterGrade = \"C-\"\n\
    \    }\n    else if gpa >= 1.3 && gpa < 1.0 {\n        letterGrade = \"D+\"\n\
    \    }\n    else if gpa >= 1.0 && gpa < 0.7 {\n        letterGrade = \"D\"\n \
    \   }\n    else if gpa >= 0.7 && gpa < 0.0 {\n        letterGrade = \"D-\"\n \
    \   }\n    else {\n        letterGrade = \"E\"\n    }\n    \n    gradesArray.append(letterGrade)\n\
    \    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpmd9q7d4d.swift:25:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n"
  stdout: ''
  timestamp: 1660014656
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var grades_string = \"\"\n    var grades_string_array = [String]()\n\
    \    \n    for grade in grades {\n        if grade < 3.0 {\n            grades_string_array.append(String(grade\
    \ * 2))\n        } else if grade < 3.3 {\n            grades_string_array.append(String(grade\
    \ * 3))\n        } else if grade < 3.7 {\n            grades_string_array.append(String(grade\
    \ * 4))\n        } else if grade < 4.0 {\n            grades_string_array.append(String(grade\
    \ * 5))\n        } else if grade < 4.3 {\n            grades_string_array.append(String(grade\
    \ * 6))\n        } else if grade < 4.7 {\n            grades_string_array.append(String(grade\
    \ * 7))\n        } else if grade < 5.0 {\n            grades_string_array.append(String(grade\
    \ * 8))\n        } else if grade < 5.3 {\n            grades_string_array.append(String(grade\
    \ * 9))\n        } else if grade < 5.7 {\n            grades_string_array.append(String(grade\
    \ * 10))\n        } else if grade < 6.0 {\n            grades_string_array.append(String(grade\
    \ * 11))\n        } else if grade < 6.3 {\n            grades_string_array.append(String(grade\
    \ * 12))\n        } else if grade < 6.7 {\n            grades_string_array.append(String(grade\
    \ * 13))\n        } else if grade < 7.0 {\n            grades_string_array.append(String(grade\
    \ * 14))\n        } else if grade < 7.3 {\n            grades_string_array.append(String(grade\
    \ * 15))\n        } else if grade < 7.7 {\n            grades_string_array.append(String(grade\
    \ * 16))\n        } else if grade < 8.0 {\n            grades_string_array.append(String(grade\
    \ * 17))\n        } else if grade < 8.3 {\n            grades_string_array.append(String(grade\
    \ * 18))\n        } else if grade < 8.7 {\n            grades_string_array.append(String(grade\
    \ * 19))\n        } else if grade < 9.0 {\n            grades_string_array.append(String(grade\
    \ * 20))\n        } else if grade < 9.3 {\n            grades_string_array.append(String(grade\
    \ * 21))\n        } else if grade < 9.7 {\n            grades_string_array.append(String(grade\
    \ * 22))\n        } else if grade < 10.0 {\n            grades_string_array.append(String(grade\
    \ * 23))\n        } else if grade < 10.3 {\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpb4d4xo7f.swift:93:66: error: expected '}' at end of brace statement\n\
    assert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"])\n      \
    \                                                           ^\n/tmp/tmpb4d4xo7f.swift:27:25:\
    \ note: to match this opening '{'\n    for grade in grades {\n               \
    \         ^\n/tmp/tmpb4d4xo7f.swift:93:66: error: expected '}' at end of brace\
    \ statement\nassert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"\
    ])\n                                                                 ^\n/tmp/tmpb4d4xo7f.swift:23:59:\
    \ note: to match this opening '{'\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n                                                          ^\n\
    /tmp/tmpb4d4xo7f.swift:76:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n/tmp/tmpb4d4xo7f.swift:24:9: warning: initialization of variable\
    \ 'grades_string' was never used; consider replacing with assignment to '_' or\
    \ removing it\n    var grades_string = \"\"\n    ~~~~^~~~~~~~~~~~~\n    _\n"
  stdout: ''
  timestamp: 1660014656
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    var gpa: Double = 0.0\n\
    \    var letterGrade: String = \"\"\n    for grade in grades {\n        gpa =\
    \ grade * 4.0\n        if gpa > 3.7 {\n            letterGrade = \"A+\"\n    \
    \    } else if gpa > 3.3 {\n            letterGrade = \"A\"\n        } else if\
    \ gpa > 3.0 {\n            letterGrade = \"B+\"\n        } else if gpa > 2.7 {\n\
    \            letterGrade = \"B\"\n        } else if gpa > 2.3 {\n            letterGrade\
    \ = \"B-\"\n        } else if gpa > 2.0 {\n            letterGrade = \"C+\"\n\
    \        } else if gpa > 1.7 {\n            letterGrade = \"C\"\n        } else\
    \ if gpa > 1.3 {\n            letterGrade = \"C-\"\n        } else if gpa > 1.0\
    \ {\n            letterGrade = \"D+\"\n        } else if gpa > 0.7 {\n       \
    \     letterGrade = \"D\"\n        } else if gpa > 0.0 {\n            letterGrade\
    \ = \"D-\"\n        } else {\n            letterGrade = \"E\"\n        }\n   \
    \     gradesArray.append(letterGrade)\n    }\n    return gradesArray\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpqpz4_i90/tmpqpz4_i90.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4e93d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4e90c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4e90c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4e90c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqpz4_i90                        0x000055ca9ab447a6 <unavailable> + 6054

    5    libc.so.6                          0x00002ae4e95bc460 __libc_start_main +
    245

    6    tmpqpz4_i90                        0x000055ca9ab442c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014655
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades = [String]()\n    \n    // The first letter\
    \ grade is always A+\n    letterGrades.append(\"A+\")\n    \n    // The second\
    \ letter grade is always A if GPA > 4.0\n    if grades[0] > 4.0 {\n        letterGrades.append(\"\
    A\")\n    }\n    \n    // The third letter grade is always A if GPA > 3.7\n  \
    \  if grades[1] > 3.7 {\n        letterGrades.append(\"A\")\n    }\n    \n   \
    \ // The fourth letter grade is always B if GPA > 3.3\n    if grades[2] > 3.3\
    \ {\n        letterGrades.append(\"B\")\n    }\n    \n    // The fifth letter\
    \ grade is always B if GPA > 3.0\n    if grades[3] > 3.0 {\n        letterGrades.append(\"\
    B\")\n    }\n    \n    // The sixth letter grade is always C if GPA > 2.7\n  \
    \  if grades[4] > 2.7 {\n        letterGrades.append(\"C\")\n    }\n    \n   \
    \ // The seventh letter grade is always C if GPA > 2.3\n    if grades[5] > 2.3\
    \ {\n        letterGrades.append(\"C\")\n    }\n    \n    // The eighth letter\
    \ grade is always D if GPA > 2.0\n    if grades[6] > 2.0 {\n        letterGrades.append(\"\
    D\")\n    }\n    \n    // The ninth letter grade is always D if GPA > 1.7\n  \
    \  if grades[7] > 1.7 {\n        letterGrades.append(\"D\")\n    }\n    \n   \
    \ // The tenth letter grade is always E if GPA > 1.0\n    if grades[8] > 1.0 {\n\
    \        letterGrades.append(\"E\")\n    }\n    \n    // The eleventh letter grade\
    \ is always E if GPA > 0.7\n    if grades[9] > 0.7 {\n        letterGrades.append(\"\
    E\")\n    }\n    \n    // The twelfth letter grade is always E if GPA > 0.0\n\
    \    if grades[10] > 0.0 {\n        letterGrades.append(\"E\")\n    }\n    \n\
    \    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b6f77e0bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6f77b02561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6f77b02286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6f77b0213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6f77b01bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b6f77901f44 <unavailable> + 188228

    6    tmphrur7uv0                        0x0000555ef16da16f <unavailable> + 8559

    7    tmphrur7uv0                        0x0000555ef16d954d <unavailable> + 5453

    8    libc.so.6                          0x00002b6f77ff7460 __libc_start_main +
    245

    9    tmphrur7uv0                        0x0000555ef16d9209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014656
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = grades\n    gradesArray = gradesArray.reversed()\n\
    \    var gradesArrayCount = gradesArray.count\n    var gradesArraySum = gradesArray.reduce(0,\
    \ +)\n    var gradesArrayAverage = gradesArraySum / gradesArrayCount\n    var\
    \ gradesArrayMin = gradesArray.reduce(0, min)\n    var gradesArrayMax = gradesArray.reduce(0,\
    \ max)\n    var gradesArraySumOfSquares = gradesArray.reduce(0, { $0 * $0 })\n\
    \    var gradesArraySumOfSquaresOfDifference = gradesArray.reduce(0, { $0 + $1\
    \ })\n    var gradesArraySumOfSquaresOfDifferenceSquare = gradesArray.reduce(0,\
    \ { $0 + $0 + $1 })\n    var gradesArraySumOfSquaresOfDifferenceSquareOfDifference\
    \ = gradesArray.reduce(0, { $0 + $0 + $0 + $1 })\n    var gradesArraySumOfSquaresOfDifferenceSquareOfDifferenceSquare\
    \ = gradesArray.reduce(0, { $0 + $0 + $0 + $0 + $1 })\n    var gradesArraySumOfSquaresOfDifferenceSquareOfDifferenceSquareOfDifference\
    \ = gradesArray.reduce(0, { $0 + $0 + $0 + $0 + $0 + $1 })\n    var gradesArraySumOfSquaresOfDifferenceSquareOfDifferenceSquareOfDifferenceSquare\
    \ = gradesArray.reduce(0, { $0 + $0 + $0 + $0 + $0 + $0 + $1 })\n    var gradesArraySumOfSquaresOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifference\
    \ = gradesArray.reduce(0, { $0 + $0 + $0 + $0 + $0 + $0 + $0 + $1 })\n    var\
    \ gradesArraySumOfSquaresOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifference\
    \ = gradesArray.reduce(0, { $0 + $0 + $0 + $0 + $0 + $0 + $0 + $0 + $0 + $1 })\n\
    \    var gradesArraySumOfSquaresOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquare\
    \ = gradesArray.reduce(0, { $0 + $0 + $0 + $0 + $0 + $0 + $0 + $0 + $0 + $0 +\
    \ $1 })\n    var gradesArraySumOfSquaresOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquare\
    \ = gradesArray.reduce(0, { $0 + $0 + $0 + $0 + $0 + $0 + $0 + $0 + $0 + $0 +\
    \ $0 + $1 })\n    var gradesArraySumOfSquares\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp7pz3oxrz.swift:28:45: error: binary operator '/' cannot be applied\
    \ to operands of type 'Double' and 'Int'\n    var gradesArrayAverage = gradesArraySum\
    \ / gradesArrayCount\n                             ~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~~\n\
    /tmp/tmp7pz3oxrz.swift:28:45: note: overloads for '/' exist with these partially\
    \ matching parameter lists: (Double, Double), (Int, Int)\n    var gradesArrayAverage\
    \ = gradesArraySum / gradesArrayCount\n                                      \
    \      ^\n/tmp/tmp7pz3oxrz.swift:31:57: error: contextual closure type '(Int,\
    \ Double) throws -> Int' expects 2 arguments, but 1 was used in closure body\n\
    \    var gradesArraySumOfSquares = gradesArray.reduce(0, { $0 * $0 })\n      \
    \                                                  ^\n/tmp/tmp7pz3oxrz.swift:39:9:\
    \ error: invalid redeclaration of 'gradesArraySumOfSquaresOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifference'\n\
    \    var gradesArraySumOfSquaresOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifference\
    \ = gradesArray.reduce(0, { $0 + $0 + $0 + $0 + $0 + $0 + $0 + $0 + $0 + $1 })\n\
    \        ^\n/tmp/tmp7pz3oxrz.swift:38:9: note: 'gradesArraySumOfSquaresOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifference'\
    \ previously declared here\n    var gradesArraySumOfSquaresOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifference\
    \ = gradesArray.reduce(0, { $0 + $0 + $0 + $0 + $0 + $0 + $0 + $1 })\n       \
    \ ^\n/tmp/tmp7pz3oxrz.swift:41:9: error: invalid redeclaration of 'gradesArraySumOfSquaresOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquare'\n\
    \    var gradesArraySumOfSquaresOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquare\
    \ = gradesArray.reduce(0, { $0 + $0 + $0 + $0 + $0 + $0 + $0 + $0 + $0 + $0 +\
    \ $0 + $1 })\n        ^\n/tmp/tmp7pz3oxrz.swift:40:9: note: 'gradesArraySumOfSquaresOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquare'\
    \ previously declared here\n    var gradesArraySumOfSquaresOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquare\
    \ = grad"
  stdout: ''
  timestamp: 1660014656
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    var totalGrade: Double\
    \ = 0\n    var totalGradeIndex = 0\n    var gradeIndex = 0\n    var grade: Double\
    \ = 0\n    var gradeLetter: Character = \"E\"\n    \n    for grade in grades {\n\
    \        totalGrade += grade\n        totalGradeIndex += 1\n        gradeIndex\
    \ += 1\n        if totalGradeIndex == 1 {\n            gradeLetter = \"A\"\n \
    \       } else if totalGradeIndex == 2 && totalGrade >= 3.0 {\n            gradeLetter\
    \ = \"A+\"\n        } else if totalGradeIndex == 2 && totalGrade < 3.0 {\n   \
    \         gradeLetter = \"A\"\n        } else if totalGradeIndex == 3 && totalGrade\
    \ >= 3.0 {\n            gradeLetter = \"A+\"\n        } else if totalGradeIndex\
    \ == 3 && totalGrade < 3.0 {\n            gradeLetter = \"A\"\n        } else\
    \ if totalGradeIndex == 4 && totalGrade >= 3.0 {\n            gradeLetter = \"\
    A+\"\n        } else if totalGradeIndex == 4 && totalGrade < 3.0 {\n         \
    \   gradeLetter = \"A\"\n        } else if totalGradeIndex == 5 && totalGrade\
    \ >= 3.0 {\n            gradeLetter = \"A+\"\n        } else if totalGradeIndex\
    \ == 5 && totalGrade < 3.0 {\n            gradeLetter = \"A\"\n        } else\
    \ if totalGradeIndex == 6 && totalGrade >= 3.0 {\n            gradeLetter = \"\
    A+\"\n        } else if totalGradeIndex == 6 && totalGrade < 3.0 {\n         \
    \   gradeLetter = \"A\"\n        } else if totalGradeIndex == 7 && totalGrade\
    \ >= 3.0 {\n            gradeLetter = \"A+\"\n        } else if totalGradeIndex\
    \ == 7 && totalGrade < 3.0 {\n            gradeLetter = \"A\"\n        } else\
    \ if totalGradeIndex == 8 && totalGrade >= 3.0 {\n            gradeLetter = \"\
    A+\"\n        } else if totalGradeIndex == 8 && totalGrade < 3.0 {\n         \
    \   gradeLetter = \"A\"\n        } else if totalGradeIndex == 9 && totalGrade\
    \ >= 3.0 {\n            gradeLetter = \"A+\"\n        } else if totalGradeIndex\
    \ == 9 && totalGrade < 3.0 {\n            gradeLetter = \"A\"\n        } else\
    \ if totalGradeIndex == 10 && totalGrade >= 3.0 {\n            gradeLetter = \"\
    A+\"\n        } else if totalGradeIndex == 10 && totalGrade < 3.0 {\n        \
    \    gradeLetter = \"A\"\n        } else if totalGradeIndex == 11 && totalGrade\
    \ \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbi51jkai.swift:73:54: error: expected '{' after 'if' condition\n\
    \        } else if totalGradeIndex == 11 && totalGrade \n                    \
    \                                 ^\n/tmp/tmpbi51jkai.swift:94:66: error: expected\
    \ '}' at end of brace statement\nassert(numerical_letter_grade(grades: [0.0, 0.7])\
    \ == [\"E\", \"D-\"])\n                                                      \
    \           ^\n/tmp/tmpbi51jkai.swift:23:59: note: to match this opening '{'\n\
    func numerical_letter_grade(grades: [Double]) -> [String] {\n                \
    \                                          ^\n/tmp/tmpbi51jkai.swift:38:27: error:\
    \ cannot assign value of type 'String' to type 'Character'\n            gradeLetter\
    \ = \"A+\"\n                          ^~~~\n/tmp/tmpbi51jkai.swift:42:27: error:\
    \ cannot assign value of type 'String' to type 'Character'\n            gradeLetter\
    \ = \"A+\"\n                          ^~~~\n/tmp/tmpbi51jkai.swift:46:27: error:\
    \ cannot assign value of type 'String' to type 'Character'\n            gradeLetter\
    \ = \"A+\"\n                          ^~~~\n/tmp/tmpbi51jkai.swift:50:27: error:\
    \ cannot assign value of type 'String' to type 'Character'\n            gradeLetter\
    \ = \"A+\"\n                          ^~~~\n/tmp/tmpbi51jkai.swift:54:27: error:\
    \ cannot assign value of type 'String' to type 'Character'\n            gradeLetter\
    \ = \"A+\"\n                          ^~~~\n/tmp/tmpbi51jkai.swift:58:27: error:\
    \ cannot assign value of type 'String' to type 'Character'\n            gradeLetter\
    \ = \"A+\"\n                          ^~~~\n/tmp/tmpbi51jkai.swift:62:27: error:\
    \ cannot assign value of type 'String' to type 'Character'\n            gradeLetter\
    \ = \"A+\"\n                          ^~~~\n/tmp/tmpbi51jkai.swift:66:27: error:\
    \ cannot assign value of type 'String' to type 'Character'\n            gradeLetter\
    \ = \"A+\"\n                          ^~~~\n/tmp/tmpbi51jkai.swift:70:27: error:\
    \ cannot assign value of type 'String' to type 'Character'\n            gradeLetter\
    \ = \"A+\"\n                          ^~~~\n/tmp/tmpbi51jkai.swift:73:44: error:\
    \ cannot convert value of type 'Doubl"
  stdout: ''
  timestamp: 1660014656
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = grades.sorted()\n    var gradesArrayCount\
    \ = grades.count\n    var gradesArraySum = grades.reduce(0, combine: +)\n    var\
    \ gradesArrayAverage = gradesArraySum / gradesArrayCount\n    var gradesArrayMin\
    \ = grades.min()\n    var gradesArrayMax = grades.max()\n    var gradesArraySumOfSquares\
    \ = grades.reduce(0, combine: +)\n    var gradesArraySumOfSquaresAverage = gradesArraySumOfSquares\
    \ / gradesArrayCount\n    var gradesArraySumOfSquaresMin = gradesArraySumOfSquares.min()\n\
    \    var gradesArraySumOfSquaresMax = gradesArraySumOfSquares.max()\n    var gradesArraySumOfSquaresSum\
    \ = gradesArraySumOfSquares.reduce(0, combine: +)\n    var gradesArraySumOfSquaresSumAverage\
    \ = gradesArraySumOfSquaresSum / gradesArrayCount\n    var gradesArraySumOfSquaresSumMin\
    \ = gradesArraySumOfSquaresSum.min()\n    var gradesArraySumOfSquaresSumMax =\
    \ gradesArraySumOfSquaresSum.max()\n    var gradesArraySumOfSquaresSumSum = gradesArraySumOfSquaresSum.reduce(0,\
    \ combine: +)\n    var gradesArraySumOfSquaresSumSumAverage = gradesArraySumOfSquaresSumSum\
    \ / gradesArrayCount\n    var gradesArraySumOfSquaresSumSumMin = gradesArraySumOfSquaresSumSum.min()\n\
    \    var gradesArraySumOfSquaresSumSumMax = gradesArraySumOfSquaresSumSum.max()\n\
    \    var gradesArraySumOfSquaresSumSumSum = gradesArraySumOfSquaresSumSum.reduce(0,\
    \ combine: +)\n    var gradesArraySumOfSquaresSumSumSumAverage = gradesArraySumOfSquaresSumSumSum\
    \ / gradesArrayCount\n    var gradesArraySumOfSquaresSumSumSumMin = gradesArraySumOfSquaresSumSumSum.min()\n\
    \    var gradesArraySumOfSquaresSumSumSumMax = gradesArraySumOfSquaresSumSumSum.max()\n\
    \    var gradesArraySumOfSquaresSumSumSumSum = gradesArraySumOfSquaresSumSumSum.reduce(0,\
    \ combine: +)\n    var gradesArraySumOfSquaresSumSumSumSumAverage = gradesArraySumOfSquaresSumSumSumSum\
    \ / gradesArrayCount\n    var gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpc0xneu2s.swift:26:39: error: extraneous argument label 'combine:'\
    \ in call\n    var gradesArraySum = grades.reduce(0, combine: +)\n           \
    \                           ^   ~~~~~~~~~\n                                  \
    \        \n/tmp/tmpc0xneu2s.swift:30:48: error: extraneous argument label 'combine:'\
    \ in call\n    var gradesArraySumOfSquares = grades.reduce(0, combine: +)\n  \
    \                                             ^   ~~~~~~~~~\n                \
    \                                   \n/tmp/tmpc0xneu2s.swift:48:9: error: type\
    \ annotation missing in pattern\n    var gradesArray\n        ^\n"
  stdout: ''
  timestamp: 1660014656
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    \n    // Your code goes\
    \ here\n    \n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpqmfb7q3c/tmpqmfb7q3c.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab569ff2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab569ce9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab569ce9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab569ce87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqmfb7q3c                        0x000055f5549c55e6 <unavailable> + 5606

    5    libc.so.6                          0x00002ab56a1de460 __libc_start_main +
    245

    6    tmpqmfb7q3c                        0x000055f5549c5109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660014656
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    var gpa = grades[0]\n \
    \   var grade = grades[1]\n    var letterGrade = \"\"\n    var gradeArray = [String]()\n\
    \    var gpaArray = [Double]()\n    var gpaSum = 0\n    var gpaSumArray = [Double]()\n\
    \    var gpaSumArrayIndex = 0\n    var gpaSumArrayIndex2 = 0\n    var gpaSumArrayIndex3\
    \ = 0\n    var gpaSumArrayIndex4 = 0\n    var gpaSumArrayIndex5 = 0\n    var gpaSumArrayIndex6\
    \ = 0\n    var gpaSumArrayIndex7 = 0\n    var gpaSumArrayIndex8 = 0\n    var gpaSumArrayIndex9\
    \ = 0\n    var gpaSumArrayIndex10 = 0\n    var gpaSumArrayIndex11 = 0\n    var\
    \ gpaSumArrayIndex12 = 0\n    var gpaSumArrayIndex13 = 0\n    var gpaSumArrayIndex14\
    \ = 0\n    var gpaSumArrayIndex15 = 0\n    var gpaSumArrayIndex16 = 0\n    var\
    \ gpaSumArrayIndex17 = 0\n    var gpaSumArrayIndex18 = 0\n    var gpaSumArrayIndex19\
    \ = 0\n    var gpaSumArrayIndex20 = 0\n    var gpaSumArrayIndex21 = 0\n    var\
    \ gpaSumArrayIndex22 = 0\n    var gpaSumArrayIndex23 = 0\n    var gpaSumArrayIndex24\
    \ = 0\n    var gpaSumArrayIndex25 = 0\n    var gpaSumArrayIndex26 = 0\n    var\
    \ gpaSumArrayIndex27 = 0\n    var gpaSumArrayIndex28 = 0\n    var gpaSumArrayIndex29\
    \ = 0\n    var gpaSumArrayIndex30 = 0\n    var gpaSumArrayIndex31 = 0\n    var\
    \ gpaSumArrayIndex32 = 0\n    var gpaSumArrayIndex33 = 0\n    var gpaSumArrayIndex34\
    \ = 0\n    var gpaSumArrayIndex35 = 0\n    var gpaSumArrayIndex36 = 0\n    var\
    \ gpaSumArrayIndex37 = 0\n    var gpaSumArrayIndex38 = 0\n    var gpaSumArrayIndex39\
    \ = 0\n    var gpaSumArrayIndex40 = 0\n    var gpaSumArrayIndex41 = 0\n    var\
    \ gpaSumArrayIndex42 = 0\n    var gpaSumArrayIndex43 = 0\n    var gpaSumArrayIndex44\
    \ = 0\n    var gpaSumArrayIndex45 = 0\n    var gpaSumArrayIndex46 = 0\n    var\
    \ gpaSumArrayIndex47 = 0\n    var gpaSumArrayIndex48 = 0\n    var gpaSumArrayIndex49\
    \ = 0\n    var gpaSumArrayIndex50 = 0\n    var g\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpnc0ejdpf.swift:82:9: error: type annotation missing in pattern\n\
    \    var g\n        ^\n"
  stdout: ''
  timestamp: 1660014656
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    var gradesArrayIndex =\
    \ 0\n    var gradesArrayIndexMax = grades.count - 1\n    for grade in grades {\n\
    \        if grade > 3.0 {\n            gradesArray[gradesArrayIndex] = \"B-\"\n\
    \        } else if grade > 2.7 {\n            gradesArray[gradesArrayIndex] =\
    \ \"B-\"\n        } else if grade > 2.3 {\n            gradesArray[gradesArrayIndex]\
    \ = \"B-\"\n        } else if grade > 2.0 {\n            gradesArray[gradesArrayIndex]\
    \ = \"B-\"\n        } else if grade > 1.7 {\n            gradesArray[gradesArrayIndex]\
    \ = \"B-\"\n        } else if grade > 1.3 {\n            gradesArray[gradesArrayIndex]\
    \ = \"B-\"\n        } else if grade > 1.0 {\n            gradesArray[gradesArrayIndex]\
    \ = \"B-\"\n        } else if grade > 0.7 {\n            gradesArray[gradesArrayIndex]\
    \ = \"B-\"\n        } else if grade > 0.0 {\n            gradesArray[gradesArrayIndex]\
    \ = \"B-\"\n        } else if grade > -3.0 {\n            gradesArray[gradesArrayIndex]\
    \ = \"B-\"\n        } else if grade > -2.7 {\n            gradesArray[gradesArrayIndex]\
    \ = \"B-\"\n        } else if grade > -2.3 {\n            gradesArray[gradesArrayIndex]\
    \ = \"B-\"\n        } else if grade > -2.0 {\n            gradesArray[gradesArrayIndex]\
    \ = \"B-\"\n        } else if grade > -1.7 {\n            gradesArray[gradesArrayIndex]\
    \ = \"B-\"\n        } else if grade > -1.3 {\n            gradesArray[gradesArrayIndex]\
    \ = \"B-\"\n        } else if grade > -1.0 {\n            gradesArray[gradesArrayIndex]\
    \ = \"B-\"\n        } else if grade > -0.7 {\n            gradesArray[gradesArrayIndex]\
    \ = \"B-\"\n        } else if grade > -0.0 {\n            gradesArray[gradesArrayIndex]\
    \ = \"B-\"\n        } else if grade > -3.0 {\n            gradesArray[gradesArrayIndex]\
    \ = \"B-\"\n        } else if grade > -2.7 {\n            gradesArray[gradesArrayIndex]\
    \ = \"B-\"\n        } else if grade > -2.3 {\n            gradesArray[gradesArrayIndex]\
    \ = \"B-\"\n        } else if grade > -2.0 {\n            grades\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpw4l2fubp.swift:92:66: error: expected '}' at end of brace statement\n\
    assert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"])\n      \
    \                                                           ^\n/tmp/tmpw4l2fubp.swift:27:25:\
    \ note: to match this opening '{'\n    for grade in grades {\n               \
    \         ^\n/tmp/tmpw4l2fubp.swift:92:66: error: expected '}' at end of brace\
    \ statement\nassert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"\
    ])\n                                                                 ^\n/tmp/tmpw4l2fubp.swift:23:59:\
    \ note: to match this opening '{'\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n                                                          ^\n\
    /tmp/tmpw4l2fubp.swift:71:13: warning: expression of type '[Double]' is unused\n\
    \            grades\n            ^~~~~~\n/tmp/tmpw4l2fubp.swift:75:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmpw4l2fubp.swift:25:9:\
    \ warning: variable 'gradesArrayIndex' was never mutated; consider changing to\
    \ 'let' constant\n    var gradesArrayIndex = 0\n    ~~~ ^\n    let\n/tmp/tmpw4l2fubp.swift:26:9:\
    \ warning: initialization of variable 'gradesArrayIndexMax' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var gradesArrayIndexMax\
    \ = grades.count - 1\n    ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n"
  stdout: ''
  timestamp: 1660014656
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    var gpa: Double = 0.0\n\
    \    var letterGrade: String = \"\"\n    \n    for grade in grades {\n       \
    \ gpa = grade * 4.0\n        if gpa > 3.7 {\n            letterGrade = \"A+\"\n\
    \        } else if gpa > 3.3 {\n            letterGrade = \"A\"\n        } else\
    \ if gpa > 3.0 {\n            letterGrade = \"B+\"\n        } else if gpa > 2.7\
    \ {\n            letterGrade = \"B\"\n        } else if gpa > 2.3 {\n        \
    \    letterGrade = \"B-\"\n        } else if gpa > 2.0 {\n            letterGrade\
    \ = \"C+\"\n        } else if gpa > 1.7 {\n            letterGrade = \"C\"\n \
    \       } else if gpa > 1.3 {\n            letterGrade = \"C-\"\n        } else\
    \ if gpa > 1.0 {\n            letterGrade = \"D+\"\n        } else if gpa > 0.7\
    \ {\n            letterGrade = \"D\"\n        } else if gpa > 0.0 {\n        \
    \    letterGrade = \"D-\"\n        } else {\n            letterGrade = \"E\"\n\
    \        }\n        gradesArray.append(letterGrade)\n    }\n    return gradesArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpkj93cnmt/tmpkj93cnmt.swift:73: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002accb79e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002accb76d7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002accb76d7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002accb76d67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkj93cnmt                        0x0000561ff31367a6 <unavailable> + 6054

    5    libc.so.6                          0x00002accb7bcc460 __libc_start_main +
    245

    6    tmpkj93cnmt                        0x0000561ff31362c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014656
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradeLetters = [String]()\n    var totalGrade = grades.reduce(0,\
    \ combine: +)\n    var totalGradeInt = Int(totalGrade)\n    var totalGradeFraction\
    \ = totalGrade - totalGradeInt\n    var totalGradeFractionInt = Int(totalGradeFraction)\n\
    \    var totalGradeFractionFraction = totalGradeFraction - totalGradeFractionInt\n\
    \    var totalGradeFractionFractionInt = Int(totalGradeFractionFraction)\n   \
    \ var totalGradeFractionFractionFraction = totalGradeFractionFraction - totalGradeFractionFractionInt\n\
    \    var totalGradeFractionFractionFractionInt = Int(totalGradeFractionFractionFraction)\n\
    \    var totalGradeFractionFractionFractionFraction = totalGradeFractionFractionFraction\
    \ - totalGradeFractionFractionFractionInt\n    var totalGradeFractionFractionFractionFractionInt\
    \ = Int(totalGradeFractionFractionFractionFraction)\n    var totalGradeFractionFractionFractionFractionFraction\
    \ = totalGradeFractionFractionFractionFraction - totalGradeFractionFractionFractionFractionInt\n\
    \    var totalGradeFractionFractionFractionFractionFractionInt = Int(totalGradeFractionFractionFractionFractionFraction)\n\
    \    var totalGradeFractionFractionFractionFractionFractionFraction = totalGradeFractionFractionFractionFractionFractionFraction\
    \ - totalGradeFractionFractionFractionFractionFractionFractionInt\n    var totalGradeFractionFractionFractionFractionFractionFractionFractionInt\
    \ = Int(totalGradeFractionFractionFractionFractionFractionFractionFractionFraction)\n\
    \    var totalGradeFractionFractionFractionFractionFractionFractionFractionFractionInt\
    \ = Int(totalGradeFractionFractionFractionFractionFractionFractionFractionFractionFraction)\n\
    \    var totalGradeFractionFractionFractionFractionFractionFractionFractionFractionFractionInt\
    \ = Int(totalGradeFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction)\n\
    \    var totalGradeFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionInt\
    \ = Int(totalGradeFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction)\n\
    \    var totalGradeFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionInt\
    \ = Int(totalGradeFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction)\n\
    \    var totalGradeFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionInt\
    \ = Int(totalGradeFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction)\n\
    \    var totalGradeFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionInt\
    \ = Int(totalGradeFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction)\n\
    \    var totalGradeFractionFractionFractionFraction\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpdzis_qgg.swift:25:35: error: extraneous argument label 'combine:'\
    \ in call\n    var totalGrade = grades.reduce(0, combine: +)\n               \
    \                   ^   ~~~~~~~~~\n                                      \n/tmp/tmpdzis_qgg.swift:37:70:\
    \ error: use of local variable 'totalGradeFractionFractionFractionFractionFractionFraction'\
    \ before its declaration\n    var totalGradeFractionFractionFractionFractionFractionFraction\
    \ = totalGradeFractionFractionFractionFractionFractionFraction - totalGradeFractionFractionFractionFractionFractionFractionInt\n\
    \                                                                     ^\n/tmp/tmpdzis_qgg.swift:37:9:\
    \ note: 'totalGradeFractionFractionFractionFractionFractionFraction' declared\
    \ here\n    var totalGradeFractionFractionFractionFractionFractionFraction = totalGradeFractionFractionFractionFractionFractionFraction\
    \ - totalGradeFractionFractionFractionFractionFractionFractionInt\n        ^\n\
    /tmp/tmpdzis_qgg.swift:37:131: error: cannot find 'totalGradeFractionFractionFractionFractionFractionFractionInt'\
    \ in scope\n    var totalGradeFractionFractionFractionFractionFractionFraction\
    \ = totalGradeFractionFractionFractionFractionFractionFraction - totalGradeFractionFractionFractionFractionFractionFractionInt\n\
    \                                                                            \
    \                                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpdzis_qgg.swift:38:85: error: cannot find 'totalGradeFractionFractionFractionFractionFractionFractionFractionFraction'\
    \ in scope\n    var totalGradeFractionFractionFractionFractionFractionFractionFractionInt\
    \ = Int(totalGradeFractionFractionFractionFractionFractionFractionFractionFraction)\n\
    \                                                                            \
    \        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpdzis_qgg.swift:39:93: error: cannot find 'totalGradeFractionFractionFractionFractionFractionFractionFractionFractionFraction'\
    \ in scope\n    var"
  stdout: ''
  timestamp: 1660014656
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    \n    for grade in grades\
    \ {\n        switch grade {\n        case 4.0:\n            gradesArray.append(\"\
    A+\")\n        case 3.7:\n            gradesArray.append(\"A\")\n        case\
    \ 3.3:\n            gradesArray.append(\"A-\")\n        case 3.0:\n          \
    \  gradesArray.append(\"B+\")\n        case 2.7:\n            gradesArray.append(\"\
    B\")\n        case 2.3:\n            gradesArray.append(\"B-\")\n        case\
    \ 2.0:\n            gradesArray.append(\"C+\")\n        case 1.7:\n          \
    \  gradesArray.append(\"C\")\n        case 1.3:\n            gradesArray.append(\"\
    C-\")\n        case 1.0:\n            gradesArray.append(\"D+\")\n        case\
    \ 0.7:\n            gradesArray.append(\"D\")\n        case 0.0:\n           \
    \ gradesArray.append(\"D-\")\n        default:\n            gradesArray.append(\"\
    E\")\n        }\n    }\n    \n    return gradesArray\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp80oipakc/tmp80oipakc.swift:73: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5697cdfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56979d6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56979d6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56979d57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp80oipakc                        0x000055bd6df167a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b5697ecb460 __libc_start_main +
    245

    6    tmp80oipakc                        0x000055bd6df162c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014656
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades = [String]()\n    \n    // The first element\
    \ is the GPA of the student who is graded first\n    let firstGPA = grades[0]\n\
    \    \n    // The last element is the GPA of the student who is graded last\n\
    \    let lastGPA = grades.last!\n    \n    // The difference between the two GPAs\
    \ is their grade\n    let difference = lastGPA - firstGPA\n    \n    // The difference\
    \ is divided by the number of students who have passed the test\n    // to give\
    \ the percentage of students who have passed the test\n    let percentage = difference\
    \ / Double(grades.count)\n    \n    // The percentage is multiplied by the letter\
    \ grade to give the letter grade\n    let letterGrade = percentage * \"A\"\n \
    \   \n    // The letter grade is added to the list of letter grades\n    letterGrades.append(letterGrade)\n\
    \    \n    // The letter grade is appended the list of letter grades\n    for\
    \ grade in grades.dropFirst() {\n        let percentage = grade - firstGPA\n \
    \       let letterGrade = percentage * \"A\"\n        letterGrades.append(letterGrade)\n\
    \    }\n    \n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpf_gwejl9.swift:40:36: error: cannot convert value of type 'String'\
    \ to expected argument type 'Double'\n    let letterGrade = percentage * \"A\"\
    \n                                   ^\n/tmp/tmpf_gwejl9.swift:48:40: error: cannot\
    \ convert value of type 'String' to expected argument type 'Double'\n        let\
    \ letterGrade = percentage * \"A\"\n                                       ^\n"
  stdout: ''
  timestamp: 1660014656
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades = [String]()\n    for grade in grades {\n\
    \        if grade > 3.0 {\n            letterGrades.append(\"B+\")\n        }\
    \ else if grade > 2.0 {\n            letterGrades.append(\"B\")\n        } else\
    \ if grade > 1.0 {\n            letterGrades.append(\"B-\")\n        } else if\
    \ grade > 0.7 {\n            letterGrades.append(\"C\")\n        } else if grade\
    \ > 0.3 {\n            letterGrades.append(\"C-\")\n        } else if grade >\
    \ 0.0 {\n            letterGrades.append(\"D\")\n        } else if grade > -0.3\
    \ {\n            letterGrades.append(\"D-\")\n        } else if grade > -0.7 {\n\
    \            letterGrades.append(\"E\")\n        } else if grade > -1.0 {\n  \
    \          letterGrades.append(\"F\")\n        } else {\n            letterGrades.append(\"\
    F\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmprup5j2w_/tmprup5j2w_.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac49532ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac495021b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac495021988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac4950207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprup5j2w_                        0x0000565524c757f6 <unavailable> + 6134

    5    libc.so.6                          0x00002ac495516460 __libc_start_main +
    245

    6    tmprup5j2w_                        0x0000565524c75319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014656
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var grades_string = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var letter_grade = \"\"\n    if gpa < 4.0 {\n        letter_grade\
    \ = \"E\"\n    } else if gpa < 3.7 {\n        letter_grade = \"D+\"\n    } else\
    \ if gpa < 3.3 {\n        letter_grade = \"D-\"\n    } else if gpa < 3.0 {\n \
    \       letter_grade = \"C+\"\n    } else if gpa < 2.7 {\n        letter_grade\
    \ = \"C\"\n    } else if gpa < 2.3 {\n        letter_grade = \"C-\"\n    } else\
    \ if gpa < 2.0 {\n        letter_grade = \"B+\"\n    } else if gpa < 1.7 {\n \
    \       letter_grade = \"B\"\n    } else if gpa < 1.3 {\n        letter_grade\
    \ = \"B-\"\n    } else if gpa < 1.0 {\n        letter_grade = \"A+\"\n    } else\
    \ if gpa < 0.7 {\n        letter_grade = \"A\"\n    } else if gpa < 0.0 {\n  \
    \      letter_grade = \"A-\"\n    } else {\n        letter_grade = \"A+\"\n  \
    \  }\n    grades_string.append(letter_grade)\n    return grades_string\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpq_wxskrj.swift:25:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n"
  stdout: ''
  timestamp: 1660014656
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = grades\n    gradesArray = gradesArray.sorted()\n\
    \    var gradesArrayCount = gradesArray.count\n    var gradesArraySum = gradesArray.reduce(0.0,\
    \ +)\n    var gradesArrayAverage = gradesArraySum / gradesArrayCount\n    var\
    \ gradesArrayMin = gradesArray[0]\n    var gradesArrayMax = gradesArray[gradesArrayCount\
    \ - 1]\n    var gradesArraySumOfSquares = gradesArray.reduce(0.0, +)\n    var\
    \ gradesArraySumOfSquaresAverage = gradesArraySumOfSquares / gradesArrayCount\n\
    \    var gradesArraySumOfSquaresMin = gradesArraySumOfSquares\n    var gradesArraySumOfSquaresMax\
    \ = gradesArraySumOfSquares\n    var gradesArraySumOfSquaresSum = gradesArray.reduce(0.0,\
    \ +)\n    var gradesArraySumOfSquaresSumAverage = gradesArraySumOfSquaresSum /\
    \ gradesArrayCount\n    var gradesArraySumOfSquaresSumMin = gradesArraySumOfSquaresSum\n\
    \    var gradesArraySumOfSquaresSumMax = gradesArraySumOfSquaresSum\n    var gradesArraySumOfSquaresSumSum\
    \ = gradesArray.reduce(0.0, +)\n    var gradesArraySumOfSquaresSumSumAverage =\
    \ gradesArraySumOfSquaresSumSum / gradesArrayCount\n    var gradesArraySumOfSquaresSumSumMin\
    \ = gradesArraySumOfSquaresSumSum\n    var gradesArraySumOfSquaresSumSumMax =\
    \ gradesArraySumOfSquaresSumSum\n    var gradesArraySumOfSquaresSumSumSum = gradesArray.reduce(0.0,\
    \ +)\n    var gradesArraySumOfSquaresSumSumSumAverage = gradesArraySumOfSquaresSumSumSum\
    \ / gradesArrayCount\n    var gradesArraySumOfSquaresSumSumSumMin = gradesArraySumOfSquaresSumSumSum\n\
    \    var gradesArraySumOfSquaresSumSumSumMax = gradesArraySumOfSquaresSumSumSum\n\
    \    var gradesArraySumOfSquaresSumSumSumSum = gradesArray.reduce(0.0, +)\n  \
    \  var gradesArraySumOfSquaresSumSumSumSumAverage = gradesArraySumOfSquaresSumSumSumSum\
    \ / gradesArrayCount\n    var gradesArraySumOfSquaresSumSumSumSumMin = gradesArraySumOfSquaresSumSumSumSum\n\
    \    var grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp3be3ebjv.swift:28:45: error: binary operator '/' cannot be applied\
    \ to operands of type 'Double' and 'Int'\n    var gradesArrayAverage = gradesArraySum\
    \ / gradesArrayCount\n                             ~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~~\n\
    /tmp/tmp3be3ebjv.swift:28:45: note: overloads for '/' exist with these partially\
    \ matching parameter lists: (Double, Double), (Int, Int)\n    var gradesArrayAverage\
    \ = gradesArraySum / gradesArrayCount\n                                      \
    \      ^\n/tmp/tmp3be3ebjv.swift:32:66: error: binary operator '/' cannot be applied\
    \ to operands of type 'Double' and 'Int'\n    var gradesArraySumOfSquaresAverage\
    \ = gradesArraySumOfSquares / gradesArrayCount\n                             \
    \            ~~~~~~~~~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~~\n/tmp/tmp3be3ebjv.swift:32:66:\
    \ note: overloads for '/' exist with these partially matching parameter lists:\
    \ (Double, Double), (Int, Int)\n    var gradesArraySumOfSquaresAverage = gradesArraySumOfSquares\
    \ / gradesArrayCount\n                                                       \
    \          ^\n/tmp/tmp3be3ebjv.swift:36:72: error: binary operator '/' cannot\
    \ be applied to operands of type 'Double' and 'Int'\n    var gradesArraySumOfSquaresSumAverage\
    \ = gradesArraySumOfSquaresSum / gradesArrayCount\n                          \
    \                  ~~~~~~~~~~~~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~~\n/tmp/tmp3be3ebjv.swift:36:72:\
    \ note: overloads for '/' exist with these partially matching parameter lists:\
    \ (Double, Double), (Int, Int)\n    var gradesArraySumOfSquaresSumAverage = gradesArraySumOfSquaresSum\
    \ / gradesArrayCount\n                                                       \
    \                ^\n/tmp/tmp3be3ebjv.swift:40:78: error: binary operator '/' cannot\
    \ be applied to operands of type 'Double' and 'Int'\n    var gradesArraySumOfSquaresSumSumAverage\
    \ = gradesArraySumOfSquaresSumSum / gradesArrayCount\n                       \
    \                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~~\n/tmp/tmp3be3ebjv.swift:40:78:\
    \ note: overloads for '/' exist with these partially matching param"
  stdout: ''
  timestamp: 1660014655
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    var gpa = grades[0]\n \
    \   var letterGrade = \"\"\n    for grade in grades {\n        if gpa > 3.0 {\n\
    \            letterGrade = \"B+\"\n        } else if gpa > 2.0 {\n           \
    \ letterGrade = \"B\"\n        } else if gpa > 1.7 {\n            letterGrade\
    \ = \"B-\"\n        } else if gpa > 1.0 {\n            letterGrade = \"C+\"\n\
    \        } else if gpa > 0.7 {\n            letterGrade = \"C\"\n        } else\
    \ if gpa > 0.3 {\n            letterGrade = \"C-\"\n        } else if gpa > 0.0\
    \ {\n            letterGrade = \"D+\"\n        } else if gpa > -0.3 {\n      \
    \      letterGrade = \"D\"\n        } else if gpa > -0.7 {\n            letterGrade\
    \ = \"D-\"\n        } else if gpa > -1.0 {\n            letterGrade = \"E\"\n\
    \        } else {\n            letterGrade = \"F\"\n        }\n        gradesArray.append(letterGrade)\n\
    \        gpa -= grade\n    }\n    return gradesArray\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp2vfcfmd2/tmp2vfcfmd2.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80b0454c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80b014bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80b014b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80b014a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2vfcfmd2                        0x0000556c724f4856 <unavailable> + 6230

    5    libc.so.6                          0x00002b80b0640460 __libc_start_main +
    245

    6    tmp2vfcfmd2                        0x0000556c724f4379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660014656
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var grades_string = [String]()\n    var total_grade = grades.reduce(0,\
    \ combine: +)\n    var total_letter_grade = \"\"\n    var total_letter_grade_index\
    \ = 0\n    var total_letter_grade_index2 = 0\n    var total_letter_grade_index3\
    \ = 0\n    var total_letter_grade_index4 = 0\n    var total_letter_grade_index5\
    \ = 0\n    var total_letter_grade_index6 = 0\n    var total_letter_grade_index7\
    \ = 0\n    var total_letter_grade_index8 = 0\n    var total_letter_grade_index9\
    \ = 0\n    var total_letter_grade_index10 = 0\n    var total_letter_grade_index11\
    \ = 0\n    var total_letter_grade_index12 = 0\n    var total_letter_grade_index13\
    \ = 0\n    var total_letter_grade_index14 = 0\n    var total_letter_grade_index15\
    \ = 0\n    var total_letter_grade_index16 = 0\n    var total_letter_grade_index17\
    \ = 0\n    var total_letter_grade_index18 = 0\n    var total_letter_grade_index19\
    \ = 0\n    var total_letter_grade_index20 = 0\n    var total_letter_grade_index21\
    \ = 0\n    var total_letter_grade_index22 = 0\n    var total_letter_grade_index23\
    \ = 0\n    var total_letter_grade_index24 = 0\n    var total_letter_grade_index25\
    \ = 0\n    var total_letter_grade_index26 = 0\n    var total_letter_grade_index27\
    \ = 0\n    var total_letter_grade_index28 = 0\n    var total_letter_grade_index29\
    \ = 0\n    var total_letter_grade_index30 = 0\n    var total_letter_grade_index31\
    \ = 0\n    var total_letter_grade_index32 = 0\n    var total_letter_grade_index33\
    \ = 0\n    var total_letter_grade_index34 = 0\n    var total_letter_grade_index35\
    \ = 0\n    var total_letter_grade_index36 = 0\n    var total_letter_grade_index37\
    \ = 0\n    var total_letter_grade_index38 = 0\n    var total_letter_grade_index39\
    \ = 0\n    var total_letter_grade_index40 = 0\n    var total_letter_grade_index41\
    \ = 0\n    var total_letter_grade_index42 = 0\n    var total_letter_grade_index43\
    \ = 0\n    var total_letter_grade_index44 = 0\n    var total_letter_grade_index45\
    \ = 0\n    var total_letter_grade_index46 = 0\n    var total_letter_grade_index47\
    \ = 0\n    var total_letter_grade_index48 = 0\n    var total_letter_grade_index49\
    \ = 0\n    var total_letter_grade_index50 = 0\n    var total_letter_grade_index51\
    \ = 0\n    var total_letter_grade_index52 = 0\n    var total_letter_grade_index53\
    \ = 0\n    var total_letter_grade_index54 = 0\n    var total_letter_grade_index55\
    \ = 0\n    var total_letter_grade_index56 = 0\n    var total_letter_grade_index57\
    \ = 0\n    var total_letter_grade_index58 = 0\n    var total_letter_grade_index59\
    \ = 0\n    var total_letter_grade_index60 = 0\n    var total_letter_grade_index61\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpc4q_z3kl.swift:25:36: error: extraneous argument label 'combine:'\
    \ in call\n    var total_grade = grades.reduce(0, combine: +)\n              \
    \                     ^   ~~~~~~~~~\n                                       \n\
    /tmp/tmpc4q_z3kl.swift:87:9: error: type annotation missing in pattern\n    var\
    \ total_letter_grade_index61\n        ^\n"
  stdout: ''
  timestamp: 1660014656
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    \n    // The first element\
    \ is the GPA of the student who has just been added.\n    var firstGrade = grades[0]\n\
    \    \n    // The second element is the GPA of the student who has just been added.\n\
    \    var secondGrade = grades[1]\n    \n    // The third element is the GPA of\
    \ the student who has just been added.\n    var thirdGrade = grades[2]\n    \n\
    \    // The fourth element is the GPA of the student who has just been added.\n\
    \    var fourthGrade = grades[3]\n    \n    // The fifth element is the GPA of\
    \ the student who has just been added.\n    var fifthGrade = grades[4]\n    \n\
    \    // The sixth element is the GPA of the student who has just been added.\n\
    \    var sixthGrade = grades[5]\n    \n    // The seventh element is the GPA of\
    \ the student who has just been added.\n    var seventhGrade = grades[6]\n   \
    \ \n    // The eighth element is the GPA of the student who has just been added.\n\
    \    var eighthGrade = grades[7]\n    \n    // The ninth element is the GPA of\
    \ the student who has just been added.\n    var ninthGrade = grades[8]\n    \n\
    \    // The tenth element is the GPA of the student who has just been added.\n\
    \    var tenthGrade = grades[9]\n    \n    // The eleventh element is the GPA\
    \ of the student who has just been added.\n    var eleventhGrade = grades[10]\n\
    \    \n    // The twelfth element is the GPA of the student who has just been\
    \ added.\n    var twelfthGrade = grades[11]\n    \n    // The thirteenth element\
    \ is the GPA of the student who has just been added.\n    var thirteenthGrade\
    \ = grades[12]\n    \n    // The fourteenth element is the GPA of the student\
    \ who has just been added.\n    var fourteenthGrade = grades[13]\n    \n    //\
    \ The fifteenth element is the GPA of the student who has just been added.\n \
    \   var fifteenthGrade = grades[14]\n    \n    // The sixteenth element is the\
    \ GPA of the student who has just been added.\n    var sixteenthGrade = grades[15]\n\
    \    \n    // The seventeenth element is the GPA of the student who has just been\
    \ added.\n    var seven\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp_qgvuzal.swift:75:9: error: type annotation missing in pattern\n\
    \    var seven\n        ^\n"
  stdout: ''
  timestamp: 1660014656
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    var totalGrade = grades.reduce(0,\
    \ combine: +)\n    var totalGradeInt = Int(totalGrade)\n    var totalGradeFraction\
    \ = totalGrade - totalGradeInt\n    var totalGradeFractionInt = Int(totalGradeFraction)\n\
    \    var totalGradeFractionFraction = totalGradeFraction - totalGradeFractionInt\n\
    \    var totalGradeFractionFractionInt = Int(totalGradeFractionFraction)\n   \
    \ var totalGradeFractionFractionFraction = totalGradeFractionFraction - totalGradeFractionFractionInt\n\
    \    var totalGradeFractionFractionFractionInt = Int(totalGradeFractionFractionFraction)\n\
    \    var totalGradeFractionFractionFractionFraction = totalGradeFractionFractionFraction\
    \ - totalGradeFractionFractionFractionInt\n    var totalGradeFractionFractionFractionFractionInt\
    \ = Int(totalGradeFractionFractionFractionFraction)\n    var totalGradeFractionFractionFractionFractionFraction\
    \ = totalGradeFractionFractionFractionFraction - totalGradeFractionFractionFractionFractionInt\n\
    \    var totalGradeFractionFractionFractionFractionFractionInt = Int(totalGradeFractionFractionFractionFractionFraction)\n\
    \    var totalGradeFractionFractionFractionFractionFractionFractionInt = Int(totalGradeFractionFractionFractionFractionFractionFraction)\n\
    \    var totalGradeFractionFractionFractionFractionFractionFractionInt = Int(totalGradeFractionFractionFractionFractionFractionFractionFraction)\n\
    \    var totalGradeFractionFractionFractionFractionFractionFractionFractionInt\
    \ = Int(totalGradeFractionFractionFractionFractionFractionFractionFractionFraction)\n\
    \    var totalGradeFractionFractionFractionFractionFractionFractionFractionInt\
    \ = Int(totalGradeFractionFractionFractionFractionFractionFractionFractionFractionFraction)\n\
    \    var totalGradeFractionFractionFractionFractionFractionFractionFractionFractionInt\
    \ = Int(totalGradeFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction)\n\
    \    var totalGradeFractionFractionFractionFractionFractionFractionFractionFractionFractionInt\
    \ = Int(totalGradeFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction)\n\
    \    var totalGradeFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionInt\
    \ = Int(totalGradeFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction)\n\
    \    var totalGradeFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionInt\
    \ = Int(totalGradeFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction)\n\
    \    var totalGradeFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionInt\
    \ = Int(totalGradeFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction)\n\
    \    var totalGradeFractionFractionFraction\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp2c6i80xv.swift:25:35: error: extraneous argument label 'combine:'\
    \ in call\n    var totalGrade = grades.reduce(0, combine: +)\n               \
    \                   ^   ~~~~~~~~~\n                                      \n/tmp/tmp2c6i80xv.swift:37:77:\
    \ error: cannot find 'totalGradeFractionFractionFractionFractionFractionFraction'\
    \ in scope\n    var totalGradeFractionFractionFractionFractionFractionFractionInt\
    \ = Int(totalGradeFractionFractionFractionFractionFractionFraction)\n        \
    \                                                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp2c6i80xv.swift:38:77: error: cannot find 'totalGradeFractionFractionFractionFractionFractionFractionFraction'\
    \ in scope\n    var totalGradeFractionFractionFractionFractionFractionFractionInt\
    \ = Int(totalGradeFractionFractionFractionFractionFractionFractionFraction)\n\
    \                                                                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp2c6i80xv.swift:39:85: error: cannot find 'totalGradeFractionFractionFractionFractionFractionFractionFractionFraction'\
    \ in scope\n    var totalGradeFractionFractionFractionFractionFractionFractionFractionInt\
    \ = Int(totalGradeFractionFractionFractionFractionFractionFractionFractionFraction)\n\
    \                                                                            \
    \        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp2c6i80xv.swift:40:85: error: cannot find 'totalGradeFractionFractionFractionFractionFractionFractionFractionFractionFraction'\
    \ in scope\n    var totalGradeFractionFractionFractionFractionFractionFractionFractionInt\
    \ = Int(totalGradeFractionFractionFractionFractionFractionFractionFractionFractionFraction)\n\
    \                                                                            \
    \        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp2c6i80xv.swift:41:93: error: cannot find 'totalGradeFractionFractionFractionFractionF"
  stdout: ''
  timestamp: 1660014656
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    var totalGrade = grades.reduce(0,\
    \ combine: +)\n    var totalGradeInt = Int(totalGrade)\n    var totalGradeFloat\
    \ = Float(totalGrade)\n    var totalGradeDouble = Double(totalGrade)\n    var\
    \ totalGradeInt = Int(totalGrade)\n    var totalGradeFloat = Float(totalGrade)\n\
    \    var totalGradeDouble = Double(totalGrade)\n    var totalGradeInt = Int(totalGrade)\n\
    \    var totalGradeFloat = Float(totalGrade)\n    var totalGradeDouble = Double(totalGrade)\n\
    \    var totalGradeInt = Int(totalGrade)\n    var totalGradeFloat = Float(totalGrade)\n\
    \    var totalGradeDouble = Double(totalGrade)\n    var totalGradeInt = Int(totalGrade)\n\
    \    var totalGradeFloat = Float(totalGrade)\n    var totalGradeDouble = Double(totalGrade)\n\
    \    var totalGradeInt = Int(totalGrade)\n    var totalGradeFloat = Float(totalGrade)\n\
    \    var totalGradeDouble = Double(totalGrade)\n    var totalGradeInt = Int(totalGrade)\n\
    \    var totalGradeFloat = Float(totalGrade)\n    var totalGradeDouble = Double(totalGrade)\n\
    \    var totalGradeInt = Int(totalGrade)\n    var totalGradeFloat = Float(totalGrade)\n\
    \    var totalGradeDouble = Double(totalGrade)\n    var totalGradeInt = Int(totalGrade)\n\
    \    var totalGradeFloat = Float(totalGrade)\n    var totalGradeDouble = Double(totalGrade)\n\
    \    var totalGradeInt = Int(totalGrade)\n    var totalGradeFloat = Float(totalGrade)\n\
    \    var totalGradeDouble = Double(totalGrade)\n    var totalGradeInt = Int(totalGrade)\n\
    \    var totalGradeFloat = Float(totalGrade)\n    var totalGradeDouble = Double(totalGrade)\n\
    \    var totalGradeInt = Int(totalGrade)\n    var totalGradeFloat = Float(totalGrade)\n\
    \    var totalGradeDouble = Double(totalGrade)\n    var totalGradeInt = Int(totalGrade)\n\
    \    var totalGradeFloat = Float(totalGrade)\n    var totalGradeDouble = Double(total\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp2f61b52u.swift:65:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmp2f61b52u.swift:64:34: note: to match this opening '('\n    var totalGradeDouble\
    \ = Double(total\n                                 ^\n/tmp/tmp2f61b52u.swift:25:35:\
    \ error: extraneous argument label 'combine:' in call\n    var totalGrade = grades.reduce(0,\
    \ combine: +)\n                                  ^   ~~~~~~~~~\n             \
    \                         \n/tmp/tmp2f61b52u.swift:64:35: error: cannot find 'total'\
    \ in scope\n    var totalGradeDouble = Double(total\n                        \
    \          ^~~~~\n"
  stdout: ''
  timestamp: 1660014656
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = grades\n    var gradesArrayCopy = gradesArray\n\
    \    var gradesArrayCopy2 = gradesArray\n    var gradesArrayCopy3 = gradesArray\n\
    \    var gradesArrayCopy4 = gradesArray\n    var gradesArrayCopy5 = gradesArray\n\
    \    var gradesArrayCopy6 = gradesArray\n    var gradesArrayCopy7 = gradesArray\n\
    \    var gradesArrayCopy8 = gradesArray\n    var gradesArrayCopy9 = gradesArray\n\
    \    var gradesArrayCopy10 = gradesArray\n    var gradesArrayCopy11 = gradesArray\n\
    \    var gradesArrayCopy12 = gradesArray\n    var gradesArrayCopy13 = gradesArray\n\
    \    var gradesArrayCopy14 = gradesArray\n    var gradesArrayCopy15 = gradesArray\n\
    \    var gradesArrayCopy16 = gradesArray\n    var gradesArrayCopy17 = gradesArray\n\
    \    var gradesArrayCopy18 = gradesArray\n    var gradesArrayCopy19 = gradesArray\n\
    \    var gradesArrayCopy20 = gradesArray\n    var gradesArrayCopy21 = gradesArray\n\
    \    var gradesArrayCopy22 = gradesArray\n    var gradesArrayCopy23 = gradesArray\n\
    \    var gradesArrayCopy24 = gradesArray\n    var gradesArrayCopy25 = gradesArray\n\
    \    var gradesArrayCopy26 = gradesArray\n    var gradesArrayCopy27 = gradesArray\n\
    \    var gradesArrayCopy28 = gradesArray\n    var gradesArrayCopy29 = gradesArray\n\
    \    var gradesArrayCopy30 = gradesArray\n    var gradesArrayCopy31 = gradesArray\n\
    \    var gradesArrayCopy32 = gradesArray\n    var gradesArrayCopy33 = gradesArray\n\
    \    var gradesArrayCopy34 = gradesArray\n    var gradesArrayCopy35 = gradesArray\n\
    \    var gradesArrayCopy36 = gradesArray\n    var gradesArrayCopy37 = gradesArray\n\
    \    var gradesArrayCopy38 = gradesArray\n    var gradesArrayCopy39 = gradesArray\n\
    \    var gradesArrayCopy40 = gradesArray\n    var gradesArrayCopy41 = gradesArray\n\
    \    var gradesArrayCopy42 = gradesArray\n    var gradesArrayCopy43 = gradesArray\n\
    \    var gradesArrayCopy44 = gradesArray\n    var gradesArrayCopy45 = gradesArray\n\
    \    var gradesArrayCopy46 = gradesArray\n    var gradesArrayCopy47 = gradesArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpg71swbp2.swift:24:9: warning: variable 'gradesArray' was never\
    \ mutated; consider changing to 'let' constant\n    var gradesArray = grades\n\
    \    ~~~ ^\n    let\n/tmp/tmpg71swbp2.swift:25:9: warning: initialization of variable\
    \ 'gradesArrayCopy' was never used; consider replacing with assignment to '_'\
    \ or removing it\n    var gradesArrayCopy = gradesArray\n    ~~~~^~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpg71swbp2.swift:26:9: warning: initialization of variable 'gradesArrayCopy2'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var gradesArrayCopy2 = gradesArray\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpg71swbp2.swift:27:9:\
    \ warning: initialization of variable 'gradesArrayCopy3' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var gradesArrayCopy3 =\
    \ gradesArray\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpg71swbp2.swift:28:9: warning:\
    \ initialization of variable 'gradesArrayCopy4' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var gradesArrayCopy4 = gradesArray\n\
    \    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpg71swbp2.swift:29:9: warning: initialization\
    \ of variable 'gradesArrayCopy5' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var gradesArrayCopy5 = gradesArray\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpg71swbp2.swift:30:9: warning: initialization of variable 'gradesArrayCopy6'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var gradesArrayCopy6 = gradesArray\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpg71swbp2.swift:31:9:\
    \ warning: initialization of variable 'gradesArrayCopy7' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var gradesArrayCopy7 =\
    \ gradesArray\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpg71swbp2.swift:32:9: warning:\
    \ initialization of variable 'gradesArrayCopy8' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var gradesArrayCopy8 = gradesArray\n\
    \    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpg71swbp2.swift:33:9: warning: initialization\
    \ of variable 'grades"
  stdout: ''
  timestamp: 1660014654
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var letterGrade = \"\"\n    \n    if gpa < 4.0 {\n        letterGrade\
    \ = \"A+\"\n    }\n    else if gpa > 3.7 {\n        letterGrade = \"A\"\n    }\n\
    \    else if gpa > 3.3 {\n        letterGrade = \"A-\"\n    }\n    else if gpa\
    \ > 3.0 {\n        letterGrade = \"B+\"\n    }\n    else if gpa > 2.7 {\n    \
    \    letterGrade = \"B\"\n    }\n    else if gpa > 2.3 {\n        letterGrade\
    \ = \"B-\"\n    }\n    else if gpa > 2.0 {\n        letterGrade = \"C+\"\n   \
    \ }\n    else if gpa > 1.7 {\n        letterGrade = \"C\"\n    }\n    else if\
    \ gpa > 1.3 {\n        letterGrade = \"C-\"\n    }\n    else if gpa > 1.0 {\n\
    \        letterGrade = \"D+\"\n    }\n    else if gpa > 0.7 {\n        letterGrade\
    \ = \"D\"\n    }\n    else if gpa > 0.0 {\n        letterGrade = \"D-\"\n    }\n\
    \    else if gpa > 0.0 {\n        letterGrade = \"E\"\n    }\n    \n    gradesArray.append(letterGrade)\n\
    \    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpw9upd9fx.swift:25:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n"
  stdout: ''
  timestamp: 1660014656
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    \n    for grade in grades\
    \ {\n        switch grade {\n        case 4.0:\n            gradesArray.append(\"\
    A+\")\n        case 3.7:\n            gradesArray.append(\"A\")\n        case\
    \ 3.3:\n            gradesArray.append(\"A-\")\n        case 3.0:\n          \
    \  gradesArray.append(\"B+\")\n        case 2.7:\n            gradesArray.append(\"\
    B\")\n        case 2.3:\n            gradesArray.append(\"B-\")\n        case\
    \ 2.0:\n            gradesArray.append(\"C+\")\n        case 1.7:\n          \
    \  gradesArray.append(\"C\")\n        case 1.3:\n            gradesArray.append(\"\
    C-\")\n        case 1.0:\n            gradesArray.append(\"D+\")\n        case\
    \ 0.7:\n            gradesArray.append(\"D\")\n        case 0.0:\n           \
    \ gradesArray.append(\"D-\")\n        default:\n            gradesArray.append(\"\
    E\")\n        }\n    }\n    \n    return gradesArray\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp80oipakc/tmp80oipakc.swift:73: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5697cdfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56979d6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56979d6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56979d57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp80oipakc                        0x000055bd6df167a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b5697ecb460 __libc_start_main +
    245

    6    tmp80oipakc                        0x000055bd6df162c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014656
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = grades\n    var gradesArrayCopy = gradesArray\n\
    \    gradesArray.removeFirst()\n    gradesArray.removeLast()\n    var gradesArrayCopy\
    \ = gradesArray\n    var gradesArrayCopy = gradesArray\n    var gradesArrayCopy\
    \ = gradesArray\n    var gradesArrayCopy = gradesArray\n    var gradesArrayCopy\
    \ = gradesArray\n    var gradesArrayCopy = gradesArray\n    var gradesArrayCopy\
    \ = gradesArray\n    var gradesArrayCopy = gradesArray\n    var gradesArrayCopy\
    \ = gradesArray\n    var gradesArrayCopy = gradesArray\n    var gradesArrayCopy\
    \ = gradesArray\n    var gradesArrayCopy = gradesArray\n    var gradesArrayCopy\
    \ = gradesArray\n    var gradesArrayCopy = gradesArray\n    var gradesArrayCopy\
    \ = gradesArray\n    var gradesArrayCopy = gradesArray\n    var gradesArrayCopy\
    \ = gradesArray\n    var gradesArrayCopy = gradesArray\n    var gradesArrayCopy\
    \ = gradesArray\n    var gradesArrayCopy = gradesArray\n    var gradesArrayCopy\
    \ = gradesArray\n    var gradesArrayCopy = gradesArray\n    var gradesArrayCopy\
    \ = gradesArray\n    var gradesArrayCopy = gradesArray\n    var gradesArrayCopy\
    \ = gradesArray\n    var gradesArrayCopy = gradesArray\n    var gradesArrayCopy\
    \ = gradesArray\n    var gradesArrayCopy = gradesArray\n    var gradesArrayCopy\
    \ = gradesArray\n    var gradesArrayCopy = gradesArray\n    var gradesArrayCopy\
    \ = gradesArray\n    var gradesArrayCopy = gradesArray\n    var gradesArrayCopy\
    \ = gradesArray\n    var gradesArrayCopy = gradesArray\n    var gradesArrayCopy\
    \ = gradesArray\n    var gradesArrayCopy = gradesArray\n    var gradesArrayCopy\
    \ = gradesArray\n    var gradesArrayCopy = gradesArray\n    var gradesArrayCopy\
    \ = gradesArray\n    var gradesArrayCopy = gradesArray\n    var gradesArrayCopy\
    \ = gradesArray\n    var gradesArrayCopy = gradesArray\n    var gradesArrayCopy\
    \ = gradesArray\n    var gradesArrayCopy = gradesArray\n    var gradesArrayCopy\
    \ = gradesArray\n    var gradesArrayCopy = gradesArray\n    var gradesArrayCopy\
    \ = gradesArray\n    var gradesArrayCopy = grades\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp0kcmomvx.swift:28:9: error: invalid redeclaration of 'gradesArrayCopy'\n\
    \    var gradesArrayCopy = gradesArray\n        ^\n/tmp/tmp0kcmomvx.swift:25:9:\
    \ note: 'gradesArrayCopy' previously declared here\n    var gradesArrayCopy =\
    \ gradesArray\n        ^\n/tmp/tmp0kcmomvx.swift:29:9: error: invalid redeclaration\
    \ of 'gradesArrayCopy'\n    var gradesArrayCopy = gradesArray\n        ^\n/tmp/tmp0kcmomvx.swift:25:9:\
    \ note: 'gradesArrayCopy' previously declared here\n    var gradesArrayCopy =\
    \ gradesArray\n        ^\n/tmp/tmp0kcmomvx.swift:30:9: error: invalid redeclaration\
    \ of 'gradesArrayCopy'\n    var gradesArrayCopy = gradesArray\n        ^\n/tmp/tmp0kcmomvx.swift:25:9:\
    \ note: 'gradesArrayCopy' previously declared here\n    var gradesArrayCopy =\
    \ gradesArray\n        ^\n/tmp/tmp0kcmomvx.swift:31:9: error: invalid redeclaration\
    \ of 'gradesArrayCopy'\n    var gradesArrayCopy = gradesArray\n        ^\n/tmp/tmp0kcmomvx.swift:25:9:\
    \ note: 'gradesArrayCopy' previously declared here\n    var gradesArrayCopy =\
    \ gradesArray\n        ^\n/tmp/tmp0kcmomvx.swift:32:9: error: invalid redeclaration\
    \ of 'gradesArrayCopy'\n    var gradesArrayCopy = gradesArray\n        ^\n/tmp/tmp0kcmomvx.swift:25:9:\
    \ note: 'gradesArrayCopy' previously declared here\n    var gradesArrayCopy =\
    \ gradesArray\n        ^\n/tmp/tmp0kcmomvx.swift:33:9: error: invalid redeclaration\
    \ of 'gradesArrayCopy'\n    var gradesArrayCopy = gradesArray\n        ^\n/tmp/tmp0kcmomvx.swift:25:9:\
    \ note: 'gradesArrayCopy' previously declared here\n    var gradesArrayCopy =\
    \ gradesArray\n        ^\n/tmp/tmp0kcmomvx.swift:34:9: error: invalid redeclaration\
    \ of 'gradesArrayCopy'\n    var gradesArrayCopy = gradesArray\n        ^\n/tmp/tmp0kcmomvx.swift:25:9:\
    \ note: 'gradesArrayCopy' previously declared here\n    var gradesArrayCopy =\
    \ gradesArray\n        ^\n/tmp/tmp0kcmomvx.swift:35:9: error: invalid redeclaration\
    \ of 'gradesArrayCopy'\n    var gradesArrayCopy = gradesArray\n        ^\n/tmp/tmp0kcmomvx.swift:25:9:\
    \ note: 'gradesArrayCopy' previously declared here\n    var gradesArrayCopy =\
    \ gradesArray\n        ^\n/tmp/tmp0kcmomvx.swift:3"
  stdout: ''
  timestamp: 1660014656
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var grades_string = \"\"\n    for grade in grades {\n   \
    \     switch grade {\n        case 4.0:\n            grades_string += \"A+\"\n\
    \        case 3.7:\n            grades_string += \"A\"\n        case 3.3:\n  \
    \          grades_string += \"A-\"\n        case 3.0:\n            grades_string\
    \ += \"B+\"\n        case 2.7:\n            grades_string += \"B\"\n        case\
    \ 2.3:\n            grades_string += \"B-\"\n        case 2.0:\n            grades_string\
    \ += \"C+\"\n        case 1.7:\n            grades_string += \"C\"\n        case\
    \ 1.3:\n            grades_string += \"C-\"\n        case 1.0:\n            grades_string\
    \ += \"D+\"\n        case 0.7:\n            grades_string += \"D\"\n        case\
    \ 0.0:\n            grades_string += \"D-\"\n        case 0.1:\n            grades_string\
    \ += \"E\"\n        default:\n            grades_string += \"E\"\n        }\n\
    \    }\n    return grades_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbiw_ro1q.swift:57:12: error: cannot convert return expression of\
    \ type 'String' to return type '[String]'\n    return grades_string\n        \
    \   ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014656
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    for grade in grades {\n\
    \        let letterGrade = grade >= 3.0 ? \"A+\" : grade >= 2.0 ? \"A\" : grade\
    \ >= 1.0 ? \"B+\" : grade >= 0.7 ? \"B\" : grade >= 0.3 ? \"B-\" : grade >= 0.0\
    \ ? \"C+\" : grade >= 0.7 ? \"C\" : grade >= 0.3 ? \"C-\" : grade >= 0.0 ? \"\
    D+\" : grade >= 0.7 ? \"D\" : grade >= 0.3 ? \"D-\" : grade >= 0.0 ? \"E\" : \"\
    \"\n        gradesArray.append(letterGrade)\n    }\n    return gradesArray\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpxlg3d1hp/tmpxlg3d1hp.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47fd8c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b47fd5b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b47fd5b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b47fd5b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxlg3d1hp                        0x00005581ef9647f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b47fdaae460 __libc_start_main +
    245

    6    tmpxlg3d1hp                        0x00005581ef964319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014657
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var grades_copy = grades\n    grades_copy.sort()\n    var\
    \ letter_grades: [String] = []\n    var current_grade: Double = 0\n    var current_letter:\
    \ String = \"\"\n    for grade in grades_copy {\n        if current_grade == 0\
    \ {\n            current_letter = \"E\"\n        } else {\n            if current_grade\
    \ > 0 {\n                current_letter = \"D-\"\n            } else {\n     \
    \           current_letter = \"D+\"\n            }\n        }\n        if grade\
    \ > 0 {\n            current_letter = current_letter + \"+\"\n        } else {\n\
    \            current_letter = current_letter + \"-\"\n        }\n        current_grade\
    \ = grade\n        letter_grades.append(current_letter)\n    }\n    return letter_grades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpuknqejui/tmpuknqejui.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac05ef4bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac05ec42b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac05ec42988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac05ec417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuknqejui                        0x000055a7e7502916 <unavailable> + 6422

    5    libc.so.6                          0x00002ac05f137460 __libc_start_main +
    245

    6    tmpuknqejui                        0x000055a7e7502439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1660014657
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    for grade in grades {\n\
    \        let gradeString = String(format: \"%.2f\", grade)\n        let letterGrade\
    \ = gradeString.components(separatedBy: \",\").last!\n        gradesArray.append(letterGrade)\n\
    \    }\n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp_woz3nzu.swift:26:27: error: no exact matches in call to initializer\
    \ \n        let gradeString = String(format: \"%.2f\", grade)\n              \
    \            ^\nSwift.String:4:23: note: candidate '(String) -> String' requires\
    \ 1 argument, but 2 were provided\n    @inlinable public init<T>(_ value: T) where\
    \ T : LosslessStringConvertible\n                      ^\n/tmp/tmp_woz3nzu.swift:26:27:\
    \ note: candidate has partially matching parameter list (repeating: String, count:\
    \ Int)\n        let gradeString = String(format: \"%.2f\", grade)\n          \
    \                ^\nSwift.String:3:12: note: candidate '(String) -> String' requires\
    \ 1 argument, but 2 were provided\n    public init<S>(_ other: S) where S : LosslessStringConvertible,\
    \ S : Sequence, S.Element == Character\n           ^\nSwift.String:4:12: note:\
    \ candidate '(String) -> String' requires 1 argument, but 2 were provided\n  \
    \  public init<S>(_ characters: S) where S : Sequence, S.Element == Character\n\
    \           ^\nSwift.RangeReplaceableCollection:3:23: note: candidate '(String)\
    \ -> String' requires 1 argument, but 2 were provided\n    @inlinable public init<S>(_\
    \ elements: S) where S : Sequence, Self.Element == S.Element\n               \
    \       ^\n"
  stdout: ''
  timestamp: 1660014656
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    var totalGrade = grades.reduce(0,\
    \ combine: +)\n    var averageGrade = totalGrade / Double(grades.count)\n    var\
    \ letterGrade: String = \"\"\n    \n    if averageGrade < 3.0 {\n        letterGrade\
    \ = \"D-\"\n    } else if averageGrade < 3.3 {\n        letterGrade = \"C-\"\n\
    \    } else if averageGrade < 3.7 {\n        letterGrade = \"B-\"\n    } else\
    \ if averageGrade < 4.0 {\n        letterGrade = \"B-\"\n    } else if averageGrade\
    \ < 4.3 {\n        letterGrade = \"B-\"\n    } else if averageGrade < 4.7 {\n\
    \        letterGrade = \"B-\"\n    } else if averageGrade < 5.0 {\n        letterGrade\
    \ = \"B-\"\n    } else if averageGrade < 5.3 {\n        letterGrade = \"B-\"\n\
    \    } else if averageGrade < 5.7 {\n        letterGrade = \"B-\"\n    } else\
    \ if averageGrade < 6.0 {\n        letterGrade = \"B-\"\n    } else if averageGrade\
    \ < 6.3 {\n        letterGrade = \"B-\"\n    } else if averageGrade < 6.7 {\n\
    \        letterGrade = \"B-\"\n    } else if averageGrade < 7.0 {\n        letterGrade\
    \ = \"B-\"\n    } else if averageGrade < 7.3 {\n        letterGrade = \"B-\"\n\
    \    } else if averageGrade < 7.7 {\n        letterGrade = \"B-\"\n    } else\
    \ if averageGrade < 8.0 {\n        letterGrade = \"B-\"\n    } else if averageGrade\
    \ < 8.3 {\n        letterGrade = \"B-\"\n    } else if averageGrade < 8.7 {\n\
    \        letterGrade = \"B-\"\n    } else if averageGrade < 9.0 {\n        letterGrade\
    \ = \"B-\"\n    } else if averageGrade < 9.3 {\n        letterGrade = \"B-\"\n\
    \    } else if averageGrade < 9.7 {\n        letterGrade = \"B-\"\n    } else\
    \ if averageGrade < 10.0 {\n        letterGrade = \"B-\"\n    } else if averageGrade\
    \ < 10.3 {\n        letterGrade = \"B-\"\n    } else if averageGrade < 10.7 {\n\
    \        letterGrade = \"B-\"\n    } else if averageGrade < 11.0 {\n        letterGrade\
    \ = \"B-\"\n    } else if averageGrade < 11.3 {\n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpp04ha67u.swift:101:66: error: expected '}' at end of brace statement\n\
    assert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"])\n      \
    \                                                           ^\n/tmp/tmpp04ha67u.swift:23:59:\
    \ note: to match this opening '{'\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n                                                          ^\n\
    /tmp/tmpp04ha67u.swift:25:35: error: extraneous argument label 'combine:' in call\n\
    \    var totalGrade = grades.reduce(0, combine: +)\n                         \
    \         ^   ~~~~~~~~~\n                                      \n/tmp/tmpp04ha67u.swift:84:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014657
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    \n    for i in grades {\n\
    \        switch i {\n        case 0...0.1:\n            gradesArray.append(\"\
    E\")\n        case 0.1:\n            gradesArray.append(\"D-\")\n        case\
    \ 0.2:\n            gradesArray.append(\"D+\")\n        case 0.3:\n          \
    \  gradesArray.append(\"D\")\n        case 0.4:\n            gradesArray.append(\"\
    C-\")\n        case 0.5:\n            gradesArray.append(\"C\")\n        case\
    \ 0.6:\n            gradesArray.append(\"B-\")\n        case 0.7:\n          \
    \  gradesArray.append(\"B\")\n        case 0.8:\n            gradesArray.append(\"\
    A-\")\n        case 0.9:\n            gradesArray.append(\"A\")\n        case\
    \ 1.0:\n            gradesArray.append(\"A+\")\n        case 1.1:\n          \
    \  gradesArray.append(\"A\")\n        case 1.2:\n            gradesArray.append(\"\
    B+\")\n        case 1.3:\n            gradesArray.append(\"B\")\n        case\
    \ 1.4:\n            gradesArray.append(\"C+\")\n        case 1.5:\n          \
    \  gradesArray.append(\"C\")\n        case 1.6:\n            gradesArray.append(\"\
    D+\")\n        case 1.7:\n            gradesArray.append(\"D\")\n        case\
    \ 1.8:\n            gradesArray.append(\"D-\")\n        case 1.9:\n          \
    \  gradesArray.append(\"E\")\n        default:\n            gradesArray.append(\"\
    ?\")\n        }\n    }\n    \n    return gradesArray\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpuojaou9i/tmpuojaou9i.swift:89: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad15c699c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad15c390b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad15c390988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad15c38f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuojaou9i                        0x000055d967514926 <unavailable> + 6438

    5    libc.so.6                          0x00002ad15c885460 __libc_start_main +
    245

    6    tmpuojaou9i                        0x000055d967514449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660014657
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    var gpa: Double = 0.0\n\
    \    var letterGrade: String = \"\"\n    \n    for grade in grades {\n       \
    \ gpa = grade * 4.0\n        letterGrade = letterGradeForGPA(gpa)\n        gradesArray.append(letterGrade)\n\
    \    }\n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgz053up7.swift:30:23: error: cannot find 'letterGradeForGPA' in\
    \ scope\n        letterGrade = letterGradeForGPA(gpa)\n                      ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014657
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = grades\n    gradesArray = gradesArray.sorted()\n\
    \    var letterGrades = [String]()\n    var currentGPA = gradesArray[0]\n    var\
    \ currentLetterGrade = \"E\"\n    for index in 0..<gradesArray.count {\n     \
    \   if currentGPA > gradesArray[index] {\n            currentLetterGrade = \"\
    D-\"\n        } else if currentGPA < gradesArray[index] {\n            currentLetterGrade\
    \ = \"D+\"\n        } else if currentGPA == gradesArray[index] {\n           \
    \ currentLetterGrade = \"C\"\n        }\n        letterGrades.append(currentLetterGrade)\n\
    \        currentGPA = gradesArray[index]\n    }\n    return letterGrades\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp_dvgs88t/tmp_dvgs88t.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b19d6266c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19d5f5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19d5f5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19d5f5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_dvgs88t                        0x0000555659d54966 <unavailable> + 6502

    5    libc.so.6                          0x00002b19d6452460 __libc_start_main +
    245

    6    tmp_dvgs88t                        0x0000555659d54489 <unavailable> + 5257

    '
  stdout: ''
  timestamp: 1660014657
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    \n    for grade in grades\
    \ {\n        switch grade {\n        case 4.0:\n            gradesArray.append(\"\
    A+\")\n        case 3.7:\n            gradesArray.append(\"A\")\n        case\
    \ 3.3:\n            gradesArray.append(\"A-\")\n        case 3.0:\n          \
    \  gradesArray.append(\"B+\")\n        case 2.7:\n            gradesArray.append(\"\
    B\")\n        case 2.3:\n            gradesArray.append(\"B-\")\n        case\
    \ 2.0:\n            gradesArray.append(\"C+\")\n        case 1.7:\n          \
    \  gradesArray.append(\"C\")\n        case 1.3:\n            gradesArray.append(\"\
    C-\")\n        case 1.0:\n            gradesArray.append(\"D+\")\n        case\
    \ 0.7:\n            gradesArray.append(\"D\")\n        case 0.0:\n           \
    \ gradesArray.append(\"D-\")\n        case 0.0:\n            gradesArray.append(\"\
    E\")\n        default:\n            gradesArray.append(\"E\")\n        }\n   \
    \ }\n    \n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpbti2zwph/tmpbti2zwph.swift:75: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf88c02c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf888f9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf888f9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf888f87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbti2zwph                        0x0000556dcb9b27a6 <unavailable> + 6054

    5    libc.so.6                          0x00002aaf88dee460 __libc_start_main +
    245

    6    tmpbti2zwph                        0x0000556dcb9b22c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014657
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = grades\n    var gradesArrayCopy = gradesArray\n\
    \    var gradesArrayCopyCount = gradesArray.count\n    var gradesArrayCopyIndex\
    \ = 0\n    var gradesArrayCopyIndexCount = 0\n    var gradesArrayCopyIndexCountMax\
    \ = gradesArrayCopyCount\n    var gradesArrayCopyIndexCountMin = 0\n    var gradesArrayCopyIndexMax\
    \ = 0\n    var gradesArrayCopyIndexMin = 0\n    var gradesArrayCopyIndexMinMax\
    \ = gradesArrayCopyCount\n    var gradesArrayCopyIndexMinMaxMax = gradesArrayCopyCount\n\
    \    var gradesArrayCopyIndexMinMaxMin = 0\n    var gradesArrayCopyIndexMinMaxMinMax\
    \ = 0\n    var gradesArrayCopyIndexMinMaxMinMax = 0\n    var gradesArrayCopyIndexMinMaxMinMaxMax\
    \ = 0\n    var gradesArrayCopyIndexMinMaxMinMaxMax = 0\n    var gradesArrayCopyIndexMinMaxMinMaxMax\
    \ = 0\n    var gradesArrayCopyIndexMinMaxMinMaxMax = 0\n    var gradesArrayCopyIndexMinMaxMinMaxMax\
    \ = 0\n    var gradesArrayCopyIndexMinMaxMinMaxMax = 0\n    var gradesArrayCopyIndexMinMaxMinMaxMax\
    \ = 0\n    var gradesArrayCopyIndexMinMaxMinMaxMax = 0\n    var gradesArrayCopyIndexMinMaxMinMaxMax\
    \ = 0\n    var gradesArrayCopyIndexMinMaxMinMaxMax = 0\n    var gradesArrayCopyIndexMinMaxMinMaxMax\
    \ = 0\n    var gradesArrayCopyIndexMinMaxMinMaxMax = 0\n    var gradesArrayCopyIndexMinMaxMinMaxMax\
    \ = 0\n    var gradesArrayCopyIndexMinMaxMinMaxMax = 0\n    var gradesArrayCopyIndexMinMaxMinMaxMax\
    \ = 0\n    var gradesArrayCopyIndexMinMaxMinMaxMax = 0\n    var gradesArrayCopyIndexMinMaxMinMaxMax\
    \ = 0\n    var gradesArrayCopyIndexMinMaxMinMaxMax = 0\n    var gradesArrayCopyIndexMinMaxMinMaxMax\
    \ = 0\n    var gradesArrayCopyIndexMinMaxMinMaxMax = 0\n    var gradesArrayCopyIndexMinMaxMinMaxMax\
    \ = 0\n    var gradesArrayCopyIndexMinMaxMinMaxMax = 0\n    var gradesArrayCopyIndexMinMaxMinMaxMax\
    \ = 0\n    var gradesArrayCopyIndexMinMaxMinMaxMax = 0\n    var gradesArrayCopyIndexMinMaxMinMaxMax\
    \ = 0\n    var gradesArrayCopyIndexMinMaxMinMaxMax = 0\n    var gradesArrayCopyIndexMinMaxMinMaxMax\
    \ = 0\n    var gradesArrayCopyIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp_z33dmry.swift:37:9: error: invalid redeclaration of 'gradesArrayCopyIndexMinMaxMinMax'\n\
    \    var gradesArrayCopyIndexMinMaxMinMax = 0\n        ^\n/tmp/tmp_z33dmry.swift:36:9:\
    \ note: 'gradesArrayCopyIndexMinMaxMinMax' previously declared here\n    var gradesArrayCopyIndexMinMaxMinMax\
    \ = 0\n        ^\n/tmp/tmp_z33dmry.swift:39:9: error: invalid redeclaration of\
    \ 'gradesArrayCopyIndexMinMaxMinMaxMax'\n    var gradesArrayCopyIndexMinMaxMinMaxMax\
    \ = 0\n        ^\n/tmp/tmp_z33dmry.swift:38:9: note: 'gradesArrayCopyIndexMinMaxMinMaxMax'\
    \ previously declared here\n    var gradesArrayCopyIndexMinMaxMinMaxMax = 0\n\
    \        ^\n/tmp/tmp_z33dmry.swift:40:9: error: invalid redeclaration of 'gradesArrayCopyIndexMinMaxMinMaxMax'\n\
    \    var gradesArrayCopyIndexMinMaxMinMaxMax = 0\n        ^\n/tmp/tmp_z33dmry.swift:38:9:\
    \ note: 'gradesArrayCopyIndexMinMaxMinMaxMax' previously declared here\n    var\
    \ gradesArrayCopyIndexMinMaxMinMaxMax = 0\n        ^\n/tmp/tmp_z33dmry.swift:41:9:\
    \ error: invalid redeclaration of 'gradesArrayCopyIndexMinMaxMinMaxMax'\n    var\
    \ gradesArrayCopyIndexMinMaxMinMaxMax = 0\n        ^\n/tmp/tmp_z33dmry.swift:38:9:\
    \ note: 'gradesArrayCopyIndexMinMaxMinMaxMax' previously declared here\n    var\
    \ gradesArrayCopyIndexMinMaxMinMaxMax = 0\n        ^\n/tmp/tmp_z33dmry.swift:42:9:\
    \ error: invalid redeclaration of 'gradesArrayCopyIndexMinMaxMinMaxMax'\n    var\
    \ gradesArrayCopyIndexMinMaxMinMaxMax = 0\n        ^\n/tmp/tmp_z33dmry.swift:38:9:\
    \ note: 'gradesArrayCopyIndexMinMaxMinMaxMax' previously declared here\n    var\
    \ gradesArrayCopyIndexMinMaxMinMaxMax = 0\n        ^\n/tmp/tmp_z33dmry.swift:43:9:\
    \ error: invalid redeclaration of 'gradesArrayCopyIndexMinMaxMinMaxMax'\n    var\
    \ gradesArrayCopyIndexMinMaxMinMaxMax = 0\n        ^\n/tmp/tmp_z33dmry.swift:38:9:\
    \ note: 'gradesArrayCopyIndexMinMaxMinMaxMax' previously declared here\n    var\
    \ gradesArrayCopyIndexMinMaxMinMaxMax = 0\n        ^\n/tmp/tmp_z33dmry.swift:44:9:\
    \ error: invalid redeclaration of 'gradesArrayCopyIndexMinMaxMinMaxMax'\n    var\
    \ gradesArrayCopyIndexMinMaxMinMaxMax = 0\n        ^\n/tmp/tmp_z33dmry.swift:38"
  stdout: ''
  timestamp: 1660014656
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    var gpa: Double = 0.0\n\
    \    var letterGrade: String = \"\"\n    \n    for grade in grades {\n       \
    \ gpa = grade * 4.0\n        letterGrade = letterGrade + String(gpa)\n       \
    \ \n        if gpa > 3.7 {\n            letterGrade = letterGrade + \"+\"\n  \
    \      } else if gpa > 3.3 {\n            letterGrade = letterGrade + \"-\"\n\
    \        } else if gpa > 2.7 {\n            letterGrade = letterGrade + \"+\"\n\
    \        } else if gpa > 2.3 {\n            letterGrade = letterGrade + \"-\"\n\
    \        } else if gpa > 1.7 {\n            letterGrade = letterGrade + \"+\"\n\
    \        } else if gpa > 1.3 {\n            letterGrade = letterGrade + \"-\"\n\
    \        } else if gpa > 1.0 {\n            letterGrade = letterGrade + \"+\"\n\
    \        } else if gpa > 0.7 {\n            letterGrade = letterGrade + \"+\"\n\
    \        } else {\n            letterGrade = letterGrade + \"-\"\n        }\n\
    \    }\n    \n    gradesArray.append(letterGrade)\n    \n    return gradesArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmprwbbm0bs/tmprwbbm0bs.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b227678cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2276483b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2276483988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22764827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprwbbm0bs                        0x000056321eedd8b6 <unavailable> + 6326

    5    libc.so.6                          0x00002b2276978460 __libc_start_main +
    245

    6    tmprwbbm0bs                        0x000056321eedd3d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1660014657
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    var totalGrade: Double\
    \ = 0.0\n    var grade: Double = 0.0\n    var letterGrade: String = \"\"\n   \
    \ \n    for grade in grades {\n        totalGrade += grade\n    }\n    \n    for\
    \ grade in grades {\n        letterGrade = \"\"\n        \n        if totalGrade\
    \ > 4.0 {\n            letterGrade = \"A+\"\n        } else if totalGrade > 3.7\
    \ {\n            letterGrade = \"A\"\n        } else if totalGrade > 3.3 {\n \
    \           letterGrade = \"A-\"\n        } else if totalGrade > 3.0 {\n     \
    \       letterGrade = \"B+\"\n        } else if totalGrade > 2.7 {\n         \
    \   letterGrade = \"B\"\n        } else if totalGrade > 2.3 {\n            letterGrade\
    \ = \"B-\"\n        } else if totalGrade > 2.0 {\n            letterGrade = \"\
    C+\"\n        } else if totalGrade > 1.7 {\n            letterGrade = \"C\"\n\
    \        } else if totalGrade > 1.3 {\n            letterGrade = \"C-\"\n    \
    \    } else if totalGrade > 1.0 {\n            letterGrade = \"D+\"\n        }\
    \ else if totalGrade > 0.7 {\n            letterGrade = \"D\"\n        } else\
    \ if totalGrade > 0.0 {\n            letterGrade = \"D-\"\n        } else {\n\
    \            letterGrade = \"E\"\n        }\n        \n        gradesArray.append(letterGrade)\n\
    \        totalGrade = 0.0\n    }\n    \n    return gradesArray\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp9i32cl_e/tmp9i32cl_e.swift:84: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b610076ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6100465b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6100465988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b61004647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9i32cl_e                        0x000056059cdae7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b610095a460 __libc_start_main +
    245

    6    tmp9i32cl_e                        0x000056059cdae2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014657
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var grades_string = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var gpa_rounded = round(gpa)\n    var gpa_rounded_string =\
    \ String(gpa_rounded)\n    var letter_grade = gpa_rounded_string.characters.reduce(\"\
    \") { $0 + String($1) }\n    grades_string.append(letter_grade)\n    grades_string.append(gpa_rounded_string)\n\
    \    return grades_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp65m3tva4.swift:25:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n/tmp/tmp65m3tva4.swift:26:23:\
    \ error: cannot find 'round' in scope\n    var gpa_rounded = round(gpa)\n    \
    \                  ^~~~~\n"
  stdout: ''
  timestamp: 1660014657
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var gpaSum = grades.reduce(0, combine: +)\n    var gpaAverage\
    \ = grades.reduce(0, combine: +) / Double(grades.count)\n    var gpaAverageSum\
    \ = grades.reduce(0, combine: +) / Double(grades.count)\n    var gpaAverageAverage\
    \ = grades.reduce(0, combine: +) / Double(grades.count)\n    var gpaAverageAverageSum\
    \ = grades.reduce(0, combine: +) / Double(grades.count)\n    var gpaAverageAverageAverage\
    \ = grades.reduce(0, combine: +) / Double(grades.count)\n    var gpaAverageAverageAverageSum\
    \ = grades.reduce(0, combine: +) / Double(grades.count)\n    var gpaAverageAverageAverageAverage\
    \ = grades.reduce(0, combine: +) / Double(grades.count)\n    var gpaAverageAverageAverageAverageSum\
    \ = grades.reduce(0, combine: +) / Double(grades.count)\n    var gpaAverageAverageAverageAverageAverage\
    \ = grades.reduce(0, combine: +) / Double(grades.count)\n    var gpaAverageAverageAverageAverageAverageSum\
    \ = grades.reduce(0, combine: +) / Double(grades.count)\n    var gpaAverageAverageAverageAverageAverageAverage\
    \ = grades.reduce(0, combine: +) / Double(grades.count)\n    var gpaAverageAverageAverageAverageAverageAverageSum\
    \ = grades.reduce(0, combine: +) / Double(grades.count)\n    var gpaAverageAverageAverageAverageAverageAverageAverage\
    \ = grades.reduce(0, combine: +) / Double(grades.count)\n    var gpaAverageAverageAverageAverageAverageAverageSum\
    \ = grades.reduce(0, combine: +) / Double(grades.count)\n    var gpaAverageAverageAverageAverageAverageAverageAverage\
    \ = grades.reduce(0, combine: +) / Double(grades.count)\n    var gpaAverageAverageAverageAverageAverageAverageSum\
    \ = grades.reduce(0, combine: +) / Double(grades.count)\n    var gpaAverageAverageAverageAverageAverageAverageAverage\
    \ = grades.reduce(0, combine: +) / Double(grades.count)\n    var gpaAverageAverageAverageAverageAverageAverageSum\
    \ = grades.reduce(0, combine: +) / Double(grades.count)\n    var gpaAverageAverageAverageAverageAverageAverageAverage\
    \ = grades.reduce(0, combine: +) / Double(grades.count)\n    var gpaAverageAverageAverageAverageAverageAverageSum\
    \ = grades.reduce(0, combine: +) / Double(grades.count)\n    var gpaAverageAverageAverageAverageAverageAverageAverage\
    \ = grades.reduce\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpr35tsbr9.swift:25:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n/tmp/tmpr35tsbr9.swift:26:31:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaSum = grades.reduce(0,\
    \ combine: +)\n                              ^   ~~~~~~~~~\n                 \
    \                 \n/tmp/tmpr35tsbr9.swift:27:35: error: extraneous argument label\
    \ 'combine:' in call\n    var gpaAverage = grades.reduce(0, combine: +) / Double(grades.count)\n\
    \                                  ^   ~~~~~~~~~\n                           \
    \           \n/tmp/tmpr35tsbr9.swift:28:38: error: extraneous argument label 'combine:'\
    \ in call\n    var gpaAverageSum = grades.reduce(0, combine: +) / Double(grades.count)\n\
    \                                     ^   ~~~~~~~~~\n                        \
    \                 \n/tmp/tmpr35tsbr9.swift:29:42: error: extraneous argument label\
    \ 'combine:' in call\n    var gpaAverageAverage = grades.reduce(0, combine: +)\
    \ / Double(grades.count)\n                                         ^   ~~~~~~~~~\n\
    \                                             \n/tmp/tmpr35tsbr9.swift:30:45:\
    \ error: extraneous argument label 'combine:' in call\n    var gpaAverageAverageSum\
    \ = grades.reduce(0, combine: +) / Double(grades.count)\n                    \
    \                        ^   ~~~~~~~~~\n                                     \
    \           \n/tmp/tmpr35tsbr9.swift:31:49: error: extraneous argument label 'combine:'\
    \ in call\n    var gpaAverageAverageAverage = grades.reduce(0, combine: +) / Double(grades.count)\n\
    \                                                ^   ~~~~~~~~~\n             \
    \                                       \n/tmp/tmpr35tsbr9.swift:32:52: error:\
    \ extraneous argument label 'combine:' in call\n    var gpaAverageAverageAverageSum\
    \ = grades.reduce(0, combine: +) / Double(grades.count)\n                    \
    \                               ^   ~~~~~~~~~\n                              \
    \                         \n/tmp/tmpr35tsbr9.swift:33:56: error: e"
  stdout: ''
  timestamp: 1660014658
