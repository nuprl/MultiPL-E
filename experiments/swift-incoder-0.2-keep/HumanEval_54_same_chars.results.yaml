language: swift
name: HumanEval_54_same_chars
results:
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.lowercased()\n\ts1 = s1.lowercased()\n\
    \t\n\tlet n0 = s0.count\n\tlet n1 = s1.count\n\t\n\tif n0 < n1 {\n\t\treturn false\n\
    \t}\n\t\n\tlet i0 = 0\n\tlet i1 = 0\n\t\n\twhile i0 < n0 && i1 < n1 {\n\t\tif\
    \ s0[i0] != s1[i1] {\n\t\t\treturn false\n\t\t}\n\t\t\n\t\ti0 += 1\n\t\ti1 +=\
    \ 1\n\t}\n\t\n\treturn true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpsmw0ni90.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.lowercased()\n        ^~\n/tmp/tmpsmw0ni90.swift:17:2:\
    \ error: cannot assign to value: 's1' is a 'let' constant\n        s1 = s1.lowercased()\n\
    \        ^~\n/tmp/tmpsmw0ni90.swift:30:6: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n         \
    \       if s0[i0] != s1[i1] {\n                   ^~~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpsmw0ni90.swift:30:16: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n                if s0[i0] != s1[i1] {\n                          \
    \   ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked\
    \ unavailable here\n    public subscript(i: Int) -> Character { get }\n      \
    \     ^\n/tmp/tmpsmw0ni90.swift:34:6: error: left side of mutating operator isn't\
    \ mutable: 'i0' is a 'let' constant\n                i0 += 1\n               \
    \ ~~ ^\n/tmp/tmpsmw0ni90.swift:26:2: note: change 'let' to 'var' to make it mutable\n\
    \        let i0 = 0\n        ^~~\n        var\n/tmp/tmpsmw0ni90.swift:35:6: error:\
    \ left side of mutating operator isn't mutable: 'i1' is a 'let' constant\n   \
    \             i1 += 1\n                ~~ ^\n/tmp/tmpsmw0ni90.swift:27:2: note:\
    \ change 'let' to 'var' to make it mutable\n        let i1 = 0\n        ^~~\n\
    \        var\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\t\n\
    \tlet len0 = s0.Length\n\tlet len1 = s1.Length\n\t\n\tif len0 == 0 || len1 ==\
    \ 0 {\n\t\treturn true\n\t}\n\t\n\tlet mut i0 = 0\n\tlet mut i1 = 0\n\t\n\twhile\
    \ i0 < len0 && i1 < len1 {\n\t\tif s0[i0] != s1[i1] {\n\t\t\treturn false\n\t\t\
    }\n\t\t\n\t\ti0 += 1\n\t\ti1 += 1\n\t}\n\t\n\treturn true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpg2njuds2.swift:26:10: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n        let mut i0 =\
    \ 0\n                ^\n/tmp/tmpg2njuds2.swift:26:10: note: join the identifiers\
    \ together\n        let mut i0 = 0\n            ~~~~^~\n            muti0\n/tmp/tmpg2njuds2.swift:26:10:\
    \ note: join the identifiers together with camel-case\n        let mut i0 = 0\n\
    \            ~~~~^~\n            mutI0\n/tmp/tmpg2njuds2.swift:27:10: error: found\
    \ an unexpected second identifier in constant declaration; is there an accidental\
    \ break?\n        let mut i1 = 0\n                ^\n/tmp/tmpg2njuds2.swift:27:10:\
    \ note: join the identifiers together\n        let mut i1 = 0\n            ~~~~^~\n\
    \            muti1\n/tmp/tmpg2njuds2.swift:27:10: note: join the identifiers together\
    \ with camel-case\n        let mut i1 = 0\n            ~~~~^~\n            mutI1\n\
    /tmp/tmpg2njuds2.swift:16:2: error: cannot assign to value: 's0' is a 'let' constant\n\
    \        s0 = s0.ToLower()\n        ^~\n/tmp/tmpg2njuds2.swift:16:10: error: value\
    \ of type 'String' has no member 'ToLower'\n        s0 = s0.ToLower()\n      \
    \       ~~ ^~~~~~~\n/tmp/tmpg2njuds2.swift:17:2: error: cannot assign to value:\
    \ 's1' is a 'let' constant\n        s1 = s1.ToLower()\n        ^~\n/tmp/tmpg2njuds2.swift:17:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s1 = s1.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmpg2njuds2.swift:19:16: error: value of type 'String'\
    \ has no member 'Length'\n        let len0 = s0.Length\n                   ~~\
    \ ^~~~~~\n/tmp/tmpg2njuds2.swift:20:16: error: value of type 'String' has no member\
    \ 'Length'\n        let len1 = s1.Length\n                   ~~ ^~~~~~\n/tmp/tmpg2njuds2.swift:27:6:\
    \ error: invalid redeclaration of 'mut'\n        let mut i1 = 0\n            ^\n\
    /tmp/tmpg2njuds2.swift:26:6: note: 'mut' previously declared here\n        let\
    \ mut i0 = 0\n            ^\n/tmp/tmpg2njuds2.swift:29:8: error: cannot find 'i0'\
    \ in scope\n        while i0 < len0 && i1 < len1 {\n              ^~\n/tmp/tmpg2njuds2.swift:29:21:\
    \ error: cannot find 'i"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\t\n\
    \tlet s0_len = s0.Length\n\tlet s1_len = s1.Length\n\t\n\tif s0_len != s1_len\
    \ {\n\t\treturn false\n\t}\n\t\n\tfor i in 0..<s0_len {\n\t\tif s0[i] != s1[i]\
    \ {\n\t\t\treturn false\n\t\t}\n\t}\n\t\n\treturn true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_sa_1gn4.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.ToLower()\n        ^~\n/tmp/tmp_sa_1gn4.swift:16:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s0 = s0.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmp_sa_1gn4.swift:17:2: error: cannot assign to\
    \ value: 's1' is a 'let' constant\n        s1 = s1.ToLower()\n        ^~\n/tmp/tmp_sa_1gn4.swift:17:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s1 = s1.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmp_sa_1gn4.swift:19:18: error: value of type 'String'\
    \ has no member 'Length'\n        let s0_len = s0.Length\n                   \
    \  ~~ ^~~~~~\n/tmp/tmp_sa_1gn4.swift:20:18: error: value of type 'String' has\
    \ no member 'Length'\n        let s1_len = s1.Length\n                     ~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\t\n\
    \tlet s0len = s0.Length\n\tlet s1len = s1.Length\n\t\n\tif s0len == 0 || s1len\
    \ == 0 {\n\t\treturn true\n\t}\n\t\n\tlet s0char = s0[s0len-1]\n\tlet s1char =\
    \ s1[s1len-1]\n\t\n\tfor i := 0; i < s0len; i++ {\n\t\tif s0char != s1char {\n\
    \t\t\treturn false\n\t\t}\n\t\t\n\t\ts0char = s0[s0len-1 - i]\n\t\ts1char = s1[s1len-1\
    \ - i]\n\t}\n\t\n\treturn true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_c7r2vi3.swift:29:9: error: expected type\n        for i := 0;\
    \ i < s0len; i++ {\n               ^\n                <#type#>\n/tmp/tmp_c7r2vi3.swift:29:9:\
    \ error: expected 'in' after for-each pattern\n        for i := 0; i < s0len;\
    \ i++ {\n               ^\n/tmp/tmp_c7r2vi3.swift:29:9: error: expected Sequence\
    \ expression for for-each loop\n        for i := 0; i < s0len; i++ {\n       \
    \        ^\n/tmp/tmp_c7r2vi3.swift:16:2: error: cannot assign to value: 's0' is\
    \ a 'let' constant\n        s0 = s0.ToLower()\n        ^~\n/tmp/tmp_c7r2vi3.swift:16:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s0 = s0.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmp_c7r2vi3.swift:17:2: error: cannot assign to\
    \ value: 's1' is a 'let' constant\n        s1 = s1.ToLower()\n        ^~\n/tmp/tmp_c7r2vi3.swift:17:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s1 = s1.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmp_c7r2vi3.swift:19:17: error: value of type 'String'\
    \ has no member 'Length'\n        let s0len = s0.Length\n                    ~~\
    \ ^~~~~~\n/tmp/tmp_c7r2vi3.swift:20:17: error: value of type 'String' has no member\
    \ 'Length'\n        let s1len = s1.Length\n                    ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 += s0\n\ts1 += s1\n\treturn s0.prefix(s1.length)\
    \ == s1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\", s1: \"\
    dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\") ==\
    \ true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjbwe625x.swift:16:5: error: left side of mutating operator isn't\
    \ mutable: 's0' is a 'let' constant\n        s0 += s0\n        ~~ ^\n/tmp/tmpjbwe625x.swift:17:5:\
    \ error: left side of mutating operator isn't mutable: 's1' is a 'let' constant\n\
    \        s1 += s1\n        ~~ ^\n/tmp/tmpjbwe625x.swift:18:22: error: value of\
    \ type 'String' has no member 'length'\n        return s0.prefix(s1.length) ==\
    \ s1\n                         ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\t\
    s0 = s0.ToUpper()\n\ts1 = s1.ToUpper()\n\ts0 = s0.Replace(\"\xDF\", \"ss\")\n\t\
    s1 = s1.Replace(\"\xDF\", \"ss\")\n\ts0 = s0.Replace(\"\xDF\", \"ss\")\n\ts1 =\
    \ s1.Replace(\"\xDF\", \"ss\")\n\ts0 = s0.Replace(\"\xDF\", \"ss\")\n\ts1 = s1.Replace(\"\
    \xDF\", \"ss\")\n\ts0 = s0.Replace(\"\xDF\", \"ss\")\n\ts1 = s1.Replace(\"\xDF\
    \", \"ss\")\n\ts0 = s0.Replace(\"\xDF\", \"ss\")\n\ts1 = s1.Replace(\"\xDF\",\
    \ \"ss\")\n\ts0 = s0.Replace(\"\xDF\", \"ss\")\n\ts1 = s1.Replace(\"\xDF\", \"\
    ss\")\n\ts0 = s0.Replace(\"\xDF\", \"ss\")\n\ts1 = s1.Replace(\"\xDF\", \"ss\"\
    )\n\ts0 = s0.Replace(\"\xDF\", \"ss\")\n\ts1 = s1.Replace(\"\xDF\", \"ss\")\n\t\
    s0 = s0.Replace(\"\xDF\", \"ss\")\n\ts1 = s1.Replace(\"\xDF\", \"ss\")\n\ts0 =\
    \ s0.Replace(\"\xDF\", \"ss\")\n\ts1 = s1.Replace(\"\xDF\", \"ss\")\n\ts0 = s0.Replace(\"\
    \xDF\", \"ss\")\n\ts1 = s1.Replace(\"\xDF\", \"ss\")\n\ts0 = s0.Replace(\"\xDF\
    \", \"ss\")\n\ts1 = s1.Replace(\"\xDF\", \"ss\")\n\ts0 = s0.Replace(\"\xDF\",\
    \ \"ss\")\n\ts1 = s1.Replace(\"\xDF\", \"ss\")\n\ts0 = s0.Replace(\"\xDF\", \"\
    ss\")\n\ts1 = s1.Replace(\"\xDF\", \"ss\")\n\ts0 = s0.Replace(\"\xDF\", \"ss\"\
    )\n\ts1 = s1.Replace(\"\xDF\", \"ss\")\n\ts0 = s0.Replace(\"\xDF\", \"ss\")\n\t\
    s1 = s1.Replace(\"\xDF\", \"ss\")\n\ts0 = s0.Replace(\"\xDF\", \"ss\")\n\ts1 =\
    \ s1.Replace(\"\xDF\", \"ss\")\n\ts0 = s0.Replace(\"\xDF\", \"ss\")\n\ts1 = s1.Replace(\"\
    \xDF\", \"ss\")\n\ts0 = s0.Replace(\"\xDF\", \"ss\")\n\ts1 = s1.Replace(\"\xDF\
    \", \"ss\")\n\ts0 = s0.Replace(\"\xDF\", \"ss\")\n\ts1 = s1.Replace(\"\xDF\",\
    \ \"ss\")\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\", s1: \"\
    dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\") ==\
    \ true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpavw75whe.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.ToLower()\n        ^~\n/tmp/tmpavw75whe.swift:16:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s0 = s0.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmpavw75whe.swift:17:2: error: cannot assign to\
    \ value: 's1' is a 'let' constant\n        s1 = s1.ToLower()\n        ^~\n/tmp/tmpavw75whe.swift:17:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s1 = s1.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmpavw75whe.swift:18:2: error: cannot assign to\
    \ value: 's0' is a 'let' constant\n        s0 = s0.ToUpper()\n        ^~\n/tmp/tmpavw75whe.swift:18:10:\
    \ error: value of type 'String' has no member 'ToUpper'\n        s0 = s0.ToUpper()\n\
    \             ~~ ^~~~~~~\n/tmp/tmpavw75whe.swift:19:2: error: cannot assign to\
    \ value: 's1' is a 'let' constant\n        s1 = s1.ToUpper()\n        ^~\n/tmp/tmpavw75whe.swift:19:10:\
    \ error: value of type 'String' has no member 'ToUpper'\n        s1 = s1.ToUpper()\n\
    \             ~~ ^~~~~~~\n/tmp/tmpavw75whe.swift:20:2: error: cannot assign to\
    \ value: 's0' is a 'let' constant\n        s0 = s0.Replace(\"\xDF\", \"ss\")\n\
    /tmp/tmpavw75whe.swift:20:10: error: value of type 'String' has no member 'Replace'\n\
    \        s0 = s0.Replace(\"\xDF\", \"ss\")\n/tmp/tmpavw75whe.swift:21:2: error:\
    \ cannot assign to value: 's1' is a 'let' constant\n        s1 = s1.Replace(\"\
    \xDF\", \"ss\")\n/tmp/tmpavw75whe.swift:21:10: error: value of type 'String' has\
    \ no member 'Replace'\n        s1 = s1.Replace(\"\xDF\", \"ss\")\n/tmp/tmpavw75whe.swift:22:2:\
    \ error: cannot assign to value: 's0' is a 'let' constant\n        s0 = s0.Replace(\"\
    \xDF\", \"ss\")\n/tmp/tmpavw75whe.swift:22:10: error: value of type 'String' has\
    \ no member 'Replace'\n        s0 = s0.Replace(\"\xDF\", \"ss\")\n/tmp/tmpavw75whe.swift:23:2:\
    \ error: cannot assign to value: 's1' is a 'let' constant\n        s1 = s1.Replace(\"\
    \xDF\", \"ss\")\n/tmp/tmpavw75whe.swift:23:10: error: value of type 'String' has\
    \ no member 'Replace'\n        s1 = s1.Replace(\"\xDF\", \"ss\")\n/tmp/tmpavw75whe.swift:24:2:\
    \ error: cannot assign to value: 's0' is "
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.lowercased()\n\ts1 = s1.lowercased()\n\
    \tlet n0 = s0.count\n\tlet n1 = s1.count\n\tfor i in 0..<n0 {\n\t\tif s0[i] !=\
    \ s1[i] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn n0 == n1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpy76_d3cu.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.lowercased()\n        ^~\n/tmp/tmpy76_d3cu.swift:17:2:\
    \ error: cannot assign to value: 's1' is a 'let' constant\n        s1 = s1.lowercased()\n\
    \        ^~\n/tmp/tmpy76_d3cu.swift:21:6: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n         \
    \       if s0[i] != s1[i] {\n                   ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpy76_d3cu.swift:21:15: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n                if s0[i] != s1[i] {\n                            ^~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\tlet s0_len = s0.count\n\tlet s1_len = s1.count\n\
    \tif s0_len != s1_len {\n\t\treturn false\n\t}\n\tlet s0_char = s0.characters\n\
    \tlet s1_char = s1.characters\n\tfor idx in 0..<s0_len {\n\t\tif s0_char[idx]\
    \ != s1_char[idx] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxugj9tq1.swift:21:19: error: 'characters' is unavailable: Please\
    \ use String directly\n        let s0_char = s0.characters\n                 \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpxugj9tq1.swift:22:19:\
    \ error: 'characters' is unavailable: Please use String directly\n        let\
    \ s1_char = s1.characters\n                         ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpxugj9tq1.swift:24:6: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \                if s0_char[idx] != s1_char[idx] {\n                   ^~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpxugj9tq1.swift:24:22:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n                if s0_char[idx] != s1_char[idx]\
    \ {\n                                   ^~~~~~~~~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.lowercased()\n\ts1 = s1.lowercased()\n\
    \tlet n0 = s0.count\n\tlet n1 = s1.count\n\t\n\tif n0 < n1 {\n\t\treturn false\n\
    \t}\n\t\n\tfor i in 0..<n0 {\n\t\tif s0[i] != s1[i] {\n\t\t\treturn false\n\t\t\
    }\n\t}\n\t\n\treturn true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9pnu4xi5.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.lowercased()\n        ^~\n/tmp/tmp9pnu4xi5.swift:17:2:\
    \ error: cannot assign to value: 's1' is a 'let' constant\n        s1 = s1.lowercased()\n\
    \        ^~\n/tmp/tmp9pnu4xi5.swift:26:6: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n         \
    \       if s0[i] != s1[i] {\n                   ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmp9pnu4xi5.swift:26:15: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n                if s0[i] != s1[i] {\n                            ^~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 += s0\n\ts1 += s1\n\treturn s0.prefix(s0.count)\
    \ == s1.prefix(s1.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpht3fg33g.swift:16:5: error: left side of mutating operator isn't\
    \ mutable: 's0' is a 'let' constant\n        s0 += s0\n        ~~ ^\n/tmp/tmpht3fg33g.swift:17:5:\
    \ error: left side of mutating operator isn't mutable: 's1' is a 'let' constant\n\
    \        s1 += s1\n        ~~ ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\t\
    let n0 = s0.Length\n\tlet n1 = s1.Length\n\tif n0 == 0 || n1 == 0 {\n\t\treturn\
    \ true\n\t}\n\tlet mut i0 = 0\n\tlet mut i1 = 0\n\twhile i0 < n0 && i1 < n1 {\n\
    \t\tif s0[i0] != s1[i1] {\n\t\t\treturn false\n\t\t}\n\t\ti0 += 1\n\t\ti1 += 1\n\
    \t}\n\treturn i0 == n0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp19jmo36z.swift:23:10: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n        let mut i0 =\
    \ 0\n                ^\n/tmp/tmp19jmo36z.swift:23:10: note: join the identifiers\
    \ together\n        let mut i0 = 0\n            ~~~~^~\n            muti0\n/tmp/tmp19jmo36z.swift:23:10:\
    \ note: join the identifiers together with camel-case\n        let mut i0 = 0\n\
    \            ~~~~^~\n            mutI0\n/tmp/tmp19jmo36z.swift:24:10: error: found\
    \ an unexpected second identifier in constant declaration; is there an accidental\
    \ break?\n        let mut i1 = 0\n                ^\n/tmp/tmp19jmo36z.swift:24:10:\
    \ note: join the identifiers together\n        let mut i1 = 0\n            ~~~~^~\n\
    \            muti1\n/tmp/tmp19jmo36z.swift:24:10: note: join the identifiers together\
    \ with camel-case\n        let mut i1 = 0\n            ~~~~^~\n            mutI1\n\
    /tmp/tmp19jmo36z.swift:16:2: error: cannot assign to value: 's0' is a 'let' constant\n\
    \        s0 = s0.ToLower()\n        ^~\n/tmp/tmp19jmo36z.swift:16:10: error: value\
    \ of type 'String' has no member 'ToLower'\n        s0 = s0.ToLower()\n      \
    \       ~~ ^~~~~~~\n/tmp/tmp19jmo36z.swift:17:2: error: cannot assign to value:\
    \ 's1' is a 'let' constant\n        s1 = s1.ToLower()\n        ^~\n/tmp/tmp19jmo36z.swift:17:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s1 = s1.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmp19jmo36z.swift:18:14: error: value of type 'String'\
    \ has no member 'Length'\n        let n0 = s0.Length\n                 ~~ ^~~~~~\n\
    /tmp/tmp19jmo36z.swift:19:14: error: value of type 'String' has no member 'Length'\n\
    \        let n1 = s1.Length\n                 ~~ ^~~~~~\n/tmp/tmp19jmo36z.swift:24:6:\
    \ error: invalid redeclaration of 'mut'\n        let mut i1 = 0\n            ^\n\
    /tmp/tmp19jmo36z.swift:23:6: note: 'mut' previously declared here\n        let\
    \ mut i0 = 0\n            ^\n/tmp/tmp19jmo36z.swift:25:8: error: cannot find 'i0'\
    \ in scope\n        while i0 < n0 && i1 < n1 {\n              ^~\n/tmp/tmp19jmo36z.swift:25:19:\
    \ error: cannot find 'i1' in scope\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.lowercased()\n\ts1 = s1.lowercased()\n\
    \t\n\tlet s0c = s0.characters\n\tlet s1c = s1.characters\n\t\n\tfor i in 0..<min(s0.count,\
    \ s1.count) {\n\t\tif s0c[i] != s1c[i] {\n\t\t\treturn false\n\t\t}\n\t}\n\t\n\
    \treturn true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"\
    eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\"\
    , s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\"\
    ) == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmplwoe3h77.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.lowercased()\n        ^~\n/tmp/tmplwoe3h77.swift:17:2:\
    \ error: cannot assign to value: 's1' is a 'let' constant\n        s1 = s1.lowercased()\n\
    \        ^~\n/tmp/tmplwoe3h77.swift:19:15: error: 'characters' is unavailable:\
    \ Please use String directly\n        let s0c = s0.characters\n              \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmplwoe3h77.swift:20:15:\
    \ error: 'characters' is unavailable: Please use String directly\n        let\
    \ s1c = s1.characters\n                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmplwoe3h77.swift:23:6: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \                if s0c[i] != s1c[i] {\n                   ^~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmplwoe3h77.swift:23:16:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n                if s0c[i] != s1c[i] {\n       \
    \                      ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.lowercased()\n\ts1 = s1.lowercased()\n\
    \tlet n = s0.count\n\tlet m = s1.count\n\tif n == m {\n\t\tfor _ in 0..<n {\n\t\
    \t\tif s0[Int(arc4random_uniform(UInt32(n)))] != s1[Int(arc4random_uniform(UInt32(m)))]\
    \ {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t\treturn true\n\t}\n\treturn false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdybotx5t.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.lowercased()\n        ^~\n/tmp/tmpdybotx5t.swift:17:2:\
    \ error: cannot assign to value: 's1' is a 'let' constant\n        s1 = s1.lowercased()\n\
    \        ^~\n/tmp/tmpdybotx5t.swift:22:14: error: cannot find 'arc4random_uniform'\
    \ in scope\n                        if s0[Int(arc4random_uniform(UInt32(n)))]\
    \ != s1[Int(arc4random_uniform(UInt32(m)))] {\n                              \
    \    ^~~~~~~~~~~~~~~~~~\n/tmp/tmpdybotx5t.swift:22:56: error: cannot find 'arc4random_uniform'\
    \ in scope\n                        if s0[Int(arc4random_uniform(UInt32(n)))]\
    \ != s1[Int(arc4random_uniform(UInt32(m)))] {\n                              \
    \                                              ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\tlet s0c = s0.characters\n\tlet s1c = s1.characters\n\
    \t\n\tfor i in 0..<min(s0.count, s1.count) {\n\t\tif s0c[i] != s1c[i] {\n\t\t\t\
    return false\n\t\t}\n\t}\n\t\n\treturn true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\n\
    assert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmib6ztnj.swift:16:15: error: 'characters' is unavailable: Please\
    \ use String directly\n        let s0c = s0.characters\n                     ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpmib6ztnj.swift:17:15:\
    \ error: 'characters' is unavailable: Please use String directly\n        let\
    \ s1c = s1.characters\n                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpmib6ztnj.swift:20:6: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \                if s0c[i] != s1c[i] {\n                   ^~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpmib6ztnj.swift:20:16:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n                if s0c[i] != s1c[i] {\n       \
    \                      ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\t\n\
    \tlet n0 = s0.Length\n\tlet n1 = s1.Length\n\t\n\tif n0 == 0 || n1 == 0 {\n\t\t\
    return true\n\t}\n\t\n\tlet mut i = 0\n\tlet mut j = 0\n\t\n\twhile i < n0 &&\
    \ j < n1 {\n\t\tif s0[i] != s1[j] {\n\t\t\treturn false\n\t\t}\n\t\t\n\t\ti +=\
    \ 1\n\t\tj += 1\n\t}\n\t\n\treturn true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    ) == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\n\
    assert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0:\
    \ \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmphcyc8_n_.swift:26:10: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n        let mut i =\
    \ 0\n                ^\n/tmp/tmphcyc8_n_.swift:26:10: note: join the identifiers\
    \ together\n        let mut i = 0\n            ~~~~^\n            muti\n/tmp/tmphcyc8_n_.swift:26:10:\
    \ note: join the identifiers together with camel-case\n        let mut i = 0\n\
    \            ~~~~^\n            mutI\n/tmp/tmphcyc8_n_.swift:27:10: error: found\
    \ an unexpected second identifier in constant declaration; is there an accidental\
    \ break?\n        let mut j = 0\n                ^\n/tmp/tmphcyc8_n_.swift:27:10:\
    \ note: join the identifiers together\n        let mut j = 0\n            ~~~~^\n\
    \            mutj\n/tmp/tmphcyc8_n_.swift:27:10: note: join the identifiers together\
    \ with camel-case\n        let mut j = 0\n            ~~~~^\n            mutJ\n\
    /tmp/tmphcyc8_n_.swift:16:2: error: cannot assign to value: 's0' is a 'let' constant\n\
    \        s0 = s0.ToLower()\n        ^~\n/tmp/tmphcyc8_n_.swift:16:10: error: value\
    \ of type 'String' has no member 'ToLower'\n        s0 = s0.ToLower()\n      \
    \       ~~ ^~~~~~~\n/tmp/tmphcyc8_n_.swift:17:2: error: cannot assign to value:\
    \ 's1' is a 'let' constant\n        s1 = s1.ToLower()\n        ^~\n/tmp/tmphcyc8_n_.swift:17:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s1 = s1.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmphcyc8_n_.swift:19:14: error: value of type 'String'\
    \ has no member 'Length'\n        let n0 = s0.Length\n                 ~~ ^~~~~~\n\
    /tmp/tmphcyc8_n_.swift:20:14: error: value of type 'String' has no member 'Length'\n\
    \        let n1 = s1.Length\n                 ~~ ^~~~~~\n/tmp/tmphcyc8_n_.swift:27:6:\
    \ error: invalid redeclaration of 'mut'\n        let mut j = 0\n            ^\n\
    /tmp/tmphcyc8_n_.swift:26:6: note: 'mut' previously declared here\n        let\
    \ mut i = 0\n            ^\n/tmp/tmphcyc8_n_.swift:29:8: error: cannot find 'i'\
    \ in scope\n        while i < n0 && j < n1 {\n              ^\n/tmp/tmphcyc8_n_.swift:29:18:\
    \ error: cannot find 'j' in scope\n        while i < n0 "
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.lowercased()\n\ts1 = s1.lowercased()\n\
    \tlet n0 = s0.count\n\tlet n1 = s1.count\n\tfor i in 0..<n0 {\n\t\tif s0[i] !=\
    \ s1[i] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpsr4247i_.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.lowercased()\n        ^~\n/tmp/tmpsr4247i_.swift:17:2:\
    \ error: cannot assign to value: 's1' is a 'let' constant\n        s1 = s1.lowercased()\n\
    \        ^~\n/tmp/tmpsr4247i_.swift:21:6: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n         \
    \       if s0[i] != s1[i] {\n                   ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpsr4247i_.swift:21:15: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n                if s0[i] != s1[i] {\n                            ^~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\tlet s0_len = s0.count\n\tlet s1_len = s1.count\n\
    \tif s0_len != s1_len {\n\t\treturn false\n\t}\n\tfor i in 0..<s0_len {\n\t\t\
    if s0[i] != s1[i] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpy7srm9yg.swift:22:6: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n                if\
    \ s0[i] != s1[i] {\n                   ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpy7srm9yg.swift:22:15: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \                if s0[i] != s1[i] {\n                            ^~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.lowercased()\n\ts1 = s1.lowercased()\n\
    \tlet len0 = s0.count\n\tlet len1 = s1.count\n\tfor i in 0..<min(len0, len1) {\n\
    \t\tif s0[i] != s1[i] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn len0 == len1\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp4gew28sf.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.lowercased()\n        ^~\n/tmp/tmp4gew28sf.swift:17:2:\
    \ error: cannot assign to value: 's1' is a 'let' constant\n        s1 = s1.lowercased()\n\
    \        ^~\n/tmp/tmp4gew28sf.swift:21:6: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n         \
    \       if s0[i] != s1[i] {\n                   ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmp4gew28sf.swift:21:15: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n                if s0[i] != s1[i] {\n                            ^~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\t\n\
    \tlet len0 = s0.Length\n\tlet len1 = s1.Length\n\t\n\tif len0 == 0 || len1 ==\
    \ 0 {\n\t\treturn len0 == len1\n\t}\n\t\n\tlet mut i = 0\n\tlet mut j = 0\n\t\n\
    \twhile i < len0 && j < len1 {\n\t\tif s0[i] != s1[j] {\n\t\t\treturn false\n\t\
    \t}\n\t\t\n\t\ti += 1\n\t\tj += 1\n\t}\n\t\n\treturn i == len0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp31smjr3q.swift:26:10: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n        let mut i =\
    \ 0\n                ^\n/tmp/tmp31smjr3q.swift:26:10: note: join the identifiers\
    \ together\n        let mut i = 0\n            ~~~~^\n            muti\n/tmp/tmp31smjr3q.swift:26:10:\
    \ note: join the identifiers together with camel-case\n        let mut i = 0\n\
    \            ~~~~^\n            mutI\n/tmp/tmp31smjr3q.swift:27:10: error: found\
    \ an unexpected second identifier in constant declaration; is there an accidental\
    \ break?\n        let mut j = 0\n                ^\n/tmp/tmp31smjr3q.swift:27:10:\
    \ note: join the identifiers together\n        let mut j = 0\n            ~~~~^\n\
    \            mutj\n/tmp/tmp31smjr3q.swift:27:10: note: join the identifiers together\
    \ with camel-case\n        let mut j = 0\n            ~~~~^\n            mutJ\n\
    /tmp/tmp31smjr3q.swift:16:2: error: cannot assign to value: 's0' is a 'let' constant\n\
    \        s0 = s0.ToLower()\n        ^~\n/tmp/tmp31smjr3q.swift:16:10: error: value\
    \ of type 'String' has no member 'ToLower'\n        s0 = s0.ToLower()\n      \
    \       ~~ ^~~~~~~\n/tmp/tmp31smjr3q.swift:17:2: error: cannot assign to value:\
    \ 's1' is a 'let' constant\n        s1 = s1.ToLower()\n        ^~\n/tmp/tmp31smjr3q.swift:17:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s1 = s1.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmp31smjr3q.swift:19:16: error: value of type 'String'\
    \ has no member 'Length'\n        let len0 = s0.Length\n                   ~~\
    \ ^~~~~~\n/tmp/tmp31smjr3q.swift:20:16: error: value of type 'String' has no member\
    \ 'Length'\n        let len1 = s1.Length\n                   ~~ ^~~~~~\n/tmp/tmp31smjr3q.swift:27:6:\
    \ error: invalid redeclaration of 'mut'\n        let mut j = 0\n            ^\n\
    /tmp/tmp31smjr3q.swift:26:6: note: 'mut' previously declared here\n        let\
    \ mut i = 0\n            ^\n/tmp/tmp31smjr3q.swift:29:8: error: cannot find 'i'\
    \ in scope\n        while i < len0 && j < len1 {\n              ^\n/tmp/tmp31smjr3q.swift:29:20:\
    \ error: cannot find 'j' in scope\n        w"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\tlet s0c = s0.characters\n\tlet s1c = s1.characters\n\
    \t\n\tfor i in 0..<min(s0c.count, s1c.count) {\n\t\tif s0c[i] != s1c[i] {\n\t\t\
    \treturn false\n\t\t}\n\t}\n\t\n\treturn true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\n\
    assert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpp0k84loz.swift:16:15: error: 'characters' is unavailable: Please\
    \ use String directly\n        let s0c = s0.characters\n                     ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpp0k84loz.swift:17:15:\
    \ error: 'characters' is unavailable: Please use String directly\n        let\
    \ s1c = s1.characters\n                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpp0k84loz.swift:20:6: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \                if s0c[i] != s1c[i] {\n                   ^~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpp0k84loz.swift:20:16:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n                if s0c[i] != s1c[i] {\n       \
    \                      ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.lowercased()\n\ts1 = s1.lowercased()\n\
    \t\n\tlet s0c = s0.characters\n\tlet s1c = s1.characters\n\t\n\tfor i in 0..<min(s0.count,\
    \ s1.count) {\n\t\tif s0c[i] != s1c[i] {\n\t\t\treturn false\n\t\t}\n\t}\n\t\n\
    \treturn true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"\
    eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\"\
    , s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\"\
    ) == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmplwoe3h77.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.lowercased()\n        ^~\n/tmp/tmplwoe3h77.swift:17:2:\
    \ error: cannot assign to value: 's1' is a 'let' constant\n        s1 = s1.lowercased()\n\
    \        ^~\n/tmp/tmplwoe3h77.swift:19:15: error: 'characters' is unavailable:\
    \ Please use String directly\n        let s0c = s0.characters\n              \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmplwoe3h77.swift:20:15:\
    \ error: 'characters' is unavailable: Please use String directly\n        let\
    \ s1c = s1.characters\n                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmplwoe3h77.swift:23:6: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \                if s0c[i] != s1c[i] {\n                   ^~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmplwoe3h77.swift:23:16:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n                if s0c[i] != s1c[i] {\n       \
    \                      ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\tlet s0c = s0.characters\n\tlet s1c = s1.characters\n\
    \t\n\tfor i in 0..<min(s0c.count, s1c.count) {\n\t\tif s0c[i] != s1c[i] {\n\t\t\
    \treturn false\n\t\t}\n\t}\n\t\n\treturn true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\n\
    assert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpp0k84loz.swift:16:15: error: 'characters' is unavailable: Please\
    \ use String directly\n        let s0c = s0.characters\n                     ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpp0k84loz.swift:17:15:\
    \ error: 'characters' is unavailable: Please use String directly\n        let\
    \ s1c = s1.characters\n                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpp0k84loz.swift:20:6: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \                if s0c[i] != s1c[i] {\n                   ^~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpp0k84loz.swift:20:16:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n                if s0c[i] != s1c[i] {\n       \
    \                      ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.lowercased()\n\ts1 = s1.lowercased()\n\
    \tlet n = s0.count\n\tlet m = s1.count\n\tfor i in 0..<n {\n\t\tif s0[i] != s1[i]\
    \ {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmps2svu_tl.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.lowercased()\n        ^~\n/tmp/tmps2svu_tl.swift:17:2:\
    \ error: cannot assign to value: 's1' is a 'let' constant\n        s1 = s1.lowercased()\n\
    \        ^~\n/tmp/tmps2svu_tl.swift:21:6: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n         \
    \       if s0[i] != s1[i] {\n                   ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmps2svu_tl.swift:21:15: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n                if s0[i] != s1[i] {\n                            ^~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    if s0.count != s1.count {\n        return\
    \ false\n    }\n    var i = 0\n    for c0, c1 in zipString(s0, s1) {\n       \
    \ if c0 != c1 {\n            return false\n        }\n        i += 1\n    }\n\
    \    return i == s0.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpvwrc8ubi.swift:20:11: error: expected 'in' after for-each pattern\n\
    \    for c0, c1 in zipString(s0, s1) {\n          ^\n/tmp/tmpvwrc8ubi.swift:20:11:\
    \ error: expected Sequence expression for for-each loop\n    for c0, c1 in zipString(s0,\
    \ s1) {\n          ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\t\n\
    \tlet n = s0.Length\n\tlet m = s1.Length\n\t\n\tif n == 0 || m == 0 {\n\t\treturn\
    \ n == m\n\t}\n\t\n\tlet mut i0 = 0\n\tlet mut i1 = 0\n\t\n\twhile i0 < n && i1\
    \ < m {\n\t\tlet c0 = s0[i0]\n\t\tlet c1 = s1[i1]\n\t\t\n\t\tif c0 != c1 {\n\t\
    \t\treturn false\n\t\t}\n\t\t\n\t\ti0 += 1\n\t\ti1 += 1\n\t}\n\t\n\treturn n ==\
    \ m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\", s1: \"\
    dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\") ==\
    \ true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpvpamtsec.swift:26:10: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n        let mut i0 =\
    \ 0\n                ^\n/tmp/tmpvpamtsec.swift:26:10: note: join the identifiers\
    \ together\n        let mut i0 = 0\n            ~~~~^~\n            muti0\n/tmp/tmpvpamtsec.swift:26:10:\
    \ note: join the identifiers together with camel-case\n        let mut i0 = 0\n\
    \            ~~~~^~\n            mutI0\n/tmp/tmpvpamtsec.swift:27:10: error: found\
    \ an unexpected second identifier in constant declaration; is there an accidental\
    \ break?\n        let mut i1 = 0\n                ^\n/tmp/tmpvpamtsec.swift:27:10:\
    \ note: join the identifiers together\n        let mut i1 = 0\n            ~~~~^~\n\
    \            muti1\n/tmp/tmpvpamtsec.swift:27:10: note: join the identifiers together\
    \ with camel-case\n        let mut i1 = 0\n            ~~~~^~\n            mutI1\n\
    /tmp/tmpvpamtsec.swift:16:2: error: cannot assign to value: 's0' is a 'let' constant\n\
    \        s0 = s0.ToLower()\n        ^~\n/tmp/tmpvpamtsec.swift:16:10: error: value\
    \ of type 'String' has no member 'ToLower'\n        s0 = s0.ToLower()\n      \
    \       ~~ ^~~~~~~\n/tmp/tmpvpamtsec.swift:17:2: error: cannot assign to value:\
    \ 's1' is a 'let' constant\n        s1 = s1.ToLower()\n        ^~\n/tmp/tmpvpamtsec.swift:17:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s1 = s1.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmpvpamtsec.swift:19:13: error: value of type 'String'\
    \ has no member 'Length'\n        let n = s0.Length\n                ~~ ^~~~~~\n\
    /tmp/tmpvpamtsec.swift:20:13: error: value of type 'String' has no member 'Length'\n\
    \        let m = s1.Length\n                ~~ ^~~~~~\n/tmp/tmpvpamtsec.swift:27:6:\
    \ error: invalid redeclaration of 'mut'\n        let mut i1 = 0\n            ^\n\
    /tmp/tmpvpamtsec.swift:26:6: note: 'mut' previously declared here\n        let\
    \ mut i0 = 0\n            ^\n/tmp/tmpvpamtsec.swift:29:8: error: cannot find 'i0'\
    \ in scope\n        while i0 < n && i1 < m {\n              ^~\n/tmp/tmpvpamtsec.swift:29:18:\
    \ error: cannot find 'i1' in scope\n      "
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\tlet s0_len = s0.count\n\tlet s1_len = s1.count\n\
    \tif s0_len != s1_len {\n\t\treturn false\n\t}\n\tlet s0_char = s0.characters\n\
    \tlet s1_char = s1.characters\n\tfor i in 0..<s0_len {\n\t\tif s0_char[i] != s1_char[i]\
    \ {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpludkq4s9.swift:21:19: error: 'characters' is unavailable: Please\
    \ use String directly\n        let s0_char = s0.characters\n                 \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpludkq4s9.swift:22:19:\
    \ error: 'characters' is unavailable: Please use String directly\n        let\
    \ s1_char = s1.characters\n                         ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpludkq4s9.swift:24:6: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \                if s0_char[i] != s1_char[i] {\n                   ^~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpludkq4s9.swift:24:20:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n                if s0_char[i] != s1_char[i] {\n\
    \                                 ^~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    if s0.length != s1.length {\n        return\
    \ false\n    }\n    var i = 0\n    for c0, c1 in zipString(s0, s1) {\n       \
    \ if c0 != c1 {\n            return false\n        }\n        i += 1\n    }\n\
    \    return i == s0.length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp38mzbj66.swift:20:11: error: expected 'in' after for-each pattern\n\
    \    for c0, c1 in zipString(s0, s1) {\n          ^\n/tmp/tmp38mzbj66.swift:20:11:\
    \ error: expected Sequence expression for for-each loop\n    for c0, c1 in zipString(s0,\
    \ s1) {\n          ^\n/tmp/tmp38mzbj66.swift:16:11: error: value of type 'String'\
    \ has no member 'length'\n    if s0.length != s1.length {\n       ~~ ^~~~~~\n\
    /tmp/tmp38mzbj66.swift:16:24: error: value of type 'String' has no member 'length'\n\
    \    if s0.length != s1.length {\n                    ~~ ^~~~~~\n/tmp/tmp38mzbj66.swift:26:20:\
    \ error: value of type 'String' has no member 'length'\n    return i == s0.length\n\
    \                ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.lowercased()\n\ts1 = s1.lowercased()\n\
    \t\n\tlet n = s0.count\n\tlet m = s1.count\n\t\n\tif n == m {\n\t\tfor _ in 0..<n\
    \ {\n\t\t\tif s0[Int(arc4random_uniform(UInt32(n)))] != s1[Int(arc4random_uniform(UInt32(m)))]\
    \ {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t\treturn true\n\t}\n\t\n\treturn\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\", s1: \"\
    dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\") ==\
    \ true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpa90jjigi.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.lowercased()\n        ^~\n/tmp/tmpa90jjigi.swift:17:2:\
    \ error: cannot assign to value: 's1' is a 'let' constant\n        s1 = s1.lowercased()\n\
    \        ^~\n/tmp/tmpa90jjigi.swift:24:14: error: cannot find 'arc4random_uniform'\
    \ in scope\n                        if s0[Int(arc4random_uniform(UInt32(n)))]\
    \ != s1[Int(arc4random_uniform(UInt32(m)))] {\n                              \
    \    ^~~~~~~~~~~~~~~~~~\n/tmp/tmpa90jjigi.swift:24:56: error: cannot find 'arc4random_uniform'\
    \ in scope\n                        if s0[Int(arc4random_uniform(UInt32(n)))]\
    \ != s1[Int(arc4random_uniform(UInt32(m)))] {\n                              \
    \                                              ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\tlet s0_len = s0.count\n\tlet s1_len = s1.count\n\
    \tif s0_len != s1_len {\n\t\treturn false\n\t}\n\tlet s0_char = s0.characters\n\
    \tlet s1_char = s1.characters\n\tfor idx in 0..<s0_len {\n\t\tif s0_char[idx]\
    \ != s1_char[idx] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxugj9tq1.swift:21:19: error: 'characters' is unavailable: Please\
    \ use String directly\n        let s0_char = s0.characters\n                 \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpxugj9tq1.swift:22:19:\
    \ error: 'characters' is unavailable: Please use String directly\n        let\
    \ s1_char = s1.characters\n                         ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpxugj9tq1.swift:24:6: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \                if s0_char[idx] != s1_char[idx] {\n                   ^~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpxugj9tq1.swift:24:22:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n                if s0_char[idx] != s1_char[idx]\
    \ {\n                                   ^~~~~~~~~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.lowercased()\n\ts1 = s1.lowercased()\n\
    \t\n\tlet s0c = s0.characters\n\tlet s1c = s1.characters\n\t\n\tfor i in 0..<min(s0.count,\
    \ s1.count) {\n\t\tif s0c[i] != s1c[i] {\n\t\t\treturn false\n\t\t}\n\t}\n\t\n\
    \treturn true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"\
    eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\"\
    , s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\"\
    ) == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmplwoe3h77.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.lowercased()\n        ^~\n/tmp/tmplwoe3h77.swift:17:2:\
    \ error: cannot assign to value: 's1' is a 'let' constant\n        s1 = s1.lowercased()\n\
    \        ^~\n/tmp/tmplwoe3h77.swift:19:15: error: 'characters' is unavailable:\
    \ Please use String directly\n        let s0c = s0.characters\n              \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmplwoe3h77.swift:20:15:\
    \ error: 'characters' is unavailable: Please use String directly\n        let\
    \ s1c = s1.characters\n                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmplwoe3h77.swift:23:6: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \                if s0c[i] != s1c[i] {\n                   ^~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmplwoe3h77.swift:23:16:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n                if s0c[i] != s1c[i] {\n       \
    \                      ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\tlet s0_len = s0.utf8.count\n\tlet s1_len =\
    \ s1.utf8.count\n\tif s0_len != s1_len {\n\t\treturn false\n\t}\n\tfor i in 0..<s0_len\
    \ {\n\t\tif s0[i] != s1[i] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxf9l_1k8.swift:22:6: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n                if\
    \ s0[i] != s1[i] {\n                   ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpxf9l_1k8.swift:22:15: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \                if s0[i] != s1[i] {\n                            ^~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\tlet s0_len = s0.count\n\tlet s1_len = s1.count\n\
    \tif s0_len != s1_len {\n\t\treturn false\n\t}\n\tlet s0_char = s0.characters\n\
    \tlet s1_char = s1.characters\n\tfor i in 0..<s0_len {\n\t\tif s0_char[i] != s1_char[i]\
    \ {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpludkq4s9.swift:21:19: error: 'characters' is unavailable: Please\
    \ use String directly\n        let s0_char = s0.characters\n                 \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpludkq4s9.swift:22:19:\
    \ error: 'characters' is unavailable: Please use String directly\n        let\
    \ s1_char = s1.characters\n                         ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpludkq4s9.swift:24:6: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \                if s0_char[i] != s1_char[i] {\n                   ^~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpludkq4s9.swift:24:20:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n                if s0_char[i] != s1_char[i] {\n\
    \                                 ^~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\t\
    let len0 = s0.Length\n\tlet len1 = s1.Length\n\tif len0 != len1 {\n\t\treturn\
    \ false\n\t}\n\tlet mut i0 = 0\n\tlet mut i1 = 0\n\twhile i0 < len0 && i1 < len1\
    \ {\n\t\tif s0[i0] != s1[i1] {\n\t\t\treturn false\n\t\t}\n\t\ti0 += 1\n\t\ti1\
    \ += 1\n\t}\n\treturn i0 == len0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp3_rzlsbh.swift:23:10: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n        let mut i0 =\
    \ 0\n                ^\n/tmp/tmp3_rzlsbh.swift:23:10: note: join the identifiers\
    \ together\n        let mut i0 = 0\n            ~~~~^~\n            muti0\n/tmp/tmp3_rzlsbh.swift:23:10:\
    \ note: join the identifiers together with camel-case\n        let mut i0 = 0\n\
    \            ~~~~^~\n            mutI0\n/tmp/tmp3_rzlsbh.swift:24:10: error: found\
    \ an unexpected second identifier in constant declaration; is there an accidental\
    \ break?\n        let mut i1 = 0\n                ^\n/tmp/tmp3_rzlsbh.swift:24:10:\
    \ note: join the identifiers together\n        let mut i1 = 0\n            ~~~~^~\n\
    \            muti1\n/tmp/tmp3_rzlsbh.swift:24:10: note: join the identifiers together\
    \ with camel-case\n        let mut i1 = 0\n            ~~~~^~\n            mutI1\n\
    /tmp/tmp3_rzlsbh.swift:16:2: error: cannot assign to value: 's0' is a 'let' constant\n\
    \        s0 = s0.ToLower()\n        ^~\n/tmp/tmp3_rzlsbh.swift:16:10: error: value\
    \ of type 'String' has no member 'ToLower'\n        s0 = s0.ToLower()\n      \
    \       ~~ ^~~~~~~\n/tmp/tmp3_rzlsbh.swift:17:2: error: cannot assign to value:\
    \ 's1' is a 'let' constant\n        s1 = s1.ToLower()\n        ^~\n/tmp/tmp3_rzlsbh.swift:17:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s1 = s1.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmp3_rzlsbh.swift:18:16: error: value of type 'String'\
    \ has no member 'Length'\n        let len0 = s0.Length\n                   ~~\
    \ ^~~~~~\n/tmp/tmp3_rzlsbh.swift:19:16: error: value of type 'String' has no member\
    \ 'Length'\n        let len1 = s1.Length\n                   ~~ ^~~~~~\n/tmp/tmp3_rzlsbh.swift:24:6:\
    \ error: invalid redeclaration of 'mut'\n        let mut i1 = 0\n            ^\n\
    /tmp/tmp3_rzlsbh.swift:23:6: note: 'mut' previously declared here\n        let\
    \ mut i0 = 0\n            ^\n/tmp/tmp3_rzlsbh.swift:25:8: error: cannot find 'i0'\
    \ in scope\n        while i0 < len0 && i1 < len1 {\n              ^~\n/tmp/tmp3_rzlsbh.swift:25:21:\
    \ error: cannot find 'i"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    if s0.count != s1.count {\n        return\
    \ false\n    }\n    var i = 0\n    for c0, c1 in zipString(s0, s1) {\n       \
    \ if c0 != c1 {\n            return false\n        }\n        i += 1\n    }\n\
    \    return i == s0.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpvwrc8ubi.swift:20:11: error: expected 'in' after for-each pattern\n\
    \    for c0, c1 in zipString(s0, s1) {\n          ^\n/tmp/tmpvwrc8ubi.swift:20:11:\
    \ error: expected Sequence expression for for-each loop\n    for c0, c1 in zipString(s0,\
    \ s1) {\n          ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\tlet s0_len = s0.count\n\tlet s1_len = s1.count\n\
    \tif s0_len == 0 || s1_len == 0 {\n\t\treturn false\n\t}\n\t\n\tlet s0_iter =\
    \ s0.characters\n\tlet s1_iter = s1.characters\n\t\n\tlet s0_first = s0_iter.next()\n\
    \tlet s1_first = s1_iter.next()\n\t\n\twhile s0_first != nil && s1_first != nil\
    \ {\n\t\tif s0_first.unicode == s1_first.unicode {\n\t\t\ts0_first = s0_iter.next()\n\
    \t\t\ts1_first = s1_iter.next()\n\t\t} else {\n\t\t\treturn false\n\t\t}\n\t}\n\
    \t\n\treturn s0_first == nil && s1_first == nil\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\n\
    assert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp8vl4dru8.swift:22:19: error: 'characters' is unavailable: Please\
    \ use String directly\n        let s0_iter = s0.characters\n                 \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp8vl4dru8.swift:23:19:\
    \ error: 'characters' is unavailable: Please use String directly\n        let\
    \ s1_iter = s1.characters\n                         ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp8vl4dru8.swift:25:25: error: value of\
    \ type 'String' has no member 'next'\n        let s0_first = s0_iter.next()\n\
    \                       ~~~~~~~ ^~~~\n/tmp/tmp8vl4dru8.swift:26:25: error: value\
    \ of type 'String' has no member 'next'\n        let s1_first = s1_iter.next()\n\
    \                       ~~~~~~~ ^~~~\n/tmp/tmp8vl4dru8.swift:30:23: error: value\
    \ of type 'String' has no member 'next'\n                        s0_first = s0_iter.next()\n\
    \                                   ~~~~~~~ ^~~~\n/tmp/tmp8vl4dru8.swift:31:23:\
    \ error: value of type 'String' has no member 'next'\n                       \
    \ s1_first = s1_iter.next()\n                                   ~~~~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.lowercased()\n\ts1 = s1.lowercased()\n\
    \tlet n = s0.count\n\tlet m = s1.count\n\tfor i in 0..<n {\n\t\tif s0[i] != s1[i]\
    \ {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn n == m\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpc47mp0ao.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.lowercased()\n        ^~\n/tmp/tmpc47mp0ao.swift:17:2:\
    \ error: cannot assign to value: 's1' is a 'let' constant\n        s1 = s1.lowercased()\n\
    \        ^~\n/tmp/tmpc47mp0ao.swift:21:6: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n         \
    \       if s0[i] != s1[i] {\n                   ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpc47mp0ao.swift:21:15: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n                if s0[i] != s1[i] {\n                            ^~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.lowercased()\n\ts1 = s1.lowercased()\n\
    \tlet len0 = s0.count\n\tlet len1 = s1.count\n\tfor i in 0..<min(len0, len1) {\n\
    \t\tif s0[i] != s1[i] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmplwaj0vc8.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.lowercased()\n        ^~\n/tmp/tmplwaj0vc8.swift:17:2:\
    \ error: cannot assign to value: 's1' is a 'let' constant\n        s1 = s1.lowercased()\n\
    \        ^~\n/tmp/tmplwaj0vc8.swift:21:6: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n         \
    \       if s0[i] != s1[i] {\n                   ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmplwaj0vc8.swift:21:15: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n                if s0[i] != s1[i] {\n                            ^~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\t\n\
    \tif s0.Length != s1.Length {\n\t\treturn false\n\t}\n\t\n\tfor i in 0..<s0.Length\
    \ {\n\t\tif s0[i] != s1[i] {\n\t\t\treturn false\n\t\t}\n\t}\n\t\n\treturn true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpavwcdlgb.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.ToLower()\n        ^~\n/tmp/tmpavwcdlgb.swift:16:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s0 = s0.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmpavwcdlgb.swift:17:2: error: cannot assign to\
    \ value: 's1' is a 'let' constant\n        s1 = s1.ToLower()\n        ^~\n/tmp/tmpavwcdlgb.swift:17:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s1 = s1.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmpavwcdlgb.swift:19:8: error: value of type 'String'\
    \ has no member 'Length'\n        if s0.Length != s1.Length {\n           ~~ ^~~~~~\n\
    /tmp/tmpavwcdlgb.swift:19:21: error: value of type 'String' has no member 'Length'\n\
    \        if s0.Length != s1.Length {\n                        ~~ ^~~~~~\n/tmp/tmpavwcdlgb.swift:23:18:\
    \ error: value of type 'String' has no member 'Length'\n        for i in 0..<s0.Length\
    \ {\n                     ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\tlet s0_len = s0.length\n\tlet s1_len = s1.length\n\
    \tif s0_len == 0 || s1_len == 0 {\n\t\treturn true\n\t}\n\tlet s0_char = s0.characters\n\
    \tlet s1_char = s1.characters\n\tfor i in 0..<s0_len {\n\t\tif s0_char[i] != s1_char[i]\
    \ {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpqtdqfsj7.swift:16:18: error: value of type 'String' has no member\
    \ 'length'\n        let s0_len = s0.length\n                     ~~ ^~~~~~\n/tmp/tmpqtdqfsj7.swift:17:18:\
    \ error: value of type 'String' has no member 'length'\n        let s1_len = s1.length\n\
    \                     ~~ ^~~~~~\n/tmp/tmpqtdqfsj7.swift:21:19: error: 'characters'\
    \ is unavailable: Please use String directly\n        let s0_char = s0.characters\n\
    \                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpqtdqfsj7.swift:22:19: error: 'characters' is unavailable:\
    \ Please use String directly\n        let s1_char = s1.characters\n          \
    \               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\t\n\
    \tlet n = s0.Length\n\tlet m = s1.Length\n\t\n\tif n == 0 || m == 0 {\n\t\treturn\
    \ true\n\t}\n\t\n\tfor i in 0..<n {\n\t\tif s0[i] != s1[i] {\n\t\t\treturn false\n\
    \t\t}\n\t}\n\t\n\treturn true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpo02jging.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.ToLower()\n        ^~\n/tmp/tmpo02jging.swift:16:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s0 = s0.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmpo02jging.swift:17:2: error: cannot assign to\
    \ value: 's1' is a 'let' constant\n        s1 = s1.ToLower()\n        ^~\n/tmp/tmpo02jging.swift:17:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s1 = s1.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmpo02jging.swift:19:13: error: value of type 'String'\
    \ has no member 'Length'\n        let n = s0.Length\n                ~~ ^~~~~~\n\
    /tmp/tmpo02jging.swift:20:13: error: value of type 'String' has no member 'Length'\n\
    \        let m = s1.Length\n                ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\t\n\
    \tlet len0 = s0.Length\n\tlet len1 = s1.Length\n\t\n\tif len0 != len1 {\n\t\t\
    return false\n\t}\n\t\n\tfor i in 0..<len0 {\n\t\tif s0[i] != s1[i] {\n\t\t\t\
    return false\n\t\t}\n\t}\n\t\n\treturn true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\n\
    assert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmprok1rtgz.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.ToLower()\n        ^~\n/tmp/tmprok1rtgz.swift:16:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s0 = s0.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmprok1rtgz.swift:17:2: error: cannot assign to\
    \ value: 's1' is a 'let' constant\n        s1 = s1.ToLower()\n        ^~\n/tmp/tmprok1rtgz.swift:17:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s1 = s1.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmprok1rtgz.swift:19:16: error: value of type 'String'\
    \ has no member 'Length'\n        let len0 = s0.Length\n                   ~~\
    \ ^~~~~~\n/tmp/tmprok1rtgz.swift:20:16: error: value of type 'String' has no member\
    \ 'Length'\n        let len1 = s1.Length\n                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.lowercased()\n\ts1 = s1.lowercased()\n\
    \tlet n = s0.count\n\tlet m = s1.count\n\tfor i in 0..<n {\n\t\tif s0[i] != s1[i]\
    \ {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn n == m\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpc47mp0ao.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.lowercased()\n        ^~\n/tmp/tmpc47mp0ao.swift:17:2:\
    \ error: cannot assign to value: 's1' is a 'let' constant\n        s1 = s1.lowercased()\n\
    \        ^~\n/tmp/tmpc47mp0ao.swift:21:6: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n         \
    \       if s0[i] != s1[i] {\n                   ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpc47mp0ao.swift:21:15: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n                if s0[i] != s1[i] {\n                            ^~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.lowercased()\n\ts1 = s1.lowercased()\n\
    \tlet n0 = s0.count\n\tlet n1 = s1.count\n\t\n\tfor i in 0..<n0 {\n\t\tif s0[i]\
    \ != s1[i] {\n\t\t\treturn false\n\t\t}\n\t}\n\t\n\treturn true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpa9bh5mnt.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.lowercased()\n        ^~\n/tmp/tmpa9bh5mnt.swift:17:2:\
    \ error: cannot assign to value: 's1' is a 'let' constant\n        s1 = s1.lowercased()\n\
    \        ^~\n/tmp/tmpa9bh5mnt.swift:22:6: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n         \
    \       if s0[i] != s1[i] {\n                   ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpa9bh5mnt.swift:22:15: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n                if s0[i] != s1[i] {\n                            ^~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    if s0.count != s1.count {\n        return\
    \ false\n    }\n    var i = 0\n    for c0, c1 in zipString(s0, s1) {\n       \
    \ if c0 != c1 {\n            return false\n        }\n        i += 1\n    }\n\
    \    return i == s0.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpvwrc8ubi.swift:20:11: error: expected 'in' after for-each pattern\n\
    \    for c0, c1 in zipString(s0, s1) {\n          ^\n/tmp/tmpvwrc8ubi.swift:20:11:\
    \ error: expected Sequence expression for for-each loop\n    for c0, c1 in zipString(s0,\
    \ s1) {\n          ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\t\n\
    \tlet s0_len = s0.Length\n\tlet s1_len = s1.Length\n\t\n\tif s0_len == 0 || s1_len\
    \ == 0 {\n\t\treturn s0_len == s1_len\n\t}\n\t\n\tlet mut i = s0_len\n\tlet mut\
    \ j = s1_len\n\t\n\twhile i > 0 && j > 0 {\n\t\tif s0[i] != s1[j] {\n\t\t\treturn\
    \ false\n\t\t}\n\t\t\n\t\ti -= 1\n\t\tj -= 1\n\t}\n\t\n\treturn i == 0 && j ==\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\", s1: \"\
    dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\") ==\
    \ true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpl10idzkj.swift:26:10: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n        let mut i =\
    \ s0_len\n                ^\n/tmp/tmpl10idzkj.swift:26:10: note: join the identifiers\
    \ together\n        let mut i = s0_len\n            ~~~~^\n            muti\n\
    /tmp/tmpl10idzkj.swift:26:10: note: join the identifiers together with camel-case\n\
    \        let mut i = s0_len\n            ~~~~^\n            mutI\n/tmp/tmpl10idzkj.swift:27:10:\
    \ error: found an unexpected second identifier in constant declaration; is there\
    \ an accidental break?\n        let mut j = s1_len\n                ^\n/tmp/tmpl10idzkj.swift:27:10:\
    \ note: join the identifiers together\n        let mut j = s1_len\n          \
    \  ~~~~^\n            mutj\n/tmp/tmpl10idzkj.swift:27:10: note: join the identifiers\
    \ together with camel-case\n        let mut j = s1_len\n            ~~~~^\n  \
    \          mutJ\n/tmp/tmpl10idzkj.swift:16:2: error: cannot assign to value: 's0'\
    \ is a 'let' constant\n        s0 = s0.ToLower()\n        ^~\n/tmp/tmpl10idzkj.swift:16:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s0 = s0.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmpl10idzkj.swift:17:2: error: cannot assign to\
    \ value: 's1' is a 'let' constant\n        s1 = s1.ToLower()\n        ^~\n/tmp/tmpl10idzkj.swift:17:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s1 = s1.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmpl10idzkj.swift:19:18: error: value of type 'String'\
    \ has no member 'Length'\n        let s0_len = s0.Length\n                   \
    \  ~~ ^~~~~~\n/tmp/tmpl10idzkj.swift:20:18: error: value of type 'String' has\
    \ no member 'Length'\n        let s1_len = s1.Length\n                     ~~\
    \ ^~~~~~\n/tmp/tmpl10idzkj.swift:29:8: error: cannot find 'i' in scope\n     \
    \   while i > 0 && j > 0 {\n              ^\n/tmp/tmpl10idzkj.swift:29:17: error:\
    \ cannot find 'j' in scope\n        while i > 0 && j > 0 {\n                 \
    \      ^\n/tmp/tmpl10idzkj.swift:30:9: error: cannot find 'i' in scope\n     \
    \           if s0[i] != s1[j] {\n                      ^\n/tmp/"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.lowercased()\n\ts1 = s1.lowercased()\n\
    \tlet n0 = s0.count\n\tlet n1 = s1.count\n\tif n0 == 0 || n1 == 0 {\n\t\treturn\
    \ n0 == n1\n\t}\n\tlet n2 = n0 * n1\n\tlet n3 = n0 * n1 + n1\n\tlet n4 = n0 *\
    \ n1 + n1 + n1\n\tlet n5 = n0 * n1 + n1 + n1 + n1\n\tlet n6 = n0 * n1 + n1 + n1\
    \ + n1 + n1\n\tlet n7 = n0 * n1 + n1 + n1 + n1 + n1 + n1\n\tlet n8 = n0 * n1 +\
    \ n1 + n1 + n1 + n1 + n1 + n1\n\tlet n9 = n0 * n1 + n1 + n1 + n1 + n1 + n1 + n1\
    \ + n1\n\tlet n10 = n0 * n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1\n\tlet n11\
    \ = n0 * n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1\n\tlet n12 = n0 * n1\
    \ + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1\n\tlet n13 = n0 * n1 + n1 + n1\
    \ + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1\n\tlet n14 = n0 * n1 + n1 + n1 + n1\
    \ + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1\n\tlet n15 = n0 * n1 + n1 + n1 + n1\
    \ + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1\n\tlet n16 = n0 * n1 + n1 + n1\
    \ + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1\n\tlet n17 = n0 * n1 + n1\
    \ + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1\n\tlet n18 = n0\
    \ * n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1\n\tlet\
    \ n19 = n0 * n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 +\
    \ n1 + n1\n\tlet n20 = n0 * n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 +\
    \ \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\", s1: \"\
    dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\") ==\
    \ true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp0lplh7nf.swift:42:1: error: expected expression after operator\n\
    }\n^\n/tmp/tmp0lplh7nf.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.lowercased()\n        ^~\n/tmp/tmp0lplh7nf.swift:17:2:\
    \ error: cannot assign to value: 's1' is a 'let' constant\n        s1 = s1.lowercased()\n\
    \        ^~\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\t\
    s0 = s0.ToUpper()\n\ts1 = s1.ToUpper()\n\ts0 = s0.Replace(\"\xDF\", \"SS\")\n\t\
    s1 = s1.Replace(\"\xDF\", \"SS\")\n\ts0 = s0.Replace(\"\xC4\", \"AE\")\n\ts1 =\
    \ s1.Replace(\"\xC4\", \"AE\")\n\ts0 = s0.Replace(\"\xD6\", \"OE\")\n\ts1 = s1.Replace(\"\
    \xD6\", \"OE\")\n\ts0 = s0.Replace(\"\xDC\", \"UE\")\n\ts1 = s1.Replace(\"\xDC\
    \", \"UE\")\n\ts0 = s0.Replace(\"\xDF\", \"SS\")\n\ts1 = s1.Replace(\"\xDF\",\
    \ \"SS\")\n\ts0 = s0.Replace(\"\xE4\", \"ae\")\n\ts1 = s1.Replace(\"\xE4\", \"\
    ae\")\n\ts0 = s0.Replace(\"\xF6\", \"oe\")\n\ts1 = s1.Replace(\"\xF6\", \"oe\"\
    )\n\ts0 = s0.Replace(\"\xFC\", \"ue\")\n\ts1 = s1.Replace(\"\xFC\", \"ue\")\n\t\
    s0 = s0.Replace(\"\xDF\", \"SS\")\n\ts1 = s1.Replace(\"\xDF\", \"SS\")\n\ts0 =\
    \ s0.Replace(\"\xC4\", \"AE\")\n\ts1 = s1.Replace(\"\xC4\", \"AE\")\n\ts0 = s0.Replace(\"\
    \xD6\", \"OE\")\n\ts1 = s1.Replace(\"\xD6\", \"OE\")\n\ts0 = s0.Replace(\"\xDC\
    \", \"UE\")\n\ts1 = s1.Replace(\"\xDC\", \"UE\")\n\ts0 = s0.Replace(\"\xDF\",\
    \ \"SS\")\n\ts1 = s1.Replace(\"\xDF\", \"SS\")\n\ts0 = s0.Replace(\"\xE4\", \"\
    ae\")\n\ts1 = s1.Replace(\"\xE4\", \"ae\")\n\ts0 = s0.Replace(\"\xF6\", \"oe\"\
    )\n\ts1 = s1.Replace(\"\xF6\", \"oe\")\n\ts0 = s0.Replace(\"\xFC\", \"ue\")\n\t\
    s1 = s1.Replace(\"\xFC\", \"ue\")\n\ts0 = s0.Replace(\"\xDF\", \"SS\")\n\ts1 =\
    \ s1.Replace(\"\xDF\", \"SS\")\n\ts0 = s0.Replace(\"\xC4\", \"AE\")\n\ts1 = s1.Replace(\"\
    \xC4\", \"AE\")\n\ts0 = s0.Replace(\"\xD6\", \"OE\")\n\ts1 = s1.Replace(\"\xD6\
    \", \"OE\")\n\ts0 = s0.Replace(\"\xDC\", \"UE\")\n\ts1 = s1.Replace(\"\xDC\",\
    \ \"UE\")\n\ts\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"\
    eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\"\
    , s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\"\
    ) == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp73aopf2h.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.ToLower()\n        ^~\n/tmp/tmp73aopf2h.swift:16:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s0 = s0.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmp73aopf2h.swift:17:2: error: cannot assign to\
    \ value: 's1' is a 'let' constant\n        s1 = s1.ToLower()\n        ^~\n/tmp/tmp73aopf2h.swift:17:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s1 = s1.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmp73aopf2h.swift:18:2: error: cannot assign to\
    \ value: 's0' is a 'let' constant\n        s0 = s0.ToUpper()\n        ^~\n/tmp/tmp73aopf2h.swift:18:10:\
    \ error: value of type 'String' has no member 'ToUpper'\n        s0 = s0.ToUpper()\n\
    \             ~~ ^~~~~~~\n/tmp/tmp73aopf2h.swift:19:2: error: cannot assign to\
    \ value: 's1' is a 'let' constant\n        s1 = s1.ToUpper()\n        ^~\n/tmp/tmp73aopf2h.swift:19:10:\
    \ error: value of type 'String' has no member 'ToUpper'\n        s1 = s1.ToUpper()\n\
    \             ~~ ^~~~~~~\n/tmp/tmp73aopf2h.swift:20:2: error: cannot assign to\
    \ value: 's0' is a 'let' constant\n        s0 = s0.Replace(\"\xDF\", \"SS\")\n\
    /tmp/tmp73aopf2h.swift:20:10: error: value of type 'String' has no member 'Replace'\n\
    \        s0 = s0.Replace(\"\xDF\", \"SS\")\n/tmp/tmp73aopf2h.swift:21:2: error:\
    \ cannot assign to value: 's1' is a 'let' constant\n        s1 = s1.Replace(\"\
    \xDF\", \"SS\")\n/tmp/tmp73aopf2h.swift:21:10: error: value of type 'String' has\
    \ no member 'Replace'\n        s1 = s1.Replace(\"\xDF\", \"SS\")\n/tmp/tmp73aopf2h.swift:22:2:\
    \ error: cannot assign to value: 's0' is a 'let' constant\n        s0 = s0.Replace(\"\
    \xC4\", \"AE\")\n/tmp/tmp73aopf2h.swift:22:10: error: value of type 'String' has\
    \ no member 'Replace'\n        s0 = s0.Replace(\"\xC4\", \"AE\")\n/tmp/tmp73aopf2h.swift:23:2:\
    \ error: cannot assign to value: 's1' is a 'let' constant\n        s1 = s1.Replace(\"\
    \xC4\", \"AE\")\n/tmp/tmp73aopf2h.swift:23:10: error: value of type 'String' has\
    \ no member 'Replace'\n        s1 = s1.Replace(\"\xC4\", \"AE\")\n/tmp/tmp73aopf2h.swift:24:2:\
    \ error: cannot assign to value: 's0' is "
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.lowercased()\n\ts1 = s1.lowercased()\n\
    \t\n\tvar i = 0\n\tvar j = 0\n\t\n\tfor i < s0.count && j < s1.count {\n\t\tif\
    \ s0[i] == s1[j] {\n\t\t\ti += 1\n\t\t\tj += 1\n\t\t} else if s0[i] < s1[j] {\n\
    \t\t\treturn false\n\t\t} else {\n\t\t\treturn true\n\t\t}\n\t}\n\t\n\treturn\
    \ i == s0.count && j == s1.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmps4uu8dg1.swift:22:8: error: expected 'in' after for-each pattern\n\
    \        for i < s0.count && j < s1.count {\n              ^\n/tmp/tmps4uu8dg1.swift:22:8:\
    \ error: unary operator cannot be separated from its operand\n        for i <\
    \ s0.count && j < s1.count {\n              ^~\n               \n/tmp/tmps4uu8dg1.swift:16:2:\
    \ error: cannot assign to value: 's0' is a 'let' constant\n        s0 = s0.lowercased()\n\
    \        ^~\n/tmp/tmps4uu8dg1.swift:17:2: error: cannot assign to value: 's1'\
    \ is a 'let' constant\n        s1 = s1.lowercased()\n        ^~\n/tmp/tmps4uu8dg1.swift:22:8:\
    \ error: '<' is not a prefix unary operator\n        for i < s0.count && j < s1.count\
    \ {\n              ^\n/tmp/tmps4uu8dg1.swift:22:19: error: for-in loop requires\
    \ 'Bool' to conform to 'Sequence'\n        for i < s0.count && j < s1.count {\n\
    \              ~~~~~~~~~~~^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\t\n\
    \tlet len0 = s0.Length\n\tlet len1 = s1.Length\n\t\n\tif len0 == 0 || len1 ==\
    \ 0 {\n\t\treturn true\n\t}\n\t\n\tlet mut i0 = 0\n\tlet mut i1 = 0\n\t\n\twhile\
    \ i0 < len0 && i1 < len1 {\n\t\tlet c0 = s0[i0]\n\t\tlet c1 = s1[i1]\n\t\t\n\t\
    \tif c0 == c1 {\n\t\t\ti0 += 1\n\t\t\ti1 += 1\n\t\t} else if c0 < c1 {\n\t\t\t\
    return false\n\t\t} else {\n\t\t\treturn true\n\t\t}\n\t}\n\t\n\treturn i0 ==\
    \ len0 && i1 == len1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp0xj5upva.swift:26:10: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n        let mut i0 =\
    \ 0\n                ^\n/tmp/tmp0xj5upva.swift:26:10: note: join the identifiers\
    \ together\n        let mut i0 = 0\n            ~~~~^~\n            muti0\n/tmp/tmp0xj5upva.swift:26:10:\
    \ note: join the identifiers together with camel-case\n        let mut i0 = 0\n\
    \            ~~~~^~\n            mutI0\n/tmp/tmp0xj5upva.swift:27:10: error: found\
    \ an unexpected second identifier in constant declaration; is there an accidental\
    \ break?\n        let mut i1 = 0\n                ^\n/tmp/tmp0xj5upva.swift:27:10:\
    \ note: join the identifiers together\n        let mut i1 = 0\n            ~~~~^~\n\
    \            muti1\n/tmp/tmp0xj5upva.swift:27:10: note: join the identifiers together\
    \ with camel-case\n        let mut i1 = 0\n            ~~~~^~\n            mutI1\n\
    /tmp/tmp0xj5upva.swift:16:2: error: cannot assign to value: 's0' is a 'let' constant\n\
    \        s0 = s0.ToLower()\n        ^~\n/tmp/tmp0xj5upva.swift:16:10: error: value\
    \ of type 'String' has no member 'ToLower'\n        s0 = s0.ToLower()\n      \
    \       ~~ ^~~~~~~\n/tmp/tmp0xj5upva.swift:17:2: error: cannot assign to value:\
    \ 's1' is a 'let' constant\n        s1 = s1.ToLower()\n        ^~\n/tmp/tmp0xj5upva.swift:17:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s1 = s1.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmp0xj5upva.swift:19:16: error: value of type 'String'\
    \ has no member 'Length'\n        let len0 = s0.Length\n                   ~~\
    \ ^~~~~~\n/tmp/tmp0xj5upva.swift:20:16: error: value of type 'String' has no member\
    \ 'Length'\n        let len1 = s1.Length\n                   ~~ ^~~~~~\n/tmp/tmp0xj5upva.swift:27:6:\
    \ error: invalid redeclaration of 'mut'\n        let mut i1 = 0\n            ^\n\
    /tmp/tmp0xj5upva.swift:26:6: note: 'mut' previously declared here\n        let\
    \ mut i0 = 0\n            ^\n/tmp/tmp0xj5upva.swift:29:8: error: cannot find 'i0'\
    \ in scope\n        while i0 < len0 && i1 < len1 {\n              ^~\n/tmp/tmp0xj5upva.swift:29:21:\
    \ error: cannot find 'i"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.lowercased()\n\ts1 = s1.lowercased()\n\
    \t\n\tlet len0 = s0.count\n\tlet len1 = s1.count\n\t\n\tfor i in 0..<min(len0,\
    \ len1) {\n\t\tif s0[i] != s1[i] {\n\t\t\treturn false\n\t\t}\n\t}\n\t\n\treturn\
    \ len0 == len1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"\
    eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\"\
    , s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\"\
    ) == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpqbmbpp74.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.lowercased()\n        ^~\n/tmp/tmpqbmbpp74.swift:17:2:\
    \ error: cannot assign to value: 's1' is a 'let' constant\n        s1 = s1.lowercased()\n\
    \        ^~\n/tmp/tmpqbmbpp74.swift:23:6: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n         \
    \       if s0[i] != s1[i] {\n                   ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpqbmbpp74.swift:23:15: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n                if s0[i] != s1[i] {\n                            ^~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.lowercased()\n\ts1 = s1.lowercased()\n\
    \t\n\tlet s0_len = s0.count\n\tlet s1_len = s1.count\n\t\n\tif s0_len == 0 ||\
    \ s1_len == 0 {\n\t\treturn false\n\t}\n\t\n\tfor i in 0..<s0_len {\n\t\tif s0[i]\
    \ != s1[i] {\n\t\t\treturn false\n\t\t}\n\t}\n\t\n\treturn true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmplh4rrenz.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.lowercased()\n        ^~\n/tmp/tmplh4rrenz.swift:17:2:\
    \ error: cannot assign to value: 's1' is a 'let' constant\n        s1 = s1.lowercased()\n\
    \        ^~\n/tmp/tmplh4rrenz.swift:27:6: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n         \
    \       if s0[i] != s1[i] {\n                   ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmplh4rrenz.swift:27:15: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n                if s0[i] != s1[i] {\n                            ^~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 += s0\n\ts1 += s1\n\treturn s0.prefix(s0.count)\
    \ == s1.prefix(s1.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpht3fg33g.swift:16:5: error: left side of mutating operator isn't\
    \ mutable: 's0' is a 'let' constant\n        s0 += s0\n        ~~ ^\n/tmp/tmpht3fg33g.swift:17:5:\
    \ error: left side of mutating operator isn't mutable: 's1' is a 'let' constant\n\
    \        s1 += s1\n        ~~ ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\tlet s0c = s0.characters\n\tlet s1c = s1.characters\n\
    \t\n\tfor i in 0..<min(s0c.count, s1c.count) {\n\t\tif s0c[i] != s1c[i] {\n\t\t\
    \treturn false\n\t\t}\n\t}\n\t\n\treturn true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\n\
    assert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpp0k84loz.swift:16:15: error: 'characters' is unavailable: Please\
    \ use String directly\n        let s0c = s0.characters\n                     ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpp0k84loz.swift:17:15:\
    \ error: 'characters' is unavailable: Please use String directly\n        let\
    \ s1c = s1.characters\n                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpp0k84loz.swift:20:6: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \                if s0c[i] != s1c[i] {\n                   ^~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpp0k84loz.swift:20:16:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n                if s0c[i] != s1c[i] {\n       \
    \                      ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\t\n\
    \tlet len0 = s0.Length\n\tlet len1 = s1.Length\n\t\n\tif len0 != len1 {\n\t\t\
    return false\n\t}\n\t\n\tfor i in 0..<len0 {\n\t\tif s0[i] != s1[i] {\n\t\t\t\
    return false\n\t\t}\n\t}\n\t\n\treturn true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\n\
    assert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmprok1rtgz.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.ToLower()\n        ^~\n/tmp/tmprok1rtgz.swift:16:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s0 = s0.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmprok1rtgz.swift:17:2: error: cannot assign to\
    \ value: 's1' is a 'let' constant\n        s1 = s1.ToLower()\n        ^~\n/tmp/tmprok1rtgz.swift:17:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s1 = s1.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmprok1rtgz.swift:19:16: error: value of type 'String'\
    \ has no member 'Length'\n        let len0 = s0.Length\n                   ~~\
    \ ^~~~~~\n/tmp/tmprok1rtgz.swift:20:16: error: value of type 'String' has no member\
    \ 'Length'\n        let len1 = s1.Length\n                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\tlet s0c = s0.characters\n\tlet s1c = s1.characters\n\
    \t\n\tfor i in 0..<min(s0.count, s1.count) {\n\t\tif s0c[i] != s1c[i] {\n\t\t\t\
    return false\n\t\t}\n\t}\n\t\n\treturn true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\n\
    assert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmib6ztnj.swift:16:15: error: 'characters' is unavailable: Please\
    \ use String directly\n        let s0c = s0.characters\n                     ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpmib6ztnj.swift:17:15:\
    \ error: 'characters' is unavailable: Please use String directly\n        let\
    \ s1c = s1.characters\n                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpmib6ztnj.swift:20:6: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \                if s0c[i] != s1c[i] {\n                   ^~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpmib6ztnj.swift:20:16:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n                if s0c[i] != s1c[i] {\n       \
    \                      ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    if s0.count != s1.count {\n        return\
    \ false\n    }\n    var i = 0\n    for c0, c1 in zipString(s0, s1) {\n       \
    \ if c0 != c1 {\n            return false\n        }\n        i += 1\n    }\n\
    \    return i == s0.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpvwrc8ubi.swift:20:11: error: expected 'in' after for-each pattern\n\
    \    for c0, c1 in zipString(s0, s1) {\n          ^\n/tmp/tmpvwrc8ubi.swift:20:11:\
    \ error: expected Sequence expression for for-each loop\n    for c0, c1 in zipString(s0,\
    \ s1) {\n          ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\t\
    for i := 0; i < len(s0); i++ {\n\t\tif s0[i] != s1[i] {\n\t\t\treturn false\n\t\
    \t}\n\t}\n\treturn true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp8xhd8kn2.swift:18:9: error: expected type\n        for i := 0;\
    \ i < len(s0); i++ {\n               ^\n                <#type#>\n/tmp/tmp8xhd8kn2.swift:18:9:\
    \ error: expected 'in' after for-each pattern\n        for i := 0; i < len(s0);\
    \ i++ {\n               ^\n/tmp/tmp8xhd8kn2.swift:18:9: error: expected Sequence\
    \ expression for for-each loop\n        for i := 0; i < len(s0); i++ {\n     \
    \          ^\n/tmp/tmp8xhd8kn2.swift:16:2: error: cannot assign to value: 's0'\
    \ is a 'let' constant\n        s0 = s0.ToLower()\n        ^~\n/tmp/tmp8xhd8kn2.swift:16:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s0 = s0.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmp8xhd8kn2.swift:17:2: error: cannot assign to\
    \ value: 's1' is a 'let' constant\n        s1 = s1.ToLower()\n        ^~\n/tmp/tmp8xhd8kn2.swift:17:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s1 = s1.ToLower()\n\
    \             ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    if s0.count != s1.count {\n        return\
    \ false\n    }\n    var i = 0\n    while i < s0.count {\n        if s0[i] != s1[i]\
    \ {\n            return false\n        }\n        i += 1\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdo4k99fa.swift:21:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if s0[i]\
    \ != s1[i] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpdo4k99fa.swift:21:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[i] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\t\
    let len0 = s0.Length\n\tlet len1 = s1.Length\n\tif len0 != len1 {\n\t\treturn\
    \ false\n\t}\n\tfor i in 0..<len0 {\n\t\tif s0[i] != s1[i] {\n\t\t\treturn false\n\
    \t\t}\n\t}\n\treturn true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpujau1o00.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.ToLower()\n        ^~\n/tmp/tmpujau1o00.swift:16:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s0 = s0.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmpujau1o00.swift:17:2: error: cannot assign to\
    \ value: 's1' is a 'let' constant\n        s1 = s1.ToLower()\n        ^~\n/tmp/tmpujau1o00.swift:17:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s1 = s1.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmpujau1o00.swift:18:16: error: value of type 'String'\
    \ has no member 'Length'\n        let len0 = s0.Length\n                   ~~\
    \ ^~~~~~\n/tmp/tmpujau1o00.swift:19:16: error: value of type 'String' has no member\
    \ 'Length'\n        let len1 = s1.Length\n                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\tlet s0c = s0.characters\n\tlet s1c = s1.characters\n\
    \t\n\tfor i in 0..<min(s0c.count, s1c.count) {\n\t\tif s0c[i] != s1c[i] {\n\t\t\
    \treturn false\n\t\t}\n\t}\n\t\n\treturn true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\n\
    assert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpp0k84loz.swift:16:15: error: 'characters' is unavailable: Please\
    \ use String directly\n        let s0c = s0.characters\n                     ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpp0k84loz.swift:17:15:\
    \ error: 'characters' is unavailable: Please use String directly\n        let\
    \ s1c = s1.characters\n                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpp0k84loz.swift:20:6: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \                if s0c[i] != s1c[i] {\n                   ^~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpp0k84loz.swift:20:16:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n                if s0c[i] != s1c[i] {\n       \
    \                      ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.lowercased()\n\ts1 = s1.lowercased()\n\
    \t\n\tlet n0 = s0.count\n\tlet n1 = s1.count\n\t\n\tfor i in 0..<n0 {\n\t\tif\
    \ s0[i] != s1[i] {\n\t\t\treturn false\n\t\t}\n\t}\n\t\n\treturn true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpn3i1nnig.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.lowercased()\n        ^~\n/tmp/tmpn3i1nnig.swift:17:2:\
    \ error: cannot assign to value: 's1' is a 'let' constant\n        s1 = s1.lowercased()\n\
    \        ^~\n/tmp/tmpn3i1nnig.swift:23:6: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n         \
    \       if s0[i] != s1[i] {\n                   ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpn3i1nnig.swift:23:15: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n                if s0[i] != s1[i] {\n                            ^~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    if s0.count != s1.count {\n        return\
    \ false\n    }\n    for i := 0; i < s0.count; i++ {\n        if s0[i] != s1[i]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7kt42hne.swift:19:12: error: expected type\n    for i := 0; i <\
    \ s0.count; i++ {\n           ^\n            <#type#>\n/tmp/tmp7kt42hne.swift:19:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < s0.count; i++\
    \ {\n           ^\n/tmp/tmp7kt42hne.swift:19:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < s0.count; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\t\n\
    \tlet s0Chars = s0.ToCharArray()\n\tlet s1Chars = s1.ToCharArray()\n\t\n\tfor\
    \ i in 0..<s0Chars.count {\n\t\tif s0Chars[i] != s1Chars[i] {\n\t\t\treturn false\n\
    \t\t}\n\t}\n\t\n\treturn true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmphzukiwk0.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.ToLower()\n        ^~\n/tmp/tmphzukiwk0.swift:16:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s0 = s0.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmphzukiwk0.swift:17:2: error: cannot assign to\
    \ value: 's1' is a 'let' constant\n        s1 = s1.ToLower()\n        ^~\n/tmp/tmphzukiwk0.swift:17:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s1 = s1.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmphzukiwk0.swift:19:19: error: value of type 'String'\
    \ has no member 'ToCharArray'\n        let s0Chars = s0.ToCharArray()\n      \
    \                ~~ ^~~~~~~~~~~\n/tmp/tmphzukiwk0.swift:20:19: error: value of\
    \ type 'String' has no member 'ToCharArray'\n        let s1Chars = s1.ToCharArray()\n\
    \                      ~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\t\
    if s0.Length != s1.Length {\n\t\treturn false\n\t}\n\tfor i := 0; i < s0.Length;\
    \ i++ {\n\t\tif s0[i] != s1[i] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpkvca__2x.swift:21:9: error: expected type\n        for i := 0;\
    \ i < s0.Length; i++ {\n               ^\n                <#type#>\n/tmp/tmpkvca__2x.swift:21:9:\
    \ error: expected 'in' after for-each pattern\n        for i := 0; i < s0.Length;\
    \ i++ {\n               ^\n/tmp/tmpkvca__2x.swift:21:9: error: expected Sequence\
    \ expression for for-each loop\n        for i := 0; i < s0.Length; i++ {\n   \
    \            ^\n/tmp/tmpkvca__2x.swift:16:2: error: cannot assign to value: 's0'\
    \ is a 'let' constant\n        s0 = s0.ToLower()\n        ^~\n/tmp/tmpkvca__2x.swift:16:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s0 = s0.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmpkvca__2x.swift:17:2: error: cannot assign to\
    \ value: 's1' is a 'let' constant\n        s1 = s1.ToLower()\n        ^~\n/tmp/tmpkvca__2x.swift:17:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s1 = s1.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmpkvca__2x.swift:18:8: error: value of type 'String'\
    \ has no member 'Length'\n        if s0.Length != s1.Length {\n           ~~ ^~~~~~\n\
    /tmp/tmpkvca__2x.swift:18:21: error: value of type 'String' has no member 'Length'\n\
    \        if s0.Length != s1.Length {\n                        ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.lowercased()\n\ts1 = s1.lowercased()\n\
    \t\n\tlet len0 = s0.count\n\tlet len1 = s1.count\n\t\n\tif len0 == 0 || len1 ==\
    \ 0 {\n\t\treturn len0 == len1\n\t}\n\t\n\tlet mut i0 = 0\n\tlet mut i1 = 0\n\t\
    \n\twhile i0 < len0 && i1 < len1 {\n\t\tif s0[i0] != s1[i1] {\n\t\t\treturn false\n\
    \t\t}\n\t\ti0 += 1\n\t\ti1 += 1\n\t}\n\t\n\treturn i0 == len0 || i1 == len1\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpabnlbjmi.swift:26:10: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n        let mut i0 =\
    \ 0\n                ^\n/tmp/tmpabnlbjmi.swift:26:10: note: join the identifiers\
    \ together\n        let mut i0 = 0\n            ~~~~^~\n            muti0\n/tmp/tmpabnlbjmi.swift:26:10:\
    \ note: join the identifiers together with camel-case\n        let mut i0 = 0\n\
    \            ~~~~^~\n            mutI0\n/tmp/tmpabnlbjmi.swift:27:10: error: found\
    \ an unexpected second identifier in constant declaration; is there an accidental\
    \ break?\n        let mut i1 = 0\n                ^\n/tmp/tmpabnlbjmi.swift:27:10:\
    \ note: join the identifiers together\n        let mut i1 = 0\n            ~~~~^~\n\
    \            muti1\n/tmp/tmpabnlbjmi.swift:27:10: note: join the identifiers together\
    \ with camel-case\n        let mut i1 = 0\n            ~~~~^~\n            mutI1\n\
    /tmp/tmpabnlbjmi.swift:16:2: error: cannot assign to value: 's0' is a 'let' constant\n\
    \        s0 = s0.lowercased()\n        ^~\n/tmp/tmpabnlbjmi.swift:17:2: error:\
    \ cannot assign to value: 's1' is a 'let' constant\n        s1 = s1.lowercased()\n\
    \        ^~\n/tmp/tmpabnlbjmi.swift:27:6: error: invalid redeclaration of 'mut'\n\
    \        let mut i1 = 0\n            ^\n/tmp/tmpabnlbjmi.swift:26:6: note: 'mut'\
    \ previously declared here\n        let mut i0 = 0\n            ^\n/tmp/tmpabnlbjmi.swift:29:8:\
    \ error: cannot find 'i0' in scope\n        while i0 < len0 && i1 < len1 {\n \
    \             ^~\n/tmp/tmpabnlbjmi.swift:29:21: error: cannot find 'i1' in scope\n\
    \        while i0 < len0 && i1 < len1 {\n                           ^~\n/tmp/tmpabnlbjmi.swift:30:9:\
    \ error: cannot find 'i0' in scope\n                if s0[i0] != s1[i1] {\n  \
    \                    ^~\n/tmp/tmpabnlbjmi.swift:30:19: error: cannot find 'i1'\
    \ in scope\n                if s0[i0] != s1[i1] {\n                          \
    \      ^~\n/tmp/tmpabnlbjmi.swift:33:3: error: cannot find 'i0' in scope\n   \
    \             i0 += 1\n                ^~\n/tmp/tmpabnlbjmi.swift:34:3: error:\
    \ cannot find 'i1' in scope\n                i1 += 1\n           "
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.lowercased()\n\ts1 = s1.lowercased()\n\
    \t\n\tlet n0 = s0.count\n\tlet n1 = s1.count\n\t\n\tif n0 == 0 || n1 == 0 {\n\t\
    \treturn false\n\t}\n\t\n\tlet n2 = n0 * n1\n\t\n\tlet n3 = n0 + n1\n\t\n\tlet\
    \ n4 = n0 + n1 + n1\n\t\n\tlet n5 = n0 + n1 + n1 + n1\n\t\n\tlet n6 = n0 + n1\
    \ + n1 + n1 + n1 + n1\n\t\n\tlet n7 = n0 + n1 + n1 + n1 + n1 + n1 + n1 + n1\n\t\
    \n\tlet n8 = n0 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1\n\t\n\tlet n9 = n0\
    \ + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 +\
    \ n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1\
    \ + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 +\
    \ n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1\
    \ + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 +\
    \ n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1\
    \ + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 +\
    \ n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1\
    \ + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 +\
    \ n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1\
    \ + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 +\
    \ n1 + n1 + n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"\
    eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\"\
    , s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\"\
    ) == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_ey9qzyz.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.lowercased()\n        ^~\n/tmp/tmp_ey9qzyz.swift:17:2:\
    \ error: cannot assign to value: 's1' is a 'let' constant\n        s1 = s1.lowercased()\n\
    \        ^~\n/tmp/tmp_ey9qzyz.swift:40:876: error: cannot find 'n' in scope\n\
    \        let n9 = n0 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 +\
    \ n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1\
    \ + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 +\
    \ n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1\
    \ + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 +\
    \ n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1\
    \ + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 +\
    \ n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1\
    \ + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 +\
    \ n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1\
    \ + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 + n1 +\
    \ n1 + n1 + n1 + n1 + n1 + n1 + n\n                                          \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                 "
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\tlet s0c = s0.characters\n\tlet s1c = s1.characters\n\
    \t\n\tfor i in 0..<min(s0c.count, s1c.count) {\n\t\tif s0c[i] != s1c[i] {\n\t\t\
    \treturn false\n\t\t}\n\t}\n\t\n\treturn true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\n\
    assert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpp0k84loz.swift:16:15: error: 'characters' is unavailable: Please\
    \ use String directly\n        let s0c = s0.characters\n                     ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpp0k84loz.swift:17:15:\
    \ error: 'characters' is unavailable: Please use String directly\n        let\
    \ s1c = s1.characters\n                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpp0k84loz.swift:20:6: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \                if s0c[i] != s1c[i] {\n                   ^~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpp0k84loz.swift:20:16:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n                if s0c[i] != s1c[i] {\n       \
    \                      ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\t\
    s0 = s0.ToUpper()\n\ts1 = s1.ToUpper()\n\ts0 = s0.Replace(\"\xDF\", \"SS\")\n\t\
    s1 = s1.Replace(\"\xDF\", \"SS\")\n\ts0 = s0.Replace(\"\xC4\", \"AE\")\n\ts1 =\
    \ s1.Replace(\"\xC4\", \"AE\")\n\ts0 = s0.Replace(\"\xD6\", \"OE\")\n\ts1 = s1.Replace(\"\
    \xD6\", \"OE\")\n\ts0 = s0.Replace(\"\xDC\", \"UE\")\n\ts1 = s1.Replace(\"\xDC\
    \", \"UE\")\n\ts0 = s0.Replace(\"\xDF\", \"SS\")\n\ts1 = s1.Replace(\"\xDF\",\
    \ \"SS\")\n\ts0 = s0.Replace(\"\xC4\", \"AE\")\n\ts1 = s1.Replace(\"\xC4\", \"\
    AE\")\n\ts0 = s0.Replace(\"\xD6\", \"OE\")\n\ts1 = s1.Replace(\"\xD6\", \"OE\"\
    )\n\ts0 = s0.Replace(\"\xDC\", \"UE\")\n\ts1 = s1.Replace(\"\xDC\", \"UE\")\n\t\
    s0 = s0.Replace(\"\xDF\", \"SS\")\n\ts1 = s1.Replace(\"\xDF\", \"SS\")\n\ts0 =\
    \ s0.Replace(\"\xC4\", \"AE\")\n\ts1 = s1.Replace(\"\xC4\", \"AE\")\n\ts0 = s0.Replace(\"\
    \xD6\", \"OE\")\n\ts1 = s1.Replace(\"\xD6\", \"OE\")\n\ts0 = s0.Replace(\"\xDC\
    \", \"UE\")\n\ts1 = s1.Replace(\"\xDC\", \"UE\")\n\ts0 = s0.Replace(\"\xDF\",\
    \ \"SS\")\n\ts1 = s1.Replace(\"\xDF\", \"SS\")\n\ts0 = s0.Replace(\"\xC4\", \"\
    AE\")\n\ts1 = s1.Replace(\"\xC4\", \"AE\")\n\ts0 = s0.Replace(\"\xD6\", \"OE\"\
    )\n\ts1 = s1.Replace(\"\xD6\", \"OE\")\n\ts0 = s0.Replace(\"\xDC\", \"UE\")\n\t\
    s1 = s1.Replace(\"\xDC\", \"UE\")\n\ts0 = s0.Replace(\"\xDF\", \"SS\")\n\ts1 =\
    \ s1.Replace(\"\xDF\", \"SS\")\n\ts0 = s0.Replace(\"\xC4\", \"AE\")\n\ts1 = s1.Replace(\"\
    \xC4\", \"AE\")\n\ts0 = s0.Replace(\"\xD6\", \"OE\")\n\ts1 = s1.Replace(\"\xD6\
    \", \"OE\")\n\ts0 = s0.Replace(\"\xDC\", \"UE\")\n\t\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmphjm4v2k2.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.ToLower()\n        ^~\n/tmp/tmphjm4v2k2.swift:16:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s0 = s0.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmphjm4v2k2.swift:17:2: error: cannot assign to\
    \ value: 's1' is a 'let' constant\n        s1 = s1.ToLower()\n        ^~\n/tmp/tmphjm4v2k2.swift:17:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s1 = s1.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmphjm4v2k2.swift:18:2: error: cannot assign to\
    \ value: 's0' is a 'let' constant\n        s0 = s0.ToUpper()\n        ^~\n/tmp/tmphjm4v2k2.swift:18:10:\
    \ error: value of type 'String' has no member 'ToUpper'\n        s0 = s0.ToUpper()\n\
    \             ~~ ^~~~~~~\n/tmp/tmphjm4v2k2.swift:19:2: error: cannot assign to\
    \ value: 's1' is a 'let' constant\n        s1 = s1.ToUpper()\n        ^~\n/tmp/tmphjm4v2k2.swift:19:10:\
    \ error: value of type 'String' has no member 'ToUpper'\n        s1 = s1.ToUpper()\n\
    \             ~~ ^~~~~~~\n/tmp/tmphjm4v2k2.swift:20:2: error: cannot assign to\
    \ value: 's0' is a 'let' constant\n        s0 = s0.Replace(\"\xDF\", \"SS\")\n\
    /tmp/tmphjm4v2k2.swift:20:10: error: value of type 'String' has no member 'Replace'\n\
    \        s0 = s0.Replace(\"\xDF\", \"SS\")\n/tmp/tmphjm4v2k2.swift:21:2: error:\
    \ cannot assign to value: 's1' is a 'let' constant\n        s1 = s1.Replace(\"\
    \xDF\", \"SS\")\n/tmp/tmphjm4v2k2.swift:21:10: error: value of type 'String' has\
    \ no member 'Replace'\n        s1 = s1.Replace(\"\xDF\", \"SS\")\n/tmp/tmphjm4v2k2.swift:22:2:\
    \ error: cannot assign to value: 's0' is a 'let' constant\n        s0 = s0.Replace(\"\
    \xC4\", \"AE\")\n/tmp/tmphjm4v2k2.swift:22:10: error: value of type 'String' has\
    \ no member 'Replace'\n        s0 = s0.Replace(\"\xC4\", \"AE\")\n/tmp/tmphjm4v2k2.swift:23:2:\
    \ error: cannot assign to value: 's1' is a 'let' constant\n        s1 = s1.Replace(\"\
    \xC4\", \"AE\")\n/tmp/tmphjm4v2k2.swift:23:10: error: value of type 'String' has\
    \ no member 'Replace'\n        s1 = s1.Replace(\"\xC4\", \"AE\")\n/tmp/tmphjm4v2k2.swift:24:2:\
    \ error: cannot assign to value: 's0' is "
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\t\n\
    \tlet len0 = s0.Length\n\tlet len1 = s1.Length\n\t\n\tif len0 == 0 || len1 ==\
    \ 0 {\n\t\treturn true\n\t}\n\t\n\tlet mut i0 = 0\n\tlet mut i1 = 0\n\t\n\twhile\
    \ i0 < len0 && i1 < len1 {\n\t\tif s0[i0] != s1[i1] {\n\t\t\treturn false\n\t\t\
    }\n\t\t\n\t\ti0 += 1\n\t\ti1 += 1\n\t}\n\t\n\treturn i0 == len0 && i1 == len1\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpwjawbwqu.swift:26:10: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n        let mut i0 =\
    \ 0\n                ^\n/tmp/tmpwjawbwqu.swift:26:10: note: join the identifiers\
    \ together\n        let mut i0 = 0\n            ~~~~^~\n            muti0\n/tmp/tmpwjawbwqu.swift:26:10:\
    \ note: join the identifiers together with camel-case\n        let mut i0 = 0\n\
    \            ~~~~^~\n            mutI0\n/tmp/tmpwjawbwqu.swift:27:10: error: found\
    \ an unexpected second identifier in constant declaration; is there an accidental\
    \ break?\n        let mut i1 = 0\n                ^\n/tmp/tmpwjawbwqu.swift:27:10:\
    \ note: join the identifiers together\n        let mut i1 = 0\n            ~~~~^~\n\
    \            muti1\n/tmp/tmpwjawbwqu.swift:27:10: note: join the identifiers together\
    \ with camel-case\n        let mut i1 = 0\n            ~~~~^~\n            mutI1\n\
    /tmp/tmpwjawbwqu.swift:16:2: error: cannot assign to value: 's0' is a 'let' constant\n\
    \        s0 = s0.ToLower()\n        ^~\n/tmp/tmpwjawbwqu.swift:16:10: error: value\
    \ of type 'String' has no member 'ToLower'\n        s0 = s0.ToLower()\n      \
    \       ~~ ^~~~~~~\n/tmp/tmpwjawbwqu.swift:17:2: error: cannot assign to value:\
    \ 's1' is a 'let' constant\n        s1 = s1.ToLower()\n        ^~\n/tmp/tmpwjawbwqu.swift:17:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s1 = s1.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmpwjawbwqu.swift:19:16: error: value of type 'String'\
    \ has no member 'Length'\n        let len0 = s0.Length\n                   ~~\
    \ ^~~~~~\n/tmp/tmpwjawbwqu.swift:20:16: error: value of type 'String' has no member\
    \ 'Length'\n        let len1 = s1.Length\n                   ~~ ^~~~~~\n/tmp/tmpwjawbwqu.swift:27:6:\
    \ error: invalid redeclaration of 'mut'\n        let mut i1 = 0\n            ^\n\
    /tmp/tmpwjawbwqu.swift:26:6: note: 'mut' previously declared here\n        let\
    \ mut i0 = 0\n            ^\n/tmp/tmpwjawbwqu.swift:29:8: error: cannot find 'i0'\
    \ in scope\n        while i0 < len0 && i1 < len1 {\n              ^~\n/tmp/tmpwjawbwqu.swift:29:21:\
    \ error: cannot find 'i"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    if s0.length != s1.length {\n        return\
    \ false\n    }\n    var i = 0\n    for _, b := range s0 {\n        if b != s1[i]\
    \ {\n            return false\n        }\n        i += 1\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmph3x_kv6b.swift:20:10: error: expected 'in' after for-each pattern\n\
    \    for _, b := range s0 {\n         ^\n/tmp/tmph3x_kv6b.swift:20:10: error:\
    \ expected Sequence expression for for-each loop\n    for _, b := range s0 {\n\
    \         ^\n/tmp/tmph3x_kv6b.swift:16:11: error: value of type 'String' has no\
    \ member 'length'\n    if s0.length != s1.length {\n       ~~ ^~~~~~\n/tmp/tmph3x_kv6b.swift:16:24:\
    \ error: value of type 'String' has no member 'length'\n    if s0.length != s1.length\
    \ {\n                    ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\t\
    if s0.Length != s1.Length {\n\t\treturn false\n\t}\n\tfor i := 0; i < s0.Length;\
    \ i++ {\n\t\tif s0[i] != s1[i] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpkvca__2x.swift:21:9: error: expected type\n        for i := 0;\
    \ i < s0.Length; i++ {\n               ^\n                <#type#>\n/tmp/tmpkvca__2x.swift:21:9:\
    \ error: expected 'in' after for-each pattern\n        for i := 0; i < s0.Length;\
    \ i++ {\n               ^\n/tmp/tmpkvca__2x.swift:21:9: error: expected Sequence\
    \ expression for for-each loop\n        for i := 0; i < s0.Length; i++ {\n   \
    \            ^\n/tmp/tmpkvca__2x.swift:16:2: error: cannot assign to value: 's0'\
    \ is a 'let' constant\n        s0 = s0.ToLower()\n        ^~\n/tmp/tmpkvca__2x.swift:16:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s0 = s0.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmpkvca__2x.swift:17:2: error: cannot assign to\
    \ value: 's1' is a 'let' constant\n        s1 = s1.ToLower()\n        ^~\n/tmp/tmpkvca__2x.swift:17:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s1 = s1.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmpkvca__2x.swift:18:8: error: value of type 'String'\
    \ has no member 'Length'\n        if s0.Length != s1.Length {\n           ~~ ^~~~~~\n\
    /tmp/tmpkvca__2x.swift:18:21: error: value of type 'String' has no member 'Length'\n\
    \        if s0.Length != s1.Length {\n                        ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\t\n\
    \tlet n = s0.Length\n\tlet m = s1.Length\n\t\n\tif n == 0 || m == 0 {\n\t\treturn\
    \ true\n\t}\n\t\n\tfor i in 0..<n {\n\t\tif s0[i] != s1[i] {\n\t\t\treturn false\n\
    \t\t}\n\t}\n\t\n\treturn true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpo02jging.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.ToLower()\n        ^~\n/tmp/tmpo02jging.swift:16:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s0 = s0.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmpo02jging.swift:17:2: error: cannot assign to\
    \ value: 's1' is a 'let' constant\n        s1 = s1.ToLower()\n        ^~\n/tmp/tmpo02jging.swift:17:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s1 = s1.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmpo02jging.swift:19:13: error: value of type 'String'\
    \ has no member 'Length'\n        let n = s0.Length\n                ~~ ^~~~~~\n\
    /tmp/tmpo02jging.swift:20:13: error: value of type 'String' has no member 'Length'\n\
    \        let m = s1.Length\n                ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.lowercased()\n\ts1 = s1.lowercased()\n\
    \tlet n0 = s0.count\n\tlet n1 = s1.count\n\tlet n2 = n0 + n1\n\tlet n3 = n0 +\
    \ n1 + n2\n\tlet n4 = n0 + n1 + n2 + n3\n\tlet n5 = n0 + n1 + n2 + n3 + n4\n\t\
    let n6 = n0 + n1 + n2 + n3 + n4 + n5\n\tlet n7 = n0 + n1 + n2 + n3 + n4 + n5 +\
    \ n6\n\tlet n8 = n0 + n1 + n2 + n3 + n4 + n5 + n6 + n7\n\tlet n9 = n0 + n1 + n2\
    \ + n3 + n4 + n5 + n6 + n7 + n8\n\tlet n10 = n0 + n1 + n2 + n3 + n4 + n5 + n6\
    \ + n7 + n8 + n9\n\tlet n11 = n0 + n1 + n2 + n3 + n4 + n5 + n6 + n7 + n8 + n9\
    \ + n10\n\tlet n12 = n0 + n1 + n2 + n3 + n4 + n5 + n6 + n7 + n8 + n9 + n10 + n11\n\
    \tlet n13 = n0 + n1 + n2 + n3 + n4 + n5 + n6 + n7 + n8 + n9 + n10 + n11 + n12\n\
    \tlet n14 = n0 + n1 + n2 + n3 + n4 + n5 + n6 + n7 + n8 + n9 + n10 + n11 + n12\
    \ + n13\n\tlet n15 = n0 + n1 + n2 + n3 + n4 + n5 + n6 + n7 + n8 + n9 + n10 + n11\
    \ + n12 + n13 + n14\n\tlet n16 = n0 + n1 + n2 + n3 + n4 + n5 + n6 + n7 + n8 +\
    \ n9 + n10 + n11 + n12 + n13 + n14 + n15\n\tlet n17 = n0 + n1 + n2 + n3 + n4 +\
    \ n5 + n6 + n7 + n8 + n9 + n10 + n11 + n12 + n13 + n14 + n15 + n16\n\tlet n18\
    \ = n0 + n1 + n2 + n3 + n4 + n5 + n6 + n7 + n8 + n9 + n10 + n11 + \n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpyfie_ubs.swift:37:1: error: expected expression after operator\n\
    }\n^\n/tmp/tmpyfie_ubs.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.lowercased()\n        ^~\n/tmp/tmpyfie_ubs.swift:17:2:\
    \ error: cannot assign to value: 's1' is a 'let' constant\n        s1 = s1.lowercased()\n\
    \        ^~\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.lowercased()\n\ts1 = s1.lowercased()\n\
    \t\n\tlet len0 = s0.count\n\tlet len1 = s1.count\n\t\n\tif len0 != len1 {\n\t\t\
    return false\n\t}\n\t\n\tfor i in 0..<len0 {\n\t\tif s0[i] != s1[i] {\n\t\t\t\
    return false\n\t\t}\n\t}\n\t\n\treturn true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\n\
    assert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpqzpkdrqs.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.lowercased()\n        ^~\n/tmp/tmpqzpkdrqs.swift:17:2:\
    \ error: cannot assign to value: 's1' is a 'let' constant\n        s1 = s1.lowercased()\n\
    \        ^~\n/tmp/tmpqzpkdrqs.swift:27:6: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n         \
    \       if s0[i] != s1[i] {\n                   ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpqzpkdrqs.swift:27:15: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n                if s0[i] != s1[i] {\n                            ^~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\t\n\
    \tlet len0 = s0.Length\n\tlet len1 = s1.Length\n\t\n\tif len0 != len1 {\n\t\t\
    return false\n\t}\n\t\n\tfor i in 0..<len0 {\n\t\tif s0[i] != s1[i] {\n\t\t\t\
    return false\n\t\t}\n\t}\n\t\n\treturn true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\n\
    assert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmprok1rtgz.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.ToLower()\n        ^~\n/tmp/tmprok1rtgz.swift:16:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s0 = s0.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmprok1rtgz.swift:17:2: error: cannot assign to\
    \ value: 's1' is a 'let' constant\n        s1 = s1.ToLower()\n        ^~\n/tmp/tmprok1rtgz.swift:17:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s1 = s1.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmprok1rtgz.swift:19:16: error: value of type 'String'\
    \ has no member 'Length'\n        let len0 = s0.Length\n                   ~~\
    \ ^~~~~~\n/tmp/tmprok1rtgz.swift:20:16: error: value of type 'String' has no member\
    \ 'Length'\n        let len1 = s1.Length\n                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\tlet s0s = s0.characters\n\tlet s1s = s1.characters\n\
    \t\n\tlet s0len = s0s.count\n\tlet s1len = s1s.count\n\t\n\tif s0len != s1len\
    \ {\n\t\treturn false\n\t}\n\t\n\tfor i in 0..<s0len {\n\t\tif s0s[i] != s1s[i]\
    \ {\n\t\t\treturn false\n\t\t}\n\t}\n\t\n\treturn true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxmlrukxw.swift:16:15: error: 'characters' is unavailable: Please\
    \ use String directly\n        let s0s = s0.characters\n                     ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpxmlrukxw.swift:17:15:\
    \ error: 'characters' is unavailable: Please use String directly\n        let\
    \ s1s = s1.characters\n                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpxmlrukxw.swift:27:6: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \                if s0s[i] != s1s[i] {\n                   ^~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpxmlrukxw.swift:27:16:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n                if s0s[i] != s1s[i] {\n       \
    \                      ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 += s0\n\ts1 += s1\n\treturn s0.prefix(s1.count)\
    \ == s1.prefix(s0.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5_httqui.swift:16:5: error: left side of mutating operator isn't\
    \ mutable: 's0' is a 'let' constant\n        s0 += s0\n        ~~ ^\n/tmp/tmp5_httqui.swift:17:5:\
    \ error: left side of mutating operator isn't mutable: 's1' is a 'let' constant\n\
    \        s1 += s1\n        ~~ ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\t\n\
    \tlet n = s0.Length\n\tlet m = s1.Length\n\t\n\tif n == 0 || m == 0 {\n\t\treturn\
    \ n == m\n\t}\n\t\n\tlet mut i = 0\n\tlet mut j = 0\n\t\n\twhile i < n && j <\
    \ m {\n\t\tif s0[i] == s1[j] {\n\t\t\ti += 1\n\t\t\tj += 1\n\t\t} else if s0[i]\
    \ < s1[j] {\n\t\t\tbreak\n\t\t} else {\n\t\t\tbreak\n\t\t}\n\t}\n\t\n\treturn\
    \ i == n && j == m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"\
    eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\"\
    , s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\"\
    ) == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp4aoz9h_m.swift:26:10: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n        let mut i =\
    \ 0\n                ^\n/tmp/tmp4aoz9h_m.swift:26:10: note: join the identifiers\
    \ together\n        let mut i = 0\n            ~~~~^\n            muti\n/tmp/tmp4aoz9h_m.swift:26:10:\
    \ note: join the identifiers together with camel-case\n        let mut i = 0\n\
    \            ~~~~^\n            mutI\n/tmp/tmp4aoz9h_m.swift:27:10: error: found\
    \ an unexpected second identifier in constant declaration; is there an accidental\
    \ break?\n        let mut j = 0\n                ^\n/tmp/tmp4aoz9h_m.swift:27:10:\
    \ note: join the identifiers together\n        let mut j = 0\n            ~~~~^\n\
    \            mutj\n/tmp/tmp4aoz9h_m.swift:27:10: note: join the identifiers together\
    \ with camel-case\n        let mut j = 0\n            ~~~~^\n            mutJ\n\
    /tmp/tmp4aoz9h_m.swift:16:2: error: cannot assign to value: 's0' is a 'let' constant\n\
    \        s0 = s0.ToLower()\n        ^~\n/tmp/tmp4aoz9h_m.swift:16:10: error: value\
    \ of type 'String' has no member 'ToLower'\n        s0 = s0.ToLower()\n      \
    \       ~~ ^~~~~~~\n/tmp/tmp4aoz9h_m.swift:17:2: error: cannot assign to value:\
    \ 's1' is a 'let' constant\n        s1 = s1.ToLower()\n        ^~\n/tmp/tmp4aoz9h_m.swift:17:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s1 = s1.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmp4aoz9h_m.swift:19:13: error: value of type 'String'\
    \ has no member 'Length'\n        let n = s0.Length\n                ~~ ^~~~~~\n\
    /tmp/tmp4aoz9h_m.swift:20:13: error: value of type 'String' has no member 'Length'\n\
    \        let m = s1.Length\n                ~~ ^~~~~~\n/tmp/tmp4aoz9h_m.swift:27:6:\
    \ error: invalid redeclaration of 'mut'\n        let mut j = 0\n            ^\n\
    /tmp/tmp4aoz9h_m.swift:26:6: note: 'mut' previously declared here\n        let\
    \ mut i = 0\n            ^\n/tmp/tmp4aoz9h_m.swift:29:8: error: cannot find 'i'\
    \ in scope\n        while i < n && j < m {\n              ^\n/tmp/tmp4aoz9h_m.swift:29:17:\
    \ error: cannot find 'j' in scope\n        while i < n && j < "
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\tlet s0_len = s0.utf8.count\n\tlet s1_len =\
    \ s1.utf8.count\n\tif s0_len != s1_len {\n\t\treturn false\n\t}\n\tfor i in 0..<s0_len\
    \ {\n\t\tif s0[i] != s1[i] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxf9l_1k8.swift:22:6: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n                if\
    \ s0[i] != s1[i] {\n                   ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpxf9l_1k8.swift:22:15: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \                if s0[i] != s1[i] {\n                            ^~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.lowercased()\n\ts1 = s1.lowercased()\n\
    \tlet n = s0.count\n\tlet m = s1.count\n\tif n == 0 || m == 0 {\n\t\treturn n\
    \ == m\n\t}\n\tlet s0 = s0.characters\n\tlet s1 = s1.characters\n\tfor i in 0..<n\
    \ {\n\t\tif s0[i] != s1[i] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmovblvvx.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.lowercased()\n        ^~\n/tmp/tmpmovblvvx.swift:17:2:\
    \ error: cannot assign to value: 's1' is a 'let' constant\n        s1 = s1.lowercased()\n\
    \        ^~\n/tmp/tmpmovblvvx.swift:23:14: error: 'characters' is unavailable:\
    \ Please use String directly\n        let s0 = s0.characters\n               \
    \     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpmovblvvx.swift:24:14:\
    \ error: 'characters' is unavailable: Please use String directly\n        let\
    \ s1 = s1.characters\n                    ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpmovblvvx.swift:26:6: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \                if s0[i] != s1[i] {\n                   ^~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpmovblvvx.swift:26:15:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n                if s0[i] != s1[i] {\n         \
    \                   ^~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.lowercased()\n\ts1 = s1.lowercased()\n\
    \t\n\tlet len0 = s0.count\n\tlet len1 = s1.count\n\t\n\tif len0 == 0 || len1 ==\
    \ 0 {\n\t\treturn len0 == len1\n\t}\n\t\n\tlet len0 = s0.utf8.count\n\tlet len1\
    \ = s1.utf8.count\n\t\n\tif len0 == 0 || len1 == 0 {\n\t\treturn len0 == len1\n\
    \t}\n\t\n\tlet len0 = s0.utf16le.count\n\tlet len1 = s1.utf16le.count\n\t\n\t\
    if len0 == 0 || len1 == 0 {\n\t\treturn len0 == len1\n\t}\n\t\n\tlet len0 = s0.utf32le.count\n\
    \tlet len1 = s1.utf32le.count\n\t\n\tif len0 == 0 || len1 == 0 {\n\t\treturn len0\
    \ == len1\n\t}\n\t\n\tlet len0 = s0.utf16be.w\n\tlet len1 = s1.utf16be.w\n\t\n\
    \tif len0 == 0 || len1 == 0 {\n\t\treturn len0 == len1\n\t}\n\t\n\tlet len0 =\
    \ s0.utf32be.w\n\tlet len1 = s1.utf32be.w\n\t\n\tif len0 == 0 || len1 == 0 {\n\
    \t\treturn len0 == len1\n\t}\n\t\n\tlet len0 = s0.utf16le.w\n\tlet len1 = s1.utf16le.w\n\
    \t\n\tif len0 == 0 || len1 == 0 {\n\t\treturn len0 == len1\n\t}\n\t\n\tlet len0\
    \ = s0.utf32le.w\n\tlet len1 = s1.utf32le.w\n\t\n\tif len0 == 0 || len1 == 0 {\n\
    \t\treturn len0 == len1\n\t}\n\t\n\tlet len0 = s0.utf16be.d\n\tlet len1 = s1.utf16be.d\n\
    \t\n\tif len0 == 0 || len1 == 0 {\n\t\treturn len0 == len1\n\t}\n\t\n\tlet len0\
    \ = s0.utf32be.d\n\tlet len1 = s1.utf32be.d\n\t\n\tif len0 == 0 || len1 == 0 {\n\
    \t\treturn len0 == len1\n\t}\n\t\n\tlet len0 = s0.utf16le.d\n\tlet len1 = s1.utf16le.d\n\
    \t\n\tif len0 == 0 || len1 == 0 {\n\t\treturn len0 == len1\n\t}\n\t\n\tlet len0\
    \ = s0.utf32le.d\n\tlet len1 = s1.utf32le.d\n\t\n\tif len0 == 0 || len1 == 0 {\n\
    \t\treturn len0 == len1\n\t}\n\t\n\tlet len0 = s0.utf16be.b\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpqc9co0bh.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.lowercased()\n        ^~\n/tmp/tmpqc9co0bh.swift:17:2:\
    \ error: cannot assign to value: 's1' is a 'let' constant\n        s1 = s1.lowercased()\n\
    \        ^~\n/tmp/tmpqc9co0bh.swift:26:6: error: invalid redeclaration of 'len0'\n\
    \        let len0 = s0.utf8.count\n            ^\n/tmp/tmpqc9co0bh.swift:19:6:\
    \ note: 'len0' previously declared here\n        let len0 = s0.count\n       \
    \     ^\n/tmp/tmpqc9co0bh.swift:27:6: error: invalid redeclaration of 'len1'\n\
    \        let len1 = s1.utf8.count\n            ^\n/tmp/tmpqc9co0bh.swift:20:6:\
    \ note: 'len1' previously declared here\n        let len1 = s1.count\n       \
    \     ^\n/tmp/tmpqc9co0bh.swift:33:16: error: value of type 'String' has no member\
    \ 'utf16le'\n        let len0 = s0.utf16le.count\n                   ~~ ^~~~~~~\n\
    /tmp/tmpqc9co0bh.swift:34:16: error: value of type 'String' has no member 'utf16le'\n\
    \        let len1 = s1.utf16le.count\n                   ~~ ^~~~~~~\n/tmp/tmpqc9co0bh.swift:40:16:\
    \ error: value of type 'String' has no member 'utf32le'\n        let len0 = s0.utf32le.count\n\
    \                   ~~ ^~~~~~~\n/tmp/tmpqc9co0bh.swift:41:16: error: value of\
    \ type 'String' has no member 'utf32le'\n        let len1 = s1.utf32le.count\n\
    \                   ~~ ^~~~~~~\n/tmp/tmpqc9co0bh.swift:47:16: error: value of\
    \ type 'String' has no member 'utf16be'\n        let len0 = s0.utf16be.w\n   \
    \                ~~ ^~~~~~~\n/tmp/tmpqc9co0bh.swift:48:16: error: value of type\
    \ 'String' has no member 'utf16be'\n        let len1 = s1.utf16be.w\n        \
    \           ~~ ^~~~~~~\n/tmp/tmpqc9co0bh.swift:54:16: error: value of type 'String'\
    \ has no member 'utf32be'\n        let len0 = s0.utf32be.w\n                 \
    \  ~~ ^~~~~~~\n/tmp/tmpqc9co0bh.swift:55:16: error: value of type 'String' has\
    \ no member 'utf32be'\n        let len1 = s1.utf32be.w\n                   ~~\
    \ ^~~~~~~\n/tmp/tmpqc9co0bh.swift:61:16: error: value of type 'String' has no\
    \ member 'utf16le'\n        let len0 = s0.utf16le.w\n                   ~~ ^~~~~~~\n\
    /tmp/tmpqc9co0bh.swi"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    if s0.count != s1.count {\n        return\
    \ false\n    }\n    var i = 0\n    for c0, c1 in zipString(s0, s1) {\n       \
    \ if c0 != c1 {\n            return false\n        }\n        i += 1\n    }\n\
    \    return i == s0.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpvwrc8ubi.swift:20:11: error: expected 'in' after for-each pattern\n\
    \    for c0, c1 in zipString(s0, s1) {\n          ^\n/tmp/tmpvwrc8ubi.swift:20:11:\
    \ error: expected Sequence expression for for-each loop\n    for c0, c1 in zipString(s0,\
    \ s1) {\n          ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.lowercased()\n\ts1 = s1.lowercased()\n\
    \tlet len = min(s0.count, s1.count)\n\tfor i in 0..<len {\n\t\tif s0[i] != s1[i]\
    \ {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpbrrse5x6.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.lowercased()\n        ^~\n/tmp/tmpbrrse5x6.swift:17:2:\
    \ error: cannot assign to value: 's1' is a 'let' constant\n        s1 = s1.lowercased()\n\
    \        ^~\n/tmp/tmpbrrse5x6.swift:20:6: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n         \
    \       if s0[i] != s1[i] {\n                   ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpbrrse5x6.swift:20:15: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n                if s0[i] != s1[i] {\n                            ^~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.lowercased()\n\ts1 = s1.lowercased()\n\
    \tlet n = s0.count\n\tlet m = s1.count\n\tif n == 0 || m == 0 {\n\t\treturn n\
    \ == m\n\t}\n\tlet n = s0.utf8.count\n\tlet m = s1.utf8.count\n\tif n == 0 ||\
    \ m == 0 {\n\t\treturn n == m\n\t}\n\tlet n = s0.utf16le.count\n\tlet m = s1.utf16le.count\n\
    \tif n == 0 || m == 0 {\n\t\treturn n == m\n\t}\n\tlet n = s0.utf32le.count\n\t\
    let m = s1.utf32le.count\n\tif n == 0 || m == 0 {\n\t\treturn n == m\n\t}\n\t\
    let n = s0.utf16be.count\n\tlet m = s1.utf16be.count\n\tif n == 0 || m == 0 {\n\
    \t\treturn n == m\n\t}\n\tlet n = s0.utf32be.count\n\tlet m = s1.utf32be.count\n\
    \tif n == 0 || m == 0 {\n\t\treturn n == m\n\t}\n\tlet n = s0.utf8.count\n\tlet\
    \ m = s1.utf8.count\n\tif n == 0 || m == 0 {\n\t\treturn n == m\n\t}\n\tlet n\
    \ = s0.utf16le.count\n\tlet m = s1.utf16le.count\n\tif n == 0 || m == 0 {\n\t\t\
    return n == m\n\t}\n\tlet n = s0.utf32le.count\n\tlet m = s1.utf32le.count\n\t\
    if n == 0 || m == 0 {\n\t\treturn n == m\n\t}\n\tlet n = s0.utf16be.count\n\t\
    let m = s1.utf16be.count\n\tif n == 0 || m == 0 {\n\t\treturn n == m\n\t}\n\t\
    let n = s0.utf32be.count\n\tlet m = s1.utf32be.count\n\tif n == 0 || m == 0 {\n\
    \t\treturn n == m\n\t}\n\tlet n = s0.utf8.count\n\tlet m = s1.utf8.count\n\tif\
    \ n == 0 || m == 0 {\n\t\treturn n == m\n\t}\n\tlet n = s0.utf16le.count\n\tlet\
    \ m = s1.utf16le.count\n\tif n == 0 || m == 0 {\n\t\treturn n == m\n\t}\n\tlet\
    \ n = s0.utf32le.count\n\tlet m = s1.utf32le.count\n\tif n == 0 || m == 0 {\n\t\
    \treturn n == m\n\t}\n\tlet n = s0.utf16be.count\n\tlet m = s1.utf16be.count\n\
    \tif n == 0 || m == 0 {\n\t\treturn n == m\n\t}\n\tlet n = s0.utf32be.count\n\t\
    let m = s1.utf32be.count\n\tif n == 0 || m == 0 {\n\t\treturn n == m\n\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpigwg1lga.swift:119:53: error: expected '}' at end of brace statement\n\
    assert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)\n                   \
    \                                 ^\n/tmp/tmpigwg1lga.swift:15:49: note: to match\
    \ this opening '{'\nfunc same_chars(s0: String, s1: String) -> Bool {\n      \
    \                                          ^\n/tmp/tmpigwg1lga.swift:16:2: error:\
    \ cannot assign to value: 's0' is a 'let' constant\n        s0 = s0.lowercased()\n\
    \        ^~\n/tmp/tmpigwg1lga.swift:17:2: error: cannot assign to value: 's1'\
    \ is a 'let' constant\n        s1 = s1.lowercased()\n        ^~\n/tmp/tmpigwg1lga.swift:23:6:\
    \ error: invalid redeclaration of 'n'\n        let n = s0.utf8.count\n       \
    \     ^\n/tmp/tmpigwg1lga.swift:18:6: note: 'n' previously declared here\n   \
    \     let n = s0.count\n            ^\n/tmp/tmpigwg1lga.swift:24:6: error: invalid\
    \ redeclaration of 'm'\n        let m = s1.utf8.count\n            ^\n/tmp/tmpigwg1lga.swift:19:6:\
    \ note: 'm' previously declared here\n        let m = s1.count\n            ^\n\
    /tmp/tmpigwg1lga.swift:28:13: error: value of type 'String' has no member 'utf16le'\n\
    \        let n = s0.utf16le.count\n                ~~ ^~~~~~~\n/tmp/tmpigwg1lga.swift:29:13:\
    \ error: value of type 'String' has no member 'utf16le'\n        let m = s1.utf16le.count\n\
    \                ~~ ^~~~~~~\n/tmp/tmpigwg1lga.swift:33:13: error: value of type\
    \ 'String' has no member 'utf32le'\n        let n = s0.utf32le.count\n       \
    \         ~~ ^~~~~~~\n/tmp/tmpigwg1lga.swift:34:13: error: value of type 'String'\
    \ has no member 'utf32le'\n        let m = s1.utf32le.count\n                ~~\
    \ ^~~~~~~\n/tmp/tmpigwg1lga.swift:38:13: error: value of type 'String' has no\
    \ member 'utf16be'\n        let n = s0.utf16be.count\n                ~~ ^~~~~~~\n\
    /tmp/tmpigwg1lga.swift:39:13: error: value of type 'String' has no member 'utf16be'\n\
    \        let m = s1.utf16be.count\n                ~~ ^~~~~~~\n/tmp/tmpigwg1lga.swift:43:13:\
    \ error: value of type 'String' has no member 'utf32be'\n        let n = s0.utf32be.count\n\
    \                ~~ ^~~~~~~\n/tmp/tmpigwg1lga.swi"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.lowercased()\n\ts1 = s1.lowercased()\n\
    \t\n\tlet s0_len = s0.count\n\tlet s1_len = s1.count\n\t\n\tif s0_len != s1_len\
    \ {\n\t\treturn false\n\t}\n\t\n\tfor i in 0..<s0_len {\n\t\tif s0[i] != s1[i]\
    \ {\n\t\t\treturn false\n\t\t}\n\t}\n\t\n\treturn true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpoo5zaldm.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.lowercased()\n        ^~\n/tmp/tmpoo5zaldm.swift:17:2:\
    \ error: cannot assign to value: 's1' is a 'let' constant\n        s1 = s1.lowercased()\n\
    \        ^~\n/tmp/tmpoo5zaldm.swift:27:6: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n         \
    \       if s0[i] != s1[i] {\n                   ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpoo5zaldm.swift:27:15: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n                if s0[i] != s1[i] {\n                            ^~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.lowercased()\n\ts1 = s1.lowercased()\n\
    \tlet n = s0.count\n\tlet m = s1.count\n\tif n == 0 || m == 0 {\n\t\treturn n\
    \ == m\n\t}\n\tlet n1 = s0.unicodeScalars.count\n\tlet m1 = s1.unicodeScalars.count\n\
    \tif n1 == 0 || m1 == 0 {\n\t\treturn n1 == m1\n\t}\n\tlet n2 = s0.unicodeScalars.count\n\
    \tlet m2 = s1.unicodeScalars.count\n\tif n2 == 0 || m2 == 0 {\n\t\treturn n2 ==\
    \ m2\n\t}\n\tlet n3 = s0.unicodeScalars.count\n\tlet m3 = s1.unicodeScalars.count\n\
    \tif n3 == 0 || m3 == 0 {\n\t\treturn n3 == m3\n\t}\n\tlet n4 = s0.unicodeScalars.count\n\
    \tlet m4 = s1.unicodeScalars.count\n\tif n4 == 0 || m4 == 0 {\n\t\treturn n4 ==\
    \ m4\n\t}\n\tlet n5 = s0.unicodeScalars.count\n\tlet m5 = s1.unicodeScalars.count\n\
    \tif n5 == 0 || m5 == 0 {\n\t\treturn n5 == m5\n\t}\n\tlet n6 = s0.unicodeScalars.count\n\
    \tlet m6 = s1.unicodeScalars.count\n\tif n6 == 0 || m6 == 0 {\n\t\treturn n6 ==\
    \ m6\n\t}\n\tlet n7 = s0.unicodeScalars.count\n\tlet m7 = s1.unicodeScalars.count\n\
    \tif n7 == 0 || m7 == 0 {\n\t\treturn n7 == m7\n\t}\n\tlet n8 = s0.unicodeScalars.count\n\
    \tlet m8 = s1.unicodeScalars.count\n\tif n8 == 0 || m8 == 0 {\n\t\treturn n8 ==\
    \ m8\n\t}\n\tlet n9 = s0.unicodeScalars.count\n\tlet m9 = s1.unicodeScalars.count\n\
    \tif n9 == 0 || m9 == 0 {\n\t\treturn n9 == m9\n\t}\n\tlet n10 = s0.unicodeScalars.count\n\
    \tlet m10 = s1.unicodeScalars.count\n\tif n10 == 0 || m10 == 0 {\n\t\treturn n10\
    \ == m10\n\t}\n\tlet n11 = s0.unicodeScalars.count\n\tlet m11 = s1.unicodeScalars.count\n\
    \tif n11 == 0 || m11 == 0 {\n\t\treturn n11 == m11\n\t}\n\tlet n12 = s0.unicodeScalars.count\n\
    \tlet m12 = s1.unicodeScalars.count\n\tif n12 == 0 || m12 == 0 {\n\t\treturn n12\
    \ == m12\n\t}\n\tlet n13\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpyajmuah_.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.lowercased()\n        ^~\n/tmp/tmpyajmuah_.swift:17:2:\
    \ error: cannot assign to value: 's1' is a 'let' constant\n        s1 = s1.lowercased()\n\
    \        ^~\n/tmp/tmpyajmuah_.swift:83:6: error: type annotation missing in pattern\n\
    \        let n13\n            ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.lowercased()\n\ts1 = s1.lowercased()\n\
    \t\n\tlet n0 = s0.count\n\tlet n1 = s1.count\n\t\n\tif n0 < n1 {\n\t\treturn false\n\
    \t}\n\t\n\tlet i0 = 0\n\tlet i1 = 0\n\t\n\twhile i0 < n0 {\n\t\tif s0[i0] != s1[i1]\
    \ {\n\t\t\treturn false\n\t\t}\n\t\t\n\t\ti0 += 1\n\t\ti1 += 1\n\t}\n\t\n\treturn\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\", s1: \"\
    dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\") ==\
    \ true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpabwrrkws.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.lowercased()\n        ^~\n/tmp/tmpabwrrkws.swift:17:2:\
    \ error: cannot assign to value: 's1' is a 'let' constant\n        s1 = s1.lowercased()\n\
    \        ^~\n/tmp/tmpabwrrkws.swift:30:6: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n         \
    \       if s0[i0] != s1[i1] {\n                   ^~~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpabwrrkws.swift:30:16: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n                if s0[i0] != s1[i1] {\n                          \
    \   ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked\
    \ unavailable here\n    public subscript(i: Int) -> Character { get }\n      \
    \     ^\n/tmp/tmpabwrrkws.swift:34:6: error: left side of mutating operator isn't\
    \ mutable: 'i0' is a 'let' constant\n                i0 += 1\n               \
    \ ~~ ^\n/tmp/tmpabwrrkws.swift:26:2: note: change 'let' to 'var' to make it mutable\n\
    \        let i0 = 0\n        ^~~\n        var\n/tmp/tmpabwrrkws.swift:35:6: error:\
    \ left side of mutating operator isn't mutable: 'i1' is a 'let' constant\n   \
    \             i1 += 1\n                ~~ ^\n/tmp/tmpabwrrkws.swift:27:2: note:\
    \ change 'let' to 'var' to make it mutable\n        let i1 = 0\n        ^~~\n\
    \        var\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\t\
    let n = s0.Length\n\tlet m = s1.Length\n\tif n != m {\n\t\treturn false\n\t}\n\
    \tfor i in 0..<n {\n\t\tif s0[i] != s1[i] {\n\t\t\treturn false\n\t\t}\n\t}\n\t\
    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\", s1: \"\
    dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\") ==\
    \ true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpljnyvl7r.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.ToLower()\n        ^~\n/tmp/tmpljnyvl7r.swift:16:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s0 = s0.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmpljnyvl7r.swift:17:2: error: cannot assign to\
    \ value: 's1' is a 'let' constant\n        s1 = s1.ToLower()\n        ^~\n/tmp/tmpljnyvl7r.swift:17:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s1 = s1.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmpljnyvl7r.swift:18:13: error: value of type 'String'\
    \ has no member 'Length'\n        let n = s0.Length\n                ~~ ^~~~~~\n\
    /tmp/tmpljnyvl7r.swift:19:13: error: value of type 'String' has no member 'Length'\n\
    \        let m = s1.Length\n                ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.lowercased()\n\ts1 = s1.lowercased()\n\
    \t\n\tlet n0 = s0.count\n\tlet n1 = s1.count\n\t\n\tfor i in 0..<n0 {\n\t\tif\
    \ s0[i] != s1[i] {\n\t\t\treturn false\n\t\t}\n\t}\n\t\n\treturn true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpn3i1nnig.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.lowercased()\n        ^~\n/tmp/tmpn3i1nnig.swift:17:2:\
    \ error: cannot assign to value: 's1' is a 'let' constant\n        s1 = s1.lowercased()\n\
    \        ^~\n/tmp/tmpn3i1nnig.swift:23:6: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n         \
    \       if s0[i] != s1[i] {\n                   ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpn3i1nnig.swift:23:15: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n                if s0[i] != s1[i] {\n                            ^~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.lowercased()\n\ts1 = s1.lowercased()\n\
    \t\n\tlet len0 = s0.count\n\tlet len1 = s1.count\n\t\n\tif len0 == 0 || len1 ==\
    \ 0 {\n\t\treturn len0 == len1\n\t}\n\t\n\tlet maxlen = max(len0, len1)\n\t\n\t\
    for i in 0..<maxlen {\n\t\tlet c0 = s0[(i * len0) / maxlen]\n\t\tlet c1 = s1[(i\
    \ * len1) / maxlen]\n\t\t\n\t\tif c0 != c1 {\n\t\t\treturn false\n\t\t}\n\t}\n\
    \t\n\treturn true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"\
    eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\"\
    , s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\"\
    ) == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpt3ltnzji.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.lowercased()\n        ^~\n/tmp/tmpt3ltnzji.swift:17:2:\
    \ error: cannot assign to value: 's1' is a 'let' constant\n        s1 = s1.lowercased()\n\
    \        ^~\n/tmp/tmpt3ltnzji.swift:29:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n         \
    \       let c0 = s0[(i * len0) / maxlen]\n                         ^~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpt3ltnzji.swift:30:12:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n                let c1 = s1[(i * len1) / maxlen]\n\
    \                         ^~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\tlet s0c = s0.characters\n\tlet s1c = s1.characters\n\
    \t\n\tfor i in 0..<min(s0c.count, s1c.count) {\n\t\tif s0c[i] != s1c[i] {\n\t\t\
    \treturn false\n\t\t}\n\t}\n\t\n\treturn true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\n\
    assert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpp0k84loz.swift:16:15: error: 'characters' is unavailable: Please\
    \ use String directly\n        let s0c = s0.characters\n                     ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpp0k84loz.swift:17:15:\
    \ error: 'characters' is unavailable: Please use String directly\n        let\
    \ s1c = s1.characters\n                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpp0k84loz.swift:20:6: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \                if s0c[i] != s1c[i] {\n                   ^~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpp0k84loz.swift:20:16:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n                if s0c[i] != s1c[i] {\n       \
    \                      ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\t\n\
    \tlet len0 = s0.Length\n\tlet len1 = s1.Length\n\t\n\tif len0 == 0 || len1 ==\
    \ 0 {\n\t\treturn true\n\t}\n\t\n\tlet mut i0 = 0\n\tlet mut i1 = 0\n\t\n\twhile\
    \ i0 < len0 && i1 < len1 {\n\t\tif s0[i0] != s1[i1] {\n\t\t\treturn false\n\t\t\
    }\n\t\t\n\t\ti0 += 1\n\t\ti1 += 1\n\t}\n\t\n\treturn i0 == len0 && i1 == len1\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpwjawbwqu.swift:26:10: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n        let mut i0 =\
    \ 0\n                ^\n/tmp/tmpwjawbwqu.swift:26:10: note: join the identifiers\
    \ together\n        let mut i0 = 0\n            ~~~~^~\n            muti0\n/tmp/tmpwjawbwqu.swift:26:10:\
    \ note: join the identifiers together with camel-case\n        let mut i0 = 0\n\
    \            ~~~~^~\n            mutI0\n/tmp/tmpwjawbwqu.swift:27:10: error: found\
    \ an unexpected second identifier in constant declaration; is there an accidental\
    \ break?\n        let mut i1 = 0\n                ^\n/tmp/tmpwjawbwqu.swift:27:10:\
    \ note: join the identifiers together\n        let mut i1 = 0\n            ~~~~^~\n\
    \            muti1\n/tmp/tmpwjawbwqu.swift:27:10: note: join the identifiers together\
    \ with camel-case\n        let mut i1 = 0\n            ~~~~^~\n            mutI1\n\
    /tmp/tmpwjawbwqu.swift:16:2: error: cannot assign to value: 's0' is a 'let' constant\n\
    \        s0 = s0.ToLower()\n        ^~\n/tmp/tmpwjawbwqu.swift:16:10: error: value\
    \ of type 'String' has no member 'ToLower'\n        s0 = s0.ToLower()\n      \
    \       ~~ ^~~~~~~\n/tmp/tmpwjawbwqu.swift:17:2: error: cannot assign to value:\
    \ 's1' is a 'let' constant\n        s1 = s1.ToLower()\n        ^~\n/tmp/tmpwjawbwqu.swift:17:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s1 = s1.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmpwjawbwqu.swift:19:16: error: value of type 'String'\
    \ has no member 'Length'\n        let len0 = s0.Length\n                   ~~\
    \ ^~~~~~\n/tmp/tmpwjawbwqu.swift:20:16: error: value of type 'String' has no member\
    \ 'Length'\n        let len1 = s1.Length\n                   ~~ ^~~~~~\n/tmp/tmpwjawbwqu.swift:27:6:\
    \ error: invalid redeclaration of 'mut'\n        let mut i1 = 0\n            ^\n\
    /tmp/tmpwjawbwqu.swift:26:6: note: 'mut' previously declared here\n        let\
    \ mut i0 = 0\n            ^\n/tmp/tmpwjawbwqu.swift:29:8: error: cannot find 'i0'\
    \ in scope\n        while i0 < len0 && i1 < len1 {\n              ^~\n/tmp/tmpwjawbwqu.swift:29:21:\
    \ error: cannot find 'i"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.lowercased()\n\ts1 = s1.lowercased()\n\
    \tlet n0 = s0.count\n\tlet n1 = s1.count\n\tfor i in 0..<n0 {\n\t\tif s0[i] !=\
    \ s1[i] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpsr4247i_.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.lowercased()\n        ^~\n/tmp/tmpsr4247i_.swift:17:2:\
    \ error: cannot assign to value: 's1' is a 'let' constant\n        s1 = s1.lowercased()\n\
    \        ^~\n/tmp/tmpsr4247i_.swift:21:6: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n         \
    \       if s0[i] != s1[i] {\n                   ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpsr4247i_.swift:21:15: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n                if s0[i] != s1[i] {\n                            ^~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\t\n\
    \tlet s0_len = s0.Length\n\tlet s1_len = s1.Length\n\t\n\tif s0_len != s1_len\
    \ {\n\t\treturn false\n\t}\n\t\n\tfor i in 0..<s0_len {\n\t\tif s0[i] != s1[i]\
    \ {\n\t\t\treturn false\n\t\t}\n\t}\n\t\n\treturn true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_sa_1gn4.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.ToLower()\n        ^~\n/tmp/tmp_sa_1gn4.swift:16:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s0 = s0.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmp_sa_1gn4.swift:17:2: error: cannot assign to\
    \ value: 's1' is a 'let' constant\n        s1 = s1.ToLower()\n        ^~\n/tmp/tmp_sa_1gn4.swift:17:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s1 = s1.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmp_sa_1gn4.swift:19:18: error: value of type 'String'\
    \ has no member 'Length'\n        let s0_len = s0.Length\n                   \
    \  ~~ ^~~~~~\n/tmp/tmp_sa_1gn4.swift:20:18: error: value of type 'String' has\
    \ no member 'Length'\n        let s1_len = s1.Length\n                     ~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\t\n\
    \tlet len0 = s0.Length\n\tlet len1 = s1.Length\n\t\n\tif len0 == 0 || len1 ==\
    \ 0 {\n\t\treturn len0 == len1\n\t}\n\t\n\tlet mut i0 = 0\n\tlet mut i1 = 0\n\t\
    \n\twhile i0 < len0 && i1 < len1 {\n\t\tif s0[i0] != s1[i1] {\n\t\t\treturn false\n\
    \t\t}\n\t\t\n\t\ti0 += 1\n\t\ti1 += 1\n\t}\n\t\n\treturn i0 == len0\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp6uauklyq.swift:26:10: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n        let mut i0 =\
    \ 0\n                ^\n/tmp/tmp6uauklyq.swift:26:10: note: join the identifiers\
    \ together\n        let mut i0 = 0\n            ~~~~^~\n            muti0\n/tmp/tmp6uauklyq.swift:26:10:\
    \ note: join the identifiers together with camel-case\n        let mut i0 = 0\n\
    \            ~~~~^~\n            mutI0\n/tmp/tmp6uauklyq.swift:27:10: error: found\
    \ an unexpected second identifier in constant declaration; is there an accidental\
    \ break?\n        let mut i1 = 0\n                ^\n/tmp/tmp6uauklyq.swift:27:10:\
    \ note: join the identifiers together\n        let mut i1 = 0\n            ~~~~^~\n\
    \            muti1\n/tmp/tmp6uauklyq.swift:27:10: note: join the identifiers together\
    \ with camel-case\n        let mut i1 = 0\n            ~~~~^~\n            mutI1\n\
    /tmp/tmp6uauklyq.swift:16:2: error: cannot assign to value: 's0' is a 'let' constant\n\
    \        s0 = s0.ToLower()\n        ^~\n/tmp/tmp6uauklyq.swift:16:10: error: value\
    \ of type 'String' has no member 'ToLower'\n        s0 = s0.ToLower()\n      \
    \       ~~ ^~~~~~~\n/tmp/tmp6uauklyq.swift:17:2: error: cannot assign to value:\
    \ 's1' is a 'let' constant\n        s1 = s1.ToLower()\n        ^~\n/tmp/tmp6uauklyq.swift:17:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s1 = s1.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmp6uauklyq.swift:19:16: error: value of type 'String'\
    \ has no member 'Length'\n        let len0 = s0.Length\n                   ~~\
    \ ^~~~~~\n/tmp/tmp6uauklyq.swift:20:16: error: value of type 'String' has no member\
    \ 'Length'\n        let len1 = s1.Length\n                   ~~ ^~~~~~\n/tmp/tmp6uauklyq.swift:27:6:\
    \ error: invalid redeclaration of 'mut'\n        let mut i1 = 0\n            ^\n\
    /tmp/tmp6uauklyq.swift:26:6: note: 'mut' previously declared here\n        let\
    \ mut i0 = 0\n            ^\n/tmp/tmp6uauklyq.swift:29:8: error: cannot find 'i0'\
    \ in scope\n        while i0 < len0 && i1 < len1 {\n              ^~\n/tmp/tmp6uauklyq.swift:29:21:\
    \ error: cannot find 'i"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.lowercased()\n\ts1 = s1.lowercased()\n\
    \t\n\tlet n0 = s0.count\n\tlet n1 = s1.count\n\t\n\tif n0 != n1 {\n\t\treturn\
    \ false\n\t}\n\t\n\tfor i in 0..<n0 {\n\t\tif s0[i] != s1[i] {\n\t\t\treturn false\n\
    \t\t}\n\t}\n\t\n\treturn true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmph8lj9mbp.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.lowercased()\n        ^~\n/tmp/tmph8lj9mbp.swift:17:2:\
    \ error: cannot assign to value: 's1' is a 'let' constant\n        s1 = s1.lowercased()\n\
    \        ^~\n/tmp/tmph8lj9mbp.swift:27:6: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n         \
    \       if s0[i] != s1[i] {\n                   ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmph8lj9mbp.swift:27:15: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n                if s0[i] != s1[i] {\n                            ^~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\t\n\
    \tlet len0 = s0.Length\n\tlet len1 = s1.Length\n\t\n\tif len0 == 0 || len1 ==\
    \ 0 {\n\t\treturn len0 == len1\n\t}\n\t\n\tlet mut i0 = 0\n\tlet mut i1 = 0\n\t\
    \n\twhile i0 < len0 && i1 < len1 {\n\t\tif s0[i0] != s1[i1] {\n\t\t\treturn false\n\
    \t\t}\n\t\t\n\t\ti0 += 1\n\t\ti1 += 1\n\t}\n\t\n\treturn i0 == len0 || i1 == len1\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpsjcrna0t.swift:26:10: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n        let mut i0 =\
    \ 0\n                ^\n/tmp/tmpsjcrna0t.swift:26:10: note: join the identifiers\
    \ together\n        let mut i0 = 0\n            ~~~~^~\n            muti0\n/tmp/tmpsjcrna0t.swift:26:10:\
    \ note: join the identifiers together with camel-case\n        let mut i0 = 0\n\
    \            ~~~~^~\n            mutI0\n/tmp/tmpsjcrna0t.swift:27:10: error: found\
    \ an unexpected second identifier in constant declaration; is there an accidental\
    \ break?\n        let mut i1 = 0\n                ^\n/tmp/tmpsjcrna0t.swift:27:10:\
    \ note: join the identifiers together\n        let mut i1 = 0\n            ~~~~^~\n\
    \            muti1\n/tmp/tmpsjcrna0t.swift:27:10: note: join the identifiers together\
    \ with camel-case\n        let mut i1 = 0\n            ~~~~^~\n            mutI1\n\
    /tmp/tmpsjcrna0t.swift:16:2: error: cannot assign to value: 's0' is a 'let' constant\n\
    \        s0 = s0.ToLower()\n        ^~\n/tmp/tmpsjcrna0t.swift:16:10: error: value\
    \ of type 'String' has no member 'ToLower'\n        s0 = s0.ToLower()\n      \
    \       ~~ ^~~~~~~\n/tmp/tmpsjcrna0t.swift:17:2: error: cannot assign to value:\
    \ 's1' is a 'let' constant\n        s1 = s1.ToLower()\n        ^~\n/tmp/tmpsjcrna0t.swift:17:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s1 = s1.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmpsjcrna0t.swift:19:16: error: value of type 'String'\
    \ has no member 'Length'\n        let len0 = s0.Length\n                   ~~\
    \ ^~~~~~\n/tmp/tmpsjcrna0t.swift:20:16: error: value of type 'String' has no member\
    \ 'Length'\n        let len1 = s1.Length\n                   ~~ ^~~~~~\n/tmp/tmpsjcrna0t.swift:27:6:\
    \ error: invalid redeclaration of 'mut'\n        let mut i1 = 0\n            ^\n\
    /tmp/tmpsjcrna0t.swift:26:6: note: 'mut' previously declared here\n        let\
    \ mut i0 = 0\n            ^\n/tmp/tmpsjcrna0t.swift:29:8: error: cannot find 'i0'\
    \ in scope\n        while i0 < len0 && i1 < len1 {\n              ^~\n/tmp/tmpsjcrna0t.swift:29:21:\
    \ error: cannot find 'i"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.lowercased()\n\ts1 = s1.lowercased()\n\
    \t\n\tlet n0 = s0.count\n\tlet n1 = s1.count\n\t\n\tif n0 != n1 {\n\t\treturn\
    \ false\n\t}\n\t\n\tlet n0c = n0\n\tlet n1c = (n0 + n1)/2\n\t\n\tfor i in 0..<n0\
    \ {\n\t\tif s0[i] != s1[i] {\n\t\t\treturn false\n\t\t}\n\t}\n\t\n\tfor i in 0..<n1\
    \ {\n\t\tif s0[n0c - i] != s1[n1c - i] {\n\t\t\treturn false\n\t\t}\n\t}\n\t\n\
    \treturn true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"\
    eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\"\
    , s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\"\
    ) == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmppo0enrsj.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.lowercased()\n        ^~\n/tmp/tmppo0enrsj.swift:17:2:\
    \ error: cannot assign to value: 's1' is a 'let' constant\n        s1 = s1.lowercased()\n\
    \        ^~\n/tmp/tmppo0enrsj.swift:30:6: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n         \
    \       if s0[i] != s1[i] {\n                   ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmppo0enrsj.swift:30:15: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n                if s0[i] != s1[i] {\n                            ^~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmppo0enrsj.swift:36:6:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n                if s0[n0c - i] != s1[n1c - i] {\n\
    \                   ^~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmppo0enrsj.swift:36:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \                if s0[n0c - i] != s1[n1c - i] {\n                           \
    \       ^~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.lowercased()\n\ts1 = s1.lowercased()\n\
    \tlet n0 = s0.count\n\tlet n1 = s1.count\n\tfor i in 0..<min(s0.count, s1.count)\
    \ {\n\t\tif s0[i] != s1[i] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn n0 == n1\
    \ && n0 > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\", s1: \"\
    dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\") ==\
    \ true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp43g3z3vp.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.lowercased()\n        ^~\n/tmp/tmp43g3z3vp.swift:17:2:\
    \ error: cannot assign to value: 's1' is a 'let' constant\n        s1 = s1.lowercased()\n\
    \        ^~\n/tmp/tmp43g3z3vp.swift:21:6: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n         \
    \       if s0[i] != s1[i] {\n                   ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmp43g3z3vp.swift:21:15: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n                if s0[i] != s1[i] {\n                            ^~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    if s0.count != s1.count {\n        return\
    \ false\n    }\n    var i = 0\n    var j = 0\n    while i < s0.count && j < s1.count\
    \ {\n        if s0[i] != s1[j] {\n            return false\n        }\n      \
    \  i += 1\n        j += 1\n    }\n    return i == s0.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_z6ynwns.swift:22:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if s0[i]\
    \ != s1[j] {\n           ^~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmp_z6ynwns.swift:22:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s0[i] != s1[j] {\n                    ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 += s0\n\ts1 += s1\n\treturn s0.prefix(s0.count)\
    \ == s1.prefix(s1.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpht3fg33g.swift:16:5: error: left side of mutating operator isn't\
    \ mutable: 's0' is a 'let' constant\n        s0 += s0\n        ~~ ^\n/tmp/tmpht3fg33g.swift:17:5:\
    \ error: left side of mutating operator isn't mutable: 's1' is a 'let' constant\n\
    \        s1 += s1\n        ~~ ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\t\n\
    \tlet len0 = s0.Length\n\tlet len1 = s1.Length\n\t\n\tif len0 != len1 {\n\t\t\
    return false\n\t}\n\t\n\tfor i in 0..<len0 {\n\t\tif s0[i] != s1[i] {\n\t\t\t\
    return false\n\t\t}\n\t}\n\t\n\treturn true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\n\
    assert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmprok1rtgz.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.ToLower()\n        ^~\n/tmp/tmprok1rtgz.swift:16:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s0 = s0.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmprok1rtgz.swift:17:2: error: cannot assign to\
    \ value: 's1' is a 'let' constant\n        s1 = s1.ToLower()\n        ^~\n/tmp/tmprok1rtgz.swift:17:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s1 = s1.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmprok1rtgz.swift:19:16: error: value of type 'String'\
    \ has no member 'Length'\n        let len0 = s0.Length\n                   ~~\
    \ ^~~~~~\n/tmp/tmprok1rtgz.swift:20:16: error: value of type 'String' has no member\
    \ 'Length'\n        let len1 = s1.Length\n                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    if s0.count != s1.count {\n        return\
    \ false\n    }\n    for i := 0; i < s0.count; i++ {\n        if s0[i] != s1[i]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7kt42hne.swift:19:12: error: expected type\n    for i := 0; i <\
    \ s0.count; i++ {\n           ^\n            <#type#>\n/tmp/tmp7kt42hne.swift:19:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < s0.count; i++\
    \ {\n           ^\n/tmp/tmp7kt42hne.swift:19:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < s0.count; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.lowercased()\n\ts1 = s1.lowercased()\n\
    \tlet n = s0.count\n\tlet m = s1.count\n\tif n == 0 || m == 0 {\n\t\treturn n\
    \ == m\n\t}\n\tlet mut i = n - 1\n\tlet mut j = m - 1\n\twhile i >= 0 && j >=\
    \ 0 {\n\t\tif s0[i] == s1[j] {\n\t\t\ti -= 1\n\t\t\tj -= 1\n\t\t} else if s0[i]\
    \ != s1[j] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn i == 0 && j == 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmppfx63v88.swift:23:10: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n        let mut i =\
    \ n - 1\n                ^\n/tmp/tmppfx63v88.swift:23:10: note: join the identifiers\
    \ together\n        let mut i = n - 1\n            ~~~~^\n            muti\n/tmp/tmppfx63v88.swift:23:10:\
    \ note: join the identifiers together with camel-case\n        let mut i = n -\
    \ 1\n            ~~~~^\n            mutI\n/tmp/tmppfx63v88.swift:24:10: error:\
    \ found an unexpected second identifier in constant declaration; is there an accidental\
    \ break?\n        let mut j = m - 1\n                ^\n/tmp/tmppfx63v88.swift:24:10:\
    \ note: join the identifiers together\n        let mut j = m - 1\n           \
    \ ~~~~^\n            mutj\n/tmp/tmppfx63v88.swift:24:10: note: join the identifiers\
    \ together with camel-case\n        let mut j = m - 1\n            ~~~~^\n   \
    \         mutJ\n/tmp/tmppfx63v88.swift:16:2: error: cannot assign to value: 's0'\
    \ is a 'let' constant\n        s0 = s0.lowercased()\n        ^~\n/tmp/tmppfx63v88.swift:17:2:\
    \ error: cannot assign to value: 's1' is a 'let' constant\n        s1 = s1.lowercased()\n\
    \        ^~\n/tmp/tmppfx63v88.swift:24:6: error: invalid redeclaration of 'mut'\n\
    \        let mut j = m - 1\n            ^\n/tmp/tmppfx63v88.swift:23:6: note:\
    \ 'mut' previously declared here\n        let mut i = n - 1\n            ^\n/tmp/tmppfx63v88.swift:25:8:\
    \ error: cannot find 'i' in scope\n        while i >= 0 && j >= 0 {\n        \
    \      ^\n/tmp/tmppfx63v88.swift:25:18: error: cannot find 'j' in scope\n    \
    \    while i >= 0 && j >= 0 {\n                        ^\n/tmp/tmppfx63v88.swift:26:9:\
    \ error: cannot find 'i' in scope\n                if s0[i] == s1[j] {\n     \
    \                 ^\n/tmp/tmppfx63v88.swift:26:18: error: cannot find 'j' in scope\n\
    \                if s0[i] == s1[j] {\n                               ^\n/tmp/tmppfx63v88.swift:27:4:\
    \ error: cannot find 'i' in scope\n                        i -= 1\n          \
    \              ^\n/tmp/tmppfx63v88.swift:28:4: error: cannot find 'j' in scope\n\
    \                        j -= 1\n    "
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.lowercased()\n\ts1 = s1.lowercased()\n\
    \t\n\tlet len0 = s0.count\n\tlet len1 = s1.count\n\t\n\tif len0 == 0 || len1 ==\
    \ 0 {\n\t\treturn len0 == len1\n\t}\n\t\n\tlet maxLen = max(len0, len1)\n\t\n\t\
    for i in 0..<maxLen {\n\t\tif s0[i] == s1[i] {\n\t\t\tcontinue\n\t\t}\n\t\t\n\t\
    \treturn false\n\t}\n\t\n\treturn true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    ) == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\n\
    assert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0:\
    \ \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmptwmdj0eh.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.lowercased()\n        ^~\n/tmp/tmptwmdj0eh.swift:17:2:\
    \ error: cannot assign to value: 's1' is a 'let' constant\n        s1 = s1.lowercased()\n\
    \        ^~\n/tmp/tmptwmdj0eh.swift:29:6: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n         \
    \       if s0[i] == s1[i] {\n                   ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmptwmdj0eh.swift:29:15: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n                if s0[i] == s1[i] {\n                            ^~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\t\n\
    \tlet s0_len = s0.Length\n\tlet s1_len = s1.Length\n\t\n\tif s0_len != s1_len\
    \ {\n\t\treturn false\n\t}\n\t\n\tlet mut i = 0\n\tlet mut j = 0\n\t\n\twhile\
    \ i < s0_len && j < s1_len {\n\t\tif s0[i] != s1[j] {\n\t\t\treturn false\n\t\t\
    }\n\t\t\n\t\ti += 1\n\t\tj += 1\n\t}\n\t\n\treturn i == s0_len\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpuu2853g5.swift:26:10: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n        let mut i =\
    \ 0\n                ^\n/tmp/tmpuu2853g5.swift:26:10: note: join the identifiers\
    \ together\n        let mut i = 0\n            ~~~~^\n            muti\n/tmp/tmpuu2853g5.swift:26:10:\
    \ note: join the identifiers together with camel-case\n        let mut i = 0\n\
    \            ~~~~^\n            mutI\n/tmp/tmpuu2853g5.swift:27:10: error: found\
    \ an unexpected second identifier in constant declaration; is there an accidental\
    \ break?\n        let mut j = 0\n                ^\n/tmp/tmpuu2853g5.swift:27:10:\
    \ note: join the identifiers together\n        let mut j = 0\n            ~~~~^\n\
    \            mutj\n/tmp/tmpuu2853g5.swift:27:10: note: join the identifiers together\
    \ with camel-case\n        let mut j = 0\n            ~~~~^\n            mutJ\n\
    /tmp/tmpuu2853g5.swift:16:2: error: cannot assign to value: 's0' is a 'let' constant\n\
    \        s0 = s0.ToLower()\n        ^~\n/tmp/tmpuu2853g5.swift:16:10: error: value\
    \ of type 'String' has no member 'ToLower'\n        s0 = s0.ToLower()\n      \
    \       ~~ ^~~~~~~\n/tmp/tmpuu2853g5.swift:17:2: error: cannot assign to value:\
    \ 's1' is a 'let' constant\n        s1 = s1.ToLower()\n        ^~\n/tmp/tmpuu2853g5.swift:17:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s1 = s1.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmpuu2853g5.swift:19:18: error: value of type 'String'\
    \ has no member 'Length'\n        let s0_len = s0.Length\n                   \
    \  ~~ ^~~~~~\n/tmp/tmpuu2853g5.swift:20:18: error: value of type 'String' has\
    \ no member 'Length'\n        let s1_len = s1.Length\n                     ~~\
    \ ^~~~~~\n/tmp/tmpuu2853g5.swift:27:6: error: invalid redeclaration of 'mut'\n\
    \        let mut j = 0\n            ^\n/tmp/tmpuu2853g5.swift:26:6: note: 'mut'\
    \ previously declared here\n        let mut i = 0\n            ^\n/tmp/tmpuu2853g5.swift:29:8:\
    \ error: cannot find 'i' in scope\n        while i < s0_len && j < s1_len {\n\
    \              ^\n/tmp/tmpuu2853g5.swift:29:22: error: cannot find 'j' in sco"
  stdout: ''
  timestamp: 1660014255
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    if s0.count != s1.count {\n        return\
    \ false\n    }\n    var i = 0\n    for c0, c1 in zipString(s0, s1) {\n       \
    \ if c0 != c1 {\n            return false\n        }\n        i += 1\n    }\n\
    \    return i == s0.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpvwrc8ubi.swift:20:11: error: expected 'in' after for-each pattern\n\
    \    for c0, c1 in zipString(s0, s1) {\n          ^\n/tmp/tmpvwrc8ubi.swift:20:11:\
    \ error: expected Sequence expression for for-each loop\n    for c0, c1 in zipString(s0,\
    \ s1) {\n          ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.lowercased()\n\ts1 = s1.lowercased()\n\
    \t\n\tlet len0 = s0.count\n\tlet len1 = s1.count\n\t\n\tif len0 != len1 {\n\t\t\
    return false\n\t}\n\t\n\tfor i in 0..<len0 {\n\t\tif s0[i] != s1[i] {\n\t\t\t\
    return false\n\t\t}\n\t}\n\t\n\treturn true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\n\
    assert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpqzpkdrqs.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.lowercased()\n        ^~\n/tmp/tmpqzpkdrqs.swift:17:2:\
    \ error: cannot assign to value: 's1' is a 'let' constant\n        s1 = s1.lowercased()\n\
    \        ^~\n/tmp/tmpqzpkdrqs.swift:27:6: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n         \
    \       if s0[i] != s1[i] {\n                   ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpqzpkdrqs.swift:27:15: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n                if s0[i] != s1[i] {\n                            ^~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\tlet s0_len = s0.count\n\tlet s1_len = s1.count\n\
    \tif s0_len != s1_len {\n\t\treturn false\n\t}\n\tlet s0_char = s0.characters\n\
    \tlet s1_char = s1.characters\n\tfor i in 0..<s0_len {\n\t\tif s0_char[i] != s1_char[i]\
    \ {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpludkq4s9.swift:21:19: error: 'characters' is unavailable: Please\
    \ use String directly\n        let s0_char = s0.characters\n                 \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpludkq4s9.swift:22:19:\
    \ error: 'characters' is unavailable: Please use String directly\n        let\
    \ s1_char = s1.characters\n                         ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpludkq4s9.swift:24:6: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \                if s0_char[i] != s1_char[i] {\n                   ^~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpludkq4s9.swift:24:20:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n                if s0_char[i] != s1_char[i] {\n\
    \                                 ^~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\t\
    let n = s0.Length\n\tlet m = s1.Length\n\tif n < m {\n\t\treturn false\n\t}\n\t\
    for i in 0..<n {\n\t\tif s0[i] != s1[i] {\n\t\t\treturn false\n\t\t}\n\t}\n\t\
    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\", s1: \"\
    dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\") ==\
    \ true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp833e4w_j.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.ToLower()\n        ^~\n/tmp/tmp833e4w_j.swift:16:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s0 = s0.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmp833e4w_j.swift:17:2: error: cannot assign to\
    \ value: 's1' is a 'let' constant\n        s1 = s1.ToLower()\n        ^~\n/tmp/tmp833e4w_j.swift:17:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s1 = s1.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmp833e4w_j.swift:18:13: error: value of type 'String'\
    \ has no member 'Length'\n        let n = s0.Length\n                ~~ ^~~~~~\n\
    /tmp/tmp833e4w_j.swift:19:13: error: value of type 'String' has no member 'Length'\n\
    \        let m = s1.Length\n                ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    if s0.count != s1.count {\n        return\
    \ false\n    }\n    var i = 0\n    for c0, c1 in zipString(s0, s1) {\n       \
    \ if c0 != c1 {\n            return false\n        }\n        i += 1\n    }\n\
    \    return i == s0.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpvwrc8ubi.swift:20:11: error: expected 'in' after for-each pattern\n\
    \    for c0, c1 in zipString(s0, s1) {\n          ^\n/tmp/tmpvwrc8ubi.swift:20:11:\
    \ error: expected Sequence expression for for-each loop\n    for c0, c1 in zipString(s0,\
    \ s1) {\n          ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.lowercased()\n\ts1 = s1.lowercased()\n\
    \t\n\tlet n = s0.count\n\tlet m = s1.count\n\t\n\tif n < m {\n\t\treturn false\n\
    \t}\n\t\n\tfor i in 0..<n {\n\t\tif s0[i] != s1[i] {\n\t\t\treturn false\n\t\t\
    }\n\t}\n\t\n\treturn true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmphcmr9zix.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.lowercased()\n        ^~\n/tmp/tmphcmr9zix.swift:17:2:\
    \ error: cannot assign to value: 's1' is a 'let' constant\n        s1 = s1.lowercased()\n\
    \        ^~\n/tmp/tmphcmr9zix.swift:27:6: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n         \
    \       if s0[i] != s1[i] {\n                   ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmphcmr9zix.swift:27:15: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n                if s0[i] != s1[i] {\n                            ^~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\t\
    if s0.Length != s1.Length {\n\t\treturn false\n\t}\n\tfor i := 0; i < s0.Length;\
    \ i++ {\n\t\tif s0[i] != s1[i] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpkvca__2x.swift:21:9: error: expected type\n        for i := 0;\
    \ i < s0.Length; i++ {\n               ^\n                <#type#>\n/tmp/tmpkvca__2x.swift:21:9:\
    \ error: expected 'in' after for-each pattern\n        for i := 0; i < s0.Length;\
    \ i++ {\n               ^\n/tmp/tmpkvca__2x.swift:21:9: error: expected Sequence\
    \ expression for for-each loop\n        for i := 0; i < s0.Length; i++ {\n   \
    \            ^\n/tmp/tmpkvca__2x.swift:16:2: error: cannot assign to value: 's0'\
    \ is a 'let' constant\n        s0 = s0.ToLower()\n        ^~\n/tmp/tmpkvca__2x.swift:16:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s0 = s0.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmpkvca__2x.swift:17:2: error: cannot assign to\
    \ value: 's1' is a 'let' constant\n        s1 = s1.ToLower()\n        ^~\n/tmp/tmpkvca__2x.swift:17:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s1 = s1.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmpkvca__2x.swift:18:8: error: value of type 'String'\
    \ has no member 'Length'\n        if s0.Length != s1.Length {\n           ~~ ^~~~~~\n\
    /tmp/tmpkvca__2x.swift:18:21: error: value of type 'String' has no member 'Length'\n\
    \        if s0.Length != s1.Length {\n                        ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\t\n\
    \tlet len0 = s0.Length\n\tlet len1 = s1.Length\n\t\n\tif len0 == 0 || len1 ==\
    \ 0 {\n\t\treturn len0 == len1\n\t}\n\t\n\tlet mut i0 = 0\n\tlet mut i1 = 0\n\t\
    \n\twhile i0 < len0 && i1 < len1 {\n\t\tif s0[i0] != s1[i1] {\n\t\t\treturn false\n\
    \t\t}\n\t\t\n\t\ti0 += 1\n\t\ti1 += 1\n\t}\n\t\n\treturn i0 == len0\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp6uauklyq.swift:26:10: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n        let mut i0 =\
    \ 0\n                ^\n/tmp/tmp6uauklyq.swift:26:10: note: join the identifiers\
    \ together\n        let mut i0 = 0\n            ~~~~^~\n            muti0\n/tmp/tmp6uauklyq.swift:26:10:\
    \ note: join the identifiers together with camel-case\n        let mut i0 = 0\n\
    \            ~~~~^~\n            mutI0\n/tmp/tmp6uauklyq.swift:27:10: error: found\
    \ an unexpected second identifier in constant declaration; is there an accidental\
    \ break?\n        let mut i1 = 0\n                ^\n/tmp/tmp6uauklyq.swift:27:10:\
    \ note: join the identifiers together\n        let mut i1 = 0\n            ~~~~^~\n\
    \            muti1\n/tmp/tmp6uauklyq.swift:27:10: note: join the identifiers together\
    \ with camel-case\n        let mut i1 = 0\n            ~~~~^~\n            mutI1\n\
    /tmp/tmp6uauklyq.swift:16:2: error: cannot assign to value: 's0' is a 'let' constant\n\
    \        s0 = s0.ToLower()\n        ^~\n/tmp/tmp6uauklyq.swift:16:10: error: value\
    \ of type 'String' has no member 'ToLower'\n        s0 = s0.ToLower()\n      \
    \       ~~ ^~~~~~~\n/tmp/tmp6uauklyq.swift:17:2: error: cannot assign to value:\
    \ 's1' is a 'let' constant\n        s1 = s1.ToLower()\n        ^~\n/tmp/tmp6uauklyq.swift:17:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s1 = s1.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmp6uauklyq.swift:19:16: error: value of type 'String'\
    \ has no member 'Length'\n        let len0 = s0.Length\n                   ~~\
    \ ^~~~~~\n/tmp/tmp6uauklyq.swift:20:16: error: value of type 'String' has no member\
    \ 'Length'\n        let len1 = s1.Length\n                   ~~ ^~~~~~\n/tmp/tmp6uauklyq.swift:27:6:\
    \ error: invalid redeclaration of 'mut'\n        let mut i1 = 0\n            ^\n\
    /tmp/tmp6uauklyq.swift:26:6: note: 'mut' previously declared here\n        let\
    \ mut i0 = 0\n            ^\n/tmp/tmp6uauklyq.swift:29:8: error: cannot find 'i0'\
    \ in scope\n        while i0 < len0 && i1 < len1 {\n              ^~\n/tmp/tmp6uauklyq.swift:29:21:\
    \ error: cannot find 'i"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 += s0\n\ts1 += s1\n\treturn s0.chars().zip(s1.chars()).all(|(a,\
    \ b)| a == b)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"\
    eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\"\
    , s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\"\
    ) == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmkvdslv5.swift:18:49: error: expected ',' separator\n        return\
    \ s0.chars().zip(s1.chars()).all(|(a, b)| a == b)\n                          \
    \                             ^\n                                            \
    \          ,\n/tmp/tmpmkvdslv5.swift:16:5: error: left side of mutating operator\
    \ isn't mutable: 's0' is a 'let' constant\n        s0 += s0\n        ~~ ^\n/tmp/tmpmkvdslv5.swift:17:5:\
    \ error: left side of mutating operator isn't mutable: 's1' is a 'let' constant\n\
    \        s1 += s1\n        ~~ ^\n/tmp/tmpmkvdslv5.swift:18:40: error: '|' is not\
    \ a prefix unary operator\n        return s0.chars().zip(s1.chars()).all(|(a,\
    \ b)| a == b)\n                                              ^\n/tmp/tmpmkvdslv5.swift:18:47:\
    \ error: '|' is not a postfix unary operator\n        return s0.chars().zip(s1.chars()).all(|(a,\
    \ b)| a == b)\n                                                     ^\n/tmp/tmpmkvdslv5.swift:18:42:\
    \ error: cannot find 'a' in scope\n        return s0.chars().zip(s1.chars()).all(|(a,\
    \ b)| a == b)\n                                                ^\n/tmp/tmpmkvdslv5.swift:18:45:\
    \ error: cannot find 'b' in scope\n        return s0.chars().zip(s1.chars()).all(|(a,\
    \ b)| a == b)\n                                                   ^\n/tmp/tmpmkvdslv5.swift:18:49:\
    \ error: cannot find 'a' in scope\n        return s0.chars().zip(s1.chars()).all(|(a,\
    \ b)| a == b)\n                                                       ^\n/tmp/tmpmkvdslv5.swift:18:54:\
    \ error: cannot find 'b' in scope\n        return s0.chars().zip(s1.chars()).all(|(a,\
    \ b)| a == b)\n                                                            ^\n\
    /tmp/tmpmkvdslv5.swift:18:12: error: value of type 'String' has no member 'chars'\n\
    \        return s0.chars().zip(s1.chars()).all(|(a, b)| a == b)\n            \
    \   ~~ ^~~~~\n/tmp/tmpmkvdslv5.swift:18:27: error: value of type 'String' has\
    \ no member 'chars'\n        return s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n                              ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 += s0\n\ts1 += s1\n\treturn s0.characters.count\
    \ == s1.characters.count &&\n\t\ts0.characters.reduce(true, {$0 || $1})\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpn2uojv2n.swift:16:5: error: left side of mutating operator isn't\
    \ mutable: 's0' is a 'let' constant\n        s0 += s0\n        ~~ ^\n/tmp/tmpn2uojv2n.swift:17:5:\
    \ error: left side of mutating operator isn't mutable: 's1' is a 'let' constant\n\
    \        s1 += s1\n        ~~ ^\n/tmp/tmpn2uojv2n.swift:19:37: error: cannot convert\
    \ value of type 'String.Element' (aka 'Character') to expected argument type 'Bool'\n\
    \                s0.characters.reduce(true, {$0 || $1})\n                    \
    \                              ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.lowercased()\n\ts1 = s1.lowercased()\n\
    \tlet len0 = s0.count\n\tlet len1 = s1.count\n\tif len0 == 0 || len1 == 0 {\n\t\
    \treturn len0 == len1\n\t}\n\tlet maxLen = len0 < len1 ? len0 : len1\n\tfor i\
    \ in 0..<maxLen {\n\t\tif s0[i] != s1[i] {\n\t\t\treturn false\n\t\t}\n\t}\n\t\
    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\", s1: \"\
    dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\") ==\
    \ true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpll43f3cu.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.lowercased()\n        ^~\n/tmp/tmpll43f3cu.swift:17:2:\
    \ error: cannot assign to value: 's1' is a 'let' constant\n        s1 = s1.lowercased()\n\
    \        ^~\n/tmp/tmpll43f3cu.swift:25:6: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n         \
    \       if s0[i] != s1[i] {\n                   ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpll43f3cu.swift:25:15: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n                if s0[i] != s1[i] {\n                            ^~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    if s0.count != s1.count {\n        return\
    \ false\n    }\n    var i = 0\n    for c0, c1 in zipString(s0, s1) {\n       \
    \ if c0 != c1 {\n            return false\n        }\n        i += 1\n    }\n\
    \    return i == s0.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpvwrc8ubi.swift:20:11: error: expected 'in' after for-each pattern\n\
    \    for c0, c1 in zipString(s0, s1) {\n          ^\n/tmp/tmpvwrc8ubi.swift:20:11:\
    \ error: expected Sequence expression for for-each loop\n    for c0, c1 in zipString(s0,\
    \ s1) {\n          ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.lowercased()\n\ts1 = s1.lowercased()\n\
    \tlet n = s0.count\n\tlet m = s1.count\n\tif n == 0 {\n\t\treturn m == 0\n\t}\n\
    \tif m == 0 {\n\t\treturn n == 0\n\t}\n\tlet d0 = s0[n - 1]\n\tlet d1 = s1[m -\
    \ 1]\n\treturn d0 == d1 || d0 == d1 && d1 == d0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\n\
    assert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd053ybbb.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.lowercased()\n        ^~\n/tmp/tmpd053ybbb.swift:17:2:\
    \ error: cannot assign to value: 's1' is a 'let' constant\n        s1 = s1.lowercased()\n\
    \        ^~\n/tmp/tmpd053ybbb.swift:26:11: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        let\
    \ d0 = s0[n - 1]\n                 ^~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpd053ybbb.swift:27:11: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        let d1 = s1[m - 1]\n                 ^~~~~~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014255
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\t\
    s0 = s0.ToUpper()\n\ts1 = s1.ToUpper()\n\ts0 = strings.ToLower(s0)\n\ts1 = strings.ToLower(s1)\n\
    \ts0 = strings.ToUpper(s0)\n\ts1 = strings.ToUpper(s1)\n\treturn s0.Substring(s0.Length\
    \ - s1.Length) == s1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpbt7efebr.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.ToLower()\n        ^~\n/tmp/tmpbt7efebr.swift:16:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s0 = s0.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmpbt7efebr.swift:17:2: error: cannot assign to\
    \ value: 's1' is a 'let' constant\n        s1 = s1.ToLower()\n        ^~\n/tmp/tmpbt7efebr.swift:17:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s1 = s1.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmpbt7efebr.swift:18:2: error: cannot assign to\
    \ value: 's0' is a 'let' constant\n        s0 = s0.ToUpper()\n        ^~\n/tmp/tmpbt7efebr.swift:18:10:\
    \ error: value of type 'String' has no member 'ToUpper'\n        s0 = s0.ToUpper()\n\
    \             ~~ ^~~~~~~\n/tmp/tmpbt7efebr.swift:19:2: error: cannot assign to\
    \ value: 's1' is a 'let' constant\n        s1 = s1.ToUpper()\n        ^~\n/tmp/tmpbt7efebr.swift:19:10:\
    \ error: value of type 'String' has no member 'ToUpper'\n        s1 = s1.ToUpper()\n\
    \             ~~ ^~~~~~~\n/tmp/tmpbt7efebr.swift:20:7: error: cannot find 'strings'\
    \ in scope\n        s0 = strings.ToLower(s0)\n             ^~~~~~~\n/tmp/tmpbt7efebr.swift:20:2:\
    \ error: cannot assign to value: 's0' is a 'let' constant\n        s0 = strings.ToLower(s0)\n\
    \        ^~\n/tmp/tmpbt7efebr.swift:21:7: error: cannot find 'strings' in scope\n\
    \        s1 = strings.ToLower(s1)\n             ^~~~~~~\n/tmp/tmpbt7efebr.swift:21:2:\
    \ error: cannot assign to value: 's1' is a 'let' constant\n        s1 = strings.ToLower(s1)\n\
    \        ^~\n/tmp/tmpbt7efebr.swift:22:7: error: cannot find 'strings' in scope\n\
    \        s0 = strings.ToUpper(s0)\n             ^~~~~~~\n/tmp/tmpbt7efebr.swift:22:2:\
    \ error: cannot assign to value: 's0' is a 'let' constant\n        s0 = strings.ToUpper(s0)\n\
    \        ^~\n/tmp/tmpbt7efebr.swift:23:7: error: cannot find 'strings' in scope\n\
    \        s1 = strings.ToUpper(s1)\n             ^~~~~~~\n/tmp/tmpbt7efebr.swift:23:2:\
    \ error: cannot assign to value: 's1' is a 'let' constant\n        s1 = strings.ToUpper(s1)\n\
    \        ^~\n/tmp/tmpbt7efebr.swift:2"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.lowercased()\n\ts1 = s1.lowercased()\n\
    \t\n\tlet s0_len = s0.count\n\tlet s1_len = s1.count\n\t\n\tif s0_len != s1_len\
    \ {\n\t\treturn false\n\t}\n\t\n\tfor i in 0..<s0_len {\n\t\tif s0[i] != s1[i]\
    \ {\n\t\t\treturn false\n\t\t}\n\t}\n\t\n\treturn true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpoo5zaldm.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.lowercased()\n        ^~\n/tmp/tmpoo5zaldm.swift:17:2:\
    \ error: cannot assign to value: 's1' is a 'let' constant\n        s1 = s1.lowercased()\n\
    \        ^~\n/tmp/tmpoo5zaldm.swift:27:6: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n         \
    \       if s0[i] != s1[i] {\n                   ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpoo5zaldm.swift:27:15: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n                if s0[i] != s1[i] {\n                            ^~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    if s0.count != s1.count {\n        return\
    \ false\n    }\n    var i = 0\n    for c0 := s0[i..].unicodeScalars; c0 != nil;\
    \ c0 = c0?.next {\n        if c0.value != s1[i..].unicodeScalars?.first?.value\
    \ {\n            return false\n        }\n        i += 1\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpkcf8wda0.swift:20:13: error: expected type\n    for c0 := s0[i..].unicodeScalars;\
    \ c0 != nil; c0 = c0?.next {\n            ^\n             <#type#>\n/tmp/tmpkcf8wda0.swift:20:13:\
    \ error: expected 'in' after for-each pattern\n    for c0 := s0[i..].unicodeScalars;\
    \ c0 != nil; c0 = c0?.next {\n            ^\n/tmp/tmpkcf8wda0.swift:20:13: error:\
    \ expected Sequence expression for for-each loop\n    for c0 := s0[i..].unicodeScalars;\
    \ c0 != nil; c0 = c0?.next {\n            ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\tlet s0c = s0.characters\n\tlet s1c = s1.characters\n\
    \t\n\tfor i in 0..<min(s0.count, s1.count) {\n\t\tif s0c[i] != s1c[i] {\n\t\t\t\
    return false\n\t\t}\n\t}\n\t\n\treturn true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\n\
    assert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmib6ztnj.swift:16:15: error: 'characters' is unavailable: Please\
    \ use String directly\n        let s0c = s0.characters\n                     ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpmib6ztnj.swift:17:15:\
    \ error: 'characters' is unavailable: Please use String directly\n        let\
    \ s1c = s1.characters\n                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpmib6ztnj.swift:20:6: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \                if s0c[i] != s1c[i] {\n                   ^~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpmib6ztnj.swift:20:16:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n                if s0c[i] != s1c[i] {\n       \
    \                      ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\tlet len0 = s0.count\n\tlet len1 = s1.count\n\
    \tif len0 != len1 {\n\t\treturn false\n\t}\n\tlet mut i0 = 0\n\tlet mut i1 = 0\n\
    \twhile i0 < len0 && i1 < len1 {\n\t\tif s0[i0] != s1[i1] {\n\t\t\treturn false\n\
    \t\t}\n\t\ti0 += 1\n\t\ti1 += 1\n\t}\n\treturn i0 == len0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_g8tm2xq.swift:21:10: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n        let mut i0 =\
    \ 0\n                ^\n/tmp/tmp_g8tm2xq.swift:21:10: note: join the identifiers\
    \ together\n        let mut i0 = 0\n            ~~~~^~\n            muti0\n/tmp/tmp_g8tm2xq.swift:21:10:\
    \ note: join the identifiers together with camel-case\n        let mut i0 = 0\n\
    \            ~~~~^~\n            mutI0\n/tmp/tmp_g8tm2xq.swift:22:10: error: found\
    \ an unexpected second identifier in constant declaration; is there an accidental\
    \ break?\n        let mut i1 = 0\n                ^\n/tmp/tmp_g8tm2xq.swift:22:10:\
    \ note: join the identifiers together\n        let mut i1 = 0\n            ~~~~^~\n\
    \            muti1\n/tmp/tmp_g8tm2xq.swift:22:10: note: join the identifiers together\
    \ with camel-case\n        let mut i1 = 0\n            ~~~~^~\n            mutI1\n\
    /tmp/tmp_g8tm2xq.swift:22:6: error: invalid redeclaration of 'mut'\n        let\
    \ mut i1 = 0\n            ^\n/tmp/tmp_g8tm2xq.swift:21:6: note: 'mut' previously\
    \ declared here\n        let mut i0 = 0\n            ^\n/tmp/tmp_g8tm2xq.swift:23:8:\
    \ error: cannot find 'i0' in scope\n        while i0 < len0 && i1 < len1 {\n \
    \             ^~\n/tmp/tmp_g8tm2xq.swift:23:21: error: cannot find 'i1' in scope\n\
    \        while i0 < len0 && i1 < len1 {\n                           ^~\n/tmp/tmp_g8tm2xq.swift:24:9:\
    \ error: cannot find 'i0' in scope\n                if s0[i0] != s1[i1] {\n  \
    \                    ^~\n/tmp/tmp_g8tm2xq.swift:24:19: error: cannot find 'i1'\
    \ in scope\n                if s0[i0] != s1[i1] {\n                          \
    \      ^~\n/tmp/tmp_g8tm2xq.swift:27:3: error: cannot find 'i0' in scope\n   \
    \             i0 += 1\n                ^~\n/tmp/tmp_g8tm2xq.swift:28:3: error:\
    \ cannot find 'i1' in scope\n                i1 += 1\n                ^~\n/tmp/tmp_g8tm2xq.swift:30:9:\
    \ error: cannot find 'i0' in scope\n        return i0 == len0\n              \
    \ ^~\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.lowercased()\n\ts1 = s1.lowercased()\n\
    \t\n\tlet s0_len = s0.count\n\tlet s1_len = s1.count\n\t\n\tif s0_len != s1_len\
    \ {\n\t\treturn false\n\t}\n\t\n\tfor i in 0..<s0_len {\n\t\tif s0[i] != s1[i]\
    \ {\n\t\t\treturn false\n\t\t}\n\t}\n\t\n\treturn true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpoo5zaldm.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.lowercased()\n        ^~\n/tmp/tmpoo5zaldm.swift:17:2:\
    \ error: cannot assign to value: 's1' is a 'let' constant\n        s1 = s1.lowercased()\n\
    \        ^~\n/tmp/tmpoo5zaldm.swift:27:6: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n         \
    \       if s0[i] != s1[i] {\n                   ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpoo5zaldm.swift:27:15: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n                if s0[i] != s1[i] {\n                            ^~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\tlet s0c = s0.characters\n\tlet s1c = s1.characters\n\
    \t\n\tfor i in 0..<min(s0c.count, s1c.count) {\n\t\tif s0c[i] != s1c[i] {\n\t\t\
    \treturn false\n\t\t}\n\t}\n\t\n\treturn true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\n\
    assert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpp0k84loz.swift:16:15: error: 'characters' is unavailable: Please\
    \ use String directly\n        let s0c = s0.characters\n                     ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpp0k84loz.swift:17:15:\
    \ error: 'characters' is unavailable: Please use String directly\n        let\
    \ s1c = s1.characters\n                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpp0k84loz.swift:20:6: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \                if s0c[i] != s1c[i] {\n                   ^~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpp0k84loz.swift:20:16:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n                if s0c[i] != s1c[i] {\n       \
    \                      ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\t\n\
    \tlet len0 = s0.Length\n\tlet len1 = s1.Length\n\t\n\tif len0 == 0 || len1 ==\
    \ 0 {\n\t\treturn true\n\t}\n\t\n\tlet mut i = 0\n\tlet mut j = 0\n\t\n\twhile\
    \ i < len0 && j < len1 {\n\t\tif s0[i] == s1[j] {\n\t\t\ti += 1\n\t\t\tj += 1\n\
    \t\t} else {\n\t\t\tbreak\n\t\t}\n\t}\n\t\n\treturn i == len0 && j == len1\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp33pkzext.swift:26:10: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n        let mut i =\
    \ 0\n                ^\n/tmp/tmp33pkzext.swift:26:10: note: join the identifiers\
    \ together\n        let mut i = 0\n            ~~~~^\n            muti\n/tmp/tmp33pkzext.swift:26:10:\
    \ note: join the identifiers together with camel-case\n        let mut i = 0\n\
    \            ~~~~^\n            mutI\n/tmp/tmp33pkzext.swift:27:10: error: found\
    \ an unexpected second identifier in constant declaration; is there an accidental\
    \ break?\n        let mut j = 0\n                ^\n/tmp/tmp33pkzext.swift:27:10:\
    \ note: join the identifiers together\n        let mut j = 0\n            ~~~~^\n\
    \            mutj\n/tmp/tmp33pkzext.swift:27:10: note: join the identifiers together\
    \ with camel-case\n        let mut j = 0\n            ~~~~^\n            mutJ\n\
    /tmp/tmp33pkzext.swift:16:2: error: cannot assign to value: 's0' is a 'let' constant\n\
    \        s0 = s0.ToLower()\n        ^~\n/tmp/tmp33pkzext.swift:16:10: error: value\
    \ of type 'String' has no member 'ToLower'\n        s0 = s0.ToLower()\n      \
    \       ~~ ^~~~~~~\n/tmp/tmp33pkzext.swift:17:2: error: cannot assign to value:\
    \ 's1' is a 'let' constant\n        s1 = s1.ToLower()\n        ^~\n/tmp/tmp33pkzext.swift:17:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s1 = s1.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmp33pkzext.swift:19:16: error: value of type 'String'\
    \ has no member 'Length'\n        let len0 = s0.Length\n                   ~~\
    \ ^~~~~~\n/tmp/tmp33pkzext.swift:20:16: error: value of type 'String' has no member\
    \ 'Length'\n        let len1 = s1.Length\n                   ~~ ^~~~~~\n/tmp/tmp33pkzext.swift:27:6:\
    \ error: invalid redeclaration of 'mut'\n        let mut j = 0\n            ^\n\
    /tmp/tmp33pkzext.swift:26:6: note: 'mut' previously declared here\n        let\
    \ mut i = 0\n            ^\n/tmp/tmp33pkzext.swift:29:8: error: cannot find 'i'\
    \ in scope\n        while i < len0 && j < len1 {\n              ^\n/tmp/tmp33pkzext.swift:29:20:\
    \ error: cannot find 'j' in scope\n        w"
  stdout: ''
  timestamp: 1660014255
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\tlet s0_len = s0.count\n\tlet s1_len = s1.count\n\
    \tif s0_len != s1_len {\n\t\treturn false\n\t}\n\tfor i in 0..<s0_len {\n\t\t\
    if s0[i] != s1[i] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpy7srm9yg.swift:22:6: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n                if\
    \ s0[i] != s1[i] {\n                   ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpy7srm9yg.swift:22:15: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \                if s0[i] != s1[i] {\n                            ^~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.lowercased()\n\ts1 = s1.lowercased()\n\
    \t\n\tlet s0Chars = s0.characters\n\tlet s1Chars = s1.characters\n\t\n\tfor i\
    \ in 0..<min(s0.count, s1.count) {\n\t\tif s0Chars[i] != s1Chars[i] {\n\t\t\t\
    return false\n\t\t}\n\t}\n\t\n\treturn true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\n\
    assert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpp6oqbq7p.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.lowercased()\n        ^~\n/tmp/tmpp6oqbq7p.swift:17:2:\
    \ error: cannot assign to value: 's1' is a 'let' constant\n        s1 = s1.lowercased()\n\
    \        ^~\n/tmp/tmpp6oqbq7p.swift:19:19: error: 'characters' is unavailable:\
    \ Please use String directly\n        let s0Chars = s0.characters\n          \
    \               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpp6oqbq7p.swift:20:19: error: 'characters' is unavailable: Please\
    \ use String directly\n        let s1Chars = s1.characters\n                 \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpp6oqbq7p.swift:23:6:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n                if s0Chars[i] != s1Chars[i] {\n\
    \                   ^~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpp6oqbq7p.swift:23:20: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \                if s0Chars[i] != s1Chars[i] {\n                             \
    \    ^~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n"
  stdout: ''
  timestamp: 1660014255
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.lowercased()\n\ts1 = s1.lowercased()\n\
    \t\n\tlet n0 = s0.count\n\tlet n1 = s1.count\n\t\n\tif n0 != n1 {\n\t\treturn\
    \ false\n\t}\n\t\n\tfor i in 0..<n0 {\n\t\tif s0[i] != s1[i] {\n\t\t\treturn false\n\
    \t\t}\n\t}\n\t\n\treturn true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmph8lj9mbp.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.lowercased()\n        ^~\n/tmp/tmph8lj9mbp.swift:17:2:\
    \ error: cannot assign to value: 's1' is a 'let' constant\n        s1 = s1.lowercased()\n\
    \        ^~\n/tmp/tmph8lj9mbp.swift:27:6: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n         \
    \       if s0[i] != s1[i] {\n                   ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmph8lj9mbp.swift:27:15: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n                if s0[i] != s1[i] {\n                            ^~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\t\n\
    \tlet len0 = s0.Length\n\tlet len1 = s1.Length\n\t\n\tif len0 == 0 || len1 ==\
    \ 0 {\n\t\treturn len0 == len1\n\t}\n\t\n\tlet mut i0 = 0\n\tlet mut i1 = 0\n\t\
    \n\twhile i0 < len0 && i1 < len1 {\n\t\tif s0[i0] != s1[i1] {\n\t\t\treturn false\n\
    \t\t}\n\t\t\n\t\ti0 += 1\n\t\ti1 += 1\n\t}\n\t\n\treturn i0 == len0 && i1 == len1\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmplzzmq8fd.swift:26:10: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n        let mut i0 =\
    \ 0\n                ^\n/tmp/tmplzzmq8fd.swift:26:10: note: join the identifiers\
    \ together\n        let mut i0 = 0\n            ~~~~^~\n            muti0\n/tmp/tmplzzmq8fd.swift:26:10:\
    \ note: join the identifiers together with camel-case\n        let mut i0 = 0\n\
    \            ~~~~^~\n            mutI0\n/tmp/tmplzzmq8fd.swift:27:10: error: found\
    \ an unexpected second identifier in constant declaration; is there an accidental\
    \ break?\n        let mut i1 = 0\n                ^\n/tmp/tmplzzmq8fd.swift:27:10:\
    \ note: join the identifiers together\n        let mut i1 = 0\n            ~~~~^~\n\
    \            muti1\n/tmp/tmplzzmq8fd.swift:27:10: note: join the identifiers together\
    \ with camel-case\n        let mut i1 = 0\n            ~~~~^~\n            mutI1\n\
    /tmp/tmplzzmq8fd.swift:16:2: error: cannot assign to value: 's0' is a 'let' constant\n\
    \        s0 = s0.ToLower()\n        ^~\n/tmp/tmplzzmq8fd.swift:16:10: error: value\
    \ of type 'String' has no member 'ToLower'\n        s0 = s0.ToLower()\n      \
    \       ~~ ^~~~~~~\n/tmp/tmplzzmq8fd.swift:17:2: error: cannot assign to value:\
    \ 's1' is a 'let' constant\n        s1 = s1.ToLower()\n        ^~\n/tmp/tmplzzmq8fd.swift:17:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s1 = s1.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmplzzmq8fd.swift:19:16: error: value of type 'String'\
    \ has no member 'Length'\n        let len0 = s0.Length\n                   ~~\
    \ ^~~~~~\n/tmp/tmplzzmq8fd.swift:20:16: error: value of type 'String' has no member\
    \ 'Length'\n        let len1 = s1.Length\n                   ~~ ^~~~~~\n/tmp/tmplzzmq8fd.swift:27:6:\
    \ error: invalid redeclaration of 'mut'\n        let mut i1 = 0\n            ^\n\
    /tmp/tmplzzmq8fd.swift:26:6: note: 'mut' previously declared here\n        let\
    \ mut i0 = 0\n            ^\n/tmp/tmplzzmq8fd.swift:29:8: error: cannot find 'i0'\
    \ in scope\n        while i0 < len0 && i1 < len1 {\n              ^~\n/tmp/tmplzzmq8fd.swift:29:21:\
    \ error: cannot find 'i"
  stdout: ''
  timestamp: 1660014255
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\t\n\
    \tlet s0c = s0.ToCharArray()\n\tlet s1c = s1.ToCharArray()\n\t\n\tfor i in 0..<s0c.count\
    \ {\n\t\tif s0c[i] != s1c[i] {\n\t\t\treturn false\n\t\t}\n\t}\n\t\n\treturn true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp073plhc5.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.ToLower()\n        ^~\n/tmp/tmp073plhc5.swift:16:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s0 = s0.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmp073plhc5.swift:17:2: error: cannot assign to\
    \ value: 's1' is a 'let' constant\n        s1 = s1.ToLower()\n        ^~\n/tmp/tmp073plhc5.swift:17:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s1 = s1.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmp073plhc5.swift:19:15: error: value of type 'String'\
    \ has no member 'ToCharArray'\n        let s0c = s0.ToCharArray()\n          \
    \        ~~ ^~~~~~~~~~~\n/tmp/tmp073plhc5.swift:20:15: error: value of type 'String'\
    \ has no member 'ToCharArray'\n        let s1c = s1.ToCharArray()\n          \
    \        ~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014255
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\t\
    s0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\
    \ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\
    \ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\
    \ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\
    \ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\
    \ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\
    \ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\
    \ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\
    \ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\
    \ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\
    \ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\
    \ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\
    \ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\
    \ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\
    \ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\
    \ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\n\
    assert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpwn68th3e.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.ToLower()\n        ^~\n/tmp/tmpwn68th3e.swift:16:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s0 = s0.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmpwn68th3e.swift:17:2: error: cannot assign to\
    \ value: 's1' is a 'let' constant\n        s1 = s1.ToLower()\n        ^~\n/tmp/tmpwn68th3e.swift:17:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s1 = s1.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmpwn68th3e.swift:18:2: error: cannot assign to\
    \ value: 's0' is a 'let' constant\n        s0 = s0.ToLower()\n        ^~\n/tmp/tmpwn68th3e.swift:18:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s0 = s0.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmpwn68th3e.swift:19:2: error: cannot assign to\
    \ value: 's1' is a 'let' constant\n        s1 = s1.ToLower()\n        ^~\n/tmp/tmpwn68th3e.swift:19:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s1 = s1.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmpwn68th3e.swift:20:2: error: cannot assign to\
    \ value: 's0' is a 'let' constant\n        s0 = s0.ToLower()\n        ^~\n/tmp/tmpwn68th3e.swift:20:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s0 = s0.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmpwn68th3e.swift:21:2: error: cannot assign to\
    \ value: 's1' is a 'let' constant\n        s1 = s1.ToLower()\n        ^~\n/tmp/tmpwn68th3e.swift:21:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s1 = s1.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmpwn68th3e.swift:22:2: error: cannot assign to\
    \ value: 's0' is a 'let' constant\n        s0 = s0.ToLower()\n        ^~\n/tmp/tmpwn68th3e.swift:22:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s0 = s0.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmpwn68th3e.swift:23:2: error: cannot assign to\
    \ value: 's1' is a 'let' constant\n        s1 = s1.ToLower()\n        ^~\n/tmp/tmpwn68th3e.swift:23:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s1 = s1.ToLower()\n\
    \             ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014255
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    if s0.count != s1.count {\n        return\
    \ false\n    }\n    var i = 0\n    for c0, c1 in zipString(s0, s1) {\n       \
    \ if c0 != c1 {\n            return false\n        }\n        i += 1\n    }\n\
    \    return i == s0.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpvwrc8ubi.swift:20:11: error: expected 'in' after for-each pattern\n\
    \    for c0, c1 in zipString(s0, s1) {\n          ^\n/tmp/tmpvwrc8ubi.swift:20:11:\
    \ error: expected Sequence expression for for-each loop\n    for c0, c1 in zipString(s0,\
    \ s1) {\n          ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    if s0.count != s1.count {\n        return\
    \ false\n    }\n    var i = 0\n    for c0, c1 in zipString(s0, s1) {\n       \
    \ if c0 != c1 {\n            return false\n        }\n        i += 1\n    }\n\
    \    return i == s0.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpvwrc8ubi.swift:20:11: error: expected 'in' after for-each pattern\n\
    \    for c0, c1 in zipString(s0, s1) {\n          ^\n/tmp/tmpvwrc8ubi.swift:20:11:\
    \ error: expected Sequence expression for for-each loop\n    for c0, c1 in zipString(s0,\
    \ s1) {\n          ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\t\
    if s0.Length != s1.Length {\n\t\treturn false\n\t}\n\tfor i := 0; i < s0.Length;\
    \ i++ {\n\t\tif s0[i] != s1[i] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpkvca__2x.swift:21:9: error: expected type\n        for i := 0;\
    \ i < s0.Length; i++ {\n               ^\n                <#type#>\n/tmp/tmpkvca__2x.swift:21:9:\
    \ error: expected 'in' after for-each pattern\n        for i := 0; i < s0.Length;\
    \ i++ {\n               ^\n/tmp/tmpkvca__2x.swift:21:9: error: expected Sequence\
    \ expression for for-each loop\n        for i := 0; i < s0.Length; i++ {\n   \
    \            ^\n/tmp/tmpkvca__2x.swift:16:2: error: cannot assign to value: 's0'\
    \ is a 'let' constant\n        s0 = s0.ToLower()\n        ^~\n/tmp/tmpkvca__2x.swift:16:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s0 = s0.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmpkvca__2x.swift:17:2: error: cannot assign to\
    \ value: 's1' is a 'let' constant\n        s1 = s1.ToLower()\n        ^~\n/tmp/tmpkvca__2x.swift:17:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s1 = s1.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmpkvca__2x.swift:18:8: error: value of type 'String'\
    \ has no member 'Length'\n        if s0.Length != s1.Length {\n           ~~ ^~~~~~\n\
    /tmp/tmpkvca__2x.swift:18:21: error: value of type 'String' has no member 'Length'\n\
    \        if s0.Length != s1.Length {\n                        ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\t\n\
    \tlet n = s0.Length\n\tlet m = s1.Length\n\t\n\tif n < m {\n\t\treturn false\n\
    \t}\n\t\n\tfor i in 0..<n {\n\t\tif s0[i] != s1[i] {\n\t\t\treturn false\n\t\t\
    }\n\t}\n\t\n\treturn true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpccum87pf.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.ToLower()\n        ^~\n/tmp/tmpccum87pf.swift:16:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s0 = s0.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmpccum87pf.swift:17:2: error: cannot assign to\
    \ value: 's1' is a 'let' constant\n        s1 = s1.ToLower()\n        ^~\n/tmp/tmpccum87pf.swift:17:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s1 = s1.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmpccum87pf.swift:19:13: error: value of type 'String'\
    \ has no member 'Length'\n        let n = s0.Length\n                ~~ ^~~~~~\n\
    /tmp/tmpccum87pf.swift:20:13: error: value of type 'String' has no member 'Length'\n\
    \        let m = s1.Length\n                ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014255
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\t\n\
    \tlet n = s0.Length\n\tlet m = s1.Length\n\t\n\tif n < m {\n\t\treturn false\n\
    \t}\n\t\n\tfor i in 0..<n {\n\t\tif s0[i] != s1[i] {\n\t\t\treturn false\n\t\t\
    }\n\t}\n\t\n\treturn true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpccum87pf.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.ToLower()\n        ^~\n/tmp/tmpccum87pf.swift:16:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s0 = s0.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmpccum87pf.swift:17:2: error: cannot assign to\
    \ value: 's1' is a 'let' constant\n        s1 = s1.ToLower()\n        ^~\n/tmp/tmpccum87pf.swift:17:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s1 = s1.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmpccum87pf.swift:19:13: error: value of type 'String'\
    \ has no member 'Length'\n        let n = s0.Length\n                ~~ ^~~~~~\n\
    /tmp/tmpccum87pf.swift:20:13: error: value of type 'String' has no member 'Length'\n\
    \        let m = s1.Length\n                ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014255
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\t\n\
    \tlet len0 = s0.Length\n\tlet len1 = s1.Length\n\t\n\tif len0 == 0 || len1 ==\
    \ 0 {\n\t\treturn true\n\t}\n\t\n\tlet mut i0 = 0\n\tlet mut i1 = 0\n\tlet mut\
    \ same = true\n\t\n\twhile i0 < len0 && i1 < len1 {\n\t\tif s0[i0] != s1[i1] {\n\
    \t\t\tsame = false\n\t\t\tbreak\n\t\t}\n\t\ti0 += 1\n\t\ti1 += 1\n\t}\n\t\n\t\
    return same\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\", s1: \"\
    dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\") ==\
    \ true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpcyfeu6z1.swift:26:10: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n        let mut i0 =\
    \ 0\n                ^\n/tmp/tmpcyfeu6z1.swift:26:10: note: join the identifiers\
    \ together\n        let mut i0 = 0\n            ~~~~^~\n            muti0\n/tmp/tmpcyfeu6z1.swift:26:10:\
    \ note: join the identifiers together with camel-case\n        let mut i0 = 0\n\
    \            ~~~~^~\n            mutI0\n/tmp/tmpcyfeu6z1.swift:27:10: error: found\
    \ an unexpected second identifier in constant declaration; is there an accidental\
    \ break?\n        let mut i1 = 0\n                ^\n/tmp/tmpcyfeu6z1.swift:27:10:\
    \ note: join the identifiers together\n        let mut i1 = 0\n            ~~~~^~\n\
    \            muti1\n/tmp/tmpcyfeu6z1.swift:27:10: note: join the identifiers together\
    \ with camel-case\n        let mut i1 = 0\n            ~~~~^~\n            mutI1\n\
    /tmp/tmpcyfeu6z1.swift:28:10: error: found an unexpected second identifier in\
    \ constant declaration; is there an accidental break?\n        let mut same =\
    \ true\n                ^\n/tmp/tmpcyfeu6z1.swift:28:10: note: join the identifiers\
    \ together\n        let mut same = true\n            ~~~~^~~~\n            mutsame\n\
    /tmp/tmpcyfeu6z1.swift:28:10: note: join the identifiers together with camel-case\n\
    \        let mut same = true\n            ~~~~^~~~\n            mutSame\n/tmp/tmpcyfeu6z1.swift:16:2:\
    \ error: cannot assign to value: 's0' is a 'let' constant\n        s0 = s0.ToLower()\n\
    \        ^~\n/tmp/tmpcyfeu6z1.swift:16:10: error: value of type 'String' has no\
    \ member 'ToLower'\n        s0 = s0.ToLower()\n             ~~ ^~~~~~~\n/tmp/tmpcyfeu6z1.swift:17:2:\
    \ error: cannot assign to value: 's1' is a 'let' constant\n        s1 = s1.ToLower()\n\
    \        ^~\n/tmp/tmpcyfeu6z1.swift:17:10: error: value of type 'String' has no\
    \ member 'ToLower'\n        s1 = s1.ToLower()\n             ~~ ^~~~~~~\n/tmp/tmpcyfeu6z1.swift:19:16:\
    \ error: value of type 'String' has no member 'Length'\n        let len0 = s0.Length\n\
    \                   ~~ ^~~~~~\n/tmp/tmpcyfeu6z1.swift:20:16: error: value of type\
    \ 'Str"
  stdout: ''
  timestamp: 1660014255
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\tlet s0_len = s0.count\n\tlet s1_len = s1.count\n\
    \tif s0_len == 0 || s1_len == 0 {\n\t\treturn false\n\t}\n\t\n\tlet s1_char =\
    \ s1.characters()\n\tlet s0_char = s0.characters()\n\t\n\tfor i in 0..<s0_len\
    \ {\n\t\tif s0_char[i] != s1_char[i] {\n\t\t\treturn false\n\t\t}\n\t}\n\t\n\t\
    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\", s1: \"\
    dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\") ==\
    \ true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpy85j0moq.swift:22:19: error: cannot call value of non-function\
    \ type 'String'\n        let s1_char = s1.characters()\n                     \
    \    ^         ~~\n                                   \n/tmp/tmpy85j0moq.swift:23:19:\
    \ error: cannot call value of non-function type 'String'\n        let s0_char\
    \ = s0.characters()\n                         ^         ~~\n                 \
    \                  \n"
  stdout: ''
  timestamp: 1660014255
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\t\n\
    \tlet len0 = s0.Length\n\tlet len1 = s1.Length\n\t\n\tif len0 != len1 {\n\t\t\
    return false\n\t}\n\t\n\tfor i in 0..<len0 {\n\t\tif s0[i] != s1[i] {\n\t\t\t\
    return false\n\t\t}\n\t}\n\t\n\treturn true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\n\
    assert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmprok1rtgz.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.ToLower()\n        ^~\n/tmp/tmprok1rtgz.swift:16:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s0 = s0.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmprok1rtgz.swift:17:2: error: cannot assign to\
    \ value: 's1' is a 'let' constant\n        s1 = s1.ToLower()\n        ^~\n/tmp/tmprok1rtgz.swift:17:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s1 = s1.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmprok1rtgz.swift:19:16: error: value of type 'String'\
    \ has no member 'Length'\n        let len0 = s0.Length\n                   ~~\
    \ ^~~~~~\n/tmp/tmprok1rtgz.swift:20:16: error: value of type 'String' has no member\
    \ 'Length'\n        let len1 = s1.Length\n                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.lowercased()\n\ts1 = s1.lowercased()\n\
    \tlet len0 = s0.count\n\tlet len1 = s1.count\n\tfor i in 0..<min(len0, len1) {\n\
    \t\tif s0[i] != s1[i] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn len0 == len1\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp4gew28sf.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.lowercased()\n        ^~\n/tmp/tmp4gew28sf.swift:17:2:\
    \ error: cannot assign to value: 's1' is a 'let' constant\n        s1 = s1.lowercased()\n\
    \        ^~\n/tmp/tmp4gew28sf.swift:21:6: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n         \
    \       if s0[i] != s1[i] {\n                   ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmp4gew28sf.swift:21:15: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n                if s0[i] != s1[i] {\n                            ^~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.lowercased()\n\ts1 = s1.lowercased()\n\
    \tlet n = s0.count\n\tlet m = s1.count\n\tfor i in 0..<n {\n\t\tif s0[i] != s1[i]\
    \ {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmps2svu_tl.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.lowercased()\n        ^~\n/tmp/tmps2svu_tl.swift:17:2:\
    \ error: cannot assign to value: 's1' is a 'let' constant\n        s1 = s1.lowercased()\n\
    \        ^~\n/tmp/tmps2svu_tl.swift:21:6: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n         \
    \       if s0[i] != s1[i] {\n                   ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmps2svu_tl.swift:21:15: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n                if s0[i] != s1[i] {\n                            ^~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.lowercased()\n\ts1 = s1.lowercased()\n\
    \t\n\tlet n = s0.count\n\tlet m = s1.count\n\t\n\tfor i in 0..<n {\n\t\tif s0[i]\
    \ != s1[i] {\n\t\t\treturn false\n\t\t}\n\t}\n\t\n\treturn true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpscvxnmf4.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.lowercased()\n        ^~\n/tmp/tmpscvxnmf4.swift:17:2:\
    \ error: cannot assign to value: 's1' is a 'let' constant\n        s1 = s1.lowercased()\n\
    \        ^~\n/tmp/tmpscvxnmf4.swift:23:6: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n         \
    \       if s0[i] != s1[i] {\n                   ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpscvxnmf4.swift:23:15: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n                if s0[i] != s1[i] {\n                            ^~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014255
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\tlet s0s = s0.characters\n\tlet s1s = s1.characters\n\
    \t\n\tfor c0, c1 in zip (s0s, s1s) {\n\t\tif c0 != c1 {\n\t\t\treturn false\n\t\
    \t}\n\t}\n\t\n\treturn true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9e1ff4lq.swift:19:8: error: expected 'in' after for-each pattern\n\
    \        for c0, c1 in zip (s0s, s1s) {\n              ^\n/tmp/tmp9e1ff4lq.swift:19:8:\
    \ error: expected Sequence expression for for-each loop\n        for c0, c1 in\
    \ zip (s0s, s1s) {\n              ^\n/tmp/tmp9e1ff4lq.swift:16:15: error: 'characters'\
    \ is unavailable: Please use String directly\n        let s0s = s0.characters\n\
    \                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp9e1ff4lq.swift:17:15: error: 'characters' is unavailable: Please\
    \ use String directly\n        let s1s = s1.characters\n                     ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014255
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.lowercased()\n\ts1 = s1.lowercased()\n\
    \tlet n0 = s0.count\n\tlet n1 = s1.count\n\tif n0 == 0 || n1 == 0 {\n\t\treturn\
    \ n0 == n1\n\t}\n\tlet mut i = n0\n\tlet mut j = n1\n\twhile i > 0 && j > 0 {\n\
    \t\tif s0[i] != s1[j] {\n\t\t\treturn false\n\t\t}\n\t\ti -= 1\n\t\tj -= 1\n\t\
    }\n\treturn i == 0 && j == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp22gb83yr.swift:23:10: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n        let mut i =\
    \ n0\n                ^\n/tmp/tmp22gb83yr.swift:23:10: note: join the identifiers\
    \ together\n        let mut i = n0\n            ~~~~^\n            muti\n/tmp/tmp22gb83yr.swift:23:10:\
    \ note: join the identifiers together with camel-case\n        let mut i = n0\n\
    \            ~~~~^\n            mutI\n/tmp/tmp22gb83yr.swift:24:10: error: found\
    \ an unexpected second identifier in constant declaration; is there an accidental\
    \ break?\n        let mut j = n1\n                ^\n/tmp/tmp22gb83yr.swift:24:10:\
    \ note: join the identifiers together\n        let mut j = n1\n            ~~~~^\n\
    \            mutj\n/tmp/tmp22gb83yr.swift:24:10: note: join the identifiers together\
    \ with camel-case\n        let mut j = n1\n            ~~~~^\n            mutJ\n\
    /tmp/tmp22gb83yr.swift:16:2: error: cannot assign to value: 's0' is a 'let' constant\n\
    \        s0 = s0.lowercased()\n        ^~\n/tmp/tmp22gb83yr.swift:17:2: error:\
    \ cannot assign to value: 's1' is a 'let' constant\n        s1 = s1.lowercased()\n\
    \        ^~\n/tmp/tmp22gb83yr.swift:24:6: error: invalid redeclaration of 'mut'\n\
    \        let mut j = n1\n            ^\n/tmp/tmp22gb83yr.swift:23:6: note: 'mut'\
    \ previously declared here\n        let mut i = n0\n            ^\n/tmp/tmp22gb83yr.swift:25:8:\
    \ error: cannot find 'i' in scope\n        while i > 0 && j > 0 {\n          \
    \    ^\n/tmp/tmp22gb83yr.swift:25:17: error: cannot find 'j' in scope\n      \
    \  while i > 0 && j > 0 {\n                       ^\n/tmp/tmp22gb83yr.swift:26:9:\
    \ error: cannot find 'i' in scope\n                if s0[i] != s1[j] {\n     \
    \                 ^\n/tmp/tmp22gb83yr.swift:26:18: error: cannot find 'j' in scope\n\
    \                if s0[i] != s1[j] {\n                               ^\n/tmp/tmp22gb83yr.swift:29:3:\
    \ error: cannot find 'i' in scope\n                i -= 1\n                ^\n\
    /tmp/tmp22gb83yr.swift:30:3: error: cannot find 'j' in scope\n               \
    \ j -= 1\n                ^\n/tmp/tmp22gb83yr.swift:32:9: error: can"
  stdout: ''
  timestamp: 1660014255
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.lowercased()\n\ts1 = s1.lowercased()\n\
    \tlet n = s0.count\n\tlet m = s1.count\n\tfor i in 0..<n {\n\t\tif s0[i] != s1[i]\
    \ {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmps2svu_tl.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.lowercased()\n        ^~\n/tmp/tmps2svu_tl.swift:17:2:\
    \ error: cannot assign to value: 's1' is a 'let' constant\n        s1 = s1.lowercased()\n\
    \        ^~\n/tmp/tmps2svu_tl.swift:21:6: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n         \
    \       if s0[i] != s1[i] {\n                   ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmps2svu_tl.swift:21:15: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n                if s0[i] != s1[i] {\n                            ^~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\tlet s0c = s0.characters\n\tlet s1c = s1.characters\n\
    \tlet n = s0c.count\n\tlet m = s1c.count\n\tfor i in 0..<n {\n\t\tif s0c[i] !=\
    \ s1c[i] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpojt8ewhf.swift:16:15: error: 'characters' is unavailable: Please\
    \ use String directly\n        let s0c = s0.characters\n                     ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpojt8ewhf.swift:17:15:\
    \ error: 'characters' is unavailable: Please use String directly\n        let\
    \ s1c = s1.characters\n                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpojt8ewhf.swift:21:6: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \                if s0c[i] != s1c[i] {\n                   ^~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpojt8ewhf.swift:21:16:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n                if s0c[i] != s1c[i] {\n       \
    \                      ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpojt8ewhf.swift:19:6: warning: initialization\
    \ of immutable value 'm' was never used; consider replacing with assignment to\
    \ '_' or removing it\n        let m = s1c.count\n        ~~~~^\n        _\n"
  stdout: ''
  timestamp: 1660014255
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    if s0.count != s1.count {\n        return\
    \ false\n    }\n    var i = 0\n    for c0, c1 in zipString(s0, s1) {\n       \
    \ if c0 != c1 {\n            return false\n        }\n        i += 1\n    }\n\
    \    return i == s0.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpvwrc8ubi.swift:20:11: error: expected 'in' after for-each pattern\n\
    \    for c0, c1 in zipString(s0, s1) {\n          ^\n/tmp/tmpvwrc8ubi.swift:20:11:\
    \ error: expected Sequence expression for for-each loop\n    for c0, c1 in zipString(s0,\
    \ s1) {\n          ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.lowercased()\n\ts1 = s1.lowercased()\n\
    \tlet n = s0.count\n\tlet m = s1.count\n\tif n == 0 || m == 0 {\n\t\treturn n\
    \ == m\n\t}\n\tlet mut i = n - 1\n\tlet mut j = m - 1\n\twhile i >= 0 && j >=\
    \ 0 {\n\t\tif s0[i] == s1[j] {\n\t\t\ti -= 1\n\t\t\tj -= 1\n\t\t} else if s0[i]\
    \ != s1[j] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn i == 0 && j == 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmppfx63v88.swift:23:10: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n        let mut i =\
    \ n - 1\n                ^\n/tmp/tmppfx63v88.swift:23:10: note: join the identifiers\
    \ together\n        let mut i = n - 1\n            ~~~~^\n            muti\n/tmp/tmppfx63v88.swift:23:10:\
    \ note: join the identifiers together with camel-case\n        let mut i = n -\
    \ 1\n            ~~~~^\n            mutI\n/tmp/tmppfx63v88.swift:24:10: error:\
    \ found an unexpected second identifier in constant declaration; is there an accidental\
    \ break?\n        let mut j = m - 1\n                ^\n/tmp/tmppfx63v88.swift:24:10:\
    \ note: join the identifiers together\n        let mut j = m - 1\n           \
    \ ~~~~^\n            mutj\n/tmp/tmppfx63v88.swift:24:10: note: join the identifiers\
    \ together with camel-case\n        let mut j = m - 1\n            ~~~~^\n   \
    \         mutJ\n/tmp/tmppfx63v88.swift:16:2: error: cannot assign to value: 's0'\
    \ is a 'let' constant\n        s0 = s0.lowercased()\n        ^~\n/tmp/tmppfx63v88.swift:17:2:\
    \ error: cannot assign to value: 's1' is a 'let' constant\n        s1 = s1.lowercased()\n\
    \        ^~\n/tmp/tmppfx63v88.swift:24:6: error: invalid redeclaration of 'mut'\n\
    \        let mut j = m - 1\n            ^\n/tmp/tmppfx63v88.swift:23:6: note:\
    \ 'mut' previously declared here\n        let mut i = n - 1\n            ^\n/tmp/tmppfx63v88.swift:25:8:\
    \ error: cannot find 'i' in scope\n        while i >= 0 && j >= 0 {\n        \
    \      ^\n/tmp/tmppfx63v88.swift:25:18: error: cannot find 'j' in scope\n    \
    \    while i >= 0 && j >= 0 {\n                        ^\n/tmp/tmppfx63v88.swift:26:9:\
    \ error: cannot find 'i' in scope\n                if s0[i] == s1[j] {\n     \
    \                 ^\n/tmp/tmppfx63v88.swift:26:18: error: cannot find 'j' in scope\n\
    \                if s0[i] == s1[j] {\n                               ^\n/tmp/tmppfx63v88.swift:27:4:\
    \ error: cannot find 'i' in scope\n                        i -= 1\n          \
    \              ^\n/tmp/tmppfx63v88.swift:28:4: error: cannot find 'j' in scope\n\
    \                        j -= 1\n    "
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.lowercased()\n\ts1 = s1.lowercased()\n\
    \t\n\tlet len0 = s0.count\n\tlet len1 = s1.count\n\t\n\tfor i in 0..<min(len0,\
    \ len1) {\n\t\tif s0[i] != s1[i] {\n\t\t\treturn false\n\t\t}\n\t}\n\t\n\treturn\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\", s1: \"\
    dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\") ==\
    \ true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpbilopm54.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.lowercased()\n        ^~\n/tmp/tmpbilopm54.swift:17:2:\
    \ error: cannot assign to value: 's1' is a 'let' constant\n        s1 = s1.lowercased()\n\
    \        ^~\n/tmp/tmpbilopm54.swift:23:6: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n         \
    \       if s0[i] != s1[i] {\n                   ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpbilopm54.swift:23:15: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n                if s0[i] != s1[i] {\n                            ^~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014255
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\tlet len0 = s0.count\n\tlet len1 = s1.count\n\
    \tif len0 != len1 {\n\t\treturn false\n\t}\n\tlet mut i = 0\n\tlet mut j = 0\n\
    \twhile i < len0 && j < len1 {\n\t\tif s0[i] != s1[j] {\n\t\t\treturn false\n\t\
    \t}\n\t\ti += 1\n\t\tj += 1\n\t}\n\treturn i == len0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp3l37dg3d.swift:21:10: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n        let mut i =\
    \ 0\n                ^\n/tmp/tmp3l37dg3d.swift:21:10: note: join the identifiers\
    \ together\n        let mut i = 0\n            ~~~~^\n            muti\n/tmp/tmp3l37dg3d.swift:21:10:\
    \ note: join the identifiers together with camel-case\n        let mut i = 0\n\
    \            ~~~~^\n            mutI\n/tmp/tmp3l37dg3d.swift:22:10: error: found\
    \ an unexpected second identifier in constant declaration; is there an accidental\
    \ break?\n        let mut j = 0\n                ^\n/tmp/tmp3l37dg3d.swift:22:10:\
    \ note: join the identifiers together\n        let mut j = 0\n            ~~~~^\n\
    \            mutj\n/tmp/tmp3l37dg3d.swift:22:10: note: join the identifiers together\
    \ with camel-case\n        let mut j = 0\n            ~~~~^\n            mutJ\n\
    /tmp/tmp3l37dg3d.swift:22:6: error: invalid redeclaration of 'mut'\n        let\
    \ mut j = 0\n            ^\n/tmp/tmp3l37dg3d.swift:21:6: note: 'mut' previously\
    \ declared here\n        let mut i = 0\n            ^\n/tmp/tmp3l37dg3d.swift:23:8:\
    \ error: cannot find 'i' in scope\n        while i < len0 && j < len1 {\n    \
    \          ^\n/tmp/tmp3l37dg3d.swift:23:20: error: cannot find 'j' in scope\n\
    \        while i < len0 && j < len1 {\n                          ^\n/tmp/tmp3l37dg3d.swift:24:9:\
    \ error: cannot find 'i' in scope\n                if s0[i] != s1[j] {\n     \
    \                 ^\n/tmp/tmp3l37dg3d.swift:24:18: error: cannot find 'j' in scope\n\
    \                if s0[i] != s1[j] {\n                               ^\n/tmp/tmp3l37dg3d.swift:27:3:\
    \ error: cannot find 'i' in scope\n                i += 1\n                ^\n\
    /tmp/tmp3l37dg3d.swift:28:3: error: cannot find 'j' in scope\n               \
    \ j += 1\n                ^\n/tmp/tmp3l37dg3d.swift:30:9: error: cannot find 'i'\
    \ in scope\n        return i == len0\n               ^\n"
  stdout: ''
  timestamp: 1660014255
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.lowercased()\n\ts1 = s1.lowercased()\n\
    \tlet n = s0.count\n\tlet m = s1.count\n\tif n == 0 {\n\t\treturn m == 0\n\t}\
    \ else if m == 0 {\n\t\treturn n == 0\n\t}\n\tlet s0c = s0[..<n]\n\tlet s1c =\
    \ s1[..<m]\n\treturn s0c == s1c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdmjp4slm.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.lowercased()\n        ^~\n/tmp/tmpdmjp4slm.swift:17:2:\
    \ error: cannot assign to value: 's1' is a 'let' constant\n        s1 = s1.lowercased()\n\
    \        ^~\n/tmp/tmpdmjp4slm.swift:25:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an integer range, use a String.Index range instead.\n\
    \        let s0c = s0[..<n]\n                  ^~~~~~~~\nSwift.String:5:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript<R>(bounds:\
    \ R) -> String where R : RangeExpression, R.Bound == Int { get }\n           ^\n\
    /tmp/tmpdmjp4slm.swift:26:12: error: 'subscript(_:)' is unavailable: cannot subscript\
    \ String with an integer range, use a String.Index range instead.\n        let\
    \ s1c = s1[..<m]\n                  ^~~~~~~~\nSwift.String:5:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript<R>(bounds:\
    \ R) -> String where R : RangeExpression, R.Bound == Int { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014255
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\t\n\
    \tlet s0c = s0.ToCharArray()\n\tlet s1c = s1.ToCharArray()\n\t\n\tfor i in 0..<s0c.count\
    \ {\n\t\tif s0c[i] != s1c[i] {\n\t\t\treturn false\n\t\t}\n\t}\n\t\n\treturn true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp073plhc5.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.ToLower()\n        ^~\n/tmp/tmp073plhc5.swift:16:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s0 = s0.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmp073plhc5.swift:17:2: error: cannot assign to\
    \ value: 's1' is a 'let' constant\n        s1 = s1.ToLower()\n        ^~\n/tmp/tmp073plhc5.swift:17:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s1 = s1.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmp073plhc5.swift:19:15: error: value of type 'String'\
    \ has no member 'ToCharArray'\n        let s0c = s0.ToCharArray()\n          \
    \        ~~ ^~~~~~~~~~~\n/tmp/tmp073plhc5.swift:20:15: error: value of type 'String'\
    \ has no member 'ToCharArray'\n        let s1c = s1.ToCharArray()\n          \
    \        ~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014255
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.lowercased()\n\ts1 = s1.lowercased()\n\
    \t\n\tlet n = s0.count\n\tlet m = s1.count\n\t\n\tif n == 0 || m == 0 {\n\t\t\
    return n == m\n\t}\n\t\n\tlet n0 = s0[n - 1]\n\tlet m0 = s0[m - 1]\n\t\n\treturn\
    \ n0 == m0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\", s1: \"\
    dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\") ==\
    \ true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpke1log2v.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.lowercased()\n        ^~\n/tmp/tmpke1log2v.swift:17:2:\
    \ error: cannot assign to value: 's1' is a 'let' constant\n        s1 = s1.lowercased()\n\
    \        ^~\n/tmp/tmpke1log2v.swift:26:11: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        let\
    \ n0 = s0[n - 1]\n                 ^~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpke1log2v.swift:27:11: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        let m0 = s0[m - 1]\n                 ^~~~~~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014255
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\tlet s0_len = s0.length\n\tlet s1_len = s1.length\n\
    \tif s0_len == 0 || s1_len == 0 {\n\t\treturn true\n\t}\n\tlet s0_char = s0.characters()\n\
    \tlet s1_char = s1.characters()\n\tlet s0_char_len = s0_char.count\n\tlet s1_char_len\
    \ = s1_char.count\n\tif s0_char_len != s1_char_len {\n\t\treturn false\n\t}\n\t\
    for i in 0..<s0_char_len {\n\t\tif s0_char[i] != s1_char[i] {\n\t\t\treturn false\n\
    \t\t}\n\t}\n\treturn true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_6tc6hzo.swift:16:18: error: value of type 'String' has no member\
    \ 'length'\n        let s0_len = s0.length\n                     ~~ ^~~~~~\n/tmp/tmp_6tc6hzo.swift:17:18:\
    \ error: value of type 'String' has no member 'length'\n        let s1_len = s1.length\n\
    \                     ~~ ^~~~~~\n/tmp/tmp_6tc6hzo.swift:21:19: error: cannot call\
    \ value of non-function type 'String'\n        let s0_char = s0.characters()\n\
    \                         ^         ~~\n                                   \n\
    /tmp/tmp_6tc6hzo.swift:22:19: error: cannot call value of non-function type 'String'\n\
    \        let s1_char = s1.characters()\n                         ^         ~~\n\
    \                                   \n"
  stdout: ''
  timestamp: 1660014255
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\t\
    s0 = s0.ToUpper()\n\ts1 = s1.ToUpper()\n\ts0 = s0.Replace(\"\xDF\", \"SS\")\n\t\
    s1 = s1.Replace(\"\xDF\", \"SS\")\n\ts0 = s0.Replace(\"\xE6\", \"ae\")\n\ts1 =\
    \ s1.Replace(\"\xE6\", \"ae\")\n\ts0 = s0.Replace(\"\xF8\", \"o\")\n\ts1 = s1.Replace(\"\
    \xF8\", \"o\")\n\ts0 = s0.Replace(\"\xE5\", \"a\")\n\ts1 = s1.Replace(\"\xE5\"\
    , \"a\")\n\ts0 = s0.Replace(\"\xC5\", \"A\")\n\ts1 = s1.Replace(\"\xC5\", \"A\"\
    )\n\ts0 = s0.Replace(\"\xC4\", \"A\")\n\ts1 = s1.Replace(\"\xC4\", \"A\")\n\t\
    s0 = s0.Replace(\"\xD6\", \"O\")\n\ts1 = s1.Replace(\"\xD6\", \"O\")\n\ts0 = s0.Replace(\"\
    \xDC\", \"U\")\n\ts1 = s1.Replace(\"\xDC\", \"U\")\n\ts0 = s0.Replace(\"\xC4\"\
    , \"A\")\n\ts1 = s1.Replace(\"\xC4\", \"A\")\n\ts0 = s0.Replace(\"\xD6\", \"O\"\
    )\n\ts1 = s1.Replace(\"\xD6\", \"O\")\n\ts0 = s0.Replace(\"\xDC\", \"U\")\n\t\
    s1 = s1.Replace(\"\xDC\", \"U\")\n\ts0 = s0.Replace(\"\xDF\", \"SS\")\n\ts1 =\
    \ s1.Replace(\"\xDF\", \"SS\")\n\ts0 = s0.Replace(\"\xE4\", \"ae\")\n\ts1 = s1.Replace(\"\
    \xE4\", \"ae\")\n\ts0 = s0.Replace(\"\xF6\", \"o\")\n\ts1 = s1.Replace(\"\xF6\"\
    , \"o\")\n\ts0 = s0.Replace(\"\xFC\", \"u\")\n\ts1 = s1.Replace(\"\xFC\", \"u\"\
    )\n\ts0 = s0.Replace(\"\xC4\", \"A\")\n\ts1 = s1.Replace(\"\xC4\", \"A\")\n\t\
    s0 = s0.Replace(\"\xD6\", \"O\")\n\ts1 = s1.Replace(\"\xD6\", \"O\")\n\ts0 = s0.Replace(\"\
    \xDC\", \"U\")\n\ts1 = s1.Replace(\"\xDC\", \"U\")\n\ts0 = s0.Replace(\"\xDF\"\
    , \"SS\")\n\ts1 = s1.Replace(\"\xDF\", \"SS\")\n\ts0 = s0.Replace(\"\xE6\", \"\
    ae\")\n\ts1 = s1.Replace(\"\xE6\", \"ae\")\n\ts0 = s0.Replace(\"\xF8\", \"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpgfpkr7tq.swift:60:24: error: unterminated string literal\n    \
    \    s0 = s0.Replace(\"\xF8\", \"\n/tmp/tmpgfpkr7tq.swift:16:2: error: cannot\
    \ assign to value: 's0' is a 'let' constant\n        s0 = s0.ToLower()\n     \
    \   ^~\n/tmp/tmpgfpkr7tq.swift:16:10: error: value of type 'String' has no member\
    \ 'ToLower'\n        s0 = s0.ToLower()\n             ~~ ^~~~~~~\n/tmp/tmpgfpkr7tq.swift:17:2:\
    \ error: cannot assign to value: 's1' is a 'let' constant\n        s1 = s1.ToLower()\n\
    \        ^~\n/tmp/tmpgfpkr7tq.swift:17:10: error: value of type 'String' has no\
    \ member 'ToLower'\n        s1 = s1.ToLower()\n             ~~ ^~~~~~~\n/tmp/tmpgfpkr7tq.swift:18:2:\
    \ error: cannot assign to value: 's0' is a 'let' constant\n        s0 = s0.ToUpper()\n\
    \        ^~\n/tmp/tmpgfpkr7tq.swift:18:10: error: value of type 'String' has no\
    \ member 'ToUpper'\n        s0 = s0.ToUpper()\n             ~~ ^~~~~~~\n/tmp/tmpgfpkr7tq.swift:19:2:\
    \ error: cannot assign to value: 's1' is a 'let' constant\n        s1 = s1.ToUpper()\n\
    \        ^~\n/tmp/tmpgfpkr7tq.swift:19:10: error: value of type 'String' has no\
    \ member 'ToUpper'\n        s1 = s1.ToUpper()\n             ~~ ^~~~~~~\n/tmp/tmpgfpkr7tq.swift:20:2:\
    \ error: cannot assign to value: 's0' is a 'let' constant\n        s0 = s0.Replace(\"\
    \xDF\", \"SS\")\n/tmp/tmpgfpkr7tq.swift:20:10: error: value of type 'String' has\
    \ no member 'Replace'\n        s0 = s0.Replace(\"\xDF\", \"SS\")\n/tmp/tmpgfpkr7tq.swift:21:2:\
    \ error: cannot assign to value: 's1' is a 'let' constant\n        s1 = s1.Replace(\"\
    \xDF\", \"SS\")\n/tmp/tmpgfpkr7tq.swift:21:10: error: value of type 'String' has\
    \ no member 'Replace'\n        s1 = s1.Replace(\"\xDF\", \"SS\")\n/tmp/tmpgfpkr7tq.swift:22:2:\
    \ error: cannot assign to value: 's0' is a 'let' constant\n        s0 = s0.Replace(\"\
    \xE6\", \"ae\")\n/tmp/tmpgfpkr7tq.swift:22:10: error: value of type 'String' has\
    \ no member 'Replace'\n        s0 = s0.Replace(\"\xE6\", \"ae\")\n/tmp/tmpgfpkr7tq.swift:23:2:\
    \ error: cannot assign to value: 's1' is a 'let' constant\n        s1 = s1.Replace(\"\
    \xE6\", \"ae\")\n/tmp/tmpgfpkr7tq.swift:23:10: error: value of type 'String' has\
    \ no member 'Replace'\n       "
  stdout: ''
  timestamp: 1660014255
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\t\n\
    \tlet s0_len = s0.Length\n\tlet s1_len = s1.Length\n\t\n\tif s0_len != s1_len\
    \ {\n\t\treturn false\n\t}\n\t\n\tfor i in 0..<s0_len {\n\t\tif s0[i] != s1[i]\
    \ {\n\t\t\treturn false\n\t\t}\n\t}\n\t\n\treturn true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_sa_1gn4.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.ToLower()\n        ^~\n/tmp/tmp_sa_1gn4.swift:16:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s0 = s0.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmp_sa_1gn4.swift:17:2: error: cannot assign to\
    \ value: 's1' is a 'let' constant\n        s1 = s1.ToLower()\n        ^~\n/tmp/tmp_sa_1gn4.swift:17:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s1 = s1.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmp_sa_1gn4.swift:19:18: error: value of type 'String'\
    \ has no member 'Length'\n        let s0_len = s0.Length\n                   \
    \  ~~ ^~~~~~\n/tmp/tmp_sa_1gn4.swift:20:18: error: value of type 'String' has\
    \ no member 'Length'\n        let s1_len = s1.Length\n                     ~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.lowercased()\n\ts1 = s1.lowercased()\n\
    \tlet len0 = s0.count\n\tlet len1 = s1.count\n\tlet len = min(len0, len1)\n\t\
    for i in 0..<len {\n\t\tif s0[i] != s1[i] {\n\t\t\treturn false\n\t\t}\n\t}\n\t\
    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\", s1: \"\
    dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\") ==\
    \ true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpyan_t4ws.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.lowercased()\n        ^~\n/tmp/tmpyan_t4ws.swift:17:2:\
    \ error: cannot assign to value: 's1' is a 'let' constant\n        s1 = s1.lowercased()\n\
    \        ^~\n/tmp/tmpyan_t4ws.swift:22:6: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n         \
    \       if s0[i] != s1[i] {\n                   ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpyan_t4ws.swift:22:15: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n                if s0[i] != s1[i] {\n                            ^~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014255
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.lowercased()\n\ts1 = s1.lowercased()\n\
    \tlet n = s0.count\n\tlet m = s1.count\n\tif n == 0 || m == 0 {\n\t\treturn n\
    \ == m\n\t}\n\tlet m = min(m, n)\n\tlet n = min(m, n)\n\tfor i in 0..<n {\n\t\t\
    if s0[i] != s1[i] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpgr3eh6f7.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.lowercased()\n        ^~\n/tmp/tmpgr3eh6f7.swift:17:2:\
    \ error: cannot assign to value: 's1' is a 'let' constant\n        s1 = s1.lowercased()\n\
    \        ^~\n/tmp/tmpgr3eh6f7.swift:23:6: error: invalid redeclaration of 'm'\n\
    \        let m = min(m, n)\n            ^\n/tmp/tmpgr3eh6f7.swift:19:6: note:\
    \ 'm' previously declared here\n        let m = s1.count\n            ^\n"
  stdout: ''
  timestamp: 1660014255
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    if s0.count != s1.count {\n        return\
    \ false\n    }\n    var i = 0\n    var j = 0\n    for i < s0.count && j < s1.count\
    \ {\n        if s0[i] != s1[j] {\n            return false\n        }\n      \
    \  i += 1\n        j += 1\n    }\n    return i == s0.count && j == s1.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp650vlwo2.swift:21:11: error: expected 'in' after for-each pattern\n\
    \    for i < s0.count && j < s1.count {\n          ^\n/tmp/tmp650vlwo2.swift:21:11:\
    \ error: unary operator cannot be separated from its operand\n    for i < s0.count\
    \ && j < s1.count {\n          ^~\n           \n/tmp/tmp650vlwo2.swift:21:11:\
    \ error: '<' is not a prefix unary operator\n    for i < s0.count && j < s1.count\
    \ {\n          ^\n/tmp/tmp650vlwo2.swift:21:22: error: for-in loop requires 'Bool'\
    \ to conform to 'Sequence'\n    for i < s0.count && j < s1.count {\n         \
    \ ~~~~~~~~~~~^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014255
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.lowercased()\n\ts1 = s1.lowercased()\n\
    \t\n\tlet len0 = s0.count\n\tlet len1 = s1.count\n\t\n\tif len0 != len1 {\n\t\t\
    return false\n\t}\n\t\n\tfor i in 0..<len0 {\n\t\tif s0[i] != s1[i] {\n\t\t\t\
    return false\n\t\t}\n\t}\n\t\n\treturn true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\n\
    assert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpqzpkdrqs.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.lowercased()\n        ^~\n/tmp/tmpqzpkdrqs.swift:17:2:\
    \ error: cannot assign to value: 's1' is a 'let' constant\n        s1 = s1.lowercased()\n\
    \        ^~\n/tmp/tmpqzpkdrqs.swift:27:6: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n         \
    \       if s0[i] != s1[i] {\n                   ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpqzpkdrqs.swift:27:15: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n                if s0[i] != s1[i] {\n                            ^~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\t\n\
    \tlet s0len = s0.Length\n\tlet s1len = s1.Length\n\t\n\tif s0len == 0 || s1len\
    \ == 0 {\n\t\treturn true\n\t}\n\t\n\tlet s0char = s0[0]\n\tlet s1char = s1[0]\n\
    \t\n\tif s0char == s1char {\n\t\treturn same_chars(s0[1..], s1[1..])\n\t}\n\t\n\
    \tlet s0chars = s0.ToCharArray()\n\tlet s1chars = s1.ToCharArray()\n\t\n\tfor\
    \ idx in 0..<s0len {\n\t\tif s0chars[idx] != s1chars[idx] {\n\t\t\treturn false\n\
    \t\t}\n\t}\n\t\n\treturn true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpo5pwcpce.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.ToLower()\n        ^~\n/tmp/tmpo5pwcpce.swift:16:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s0 = s0.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmpo5pwcpce.swift:17:2: error: cannot assign to\
    \ value: 's1' is a 'let' constant\n        s1 = s1.ToLower()\n        ^~\n/tmp/tmpo5pwcpce.swift:17:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s1 = s1.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmpo5pwcpce.swift:19:17: error: value of type 'String'\
    \ has no member 'Length'\n        let s0len = s0.Length\n                    ~~\
    \ ^~~~~~\n/tmp/tmpo5pwcpce.swift:20:17: error: value of type 'String' has no member\
    \ 'Length'\n        let s1len = s1.Length\n                    ~~ ^~~~~~\n/tmp/tmpo5pwcpce.swift:26:15:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        let s0char = s0[0]\n                  \
    \   ^~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked\
    \ unavailable here\n    public subscript(i: Int) -> Character { get }\n      \
    \     ^\n/tmp/tmpo5pwcpce.swift:27:15: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        let\
    \ s1char = s1[0]\n                     ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpo5pwcpce.swift:30:25: error: cannot\
    \ find operator '..' in scope; did you mean '...'?\n                return same_chars(s0[1..],\
    \ s1[1..])\n                                      ^~\n                       \
    \               ...\n/tmp/tmpo5pwcpce.swift:30:34: error: cannot find operator\
    \ '..' in scope; did you mean '...'?\n                return same_chars(s0[1..],\
    \ s1[1..])\n                                               ^~\n              \
    \                                 ...\n/tmp/tmpo5pwcpce.swift:30:20: error: missing\
    \ argument labels 's0:s1:' in call\n                return sam"
  stdout: ''
  timestamp: 1660014255
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\t\n\
    \tlet s0c = s0.ToCharArray()\n\tlet s1c = s1.ToCharArray()\n\t\n\tfor i = 0; i\
    \ < s0c.count; i++ {\n\t\tif s0c[i] != s1c[i] {\n\t\t\treturn false\n\t\t}\n\t\
    }\n\t\n\treturn true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp6sosgroh.swift:22:2: error: C-style for statement has been removed\
    \ in Swift 3\n        for i = 0; i < s0c.count; i++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp6sosgroh.swift:16:2: error: cannot assign to value: 's0' is a 'let' constant\n\
    \        s0 = s0.ToLower()\n        ^~\n/tmp/tmp6sosgroh.swift:16:10: error: value\
    \ of type 'String' has no member 'ToLower'\n        s0 = s0.ToLower()\n      \
    \       ~~ ^~~~~~~\n/tmp/tmp6sosgroh.swift:17:2: error: cannot assign to value:\
    \ 's1' is a 'let' constant\n        s1 = s1.ToLower()\n        ^~\n/tmp/tmp6sosgroh.swift:17:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s1 = s1.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmp6sosgroh.swift:19:15: error: value of type 'String'\
    \ has no member 'ToCharArray'\n        let s0c = s0.ToCharArray()\n          \
    \        ~~ ^~~~~~~~~~~\n/tmp/tmp6sosgroh.swift:20:15: error: value of type 'String'\
    \ has no member 'ToCharArray'\n        let s1c = s1.ToCharArray()\n          \
    \        ~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014255
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\tlet s0_len = s0.count\n\tlet s1_len = s1.count\n\
    \tif s0_len == 0 || s1_len == 0 {\n\t\treturn true\n\t}\n\tlet s0_char = s0.characters\n\
    \tlet s1_char = s1.characters\n\tlet s0_char_len = s0_char.count\n\tlet s1_char_len\
    \ = s1_char.count\n\tif s0_char_len != s1_char_len {\n\t\treturn false\n\t}\n\t\
    for i in 0..<s0_char_len {\n\t\tif s0_char[i] != s1_char[i] {\n\t\t\treturn false\n\
    \t\t}\n\t}\n\treturn true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpi58hmrqy.swift:21:19: error: 'characters' is unavailable: Please\
    \ use String directly\n        let s0_char = s0.characters\n                 \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpi58hmrqy.swift:22:19:\
    \ error: 'characters' is unavailable: Please use String directly\n        let\
    \ s1_char = s1.characters\n                         ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpi58hmrqy.swift:29:6: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \                if s0_char[i] != s1_char[i] {\n                   ^~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpi58hmrqy.swift:29:20:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n                if s0_char[i] != s1_char[i] {\n\
    \                                 ^~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014255
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\t\n\
    \tlet s0Chars = s0.ToCharArray()\n\tlet s1Chars = s1.ToCharArray()\n\t\n\tfor\
    \ i in 0..<s0Chars.count {\n\t\tif s0Chars[i] != s1Chars[i] {\n\t\t\treturn false\n\
    \t\t}\n\t}\n\t\n\treturn true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmphzukiwk0.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.ToLower()\n        ^~\n/tmp/tmphzukiwk0.swift:16:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s0 = s0.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmphzukiwk0.swift:17:2: error: cannot assign to\
    \ value: 's1' is a 'let' constant\n        s1 = s1.ToLower()\n        ^~\n/tmp/tmphzukiwk0.swift:17:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s1 = s1.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmphzukiwk0.swift:19:19: error: value of type 'String'\
    \ has no member 'ToCharArray'\n        let s0Chars = s0.ToCharArray()\n      \
    \                ~~ ^~~~~~~~~~~\n/tmp/tmphzukiwk0.swift:20:19: error: value of\
    \ type 'String' has no member 'ToCharArray'\n        let s1Chars = s1.ToCharArray()\n\
    \                      ~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.lowercased()\n\ts1 = s1.lowercased()\n\
    \tlet n = s0.count\n\tlet m = s1.count\n\tif n == 0 || m == 0 {\n\t\treturn n\
    \ == m\n\t}\n\tlet n1 = s0.unicodeScalars.count\n\tlet m1 = s1.unicodeScalars.count\n\
    \tif n1 == 0 || m1 == 0 {\n\t\treturn n1 == m1\n\t}\n\tlet n2 = s0.unicodeScalars.count\n\
    \tlet m2 = s1.unicodeScalars.count\n\tlet n3 = s0.unicodeScalars.count\n\tlet\
    \ m3 = s1.unicodeScalars.count\n\tif n2 == 0 || m2 == 0 {\n\t\treturn n2 == m2\n\
    \t}\n\tlet n4 = s0.unicodeScalars.count\n\tlet m4 = s1.unicodeScalars.count\n\t\
    let n5 = s0.unicodeScalars.count\n\tlet m5 = s1.unicodeScalars.count\n\tif n3\
    \ == 0 || m3 == 0 {\n\t\treturn n3 == m3\n\t}\n\tlet n6 = s0.unicodeScalars.count\n\
    \tlet m6 = s1.unicodeScalars.count\n\tlet n7 = s0.unicodeScalars.count\n\tlet\
    \ m7 = s1.unicodeScalars.count\n\tif n4 == 0 || m4 == 0 {\n\t\treturn n4 == m4\n\
    \t}\n\tlet n8 = s0.unicodeScalars.count\n\tlet m8 = s1.unicodeScalars.count\n\t\
    let n9 = s0.unicodeScalars.count\n\tlet m9 = s1.unicodeScalars.count\n\tif n5\
    \ == 0 || m5 == 0 {\n\t\treturn n5 == m5\n\t}\n\tlet n10 = s0.unicodeScalars.count\n\
    \tlet m10 = s1.unicodeScalars.count\n\tlet n11 = s0.unicodeScalars.count\n\tlet\
    \ m11 = s1.unicodeScalars.count\n\tif n6 == 0 || m6 == 0 {\n\t\treturn n6 == m6\n\
    \t}\n\tlet n12 = s0.unicodeScalars.count\n\tlet m12 = s1.unicodeScalars.count\n\
    \tlet n13 = s0.unicodeScalars.count\n\tlet m13 = s1.unicodeScalars.count\n\tif\
    \ n7 == 0 || m7 == 0 {\n\t\treturn n7 == m7\n\t}\n\tlet n14 = s0.unicodeScalars.count\n\
    \tlet m14 = s1.unicodeScalars.count\n\tlet n15 = s0.unicodeScalars.count\n\tlet\
    \ m15 = s1.unicodeScalars.count\n\tif n8 == 0 || m8 == 0 {\n\t\treturn n8 == m8\n\
    \t}\n\tlet n16 = s0.unicodeScalars.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    ) == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\n\
    assert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0:\
    \ \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp3ug7y_3p.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.lowercased()\n        ^~\n/tmp/tmp3ug7y_3p.swift:17:2:\
    \ error: cannot assign to value: 's1' is a 'let' constant\n        s1 = s1.lowercased()\n\
    \        ^~\n"
  stdout: ''
  timestamp: 1660014255
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\t\n\
    \tlet len0 = s0.Length\n\tlet len1 = s1.Length\n\t\n\tfor i in 0..<min(len0, len1)\
    \ {\n\t\tif s0[i] != s1[i] {\n\t\t\treturn false\n\t\t}\n\t}\n\t\n\treturn true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpuo6ykn9h.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.ToLower()\n        ^~\n/tmp/tmpuo6ykn9h.swift:16:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s0 = s0.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmpuo6ykn9h.swift:17:2: error: cannot assign to\
    \ value: 's1' is a 'let' constant\n        s1 = s1.ToLower()\n        ^~\n/tmp/tmpuo6ykn9h.swift:17:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s1 = s1.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmpuo6ykn9h.swift:19:16: error: value of type 'String'\
    \ has no member 'Length'\n        let len0 = s0.Length\n                   ~~\
    \ ^~~~~~\n/tmp/tmpuo6ykn9h.swift:20:16: error: value of type 'String' has no member\
    \ 'Length'\n        let len1 = s1.Length\n                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014255
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\t\
    s0 = s0.ToUpper()\n\ts1 = s1.ToUpper()\n\tfor i := 0; i < len(s0); i++ {\n\t\t\
    if s0[i] != s1[i] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpr8imflb3.swift:20:9: error: expected type\n        for i := 0;\
    \ i < len(s0); i++ {\n               ^\n                <#type#>\n/tmp/tmpr8imflb3.swift:20:9:\
    \ error: expected 'in' after for-each pattern\n        for i := 0; i < len(s0);\
    \ i++ {\n               ^\n/tmp/tmpr8imflb3.swift:20:9: error: expected Sequence\
    \ expression for for-each loop\n        for i := 0; i < len(s0); i++ {\n     \
    \          ^\n/tmp/tmpr8imflb3.swift:16:2: error: cannot assign to value: 's0'\
    \ is a 'let' constant\n        s0 = s0.ToLower()\n        ^~\n/tmp/tmpr8imflb3.swift:16:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s0 = s0.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmpr8imflb3.swift:17:2: error: cannot assign to\
    \ value: 's1' is a 'let' constant\n        s1 = s1.ToLower()\n        ^~\n/tmp/tmpr8imflb3.swift:17:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s1 = s1.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmpr8imflb3.swift:18:2: error: cannot assign to\
    \ value: 's0' is a 'let' constant\n        s0 = s0.ToUpper()\n        ^~\n/tmp/tmpr8imflb3.swift:18:10:\
    \ error: value of type 'String' has no member 'ToUpper'\n        s0 = s0.ToUpper()\n\
    \             ~~ ^~~~~~~\n/tmp/tmpr8imflb3.swift:19:2: error: cannot assign to\
    \ value: 's1' is a 'let' constant\n        s1 = s1.ToUpper()\n        ^~\n/tmp/tmpr8imflb3.swift:19:10:\
    \ error: value of type 'String' has no member 'ToUpper'\n        s1 = s1.ToUpper()\n\
    \             ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014255
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.lowercased()\n\ts1 = s1.lowercased()\n\
    \t\n\tlet n0 = s0.count\n\tlet n1 = s1.count\n\t\n\tfor i in 0..<n0 {\n\t\tif\
    \ s0[i] != s1[i] {\n\t\t\treturn false\n\t\t}\n\t}\n\t\n\treturn true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpn3i1nnig.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.lowercased()\n        ^~\n/tmp/tmpn3i1nnig.swift:17:2:\
    \ error: cannot assign to value: 's1' is a 'let' constant\n        s1 = s1.lowercased()\n\
    \        ^~\n/tmp/tmpn3i1nnig.swift:23:6: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n         \
    \       if s0[i] != s1[i] {\n                   ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpn3i1nnig.swift:23:15: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n                if s0[i] != s1[i] {\n                            ^~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\t\n\
    \tlet len0 = s0.Length\n\tlet len1 = s1.Length\n\t\n\tif len0 == 0 || len1 ==\
    \ 0 {\n\t\treturn len0 == len1\n\t}\n\t\n\tlet mut i0 = 0\n\tlet mut i1 = 0\n\t\
    \n\twhile i0 < len0 && i1 < len1 {\n\t\tif s0[i0] != s1[i1] {\n\t\t\treturn false\n\
    \t\t}\n\t\ti0 += 1\n\t\ti1 += 1\n\t}\n\t\n\treturn i0 == len0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpgq3gaiqd.swift:26:10: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n        let mut i0 =\
    \ 0\n                ^\n/tmp/tmpgq3gaiqd.swift:26:10: note: join the identifiers\
    \ together\n        let mut i0 = 0\n            ~~~~^~\n            muti0\n/tmp/tmpgq3gaiqd.swift:26:10:\
    \ note: join the identifiers together with camel-case\n        let mut i0 = 0\n\
    \            ~~~~^~\n            mutI0\n/tmp/tmpgq3gaiqd.swift:27:10: error: found\
    \ an unexpected second identifier in constant declaration; is there an accidental\
    \ break?\n        let mut i1 = 0\n                ^\n/tmp/tmpgq3gaiqd.swift:27:10:\
    \ note: join the identifiers together\n        let mut i1 = 0\n            ~~~~^~\n\
    \            muti1\n/tmp/tmpgq3gaiqd.swift:27:10: note: join the identifiers together\
    \ with camel-case\n        let mut i1 = 0\n            ~~~~^~\n            mutI1\n\
    /tmp/tmpgq3gaiqd.swift:16:2: error: cannot assign to value: 's0' is a 'let' constant\n\
    \        s0 = s0.ToLower()\n        ^~\n/tmp/tmpgq3gaiqd.swift:16:10: error: value\
    \ of type 'String' has no member 'ToLower'\n        s0 = s0.ToLower()\n      \
    \       ~~ ^~~~~~~\n/tmp/tmpgq3gaiqd.swift:17:2: error: cannot assign to value:\
    \ 's1' is a 'let' constant\n        s1 = s1.ToLower()\n        ^~\n/tmp/tmpgq3gaiqd.swift:17:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s1 = s1.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmpgq3gaiqd.swift:19:16: error: value of type 'String'\
    \ has no member 'Length'\n        let len0 = s0.Length\n                   ~~\
    \ ^~~~~~\n/tmp/tmpgq3gaiqd.swift:20:16: error: value of type 'String' has no member\
    \ 'Length'\n        let len1 = s1.Length\n                   ~~ ^~~~~~\n/tmp/tmpgq3gaiqd.swift:27:6:\
    \ error: invalid redeclaration of 'mut'\n        let mut i1 = 0\n            ^\n\
    /tmp/tmpgq3gaiqd.swift:26:6: note: 'mut' previously declared here\n        let\
    \ mut i0 = 0\n            ^\n/tmp/tmpgq3gaiqd.swift:29:8: error: cannot find 'i0'\
    \ in scope\n        while i0 < len0 && i1 < len1 {\n              ^~\n/tmp/tmpgq3gaiqd.swift:29:21:\
    \ error: cannot find 'i"
  stdout: ''
  timestamp: 1660014255
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 += s0\n\ts1 += s1\n\treturn s0.prefix(s0.count)\
    \ == s1.prefix(s1.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpht3fg33g.swift:16:5: error: left side of mutating operator isn't\
    \ mutable: 's0' is a 'let' constant\n        s0 += s0\n        ~~ ^\n/tmp/tmpht3fg33g.swift:17:5:\
    \ error: left side of mutating operator isn't mutable: 's1' is a 'let' constant\n\
    \        s1 += s1\n        ~~ ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\t\n\
    \tlet len0 = s0.Length\n\tlet len1 = s1.Length\n\t\n\tfor i in 0..<min(len0, len1)\
    \ {\n\t\tif s0[i] != s1[i] {\n\t\t\treturn false\n\t\t}\n\t}\n\t\n\treturn len0\
    \ == len1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\", s1: \"\
    dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\") ==\
    \ true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmplv0876it.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.ToLower()\n        ^~\n/tmp/tmplv0876it.swift:16:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s0 = s0.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmplv0876it.swift:17:2: error: cannot assign to\
    \ value: 's1' is a 'let' constant\n        s1 = s1.ToLower()\n        ^~\n/tmp/tmplv0876it.swift:17:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s1 = s1.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmplv0876it.swift:19:16: error: value of type 'String'\
    \ has no member 'Length'\n        let len0 = s0.Length\n                   ~~\
    \ ^~~~~~\n/tmp/tmplv0876it.swift:20:16: error: value of type 'String' has no member\
    \ 'Length'\n        let len1 = s1.Length\n                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014255
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\tlet s0c = s0.characters\n\tlet s1c = s1.characters\n\
    \tlet n = min(s0c.count, s1c.count)\n\tfor i in 0..<n {\n\t\tif s0c[i] != s1c[i]\
    \ {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp026czvyx.swift:16:15: error: 'characters' is unavailable: Please\
    \ use String directly\n        let s0c = s0.characters\n                     ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp026czvyx.swift:17:15:\
    \ error: 'characters' is unavailable: Please use String directly\n        let\
    \ s1c = s1.characters\n                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp026czvyx.swift:20:6: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \                if s0c[i] != s1c[i] {\n                   ^~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp026czvyx.swift:20:16:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n                if s0c[i] != s1c[i] {\n       \
    \                      ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014255
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.lowercased()\n\ts1 = s1.lowercased()\n\
    \tlet n0 = s0.count\n\tlet n1 = s1.count\n\tlet n2 = n0 + n1\n\tlet n3 = n0 +\
    \ n1 + n2\n\tlet n4 = n0 + n1 + n2 + n3\n\tlet n5 = n0 + n1 + n2 + n3 + n4\n\t\
    let n6 = n0 + n1 + n2 + n3 + n4 + n5\n\tlet n7 = n0 + n1 + n2 + n3 + n4 + n5 +\
    \ n6\n\tlet n8 = n0 + n1 + n2 + n3 + n4 + n5 + n6 + n7\n\tlet n9 = n0 + n1 + n2\
    \ + n3 + n4 + n5 + n6 + n7 + n8\n\tlet n10 = n0 + n1 + n2 + n3 + n4 + n5 + n6\
    \ + n7 + n8 + n9\n\tlet n11 = n0 + n1 + n2 + n3 + n4 + n5 + n6 + n7 + n8 + n9\
    \ + n10\n\tlet n12 = n0 + n1 + n2 + n3 + n4 + n5 + n6 + n7 + n8 + n9 + n10 + n11\n\
    \tlet n13 = n0 + n1 + n2 + n3 + n4 + n5 + n6 + n7 + n8 + n9 + n10 + n11 + n12\n\
    \tlet n14 = n0 + n1 + n2 + n3 + n4 + n5 + n6 + n7 + n8 + n9 + n10 + n11 + n12\
    \ + n13\n\tlet n15 = n0 + n1 + n2 + n3 + n4 + n5 + n6 + n7 + n8 + n9 + n10 + n11\
    \ + n12 + n13 + n14\n\tlet n16 = n0 + n1 + n2 + n3 + n4 + n5 + n6 + n7 + n8 +\
    \ n9 + n10 + n11 + n12 + n13 + n14 + n15\n\tlet n17 = n0 + n1 + n2 + n3 + n4 +\
    \ n5 + n6 + n7 + n8 + n9 + n10 + n11 + n12 + n13 + n14 + n15 + n16\n\tlet n18\
    \ = n0 + n1 + n2 + n3 + n4 + n5 + n6 + n7 + n8 + n9 + n10 + n11 + \n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpyfie_ubs.swift:37:1: error: expected expression after operator\n\
    }\n^\n/tmp/tmpyfie_ubs.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.lowercased()\n        ^~\n/tmp/tmpyfie_ubs.swift:17:2:\
    \ error: cannot assign to value: 's1' is a 'let' constant\n        s1 = s1.lowercased()\n\
    \        ^~\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.lowercased()\n\ts1 = s1.lowercased()\n\
    \tlet n = s0.count\n\tlet m = s1.count\n\tfor i in 0..<n {\n\t\tif s0[i] != s1[i]\
    \ {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn n == m\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpc47mp0ao.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.lowercased()\n        ^~\n/tmp/tmpc47mp0ao.swift:17:2:\
    \ error: cannot assign to value: 's1' is a 'let' constant\n        s1 = s1.lowercased()\n\
    \        ^~\n/tmp/tmpc47mp0ao.swift:21:6: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n         \
    \       if s0[i] != s1[i] {\n                   ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpc47mp0ao.swift:21:15: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n                if s0[i] != s1[i] {\n                            ^~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.lowercased()\n\ts1 = s1.lowercased()\n\
    \tlet n = s0.count\n\tlet m = s1.count\n\tfor i in 0..<n {\n\t\tif s0[i] != s1[i]\
    \ {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn n == m\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpc47mp0ao.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.lowercased()\n        ^~\n/tmp/tmpc47mp0ao.swift:17:2:\
    \ error: cannot assign to value: 's1' is a 'let' constant\n        s1 = s1.lowercased()\n\
    \        ^~\n/tmp/tmpc47mp0ao.swift:21:6: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n         \
    \       if s0[i] != s1[i] {\n                   ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpc47mp0ao.swift:21:15: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n                if s0[i] != s1[i] {\n                            ^~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.lowercased()\n\ts1 = s1.lowercased()\n\
    \t\n\tlet len0 = s0.count\n\tlet len1 = s1.count\n\t\n\tif len0 != len1 {\n\t\t\
    return false\n\t}\n\t\n\tfor i in 0..<len0 {\n\t\tif s0[i] != s1[i] {\n\t\t\t\
    return false\n\t\t}\n\t}\n\t\n\treturn true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\n\
    assert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpqzpkdrqs.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.lowercased()\n        ^~\n/tmp/tmpqzpkdrqs.swift:17:2:\
    \ error: cannot assign to value: 's1' is a 'let' constant\n        s1 = s1.lowercased()\n\
    \        ^~\n/tmp/tmpqzpkdrqs.swift:27:6: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n         \
    \       if s0[i] != s1[i] {\n                   ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpqzpkdrqs.swift:27:15: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n                if s0[i] != s1[i] {\n                            ^~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\tlet s0c = s0.characters\n\tlet s1c = s1.characters\n\
    \t\n\tfor i in 0..<min(s0c.count, s1c.count) {\n\t\tif s0c[i] != s1c[i] {\n\t\t\
    \treturn false\n\t\t}\n\t}\n\t\n\treturn true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\n\
    assert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpp0k84loz.swift:16:15: error: 'characters' is unavailable: Please\
    \ use String directly\n        let s0c = s0.characters\n                     ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpp0k84loz.swift:17:15:\
    \ error: 'characters' is unavailable: Please use String directly\n        let\
    \ s1c = s1.characters\n                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpp0k84loz.swift:20:6: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \                if s0c[i] != s1c[i] {\n                   ^~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpp0k84loz.swift:20:16:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n                if s0c[i] != s1c[i] {\n       \
    \                      ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.lowercased()\n\ts1 = s1.lowercased()\n\
    \t\n\tvar i = 0\n\tvar j = 0\n\t\n\tfor i < s0.count && j < s1.count {\n\t\tif\
    \ s0[i] == s1[j] {\n\t\t\ti += 1\n\t\t\tj += 1\n\t\t} else if s0[i] < s1[j] {\n\
    \t\t\treturn false\n\t\t} else {\n\t\t\treturn true\n\t\t}\n\t}\n\t\n\treturn\
    \ i == s0.count && j == s1.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmps4uu8dg1.swift:22:8: error: expected 'in' after for-each pattern\n\
    \        for i < s0.count && j < s1.count {\n              ^\n/tmp/tmps4uu8dg1.swift:22:8:\
    \ error: unary operator cannot be separated from its operand\n        for i <\
    \ s0.count && j < s1.count {\n              ^~\n               \n/tmp/tmps4uu8dg1.swift:16:2:\
    \ error: cannot assign to value: 's0' is a 'let' constant\n        s0 = s0.lowercased()\n\
    \        ^~\n/tmp/tmps4uu8dg1.swift:17:2: error: cannot assign to value: 's1'\
    \ is a 'let' constant\n        s1 = s1.lowercased()\n        ^~\n/tmp/tmps4uu8dg1.swift:22:8:\
    \ error: '<' is not a prefix unary operator\n        for i < s0.count && j < s1.count\
    \ {\n              ^\n/tmp/tmps4uu8dg1.swift:22:19: error: for-in loop requires\
    \ 'Bool' to conform to 'Sequence'\n        for i < s0.count && j < s1.count {\n\
    \              ~~~~~~~~~~~^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.lowercased()\n\ts1 = s1.lowercased()\n\
    \tlet n0 = s0.count\n\tlet n1 = s1.count\n\tif n0 != n1 {\n\t\treturn false\n\t\
    }\n\tfor i in 0..<n0 {\n\t\tif s0[i] != s1[i] {\n\t\t\treturn false\n\t\t}\n\t\
    }\n\treturn true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"\
    eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\"\
    , s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\"\
    ) == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9rbyl8gx.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.lowercased()\n        ^~\n/tmp/tmp9rbyl8gx.swift:17:2:\
    \ error: cannot assign to value: 's1' is a 'let' constant\n        s1 = s1.lowercased()\n\
    \        ^~\n/tmp/tmp9rbyl8gx.swift:24:6: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n         \
    \       if s0[i] != s1[i] {\n                   ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmp9rbyl8gx.swift:24:15: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n                if s0[i] != s1[i] {\n                            ^~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014255
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\t\
    let n = s0.Length\n\tlet m = s1.Length\n\tfor i in 0..<n {\n\t\tif s0[i] != s1[i]\
    \ {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpz4j1l0xu.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.ToLower()\n        ^~\n/tmp/tmpz4j1l0xu.swift:16:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s0 = s0.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmpz4j1l0xu.swift:17:2: error: cannot assign to\
    \ value: 's1' is a 'let' constant\n        s1 = s1.ToLower()\n        ^~\n/tmp/tmpz4j1l0xu.swift:17:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s1 = s1.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmpz4j1l0xu.swift:18:13: error: value of type 'String'\
    \ has no member 'Length'\n        let n = s0.Length\n                ~~ ^~~~~~\n\
    /tmp/tmpz4j1l0xu.swift:19:13: error: value of type 'String' has no member 'Length'\n\
    \        let m = s1.Length\n                ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014255
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\tlet s0_len = s0.count\n\tlet s1_len = s1.count\n\
    \tif s0_len != s1_len {\n\t\treturn false\n\t}\n\tfor i in 0..<s0_len {\n\t\t\
    if s0[i] != s1[i] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpy7srm9yg.swift:22:6: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n                if\
    \ s0[i] != s1[i] {\n                   ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpy7srm9yg.swift:22:15: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \                if s0[i] != s1[i] {\n                            ^~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\t\
    let n = s0.Length\n\tlet m = s1.Length\n\tfor i in 0..<n {\n\t\tif s0[i] != s1[i]\
    \ {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpz4j1l0xu.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.ToLower()\n        ^~\n/tmp/tmpz4j1l0xu.swift:16:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s0 = s0.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmpz4j1l0xu.swift:17:2: error: cannot assign to\
    \ value: 's1' is a 'let' constant\n        s1 = s1.ToLower()\n        ^~\n/tmp/tmpz4j1l0xu.swift:17:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s1 = s1.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmpz4j1l0xu.swift:18:13: error: value of type 'String'\
    \ has no member 'Length'\n        let n = s0.Length\n                ~~ ^~~~~~\n\
    /tmp/tmpz4j1l0xu.swift:19:13: error: value of type 'String' has no member 'Length'\n\
    \        let m = s1.Length\n                ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014255
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.lowercased()\n\ts1 = s1.lowercased()\n\
    \tlet n0 = s0.count\n\tlet n1 = s1.count\n\t\n\tif n0 != n1 {\n\t\treturn false\n\
    \t}\n\t\n\tfor i in 0..<n0 {\n\t\tif s0[i] != s1[i] {\n\t\t\treturn false\n\t\t\
    }\n\t}\n\t\n\treturn true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpophks5gk.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.lowercased()\n        ^~\n/tmp/tmpophks5gk.swift:17:2:\
    \ error: cannot assign to value: 's1' is a 'let' constant\n        s1 = s1.lowercased()\n\
    \        ^~\n/tmp/tmpophks5gk.swift:26:6: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n         \
    \       if s0[i] != s1[i] {\n                   ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpophks5gk.swift:26:15: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n                if s0[i] != s1[i] {\n                            ^~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014255
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    if s0.count != s1.count {\n        return\
    \ false\n    }\n    var i = 0\n    for c0, c1 in zipString(s0, s1) {\n       \
    \ if c0 != c1 {\n            return false\n        }\n        i += 1\n    }\n\
    \    return i == s0.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpvwrc8ubi.swift:20:11: error: expected 'in' after for-each pattern\n\
    \    for c0, c1 in zipString(s0, s1) {\n          ^\n/tmp/tmpvwrc8ubi.swift:20:11:\
    \ error: expected Sequence expression for for-each loop\n    for c0, c1 in zipString(s0,\
    \ s1) {\n          ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.lowercased()\n\ts1 = s1.lowercased()\n\
    \t\n\tlet s0chars = s0.characters\n\tlet s1chars = s1.characters\n\t\n\tfor i\
    \ in 0..<min(s0.count, s1.count) {\n\t\tif s0chars[i] != s1chars[i] {\n\t\t\t\
    return false\n\t\t}\n\t}\n\t\n\treturn true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\n\
    assert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2yw5njdr.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.lowercased()\n        ^~\n/tmp/tmp2yw5njdr.swift:17:2:\
    \ error: cannot assign to value: 's1' is a 'let' constant\n        s1 = s1.lowercased()\n\
    \        ^~\n/tmp/tmp2yw5njdr.swift:19:19: error: 'characters' is unavailable:\
    \ Please use String directly\n        let s0chars = s0.characters\n          \
    \               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp2yw5njdr.swift:20:19: error: 'characters' is unavailable: Please\
    \ use String directly\n        let s1chars = s1.characters\n                 \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp2yw5njdr.swift:23:6:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n                if s0chars[i] != s1chars[i] {\n\
    \                   ^~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmp2yw5njdr.swift:23:20: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \                if s0chars[i] != s1chars[i] {\n                             \
    \    ^~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n"
  stdout: ''
  timestamp: 1660014255
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\tlet len0 = s0.count\n\tlet len1 = s1.count\n\
    \tif len0 != len1 {\n\t\treturn false\n\t}\n\tfor i in 0..<len0 {\n\t\tif s0[i]\
    \ != s1[i] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp6nlrik36.swift:22:6: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n                if\
    \ s0[i] != s1[i] {\n                   ^~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmp6nlrik36.swift:22:15: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \                if s0[i] != s1[i] {\n                            ^~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014255
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    if s0.count != s1.count {\n        return\
    \ false\n    }\n    var i = 0\n    for c0, c1 in zipString(s0, s1) {\n       \
    \ if c0 != c1 {\n            return false\n        }\n        i += 1\n    }\n\
    \    return i == s0.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpvwrc8ubi.swift:20:11: error: expected 'in' after for-each pattern\n\
    \    for c0, c1 in zipString(s0, s1) {\n          ^\n/tmp/tmpvwrc8ubi.swift:20:11:\
    \ error: expected Sequence expression for for-each loop\n    for c0, c1 in zipString(s0,\
    \ s1) {\n          ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\t\n\
    \tlet n0 = s0.Length\n\tlet n1 = s1.Length\n\t\n\tfor i in 0..<n0 {\n\t\tif s0[i]\
    \ != s1[i] {\n\t\t\treturn false\n\t\t}\n\t}\n\t\n\treturn true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp3zqtzfjr.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.ToLower()\n        ^~\n/tmp/tmp3zqtzfjr.swift:16:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s0 = s0.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmp3zqtzfjr.swift:17:2: error: cannot assign to\
    \ value: 's1' is a 'let' constant\n        s1 = s1.ToLower()\n        ^~\n/tmp/tmp3zqtzfjr.swift:17:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s1 = s1.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmp3zqtzfjr.swift:19:14: error: value of type 'String'\
    \ has no member 'Length'\n        let n0 = s0.Length\n                 ~~ ^~~~~~\n\
    /tmp/tmp3zqtzfjr.swift:20:14: error: value of type 'String' has no member 'Length'\n\
    \        let n1 = s1.Length\n                 ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014255
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.lowercased()\n\ts1 = s1.lowercased()\n\
    \tlet n0 = s0.count\n\tlet n1 = s1.count\n\tfor i in 0..<n0 {\n\t\tif s0[i] !=\
    \ s1[i] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn n0 == n1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpy76_d3cu.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.lowercased()\n        ^~\n/tmp/tmpy76_d3cu.swift:17:2:\
    \ error: cannot assign to value: 's1' is a 'let' constant\n        s1 = s1.lowercased()\n\
    \        ^~\n/tmp/tmpy76_d3cu.swift:21:6: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n         \
    \       if s0[i] != s1[i] {\n                   ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpy76_d3cu.swift:21:15: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n                if s0[i] != s1[i] {\n                            ^~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\tlet s0s = s0.characters\n\tlet s1s = s1.characters\n\
    \t\n\tfor c0, c1 in zip (s0s, s1s) {\n\t\tif c0 != c1 {\n\t\t\treturn false\n\t\
    \t}\n\t}\n\t\n\treturn true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9e1ff4lq.swift:19:8: error: expected 'in' after for-each pattern\n\
    \        for c0, c1 in zip (s0s, s1s) {\n              ^\n/tmp/tmp9e1ff4lq.swift:19:8:\
    \ error: expected Sequence expression for for-each loop\n        for c0, c1 in\
    \ zip (s0s, s1s) {\n              ^\n/tmp/tmp9e1ff4lq.swift:16:15: error: 'characters'\
    \ is unavailable: Please use String directly\n        let s0s = s0.characters\n\
    \                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp9e1ff4lq.swift:17:15: error: 'characters' is unavailable: Please\
    \ use String directly\n        let s1s = s1.characters\n                     ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014255
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\tlet s0_len = s0.count\n\tlet s1_len = s1.count\n\
    \tif s0_len == 0 || s1_len == 0 {\n\t\treturn false\n\t}\n\t\n\tlet s0_char =\
    \ s0.characters\n\tlet s1_char = s1.characters\n\t\n\tfor i in 0..<s0_len {\n\t\
    \tif s0_char[i] != s1_char[i] {\n\t\t\treturn false\n\t\t}\n\t}\n\t\n\treturn\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\", s1: \"\
    dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\") ==\
    \ true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmphyccqmx7.swift:22:19: error: 'characters' is unavailable: Please\
    \ use String directly\n        let s0_char = s0.characters\n                 \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmphyccqmx7.swift:23:19:\
    \ error: 'characters' is unavailable: Please use String directly\n        let\
    \ s1_char = s1.characters\n                         ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmphyccqmx7.swift:26:6: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \                if s0_char[i] != s1_char[i] {\n                   ^~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmphyccqmx7.swift:26:20:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n                if s0_char[i] != s1_char[i] {\n\
    \                                 ^~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014255
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\t\n\
    \tlet s0_len = s0.Length\n\tlet s1_len = s1.Length\n\t\n\tif s0_len == 0 || s1_len\
    \ == 0 {\n\t\treturn true\n\t}\n\t\n\tlet s0_chars = s0.ToCharArray()\n\tlet s1_chars\
    \ = s1.ToCharArray()\n\t\n\tfor idx in 0..<s0_len {\n\t\tif s0_chars[idx] != s1_chars[idx]\
    \ {\n\t\t\treturn false\n\t\t}\n\t}\n\t\n\treturn true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpsro7n9l9.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.ToLower()\n        ^~\n/tmp/tmpsro7n9l9.swift:16:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s0 = s0.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmpsro7n9l9.swift:17:2: error: cannot assign to\
    \ value: 's1' is a 'let' constant\n        s1 = s1.ToLower()\n        ^~\n/tmp/tmpsro7n9l9.swift:17:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s1 = s1.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmpsro7n9l9.swift:19:18: error: value of type 'String'\
    \ has no member 'Length'\n        let s0_len = s0.Length\n                   \
    \  ~~ ^~~~~~\n/tmp/tmpsro7n9l9.swift:20:18: error: value of type 'String' has\
    \ no member 'Length'\n        let s1_len = s1.Length\n                     ~~\
    \ ^~~~~~\n/tmp/tmpsro7n9l9.swift:26:20: error: value of type 'String' has no member\
    \ 'ToCharArray'\n        let s0_chars = s0.ToCharArray()\n                   \
    \    ~~ ^~~~~~~~~~~\n/tmp/tmpsro7n9l9.swift:27:20: error: value of type 'String'\
    \ has no member 'ToCharArray'\n        let s1_chars = s1.ToCharArray()\n     \
    \                  ~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014255
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\t\n\
    \tlet s0c = s0.ToCharArray()\n\tlet s1c = s1.ToCharArray()\n\t\n\tfor i in 0..<min(s0.Length,\
    \ s1.Length) {\n\t\tif s0c[i] != s1c[i] {\n\t\t\treturn false\n\t\t}\n\t}\n\t\n\
    \treturn true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"\
    eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\"\
    , s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\"\
    ) == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5npt7i26.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.ToLower()\n        ^~\n/tmp/tmp5npt7i26.swift:16:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s0 = s0.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmp5npt7i26.swift:17:2: error: cannot assign to\
    \ value: 's1' is a 'let' constant\n        s1 = s1.ToLower()\n        ^~\n/tmp/tmp5npt7i26.swift:17:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s1 = s1.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmp5npt7i26.swift:19:15: error: value of type 'String'\
    \ has no member 'ToCharArray'\n        let s0c = s0.ToCharArray()\n          \
    \        ~~ ^~~~~~~~~~~\n/tmp/tmp5npt7i26.swift:20:15: error: value of type 'String'\
    \ has no member 'ToCharArray'\n        let s1c = s1.ToCharArray()\n          \
    \        ~~ ^~~~~~~~~~~\n/tmp/tmp5npt7i26.swift:22:22: error: value of type 'String'\
    \ has no member 'Length'\n        for i in 0..<min(s0.Length, s1.Length) {\n \
    \                        ~~ ^~~~~~\n/tmp/tmp5npt7i26.swift:22:33: error: value\
    \ of type 'String' has no member 'Length'\n        for i in 0..<min(s0.Length,\
    \ s1.Length) {\n                                    ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014255
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    if s0.count != s1.count {\n        return\
    \ false\n    }\n    var i = 0\n    for c0, c1 in zipString(s0, s1) {\n       \
    \ if c0 != c1 {\n            return false\n        }\n        i += 1\n    }\n\
    \    return i == s0.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpvwrc8ubi.swift:20:11: error: expected 'in' after for-each pattern\n\
    \    for c0, c1 in zipString(s0, s1) {\n          ^\n/tmp/tmpvwrc8ubi.swift:20:11:\
    \ error: expected Sequence expression for for-each loop\n    for c0, c1 in zipString(s0,\
    \ s1) {\n          ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.lowercased()\n\ts1 = s1.lowercased()\n\
    \tlet n = s0.count\n\tlet m = s1.count\n\tif n == 0 || m == 0 {\n\t\treturn n\
    \ == m\n\t}\n\tlet d0 = s0[n - 1]\n\tlet d1 = s1[m - 1]\n\treturn d0 == d1 ||\
    \ d0 == d1 && d1 == d0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpp79dag5m.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.lowercased()\n        ^~\n/tmp/tmpp79dag5m.swift:17:2:\
    \ error: cannot assign to value: 's1' is a 'let' constant\n        s1 = s1.lowercased()\n\
    \        ^~\n/tmp/tmpp79dag5m.swift:23:11: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        let\
    \ d0 = s0[n - 1]\n                 ^~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpp79dag5m.swift:24:11: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        let d1 = s1[m - 1]\n                 ^~~~~~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014255
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\t\n\
    \tlet len0 = s0.Length\n\tlet len1 = s1.Length\n\t\n\tif len0 == 0 || len1 ==\
    \ 0 {\n\t\treturn len0 == len1\n\t}\n\t\n\tlet mut i0 = 0\n\tlet mut i1 = 0\n\t\
    \n\twhile i0 < len0 && i1 < len1 {\n\t\tif s0[i0] != s1[i1] {\n\t\t\treturn false\n\
    \t\t}\n\t\t\n\t\ti0 += 1\n\t\ti1 += 1\n\t}\n\t\n\treturn i0 == len0\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp6uauklyq.swift:26:10: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n        let mut i0 =\
    \ 0\n                ^\n/tmp/tmp6uauklyq.swift:26:10: note: join the identifiers\
    \ together\n        let mut i0 = 0\n            ~~~~^~\n            muti0\n/tmp/tmp6uauklyq.swift:26:10:\
    \ note: join the identifiers together with camel-case\n        let mut i0 = 0\n\
    \            ~~~~^~\n            mutI0\n/tmp/tmp6uauklyq.swift:27:10: error: found\
    \ an unexpected second identifier in constant declaration; is there an accidental\
    \ break?\n        let mut i1 = 0\n                ^\n/tmp/tmp6uauklyq.swift:27:10:\
    \ note: join the identifiers together\n        let mut i1 = 0\n            ~~~~^~\n\
    \            muti1\n/tmp/tmp6uauklyq.swift:27:10: note: join the identifiers together\
    \ with camel-case\n        let mut i1 = 0\n            ~~~~^~\n            mutI1\n\
    /tmp/tmp6uauklyq.swift:16:2: error: cannot assign to value: 's0' is a 'let' constant\n\
    \        s0 = s0.ToLower()\n        ^~\n/tmp/tmp6uauklyq.swift:16:10: error: value\
    \ of type 'String' has no member 'ToLower'\n        s0 = s0.ToLower()\n      \
    \       ~~ ^~~~~~~\n/tmp/tmp6uauklyq.swift:17:2: error: cannot assign to value:\
    \ 's1' is a 'let' constant\n        s1 = s1.ToLower()\n        ^~\n/tmp/tmp6uauklyq.swift:17:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s1 = s1.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmp6uauklyq.swift:19:16: error: value of type 'String'\
    \ has no member 'Length'\n        let len0 = s0.Length\n                   ~~\
    \ ^~~~~~\n/tmp/tmp6uauklyq.swift:20:16: error: value of type 'String' has no member\
    \ 'Length'\n        let len1 = s1.Length\n                   ~~ ^~~~~~\n/tmp/tmp6uauklyq.swift:27:6:\
    \ error: invalid redeclaration of 'mut'\n        let mut i1 = 0\n            ^\n\
    /tmp/tmp6uauklyq.swift:26:6: note: 'mut' previously declared here\n        let\
    \ mut i0 = 0\n            ^\n/tmp/tmp6uauklyq.swift:29:8: error: cannot find 'i0'\
    \ in scope\n        while i0 < len0 && i1 < len1 {\n              ^~\n/tmp/tmp6uauklyq.swift:29:21:\
    \ error: cannot find 'i"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.lowercased()\n\ts1 = s1.lowercased()\n\
    \tlet n = s0.count\n\tlet m = s1.count\n\tfor i in 0..<n {\n\t\tif s0[i] != s1[i]\
    \ {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmps2svu_tl.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.lowercased()\n        ^~\n/tmp/tmps2svu_tl.swift:17:2:\
    \ error: cannot assign to value: 's1' is a 'let' constant\n        s1 = s1.lowercased()\n\
    \        ^~\n/tmp/tmps2svu_tl.swift:21:6: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n         \
    \       if s0[i] != s1[i] {\n                   ^~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmps2svu_tl.swift:21:15: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n                if s0[i] != s1[i] {\n                            ^~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n\ts0 = s0.ToLower()\n\ts1 = s1.ToLower()\n\t\n\
    \tlet len0 = s0.Length\n\tlet len1 = s1.Length\n\t\n\tif len0 != len1 {\n\t\t\
    return false\n\t}\n\t\n\tfor i in 0..<len0 {\n\t\tif s0[i] != s1[i] {\n\t\t\t\
    return false\n\t\t}\n\t}\n\t\n\treturn true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\n\
    assert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmprok1rtgz.swift:16:2: error: cannot assign to value: 's0' is a 'let'\
    \ constant\n        s0 = s0.ToLower()\n        ^~\n/tmp/tmprok1rtgz.swift:16:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s0 = s0.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmprok1rtgz.swift:17:2: error: cannot assign to\
    \ value: 's1' is a 'let' constant\n        s1 = s1.ToLower()\n        ^~\n/tmp/tmprok1rtgz.swift:17:10:\
    \ error: value of type 'String' has no member 'ToLower'\n        s1 = s1.ToLower()\n\
    \             ~~ ^~~~~~~\n/tmp/tmprok1rtgz.swift:19:16: error: value of type 'String'\
    \ has no member 'Length'\n        let len0 = s0.Length\n                   ~~\
    \ ^~~~~~\n/tmp/tmprok1rtgz.swift:20:16: error: value of type 'String' has no member\
    \ 'Length'\n        let len1 = s1.Length\n                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014254
