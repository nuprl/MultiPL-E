language: swift
name: HumanEval_26_remove_duplicates
results:
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniqueNumbers = [Int]()\n    for number in numbers {\n        if\
    \ !uniqueNumbers.contains(number) {\n            uniqueNumbers.append(number)\n\
    \        }\n    }\n    return uniqueNumbers\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpkabwgfwk/tmpkabwgfwk.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b291875dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2918454b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2918454988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29184537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkabwgfwk                        0x0000557f33a9f891 <unavailable> + 6289

    5    libc.so.6                          0x00002b2918949460 __libc_start_main +
    245

    6    tmpkabwgfwk                        0x0000557f33a9f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824631
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpxsnt31c7.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniques = [Int]()\n    for number in numbers {\n        if !uniques.contains(number)\
    \ {\n            uniques.append(number)\n        }\n    }\n    return uniques\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpuy_yl0ic/tmpuy_yl0ic.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5067225c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5066f1cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5066f1c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5066f1b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuy_yl0ic                        0x000055c835d35891 <unavailable> + 6289

    5    libc.so.6                          0x00002b5067411460 __libc_start_main +
    245

    6    tmpuy_yl0ic                        0x000055c835d35249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824731
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpxsnt31c7.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpxsnt31c7.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpxsnt31c7.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !contains(unique,\
    \ number) {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmphp41jao5.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(unique, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpxsnt31c7.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !contains(unique,\
    \ number) {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmphp41jao5.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(unique, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpxsnt31c7.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpxsnt31c7.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpxsnt31c7.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpxsnt31c7.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniques = [Int]()\n    for number in numbers {\n        if !uniques.contains(number)\
    \ {\n            uniques.append(number)\n        }\n    }\n    return uniques\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpuy_yl0ic/tmpuy_yl0ic.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5067225c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5066f1cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5066f1c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5066f1b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuy_yl0ic                        0x000055c835d35891 <unavailable> + 6289

    5    libc.so.6                          0x00002b5067411460 __libc_start_main +
    245

    6    tmpuy_yl0ic                        0x000055c835d35249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824731
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !unique.contains(number)\
    \ {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp7_m9peyy/tmp7_m9peyy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc5d363c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc5d05ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc5d05a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc5d0597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7_m9peyy                        0x000056404b421891 <unavailable> + 6289

    5    libc.so.6                          0x00002afc5d54f460 __libc_start_main +
    245

    6    tmp7_m9peyy                        0x000056404b421249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824631
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    var seen = [Int]()\n    for number in numbers\
    \ {\n        if seen.contains(number) {\n            continue\n        }\n   \
    \     seen.append(number)\n        result.append(number)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpzul6cup3/tmpzul6cup3.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8322ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8322b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8322b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8322b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzul6cup3                        0x000055dc41f55891 <unavailable> + 6289

    5    libc.so.6                          0x00002b8323092460 __libc_start_main +
    245

    6    tmpzul6cup3                        0x000055dc41f55249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824731
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpxsnt31c7.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpxsnt31c7.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !unique.contains(number)\
    \ {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp7_m9peyy/tmp7_m9peyy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc5d363c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc5d05ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc5d05a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc5d0597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7_m9peyy                        0x000056404b421891 <unavailable> + 6289

    5    libc.so.6                          0x00002afc5d54f460 __libc_start_main +
    245

    6    tmp7_m9peyy                        0x000056404b421249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824631
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !contains(unique,\
    \ number) {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmphp41jao5.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(unique, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !contains(unique,\
    \ number) {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmphp41jao5.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(unique, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !contains(unique,\
    \ number) {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmphp41jao5.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(unique, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpxsnt31c7.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpxsnt31c7.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !contains(unique,\
    \ number) {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmphp41jao5.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(unique, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpxsnt31c7.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniqueNumbers = [Int]()\n    for number in numbers {\n        if\
    \ !uniqueNumbers.contains(number) {\n            uniqueNumbers.append(number)\n\
    \        }\n    }\n    return uniqueNumbers\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpkabwgfwk/tmpkabwgfwk.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b291875dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2918454b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2918454988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29184537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkabwgfwk                        0x0000557f33a9f891 <unavailable> + 6289

    5    libc.so.6                          0x00002b2918949460 __libc_start_main +
    245

    6    tmpkabwgfwk                        0x0000557f33a9f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824631
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !contains(unique,\
    \ number) {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmphp41jao5.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(unique, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpxsnt31c7.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !contains(unique,\
    \ number) {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmphp41jao5.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(unique, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !contains(unique,\
    \ number) {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmphp41jao5.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(unique, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniques = [Int]()\n    for number in numbers {\n        if !uniques.contains(number)\
    \ {\n            uniques.append(number)\n        }\n    }\n    return uniques\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpuy_yl0ic/tmpuy_yl0ic.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5067225c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5066f1cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5066f1c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5066f1b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuy_yl0ic                        0x000055c835d35891 <unavailable> + 6289

    5    libc.so.6                          0x00002b5067411460 __libc_start_main +
    245

    6    tmpuy_yl0ic                        0x000055c835d35249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824731
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpxsnt31c7.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpxsnt31c7.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniqueNumbers = [Int]()\n    for number in numbers {\n        if\
    \ !uniqueNumbers.contains(number) {\n            uniqueNumbers.append(number)\n\
    \        }\n    }\n    return uniqueNumbers\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpkabwgfwk/tmpkabwgfwk.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b291875dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2918454b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2918454988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29184537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkabwgfwk                        0x0000557f33a9f891 <unavailable> + 6289

    5    libc.so.6                          0x00002b2918949460 __libc_start_main +
    245

    6    tmpkabwgfwk                        0x0000557f33a9f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824631
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniqueNumbers = [Int]()\n    for number in numbers {\n        if\
    \ !uniqueNumbers.contains(number) {\n            uniqueNumbers.append(number)\n\
    \        }\n    }\n    return uniqueNumbers\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpkabwgfwk/tmpkabwgfwk.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b291875dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2918454b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2918454988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29184537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkabwgfwk                        0x0000557f33a9f891 <unavailable> + 6289

    5    libc.so.6                          0x00002b2918949460 __libc_start_main +
    245

    6    tmpkabwgfwk                        0x0000557f33a9f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824631
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpxsnt31c7.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniques = [Int]()\n    for number in numbers {\n        if !contains(uniques,\
    \ number) {\n            uniques.append(number)\n        }\n    }\n    return\
    \ uniques\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp8syug323.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(uniques, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpxsnt31c7.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp0thv07_x.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !contains(unique,\
    \ number) {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmphp41jao5.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(unique, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if unique.contains(number)\
    \ {\n            continue\n        }\n        unique.append(number)\n    }\n \
    \   return unique\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'tmpecemtjmj/tmpecemtjmj.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7f933ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7f9035b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7f9035988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7f90347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpecemtjmj                        0x000055dac4bcd891 <unavailable> + 6289

    5    libc.so.6                          0x00002ba7f952a460 __libc_start_main +
    245

    6    tmpecemtjmj                        0x000055dac4bcd249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824731
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpxsnt31c7.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniqueNumbers = [Int]()\n    for number in numbers {\n        if\
    \ !uniqueNumbers.contains(number) {\n            uniqueNumbers.append(number)\n\
    \        }\n    }\n    return uniqueNumbers\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpkabwgfwk/tmpkabwgfwk.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b291875dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2918454b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2918454988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29184537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkabwgfwk                        0x0000557f33a9f891 <unavailable> + 6289

    5    libc.so.6                          0x00002b2918949460 __libc_start_main +
    245

    6    tmpkabwgfwk                        0x0000557f33a9f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824631
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniqueNumbers = [Int]()\n    for number in numbers {\n        if\
    \ !uniqueNumbers.contains(number) {\n            uniqueNumbers.append(number)\n\
    \        }\n    }\n    return uniqueNumbers\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpkabwgfwk/tmpkabwgfwk.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b291875dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2918454b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2918454988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29184537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkabwgfwk                        0x0000557f33a9f891 <unavailable> + 6289

    5    libc.so.6                          0x00002b2918949460 __libc_start_main +
    245

    6    tmpkabwgfwk                        0x0000557f33a9f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824631
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpxsnt31c7.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if unique.contains(number)\
    \ {\n            continue\n        }\n        unique.append(number)\n    }\n \
    \   return unique\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'tmpecemtjmj/tmpecemtjmj.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7f933ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7f9035b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7f9035988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7f90347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpecemtjmj                        0x000055dac4bcd891 <unavailable> + 6289

    5    libc.so.6                          0x00002ba7f952a460 __libc_start_main +
    245

    6    tmpecemtjmj                        0x000055dac4bcd249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824731
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniqueNumbers = [Int]()\n    for number in numbers {\n        if\
    \ !uniqueNumbers.contains(number) {\n            uniqueNumbers.append(number)\n\
    \        }\n    }\n    return uniqueNumbers\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpkabwgfwk/tmpkabwgfwk.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b291875dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2918454b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2918454988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29184537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkabwgfwk                        0x0000557f33a9f891 <unavailable> + 6289

    5    libc.so.6                          0x00002b2918949460 __libc_start_main +
    245

    6    tmpkabwgfwk                        0x0000557f33a9f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824631
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !contains(unique,\
    \ number) {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmphp41jao5.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(unique, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !contains(unique,\
    \ number) {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmphp41jao5.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(unique, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniqueNumbers = [Int]()\n    for number in numbers {\n        if\
    \ !uniqueNumbers.contains(number) {\n            uniqueNumbers.append(number)\n\
    \        }\n    }\n    return uniqueNumbers\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpkabwgfwk/tmpkabwgfwk.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b291875dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2918454b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2918454988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29184537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkabwgfwk                        0x0000557f33a9f891 <unavailable> + 6289

    5    libc.so.6                          0x00002b2918949460 __libc_start_main +
    245

    6    tmpkabwgfwk                        0x0000557f33a9f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824631
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !contains(unique,\
    \ number) {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmphp41jao5.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(unique, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !unique.contains(number)\
    \ {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp7_m9peyy/tmp7_m9peyy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc5d363c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc5d05ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc5d05a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc5d0597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7_m9peyy                        0x000056404b421891 <unavailable> + 6289

    5    libc.so.6                          0x00002afc5d54f460 __libc_start_main +
    245

    6    tmp7_m9peyy                        0x000056404b421249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824631
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniques = [Int]()\n    for number in numbers {\n        if !contains(uniques,\
    \ number) {\n            uniques.append(number)\n        }\n    }\n    return\
    \ uniques\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp8syug323.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(uniques, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !unique.contains(number)\
    \ {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp7_m9peyy/tmp7_m9peyy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc5d363c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc5d05ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc5d05a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc5d0597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7_m9peyy                        0x000056404b421891 <unavailable> + 6289

    5    libc.so.6                          0x00002afc5d54f460 __libc_start_main +
    245

    6    tmp7_m9peyy                        0x000056404b421249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824631
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    var seen = [Int]()\n    for number in numbers\
    \ {\n        if seen.contains(number) {\n            continue\n        }\n   \
    \     seen.append(number)\n        result.append(number)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpzul6cup3/tmpzul6cup3.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8322ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8322b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8322b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8322b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzul6cup3                        0x000055dc41f55891 <unavailable> + 6289

    5    libc.so.6                          0x00002b8323092460 __libc_start_main +
    245

    6    tmpzul6cup3                        0x000055dc41f55249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824731
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniqueNumbers = [Int]()\n    for number in numbers {\n        if\
    \ !uniqueNumbers.contains(number) {\n            uniqueNumbers.append(number)\n\
    \        }\n    }\n    return uniqueNumbers\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpkabwgfwk/tmpkabwgfwk.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b291875dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2918454b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2918454988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29184537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkabwgfwk                        0x0000557f33a9f891 <unavailable> + 6289

    5    libc.so.6                          0x00002b2918949460 __libc_start_main +
    245

    6    tmpkabwgfwk                        0x0000557f33a9f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824631
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !contains(unique,\
    \ number) {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmphp41jao5.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(unique, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpxsnt31c7.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpxsnt31c7.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !contains(unique,\
    \ number) {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmphp41jao5.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(unique, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp0thv07_x.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniqueNumbers = [Int]()\n    for number in numbers {\n        if\
    \ !uniqueNumbers.contains(number) {\n            uniqueNumbers.append(number)\n\
    \        }\n    }\n    return uniqueNumbers\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpkabwgfwk/tmpkabwgfwk.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b291875dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2918454b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2918454988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29184537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkabwgfwk                        0x0000557f33a9f891 <unavailable> + 6289

    5    libc.so.6                          0x00002b2918949460 __libc_start_main +
    245

    6    tmpkabwgfwk                        0x0000557f33a9f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824631
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniqueNumbers = [Int]()\n    for number in numbers {\n        if\
    \ !uniqueNumbers.contains(number) {\n            uniqueNumbers.append(number)\n\
    \        }\n    }\n    return uniqueNumbers\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpkabwgfwk/tmpkabwgfwk.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b291875dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2918454b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2918454988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29184537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkabwgfwk                        0x0000557f33a9f891 <unavailable> + 6289

    5    libc.so.6                          0x00002b2918949460 __libc_start_main +
    245

    6    tmpkabwgfwk                        0x0000557f33a9f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824631
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniqueNumbers = [Int]()\n    for number in numbers {\n        if\
    \ !uniqueNumbers.contains(number) {\n            uniqueNumbers.append(number)\n\
    \        }\n    }\n    return uniqueNumbers\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpkabwgfwk/tmpkabwgfwk.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b291875dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2918454b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2918454988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29184537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkabwgfwk                        0x0000557f33a9f891 <unavailable> + 6289

    5    libc.so.6                          0x00002b2918949460 __libc_start_main +
    245

    6    tmpkabwgfwk                        0x0000557f33a9f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824631
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniques = [Int]()\n    for number in numbers {\n        if !uniques.contains(number)\
    \ {\n            uniques.append(number)\n        }\n    }\n    return uniques\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpuy_yl0ic/tmpuy_yl0ic.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5067225c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5066f1cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5066f1c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5066f1b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuy_yl0ic                        0x000055c835d35891 <unavailable> + 6289

    5    libc.so.6                          0x00002b5067411460 __libc_start_main +
    245

    6    tmpuy_yl0ic                        0x000055c835d35249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824731
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpxsnt31c7.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniques = [Int]()\n    for number in numbers {\n        if !uniques.contains(number)\
    \ {\n            uniques.append(number)\n        }\n    }\n    return uniques\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpuy_yl0ic/tmpuy_yl0ic.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5067225c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5066f1cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5066f1c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5066f1b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuy_yl0ic                        0x000055c835d35891 <unavailable> + 6289

    5    libc.so.6                          0x00002b5067411460 __libc_start_main +
    245

    6    tmpuy_yl0ic                        0x000055c835d35249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824731
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpxsnt31c7.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !unique.contains(number)\
    \ {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp7_m9peyy/tmp7_m9peyy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc5d363c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc5d05ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc5d05a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc5d0597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7_m9peyy                        0x000056404b421891 <unavailable> + 6289

    5    libc.so.6                          0x00002afc5d54f460 __libc_start_main +
    245

    6    tmp7_m9peyy                        0x000056404b421249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824631
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpxsnt31c7.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !contains(unique,\
    \ number) {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmphp41jao5.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(unique, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniqueNumbers = [Int]()\n    for number in numbers {\n        if\
    \ !uniqueNumbers.contains(number) {\n            uniqueNumbers.append(number)\n\
    \        }\n    }\n    return uniqueNumbers\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpkabwgfwk/tmpkabwgfwk.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b291875dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2918454b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2918454988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29184537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkabwgfwk                        0x0000557f33a9f891 <unavailable> + 6289

    5    libc.so.6                          0x00002b2918949460 __libc_start_main +
    245

    6    tmpkabwgfwk                        0x0000557f33a9f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824631
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniqueNumbers = [Int]()\n    for number in numbers {\n        if\
    \ !uniqueNumbers.contains(number) {\n            uniqueNumbers.append(number)\n\
    \        }\n    }\n    return uniqueNumbers\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpkabwgfwk/tmpkabwgfwk.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b291875dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2918454b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2918454988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29184537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkabwgfwk                        0x0000557f33a9f891 <unavailable> + 6289

    5    libc.so.6                          0x00002b2918949460 __libc_start_main +
    245

    6    tmpkabwgfwk                        0x0000557f33a9f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824631
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !unique.contains(number)\
    \ {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp7_m9peyy/tmp7_m9peyy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc5d363c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc5d05ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc5d05a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc5d0597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7_m9peyy                        0x000056404b421891 <unavailable> + 6289

    5    libc.so.6                          0x00002afc5d54f460 __libc_start_main +
    245

    6    tmp7_m9peyy                        0x000056404b421249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824631
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !contains(unique,\
    \ number) {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmphp41jao5.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(unique, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp0thv07_x.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpxsnt31c7.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpxsnt31c7.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !contains(unique,\
    \ number) {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmphp41jao5.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(unique, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !contains(unique,\
    \ number) {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmphp41jao5.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(unique, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpxsnt31c7.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !unique.contains(number)\
    \ {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp7_m9peyy/tmp7_m9peyy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc5d363c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc5d05ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc5d05a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc5d0597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7_m9peyy                        0x000056404b421891 <unavailable> + 6289

    5    libc.so.6                          0x00002afc5d54f460 __libc_start_main +
    245

    6    tmp7_m9peyy                        0x000056404b421249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824631
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !contains(unique,\
    \ number) {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmphp41jao5.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(unique, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniqueNumbers = [Int]()\n    for number in numbers {\n        if\
    \ !uniqueNumbers.contains(number) {\n            uniqueNumbers.append(number)\n\
    \        }\n    }\n    return uniqueNumbers\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpkabwgfwk/tmpkabwgfwk.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b291875dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2918454b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2918454988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29184537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkabwgfwk                        0x0000557f33a9f891 <unavailable> + 6289

    5    libc.so.6                          0x00002b2918949460 __libc_start_main +
    245

    6    tmpkabwgfwk                        0x0000557f33a9f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824631
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniqueNumbers = [Int]()\n    for number in numbers {\n        if\
    \ !uniqueNumbers.contains(number) {\n            uniqueNumbers.append(number)\n\
    \        }\n    }\n    return uniqueNumbers\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpkabwgfwk/tmpkabwgfwk.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b291875dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2918454b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2918454988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29184537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkabwgfwk                        0x0000557f33a9f891 <unavailable> + 6289

    5    libc.so.6                          0x00002b2918949460 __libc_start_main +
    245

    6    tmpkabwgfwk                        0x0000557f33a9f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824631
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpxsnt31c7.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !unique.contains(number)\
    \ {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp7_m9peyy/tmp7_m9peyy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc5d363c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc5d05ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc5d05a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc5d0597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7_m9peyy                        0x000056404b421891 <unavailable> + 6289

    5    libc.so.6                          0x00002afc5d54f460 __libc_start_main +
    245

    6    tmp7_m9peyy                        0x000056404b421249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824631
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniqueNumbers = [Int]()\n    for number in numbers {\n        if\
    \ !uniqueNumbers.contains(number) {\n            uniqueNumbers.append(number)\n\
    \        }\n    }\n    return uniqueNumbers\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpkabwgfwk/tmpkabwgfwk.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b291875dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2918454b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2918454988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29184537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkabwgfwk                        0x0000557f33a9f891 <unavailable> + 6289

    5    libc.so.6                          0x00002b2918949460 __libc_start_main +
    245

    6    tmpkabwgfwk                        0x0000557f33a9f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824631
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !contains(unique,\
    \ number) {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmphp41jao5.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(unique, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpxsnt31c7.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !unique.contains(number)\
    \ {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp7_m9peyy/tmp7_m9peyy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc5d363c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc5d05ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc5d05a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc5d0597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7_m9peyy                        0x000056404b421891 <unavailable> + 6289

    5    libc.so.6                          0x00002afc5d54f460 __libc_start_main +
    245

    6    tmp7_m9peyy                        0x000056404b421249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824631
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !contains(unique,\
    \ number) {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmphp41jao5.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(unique, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    var seen = [Int]()\n    for number in numbers\
    \ {\n        if seen.contains(number) {\n            continue\n        }\n   \
    \     seen.append(number)\n        result.append(number)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpzul6cup3/tmpzul6cup3.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8322ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8322b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8322b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8322b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzul6cup3                        0x000055dc41f55891 <unavailable> + 6289

    5    libc.so.6                          0x00002b8323092460 __libc_start_main +
    245

    6    tmpzul6cup3                        0x000055dc41f55249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824731
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !contains(unique,\
    \ number) {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmphp41jao5.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(unique, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !unique.contains(number)\
    \ {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp7_m9peyy/tmp7_m9peyy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc5d363c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc5d05ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc5d05a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc5d0597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7_m9peyy                        0x000056404b421891 <unavailable> + 6289

    5    libc.so.6                          0x00002afc5d54f460 __libc_start_main +
    245

    6    tmp7_m9peyy                        0x000056404b421249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824631
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniques = [Int]()\n    for number in numbers {\n        if !uniques.contains(number)\
    \ {\n            uniques.append(number)\n        }\n    }\n    return uniques\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpuy_yl0ic/tmpuy_yl0ic.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5067225c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5066f1cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5066f1c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5066f1b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuy_yl0ic                        0x000055c835d35891 <unavailable> + 6289

    5    libc.so.6                          0x00002b5067411460 __libc_start_main +
    245

    6    tmpuy_yl0ic                        0x000055c835d35249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824731
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    var seen = [Int]()\n    for number in numbers\
    \ {\n        if seen.contains(number) {\n            continue\n        }\n   \
    \     seen.append(number)\n        result.append(number)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpzul6cup3/tmpzul6cup3.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8322ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8322b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8322b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8322b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzul6cup3                        0x000055dc41f55891 <unavailable> + 6289

    5    libc.so.6                          0x00002b8323092460 __libc_start_main +
    245

    6    tmpzul6cup3                        0x000055dc41f55249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824731
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !contains(unique,\
    \ number) {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmphp41jao5.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(unique, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniqueNumbers = [Int]()\n    for number in numbers {\n        if\
    \ !uniqueNumbers.contains(number) {\n            uniqueNumbers.append(number)\n\
    \        }\n    }\n    return uniqueNumbers\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpkabwgfwk/tmpkabwgfwk.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b291875dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2918454b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2918454988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29184537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkabwgfwk                        0x0000557f33a9f891 <unavailable> + 6289

    5    libc.so.6                          0x00002b2918949460 __libc_start_main +
    245

    6    tmpkabwgfwk                        0x0000557f33a9f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824631
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp0thv07_x.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if unique.contains(number)\
    \ {\n            continue\n        }\n        unique.append(number)\n    }\n \
    \   return unique\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'tmpecemtjmj/tmpecemtjmj.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7f933ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7f9035b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7f9035988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7f90347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpecemtjmj                        0x000055dac4bcd891 <unavailable> + 6289

    5    libc.so.6                          0x00002ba7f952a460 __libc_start_main +
    245

    6    tmpecemtjmj                        0x000055dac4bcd249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824731
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !contains(unique,\
    \ number) {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmphp41jao5.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(unique, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !contains(unique,\
    \ number) {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmphp41jao5.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(unique, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !unique.contains(number)\
    \ {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp7_m9peyy/tmp7_m9peyy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc5d363c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc5d05ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc5d05a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc5d0597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7_m9peyy                        0x000056404b421891 <unavailable> + 6289

    5    libc.so.6                          0x00002afc5d54f460 __libc_start_main +
    245

    6    tmp7_m9peyy                        0x000056404b421249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824631
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniqueNumbers = [Int]()\n    for number in numbers {\n        if\
    \ !uniqueNumbers.contains(number) {\n            uniqueNumbers.append(number)\n\
    \        }\n    }\n    return uniqueNumbers\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpkabwgfwk/tmpkabwgfwk.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b291875dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2918454b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2918454988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29184537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkabwgfwk                        0x0000557f33a9f891 <unavailable> + 6289

    5    libc.so.6                          0x00002b2918949460 __libc_start_main +
    245

    6    tmpkabwgfwk                        0x0000557f33a9f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824631
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !contains(unique,\
    \ number) {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmphp41jao5.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(unique, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniqueNumbers = [Int]()\n    for number in numbers {\n        if\
    \ !uniqueNumbers.contains(number) {\n            uniqueNumbers.append(number)\n\
    \        }\n    }\n    return uniqueNumbers\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpkabwgfwk/tmpkabwgfwk.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b291875dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2918454b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2918454988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29184537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkabwgfwk                        0x0000557f33a9f891 <unavailable> + 6289

    5    libc.so.6                          0x00002b2918949460 __libc_start_main +
    245

    6    tmpkabwgfwk                        0x0000557f33a9f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824631
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp0thv07_x.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniqueNumbers = [Int]()\n    for number in numbers {\n        if\
    \ !uniqueNumbers.contains(number) {\n            uniqueNumbers.append(number)\n\
    \        }\n    }\n    return uniqueNumbers\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpkabwgfwk/tmpkabwgfwk.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b291875dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2918454b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2918454988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29184537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkabwgfwk                        0x0000557f33a9f891 <unavailable> + 6289

    5    libc.so.6                          0x00002b2918949460 __libc_start_main +
    245

    6    tmpkabwgfwk                        0x0000557f33a9f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824631
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp0thv07_x.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !contains(unique,\
    \ number) {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmphp41jao5.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(unique, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniques = [Int]()\n    for number in numbers {\n        if !uniques.contains(number)\
    \ {\n            uniques.append(number)\n        }\n    }\n    return uniques\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpuy_yl0ic/tmpuy_yl0ic.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5067225c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5066f1cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5066f1c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5066f1b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuy_yl0ic                        0x000055c835d35891 <unavailable> + 6289

    5    libc.so.6                          0x00002b5067411460 __libc_start_main +
    245

    6    tmpuy_yl0ic                        0x000055c835d35249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824731
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniqueNumbers = [Int]()\n    for number in numbers {\n        if\
    \ !uniqueNumbers.contains(number) {\n            uniqueNumbers.append(number)\n\
    \        }\n    }\n    return uniqueNumbers\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpkabwgfwk/tmpkabwgfwk.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b291875dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2918454b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2918454988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29184537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkabwgfwk                        0x0000557f33a9f891 <unavailable> + 6289

    5    libc.so.6                          0x00002b2918949460 __libc_start_main +
    245

    6    tmpkabwgfwk                        0x0000557f33a9f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824631
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniques = [Int]()\n    for number in numbers {\n        if !contains(uniques,\
    \ number) {\n            uniques.append(number)\n        }\n    }\n    return\
    \ uniques\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp8syug323.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(uniques, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpxsnt31c7.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpxsnt31c7.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !unique.contains(number)\
    \ {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp7_m9peyy/tmp7_m9peyy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc5d363c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc5d05ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc5d05a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc5d0597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7_m9peyy                        0x000056404b421891 <unavailable> + 6289

    5    libc.so.6                          0x00002afc5d54f460 __libc_start_main +
    245

    6    tmp7_m9peyy                        0x000056404b421249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824631
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !contains(unique,\
    \ number) {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmphp41jao5.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(unique, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpxsnt31c7.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpxsnt31c7.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniqueNumbers = [Int]()\n    for number in numbers {\n        if\
    \ !uniqueNumbers.contains(number) {\n            uniqueNumbers.append(number)\n\
    \        }\n    }\n    return uniqueNumbers\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpkabwgfwk/tmpkabwgfwk.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b291875dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2918454b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2918454988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29184537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkabwgfwk                        0x0000557f33a9f891 <unavailable> + 6289

    5    libc.so.6                          0x00002b2918949460 __libc_start_main +
    245

    6    tmpkabwgfwk                        0x0000557f33a9f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824631
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !contains(unique,\
    \ number) {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmphp41jao5.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(unique, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpxsnt31c7.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !contains(unique,\
    \ number) {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmphp41jao5.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(unique, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !contains(unique,\
    \ number) {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmphp41jao5.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(unique, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    var seen = [Int]()\n    for number in numbers\
    \ {\n        if seen.contains(number) {\n            continue\n        }\n   \
    \     seen.append(number)\n        result.append(number)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpzul6cup3/tmpzul6cup3.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8322ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8322b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8322b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8322b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzul6cup3                        0x000055dc41f55891 <unavailable> + 6289

    5    libc.so.6                          0x00002b8323092460 __libc_start_main +
    245

    6    tmpzul6cup3                        0x000055dc41f55249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824731
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniqueNumbers = [Int]()\n    for number in numbers {\n        if\
    \ !uniqueNumbers.contains(number) {\n            uniqueNumbers.append(number)\n\
    \        }\n    }\n    return uniqueNumbers\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpkabwgfwk/tmpkabwgfwk.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b291875dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2918454b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2918454988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29184537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkabwgfwk                        0x0000557f33a9f891 <unavailable> + 6289

    5    libc.so.6                          0x00002b2918949460 __libc_start_main +
    245

    6    tmpkabwgfwk                        0x0000557f33a9f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824631
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpxsnt31c7.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !contains(unique,\
    \ number) {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmphp41jao5.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(unique, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !unique.contains(number)\
    \ {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp7_m9peyy/tmp7_m9peyy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc5d363c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc5d05ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc5d05a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc5d0597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7_m9peyy                        0x000056404b421891 <unavailable> + 6289

    5    libc.so.6                          0x00002afc5d54f460 __libc_start_main +
    245

    6    tmp7_m9peyy                        0x000056404b421249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824631
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpxsnt31c7.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !contains(unique,\
    \ number) {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmphp41jao5.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(unique, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpxsnt31c7.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !unique.contains(number)\
    \ {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp7_m9peyy/tmp7_m9peyy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc5d363c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc5d05ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc5d05a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc5d0597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7_m9peyy                        0x000056404b421891 <unavailable> + 6289

    5    libc.so.6                          0x00002afc5d54f460 __libc_start_main +
    245

    6    tmp7_m9peyy                        0x000056404b421249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824631
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !contains(unique,\
    \ number) {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmphp41jao5.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(unique, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpxsnt31c7.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp0thv07_x.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniqueNumbers = [Int]()\n    for number in numbers {\n        if\
    \ !uniqueNumbers.contains(number) {\n            uniqueNumbers.append(number)\n\
    \        }\n    }\n    return uniqueNumbers\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpkabwgfwk/tmpkabwgfwk.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b291875dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2918454b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2918454988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29184537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkabwgfwk                        0x0000557f33a9f891 <unavailable> + 6289

    5    libc.so.6                          0x00002b2918949460 __libc_start_main +
    245

    6    tmpkabwgfwk                        0x0000557f33a9f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824631
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpxsnt31c7.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniques = [Int]()\n    for number in numbers {\n        if !uniques.contains(number)\
    \ {\n            uniques.append(number)\n        }\n    }\n    return uniques\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpuy_yl0ic/tmpuy_yl0ic.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5067225c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5066f1cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5066f1c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5066f1b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuy_yl0ic                        0x000055c835d35891 <unavailable> + 6289

    5    libc.so.6                          0x00002b5067411460 __libc_start_main +
    245

    6    tmpuy_yl0ic                        0x000055c835d35249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824731
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !contains(unique,\
    \ number) {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmphp41jao5.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(unique, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniqueNumbers = [Int]()\n    for number in numbers {\n        if\
    \ !uniqueNumbers.contains(number) {\n            uniqueNumbers.append(number)\n\
    \        }\n    }\n    return uniqueNumbers\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpkabwgfwk/tmpkabwgfwk.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b291875dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2918454b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2918454988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29184537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkabwgfwk                        0x0000557f33a9f891 <unavailable> + 6289

    5    libc.so.6                          0x00002b2918949460 __libc_start_main +
    245

    6    tmpkabwgfwk                        0x0000557f33a9f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824631
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniqueNumbers = [Int]()\n    for number in numbers {\n        if\
    \ !uniqueNumbers.contains(number) {\n            uniqueNumbers.append(number)\n\
    \        }\n    }\n    return uniqueNumbers\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpkabwgfwk/tmpkabwgfwk.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b291875dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2918454b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2918454988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29184537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkabwgfwk                        0x0000557f33a9f891 <unavailable> + 6289

    5    libc.so.6                          0x00002b2918949460 __libc_start_main +
    245

    6    tmpkabwgfwk                        0x0000557f33a9f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824631
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpxsnt31c7.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !unique.contains(number)\
    \ {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp7_m9peyy/tmp7_m9peyy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc5d363c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc5d05ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc5d05a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc5d0597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7_m9peyy                        0x000056404b421891 <unavailable> + 6289

    5    libc.so.6                          0x00002afc5d54f460 __libc_start_main +
    245

    6    tmp7_m9peyy                        0x000056404b421249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824631
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !unique.contains(number)\
    \ {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp7_m9peyy/tmp7_m9peyy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc5d363c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc5d05ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc5d05a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc5d0597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7_m9peyy                        0x000056404b421891 <unavailable> + 6289

    5    libc.so.6                          0x00002afc5d54f460 __libc_start_main +
    245

    6    tmp7_m9peyy                        0x000056404b421249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824631
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp0thv07_x.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpxsnt31c7.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniques = [Int]()\n    for number in numbers {\n        if !uniques.contains(number)\
    \ {\n            uniques.append(number)\n        }\n    }\n    return uniques\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpuy_yl0ic/tmpuy_yl0ic.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5067225c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5066f1cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5066f1c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5066f1b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuy_yl0ic                        0x000055c835d35891 <unavailable> + 6289

    5    libc.so.6                          0x00002b5067411460 __libc_start_main +
    245

    6    tmpuy_yl0ic                        0x000055c835d35249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824731
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !unique.contains(number)\
    \ {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp7_m9peyy/tmp7_m9peyy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc5d363c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc5d05ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc5d05a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc5d0597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7_m9peyy                        0x000056404b421891 <unavailable> + 6289

    5    libc.so.6                          0x00002afc5d54f460 __libc_start_main +
    245

    6    tmp7_m9peyy                        0x000056404b421249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824631
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if unique.contains(number)\
    \ {\n            continue\n        }\n        unique.append(number)\n    }\n \
    \   return unique\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'tmpecemtjmj/tmpecemtjmj.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7f933ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7f9035b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7f9035988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7f90347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpecemtjmj                        0x000055dac4bcd891 <unavailable> + 6289

    5    libc.so.6                          0x00002ba7f952a460 __libc_start_main +
    245

    6    tmpecemtjmj                        0x000055dac4bcd249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824731
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniqueNumbers = [Int]()\n    for number in numbers {\n        if\
    \ !uniqueNumbers.contains(number) {\n            uniqueNumbers.append(number)\n\
    \        }\n    }\n    return uniqueNumbers\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpkabwgfwk/tmpkabwgfwk.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b291875dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2918454b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2918454988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29184537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkabwgfwk                        0x0000557f33a9f891 <unavailable> + 6289

    5    libc.so.6                          0x00002b2918949460 __libc_start_main +
    245

    6    tmpkabwgfwk                        0x0000557f33a9f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824631
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !contains(unique,\
    \ number) {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmphp41jao5.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(unique, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !unique.contains(number)\
    \ {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp7_m9peyy/tmp7_m9peyy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc5d363c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc5d05ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc5d05a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc5d0597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7_m9peyy                        0x000056404b421891 <unavailable> + 6289

    5    libc.so.6                          0x00002afc5d54f460 __libc_start_main +
    245

    6    tmp7_m9peyy                        0x000056404b421249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824631
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpxsnt31c7.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpxsnt31c7.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniqueNumbers = [Int]()\n    for number in numbers {\n        if\
    \ !uniqueNumbers.contains(number) {\n            uniqueNumbers.append(number)\n\
    \        }\n    }\n    return uniqueNumbers\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpkabwgfwk/tmpkabwgfwk.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b291875dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2918454b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2918454988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29184537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkabwgfwk                        0x0000557f33a9f891 <unavailable> + 6289

    5    libc.so.6                          0x00002b2918949460 __libc_start_main +
    245

    6    tmpkabwgfwk                        0x0000557f33a9f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824631
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !contains(unique,\
    \ number) {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmphp41jao5.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(unique, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpxsnt31c7.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniqueNumbers = [Int]()\n    for number in numbers {\n        if\
    \ !uniqueNumbers.contains(number) {\n            uniqueNumbers.append(number)\n\
    \        }\n    }\n    return uniqueNumbers\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpkabwgfwk/tmpkabwgfwk.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b291875dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2918454b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2918454988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29184537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkabwgfwk                        0x0000557f33a9f891 <unavailable> + 6289

    5    libc.so.6                          0x00002b2918949460 __libc_start_main +
    245

    6    tmpkabwgfwk                        0x0000557f33a9f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824631
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpxsnt31c7.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !contains(unique,\
    \ number) {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmphp41jao5.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(unique, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    var seen = [Int]()\n    for number in numbers\
    \ {\n        if seen.contains(number) {\n            continue\n        }\n   \
    \     seen.append(number)\n        result.append(number)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpzul6cup3/tmpzul6cup3.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8322ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8322b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8322b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8322b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzul6cup3                        0x000055dc41f55891 <unavailable> + 6289

    5    libc.so.6                          0x00002b8323092460 __libc_start_main +
    245

    6    tmpzul6cup3                        0x000055dc41f55249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824731
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpxsnt31c7.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !contains(unique,\
    \ number) {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmphp41jao5.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(unique, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniqueNumbers = [Int]()\n    for number in numbers {\n        if\
    \ !uniqueNumbers.contains(number) {\n            uniqueNumbers.append(number)\n\
    \        }\n    }\n    return uniqueNumbers\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpkabwgfwk/tmpkabwgfwk.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b291875dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2918454b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2918454988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29184537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkabwgfwk                        0x0000557f33a9f891 <unavailable> + 6289

    5    libc.so.6                          0x00002b2918949460 __libc_start_main +
    245

    6    tmpkabwgfwk                        0x0000557f33a9f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824631
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !contains(unique,\
    \ number) {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmphp41jao5.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(unique, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpxsnt31c7.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !unique.contains(number)\
    \ {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp7_m9peyy/tmp7_m9peyy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc5d363c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc5d05ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc5d05a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc5d0597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7_m9peyy                        0x000056404b421891 <unavailable> + 6289

    5    libc.so.6                          0x00002afc5d54f460 __libc_start_main +
    245

    6    tmp7_m9peyy                        0x000056404b421249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824631
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpxsnt31c7.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniqueNumbers = [Int]()\n    for number in numbers {\n        if\
    \ !uniqueNumbers.contains(number) {\n            uniqueNumbers.append(number)\n\
    \        }\n    }\n    return uniqueNumbers\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpkabwgfwk/tmpkabwgfwk.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b291875dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2918454b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2918454988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29184537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkabwgfwk                        0x0000557f33a9f891 <unavailable> + 6289

    5    libc.so.6                          0x00002b2918949460 __libc_start_main +
    245

    6    tmpkabwgfwk                        0x0000557f33a9f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824631
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpxsnt31c7.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !contains(unique,\
    \ number) {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmphp41jao5.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(unique, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniqueNumbers = [Int]()\n    for number in numbers {\n        if\
    \ !uniqueNumbers.contains(number) {\n            uniqueNumbers.append(number)\n\
    \        }\n    }\n    return uniqueNumbers\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpkabwgfwk/tmpkabwgfwk.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b291875dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2918454b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2918454988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29184537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkabwgfwk                        0x0000557f33a9f891 <unavailable> + 6289

    5    libc.so.6                          0x00002b2918949460 __libc_start_main +
    245

    6    tmpkabwgfwk                        0x0000557f33a9f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824631
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpxsnt31c7.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpxsnt31c7.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !contains(unique,\
    \ number) {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmphp41jao5.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(unique, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !contains(unique,\
    \ number) {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmphp41jao5.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(unique, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp0thv07_x.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpxsnt31c7.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniques = [Int]()\n    for number in numbers {\n        if !uniques.contains(number)\
    \ {\n            uniques.append(number)\n        }\n    }\n    return uniques\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpuy_yl0ic/tmpuy_yl0ic.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5067225c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5066f1cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5066f1c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5066f1b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuy_yl0ic                        0x000055c835d35891 <unavailable> + 6289

    5    libc.so.6                          0x00002b5067411460 __libc_start_main +
    245

    6    tmpuy_yl0ic                        0x000055c835d35249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824731
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpxsnt31c7.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmp0thv07_x.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniqueNumbers = [Int]()\n    for number in numbers {\n        if\
    \ !uniqueNumbers.contains(number) {\n            uniqueNumbers.append(number)\n\
    \        }\n    }\n    return uniqueNumbers\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpkabwgfwk/tmpkabwgfwk.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b291875dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2918454b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2918454988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29184537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkabwgfwk                        0x0000557f33a9f891 <unavailable> + 6289

    5    libc.so.6                          0x00002b2918949460 __libc_start_main +
    245

    6    tmpkabwgfwk                        0x0000557f33a9f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824631
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !contains(unique,\
    \ number) {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmphp41jao5.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(unique, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpxsnt31c7.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !contains(unique,\
    \ number) {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmphp41jao5.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(unique, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniqueNumbers = [Int]()\n    for number in numbers {\n        if\
    \ !uniqueNumbers.contains(number) {\n            uniqueNumbers.append(number)\n\
    \        }\n    }\n    return uniqueNumbers\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpkabwgfwk/tmpkabwgfwk.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b291875dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2918454b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2918454988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29184537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkabwgfwk                        0x0000557f33a9f891 <unavailable> + 6289

    5    libc.so.6                          0x00002b2918949460 __libc_start_main +
    245

    6    tmpkabwgfwk                        0x0000557f33a9f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824631
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpxsnt31c7.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !contains(unique,\
    \ number) {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmphp41jao5.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(unique, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !contains(&result,\
    \ number) {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmpxsnt31c7.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(&result, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniqueNumbers = [Int]()\n    for number in numbers {\n        if\
    \ !uniqueNumbers.contains(number) {\n            uniqueNumbers.append(number)\n\
    \        }\n    }\n    return uniqueNumbers\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpkabwgfwk/tmpkabwgfwk.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b291875dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2918454b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2918454988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29184537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkabwgfwk                        0x0000557f33a9f891 <unavailable> + 6289

    5    libc.so.6                          0x00002b2918949460 __libc_start_main +
    245

    6    tmpkabwgfwk                        0x0000557f33a9f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824631
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !contains(unique,\
    \ number) {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmphp41jao5.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(unique, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniqueNumbers = [Int]()\n    for number in numbers {\n        if\
    \ !uniqueNumbers.contains(number) {\n            uniqueNumbers.append(number)\n\
    \        }\n    }\n    return uniqueNumbers\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpkabwgfwk/tmpkabwgfwk.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b291875dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2918454b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2918454988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29184537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkabwgfwk                        0x0000557f33a9f891 <unavailable> + 6289

    5    libc.so.6                          0x00002b2918949460 __libc_start_main +
    245

    6    tmpkabwgfwk                        0x0000557f33a9f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824631
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniqueNumbers = [Int]()\n    for number in numbers {\n        if\
    \ !uniqueNumbers.contains(number) {\n            uniqueNumbers.append(number)\n\
    \        }\n    }\n    return uniqueNumbers\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpkabwgfwk/tmpkabwgfwk.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b291875dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2918454b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2918454988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29184537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkabwgfwk                        0x0000557f33a9f891 <unavailable> + 6289

    5    libc.so.6                          0x00002b2918949460 __libc_start_main +
    245

    6    tmpkabwgfwk                        0x0000557f33a9f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824631
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniqueNumbers = [Int]()\n    for number in numbers {\n        if\
    \ !uniqueNumbers.contains(number) {\n            uniqueNumbers.append(number)\n\
    \        }\n    }\n    return uniqueNumbers\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpkabwgfwk/tmpkabwgfwk.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b291875dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2918454b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2918454988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29184537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkabwgfwk                        0x0000557f33a9f891 <unavailable> + 6289

    5    libc.so.6                          0x00002b2918949460 __libc_start_main +
    245

    6    tmpkabwgfwk                        0x0000557f33a9f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824631
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !contains(unique,\
    \ number) {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmphp41jao5.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(unique, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniques = [Int]()\n    for number in numbers {\n        if !uniques.contains(number)\
    \ {\n            uniques.append(number)\n        }\n    }\n    return uniques\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpuy_yl0ic/tmpuy_yl0ic.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5067225c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5066f1cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5066f1c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5066f1b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuy_yl0ic                        0x000055c835d35891 <unavailable> + 6289

    5    libc.so.6                          0x00002b5067411460 __libc_start_main +
    245

    6    tmpuy_yl0ic                        0x000055c835d35249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824731
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for number in numbers {\n        if !contains(unique,\
    \ number) {\n            unique.append(number)\n        }\n    }\n    return unique\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmphp41jao5.swift:9:13: error: cannot find 'contains' in scope\n \
    \       if !contains(unique, number) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824731
