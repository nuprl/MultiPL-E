language: swift
name: HumanEval_100_make_a_pile
results:
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    if n % 2 == 0 {\n        result.append(n)\n\
    \    } else {\n        var nextEven = n / 2\n        var nextOdd = nextEven /\
    \ 2\n        result.append(nextEven)\n        result.append(nextOdd)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmps2iixeoq/tmps2iixeoq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6e30b76c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6e3086db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6e3086d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6e3086c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps2iixeoq                        0x00005556f461b4d2 <unavailable> + 5330

    5    libc.so.6                          0x00002b6e30d62460 __libc_start_main +
    245

    6    tmps2iixeoq                        0x00005556f461b119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659824580
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    var stones = 0\n\
    \    while stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n\
    \            stones += 2\n        } else {\n            pile[level] = stones\n\
    \            stones += 3\n        }\n        level++\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp9m7lsn5_.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824580
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    var stones = 0\n\
    \    while stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n\
    \            stones += 2\n        } else {\n            pile[level] = stones\n\
    \            stones += 3\n        }\n        level++\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp9m7lsn5_.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824580
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var currentLevel = 0\n    var nextLevel\
    \ = n / 2\n    if n % 2 == 0 {\n        nextLevel = nextLevel + 1\n    }\n   \
    \ for _ in 0..<nextLevel {\n        result.append(nextLevel)\n        currentLevel\
    \ = currentLevel + 1\n        nextLevel = nextLevel / 2\n        if nextLevel\
    \ % 2 == 0 {\n            nextLevel = nextLevel + 1\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpk2s5eop5/tmpk2s5eop5.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9a279bdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9a276b4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9a276b4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9a276b37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk2s5eop5                        0x000055c50e9b85c2 <unavailable> + 5570

    5    libc.so.6                          0x00002b9a27ba9460 __libc_start_main +
    245

    6    tmpk2s5eop5                        0x000055c50e9b8209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824580
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [Int]()\n    if n % 2 == 1 {\n        stones.append(n)\n\
    \    } else {\n        var even = make_a_pile(n/2)\n        var odd = make_a_pile(n/2)\n\
    \        stones.append(odd.reduce(0, +))\n        stones.append(even.reduce(0,\
    \ +))\n    }\n    return stones\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpiwprc8qe.swift:17:32: error: missing argument label 'n:' in call\n\
    \        var even = make_a_pile(n/2)\n                               ^\n     \
    \                          n: \n/tmp/tmpiwprc8qe.swift:18:31: error: missing argument\
    \ label 'n:' in call\n        var odd = make_a_pile(n/2)\n                   \
    \           ^\n                              n: \n"
  stdout: ''
  timestamp: 1659824580
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [Int]()\n    var levels = [Int]()\n    var level\
    \ = 0\n    var stone = 0\n    while stone < n {\n        stone = stone + 2\n \
    \       stones.append(stone)\n        if stone % 2 == 0 {\n            levels.append(stone)\n\
    \        }\n        level = level + 1\n    }\n    return levels\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpwy8vojk8/tmpwy8vojk8.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adc3d082c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc3cd79b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adc3cd79988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adc3cd787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwy8vojk8                        0x000055aaa8ef94d2 <unavailable> + 5330

    5    libc.so.6                          0x00002adc3d26e460 __libc_start_main +
    245

    6    tmpwy8vojk8                        0x000055aaa8ef9119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659824580
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [0]\n    var level = 1\n    var nextOdd = n\n \
    \   var nextEven = n\n    while nextEven > nextOdd {\n        nextOdd = nextOdd\
    \ * 2\n        nextEven = nextEven / 2\n        stones.append(nextOdd)\n     \
    \   stones.append(nextEven)\n        level++\n    }\n    return stones\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmplyg8efj8.swift:22:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824580
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    if n % 2 == 1 {\n        pile = pile.append(n)\n\
    \    }\n    for _ in 1...n {\n        pile = pile.append(n % 2 == 0 ? n : n +\
    \ 2)\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmps8xw6nfv.swift:15:21: error: cannot assign value of type '()' to\
    \ type '[Int]'\n        pile = pile.append(n)\n               ~~~~~^~~~~~~~~\n\
    /tmp/tmps8xw6nfv.swift:18:21: error: cannot assign value of type '()' to type\
    \ '[Int]'\n        pile = pile.append(n % 2 == 0 ? n : n + 2)\n              \
    \ ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824580
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    pile = append(pile, n / 2)\n    if n\
    \ % 2 == 0 {\n        pile = append(pile, n / 2)\n    }\n    return pile\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpemq0lelv.swift:14:12: error: cannot find 'append' in scope\n  \
    \  pile = append(pile, n / 2)\n           ^~~~~~\n/tmp/tmpemq0lelv.swift:16:16:\
    \ error: cannot find 'append' in scope\n        pile = append(pile, n / 2)\n \
    \              ^~~~~~\n"
  stdout: ''
  timestamp: 1659824580
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    var stones = 0\n\
    \    while stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n\
    \            stones += 2\n        } else {\n            pile[level] = stones\n\
    \            stones += 3\n        }\n        level++\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp9m7lsn5_.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824580
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [0]\n    var level = 1\n    while level < n {\n\
    \        stones.append(level + 1)\n        if n % 2 == 0 {\n            stones.append(stones[level]\
    \ + 1)\n        } else {\n            stones.append(stones[level])\n        }\n\
    \        level++\n    }\n    return stones\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpm6q_dky5.swift:22:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824580
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile: [Int] = []\n    var level = 0\n    var stones = 0\n\
    \    while stones < n {\n        if n % 2 == 0 {\n            pile.append(stones)\n\
    \            stones += 2\n        } else {\n            pile.append(stones)\n\
    \            stones += 3\n        }\n        level++\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpits38xpj.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824580
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    var stones = 0\n\
    \    while stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n\
    \            stones += 2\n        } else {\n            pile[level] = stones\n\
    \            stones += 3\n        }\n        level++\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp9m7lsn5_.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824580
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var level = 0\n    var stones = n\n\
    \    while stones > 0 {\n        if stones % 2 == 0 {\n            result.append(stones)\n\
    \            stones /= 2\n        } else {\n            result.append(stones)\n\
    \            stones /= 2\n            stones /= 2\n        }\n        level++\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpnovjml8r.swift:25:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824580
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var level = 0\n    var stones = 0\n\
    \    while stones < n {\n        if n % 2 == 0 {\n            stones += 2\n  \
    \      } else {\n            stones += 1\n        }\n        result[level] = stones\n\
    \        n /= 2\n        level++\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp6pxcgtu3.swift:23:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 2\n        ~ ^\n/tmp/tmp6pxcgtu3.swift:24:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        level++\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1659824580
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile: [Int] = []\n    var level = 1\n    while n >= level\
    \ {\n        pile.append(level)\n        level += (n % 2 == 0) ? 1 : 2\n     \
    \   n = n / 2\n    }\n    pile.append(n)\n    return pile\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpj_dk9ga0.swift:18:9: error: cannot assign to value: 'n' is a 'let'\
    \ constant\n        n = n / 2\n        ^\n"
  stdout: ''
  timestamp: 1659824580
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    if n % 2 == 0 {\n        pile = pile.append(n)\n\
    \    } else {\n        pile = pile.append(n).append(n).append(n)\n    }\n    return\
    \ pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) == [3,\
    \ 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5)\
    \ == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp15gwv1z4.swift:15:21: error: cannot assign value of type '()' to\
    \ type '[Int]'\n        pile = pile.append(n)\n               ~~~~~^~~~~~~~~\n\
    /tmp/tmp15gwv1z4.swift:17:31: error: value of tuple type '()' has no member 'append'\n\
    \        pile = pile.append(n).append(n).append(n)\n               ~~~~~~~~~~~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824580
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    if n % 2 == 0 {\n        pile = pile.append(n)\n\
    \    } else {\n        var even = n + 2\n        var odd = n + 1\n        while\
    \ even > 0 {\n            pile = pile.append(even)\n            even -= odd\n\
    \            odd += 2\n        }\n    }\n    return pile\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp19isdhnb.swift:15:21: error: cannot assign value of type '()' to\
    \ type '[Int]'\n        pile = pile.append(n)\n               ~~~~~^~~~~~~~~\n\
    /tmp/tmp19isdhnb.swift:20:25: error: cannot assign value of type '()' to type\
    \ '[Int]'\n            pile = pile.append(even)\n                   ~~~~~^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824580
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 1\n    var stones = 0\n\
    \    while stones < n {\n        if n % 2 == 0 {\n            pile = append(pile,\
    \ stones)\n            stones += 2\n        } else {\n            pile = append(pile,\
    \ stones)\n            stones += 3\n        }\n        level++\n    }\n    return\
    \ pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) == [3,\
    \ 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5)\
    \ == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpehfgw_ox.swift:18:20: error: cannot find 'append' in scope\n  \
    \          pile = append(pile, stones)\n                   ^~~~~~\n/tmp/tmpehfgw_ox.swift:21:20:\
    \ error: cannot find 'append' in scope\n            pile = append(pile, stones)\n\
    \                   ^~~~~~\n/tmp/tmpehfgw_ox.swift:24:14: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824580
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    if n % 2 == 0 {\n        result.append(n)\n\
    \    }\n    for _ in 1...n {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        } else {\n            result.append(n / 2)\n        }\n        n = n\
    \ / 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpzce2zcrs.swift:23:9: error: cannot assign to value: 'n' is a 'let'\
    \ constant\n        n = n / 2\n        ^\n"
  stdout: ''
  timestamp: 1659824580
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    var stones = n\n\n\
    \    while stones > 0 {\n        if stones % 2 == 0 {\n            pile[level]\
    \ = stones\n            stones /= 2\n        } else {\n            pile[level]\
    \ = stones\n            stones /= 2\n            stones /= 2\n        }\n    \
    \    level++\n    }\n\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8,\
    \ 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp5w48vt9q.swift:26:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824580
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile: [Int] = []\n    var level = 1\n    var stones = 0\n\
    \    while stones < n {\n        if n % 2 == 0 {\n            pile.append(stones)\n\
    \            stones += 2\n        } else {\n            pile.append(stones)\n\
    \            stones += 3\n        }\n        level++\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp6yh0n9xk.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824580
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var levels = [Int]()\n    var currentLevel\
    \ = Int(n)\n    var currentLevelCount = Int(n)\n    var currentLevelIndex = 0\n\
    \    var currentLevelCountIndex = 0\n    while currentLevelIndex < currentLevel\
    \ {\n        if n % 2 == 0 {\n            levels.append(currentLevelCount)\n \
    \           currentLevelCount += 2\n        } else {\n            levels.append(currentLevelCount)\n\
    \            currentLevelCount += 3\n        }\n        currentLevelIndex += 1\n\
    \        currentLevelCountIndex += 1\n    }\n    for level in levels {\n     \
    \   result.append(level)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmp7kd6fgdc/tmp7kd6fgdc.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad89680fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad896506b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad896506988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad8965057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7kd6fgdc                        0x000055e8f093a772 <unavailable> + 6002

    5    libc.so.6                          0x00002ad8969fb460 __libc_start_main +
    245

    6    tmp7kd6fgdc                        0x000055e8f093a3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659824580
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    if n % 2 == 1 {\n        result.append(n)\n\
    \    }\n    for _ in 1...n {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        }\n        n = n / 2\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp8ohkoszz.swift:21:9: error: cannot assign to value: 'n' is a 'let'\
    \ constant\n        n = n / 2\n        ^\n"
  stdout: ''
  timestamp: 1659824580
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile: [Int] = []\n    var level = 1\n    var stones = n\n\
    \    while stones > 0 {\n        if stones % 2 == 1 {\n            pile.append(stones)\n\
    \            stones = stones / 2\n        } else {\n            pile.append(stones)\n\
    \            stones = stones / 2\n            pile.append(stones)\n          \
    \  stones = stones / 2\n        }\n        level++\n    }\n    return pile\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp0xrnw68o.swift:26:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824580
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [Int]()\n    var level = 0\n    while level < n\
    \ {\n        if n % 2 == 0 {\n            stones.append(n)\n            n /= 2\n\
    \        } else {\n            n /= 2\n            stones.append(n)\n        }\n\
    \        level++\n    }\n    return stones\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpgxwebwxn.swift:18:15: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n            n /= 2\n            ~ ^\n/tmp/tmpgxwebwxn.swift:20:15:\
    \ error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n\
    \            n /= 2\n            ~ ^\n/tmp/tmpgxwebwxn.swift:23:14: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n        level++\n       \
    \      ^~\n"
  stdout: ''
  timestamp: 1659824580
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    var stones = 0\n\
    \    while stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n\
    \            stones += 2\n        } else {\n            pile[level] = stones\n\
    \            stones += 3\n        }\n        level++\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp9m7lsn5_.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824580
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var currentLevel = 0\n    var currentStones\
    \ = 0\n    for _ in 0..<n {\n        if n % 2 == 0 {\n            pile.append(currentStones)\n\
    \            currentStones = 0\n        } else {\n            currentStones +=\
    \ 2\n        }\n        n /= 2\n    }\n    pile.append(currentStones)\n    return\
    \ pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) == [3,\
    \ 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5)\
    \ == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp1_la8h5j.swift:23:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 2\n        ~ ^\n"
  stdout: ''
  timestamp: 1659824580
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    if n % 2 == 1 {\n        pile = pile.append(n)\n\
    \    }\n    for _ in 1...n {\n        if n % 2 == 0 {\n            pile = pile.append(n)\n\
    \        }\n        n /= 2\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpk39vq_fq.swift:15:21: error: cannot assign value of type '()' to\
    \ type '[Int]'\n        pile = pile.append(n)\n               ~~~~~^~~~~~~~~\n\
    /tmp/tmpk39vq_fq.swift:19:25: error: cannot assign value of type '()' to type\
    \ '[Int]'\n            pile = pile.append(n)\n                   ~~~~~^~~~~~~~~\n\
    /tmp/tmpk39vq_fq.swift:21:11: error: left side of mutating operator isn't mutable:\
    \ 'n' is a 'let' constant\n        n /= 2\n        ~ ^\n"
  stdout: ''
  timestamp: 1659824580
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    if n % 2 == 1 {\n        result.append(n)\n\
    \    }\n    for _ in 1...n {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        }\n        n = n / 2\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp8ohkoszz.swift:21:9: error: cannot assign to value: 'n' is a 'let'\
    \ constant\n        n = n / 2\n        ^\n"
  stdout: ''
  timestamp: 1659824580
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [0]\n    var level = 0\n    while stones.count\
    \ < n {\n        if n % 2 == 0 {\n            stones.append(stones.last! + 2)\n\
    \        } else {\n            stones.append(stones.last! + 1)\n        }\n  \
    \      n /= 2\n        level++\n    }\n    return stones\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpwc9w7300.swift:21:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 2\n        ~ ^\n/tmp/tmpwc9w7300.swift:22:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        level++\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1659824580
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    var stones = n\n\
    \    while stones > 0 {\n        pile[level] = stones\n        stones -= stones\
    \ % 2 == 0 ? stones + 1 : stones\n        level += 1\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae7bd0ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae7bcdf6561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae7bcdf6286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae7bcdf613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae7bcdf5bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae7bcbf57ec <unavailable> + 186348

    6    tmpjtcvs7wz                        0x0000560f7ca599ab <unavailable> + 6571

    7    tmpjtcvs7wz                        0x0000560f7ca593eb <unavailable> + 5099

    8    libc.so.6                          0x00002ae7bd2eb460 __libc_start_main +
    245

    9    tmpjtcvs7wz                        0x0000560f7ca59109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1659824580
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    var stones = 0\n\
    \    while stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n\
    \            stones += 2\n        } else {\n            pile[level] = stones\n\
    \            stones += 3\n        }\n        level++\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp9m7lsn5_.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824580
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 1\n    var stones = n\n\
    \    while stones > 0 {\n        if stones % 2 == 1 {\n            pile[level]\
    \ = stones\n            stones /= 2\n        } else {\n            pile[level]\
    \ = stones\n            stones /= 2\n            stones += (stones % 2 == 0) ?\
    \ 1 : 0\n        }\n        level++\n    }\n    return pile\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpyi549mw2.swift:25:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824580
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    if n % 2 == 1 {\n        result.append(n)\n\
    \    }\n    for _ in 1...n {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        }\n        n = n / 2\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp8ohkoszz.swift:21:9: error: cannot assign to value: 'n' is a 'let'\
    \ constant\n        n = n / 2\n        ^\n"
  stdout: ''
  timestamp: 1659824580
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    if n % 2 == 1 {\n        result.append(n)\n\
    \    }\n    for _ in 1...n {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        }\n        n = n / 2\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp8ohkoszz.swift:21:9: error: cannot assign to value: 'n' is a 'let'\
    \ constant\n        n = n / 2\n        ^\n"
  stdout: ''
  timestamp: 1659824580
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    var stones = 0\n\
    \    while stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n\
    \            stones += 2\n        } else {\n            pile[level] = stones\n\
    \            stones += 3\n        }\n        level++\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp9m7lsn5_.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824580
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    var stones = 0\n\
    \    while stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n\
    \            stones += 2\n        } else {\n            pile[level] = stones\n\
    \            stones += 3\n        }\n        level++\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp9m7lsn5_.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824580
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    var stones = 0\n\
    \    while stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n\
    \            stones += 2\n        } else {\n            pile[level] = stones\n\
    \            stones += 3\n        }\n        level++\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp9m7lsn5_.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824580
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var currentLevel = 0\n    var currentLevelStones\
    \ = 0\n    for _ in 0..<n {\n        if n % 2 == 1 {\n            currentLevelStones\
    \ += n\n        } else {\n            currentLevelStones += n + 1\n        }\n\
    \        result.append(currentLevelStones)\n        currentLevel++\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpclwnhtw5.swift:23:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        currentLevel++\n                    ^~\n"
  stdout: ''
  timestamp: 1659824580
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    if n % 2 == 0 {\n        pile = pile.append(n)\n\
    \    } else {\n        pile = pile.append(n).append(n)\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp2_yjo650.swift:15:21: error: cannot assign value of type '()' to\
    \ type '[Int]'\n        pile = pile.append(n)\n               ~~~~~^~~~~~~~~\n\
    /tmp/tmp2_yjo650.swift:17:31: error: value of tuple type '()' has no member 'append'\n\
    \        pile = pile.append(n).append(n)\n               ~~~~~~~~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824580
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    var stones = 0\n\
    \    while stones < n {\n        pile[level] = stones\n        if stones % 2 ==\
    \ 0 {\n            stones += 1\n        } else {\n            stones += 2\n  \
    \      }\n        level += 1\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b91f88efc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b91f85e6561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b91f85e6286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b91f85e613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b91f85e5bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b91f83e57ec <unavailable> + 186348

    6    tmpjornkxvp                        0x000055b2ec0c19ad <unavailable> + 6573

    7    tmpjornkxvp                        0x000055b2ec0c13eb <unavailable> + 5099

    8    libc.so.6                          0x00002b91f8adb460 __libc_start_main +
    245

    9    tmpjornkxvp                        0x000055b2ec0c1109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1659824580
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    var stones = 0\n\
    \    while stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n\
    \            stones += 2\n        } else {\n            pile[level] = stones\n\
    \            stones += 3\n        }\n        level++\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp9m7lsn5_.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824580
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile: [Int] = []\n    var level = 0\n    while n != 0 {\n\
    \        pile[level] = n\n        n -= n % 2 == 0 ? n / 2 : n / 2 + 1\n      \
    \  level += 1\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8,\
    \ 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmprf8g98z0.swift:17:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n -= n % 2 == 0 ? n / 2 : n / 2 +\
    \ 1\n        ~ ^\n"
  stdout: ''
  timestamp: 1659824582
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    pile.append(n)\n    if n % 2 == 0 {\n\
    \        pile.append(n / 2)\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmph7u246r3/tmph7u246r3.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3968a3dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3968734b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3968734988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b39687337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph7u246r3                        0x00005596442284d2 <unavailable> + 5330

    5    libc.so.6                          0x00002b3968c29460 __libc_start_main +
    245

    6    tmph7u246r3                        0x0000559644228119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659824580
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    pile = append(pile, n / 2)\n    if n\
    \ % 2 == 0 {\n        pile = append(pile, n / 2)\n    }\n    return pile\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpemq0lelv.swift:14:12: error: cannot find 'append' in scope\n  \
    \  pile = append(pile, n / 2)\n           ^~~~~~\n/tmp/tmpemq0lelv.swift:16:16:\
    \ error: cannot find 'append' in scope\n        pile = append(pile, n / 2)\n \
    \              ^~~~~~\n"
  stdout: ''
  timestamp: 1659824580
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var i = 0\n    while i < n {\n     \
    \   if i % 2 == 0 {\n            pile.append(n)\n        } else {\n          \
    \  pile.append(2 * n)\n        }\n        i += 1\n    }\n    return pile\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmp_hyc_vak/tmp_hyc_vak.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7302e41c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7302b38b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7302b38988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7302b377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_hyc_vak                        0x000056184e5a84d2 <unavailable> + 5330

    5    libc.so.6                          0x00002b730302d460 __libc_start_main +
    245

    6    tmp_hyc_vak                        0x000056184e5a8119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659824580
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    var stones = 0\n\
    \    while stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n\
    \            stones += 2\n        } else {\n            pile[level] = stones\n\
    \            stones += 3\n        }\n        level++\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp9m7lsn5_.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824580
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    var stones = 0\n\
    \    while stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n\
    \            stones += 2\n        } else {\n            pile[level] = stones\n\
    \            stones += 3\n        }\n        level++\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp9m7lsn5_.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824580
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var level = 0\n    var stones = n\n\
    \    while stones > 0 {\n        if stones % 2 == 1 {\n            result.append(stones)\n\
    \            stones /= 2\n        } else {\n            result.append(stones)\n\
    \            stones /= 2\n            result.append(stones)\n            stones\
    \ /= 2\n        }\n        level++\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpbom8v4s6.swift:26:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824580
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var currentLevel = [0]\n    var currentLevelCount\
    \ = 1\n    for _ in 0..<n {\n        if n % 2 == 1 {\n            result.append(currentLevelCount)\n\
    \            currentLevelCount += 1\n        } else {\n            result.append(currentLevelCount)\n\
    \            currentLevelCount += 2\n        }\n        n -= 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmprhepi53f.swift:24:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n -= 1\n        ~ ^\n"
  stdout: ''
  timestamp: 1659824580
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    if n % 2 == 0 {\n        pile = pile.append(n)\n\
    \    } else {\n        pile = pile.append(n).append(n+1)\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpko6qb3dc.swift:15:21: error: cannot assign value of type '()' to\
    \ type '[Int]'\n        pile = pile.append(n)\n               ~~~~~^~~~~~~~~\n\
    /tmp/tmpko6qb3dc.swift:17:31: error: value of tuple type '()' has no member 'append'\n\
    \        pile = pile.append(n).append(n+1)\n               ~~~~~~~~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824580
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    var stones = 0\n\
    \    while stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n\
    \            stones += 2\n        } else {\n            pile[level] = stones\n\
    \            stones += 3\n        }\n        level++\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp9m7lsn5_.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824580
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var currentLevel = [0]\n    var nextLevel\
    \ = [0]\n    var currentStones = 0\n    var nextStones = 0\n    for _ in 0..<n\
    \ {\n        if n % 2 == 0 {\n            currentStones += nextLevel[0]\n    \
    \        nextStones += nextLevel[1]\n            nextLevel = [0]\n        } else\
    \ {\n            currentStones += nextLevel[1]\n            nextStones += nextLevel[0]\n\
    \            nextLevel = [1]\n        }\n        result.append(currentStones)\n\
    \        currentLevel = nextLevel\n        currentStones = nextStones\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b2935638c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b293532f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b293532f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b293532f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b293532ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b293512ee83 <unavailable> + 188035

    6    tmphtfstt1h                        0x000055edb487dd8c <unavailable> + 7564

    7    tmphtfstt1h                        0x000055edb487d53b <unavailable> + 5435

    8    libc.so.6                          0x00002b2935824460 __libc_start_main +
    245

    9    tmphtfstt1h                        0x000055edb487d259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824580
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [1]\n    var levels = [Int]()\n    var level =\
    \ 0\n    while stones.count < n {\n        if n % 2 == 0 {\n            stones.append(stones.last!\
    \ + 2)\n        } else {\n            stones.append(stones.last! + 1)\n      \
    \  }\n        levels.append(stones.last!)\n        stones.removeLast()\n     \
    \   level++\n    }\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8,\
    \ 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpexfxy6af.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824580
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    var stones = 0\n\
    \    while stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n\
    \            stones += 2\n        } else {\n            pile[level] = stones\n\
    \            stones += 3\n        }\n        level++\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp9m7lsn5_.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824580
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    var stones = n\n\
    \    while stones > 0 {\n        if stones % 2 == 1 {\n            pile[level]\
    \ = stones\n            stones /= 2\n        } else {\n            pile[level]\
    \ = stones\n            stones /= 2\n            pile[level+1] = stones\n    \
    \        stones /= 2\n        }\n        level++\n    }\n    return pile\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpz_iruuwf.swift:26:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824580
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    var stones = 0\n\
    \    while stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n\
    \            stones += 2\n        } else {\n            pile[level] = stones\n\
    \            stones += 3\n        }\n        level++\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp9m7lsn5_.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824580
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    if n % 2 == 0 {\n        pile = pile.append(n)\n\
    \    } else {\n        var even = n / 2\n        var odd = n - even\n        pile\
    \ = pile.append(even)\n        pile = pile.append(odd)\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp_q0ncif_.swift:15:21: error: cannot assign value of type '()' to\
    \ type '[Int]'\n        pile = pile.append(n)\n               ~~~~~^~~~~~~~~\n\
    /tmp/tmp_q0ncif_.swift:19:21: error: cannot assign value of type '()' to type\
    \ '[Int]'\n        pile = pile.append(even)\n               ~~~~~^~~~~~~~~~~~\n\
    /tmp/tmp_q0ncif_.swift:20:21: error: cannot assign value of type '()' to type\
    \ '[Int]'\n        pile = pile.append(odd)\n               ~~~~~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824580
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile: [Int] = []\n    var level = 1\n    var stones = n\n\
    \    while stones > 0 {\n        if stones % 2 == 0 {\n            pile.append(stones)\n\
    \            stones /= 2\n        } else {\n            pile.append(stones)\n\
    \            stones /= 2\n            stones += level\n        }\n        level\
    \ += 1\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824585
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [Int]()\n    var level = 0\n    while level < n\
    \ {\n        if n % 2 == 0 {\n            stones.append(level + 1)\n         \
    \   n /= 2\n        } else {\n            stones.append(level + 2)\n         \
    \   n /= 2\n        }\n        level++\n    }\n    return stones\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpl8saanks.swift:18:15: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n            n /= 2\n            ~ ^\n/tmp/tmpl8saanks.swift:21:15:\
    \ error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n\
    \            n /= 2\n            ~ ^\n/tmp/tmpl8saanks.swift:23:14: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n        level++\n       \
    \      ^~\n"
  stdout: ''
  timestamp: 1659824580
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [Int]()\n    var level = 0\n    var stone = 0\n\
    \    while stone < n {\n        if n % 2 == 0 {\n            stones.append(stone)\n\
    \            stone = 0\n            level += 1\n        } else {\n           \
    \ stone += 2\n        }\n    }\n    return stones\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmp2epfa5b1/tmp2epfa5b1.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b48b5dfec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b48b5af5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b48b5af5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b48b5af47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2epfa5b1                        0x000055894e9774d2 <unavailable> + 5330

    5    libc.so.6                          0x00002b48b5fea460 __libc_start_main +
    245

    6    tmp2epfa5b1                        0x000055894e977119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659824580
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    pile.append(n)\n    if n % 2 == 0 {\n\
    \        pile.append(n / 2)\n    }\n    if n % 2 == 1 {\n        pile.append(n\
    \ / 2 + 1)\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8,\
    \ 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpaslenwsw/tmpaslenwsw.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6e4993c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6e468ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6e468a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6e46897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaslenwsw                        0x0000561a82b7c4d2 <unavailable> + 5330

    5    libc.so.6                          0x00002ad6e4b7f460 __libc_start_main +
    245

    6    tmpaslenwsw                        0x0000561a82b7c119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659824580
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var level = 0\n    while level < n\
    \ {\n        if n % 2 == 0 {\n            result.append(n)\n            n /= 2\n\
    \        } else {\n            result.append(n)\n            n /= 2\n        \
    \    n /= 2\n        }\n        level += 1\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpi44z37vo.swift:18:15: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n            n /= 2\n            ~ ^\n/tmp/tmpi44z37vo.swift:21:15:\
    \ error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n\
    \            n /= 2\n            ~ ^\n/tmp/tmpi44z37vo.swift:22:15: error: left\
    \ side of mutating operator isn't mutable: 'n' is a 'let' constant\n         \
    \   n /= 2\n            ~ ^\n"
  stdout: ''
  timestamp: 1659824580
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    var stones = 0\n\
    \    while stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n\
    \            stones += 2\n        } else {\n            pile[level] = stones\n\
    \            stones += 3\n        }\n        level++\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp9m7lsn5_.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824580
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [Int]()\n    if n % 2 == 0 {\n        stones.append(n)\n\
    \    } else {\n        stones.append(n + make_a_pile(n/2))\n    }\n    return\
    \ stones\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpbp50so1g.swift:17:27: error: cannot convert value of type '[Int]'\
    \ to expected argument type 'Int'\n        stones.append(n + make_a_pile(n/2))\n\
    \                          ^\n/tmp/tmpbp50so1g.swift:17:39: error: missing argument\
    \ label 'n:' in call\n        stones.append(n + make_a_pile(n/2))\n          \
    \                            ^\n                                      n: \n"
  stdout: ''
  timestamp: 1659824580
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [0]\n    var level = 1\n    while stones.count\
    \ < n {\n        if n % 2 == 0 {\n            stones.append(stones.last! + 2)\n\
    \        } else {\n            stones.append(stones.last! + 1)\n        }\n  \
    \      n /= 2\n        level += 1\n    }\n    return stones\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp1mm_k562.swift:21:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 2\n        ~ ^\n"
  stdout: ''
  timestamp: 1659824580
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var level = 0\n    while level < n\
    \ {\n        if n % 2 == 0 {\n            result.append(level + 1)\n         \
    \   n /= 2\n        } else {\n            result.append(level + 2)\n         \
    \   n /= 2\n        }\n        level++\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpiqprn1hv.swift:18:15: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n            n /= 2\n            ~ ^\n/tmp/tmpiqprn1hv.swift:21:15:\
    \ error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n\
    \            n /= 2\n            ~ ^\n/tmp/tmpiqprn1hv.swift:23:14: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n        level++\n       \
    \      ^~\n"
  stdout: ''
  timestamp: 1659824580
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    var stones = 0\n\
    \    while stones < n {\n        pile.append(stones)\n        if n % 2 == 0 {\n\
    \            stones += 2\n        } else {\n            stones += 3\n        }\n\
    \        n /= 2\n        level++\n    }\n    return pile\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp6gpg6khn.swift:23:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 2\n        ~ ^\n/tmp/tmp6gpg6khn.swift:24:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        level++\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1659824580
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    while n != 0 {\n\
    \        pile.append(n)\n        if n % 2 == 0 {\n            n /= 2\n       \
    \ } else {\n            n = 3 * n + 1\n        }\n        level += 1\n    }\n\
    \    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp4awuw5ag.swift:18:15: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n            n /= 2\n            ~ ^\n/tmp/tmp4awuw5ag.swift:20:13:\
    \ error: cannot assign to value: 'n' is a 'let' constant\n            n = 3 *\
    \ n + 1\n            ^\n"
  stdout: ''
  timestamp: 1659824580
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    if n % 2 == 0 {\n        for _ in\
    \ 0..<n / 2 {\n            result.append(n)\n        }\n    } else {\n       \
    \ for _ in 0..<n / 2 {\n            result.append(n + 2)\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpzb5y8odg/tmpzb5y8odg.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4f5238c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4f4f2fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4f4f2f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4f4f2e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzb5y8odg                        0x00005654af6235c2 <unavailable> + 5570

    5    libc.so.6                          0x00002ae4f5424460 __libc_start_main +
    245

    6    tmpzb5y8odg                        0x00005654af623209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var currentLevel = Int()\n    var\
    \ currentPile = Int()\n    var nextLevel = Int()\n    var nextPile = Int()\n \
    \   for _ in 0..<n {\n        nextLevel = n % 2 == 0 ? n + 1 : n\n        nextPile\
    \ = nextLevel % 2 == 0 ? nextLevel + 1 : nextLevel\n        currentPile = nextPile\
    \ % 2 == 0 ? nextPile + 1 : nextPile\n        currentLevel = currentPile % 2 ==\
    \ 0 ? currentPile + 1 : currentPile\n        result.append(currentLevel)\n   \
    \     n = nextLevel\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp18crtqwx.swift:24:9: error: cannot assign to value: 'n' is a 'let'\
    \ constant\n        n = nextLevel\n        ^\n"
  stdout: ''
  timestamp: 1659824580
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var i = 0\n    while i < n {\n     \
    \   if i % 2 == 0 {\n            pile.append(n)\n        } else {\n          \
    \  pile.append(n + i)\n        }\n        i += 1\n    }\n    return pile\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpuk7ed6kz/tmpuk7ed6kz.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9052283c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9051f7ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9051f7a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9051f797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuk7ed6kz                        0x00005652123894d2 <unavailable> + 5330

    5    libc.so.6                          0x00002b905246f460 __libc_start_main +
    245

    6    tmpuk7ed6kz                        0x0000565212389119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var level = 0\n    var stones = 0\n\
    \    while stones < n {\n        if n % 2 == 0 {\n            stones += 2\n  \
    \      } else {\n            stones += 1\n        }\n        level++\n       \
    \ result.append(stones)\n        n = stones\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp_88scy8u.swift:22:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n/tmp/tmp_88scy8u.swift:24:9:\
    \ error: cannot assign to value: 'n' is a 'let' constant\n        n = stones\n\
    \        ^\n"
  stdout: ''
  timestamp: 1659824580
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [Int]()\n    var level = 0\n    while level < n\
    \ {\n        if n % 2 == 0 {\n            stones.append(n)\n            n /= 2\n\
    \        } else {\n            n /= 2\n            stones.append(n)\n        }\n\
    \        level++\n    }\n    return stones\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpgxwebwxn.swift:18:15: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n            n /= 2\n            ~ ^\n/tmp/tmpgxwebwxn.swift:20:15:\
    \ error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n\
    \            n /= 2\n            ~ ^\n/tmp/tmpgxwebwxn.swift:23:14: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n        level++\n       \
    \      ^~\n"
  stdout: ''
  timestamp: 1659824580
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var currentLevel = [0]\n    for _\
    \ in 0..<n {\n        if n % 2 == 0 {\n            currentLevel.append(currentLevel[0]\
    \ + 1)\n        } else {\n            currentLevel.append(currentLevel[0])\n \
    \       }\n        n = n / 2\n    }\n    for _ in 0..<n {\n        result.append(currentLevel[0])\n\
    \        currentLevel = currentLevel[1:]\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpn53wkene.swift:25:38: error: expected ',' separator\n        currentLevel\
    \ = currentLevel[1:]\n                                     ^\n               \
    \                      ,\n/tmp/tmpn53wkene.swift:25:38: error: expected expression\
    \ in list of expressions\n        currentLevel = currentLevel[1:]\n          \
    \                           ^\n/tmp/tmpn53wkene.swift:21:9: error: cannot assign\
    \ to value: 'n' is a 'let' constant\n        n = n / 2\n        ^\n/tmp/tmpn53wkene.swift:25:36:\
    \ error: cannot assign value of type 'Int' to type '[Int]'\n        currentLevel\
    \ = currentLevel[1:]\n                       ~~~~~~~~~~~~^~~~\n"
  stdout: ''
  timestamp: 1659824580
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    if n % 2 == 0 {\n        result.append(n)\n\
    \    } else {\n        let even = n / 2\n        result.append(even)\n       \
    \ result.append(even + 1 - (n % 2))\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmp9wewme6d/tmp9wewme6d.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b24afa18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24af70fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b24af70f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b24af70e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9wewme6d                        0x0000560e09c3e4d2 <unavailable> + 5330

    5    libc.so.6                          0x00002b24afc04460 __libc_start_main +
    245

    6    tmp9wewme6d                        0x0000560e09c3e119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    if n % 2 == 0 {\n        result.append(n)\n\
    \    } else {\n        var even = make_a_pile(n/2)\n        var odd = make_a_pile(n/2\
    \ + 1)\n        for _ in 0..<n {\n            if odd % 2 == 0 {\n            \
    \    result.append(odd)\n            } else {\n                result.append(even)\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp6evycix3.swift:17:32: error: missing argument label 'n:' in call\n\
    \        var even = make_a_pile(n/2)\n                               ^\n     \
    \                          n: \n/tmp/tmp6evycix3.swift:18:31: error: missing argument\
    \ label 'n:' in call\n        var odd = make_a_pile(n/2 + 1)\n               \
    \               ^\n                              n: \n"
  stdout: ''
  timestamp: 1659824580
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var currentLevel = 0\n    var currentStones\
    \ = 0\n    for _ in 0..<n {\n        if n % 2 == 0 {\n            currentStones\
    \ += n\n        } else {\n            currentStones += n + 1\n        }\n    \
    \    result.append(currentStones)\n        currentLevel += 1\n        n = currentStones\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp_h6fagpu.swift:24:9: error: cannot assign to value: 'n' is a 'let'\
    \ constant\n        n = currentStones\n        ^\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    if n % 2 == 0 {\n        pile = pile.append(n)\n\
    \    } else {\n        var nextEven = n / 2\n        var nextOdd = nextEven /\
    \ 2\n        if nextEven % 2 == 0 {\n            pile = pile.append(nextEven)\n\
    \        } else {\n            pile = pile.append(nextOdd)\n        }\n    }\n\
    \    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp51q220uj.swift:15:21: error: cannot assign value of type '()' to\
    \ type '[Int]'\n        pile = pile.append(n)\n               ~~~~~^~~~~~~~~\n\
    /tmp/tmp51q220uj.swift:20:25: error: cannot assign value of type '()' to type\
    \ '[Int]'\n            pile = pile.append(nextEven)\n                   ~~~~~^~~~~~~~~~~~~~~~\n\
    /tmp/tmp51q220uj.swift:22:25: error: cannot assign value of type '()' to type\
    \ '[Int]'\n            pile = pile.append(nextOdd)\n                   ~~~~~^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    var stones = 0\n\
    \    while stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n\
    \            stones += 2\n        } else {\n            pile[level] = stones\n\
    \            stones += 3\n        }\n        level++\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp9m7lsn5_.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824580
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    if n % 2 == 0 {\n        pile = pile.append(n).append(n)\n\
    \    } else {\n        pile = pile.append(n).append(n).append(n)\n    }\n    return\
    \ pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) == [3,\
    \ 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5)\
    \ == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp51qymy3z.swift:15:31: error: value of tuple type '()' has no member\
    \ 'append'\n        pile = pile.append(n).append(n)\n               ~~~~~~~~~~~~~~\
    \ ^~~~~~\n/tmp/tmp51qymy3z.swift:17:31: error: value of tuple type '()' has no\
    \ member 'append'\n        pile = pile.append(n).append(n).append(n)\n       \
    \        ~~~~~~~~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var nLevels = n\n    var nStones = 0\n\
    \    while nLevels > 0 {\n        if nStones % 2 == 0 {\n            pile.append(nStones)\n\
    \        } else {\n            pile.append(nStones + 1)\n        }\n        nStones\
    \ += 1\n        nLevels -= 1\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpgstm0lts/tmpgstm0lts.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae303abbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae3037b2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae3037b2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae3037b17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgstm0lts                        0x00005571885114d2 <unavailable> + 5330

    5    libc.so.6                          0x00002ae303ca7460 __libc_start_main +
    245

    6    tmpgstm0lts                        0x0000557188511119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659824581
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [Int]()\n    var level = 0\n    while level < n\
    \ {\n        stones.append(level + 1)\n        level = level + 2\n    }\n    return\
    \ stones\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmp2aw_bgvy/tmp2aw_bgvy.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b270223ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2701f35b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2701f35988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2701f347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2aw_bgvy                        0x00005630a64f1442 <unavailable> + 5186

    5    libc.so.6                          0x00002b270242a460 __libc_start_main +
    245

    6    tmp2aw_bgvy                        0x00005630a64f1089 <unavailable> + 4233

    '
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    var stones = 0\n\
    \    while stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n\
    \            stones += 2\n        } else {\n            pile[level] = stones\n\
    \            stones += 3\n        }\n        level++\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp9m7lsn5_.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824580
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 1\n    var stones = 0\n\
    \    while stones < n {\n        if n % 2 == 0 {\n            pile = append(pile,\
    \ stones)\n            stones += 2\n        } else {\n            pile = append(pile,\
    \ stones)\n            stones += 3\n        }\n        level++\n    }\n    return\
    \ pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) == [3,\
    \ 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5)\
    \ == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpehfgw_ox.swift:18:20: error: cannot find 'append' in scope\n  \
    \          pile = append(pile, stones)\n                   ^~~~~~\n/tmp/tmpehfgw_ox.swift:21:20:\
    \ error: cannot find 'append' in scope\n            pile = append(pile, stones)\n\
    \                   ^~~~~~\n/tmp/tmpehfgw_ox.swift:24:14: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824580
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var i = 0\n    while i < n {\n     \
    \   if i % 2 == 0 {\n            pile.append(n)\n        } else {\n          \
    \  pile.append(n + i)\n        }\n        i += 1\n    }\n    return pile\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpuk7ed6kz/tmpuk7ed6kz.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9052283c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9051f7ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9051f7a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9051f797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuk7ed6kz                        0x00005652123894d2 <unavailable> + 5330

    5    libc.so.6                          0x00002b905246f460 __libc_start_main +
    245

    6    tmpuk7ed6kz                        0x0000565212389119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [Int]()\n    var currentLevel = stones\n    for\
    \ _ in 0..<n {\n        if n % 2 == 0 {\n            currentLevel.append(n)\n\
    \        } else {\n            currentLevel.append(n + currentLevel[currentLevel.count\
    \ - 1])\n        }\n        n /= 2\n    }\n    return stones\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpfovj3fwy.swift:21:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 2\n        ~ ^\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    if n % 2 == 0 {\n        pile = pile.append(n)\n\
    \    } else {\n        pile = pile.append(n).append(n)\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp2_yjo650.swift:15:21: error: cannot assign value of type '()' to\
    \ type '[Int]'\n        pile = pile.append(n)\n               ~~~~~^~~~~~~~~\n\
    /tmp/tmp2_yjo650.swift:17:31: error: value of tuple type '()' has no member 'append'\n\
    \        pile = pile.append(n).append(n)\n               ~~~~~~~~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824580
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    pile.append(n)\n    if n % 2 == 0 {\n\
    \        for _ in 1...n {\n            pile.append(n)\n        }\n    } else {\n\
    \        for _ in 1...n {\n            pile.append(n)\n        }\n    }\n    return\
    \ pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) == [3,\
    \ 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5)\
    \ == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmp7miq7anu/tmp7miq7anu.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab19ef7ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab19ec71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab19ec71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab19ec707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7miq7anu                        0x000055cf8db4c5c2 <unavailable> + 5570

    5    libc.so.6                          0x00002ab19f166460 __libc_start_main +
    245

    6    tmp7miq7anu                        0x000055cf8db4c209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824581
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var i = 0\n    while i < n {\n     \
    \   if n % 2 == 1 {\n            pile.append(n)\n            i += 2\n        }\
    \ else {\n            pile.append(n - 1)\n            i += 3\n        }\n    }\n\
    \    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpfgmur_66/tmpfgmur_66.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac0015c0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac0012b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac0012b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac0012b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfgmur_66                        0x000055c3c7ee94d2 <unavailable> + 5330

    5    libc.so.6                          0x00002ac0017ac460 __libc_start_main +
    245

    6    tmpfgmur_66                        0x000055c3c7ee9119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var currentLevel = [0]\n    var currentLevelCount\
    \ = 1\n    for _ in 0..<n {\n        if n % 2 == 0 {\n            currentLevel.append(currentLevelCount)\n\
    \            currentLevelCount = 1\n        } else {\n            currentLevelCount\
    \ *= 2\n        }\n        n /= 2\n    }\n    result.append(currentLevelCount)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpj5agf31t.swift:23:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 2\n        ~ ^\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    pile.append(n)\n    if n % 2 == 0 {\n\
    \        pile.append(n / 2)\n    }\n    if n % 2 == 1 {\n        pile.append(n\
    \ / 2 + 1)\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8,\
    \ 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpaslenwsw/tmpaslenwsw.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6e4993c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6e468ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6e468a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6e46897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaslenwsw                        0x0000561a82b7c4d2 <unavailable> + 5330

    5    libc.so.6                          0x00002ad6e4b7f460 __libc_start_main +
    245

    6    tmpaslenwsw                        0x0000561a82b7c119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659824580
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    pile.append(n)\n    if n % 2 == 0 {\n\
    \        pile.append(n / 2)\n    }\n    if n % 2 == 1 {\n        pile.append(n\
    \ / 2 + 1)\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8,\
    \ 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpaslenwsw/tmpaslenwsw.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6e4993c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6e468ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6e468a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6e46897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaslenwsw                        0x0000561a82b7c4d2 <unavailable> + 5330

    5    libc.so.6                          0x00002ad6e4b7f460 __libc_start_main +
    245

    6    tmpaslenwsw                        0x0000561a82b7c119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659824580
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var i = 0\n    for _ in 0..<n {\n  \
    \      pile.append(n)\n        i += 2\n    }\n    return pile\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmp3isuddl9/tmp3isuddl9.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af2f6fb4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af2f6cabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af2f6cab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af2f6caa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3isuddl9                        0x00005626404ea5c2 <unavailable> + 5570

    5    libc.so.6                          0x00002af2f71a0460 __libc_start_main +
    245

    6    tmp3isuddl9                        0x00005626404ea209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    if n % 2 == 0 {\n        pile = pile.append(n)\n\
    \    } else {\n        pile = pile.append(n).append(n)\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp2_yjo650.swift:15:21: error: cannot assign value of type '()' to\
    \ type '[Int]'\n        pile = pile.append(n)\n               ~~~~~^~~~~~~~~\n\
    /tmp/tmp2_yjo650.swift:17:31: error: value of tuple type '()' has no member 'append'\n\
    \        pile = pile.append(n).append(n)\n               ~~~~~~~~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824580
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var currentLevel = Int()\n    for\
    \ _ in 0..<n {\n        if n % 2 == 0 {\n            currentLevel = n + currentLevel\n\
    \        } else {\n            currentLevel = n + currentLevel + 1\n        }\n\
    \        result.append(currentLevel)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmphgk533v9/tmphgk533v9.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afcc9f03c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afcc9bfab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afcc9bfa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afcc9bf97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphgk533v9                        0x000055a018e2f5c2 <unavailable> + 5570

    5    libc.so.6                          0x00002afcca0ef460 __libc_start_main +
    245

    6    tmphgk533v9                        0x000055a018e2f209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    pile = append(pile, n, n)\n    if n\
    \ % 2 == 0 {\n        pile = append(pile, n - 1, n - 1)\n    } else {\n      \
    \  pile = append(pile, n - 1, n)\n    }\n    return pile\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpo5mbd7r3.swift:14:12: error: cannot find 'append' in scope\n  \
    \  pile = append(pile, n, n)\n           ^~~~~~\n/tmp/tmpo5mbd7r3.swift:16:16:\
    \ error: cannot find 'append' in scope\n        pile = append(pile, n - 1, n -\
    \ 1)\n               ^~~~~~\n/tmp/tmpo5mbd7r3.swift:18:16: error: cannot find\
    \ 'append' in scope\n        pile = append(pile, n - 1, n)\n               ^~~~~~\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    var stones = 0\n\
    \    while stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n\
    \            stones += 2\n        } else {\n            pile[level] = stones\n\
    \            stones += 3\n        }\n        level++\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp9m7lsn5_.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824580
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    if n % 2 == 0 {\n        pile = pile.append(n)\n\
    \    }\n    for _ in 1...n {\n        if n % 2 == 0 {\n            pile = pile.append(n)\n\
    \        } else {\n            pile = pile.append(n / 2)\n        }\n    }\n \
    \   return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp5a8aq79k.swift:15:21: error: cannot assign value of type '()' to\
    \ type '[Int]'\n        pile = pile.append(n)\n               ~~~~~^~~~~~~~~\n\
    /tmp/tmp5a8aq79k.swift:19:25: error: cannot assign value of type '()' to type\
    \ '[Int]'\n            pile = pile.append(n)\n                   ~~~~~^~~~~~~~~\n\
    /tmp/tmp5a8aq79k.swift:21:25: error: cannot assign value of type '()' to type\
    \ '[Int]'\n            pile = pile.append(n / 2)\n                   ~~~~~^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile: [Int] = []\n    var level: Int = 0\n    var stones:\
    \ Int = 0\n    while stones < n {\n        if n % 2 == 0 {\n            pile.append(stones)\n\
    \            stones += 2\n        } else {\n            pile.append(stones)\n\
    \            stones += 3\n        }\n        n /= 2\n        level++\n    }\n\
    \    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmprk0b0u43.swift:24:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 2\n        ~ ^\n/tmp/tmprk0b0u43.swift:25:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        level++\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    var stones = 0\n\
    \    while stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n\
    \            stones += 2\n        } else {\n            pile[level] = stones\n\
    \            stones += 3\n        }\n        level++\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp9m7lsn5_.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824580
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var count = 0\n    for _ in 0..<n {\n\
    \        pile.append(count)\n        count += 1\n    }\n    if n % 2 == 1 {\n\
    \        pile.append(pile[pile.count-1] + 2)\n    }\n    return pile\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpgsarndmv/tmpgsarndmv.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6395179c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6394e70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6394e70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6394e6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgsarndmv                        0x00005587d86ea672 <unavailable> + 5746

    5    libc.so.6                          0x00002b6395365460 __libc_start_main +
    245

    6    tmpgsarndmv                        0x00005587d86ea2b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1659824581
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var count = 0\n    if n % 2 == 0 {\n\
    \        for _ in 0..<n {\n            pile.append(count)\n            count +=\
    \ 1\n        }\n    } else {\n        for _ in 0..<n {\n            pile.append(count\
    \ + 1)\n            count += 1\n        }\n    }\n    return pile\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpsffu91r6/tmpsffu91r6.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b394a229c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3949f20b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3949f20988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3949f1f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsffu91r6                        0x000056495f8e95c2 <unavailable> + 5570

    5    libc.so.6                          0x00002b394a415460 __libc_start_main +
    245

    6    tmpsffu91r6                        0x000056495f8e9209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var level = 0\n    var stones = 0\n\
    \    while stones < n {\n        if n % 2 == 0 {\n            stones += 2\n  \
    \      } else {\n            stones += 1\n        }\n        result[level] = stones\n\
    \        n /= 2\n        level += 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmptjkv0a7k.swift:23:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 2\n        ~ ^\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    pile = append(pile, n / 2)\n    if n\
    \ % 2 == 0 {\n        pile = append(pile, n / 2)\n    } else {\n        pile =\
    \ append(pile, n / 2)\n        pile = append(pile, n / 2)\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp2uqx4rdu.swift:14:12: error: cannot find 'append' in scope\n  \
    \  pile = append(pile, n / 2)\n           ^~~~~~\n/tmp/tmp2uqx4rdu.swift:16:16:\
    \ error: cannot find 'append' in scope\n        pile = append(pile, n / 2)\n \
    \              ^~~~~~\n/tmp/tmp2uqx4rdu.swift:18:16: error: cannot find 'append'\
    \ in scope\n        pile = append(pile, n / 2)\n               ^~~~~~\n/tmp/tmp2uqx4rdu.swift:19:16:\
    \ error: cannot find 'append' in scope\n        pile = append(pile, n / 2)\n \
    \              ^~~~~~\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    var stones = 0\n\
    \    while stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n\
    \            stones += 2\n        } else {\n            pile[level] = stones\n\
    \            stones += 3\n        }\n        level++\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp9m7lsn5_.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824580
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var count = 0\n    for _ in 0..<n {\n\
    \        if n % 2 == 0 {\n            pile.append(count + 1)\n            count\
    \ += 1\n        } else {\n            pile.append(count - 1)\n            count\
    \ -= 1\n        }\n        n /= 2\n    }\n    return pile\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpq36xsq7_.swift:23:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 2\n        ~ ^\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 1\n    while level < n {\n\
    \        if n % 2 == 0 {\n            pile.append(level)\n            n /= 2\n\
    \        } else {\n            pile.append(level + 1)\n            n /= 2\n  \
    \      }\n        level++\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpcs_o_ymu.swift:18:15: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n            n /= 2\n            ~ ^\n/tmp/tmpcs_o_ymu.swift:21:15:\
    \ error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n\
    \            n /= 2\n            ~ ^\n/tmp/tmpcs_o_ymu.swift:23:14: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n        level++\n       \
    \      ^~\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    var stones = 0\n\
    \    while stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n\
    \            stones += 2\n        } else {\n            pile[level] = stones\n\
    \            stones += 3\n        }\n        level++\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp9m7lsn5_.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824580
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var currentLevel = n - 1\n    var\
    \ nextLevel = n - 1\n    var nextOdd = 0\n    var nextEven = 0\n    for _ in 0..<n\
    \ {\n        if nextLevel % 2 == 0 {\n            nextEven = nextEven + 1\n  \
    \      } else {\n            nextOdd = nextOdd + 1\n        }\n        nextLevel\
    \ = nextLevel - 1\n    }\n    result.append(nextOdd)\n    result.append(nextEven)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmppcq_qy0w/tmppcq_qy0w.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b017d4adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b017d1a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b017d1a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b017d1a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppcq_qy0w                        0x000055f82d7925c2 <unavailable> + 5570

    5    libc.so.6                          0x00002b017d699460 __libc_start_main +
    245

    6    tmppcq_qy0w                        0x000055f82d792209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    var stones = 0\n\
    \    while stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n\
    \            stones += 2\n        } else {\n            pile[level] = stones\n\
    \            stones += 3\n        }\n        level++\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp9m7lsn5_.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824580
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 1\n    var stones = 0\n\
    \    while stones < n {\n        if n % 2 == 0 {\n            pile.append(stones)\n\
    \            stones += 2\n        } else {\n            pile.append(stones)\n\
    \            stones += 3\n        }\n        level++\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpx8j8dw4m.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 1\n    var stones = n\n\
    \    while stones > 0 {\n        pile.append(stones)\n        if stones % 2 ==\
    \ 0 {\n            stones /= 2\n        } else {\n            stones /= 2\n  \
    \          pile.append(stones)\n        }\n        level++\n    }\n    return\
    \ pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) == [3,\
    \ 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5)\
    \ == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpsg3ltkur.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    pile.append(n)\n    if n % 2 == 0 {\n\
    \        pile.append(pile[n/2] + pile[n/2 - 1])\n    } else {\n        pile.append(pile[n/2])\n\
    \    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae733546c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae73323d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae73323d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae73323d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae73323cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae73303ce83 <unavailable> + 188035

    6    tmpul1gf6lm                        0x000056179ca44c43 <unavailable> + 7235

    7    tmpul1gf6lm                        0x000056179ca4444b <unavailable> + 5195

    8    libc.so.6                          0x00002ae733732460 __libc_start_main +
    245

    9    tmpul1gf6lm                        0x000056179ca44169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659824581
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    pile.append(n)\n    if n % 2 == 0 {\n\
    \        pile.append(n / 2)\n    } else {\n        pile.append(n / 2 + 1)\n  \
    \  }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmp9a65przj/tmp9a65przj.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab4cb2e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab4cafddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab4cafdd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4cafdc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9a65przj                        0x000055b1088044d2 <unavailable> + 5330

    5    libc.so.6                          0x00002ab4cb4d2460 __libc_start_main +
    245

    6    tmp9a65przj                        0x000055b108804119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659824581
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    pile.append(n)\n    if n % 2 == 0 {\n\
    \        pile.append(n / 2)\n    }\n    for _ in 1...n {\n        pile.append(n\
    \ / 2)\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmp2exuswqq/tmp2exuswqq.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b90eda38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b90ed72fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b90ed72f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b90ed72e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2exuswqq                        0x000055d13de415c2 <unavailable> + 5570

    5    libc.so.6                          0x00002b90edc24460 __libc_start_main +
    245

    6    tmp2exuswqq                        0x000055d13de41209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [0]\n    var level = 0\n    while stones.count\
    \ < n {\n        if n % 2 == 0 {\n            stones.append(stones.last! + 2)\n\
    \        } else {\n            stones.append(stones.last! + 1)\n        }\n  \
    \      n /= 2\n        level++\n    }\n    return stones\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpwc9w7300.swift:21:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 2\n        ~ ^\n/tmp/tmpwc9w7300.swift:22:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        level++\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1659824580
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    pile.append(n)\n    if n % 2 == 0 {\n\
    \        pile.append(n / 2)\n    }\n    for _ in 1...n {\n        pile.append(n\
    \ / 2)\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmp2exuswqq/tmp2exuswqq.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b90eda38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b90ed72fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b90ed72f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b90ed72e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2exuswqq                        0x000055d13de415c2 <unavailable> + 5570

    5    libc.so.6                          0x00002b90edc24460 __libc_start_main +
    245

    6    tmp2exuswqq                        0x000055d13de41209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 1\n    var stones = n\n\
    \    while stones > 0 {\n        if stones % 2 == 1 {\n            pile.append(stones)\n\
    \            stones = stones / 2\n        } else {\n            pile.append(stones)\n\
    \            stones = stones / 2\n            pile.append(stones)\n          \
    \  stones = stones / 2\n        }\n        level++\n    }\n    return pile\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpanjhpccu.swift:26:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    while n > 0 {\n \
    \       pile.append(n)\n        if n % 2 == 0 {\n            n /= 2\n        }\
    \ else {\n            n = 3 * n + 1\n        }\n        level++\n    }\n    return\
    \ pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) == [3,\
    \ 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5)\
    \ == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpe62nhrd1.swift:18:15: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n            n /= 2\n            ~ ^\n/tmp/tmpe62nhrd1.swift:20:13:\
    \ error: cannot assign to value: 'n' is a 'let' constant\n            n = 3 *\
    \ n + 1\n            ^\n/tmp/tmpe62nhrd1.swift:22:14: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    pile.append(n)\n    if n % 2 == 0 {\n\
    \        pile.append(n/2)\n    } else {\n        pile.append(n+1)\n    }\n   \
    \ return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmploxwdxl_/tmploxwdxl_.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4c4a856c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4c4a54db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4c4a54d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4c4a54c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmploxwdxl_                        0x000055f342afc4d2 <unavailable> + 5330

    5    libc.so.6                          0x00002b4c4aa42460 __libc_start_main +
    245

    6    tmploxwdxl_                        0x000055f342afc119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile: [Int] = []\n    var level: Int = 0\n    var stones:\
    \ Int = 0\n    for _ in 0..<n {\n        pile.append(stones)\n        if n % 2\
    \ == 0 {\n            stones += 2\n        } else {\n            stones += 1\n\
    \        }\n        n /= 2\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpd73mf86w.swift:23:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 2\n        ~ ^\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [0]\n    var level = 0\n    while stones.count\
    \ < n {\n        if n % 2 == 0 {\n            stones.append(stones.last! + 2)\n\
    \        } else {\n            stones.append(stones.last! + 1)\n        }\n  \
    \      n /= 2\n        level++\n    }\n    return stones\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpwc9w7300.swift:21:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 2\n        ~ ^\n/tmp/tmpwc9w7300.swift:22:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        level++\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1659824580
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var i = 0\n    for _ in 0..<n {\n  \
    \      pile.append(i)\n        if i % 2 == 0 {\n            i += 2\n        }\
    \ else {\n            i += 1\n        }\n    }\n    return pile\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpj2so7c9a/tmpj2so7c9a.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab00f9a5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab00f69cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab00f69c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab00f69b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj2so7c9a                        0x0000559609d0e5c2 <unavailable> + 5570

    5    libc.so.6                          0x00002ab00fb91460 __libc_start_main +
    245

    6    tmpj2so7c9a                        0x0000559609d0e209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    if n % 2 == 1 {\n        result.append(n)\n\
    \    }\n    for _ in 1...n {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        }\n        n = n / 2\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp8ohkoszz.swift:21:9: error: cannot assign to value: 'n' is a 'let'\
    \ constant\n        n = n / 2\n        ^\n"
  stdout: ''
  timestamp: 1659824580
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    while n > 0 {\n \
    \       pile[level] = n\n        n -= n % 2 == 0 ? 2 : 3\n        level++\n  \
    \  }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp1xj6tvyh.swift:17:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n -= n % 2 == 0 ? 2 : 3\n        ~\
    \ ^\n/tmp/tmp1xj6tvyh.swift:18:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    if n % 2 == 0 {\n        pile = pile.append(n)\n\
    \    }\n    for _ in 1...n {\n        if n % 2 == 0 {\n            pile = pile.append(n)\n\
    \        }\n        n /= 2\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpy1wz65vu.swift:15:21: error: cannot assign value of type '()' to\
    \ type '[Int]'\n        pile = pile.append(n)\n               ~~~~~^~~~~~~~~\n\
    /tmp/tmpy1wz65vu.swift:19:25: error: cannot assign value of type '()' to type\
    \ '[Int]'\n            pile = pile.append(n)\n                   ~~~~~^~~~~~~~~\n\
    /tmp/tmpy1wz65vu.swift:21:11: error: left side of mutating operator isn't mutable:\
    \ 'n' is a 'let' constant\n        n /= 2\n        ~ ^\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    var stones = 0\n\
    \    while stones < n {\n        pile[level] = stones\n        stones += (n %\
    \ 2 == 0) ? 1 : 2\n        n /= 2\n        level++\n    }\n    return pile\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpb7m0gdf7.swift:19:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 2\n        ~ ^\n/tmp/tmpb7m0gdf7.swift:20:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        level++\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var stones = n\n    if n % 2 == 0 {\n\
    \        stones += n / 2\n    } else {\n        stones += n / 2 + 1\n    }\n \
    \   for _ in 0..<stones {\n        pile.append(stones)\n        stones *= 2\n\
    \    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmppkd9oxm6/tmppkd9oxm6.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b61f7a21c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b61f7718b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b61f7718988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b61f77177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppkd9oxm6                        0x000055c2175f15c2 <unavailable> + 5570

    5    libc.so.6                          0x00002b61f7c0d460 __libc_start_main +
    245

    6    tmppkd9oxm6                        0x000055c2175f1209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile: [Int] = []\n    var level: Int = 0\n    var stones:\
    \ Int = 0\n    while stones < n {\n        if n % 2 == 0 {\n            pile[level]\
    \ = stones\n            stones += 2\n        } else {\n            pile[level]\
    \ = stones\n            stones += 3\n        }\n        level++\n    }\n    return\
    \ pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) == [3,\
    \ 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5)\
    \ == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpmroj7psj.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [0]\n    var level = 1\n    var nextLevel = nextLevelOf(n)\n\
    \    var stonesInNextLevel = 0\n    var stonesInCurrentLevel = 0\n    var currentLevel\
    \ = stones\n    while nextLevel != 0 {\n        stonesInNextLevel = nextLevel\
    \ % 2 == 0 ? nextLevel : nextLevel - 1\n        stonesInCurrentLevel = level %\
    \ 2 == 0 ? level : level - 1\n        currentLevel = stones\n        stones =\
    \ append(stones, stonesInNextLevel)\n        level = level + stonesInCurrentLevel\n\
    \        nextLevel = nextLevelOf(n)\n    }\n    return stones\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpzcr0w_49.swift:15:21: error: cannot find 'nextLevelOf' in scope\n\
    \    var nextLevel = nextLevelOf(n)\n                    ^~~~~~~~~~~\n/tmp/tmpzcr0w_49.swift:23:18:\
    \ error: cannot find 'append' in scope\n        stones = append(stones, stonesInNextLevel)\n\
    \                 ^~~~~~\n/tmp/tmpzcr0w_49.swift:25:21: error: cannot find 'nextLevelOf'\
    \ in scope\n        nextLevel = nextLevelOf(n)\n                    ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    if n % 2 == 0 {\n        result.append(n)\n\
    \    }\n    for _ in 1...n {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        } else {\n            result.append(n * 2)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmp7zx1zhap/tmp7zx1zhap.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b40f8783c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b40f847ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b40f847a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b40f84797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7zx1zhap                        0x000055859d7c85c2 <unavailable> + 5570

    5    libc.so.6                          0x00002b40f896f460 __libc_start_main +
    245

    6    tmp7zx1zhap                        0x000055859d7c8209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824581
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    for _ in 0..<n {\n        if n % 2\
    \ == 0 {\n            result.append(n)\n        } else {\n            result.append(n\
    \ + n/2)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpcpy9tg_g/tmpcpy9tg_g.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1dc364ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1dc3345b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1dc3345988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1dc33447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcpy9tg_g                        0x00005639394185c2 <unavailable> + 5570

    5    libc.so.6                          0x00002b1dc383a460 __libc_start_main +
    245

    6    tmpcpy9tg_g                        0x0000563939418209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824581
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    for _ in 0..<n {\n        if n % 2\
    \ == 0 {\n            result.append(n)\n        } else {\n            result.append(n\
    \ + n/2)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpcpy9tg_g/tmpcpy9tg_g.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1dc364ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1dc3345b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1dc3345988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1dc33447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcpy9tg_g                        0x00005639394185c2 <unavailable> + 5570

    5    libc.so.6                          0x00002b1dc383a460 __libc_start_main +
    245

    6    tmpcpy9tg_g                        0x0000563939418209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    if n % 2 == 0 {\n        result.append(n)\n\
    \    }\n    for _ in 1...n {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        }\n        n = n / 2\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8,\
    \ 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp02r0w61s.swift:21:9: error: cannot assign to value: 'n' is a 'let'\
    \ constant\n        n = n / 2\n        ^\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [Int]()\n    var level = 0\n    var stone = 0\n\
    \    while stone < n {\n        if n % 2 == 0 {\n            stones.append(stone)\n\
    \            stone = 0\n        } else {\n            stone += 2\n        }\n\
    \        level += 1\n    }\n    return stones\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmp97ir7glu/tmp97ir7glu.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadd1c89c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadd1980b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadd1980988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadd197f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp97ir7glu                        0x000055c9ba2e14d2 <unavailable> + 5330

    5    libc.so.6                          0x00002aadd1e75460 __libc_start_main +
    245

    6    tmp97ir7glu                        0x000055c9ba2e1119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659824581
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var currentLevel = [0]\n    var currentLevelCount\
    \ = 1\n    var currentLevelStones = n\n\n    while currentLevelStones <= n {\n\
    \        if currentLevelStones % 2 == 0 {\n            currentLevel.append(currentLevelStones)\n\
    \            currentLevelStones = currentLevelStones >> 1\n        } else {\n\
    \            currentLevel.append(currentLevelStones)\n            currentLevelStones\
    \ = currentLevelStones >> 1\n            currentLevelCount = currentLevelCount\
    \ + 1\n        }\n    }\n\n    for _ in 0..<currentLevelCount {\n        pile.append(currentLevelCount)\n\
    \    }\n\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824587
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [Int]()\n    var level = 0\n    var stones_in_level\
    \ = 0\n    while stones_in_level < n {\n        stones.append(stones_in_level)\n\
    \        stones_in_level += (n % 2 == 0 ? 1 : 2)\n        n /= 2\n        level++\n\
    \    }\n    return stones\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmps7nfue95.swift:19:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 2\n        ~ ^\n/tmp/tmps7nfue95.swift:20:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        level++\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [Int]()\n    var level = 0\n    while level < n\
    \ {\n        if n % 2 == 0 {\n            stones.append(n)\n            n /= 2\n\
    \        } else {\n            n /= 2\n            stones.append(n)\n        }\n\
    \        level++\n    }\n    return stones\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpgxwebwxn.swift:18:15: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n            n /= 2\n            ~ ^\n/tmp/tmpgxwebwxn.swift:20:15:\
    \ error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n\
    \            n /= 2\n            ~ ^\n/tmp/tmpgxwebwxn.swift:23:14: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n        level++\n       \
    \      ^~\n"
  stdout: ''
  timestamp: 1659824580
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [Int]()\n    var levels = [Int]()\n    var nextLevel\
    \ = n / 2\n    if n % 2 == 0 {\n        nextLevel = nextLevel + 1\n    }\n   \
    \ levels.append(nextLevel)\n    stones.append(nextLevel)\n    for _ in 1...n {\n\
    \        nextLevel = nextLevel / 2\n        if nextLevel % 2 == 0 {\n        \
    \    nextLevel = nextLevel + 1\n        }\n        levels.append(nextLevel)\n\
    \        stones.append(nextLevel)\n    }\n    return stones\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmp0utl73bf/tmp0utl73bf.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8b35ef3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8b35beab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8b35bea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8b35be97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0utl73bf                        0x000055e6ad5215c2 <unavailable> + 5570

    5    libc.so.6                          0x00002b8b360df460 __libc_start_main +
    245

    6    tmp0utl73bf                        0x000055e6ad521209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824581
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var i = 0\n    while i < n {\n     \
    \   pile.append(n)\n        i += 2\n    }\n    return pile\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpi3tjkdjj/tmpi3tjkdjj.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b586235ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5862055b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5862055988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b58620547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi3tjkdjj                        0x000055ccfafe0442 <unavailable> + 5186

    5    libc.so.6                          0x00002b586254a460 __libc_start_main +
    245

    6    tmpi3tjkdjj                        0x000055ccfafe0089 <unavailable> + 4233

    '
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var count = 0\n    for _ in 0..<n {\n\
    \        if n % 2 == 0 {\n            pile.append(count + 1)\n            count\
    \ += 1\n        } else {\n            pile.append(count - 1)\n            count\
    \ -= 1\n        }\n        n /= 2\n    }\n    return pile\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpq36xsq7_.swift:23:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 2\n        ~ ^\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    while n > 0 {\n \
    \       pile.append(n)\n        n = n % 2 == 0 ? n / 2 : 3 * n + 1\n        level++\n\
    \    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp5d8eto7n.swift:17:9: error: cannot assign to value: 'n' is a 'let'\
    \ constant\n        n = n % 2 == 0 ? n / 2 : 3 * n + 1\n        ^\n/tmp/tmp5d8eto7n.swift:18:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        level++\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    if n % 2 == 0 {\n        pile = pile.append(n)\n\
    \    }\n    for _ in 0..<n / 2 {\n        pile = pile.append(n)\n    }\n    return\
    \ pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) == [3,\
    \ 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5)\
    \ == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpueprkinj.swift:15:21: error: cannot assign value of type '()' to\
    \ type '[Int]'\n        pile = pile.append(n)\n               ~~~~~^~~~~~~~~\n\
    /tmp/tmpueprkinj.swift:18:21: error: cannot assign value of type '()' to type\
    \ '[Int]'\n        pile = pile.append(n)\n               ~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    var stones = 0\n\
    \    while stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n\
    \            stones += 2\n        } else {\n            pile[level] = stones\n\
    \            stones += 3\n        }\n        level++\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp9m7lsn5_.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824580
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    pile.append(n)\n    if n % 2 == 1 {\n\
    \        pile.append(pile[n/2] + pile[n/2 - 1])\n    }\n    return pile\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b1cf5951c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1cf5648561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b1cf5648286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b1cf564813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b1cf5647bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b1cf5447e83 <unavailable> + 188035

    6    tmp6afiptr9                        0x0000556bd60d1aac <unavailable> + 6828

    7    tmp6afiptr9                        0x0000556bd60d144b <unavailable> + 5195

    8    libc.so.6                          0x00002b1cf5b3d460 __libc_start_main +
    245

    9    tmp6afiptr9                        0x0000556bd60d1169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659824582
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var level = 0\n    var stones = n\n\
    \    while stones > 0 {\n        if stones % 2 == 0 {\n            result.append(stones)\n\
    \            stones /= 2\n        } else {\n            result.append(stones)\n\
    \            stones /= 2\n            stones += 1\n        }\n        level++\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp317zf_hd.swift:25:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    while n > 0 {\n \
    \       pile.append(n)\n        n -= n % 2 == 0 ? 2 : 3\n        level += 1\n\
    \    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp1s_e4m9z.swift:17:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n -= n % 2 == 0 ? 2 : 3\n        ~\
    \ ^\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    if n % 2 == 0 {\n        result.append(n)\n\
    \    }\n    for _ in 1...n {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        }\n        n += 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp95z4q09v.swift:21:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n += 2\n        ~ ^\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [0]\n    for _ in 0..<n {\n        stones.append(stones.last!\
    \ + 2)\n    }\n    return stones\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpej_4981j/tmpej_4981j.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1cb8b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1cb5a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1cb5a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1cb5a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpej_4981j                        0x000055d03d79a602 <unavailable> + 5634

    5    libc.so.6                          0x00002ae1cba9c460 __libc_start_main +
    245

    6    tmpej_4981j                        0x000055d03d79a249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824582
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    while n != 0 {\n\
    \        pile[level] = n\n        n -= n % 2 == 0 ? n / 2 : n / 2 + 1\n      \
    \  level++\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8,\
    \ 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp6rhui199.swift:17:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n -= n % 2 == 0 ? n / 2 : n / 2 +\
    \ 1\n        ~ ^\n/tmp/tmp6rhui199.swift:18:14: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824583
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    var stones = 0\n\
    \    while stones < n {\n        pile[level] = stones\n        if n % 2 == 0 {\n\
    \            stones += 2\n        } else {\n            stones += 3\n        }\n\
    \        n /= 2\n        level++\n    }\n    return pile\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp___f7d2l.swift:23:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 2\n        ~ ^\n/tmp/tmp___f7d2l.swift:24:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        level++\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    if n % 2 == 0 {\n        result.append(n)\n\
    \    }\n    if n % 2 != 0 {\n        result.append(n)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpfmkerhv0/tmpfmkerhv0.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b257edacc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b257eaa3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b257eaa3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b257eaa27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfmkerhv0                        0x0000555bec9724d2 <unavailable> + 5330

    5    libc.so.6                          0x00002b257ef98460 __libc_start_main +
    245

    6    tmpfmkerhv0                        0x0000555bec972119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659824582
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    var stones = n\n\
    \    while stones > 0 {\n        if stones % 2 == 0 {\n            pile[level]\
    \ = stones\n            stones /= 2\n        } else {\n            pile[level]\
    \ = stones\n            stones /= 2\n            pile[level+1] = stones\n    \
    \        stones /= 2\n        }\n        level++\n    }\n    return pile\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpfk6t6yw6.swift:26:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [Int]()\n    if n % 2 == 1 {\n        stones.append(n)\n\
    \    }\n    for _ in 1...n / 2 {\n        stones.append(n % 2 == 0 ? n + 1 : n)\n\
    \    }\n    return stones\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmphmsoiefd/tmphmsoiefd.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002add14010c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002add13d07b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002add13d07988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002add13d067b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphmsoiefd                        0x000055c0549cb5c2 <unavailable> + 5570

    5    libc.so.6                          0x00002add141fc460 __libc_start_main +
    245

    6    tmphmsoiefd                        0x000055c0549cb209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824582
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    if n % 2 == 1 {\n        pile = pile.append(n)\n\
    \    }\n    for _ in 0..<n / 2 {\n        pile = pile.append(n)\n    }\n    return\
    \ pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) == [3,\
    \ 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5)\
    \ == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp5tfq24hk.swift:15:21: error: cannot assign value of type '()' to\
    \ type '[Int]'\n        pile = pile.append(n)\n               ~~~~~^~~~~~~~~\n\
    /tmp/tmp5tfq24hk.swift:18:21: error: cannot assign value of type '()' to type\
    \ '[Int]'\n        pile = pile.append(n)\n               ~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [0]\n    var level = 0\n    var levels = [Int]()\n\
    \    while stones.count < n {\n        if n % 2 == 0 {\n            stones.append(stones.last!\
    \ + 2)\n        } else {\n            stones.append(stones.last! + 3)\n      \
    \  }\n        n /= 2\n        level += 1\n        levels.append(stones.last!)\n\
    \    }\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpggjz_u53.swift:22:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 2\n        ~ ^\n"
  stdout: ''
  timestamp: 1659824582
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    if n % 2 == 0 {\n        result.append(n)\n\
    \    }\n    for _ in 1...n {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        } else {\n            result.append(n / 2)\n        }\n        n = n\
    \ / 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpzce2zcrs.swift:23:9: error: cannot assign to value: 'n' is a 'let'\
    \ constant\n        n = n / 2\n        ^\n"
  stdout: ''
  timestamp: 1659824580
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [Int]()\n    var level = 0\n    while level < n\
    \ {\n        stones.append(level)\n        if n % 2 == 0 {\n            level\
    \ += 1\n        } else {\n            level += 2\n        }\n    }\n    return\
    \ stones\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmp10d5jjim/tmp10d5jjim.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b61fba23c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b61fb71ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b61fb71a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b61fb7197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp10d5jjim                        0x000055b6dac5f4d2 <unavailable> + 5330

    5    libc.so.6                          0x00002b61fbc0f460 __libc_start_main +
    245

    6    tmp10d5jjim                        0x000055b6dac5f119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659824582
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    if n % 2 == 0 {\n        pile = pile.append(n)\n\
    \    }\n    for _ in 1...n {\n        if n % 2 == 0 {\n            pile = pile.append(n)\n\
    \        } else {\n            pile = pile.append(n / 2)\n        }\n    }\n \
    \   return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp5a8aq79k.swift:15:21: error: cannot assign value of type '()' to\
    \ type '[Int]'\n        pile = pile.append(n)\n               ~~~~~^~~~~~~~~\n\
    /tmp/tmp5a8aq79k.swift:19:25: error: cannot assign value of type '()' to type\
    \ '[Int]'\n            pile = pile.append(n)\n                   ~~~~~^~~~~~~~~\n\
    /tmp/tmp5a8aq79k.swift:21:25: error: cannot assign value of type '()' to type\
    \ '[Int]'\n            pile = pile.append(n / 2)\n                   ~~~~~^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824581
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    var stones = 0\n\
    \    while stones < n {\n        pile[level] = stones\n        stones += (n %\
    \ 2 == 0) ? 1 : -1\n        n /= 2\n        level++\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp2wc1pyws.swift:19:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 2\n        ~ ^\n/tmp/tmp2wc1pyws.swift:20:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        level++\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1659824582
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var currentLevel = 0\n    var nextLevel\
    \ = 0\n    var nextLevelNextOdd = 0\n    var nextLevelNextEven = 0\n    for _\
    \ in 0..<n {\n        if n % 2 == 0 {\n            nextLevelNextEven = nextLevelNextEven\
    \ + 1\n        } else {\n            nextLevelNextOdd = nextLevelNextOdd + 1\n\
    \        }\n        nextLevel = nextLevel + nextLevelNextOdd + nextLevelNextEven\n\
    \        result.append(nextLevel)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpi2q0dfrp/tmpi2q0dfrp.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba06eeafc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba06eba6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba06eba6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba06eba57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi2q0dfrp                        0x0000559e3984d5c2 <unavailable> + 5570

    5    libc.so.6                          0x00002ba06f09b460 __libc_start_main +
    245

    6    tmpi2q0dfrp                        0x0000559e3984d209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824582
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    pile.append(n)\n    if n % 2 == 0 {\n\
    \        pile.append(pile[n/2] + pile[n/2 - 1])\n    } else {\n        pile.append(pile[n/2]\
    \ + pile[n/2 + 1])\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b4fd9cc8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4fd99bf561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b4fd99bf286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b4fd99bf13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b4fd99bebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b4fd97bee83 <unavailable> + 188035

    6    tmp__ps4gt5                        0x00005584f35ffc4c <unavailable> + 7244

    7    tmp__ps4gt5                        0x00005584f35ff44b <unavailable> + 5195

    8    libc.so.6                          0x00002b4fd9eb4460 __libc_start_main +
    245

    9    tmp__ps4gt5                        0x00005584f35ff169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659824582
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [Int]()\n    var level = 0\n    while level < n\
    \ {\n        if n % 2 == 0 {\n            stones.append(n)\n            n /= 2\n\
    \        } else {\n            n /= 2\n            stones.append(n)\n        }\n\
    \        level++\n    }\n    return stones\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpgxwebwxn.swift:18:15: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n            n /= 2\n            ~ ^\n/tmp/tmpgxwebwxn.swift:20:15:\
    \ error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n\
    \            n /= 2\n            ~ ^\n/tmp/tmpgxwebwxn.swift:23:14: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n        level++\n       \
    \      ^~\n"
  stdout: ''
  timestamp: 1659824580
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    var stones = 0\n\
    \    while stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n\
    \            stones += 2\n        } else {\n            pile[level] = stones\n\
    \            stones += 3\n        }\n        level++\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp9m7lsn5_.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824580
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    var stones = 0\n\
    \    while stones < n {\n        pile[level] = stones\n        stones += (n %\
    \ 2 == 0) ? 1 : -1\n        n /= 2\n        level++\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp2wc1pyws.swift:19:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 2\n        ~ ^\n/tmp/tmp2wc1pyws.swift:20:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        level++\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1659824582
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    var stones = 0\n\
    \    while stones < n {\n        if n % 2 == 0 {\n            pile.append(stones)\n\
    \            stones += 2\n        } else {\n            pile.append(stones)\n\
    \            stones += 3\n        }\n        n /= 2\n        level++\n    }\n\
    \    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpgeewwhf3.swift:24:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 2\n        ~ ^\n/tmp/tmpgeewwhf3.swift:25:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        level++\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1659824582
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var currentLevel = [0]\n    var currentLevelCount\
    \ = 1\n    for _ in 0..<n {\n        if n % 2 == 0 {\n            pile.append(currentLevelCount)\n\
    \            currentLevelCount += 1\n        } else {\n            pile.append(currentLevelCount)\n\
    \            currentLevelCount += 2\n        }\n        n -= 1\n    }\n    return\
    \ pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) == [3,\
    \ 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5)\
    \ == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpo4ey0b9l.swift:24:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n -= 1\n        ~ ^\n"
  stdout: ''
  timestamp: 1659824582
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    if n % 2 == 0 {\n        pile = pile.append(n)\n\
    \    } else {\n        pile = pile.append(n).append(n)\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp2_yjo650.swift:15:21: error: cannot assign value of type '()' to\
    \ type '[Int]'\n        pile = pile.append(n)\n               ~~~~~^~~~~~~~~\n\
    /tmp/tmp2_yjo650.swift:17:31: error: value of tuple type '()' has no member 'append'\n\
    \        pile = pile.append(n).append(n)\n               ~~~~~~~~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824580
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [Int]()\n    var stone = 0\n    var level = 0\n\
    \    while stone < n {\n        if n % 2 == 0 {\n            stones.append(stone)\n\
    \            stone = 0\n            level += 1\n        } else {\n           \
    \ stone += 2\n        }\n    }\n    return stones\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmp2kyaqomh/tmp2kyaqomh.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b662740cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6627103b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6627103988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b66271027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2kyaqomh                        0x000055fadbc7b4d2 <unavailable> + 5330

    5    libc.so.6                          0x00002b66275f8460 __libc_start_main +
    245

    6    tmp2kyaqomh                        0x000055fadbc7b119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659824582
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var count = 0\n    for _ in 0..<n {\n\
    \        if n % 2 == 0 {\n            pile.append(count)\n            count +=\
    \ 1\n        } else {\n            pile.append(count + 1)\n            count +=\
    \ 1\n        }\n        n /= 2\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpf7cbcoh5.swift:23:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 2\n        ~ ^\n"
  stdout: ''
  timestamp: 1659824582
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    if n % 2 == 0 {\n        result.append(n)\n\
    \    }\n    for _ in 1...n {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        } else {\n            result.append(n + 1)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmp_yda_k5n/tmp_yda_k5n.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab779f5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab779c55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab779c55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab779c547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_yda_k5n                        0x0000564c17f345c2 <unavailable> + 5570

    5    libc.so.6                          0x00002ab77a14a460 __libc_start_main +
    245

    6    tmp_yda_k5n                        0x0000564c17f34209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824582
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [Int]()\n    var level = 0\n    var nextLevel =\
    \ 0\n    var nextOdd = 0\n    var nextEven = 0\n    while nextLevel < n {\n  \
    \      nextLevel = nextLevel + nextOdd + nextEven\n        nextOdd = nextOdd +\
    \ nextEven\n        nextEven = nextEven + nextOdd\n        stones.append(nextLevel)\n\
    \        level = level + 1\n    }\n    return stones\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824587
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [Int]()\n    var level = 0\n    var stone = 0\n\
    \    while stone < n {\n        if n % 2 == 0 {\n            stones.append(stone)\n\
    \            stone = 0\n        } else {\n            stone += 2\n        }\n\
    \        level++\n    }\n    return stones\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpgqznj1ux.swift:23:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824582
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [Int]()\n    var level = 0\n    var stones_in_level\
    \ = n\n\n    while stones_in_level > 0 {\n        if stones_in_level % 2 == 0\
    \ {\n            stones.append(stones_in_level)\n            stones_in_level =\
    \ stones_in_level / 2\n        } else {\n            stones.append(stones_in_level)\n\
    \            stones_in_level = stones_in_level / 2 + stones_in_level % 2\n   \
    \     }\n        level++\n    }\n    return stones\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp5_bqon02.swift:25:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824582
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var currentLevel = Int(n)\n    var\
    \ nextLevel = Int(n)\n    if n % 2 == 1 {\n        nextLevel = Int(n) + 1\n  \
    \  }\n    for _ in 0..<nextLevel {\n        result.append(currentLevel)\n    \
    \    currentLevel = currentLevel * 2\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpkopxbp3u/tmpkopxbp3u.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a7ccc0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a7c9b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a7c9b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a7c9b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkopxbp3u                        0x0000558cb0df16f2 <unavailable> + 5874

    5    libc.so.6                          0x00002b4a7ceac460 __libc_start_main +
    245

    6    tmpkopxbp3u                        0x0000558cb0df1339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659824582
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    var stones = n\n\
    \    while stones > 0 {\n        if stones % 2 == 1 {\n            pile[level]\
    \ = stones\n            stones /= 2\n        } else {\n            pile[level]\
    \ = stones\n            stones /= 2\n            pile[level+1] = stones\n    \
    \        stones /= 2\n        }\n        level++\n    }\n    return pile\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpz_iruuwf.swift:26:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824580
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var currentLevel = n / 2\n    var currentLevelStones\
    \ = n\n    if n % 2 == 1 {\n        currentLevelStones = currentLevelStones *\
    \ 2\n    }\n    for _ in 0..<currentLevel {\n        pile.append(currentLevelStones)\n\
    \        currentLevelStones = currentLevelStones / 2\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpe7skk7un/tmpe7skk7un.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af87bbaec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af87b8a5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af87b8a5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af87b8a47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe7skk7un                        0x000055a7168375c2 <unavailable> + 5570

    5    libc.so.6                          0x00002af87bd9a460 __libc_start_main +
    245

    6    tmpe7skk7un                        0x000055a716837209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824582
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    while n != 0 {\n\
    \        pile[level] = n\n        n -= n % 2 == 0 ? 2 : 3\n        level++\n \
    \   }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp17k_i53c.swift:17:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n -= n % 2 == 0 ? 2 : 3\n        ~\
    \ ^\n/tmp/tmp17k_i53c.swift:18:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824582
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    while n != 0 {\n\
    \        pile.append(n)\n        n -= n % 2 == 0 ? 2 : 3\n        level++\n  \
    \  }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpsmm1c1da.swift:17:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n -= n % 2 == 0 ? 2 : 3\n        ~\
    \ ^\n/tmp/tmpsmm1c1da.swift:18:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824582
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var level = 0\n    while level < n\
    \ {\n        if n % 2 == 1 {\n            result.append(n)\n        }\n      \
    \  n = n / 2\n        level++\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp5nuf0279.swift:19:9: error: cannot assign to value: 'n' is a 'let'\
    \ constant\n        n = n / 2\n        ^\n/tmp/tmp5nuf0279.swift:20:14: error:\
    \ cannot find operator '++' in scope; did you mean '+= 1'?\n        level++\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1659824582
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    pile = append(pile, n / 2)\n    if n\
    \ % 2 == 0 {\n        pile = append(pile, n / 2)\n    }\n    return pile\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpemq0lelv.swift:14:12: error: cannot find 'append' in scope\n  \
    \  pile = append(pile, n / 2)\n           ^~~~~~\n/tmp/tmpemq0lelv.swift:16:16:\
    \ error: cannot find 'append' in scope\n        pile = append(pile, n / 2)\n \
    \              ^~~~~~\n"
  stdout: ''
  timestamp: 1659824580
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile: [Int] = []\n    var level = 0\n    while n != 0 {\n\
    \        pile.append(n)\n        n -= n % 2 == 0 ? 2 : 3\n        level += 1\n\
    \    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp0qm9nxbu.swift:17:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n -= n % 2 == 0 ? 2 : 3\n        ~\
    \ ^\n"
  stdout: ''
  timestamp: 1659824582
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var currentLevel = [0]\n    for _\
    \ in 0..<n {\n        let nextLevel = currentLevel\n        if n % 2 == 0 {\n\
    \            nextLevel.append(nextLevel[nextLevel.count - 1] + 2)\n        } else\
    \ {\n            nextLevel.append(nextLevel[nextLevel.count - 1] + 1)\n      \
    \  }\n        currentLevel = nextLevel\n        result.append(currentLevel[0])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp7wmcefq2.swift:18:23: error: cannot use mutating member on immutable\
    \ value: 'nextLevel' is a 'let' constant\n            nextLevel.append(nextLevel[nextLevel.count\
    \ - 1] + 2)\n            ~~~~~~~~~ ^\n/tmp/tmp7wmcefq2.swift:16:9: note: change\
    \ 'let' to 'var' to make it mutable\n        let nextLevel = currentLevel\n  \
    \      ^~~\n        var\n/tmp/tmp7wmcefq2.swift:20:23: error: cannot use mutating\
    \ member on immutable value: 'nextLevel' is a 'let' constant\n            nextLevel.append(nextLevel[nextLevel.count\
    \ - 1] + 1)\n            ~~~~~~~~~ ^\n/tmp/tmp7wmcefq2.swift:16:9: note: change\
    \ 'let' to 'var' to make it mutable\n        let nextLevel = currentLevel\n  \
    \      ^~~\n        var\n"
  stdout: ''
  timestamp: 1659824582
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    if n % 2 == 0 {\n        pile = pile.append(n)\n\
    \    }\n    for _ in 1...n {\n        pile = pile.append(n)\n    }\n    return\
    \ pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) == [3,\
    \ 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5)\
    \ == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp0l1pzdsn.swift:15:21: error: cannot assign value of type '()' to\
    \ type '[Int]'\n        pile = pile.append(n)\n               ~~~~~^~~~~~~~~\n\
    /tmp/tmp0l1pzdsn.swift:18:21: error: cannot assign value of type '()' to type\
    \ '[Int]'\n        pile = pile.append(n)\n               ~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824582
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var stones = 0\n    if n % 2 == 1 {\n\
    \        stones += n\n    }\n    for _ in 0..<n {\n        pile.append(stones)\n\
    \        stones += 2\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpmrn4she1/tmpmrn4she1.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22ef5ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22ef2e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22ef2e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22ef2e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmrn4she1                        0x000055abc538d6af <unavailable> + 5807

    5    libc.so.6                          0x00002b22ef7d8460 __libc_start_main +
    245

    6    tmpmrn4she1                        0x000055abc538d209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824582
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    var stones = n\n\
    \    while stones > 0 {\n        pile.append(stones)\n        if stones % 2 ==\
    \ 0 {\n            stones = stones / 2\n        } else {\n            stones =\
    \ stones * 3 + 1\n        }\n        level++\n    }\n    return pile\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpyk__nmae.swift:23:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824582
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var level = 1\n    var stones = n\n\
    \    while stones > 0 {\n        if stones % 2 == 1 {\n            result.append(stones)\n\
    \            stones = stones / 2\n        } else {\n            result.append(stones)\n\
    \            stones = stones / 2\n            stones += 1\n        }\n       \
    \ level += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8,\
    \ 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpm5a_7kk8/tmpm5a_7kk8.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abd7c54cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd7c243b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abd7c243988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abd7c2427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm5a_7kk8                        0x000056050df9e4d2 <unavailable> + 5330

    5    libc.so.6                          0x00002abd7c738460 __libc_start_main +
    245

    6    tmpm5a_7kk8                        0x000056050df9e119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659824582
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    if n % 2 == 0 {\n        result.append(n)\n\
    \    } else {\n        result.append(n)\n        result.append(n / 2)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpfktomh3v/tmpfktomh3v.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc9d575c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc9d26cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc9d26c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc9d26b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfktomh3v                        0x0000562fde56b4d2 <unavailable> + 5330

    5    libc.so.6                          0x00002afc9d761460 __libc_start_main +
    245

    6    tmpfktomh3v                        0x0000562fde56b119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659824582
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile: [Int] = []\n    var level = 0\n    var stones = 0\n\
    \    while stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n\
    \            stones += 2\n        } else {\n            pile[level] = stones\n\
    \            stones += 3\n        }\n        level++\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpi8ie8jj5.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824582
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [Int]()\n    var level = 1\n    var stones_in_level\
    \ = 0\n    while stones_in_level < n {\n        if n % 2 == 0 {\n            stones.append(stones_in_level)\n\
    \            stones_in_level += 2\n        } else {\n            stones.append(stones_in_level)\n\
    \            stones_in_level += 3\n        }\n        level += 1\n    }\n    return\
    \ stones\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmp3yz4glpl/tmp3yz4glpl.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5104d9ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5104a95b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5104a95988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5104a947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3yz4glpl                        0x0000559222a624d2 <unavailable> + 5330

    5    libc.so.6                          0x00002b5104f8a460 __libc_start_main +
    245

    6    tmp3yz4glpl                        0x0000559222a62119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659824582
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    if n % 2 == 0 {\n        pile = pile.append(n)\n\
    \    } else {\n        pile = pile.append(n).append(n)\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp2_yjo650.swift:15:21: error: cannot assign value of type '()' to\
    \ type '[Int]'\n        pile = pile.append(n)\n               ~~~~~^~~~~~~~~\n\
    /tmp/tmp2_yjo650.swift:17:31: error: value of tuple type '()' has no member 'append'\n\
    \        pile = pile.append(n).append(n)\n               ~~~~~~~~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824580
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var level = 1\n    var stones = n\n\
    \n    while stones > 0 {\n        if stones % 2 == 1 {\n            result.append(stones)\n\
    \            stones /= 2\n        } else {\n            result.append(stones)\n\
    \            stones /= 2\n            stones /= 2\n        }\n        level++\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp_9yp6q2p.swift:26:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824582
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    var level = 0\n    while n > 0 {\n \
    \       pile.append(n)\n        n -= n % 2 == 0 ? 2 : 3\n        level++\n   \
    \ }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpjx7xmqww.swift:17:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n -= n % 2 == 0 ? 2 : 3\n        ~\
    \ ^\n/tmp/tmpjx7xmqww.swift:18:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824582
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var currentLevel = Int()\n    var\
    \ nextLevel = Int()\n    if n % 2 == 0 {\n        nextLevel = n + 2\n    } else\
    \ {\n        nextLevel = n + 4\n    }\n    for _ in 0..<nextLevel {\n        result.append(currentLevel)\n\
    \        currentLevel = 0\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmppob6g5ym/tmppob6g5ym.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b76ab775c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b76ab46cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b76ab46c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b76ab46b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppob6g5ym                        0x0000564932e135c2 <unavailable> + 5570

    5    libc.so.6                          0x00002b76ab961460 __libc_start_main +
    245

    6    tmppob6g5ym                        0x0000564932e13209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824582
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile: [Int] = []\n    var level = 1\n    var stones = n\n\
    \    while stones > 0 {\n        if stones % 2 == 1 {\n            pile.append(stones)\n\
    \            stones = stones / 2\n        } else {\n            pile.append(stones)\n\
    \            stones = stones / 2\n            pile.append(stones)\n          \
    \  stones = stones / 2\n        }\n        level++\n    }\n    return pile\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp0xrnw68o.swift:26:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824580
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [Int]()\n    var level = 0\n    var stone = 0\n\
    \    while stone < n {\n        if n % 2 == 0 {\n            stones.append(stone)\n\
    \            stone = 0\n        } else {\n            stone += 2\n        }\n\
    \        level++\n    }\n    stones.append(stone)\n    return stones\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpf82jzmng.swift:23:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659824582
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [Int]()\n    if n % 2 == 0 {\n        pile = pile.append(n)\n\
    \    } else {\n        pile = pile.append(n).append(n)\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp2_yjo650.swift:15:21: error: cannot assign value of type '()' to\
    \ type '[Int]'\n        pile = pile.append(n)\n               ~~~~~^~~~~~~~~\n\
    /tmp/tmp2_yjo650.swift:17:31: error: value of tuple type '()' has no member 'append'\n\
    \        pile = pile.append(n).append(n)\n               ~~~~~~~~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824580
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [0]\n    var level = 0\n    while stones.count\
    \ < n {\n        if n % 2 == 0 {\n            stones.append(stones.last! + 2)\n\
    \        } else {\n            stones.append(stones.last! + 1)\n        }\n  \
    \      n /= 2\n        level++\n    }\n    return stones\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpwc9w7300.swift:21:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 2\n        ~ ^\n/tmp/tmpwc9w7300.swift:22:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        level++\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1659824580
