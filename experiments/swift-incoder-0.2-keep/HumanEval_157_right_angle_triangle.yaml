name: HumanEval_157_right_angle_triangle
language: swift
prompt: "\n/// Given the lengths of the three sides of a triangle. Return True if\
  \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
  \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
  /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
  \ 2, 3) == False\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) ==\
  \ true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
  \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
  assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
  \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
  \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
  \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\n\
  assert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
completions: ['    return ((b * b) - (4 * a * c)) > 0', "    let a = abs(a)\n    let\
    \ b = abs(b)\n    let c = abs(c)\n    let a1 = a / 2\n    let b1 = b / 2\n   \
    \ let c1 = c / 2\n    let a2 = a1 - c1\n    let b2 = b1 - c1\n    let c2 = c1\
    \ - c1\n    let a3 = a1 + c1\n    let b3 = b1 + c1\n    let c3 = c1 + c1\n   \
    \ let a4 = a2 - c2\n    let b4 = b2 - c2\n    let c4 = c2 - c2\n    let a5 = a2\
    \ + c2\n    let b5 = b2 + c2\n    let c5 = c2 + c2\n    let a6 = a3 - c3\n   \
    \ let b6 = b3 - c3\n    let c6 = c3 - c3\n    let a7 = a3 + c3\n    let b7 = b3\
    \ + c3\n    let c7 = c3 + c3\n    let a8 = a4 - c4\n    let b8 = b4 - c4\n   \
    \ let c8 = c4 - c4\n    let a9 = a4 + c4\n    let b9 = b4 + c4\n    let c9 = c4\
    \ + c4\n    let a10 = a5 - c5\n    let b10 = b5 - c5\n    let c10 = c5 - c5\n\
    \    let a11 = a5 + c5\n    let b11 = b5 + c5\n    let c11 = c5 + c5\n    let\
    \ a12 = a6 - c6\n    let b12 = b6 - c6\n    let c12 = c6 - c6\n    let a13 = a6\
    \ + c6\n    let b13 = b6 + c6\n    let c13 = c6 + c6\n    let a14 = a7 - c7\n\
    \    let b14 = b7 - c7\n    let c14 = c7 - c7\n    let a15 = a7 + c7\n    let\
    \ b15 = b7 + c7\n    let c15 = c7 + c7\n    let a16 = a8 - c8\n    let b16 = b8\
    \ - c8\n    let c16 = c8 - c8\n    let a17 = a8 + c8\n    let b17 = b8 + c8\n\
    \    let c17 = c8 + c8\n    let a18 = a9 - c9\n    let b18 = b9 - c9\n    let\
    \ c18 = c9 - c9\n    let a19 = a9 + c9\n    let b19 = b9 + c9\n    let c19 = c9\
    \ + c9\n    let a20 = a10 - c10\n    let b20 = b10 - c10\n    let c20 = c10 -\
    \ c10\n    let a21 = a10 + c10\n    let b21 = b10 + c10\n    let c21 = c10 + c10\n\
    \    let a22 = a11 - c11\n    let b22 = b11 - c11\n    let c22 = c11", "    let\
    \ ab = abs(b - a)\n    let ac = abs(c - a)\n    let bc = abs(b - c)\n    let abc\
    \ = ab + ac\n    let bca = bc + ab\n    let abbc = abc + bca\n    let abcab =\
    \ abbc + abbc\n    let abcabc = abcab + abcab\n    let abcabcb = abcabc + abcabcb\n\
    \    let abcabcbc = abcabcb + abcabcbc\n    let abcabcbcd = abcabcbc + abcabcbcd\n\
    \    let abcabcbcde = abcabcbcd + abcabcbcde\n    let abcabcbcdef = abcabcbcde\
    \ + abcabcbcdef\n    let abcabcbcdefg = abcabcbcdef + abcabcbcdefg\n    let abcabcbcdefgh\
    \ = abcabcbcdefg + abcabcbcdefgh\n    let abcabcbcdefghi = abcabcbcdefgh + abcabcbcdefghi\n\
    \    let abcabcbcdefghij = abcabcbcdefghi + abcabcbcdefghij\n    let abcabcbcdefghijk\
    \ = abcabcbcdefghij + abcabcbcdefghijk\n    let abcabcbcdefghijkl = abcabcbcdefghijk\
    \ + abcabcbcdefghijkl\n    let abcabcbcdefghijklm = abcabcbcdefghijkl + abcabcbcdefghijklm\n\
    \    let abcabcbcdefghijklmn = abcabcbcdefghijklm + abcabcbcdefghijkln\n    let\
    \ abcabcbcdefghijklmno = abcabcbcdefghijkln + abcabcbcdefghijklmn\n    let abcabcbcdefghijklmnpo\
    \ = abcabcbcdefghijklmn + abcabcbcdefghijklmno\n    let abcabcbcdefghijklmnpoq\
    \ = abcabcbcdefghijklmnpo + abcabcbcdefghijklmnpoq\n    let abcabcbcdefghijklmnpoqr\
    \ = abcabcbcdefghijklmnpoq + abcabcbcdefghijklmnpoqr\n    let abcabcbcdefghijklmnpoqrs\
    \ = abcabcbcdefghijklmnpoqr + abcabcbcdefgh", "    let a = abs(a)\n    let b =\
    \ abs(b)\n    let c = abs(c)\n    if a == 0 || b == 0 || c == 0 {\n        return\
    \ false\n    }\n    let discriminant = b * b - 4 * a * c\n    if discriminant\
    \ < 0 {\n        return false\n    }\n    let root = (-b + sqrt(discriminant))\
    \ / (2 * a)\n    if root < 0 {\n        return false\n    }\n    if root == 0\
    \ || root == 1 {\n        return true\n    }\n    let root2 = (-b - sqrt(discriminant))\
    \ / (2 * a)\n    if root2 < 0 {\n        return false\n    }\n    if root2 ==\
    \ 0 || root2 == 1 {\n        return true\n    }\n    return false", '    return
    ((a + b > c) && (a + c > b) && (b + c > a))', '    return ((b - a) * (c - b) <=
    0)', '    return ((b - a) * (c - b) <= 0)', '    return ((b - a) * (c - b) <=
    0)', "    let ab = abs(b - a)\n    let ac = abs(c - a)\n    let bc = abs(b - c)\n\
    \    let abc = ab + ac\n    let bca = bc + ab\n    let abca = abc + bca\n    return\
    \ abca >= bca", "    if a > b {\n        return right_angle_triangle(b, a, c)\n\
    \    }\n    if b > c {\n        return right_angle_triangle(a, c, b)\n    }\n\
    \    if a == b {\n        return true\n    }\n    if a == c {\n        return\
    \ true\n    }\n    if b == c {\n        return true\n    }\n    return false",
  "    let a1 = (a + b + c) / 2\n    let b1 = (b + c + a) / 2\n    let c1 = (c + a\
    \ + b) / 2\n    return a1 == b1 && b1 == c1 && c1 == a", "    let a = abs(a)\n\
    \    let b = abs(b)\n    let c = abs(c)\n    if a > b {\n        if b > c {\n\
    \            return true\n        } else {\n            return false\n       \
    \ }\n    } else {\n        if c > b {\n            return false\n        } else\
    \ {\n            return true\n        }\n    }", "    let a = abs(a)\n    let\
    \ b = abs(b)\n    let c = abs(c)\n    \n    if a > b {\n        if b > c {\n \
    \           return true\n        } else {\n            return false\n        }\n\
    \    } else {\n        if c > b {\n            return true\n        } else {\n\
    \            return false\n        }\n    }", "    let a = abs(a)\n    let b =\
    \ abs(b)\n    let c = abs(c)\n    let ab = abs(a + b)\n    let ac = abs(a + c)\n\
    \    let bc = abs(b + c)\n    let abc = ab + ac\n    let acb = ac + bc\n    let\
    \ abbc = ab + bc\n    let acbc = ac + bc\n    let abcab = ab + abc + ac + acb\
    \ + abbc\n    let acbcab = ac + abc + abbc + acbc + acbcab\n    let abcabc = ab\
    \ + abc + abbc + abcab + ac + acbc + acbcab + acbcabc\n    let acbcabc = ac +\
    \ abc + abbc + abcab + acbc + acbcab + acbcabc + acbcabc\n    let abcabcb = ab\
    \ + abc + abbc + abcab + acbc + acbcab + acbcabc + acbcabc\n    let acbcabcb =\
    \ ac + abc + abbc + abcab + acbc + acbcab + acbcabc + acbcabcb\n    let abcabcbb\
    \ = ab + abc + abbc + abcab + acbc + acbcab + acbcabc + acbcabcb + acbcabcbb\n\
    \    let acbcabcbb = ac + abc + abbc + abcab + acbc + acbcab + acbcabc + acbcabcbb\
    \ + acbcabcbb\n    let abcabcbc = ab + abc + abbc + abcab + acbc + acbcab + acbcabc\
    \ + acbcabcb + acbcabcbb + acbcabcbc\n    let acbcabcbc = ac + abc + abbc + abcab\
    \ + acbc + acbcab + acbcabc + acbcabcb + acbcabcbb + acbcabcbc\n    let abcabcbbc\
    \ = ab + abc + abbc + abcab + acbc + acbcab + acbcabc + acbcabcb + acbcabcbb +\
    \ acbcabcbc\n    let acbcabcbbc = ac + abc + abbc + abcab + acbc + acbcab + acbcabc\
    \ + acbcabcb + acbcabcbb + acbcabcbc\n    let abcabcbcb = ab + abc + abbc + abcab\
    \ + acbc + acbcab + acbcabc + acbcabcb + acb", "    let a = abs(a)\n    let b\
    \ = abs(b)\n    let c = abs(c)\n    if a > b {\n        if b > c {\n         \
    \   return false\n        }\n        return true\n    }\n    if b > c {\n    \
    \    return true\n    }\n    return false", '    return ((a + b > c) && (a + c
    > b) && (b + c > a))', "    let ab = abs(b - a)\n    let bc = abs(c - b)\n   \
    \ let ac = abs(c - a)\n    return ab >= bc && ab >= ac", '    return ((a + b >
    c) && (a + c > b) && (b + c > a))', "    let a1 = b - a\n    let b1 = c - b\n\
    \    let c1 = a - c\n    return a1 * b1 + b1 * c1 == c1 * a1", "    let ab = abs(a\
    \ - b)\n    let ac = abs(a - c)\n    let bc = abs(b - c)\n    return (ab >= ac)\
    \ && (ab >= bc)"]
stop_tokens:
- "\n}"
