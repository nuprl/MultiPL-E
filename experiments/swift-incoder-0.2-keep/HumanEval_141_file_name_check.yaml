name: HumanEval_141_file_name_check
language: swift
prompt: "\n/// Create a function which takes a string representing a file's name,\
  \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
  /// A file's name is considered to be valid if and only if all the following conditions\
  \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
  \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// - The\
  \ substring before the dot should not be empty, and it starts with a letter from\
  \ \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after the\
  \ dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// file_name_check(\"\
  example.txt\") # => 'Yes'\n/// file_name_check(\"1example.dll\") # => 'No' (the\
  \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name:\
  \ String) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(file_name_check(file_name: \"example.txt\"\
  ) == \"Yes\")\nassert(file_name_check(file_name: \"1example.dll\") == \"No\")\n\
  assert(file_name_check(file_name: \"s1sdf3.asd\") == \"No\")\nassert(file_name_check(file_name:\
  \ \"K.dll\") == \"Yes\")\nassert(file_name_check(file_name: \"MY16FILE3.exe\") ==\
  \ \"Yes\")\nassert(file_name_check(file_name: \"His12FILE94.exe\") == \"No\")\n\
  assert(file_name_check(file_name: \"_Y.txt\") == \"No\")\nassert(file_name_check(file_name:\
  \ \"?aREYA.exe\") == \"No\")\nassert(file_name_check(file_name: \"/this_is_valid.dll\"\
  ) == \"No\")\nassert(file_name_check(file_name: \"this_is_valid.wow\") == \"No\"\
  )\nassert(file_name_check(file_name: \"this_is_valid.txt\") == \"Yes\")\nassert(file_name_check(file_name:\
  \ \"this_is_valid.txtexe\") == \"No\")\nassert(file_name_check(file_name: \"#this2_i4s_5valid.ten\"\
  ) == \"No\")\nassert(file_name_check(file_name: \"@this1_is6_valid.exe\") == \"\
  No\")\nassert(file_name_check(file_name: \"this_is_12valid.6exe4.txt\") == \"No\"\
  )\nassert(file_name_check(file_name: \"all.exe.txt\") == \"No\")\nassert(file_name_check(file_name:\
  \ \"I563_No.exe\") == \"Yes\")\nassert(file_name_check(file_name: \"Is3youfault.txt\"\
  ) == \"Yes\")\nassert(file_name_check(file_name: \"no_one#knows.dll\") == \"Yes\"\
  )\nassert(file_name_check(file_name: \"1I563_Yes3.exe\") == \"No\")\nassert(file_name_check(file_name:\
  \ \"I563_Yes3.txtt\") == \"No\")\nassert(file_name_check(file_name: \"final..txt\"\
  ) == \"No\")\nassert(file_name_check(file_name: \"final132\") == \"No\")\nassert(file_name_check(file_name:\
  \ \"_f4indsartal132.\") == \"No\")\nassert(file_name_check(file_name: \".txt\")\
  \ == \"No\")\nassert(file_name_check(file_name: \"s.\") == \"No\")"
completions: ["\tlet file_name = file_name.lowercased()\n\tlet dot_index = file_name.index(of:\
    \ \".\")\n\tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index\
    \ = dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\t\
    let dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\
    \tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index =\
    \ dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet\
    \ dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\
    \tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index =\
    \ dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet\
    \ dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\
    \tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index =\
    \ dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet\
    \ dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\
    \tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index =\
    \ dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet\
    \ dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\
    \tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index =\
    \ dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet\
    \ dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\
    \tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index =\
    \ dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet\
    \ dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\
    \tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index =\
    \ dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet\
    \ dot_index = ", "    let file_name = file_name.lowercased()\n    let dot_index\
    \ = file_name.index(of: \".\")\n    let dot_index = dot_index! - 1\n    let file_name\
    \ = file_name[dot_index..<file_name.count]\n    let file_name = file_name.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n    let file_name = file_name.lowercased()\n    let\
    \ file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let\
    \ file_name = file_name.lowercased()\n    let file_name = file_name.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n    let file_name = file_name.lowercased()\n    let\
    \ file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let\
    \ file_name = file_name.lowercased()\n    let file_name = file_name.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n    let file_name = file_name.lowercased()\n    let\
    \ file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let\
    \ file_name = file_name.lowercased()\n    let file_name = file_name.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n    let file_name = file_name.lowercased()\n    let\
    \ file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let\
    \ file_name = file_name.lowercased()\n    let file_name = file_name.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n    let file_name = file_name.lowercased()\n    let\
    \ file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let\
    \ file_name = file_name.lowercased()\n    let file_name = file_name.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n    let file_name = file_name.lowercased()\n    let\
    \ file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let\
    \ file_name = file_name.lowercased()\n    let file_name = file_name.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n    let file_name = file_name.lowercased()\n    let\
    \ file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let\
    \ file_name = file_name.lowercased()\n    let file_name = file_name.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n    let file_name = file_name.lowercased()\n    let\
    \ file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let\
    \ file_name = file_name.lowercased()\n    let file_name = file_name.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n    let file_name = file_name.lowercased()\n    let\
    \ file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let\
    \ file_name = file_name.lowercased()\n    let file_name = file_name", "    let\
    \ file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index!\n    let file_name = file_name.substring(from:\
    \ dot_index!)\n    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let letter_index = file_name.index(of:\
    \ \"a\")\n    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter", "    let regex = try! NSRegularExpression(pattern:\
    \ \"^[0-9]{3}[a-zA-Z]{1}\\.[a-zA-Z]{2,3}$\", options: [])\n    return regex.firstMatch(in:\
    \ file_name, options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).length\
    \ > 0 ? \"Yes\" : \"No\"", "\tlet file_name = file_name.lowercased()\n\tlet dot_index\
    \ = file_name.firstIndex(of: \".\")\n\tlet dot_index = dot_index != nil ? dot_index!\
    \ : file_name.count\n\tlet file_name = file_name.substring(from: dot_index)\n\t\
    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\t\
    let file_name = file_name.lowercased()\n\tlet file_name = file_name.substring(from:\
    \ 0)\n\tlet file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \tlet file_name = file_name.lowercased()\n\tlet file_name = file_name.substring(from:\
    \ 0)\n\tlet file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \tlet file_name = file_name.lowercased()\n\tlet file_name = file_name.substring(from:\
    \ 0)\n\tlet file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \tlet file_name = file_name.lowercased()\n\tlet file_name = file_name.substring(from:\
    \ 0)\n\tlet file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \tlet file_name = file_name.lowercased()\n\tlet file_name = file_name.substring(from:\
    \ 0)\n\tlet file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \tlet file_name = file_name.lowercased()\n\tlet file_name = file_name.substring(from:\
    \ 0)\n\tlet file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \tlet file_name = file_name.lowercased()\n\tlet file_name = file_name.substring(from:\
    \ 0)\n\tlet file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \tlet file_name = file_name.lowercased()\n\tlet file_name = file_name.substring(from:\
    \ 0)\n\tlet file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \tlet file_name = file_name.lowercased()\n\tlet file_name = file_name.substring(from:\
    \ 0)\n\tlet file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \tlet file_name = file_name.lowercased()\n\tlet file_name = file_name.substring(from:\
    \ 0)\n\tlet file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \tlet file_name = file_name.lowercased()\n\tlet file_name = file_name.substring(from:\
    \ 0)\n\tlet file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \tlet file_name = file_name.lowercased()\n\tlet file_name = file_name", "\tlet\
    \ file_name = file_name.lowercased()\n\tlet dot_index = file_name.index(of: \"\
    .\")\n\tlet dot_index = dot_index!\n\tlet first_letter = file_name[..<dot_index]\n\
    \tlet last_letter = file_name[dot_index..<file_name.count]\n\tlet first_letter\
    \ = first_letter?.unicodeScalars\n\tlet last_letter = last_letter?.unicodeScalars\n\
    \tlet first_letter = first_letter?.first!\n\tlet last_letter = last_letter?.first!\n\
    \tlet first_letter = first_letter?.unicodeScalars\n\tlet last_letter = last_letter?.unicodeScalars\n\
    \tlet first_letter = first_letter?.first!\n\tlet last_letter = last_letter?.first!\n\
    \tlet first_letter = first_letter?.unicodeScalars\n\tlet last_letter = last_letter?.unicodeScalars\n\
    \tlet first_letter = first_letter?.first!\n\tlet last_letter = last_letter?.first!\n\
    \tlet first_letter = first_letter?.unicodeScalars\n\tlet last_letter = last_letter?.unicodeScalars\n\
    \tlet first_letter = first_letter?.first!\n\tlet last_letter = last_letter?.first!\n\
    \tlet first_letter = first_letter?.unicodeScalars\n\tlet last_letter = last_letter?.unicodeScalars\n\
    \tlet first_letter = first_letter?.first!\n\tlet last_letter = last_letter?.first!\n\
    \tlet first_letter = first_letter?.unicodeScalars\n\tlet last_letter = last_letter?.unicodeScalars\n\
    \tlet first_letter = first_letter?.first!\n\tlet last_letter = last_letter?.first!\n\
    \tlet first_letter = first_letter?.unicodeScalars\n\tlet last_letter = last_letter?.unicodeScalars\n\
    \tlet first_letter = first_letter?.first!\n\tlet last_letter = last_letter?.first!\n\
    \tlet first_letter = first_letter?.unicodeScalars\n\tlet last_letter = last_letter?.unicodeScalars\n\
    \tlet first_letter = first_letter?.first!\n\tlet last_letter = last_letter?.first!\n\
    \tlet first_letter = first_letter?.unicodeScalars\n\tlet last_letter = last_letter?.unicodeScalars\n\
    \tlet first_letter = first_letter?.first!\n\tlet last_letter = last_letter?.first!\n\
    \tlet first_letter = first_letter?.unicodeScalars\n\tlet last_letter = last_letter?.unicodeScalars\n\
    \tlet first_letter = first_letter?.first!\n\tlet last_letter = last_letter", " \
    \   let file_name = file_name.lowercased()\n    let dot_index = file_name.firstIndex(of:\
    \ \".\")\n    let dot_index = dot_index != nil ? dot_index! : file_name.endIndex\n\
    \    let dot_index = dot_index != nil ? dot_index! : file_name.endIndex\n    let\
    \ dot_index = dot_index != nil ? dot_index! : file_name.endIndex\n    let dot_index\
    \ = dot_index != nil ? dot_index! : file_name.endIndex\n    let dot_index = dot_index\
    \ != nil ? dot_index! : file_name.endIndex\n    let dot_index = dot_index != nil\
    \ ? dot_index! : file_name.endIndex\n    let dot_index = dot_index != nil ? dot_index!\
    \ : file_name.endIndex\n    let dot_index = dot_index != nil ? dot_index! : file_name.endIndex\n\
    \    let dot_index = dot_index != nil ? dot_index! : file_name.endIndex\n    let\
    \ dot_index = dot_index != nil ? dot_index! : file_name.endIndex\n    let dot_index\
    \ = dot_index != nil ? dot_index! : file_name.endIndex\n    let dot_index = dot_index\
    \ != nil ? dot_index! : file_name.endIndex\n    let dot_index = dot_index != nil\
    \ ? dot_index! : file_name.endIndex\n    let dot_index = dot_index != nil ? dot_index!\
    \ : file_name.endIndex\n    let dot_index = dot_index != nil ? dot_index! : file_name.endIndex\n\
    \    let dot_index = dot_index != nil ? dot_index! : file_name.endIndex\n    let\
    \ dot_index = dot_index != nil ? dot_index! : file_name.endIndex\n    let dot_index\
    \ = dot_index != nil ? dot_index! : file_name.endIndex\n    let dot_index = dot_index\
    \ != nil ? dot_index! : file_name.endIndex\n    let dot_index = dot_index != nil\
    \ ? dot_index! : file_name.endIndex\n    let dot_index = dot_index != nil ? dot_index!\
    \ : file_name.endIndex\n    let dot_index = dot_index != nil ? dot_index! : file_name.endIndex\n\
    \    let dot_index = dot_index != nil ? dot_index! : file_name.endIndex\n    let\
    \ dot_index = dot_index != nil ? dot_index! : file_name.endIndex\n    let dot_index\
    \ = dot_index != nil ? dot_index! : file_name.endIndex\n    let dot_index = dot_index\
    \ != nil ? dot_index! : file_name.endIndex\n    let dot_index = dot_index != nil\
    \ ? dot_index! : file_name.endIndex\n    let dot_index = dot_index != nil ? dot_index!\
    \ : file_name.endIndex\n    let dot_index = dot_index != nil ? dot_index! : file_name.endIndex\n",
  "\tlet file_name = file_name.lowercased()\n\tlet dot_index = file_name.index(of:\
    \ \".\")\n\tlet dot_index = dot_index!\n\tlet file_name = file_name.substring(from:\
    \ dot_index!)\n\tlet file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \tlet file_name = file_name.lowercased()\n\tlet file_name = file_name.substring(from:\
    \ 0)\n\tlet file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \tlet file_name = file_name.lowercased()\n\tlet file_name = file_name.substring(from:\
    \ 0)\n\tlet file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \tlet file_name = file_name.lowercased()\n\tlet file_name = file_name.substring(from:\
    \ 0)\n\tlet file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \tlet file_name = file_name.lowercased()\n\tlet file_name = file_name.substring(from:\
    \ 0)\n\tlet file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \tlet file_name = file_name.lowercased()\n\tlet file_name = file_name.substring(from:\
    \ 0)\n\tlet file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \tlet file_name = file_name.lowercased()\n\tlet file_name = file_name.substring(from:\
    \ 0)\n\tlet file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \tlet file_name = file_name.lowercased()\n\tlet file_name = file_name.substring(from:\
    \ 0)\n\tlet file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \tlet file_name = file_name.lowercased()\n\tlet file_name = file_name.substring(from:\
    \ 0)\n\tlet file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \tlet file_name = file_name.lowercased()\n\tlet file_name = file_name.substring(from:\
    \ 0)\n\tlet file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \tlet file_name = file_name.lowercased()\n\tlet file_name = file_name.substring(from:\
    \ 0)\n\tlet file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \tlet file_name = file_name.lowercased()\n\tlet file_name = file_name.substring(from:\
    \ 0)\n\tlet file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \tlet file_name = file_name.lowercased()\n\tlet file_name = file_name.substring(from:\
    \ 0)\n\tlet ", "\tlet file_name = file_name.lowercased()\n\tlet dot_index = file_name.rangeOfString(\"\
    .\").location\n\tlet dot_index = dot_index != nil ? dot_index! : 0\n\tlet dot_index\
    \ = dot_index != nil ? dot_index! : 0\n\tlet dot_index = dot_index != nil ? dot_index!\
    \ : 0\n\tlet dot_index = dot_index != nil ? dot_index! : 0\n\tlet dot_index =\
    \ dot_index != nil ? dot_index! : 0\n\tlet dot_index = dot_index != nil ? dot_index!\
    \ : 0\n\tlet dot_index = dot_index != nil ? dot_index! : 0\n\tlet dot_index =\
    \ dot_index != nil ? dot_index! : 0\n\tlet dot_index = dot_index != nil ? dot_index!\
    \ : 0\n\tlet dot_index = dot_index != nil ? dot_index! : 0\n\tlet dot_index =\
    \ dot_index != nil ? dot_index! : 0\n\tlet dot_index = dot_index != nil ? dot_index!\
    \ : 0\n\tlet dot_index = dot_index != nil ? dot_index! : 0\n\tlet dot_index =\
    \ dot_index != nil ? dot_index! : 0\n\tlet dot_index = dot_index != nil ? dot_index!\
    \ : 0\n\tlet dot_index = dot_index != nil ? dot_index! : 0\n\tlet dot_index =\
    \ dot_index != nil ? dot_index! : 0\n\tlet dot_index = dot_index != nil ? dot_index!\
    \ : 0\n\tlet dot_index = dot_index != nil ? dot_index! : 0\n\tlet dot_index =\
    \ dot_index != nil ? dot_index! : 0\n\tlet dot_index = dot_index != nil ? dot_index!\
    \ : 0\n\tlet dot_index = dot_index != nil ? dot_index! : 0\n\tlet dot_index =\
    \ dot_index != nil ? dot_index! : 0\n\tlet dot_index = dot_index != nil ? dot_index!\
    \ : 0\n\tlet dot_index = dot_index != nil ? dot_index! : 0\n\tlet dot_index =\
    \ dot_index != nil ? dot_index! : 0\n\tlet dot_index = dot_index != nil ? dot_index!\
    \ : 0\n\tlet dot_index = dot_index != nil ? dot_index! : 0\n\tlet dot_index =\
    \ dot_index != nil ? dot_index! : 0\n\tlet dot_index = dot_index != nil ? dot_index!\
    \ : 0\n\tlet dot_index = dot_index != nil ? dot_index! : 0\n\tlet dot_index =\
    \ dot_index != nil ? dot_index! : 0\n\tlet dot_index = dot_index != nil ? dot_",
  "    let regex = try! NSRegularExpression(pattern: \"^[0-9]{3}\\\\.[a-zA-Z]+$\"\
    , options: [])\n    return regex.firstMatch(in: file_name, options: [], range:\
    \ NSMakeRange(0, file_name.characters.count)).rangeAt(1).length == 0 ? \"Yes\"\
    \ : \"No\"", "\tlet file_name = file_name.lowercased()\n\tlet dot_index = file_name.index(of:\
    \ \".\")\n\tlet dot_index = dot_index != nil ? dot_index! : 0\n\tlet file_name\
    \ = file_name[dot_index..<file_name.endIndex]\n\tlet file_name = file_name.trimmingCharacters(in:\
    \ CharacterSet.whitespacesAndNewlines)\n\tlet file_name = file_name.lowercased()\n\
    \tlet file_name = file_name.characters.count\n\tlet file_name = file_name.characters.count\
    \ == 3 && file_name.contains(\".\") && file_name.starts(with: \"a\") && file_name.ends(with:\
    \ [\"txt\", \"exe\", \"dll\"])\n\treturn file_name ? \"Yes\" : \"No\"", "    let\
    \ regex = try! NSRegularExpression(pattern: \"^[0-9]{3}\\\\.[a-zA-Z]+$\", options:\
    \ [])\n    return regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.characters.count)).rangeAt(1).location == 0 ? \"Yes\" : \"No\"", " \
    \   let regex = try! NSRegularExpression(pattern: \"^[0-9]{3}\\.[a-zA-Z]+$\",\
    \ options: [])\n    return regex.firstMatch(in: file_name, options: [], range:\
    \ NSMakeRange(0, file_name.characters.count)).rangeAt(1).length == 0 &&\n    \
    \    regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).location\
    \ == 0 &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.characters.count)).rangeAt(1).length > 0 &&\n        regex.firstMatch(in:\
    \ file_name, options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).location\
    \ != 0 &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.characters.count)).rangeAt(1).location != file_name.characters.count\
    \ &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.characters.count)).rangeAt(1).location != file_name.characters.count\
    \ - 1\n        ? \"Yes\" : \"No\"", "    let file_name = file_name.lowercased()\n\
    \    let dot_index = file_name.rangeOfString(\".\").location\n    let dot_length\
    \ = file_name.rangeOfString(\".\").length\n    let dot_start_index = dot_index\
    \ - dot_length\n    let dot_end_index = dot_index\n    let dot_name = file_name[dot_start_index..dot_end_index]\n\
    \    let dot_name_length = dot_name.length\n    \n    if dot_name_length < 3 ||\
    \ dot_name_length > 3 {\n        return \"No\"\n    }\n    \n    if dot_name_length\
    \ == 3 && dot_name.isEmpty {\n        return \"No\"\n    }\n    \n    if dot_name_length\
    \ == 3 && dot_name.rangeOfString(\"0123456789\").location == NSNotFound {\n  \
    \      return \"No\"\n    }\n    \n    if dot_name_length == 3 && dot_name.rangeOfString(\"\
    abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\").location == NSNotFound\
    \ {\n        return \"No\"\n    }\n    \n    if dot_name_length == 3 && dot_name.rangeOfString(\"\
    !@#$%^&*()_+-={}[]|;':,./<>?\").location == NSNotFound {\n        return \"No\"\
    \n    }\n    \n    if dot_name_length == 3 && dot_name.rangeOfString(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"\
    ).location == NSNotFound {\n        return \"No\"\n    }\n    \n    if dot_name_length\
    \ == 3 && dot_name.rangeOfString(\"!@#$%^&*()_+-={}[]|;':,./<>?0123456789\").location\
    \ == NSNotFound {\n        return \"No\"\n    }\n    \n    if dot_name_length\
    \ == 3 && dot_name.rangeOfString(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-={}[]|;':,./<>?\"\
    ).location == NSNotFound {\n        return \"No\"\n    }\n    \n    if dot_name_length\
    \ == 3 && dot_name.rangeOfString(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-={}[]|;':,./<>?0123456789\"\
    ).location == NSNotFound {\n        return \"No\"\n    }\n    \n    if dot_name_length\
    \ == 3 && dot_name.rangeOfString(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNO",
  "    let regex = try! NSRegularExpression(pattern: \"^[0-9]{3}\\\\.[^.]+$\", options:\
    \ [])\n    return regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.characters.count)).rangeAt(1).length == 0 &&\n        file_name.substring(with:\
    \ NSMakeRange(0, file_name.characters.count - 1)).hasPrefix(\"a\") &&\n      \
    \  file_name.substring(with: NSMakeRange(0, file_name.characters.count - 1)).hasSuffix(\"\
    txt\") ||\n        file_name.substring(with: NSMakeRange(0, file_name.characters.count\
    \ - 1)).hasSuffix(\"exe\") ||\n        file_name.substring(with: NSMakeRange(0,\
    \ file_name.characters.count - 1)).hasSuffix(\"dll\")\n        ? \"Yes\" : \"\
    No\"", "\tlet file_name = file_name.lowercased()\n\tlet dot_index = file_name.index(of:\
    \ \".\")\n\tlet dot_index = dot_index != nil ? dot_index!.offset : 0\n\tlet dot_index\
    \ = dot_index != nil ? dot_index!.offset : 0\n\tlet dot_index = dot_index != nil\
    \ ? dot_index!.offset : 0\n\tlet dot_index = dot_index != nil ? dot_index!.offset\
    \ : 0\n\tlet dot_index = dot_index != nil ? dot_index!.offset : 0\n\tlet dot_index\
    \ = dot_index != nil ? dot_index!.offset : 0\n\tlet dot_index = dot_index != nil\
    \ ? dot_index!.offset : 0\n\tlet dot_index = dot_index != nil ? dot_index!.offset\
    \ : 0\n\tlet dot_index = dot_index != nil ? dot_index!.offset : 0\n\tlet dot_index\
    \ = dot_index != nil ? dot_index!.offset : 0\n\tlet dot_index = dot_index != nil\
    \ ? dot_index!.offset : 0\n\tlet dot_index = dot_index != nil ? dot_index!.offset\
    \ : 0\n\tlet dot_index = dot_index != nil ? dot_index!.offset : 0\n\tlet dot_index\
    \ = dot_index != nil ? dot_index!.offset : 0\n\tlet dot_index = dot_index != nil\
    \ ? dot_index!.offset : 0\n\tlet dot_index = dot_index != nil ? dot_index!.offset\
    \ : 0\n\tlet dot_index = dot_index != nil ? dot_index!.offset : 0\n\tlet dot_index\
    \ = dot_index != nil ? dot_index!.offset : 0\n\tlet dot_index = dot_index != nil\
    \ ? dot_index!.offset : 0\n\tlet dot_index = dot_index != nil ? dot_index!.offset\
    \ : 0\n\tlet dot_index = dot_index != nil ? dot_index!.offset : 0\n\tlet dot_index\
    \ = dot_index != nil ? dot_index!.offset : 0\n\tlet dot_index = dot_index != nil\
    \ ? dot_index!.offset : 0\n\tlet dot_index = dot_index != nil ? dot_index!.offset\
    \ : 0\n\tlet dot_index = dot_index != nil ? dot_index!.offset : 0\n\tlet dot_index\
    \ = dot_index != nil ? dot_index!.offset : 0\n\tlet dot_index = dot_index != nil\
    \ ? dot_index!.offset : 0\n\tlet dot_index = dot_index != nil ? dot_index!.offset\
    \ : 0\n\tlet dot_index = dot_index != nil ? dot_index!.offset : 0\n\tlet dot_index\
    \ = dot_index != nil ? dot_index!.offset : 0\n\tlet dot_index = dot_index != nil\
    \ ? dot_index!", "\tlet file_name = file_name.lowercased()\n\tlet file_name =\
    \ file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\tlet file_name =\
    \ file_name.components(separatedBy: \".\")\n\tlet file_name = file_name[0]\n\t\
    let file_name = file_name.characters.count\n\tlet file_name = file_name.characters.count\n\
    \tlet file_name = file_name.characters.count\n\tlet file_name = file_name.characters.count\n\
    \tlet file_name = file_name.characters.count\n\tlet file_name = file_name.characters.count\n\
    \tlet file_name = file_name.characters.count\n\tlet file_name = file_name.characters.count\n\
    \tlet file_name = file_name.characters.count\n\tlet file_name = file_name.characters.count\n\
    \tlet file_name = file_name.characters.count\n\tlet file_name = file_name.characters.count\n\
    \tlet file_name = file_name.characters.count\n\tlet file_name = file_name.characters.count\n\
    \tlet file_name = file_name.characters.count\n\tlet file_name = file_name.characters.count\n\
    \tlet file_name = file_name.characters.count\n\tlet file_name = file_name.characters.count\n\
    \tlet file_name = file_name.characters.count\n\tlet file_name = file_name.characters.count\n\
    \tlet file_name = file_name.characters.count\n\tlet file_name = file_name.characters.count\n\
    \tlet file_name = file_name.characters.count\n\tlet file_name = file_name.characters.count\n\
    \tlet file_name = file_name.characters.count\n\tlet file_name = file_name.characters.count\n\
    \tlet file_name = file_name.characters.count\n\tlet file_name = file_name.characters.count\n\
    \tlet file_name = file_name.characters.count\n\tlet file_name = file_name.characters.count\n\
    \tlet file_name = file_name.characters.count\n\tlet file_name = file_name.characters.count\n\
    \tlet file_name = file_name.characters.count\n\tlet file_name = file_name.characters.count\n\
    \tlet file_name = file_name.characters.count\n\tlet file_name = file_name.characters.count\n\
    \tlet file_name = file_name.characters.count\n\tlet file_name = file_name.characters.count\n\
    \tlet file_name = file_name.characters.count\n\tlet file_name = file_name.characters.count\n\
    \tlet file_name = file_name.characters.count\n\tlet file_name = file_name.characters.count\n\
    \tlet file_name = file_name.characters.count\n\tlet file_name = file_name.characters.count\n\
    \tlet file_name = file_name.characters.count\n\tlet file_name = file_name.characters.count\n\
    \tlet file_name = file_name.characters.count\n\tlet file_name = file_name.characters.count\n\
    \tlet file_name = file_name.characters.count\n\tlet file_name = file_name.characters.count\n\
    \tlet file_name = file_name.characters.count\n\tlet file_name = ", "    let file_name\
    \ = file_name.lowercased()\n    let dot_index = file_name.index(of: \".\")\n \
    \   let dot_index = dot_index!\n    let dot_index = dot_index + 1\n    let dot_index\
    \ = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by: 1)\n\
    \    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n", "\tlet file_name = file_name.lowercased()\n\tlet dot_index = file_name.index(of:\
    \ \".\")\n\tlet dot_index = dot_index != nil ? dot_index!.offset : 0\n\tlet dot_index\
    \ = dot_index != nil ? dot_index!.offset : 0\n\tlet dot_index = dot_index != nil\
    \ ? dot_index!.offset : 0\n\tlet dot_index = dot_index != nil ? dot_index!.offset\
    \ : 0\n\tlet dot_index = dot_index != nil ? dot_index!.offset : 0\n\tlet dot_index\
    \ = dot_index != nil ? dot_index!.offset : 0\n\tlet dot_index = dot_index != nil\
    \ ? dot_index!.offset : 0\n\tlet dot_index = dot_index != nil ? dot_index!.offset\
    \ : 0\n\tlet dot_index = dot_index != nil ? dot_index!.offset : 0\n\tlet dot_index\
    \ = dot_index != nil ? dot_index!.offset : 0\n\tlet dot_index = dot_index != nil\
    \ ? dot_index!.offset : 0\n\tlet dot_index = dot_index != nil ? dot_index!.offset\
    \ : 0\n\tlet dot_index = dot_index != nil ? dot_index!.offset : 0\n\tlet dot_index\
    \ = dot_index != nil ? dot_index!.offset : 0\n\tlet dot_index = dot_index != nil\
    \ ? dot_index!.offset : 0\n\tlet dot_index = dot_index != nil ? dot_index!.offset\
    \ : 0\n\tlet dot_index = dot_index != nil ? dot_index!.offset : 0\n\tlet dot_index\
    \ = dot_index != nil ? dot_index!.offset : 0\n\tlet dot_index = dot_index != nil\
    \ ? dot_index!.offset : 0\n\tlet dot_index = dot_index != nil ? dot_index!.offset\
    \ : 0\n\tlet dot_index = dot_index != nil ? dot_index!.offset : 0\n\tlet dot_index\
    \ = dot_index != nil ? dot_index!.offset : 0\n\tlet dot_index = dot_index != nil\
    \ ? dot_index!.offset : 0\n\tlet dot_index = dot_index != nil ? dot_index!.offset\
    \ : 0\n\tlet dot_index = dot_index != nil ? dot_index!.offset : 0\n\tlet dot_index\
    \ = dot_index != nil ? dot_index!.offset : 0\n\tlet dot_index = dot_index != nil\
    \ ? dot_index!.offset : 0\n\tlet dot_index = dot_index != nil ? dot_index!.offset\
    \ : 0\n\tlet dot_index = dot_index != nil ? dot_index!.offset : 0\n\tlet dot_index\
    \ = dot_index != nil ? dot_index!.offset : 0\n\tlet dot_index = dot_index != nil\
    \ ? dot_index!", "\tlet file_name = file_name.lowercased()\n\tlet dot_index =\
    \ file_name.index(of: \".\")\n\tlet dot_index = dot_index!\n\tlet dot_index =\
    \ dot_index! - 1\n\tlet dot_index = dot_index! - 1\n\tlet dot_index = dot_index!\
    \ - 1\n\tlet dot_index = dot_index! - 1\n\tlet dot_index = dot_index! - 1\n\t\
    let dot_index = dot_index! - 1\n\tlet dot_index = dot_index! - 1\n\tlet dot_index\
    \ = dot_index! - 1\n\tlet dot_index = dot_index! - 1\n\tlet dot_index = dot_index!\
    \ - 1\n\tlet dot_index = dot_index! - 1\n\tlet dot_index = dot_index! - 1\n\t\
    let dot_index = dot_index! - 1\n\tlet dot_index = dot_index! - 1\n\tlet dot_index\
    \ = dot_index! - 1\n\tlet dot_index = dot_index! - 1\n\tlet dot_index = dot_index!\
    \ - 1\n\tlet dot_index = dot_index! - 1\n\tlet dot_index = dot_index! - 1\n\t\
    let dot_index = dot_index! - 1\n\tlet dot_index = dot_index! - 1\n\tlet dot_index\
    \ = dot_index! - 1\n\tlet dot_index = dot_index! - 1\n\tlet dot_index = dot_index!\
    \ - 1\n\tlet dot_index = dot_index! - 1\n\tlet dot_index = dot_index! - 1\n\t\
    let dot_index = dot_index! - 1\n\tlet dot_index = dot_index! - 1\n\tlet dot_index\
    \ = dot_index! - 1\n\tlet dot_index = dot_index! - 1\n\tlet dot_index = dot_index!\
    \ - 1\n\tlet dot_index = dot_index! - 1\n\tlet dot_index = dot_index! - 1\n\t\
    let dot_index = dot_index! - 1\n\tlet dot_index = dot_index! - 1\n\tlet dot_index\
    \ = dot_index! - 1\n\tlet dot_index = dot_index! - 1\n\tlet dot_index = dot_index!\
    \ - 1\n\tlet dot_index = dot_index! - 1\n\tlet dot_index = dot_index! - 1\n\t\
    let dot_index = dot_index! - 1\n\tlet dot_index = dot_index! - 1\n\tlet dot_index\
    \ = dot_index! - 1\n\tlet dot_index = dot_index! - 1\n\tlet dot_index = dot_index!\
    \ - 1\n\tlet dot_index = dot_index! - 1\n\tlet dot_index = dot_index! - 1\n\t\
    let dot_index = dot_index! - 1\n\tlet dot_index = dot_index! - 1\n\tlet dot_index\
    \ = dot_index! - 1\n\tlet dot_index = dot_index! - 1\n\tlet dot_index = dot_index!\
    \ - 1\n\tlet dot_index = dot_index! - 1\n\tlet dot_index = dot_index!"]
stop_tokens:
- "\n}"
