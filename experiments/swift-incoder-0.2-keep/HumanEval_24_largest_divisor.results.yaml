language: swift
name: HumanEval_24_largest_divisor
results:
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for divisor in 1...n {\n        if n\
    \ % divisor == 0 {\n            if largest < divisor {\n                largest\
    \ = divisor\n            }\n        }\n    }\n    return largest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpj00dpk6n/tmpj00dpk6n.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac843cebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8439e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac8439e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8439e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj00dpk6n                        0x000055864847a335 <unavailable> + 4917

    5    libc.so.6                          0x00002ac843ed7460 __libc_start_main +
    245

    6    tmpj00dpk6n                        0x0000558648479fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var maxDivisor =\
    \ 1\n    var maxDivisorIndex = -1\n    for i := 2; i <= n; i++ {\n        if n\
    \ % i == 0 {\n            if maxDivisor < i {\n                maxDivisor = i\n\
    \                maxDivisorIndex = i\n            }\n        }\n    }\n    return\
    \ maxDivisorIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpdie_kcuc.swift:11:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpdie_kcuc.swift:11:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmpdie_kcuc.swift:11:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for divisor in 1...n {\n    \
    \    if n%divisor == 0 {\n            if divisor*divisor > largestDivisor {\n\
    \                largestDivisor = divisor\n            }\n        }\n    }\n \
    \   return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpnmuq3_ti/tmpnmuq3_ti.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af6982aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af697fa5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af697fa5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af697fa47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnmuq3_ti                        0x000056290f74a335 <unavailable> + 4917

    5    libc.so.6                          0x00002af69849a460 __libc_start_main +
    245

    6    tmpnmuq3_ti                        0x000056290f749fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int()\n    var largestDivisorIndex =\
    \ Int()\n    for i := 0; i < n; i++ {\n        if n % i == 0 {\n            if\
    \ largestDivisor == 0 || largestDivisor > i {\n                largestDivisor\
    \ = i\n                largestDivisorIndex = i\n            }\n        }\n   \
    \ }\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpnngljmf3.swift:8:12: error: expected type\n    for i := 0; i <\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpnngljmf3.swift:8:12: error:\
    \ expected 'in' after for-each pattern\n    for i := 0; i < n; i++ {\n       \
    \    ^\n/tmp/tmpnngljmf3.swift:8:12: error: expected Sequence expression for for-each\
    \ loop\n    for i := 0; i < n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824479
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var maxDivisor = 1\n    var maxDivisorIndex = -1\n    for\
    \ i := 1; i <= n; i++ {\n        if n % i == 0 {\n            if maxDivisor <\
    \ i {\n                maxDivisor = i\n                maxDivisorIndex = i\n \
    \           }\n        }\n    }\n    return maxDivisorIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp4vr7w53o.swift:8:12: error: expected type\n    for i := 1; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmp4vr7w53o.swift:8:12: error:\
    \ expected 'in' after for-each pattern\n    for i := 1; i <= n; i++ {\n      \
    \     ^\n/tmp/tmp4vr7w53o.swift:8:12: error: expected Sequence expression for\
    \ for-each loop\n    for i := 1; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = Int(n)\n    for divisor in 1...n {\n      \
    \  if n % divisor == 0 {\n            largest = divisor\n        }\n    }\n  \
    \  return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpl18neyst/tmpl18neyst.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80b1c09c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80b1900b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80b1900988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80b18ff7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl18neyst                        0x0000558205edb475 <unavailable> + 5237

    5    libc.so.6                          0x00002b80b1df5460 __libc_start_main +
    245

    6    tmpl18neyst                        0x0000558205edb129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var maxDivisor = 1\n    var maxDivisorValue = n\n    for\
    \ divisor in 2...n {\n        if n % divisor == 0 {\n            if divisor *\
    \ divisor > maxDivisorValue {\n                maxDivisorValue = divisor\n   \
    \             maxDivisor = divisor\n            }\n        }\n    }\n    return\
    \ maxDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmprk7hrm6v/tmprk7hrm6v.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b48c987ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b48c9571b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b48c9571988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b48c95707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprk7hrm6v                        0x0000557688fdf335 <unavailable> + 4917

    5    libc.so.6                          0x00002b48c9a66460 __libc_start_main +
    245

    6    tmprk7hrm6v                        0x0000557688fdefe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var largestDivisor\
    \ = Int(1)\n    var largestDivisorRemainder = Int(1)\n    for divisor in 2...n\
    \ {\n        if n % divisor == 0 {\n            if largestDivisorRemainder > divisor\
    \ {\n                largestDivisor = divisor\n                largestDivisorRemainder\
    \ = n % divisor\n            }\n        } else {\n            largestDivisorRemainder\
    \ = n % divisor\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpijike8d0/tmpijike8d0.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b956b0aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b956ada1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b956ada1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b956ada07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpijike8d0                        0x0000555d1a33b42b <unavailable> + 5163

    5    libc.so.6                          0x00002b956b296460 __libc_start_main +
    245

    6    tmpijike8d0                        0x0000555d1a33afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 1\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            if divisor*divisor > n {\n           \
    \     largestDivisor = divisor\n            } else {\n                break\n\
    \            }\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpnx4tw3cw/tmpnx4tw3cw.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8bf917ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8bf8e75b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8bf8e75988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8bf8e747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnx4tw3cw                        0x00005598f1f2742b <unavailable> + 5163

    5    libc.so.6                          0x00002b8bf936a460 __libc_start_main +
    245

    6    tmpnx4tw3cw                        0x00005598f1f26fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var largestDivisor\
    \ = 1\n    var largestDivisorIndex = 0\n    for i := 2; i <= n; i++ {\n      \
    \  if n % i == 0 {\n            if largestDivisor > i {\n                largestDivisor\
    \ = i\n                largestDivisorIndex = i\n            }\n        }\n   \
    \ }\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp21lsjfoc.swift:11:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmp21lsjfoc.swift:11:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmp21lsjfoc.swift:11:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for divisor in 1...n {\n        if n\
    \ % divisor == 0 {\n            if largest < divisor {\n                largest\
    \ = divisor\n            }\n        }\n    }\n    return largest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpj00dpk6n/tmpj00dpk6n.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac843cebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8439e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac8439e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8439e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj00dpk6n                        0x000055864847a335 <unavailable> + 4917

    5    libc.so.6                          0x00002ac843ed7460 __libc_start_main +
    245

    6    tmpj00dpk6n                        0x0000558648479fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var maxDivisor =\
    \ 1\n    var maxDivisorIndex = -1\n    for i := 2; i <= n; i++ {\n        if n\
    \ % i == 0 {\n            if maxDivisor < i {\n                maxDivisor = i\n\
    \                maxDivisorIndex = i\n            }\n        }\n    }\n    return\
    \ maxDivisorIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpdie_kcuc.swift:11:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpdie_kcuc.swift:11:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmpdie_kcuc.swift:11:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int()\n    var largestDivisorNum = Int()\n\
    \    for num in 1...n {\n        if num % 2 == 0 {\n            if num > largestDivisorNum\
    \ {\n                largestDivisorNum = num\n                largestDivisor =\
    \ num\n            }\n        } else {\n            if num > largestDivisorNum\
    \ {\n                largestDivisorNum = num\n                largestDivisor =\
    \ largestDivisorNum\n            }\n        }\n    }\n    return largestDivisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp_qbrvq6m/tmp_qbrvq6m.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acc42036c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acc41d2db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acc41d2d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acc41d2c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_qbrvq6m                        0x000055fba044e335 <unavailable> + 4917

    5    libc.so.6                          0x00002acc42222460 __libc_start_main +
    245

    6    tmp_qbrvq6m                        0x000055fba044dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var maxDivisor =\
    \ 1\n    var maxDivisorIndex = -1\n    for i := 2; i <= n; i++ {\n        if n\
    \ % i == 0 {\n            if maxDivisor < i {\n                maxDivisor = i\n\
    \                maxDivisorIndex = i\n            }\n        }\n    }\n    return\
    \ maxDivisorIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpdie_kcuc.swift:11:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpdie_kcuc.swift:11:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmpdie_kcuc.swift:11:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824479
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var max_divisor\
    \ = 0\n    var max_divisor_index = 0\n    for i := 0; i < n; i++ {\n        if\
    \ n % i == 0 {\n            if max_divisor < i {\n                max_divisor\
    \ = i\n                max_divisor_index = i\n            }\n        }\n    }\n\
    \    return max_divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpaifibw0k.swift:11:12: error: expected type\n    for i := 0; i <\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpaifibw0k.swift:11:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < n; i++ {\n\
    \           ^\n/tmp/tmpaifibw0k.swift:11:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for divisor in 1...n {\n        if n\
    \ % divisor == 0 {\n            if largest < divisor {\n                largest\
    \ = divisor\n            }\n        }\n    }\n    return largest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpj00dpk6n/tmpj00dpk6n.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac843cebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8439e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac8439e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8439e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj00dpk6n                        0x000055864847a335 <unavailable> + 4917

    5    libc.so.6                          0x00002ac843ed7460 __libc_start_main +
    245

    6    tmpj00dpk6n                        0x0000558648479fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var max_divisor = 0\n    for divisor in 1...n {\n       \
    \ if n % divisor == 0 {\n            if max_divisor < divisor {\n            \
    \    max_divisor = divisor\n            }\n        }\n    }\n    return max_divisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpovbpiwn_/tmpovbpiwn_.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b047d796c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b047d48db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b047d48d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b047d48c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpovbpiwn_                        0x000055e0173b4335 <unavailable> + 4917

    5    libc.so.6                          0x00002b047d982460 __libc_start_main +
    245

    6    tmpovbpiwn_                        0x000055e0173b3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for divisor in divisors {\n \
    \       if n / divisor == 0 {\n            if divisor > largestDivisor {\n   \
    \             largestDivisor = divisor\n            }\n        }\n    }\n    return\
    \ largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpyjgy6tsr.swift:7:20: error: cannot find 'divisors' in scope\n \
    \   for divisor in divisors {\n                   ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824479
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int()\n    for divisor in stride(from:\
    \ 1, to: n, by: 1) {\n        if n % divisor == 0 {\n            if largestDivisor\
    \ == 0 {\n                largestDivisor = divisor\n            } else {\n   \
    \             if divisor > largestDivisor {\n                    largestDivisor\
    \ = divisor\n                }\n            }\n        }\n    }\n    return largestDivisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var max_divisor = 0\n    var max_divisor_index = 0\n    for\
    \ index in 0..<n {\n        if n % index == 0 {\n            if max_divisor <\
    \ index {\n                max_divisor = index\n                max_divisor_index\
    \ = index\n            }\n        }\n    }\n    return max_divisor_index\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder
    operation

    Current stack trace:

    0    libswiftCore.so                    0x00002b40a690ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b40a6605561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b40a6605286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b40a660513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b40a6604bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp5s6os4q1                        0x000055b1b78ff6f9 <unavailable> + 5881

    6    tmp5s6os4q1                        0x000055b1b78ff2c8 <unavailable> + 4808

    7    libc.so.6                          0x00002b40a6afa460 __libc_start_main +
    245

    8    tmp5s6os4q1                        0x000055b1b78fefe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 1\n    var divisor = 1\n    for divisor\
    \ <= n {\n        if n % divisor == 0 {\n            if divisor > largestDivisor\
    \ {\n                largestDivisor = divisor\n            }\n        } else {\n\
    \            divisor++\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmps_5xs2_k.swift:8:17: error: expected 'in' after for-each pattern\n\
    \    for divisor <= n {\n                ^\n/tmp/tmps_5xs2_k.swift:8:17: error:\
    \ unary operator cannot be separated from its operand\n    for divisor <= n {\n\
    \                ^ ~\n                  \n/tmp/tmps_5xs2_k.swift:8:17: error:\
    \ '<=' is not a prefix unary operator\n    for divisor <= n {\n              \
    \  ^\n"
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int()\n    for divisor in 1...n {\n\
    \        if n % divisor == 0 {\n            if largestDivisor == 0 || largestDivisor\
    \ > divisor {\n                largestDivisor = divisor\n            }\n     \
    \   }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n:\
    \ 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: Exception
  stderr: 'tmpf4i9akm_/tmpf4i9akm_.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae192849c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae192540b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae192540988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae19253f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf4i9akm_                        0x00005635f3a6942b <unavailable> + 5163

    5    libc.so.6                          0x00002ae192a35460 __libc_start_main +
    245

    6    tmpf4i9akm_                        0x00005635f3a68fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var maxDivisor = 0\n    for divisor in 1...n {\n        if\
    \ n % divisor == 0 {\n            if maxDivisor < divisor {\n                maxDivisor\
    \ = divisor\n            }\n        }\n    }\n    return maxDivisor\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmplmk8lhk5/tmplmk8lhk5.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc6bceec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc6b9e5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc6b9e5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc6b9e47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplmk8lhk5                        0x0000564515910335 <unavailable> + 4917

    5    libc.so.6                          0x00002abc6beda460 __libc_start_main +
    245

    6    tmplmk8lhk5                        0x000056451590ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var maxDivisor = 0\n    for divisor in 1...n {\n        if\
    \ n % divisor == 0 {\n            if maxDivisor < divisor {\n                maxDivisor\
    \ = divisor\n            }\n        }\n    }\n    return maxDivisor\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmplmk8lhk5/tmplmk8lhk5.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc6bceec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc6b9e5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc6b9e5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc6b9e47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplmk8lhk5                        0x0000564515910335 <unavailable> + 4917

    5    libc.so.6                          0x00002abc6beda460 __libc_start_main +
    245

    6    tmplmk8lhk5                        0x000056451590ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return n\n    }\n\n    var largestDivisor\
    \ = Int()\n    var largestDivisorCount = 0\n\n    for divisor in 1...n {\n   \
    \     if n % divisor == 0 {\n            if largestDivisor == 0 || largestDivisor\
    \ > divisor {\n                largestDivisor = divisor\n                largestDivisorCount\
    \ = 1\n            } else {\n                largestDivisorCount += 1\n      \
    \      }\n        }\n    }\n\n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpn_62ihoq/tmpn_62ihoq.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ff1a01c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ff16f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ff16f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ff16f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn_62ihoq                        0x00005556f69aa42b <unavailable> + 5163

    5    libc.so.6                          0x00002b4ff1bed460 __libc_start_main +
    245

    6    tmpn_62ihoq                        0x00005556f69a9fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var max_divisor = 1\n    for divisor in 1...n {\n       \
    \ if n % divisor == 0 {\n            max_divisor = divisor\n        }\n    }\n\
    \    return max_divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpaykinulv/tmpaykinulv.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac30a752c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac30a449b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac30a449988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac30a4487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaykinulv                        0x0000562b07c82335 <unavailable> + 4917

    5    libc.so.6                          0x00002ac30a93e460 __libc_start_main +
    245

    6    tmpaykinulv                        0x0000562b07c81fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int()\n    var largestDivisorRemainder\
    \ = Int()\n    for var divisor = 2; divisor <= n; divisor++ {\n        if n %\
    \ divisor == 0 {\n            largestDivisor = divisor\n            largestDivisorRemainder\
    \ = n % divisor\n            break\n        }\n    }\n    if largestDivisorRemainder\
    \ == 0 {\n        return largestDivisor\n    }\n    return largestDivisor\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpkcn8q9ld.swift:8:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var divisor = 2; divisor <= n; divisor++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var maxDivisor =\
    \ 1\n    var maxDividend = n\n    for divisor in 2...n {\n        if n % divisor\
    \ == 0 {\n            if maxDividend % divisor == 0 {\n                maxDivisor\
    \ = divisor\n                maxDividend = n / divisor\n            } else {\n\
    \                maxDividend = n / divisor\n            }\n        }\n    }\n\
    \    return maxDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpf2kbkh7h/tmpf2kbkh7h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d8a2ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d89ff6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d89ff6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d89ff57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf2kbkh7h                        0x0000557f2e7b8335 <unavailable> + 4917

    5    libc.so.6                          0x00002b6d8a4eb460 __libc_start_main +
    245

    6    tmpf2kbkh7h                        0x0000557f2e7b7fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var maxDivisor = 1\n    for divisor in 1...n {\n        if\
    \ n % divisor == 0 {\n            if divisor > maxDivisor {\n                maxDivisor\
    \ = divisor\n            }\n        }\n    }\n    return maxDivisor\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpg_4qmbc4/tmpg_4qmbc4.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9d4b034c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9d4ad2bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9d4ad2b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9d4ad2a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg_4qmbc4                        0x000055c037d3a335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9d4b220460 __libc_start_main +
    245

    6    tmpg_4qmbc4                        0x000055c037d39fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var max_divisor = 0\n    for divisor in 1...n {\n       \
    \ if n % divisor == 0 {\n            if divisor > max_divisor {\n            \
    \    max_divisor = divisor\n            }\n        }\n    }\n    return max_divisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpi1va8dud/tmpi1va8dud.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26e00bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26dfdb1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26dfdb1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26dfdb07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi1va8dud                        0x000055ac5d87e335 <unavailable> + 4917

    5    libc.so.6                          0x00002b26e02a6460 __libc_start_main +
    245

    6    tmpi1va8dud                        0x000055ac5d87dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int()\n    var largestDivisorIndex =\
    \ Int()\n    var divisor = Int()\n    var divisorIndex = Int()\n    for divisorIndex\
    \ in 0..<n {\n        divisor = Int(sqrt(Double(divisorIndex)))\n        if divisor\
    \ > largestDivisor {\n            largestDivisor = divisor\n            largestDivisorIndex\
    \ = divisorIndex\n        }\n    }\n    return largestDivisorIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp22ikwi3i.swift:11:23: error: cannot find 'sqrt' in scope\n    \
    \    divisor = Int(sqrt(Double(divisorIndex)))\n                      ^~~~\n"
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var maxDivisor = 1\n    for divisor in 1...n {\n        if\
    \ n % divisor == 0 {\n            if maxDivisor < divisor {\n                maxDivisor\
    \ = divisor\n            }\n        }\n    }\n    return maxDivisor\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp8n1dvp09/tmp8n1dvp09.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b61350fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6134df1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6134df1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6134df07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8n1dvp09                        0x000055e8c0bf1335 <unavailable> + 4917

    5    libc.so.6                          0x00002b61352e6460 __libc_start_main +
    245

    6    tmp8n1dvp09                        0x000055e8c0bf0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int()\n    for divisor in stride(from:\
    \ n, through: 1, by: -1) {\n        if n / divisor == Int(n / divisor) {\n   \
    \         largestDivisor = divisor\n        }\n    }\n    return largestDivisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpgs0ivztv/tmpgs0ivztv.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b92a1c93c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b92a198ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b92a198a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92a19897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs0ivztv                        0x0000563ad1c3969b <unavailable> + 5787

    5    libc.so.6                          0x00002b92a1e7f460 __libc_start_main +
    245

    6    tmpgs0ivztv                        0x0000563ad1c39259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = Int(n)\n    var divisor = 1\n    for _ in 0..<n\
    \ {\n        if n % divisor == 0 {\n            divisor++\n        } else {\n\
    \            divisor = 1\n        }\n        if divisor > largest {\n        \
    \    largest = divisor\n        }\n    }\n    return largest\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpx2reeko9.swift:10:20: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            divisor++\n                   ^~\n"
  stdout: ''
  timestamp: 1659824479
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var maxDivisor = 1\n    var maxDivisorIndex = 0\n    for\
    \ i := 1; i <= n; i++ {\n        if n % i == 0 {\n            if maxDivisor <\
    \ i {\n                maxDivisor = i\n                maxDivisorIndex = i\n \
    \           }\n        }\n    }\n    return maxDivisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp3nlblye1.swift:8:12: error: expected type\n    for i := 1; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmp3nlblye1.swift:8:12: error:\
    \ expected 'in' after for-each pattern\n    for i := 1; i <= n; i++ {\n      \
    \     ^\n/tmp/tmp3nlblye1.swift:8:12: error: expected Sequence expression for\
    \ for-each loop\n    for i := 1; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var maxDivisor = Int()\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            if maxDivisor < divisor {\n          \
    \      maxDivisor = divisor\n            }\n        }\n    }\n    return maxDivisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpwcxzi_x0/tmpwcxzi_x0.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b557f8f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b557f5e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b557f5e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b557f5e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcxzi_x0                        0x000055d153faa335 <unavailable> + 4917

    5    libc.so.6                          0x00002b557fade460 __libc_start_main +
    245

    6    tmpwcxzi_x0                        0x000055d153fa9fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            if divisor > largestDivisor {\n      \
    \          largestDivisor = divisor\n            }\n        }\n    }\n    return\
    \ largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmp8fdji42m/tmp8fdji42m.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba44b6fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba44b3f5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba44b3f5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba44b3f47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8fdji42m                        0x00005562f22eb335 <unavailable> + 4917

    5    libc.so.6                          0x00002ba44b8ea460 __libc_start_main +
    245

    6    tmp8fdji42m                        0x00005562f22eafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return 0\n    }\n    var max_divisor\
    \ = 1\n    for divisor in 2...n {\n        if n % divisor == 0 {\n           \
    \ max_divisor = divisor\n        }\n    }\n    return max_divisor\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmph1897aox/tmph1897aox.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b69d7bb1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b69d78a8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b69d78a8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b69d78a77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph1897aox                        0x0000556dabae4335 <unavailable> + 4917

    5    libc.so.6                          0x00002b69d7d9d460 __libc_start_main +
    245

    6    tmph1897aox                        0x0000556dabae3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int()\n    for divisor in 1...n {\n\
    \        if n % divisor == 0 {\n            if largestDivisor == 0 {\n       \
    \         largestDivisor = divisor\n            } else {\n                if divisor\
    \ > largestDivisor {\n                    largestDivisor = divisor\n         \
    \       }\n            }\n        }\n    }\n    return largestDivisor\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmphzc1w2ci/tmphzc1w2ci.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac13699ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac136695b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac136695988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1366947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphzc1w2ci                        0x0000555f66837335 <unavailable> + 4917

    5    libc.so.6                          0x00002ac136b8a460 __libc_start_main +
    245

    6    tmphzc1w2ci                        0x0000555f66836fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 1\n    var divisor = 1\n    for divisor\
    \ < n {\n        if n % divisor == 0 {\n            largestDivisor = divisor\n\
    \        }\n        divisor++\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmphdw_vffv.swift:8:17: error: expected 'in' after for-each pattern\n\
    \    for divisor < n {\n                ^\n/tmp/tmphdw_vffv.swift:8:17: error:\
    \ unary operator cannot be separated from its operand\n    for divisor < n {\n\
    \                ^~\n                 \n/tmp/tmphdw_vffv.swift:8:17: error: '<'\
    \ is not a prefix unary operator\n    for divisor < n {\n                ^\n"
  stdout: ''
  timestamp: 1659824479
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int()\n    var largestDivisorCount =\
    \ 0\n    for divisor in divisors(n) {\n        if divisor > largestDivisor {\n\
    \            largestDivisor = divisor\n            largestDivisorCount = 1\n \
    \       } else if divisor == largestDivisor {\n            largestDivisorCount\
    \ += 1\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp15rufft_.swift:8:20: error: cannot find 'divisors' in scope\n \
    \   for divisor in divisors(n) {\n                   ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824479
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var maxDivisor = 1\n    var maxDivisorIndex = 0\n    for\
    \ i := 1; i < n; i++ {\n        if n % i == 0 {\n            if maxDivisor < i\
    \ {\n                maxDivisor = i\n                maxDivisorIndex = i\n   \
    \         }\n        }\n    }\n    return maxDivisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpobqnl8o0.swift:8:12: error: expected type\n    for i := 1; i <\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpobqnl8o0.swift:8:12: error:\
    \ expected 'in' after for-each pattern\n    for i := 1; i < n; i++ {\n       \
    \    ^\n/tmp/tmpobqnl8o0.swift:8:12: error: expected Sequence expression for for-each\
    \ loop\n    for i := 1; i < n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824479
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var maxDivisor =\
    \ 1\n    var maxDivisorIndex = -1\n    for i := 1; i <= n; i++ {\n        if n\
    \ % i == 0 {\n            if maxDivisor < i {\n                maxDivisor = i\n\
    \                maxDivisorIndex = i\n            }\n        }\n    }\n    return\
    \ maxDivisorIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp_pdzro8o.swift:11:12: error: expected type\n    for i := 1; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmp_pdzro8o.swift:11:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i <= n; i++ {\n\
    \           ^\n/tmp/tmp_pdzro8o.swift:11:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 1; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var max_divisor\
    \ = 1\n    var max_divisor_remainder = n\n    for divisor in 2...n {\n       \
    \ if n % divisor == 0 {\n            if max_divisor_remainder % divisor == 0 {\n\
    \                max_divisor = divisor\n                max_divisor_remainder\
    \ = max_divisor_remainder / divisor\n            } else {\n                max_divisor_remainder\
    \ = max_divisor_remainder / divisor\n            }\n        }\n    }\n    return\
    \ max_divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpua3zgjle/tmpua3zgjle.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b25dcb0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b25dc801b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b25dc801988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b25dc8007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpua3zgjle                        0x000055fa64141335 <unavailable> + 4917

    5    libc.so.6                          0x00002b25dccf6460 __libc_start_main +
    245

    6    tmpua3zgjle                        0x000055fa64140fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var maxDivisor =\
    \ 1\n    var maxDividend = n\n    for divisor in 2...n {\n        if n % divisor\
    \ == 0 {\n            if maxDividend % divisor == 0 {\n                maxDivisor\
    \ = divisor\n                maxDividend = n / divisor\n            }\n      \
    \  }\n    }\n    return maxDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n:\
    \ 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: Exception
  stderr: 'tmp34_fmtpd/tmp34_fmtpd.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5452312c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5452009b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5452009988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b54520087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp34_fmtpd                        0x0000558629263335 <unavailable> + 4917

    5    libc.so.6                          0x00002b54524fe460 __libc_start_main +
    245

    6    tmp34_fmtpd                        0x0000558629262fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var maxDivisor = 1\n    for divisor in 1...n {\n        if\
    \ n % divisor == 0 {\n            if divisor > maxDivisor {\n                maxDivisor\
    \ = divisor\n            }\n        }\n    }\n    return maxDivisor\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpg_4qmbc4/tmpg_4qmbc4.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9d4b034c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9d4ad2bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9d4ad2b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9d4ad2a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg_4qmbc4                        0x000055c037d3a335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9d4b220460 __libc_start_main +
    245

    6    tmpg_4qmbc4                        0x000055c037d39fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var max_divisor = 0\n    for divisor in 1...n {\n       \
    \ if n % divisor == 0 {\n            if divisor > max_divisor {\n            \
    \    max_divisor = divisor\n            }\n        }\n    }\n    return max_divisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpi1va8dud/tmpi1va8dud.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26e00bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26dfdb1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26dfdb1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26dfdb07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi1va8dud                        0x000055ac5d87e335 <unavailable> + 4917

    5    libc.so.6                          0x00002b26e02a6460 __libc_start_main +
    245

    6    tmpi1va8dud                        0x000055ac5d87dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 1\n    var largestDivisorIndex = 0\n\
    \    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            if largestDivisor\
    \ < i {\n                largestDivisor = i\n                largestDivisorIndex\
    \ = i\n            }\n        }\n    }\n    return largestDivisorIndex\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpmtadphsm.swift:8:12: error: expected type\n    for i := 1; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpmtadphsm.swift:8:12: error:\
    \ expected 'in' after for-each pattern\n    for i := 1; i <= n; i++ {\n      \
    \     ^\n/tmp/tmpmtadphsm.swift:8:12: error: expected Sequence expression for\
    \ for-each loop\n    for i := 1; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824479
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = Int(n)\n    var divisor = 1\n    while divisor\
    \ <= n {\n        if n % divisor == 0 {\n            largest = divisor\n     \
    \   }\n        divisor++\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpq6ene0go.swift:12:16: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        divisor++\n               ^~\n"
  stdout: ''
  timestamp: 1659824479
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 1\n    var largestDivisorIndex = 0\n\
    \    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            if largestDivisor\
    \ < i {\n                largestDivisor = i\n                largestDivisorIndex\
    \ = i\n            }\n        }\n    }\n    return largestDivisorIndex\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpmtadphsm.swift:8:12: error: expected type\n    for i := 1; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpmtadphsm.swift:8:12: error:\
    \ expected 'in' after for-each pattern\n    for i := 1; i <= n; i++ {\n      \
    \     ^\n/tmp/tmpmtadphsm.swift:8:12: error: expected Sequence expression for\
    \ for-each loop\n    for i := 1; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var max_divisor = 0\n    for divisor in 1...n {\n       \
    \ if n % divisor == 0 {\n            if max_divisor < divisor {\n            \
    \    max_divisor = divisor\n            }\n        }\n    }\n    return max_divisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpovbpiwn_/tmpovbpiwn_.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b047d796c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b047d48db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b047d48d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b047d48c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpovbpiwn_                        0x000055e0173b4335 <unavailable> + 4917

    5    libc.so.6                          0x00002b047d982460 __libc_start_main +
    245

    6    tmpovbpiwn_                        0x000055e0173b3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    var divisor = 1\n    for _ in 0..<n\
    \ {\n        if n % divisor == 0 {\n            divisor++\n        } else {\n\
    \            divisor = 1\n            largest = divisor\n        }\n    }\n  \
    \  return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpibsevqoq.swift:10:20: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            divisor++\n                   ^~\n"
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var max_divisor = 0\n    for divisor in 1...n {\n       \
    \ if n % divisor == 0 {\n            if max_divisor < divisor {\n            \
    \    max_divisor = divisor\n            }\n        }\n    }\n    return max_divisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpovbpiwn_/tmpovbpiwn_.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b047d796c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b047d48db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b047d48d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b047d48c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpovbpiwn_                        0x000055e0173b4335 <unavailable> + 4917

    5    libc.so.6                          0x00002b047d982460 __libc_start_main +
    245

    6    tmpovbpiwn_                        0x000055e0173b3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    var divisor = 1\n    for _ in 0..<n\
    \ {\n        if n % divisor == 0 {\n            divisor++\n            if divisor\
    \ > largest {\n                largest = divisor\n            }\n        } else\
    \ {\n            divisor = 1\n        }\n    }\n    return largest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpeg9ublvm.swift:10:20: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            divisor++\n                   ^~\n"
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 1\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            if divisor > largestDivisor {\n      \
    \          largestDivisor = divisor\n            }\n        }\n    }\n    return\
    \ largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpyfz9p9rp/tmpyfz9p9rp.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b69222adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6921fa4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6921fa4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6921fa37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyfz9p9rp                        0x000055ffa18f1335 <unavailable> + 4917

    5    libc.so.6                          0x00002b6922499460 __libc_start_main +
    245

    6    tmpyfz9p9rp                        0x000055ffa18f0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var max_divisor\
    \ = 1\n    var max_divisor_index = 0\n    for i := 1; i <= n; i++ {\n        if\
    \ n % i == 0 {\n            if max_divisor < i {\n                max_divisor\
    \ = i\n                max_divisor_index = i\n            }\n        }\n    }\n\
    \    return max_divisor_index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpu03p8fmz.swift:11:12: error: expected type\n    for i := 1; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpu03p8fmz.swift:11:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i <= n; i++ {\n\
    \           ^\n/tmp/tmpu03p8fmz.swift:11:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 1; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            largestDivisor = divisor\n        }\n\
    \    }\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpbzt_j2w5/tmpbzt_j2w5.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab4d2edfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab4d2bd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab4d2bd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4d2bd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbzt_j2w5                        0x000055a604ca3335 <unavailable> + 4917

    5    libc.so.6                          0x00002ab4d30cb460 __libc_start_main +
    245

    6    tmpbzt_j2w5                        0x000055a604ca2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    var largestDivisorIndex = 0\n\
    \    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            if largestDivisor\
    \ == 0 || largestDivisor > i {\n                largestDivisor = i\n         \
    \       largestDivisorIndex = i\n            }\n        }\n    }\n    return largestDivisorIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpc58t5qzi.swift:8:12: error: expected type\n    for i := 1; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpc58t5qzi.swift:8:12: error:\
    \ expected 'in' after for-each pattern\n    for i := 1; i <= n; i++ {\n      \
    \     ^\n/tmp/tmpc58t5qzi.swift:8:12: error: expected Sequence expression for\
    \ for-each loop\n    for i := 1; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for divisor in 1...n {\n        if n\
    \ % divisor == 0 {\n            largest = divisor\n        }\n    }\n    return\
    \ largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(largest_divisor(n: 3)\
    \ == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) ==\
    \ 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49) ==\
    \ 7)"
  status: Exception
  stderr: 'tmp38neag1k/tmp38neag1k.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace77be0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace778d7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ace778d7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ace778d67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp38neag1k                        0x00005559fac86335 <unavailable> + 4917

    5    libc.so.6                          0x00002ace77dcc460 __libc_start_main +
    245

    6    tmp38neag1k                        0x00005559fac85fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var largest = n\n\
    \    for divisor in 2...n {\n        if n % divisor == 0 {\n            largest\
    \ = divisor\n        }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp0zxpn2ng/tmp0zxpn2ng.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab5a956fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab5a9266b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab5a9266988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab5a92657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0zxpn2ng                        0x00005620a4434335 <unavailable> + 4917

    5    libc.so.6                          0x00002ab5a975b460 __libc_start_main +
    245

    6    tmp0zxpn2ng                        0x00005620a4433fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var max_divisor = 0\n    for divisor in 1...n {\n       \
    \ if n % divisor == 0 {\n            if max_divisor < divisor {\n            \
    \    max_divisor = divisor\n            }\n        }\n    }\n    return max_divisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpovbpiwn_/tmpovbpiwn_.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b047d796c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b047d48db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b047d48d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b047d48c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpovbpiwn_                        0x000055e0173b4335 <unavailable> + 4917

    5    libc.so.6                          0x00002b047d982460 __libc_start_main +
    245

    6    tmpovbpiwn_                        0x000055e0173b3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            if largestDivisor < divisor {\n      \
    \          largestDivisor = divisor\n            }\n        }\n    }\n    return\
    \ largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpu6n6ofza/tmpu6n6ofza.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5379336c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b537902db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b537902d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b537902c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu6n6ofza                        0x0000557063363335 <unavailable> + 4917

    5    libc.so.6                          0x00002b5379522460 __libc_start_main +
    245

    6    tmpu6n6ofza                        0x0000557063362fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var largest = Int(n)\n\
    \    var divisor = 1\n    for _ in 0..<n {\n        if n % divisor == 0 {\n  \
    \          largest = divisor\n        }\n        divisor *= 2\n    }\n    return\
    \ largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(largest_divisor(n: 3)\
    \ == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) ==\
    \ 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49) ==\
    \ 7)"
  status: Exception
  stderr: 'tmpzeyc6vi4/tmpzeyc6vi4.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afa82a77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afa8276eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afa8276e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afa8276d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzeyc6vi4                        0x0000562c0731356b <unavailable> + 5483

    5    libc.so.6                          0x00002afa82c63460 __libc_start_main +
    245

    6    tmpzeyc6vi4                        0x0000562c07313129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 1\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            if divisor * divisor > n {\n         \
    \       largestDivisor = divisor\n            } else {\n                largestDivisor\
    \ = largestDivisor * divisor\n            }\n        }\n    }\n    return largestDivisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpii1o9l_a/tmpii1o9l_a.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b788c0cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b788bdc2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b788bdc2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b788bdc17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpii1o9l_a                        0x000056544c071335 <unavailable> + 4917

    5    libc.so.6                          0x00002b788c2b7460 __libc_start_main +
    245

    6    tmpii1o9l_a                        0x000056544c070fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var max_divisor = 1\n    var max_divisor2 = 1\n    for divisor\
    \ in 1...n {\n        if n % divisor == 0 {\n            if divisor > max_divisor\
    \ {\n                max_divisor = divisor\n            }\n            if divisor\
    \ * divisor > max_divisor2 {\n                max_divisor2 = divisor\n       \
    \     }\n        }\n    }\n    return max_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp77n04l16/tmp77n04l16.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad50293cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad502633b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad502633988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad5026327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp77n04l16                        0x0000562a986d2335 <unavailable> + 4917

    5    libc.so.6                          0x00002ad502b28460 __libc_start_main +
    245

    6    tmp77n04l16                        0x0000562a986d1fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int()\n    var divisor = Int()\n   \
    \ var remainder = Int()\n    for divisor = 2; divisor <= n; divisor++ {\n    \
    \    remainder = n % divisor\n        if remainder == 0 {\n            largestDivisor\
    \ = divisor\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpkg6bzh4r.swift:9:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for divisor = 2; divisor <= n; divisor++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824479
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for divisor in divisors {\n \
    \       if n / divisor == 0 {\n            largestDivisor = divisor\n        \
    \    break\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmprbwkce0o.swift:7:20: error: cannot find 'divisors' in scope\n \
    \   for divisor in divisors {\n                   ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var maxDivisor = 1\n    for divisor in 1...n {\n        if\
    \ n % divisor == 0 {\n            if maxDivisor < divisor {\n                maxDivisor\
    \ = divisor\n            }\n        }\n    }\n    return maxDivisor\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp8n1dvp09/tmp8n1dvp09.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b61350fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6134df1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6134df1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6134df07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8n1dvp09                        0x000055e8c0bf1335 <unavailable> + 4917

    5    libc.so.6                          0x00002b61352e6460 __libc_start_main +
    245

    6    tmp8n1dvp09                        0x000055e8c0bf0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int(1)\n    for divisor in 1...n {\n\
    \        if n % divisor == 0 {\n            if largestDivisor < divisor {\n  \
    \              largestDivisor = divisor\n            }\n        }\n    }\n   \
    \ return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpyr638j0z/tmpyr638j0z.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1629b06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b16297fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b16297fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b16297fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyr638j0z                        0x0000561694413335 <unavailable> + 4917

    5    libc.so.6                          0x00002b1629cf2460 __libc_start_main +
    245

    6    tmpyr638j0z                        0x0000561694412fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var max_divisor = 0\n    for divisor in 1...n {\n       \
    \ if n % divisor == 0 {\n            if divisor > max_divisor {\n            \
    \    max_divisor = divisor\n            }\n        }\n    }\n    return max_divisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpi1va8dud/tmpi1va8dud.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26e00bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26dfdb1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26dfdb1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26dfdb07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi1va8dud                        0x000055ac5d87e335 <unavailable> + 4917

    5    libc.so.6                          0x00002b26e02a6460 __libc_start_main +
    245

    6    tmpi1va8dud                        0x000055ac5d87dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var max_divisor = 0\n    for divisor in 1...n {\n       \
    \ if n % divisor == 0 {\n            if divisor > max_divisor {\n            \
    \    max_divisor = divisor\n            }\n        }\n    }\n    return max_divisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpi1va8dud/tmpi1va8dud.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26e00bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26dfdb1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26dfdb1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26dfdb07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi1va8dud                        0x000055ac5d87e335 <unavailable> + 4917

    5    libc.so.6                          0x00002b26e02a6460 __libc_start_main +
    245

    6    tmpi1va8dud                        0x000055ac5d87dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 1\n    var currentDivisor = 1\n    for\
    \ currentDivisor <= n {\n        if currentDivisor % 2 == 0 {\n            if\
    \ currentDivisor > largestDivisor {\n                largestDivisor = currentDivisor\n\
    \            }\n        } else {\n            if currentDivisor < largestDivisor\
    \ {\n                largestDivisor = currentDivisor\n            }\n        }\n\
    \        currentDivisor++\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp28szmbz4.swift:8:24: error: expected 'in' after for-each pattern\n\
    \    for currentDivisor <= n {\n                       ^\n/tmp/tmp28szmbz4.swift:8:24:\
    \ error: unary operator cannot be separated from its operand\n    for currentDivisor\
    \ <= n {\n                       ^ ~\n                         \n/tmp/tmp28szmbz4.swift:8:24:\
    \ error: '<=' is not a prefix unary operator\n    for currentDivisor <= n {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            if divisor > largestDivisor {\n      \
    \          largestDivisor = divisor\n            }\n        }\n    }\n    return\
    \ largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmp8fdji42m/tmp8fdji42m.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba44b6fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba44b3f5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba44b3f5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba44b3f47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8fdji42m                        0x00005562f22eb335 <unavailable> + 4917

    5    libc.so.6                          0x00002ba44b8ea460 __libc_start_main +
    245

    6    tmp8fdji42m                        0x00005562f22eafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 1\n    var largestDivisorIndex = 0\n\
    \    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            if largestDivisor\
    \ < i {\n                largestDivisor = i\n                largestDivisorIndex\
    \ = i\n            }\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpnwtf8u48.swift:8:12: error: expected type\n    for i := 1; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpnwtf8u48.swift:8:12: error:\
    \ expected 'in' after for-each pattern\n    for i := 1; i <= n; i++ {\n      \
    \     ^\n/tmp/tmpnwtf8u48.swift:8:12: error: expected Sequence expression for\
    \ for-each loop\n    for i := 1; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824479
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = Int(n)\n    var divisor = Int(n)\n    for divisor\
    \ < n {\n        if n % divisor == 0 {\n            largest = divisor\n      \
    \  }\n        divisor += 1\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpy5nvmuu1.swift:8:17: error: expected 'in' after for-each pattern\n\
    \    for divisor < n {\n                ^\n/tmp/tmpy5nvmuu1.swift:8:17: error:\
    \ unary operator cannot be separated from its operand\n    for divisor < n {\n\
    \                ^~\n                 \n/tmp/tmpy5nvmuu1.swift:8:17: error: '<'\
    \ is not a prefix unary operator\n    for divisor < n {\n                ^\n"
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int(1)\n    var largestDivisorFactor\
    \ = Int(1)\n    var currentDivisor = Int(1)\n    for _ in 0..<n {\n        currentDivisor\
    \ *= Int(2)\n        if currentDivisor > largestDivisor {\n            largestDivisor\
    \ = currentDivisor\n            largestDivisorFactor = largestDivisor\n      \
    \  }\n    }\n    return largestDivisorFactor\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: Exception
  stderr: 'tmphle01mmd/tmphle01mmd.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb67e2dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb67b24b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb67b24988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb67b237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphle01mmd                        0x00005588c9a40335 <unavailable> + 4917

    5    libc.so.6                          0x00002abb68019460 __libc_start_main +
    245

    6    tmphle01mmd                        0x00005588c9a3ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int()\n    var largestDivisorNum = Int()\n\
    \    var largestDivisorNum2 = Int()\n    var largestDivisorNum3 = Int()\n    var\
    \ largestDivisorNum4 = Int()\n    var largestDivisorNum5 = Int()\n    var largestDivisorNum6\
    \ = Int()\n    var largestDivisorNum7 = Int()\n    var largestDivisorNum8 = Int()\n\
    \    var largestDivisorNum9 = Int()\n    var largestDivisorNum10 = Int()\n   \
    \ var largestDivisorNum11 = Int()\n    var largestDivisorNum12 = Int()\n    var\
    \ largestDivisorNum13 = Int()\n    var largestDivisorNum14 = Int()\n    var largestDivisorNum15\
    \ = Int()\n    var largestDivisorNum16 = Int()\n    var largestDivisorNum17 =\
    \ Int()\n    var largestDivisorNum18 = Int()\n    var largestDivisorNum19 = Int()\n\
    \    var largestDivisorNum20 = Int()\n    var largestDivisorNum21 = Int()\n  \
    \  var largestDivisorNum22 = Int()\n    var largestDivisorNum23 = Int()\n    var\
    \ largestDivisorNum24 = Int()\n    var largestDivisorNum25 = Int()\n    var largestDivisorNum26\
    \ = Int()\n    var largestDivisorNum27 = Int()\n    var largestDivisorNum28 =\
    \ Int()\n    var largestDivisorNum29 = Int()\n    var largestDivisorNum30 = Int()\n\
    \    var largestDivisorNum31 = Int()\n    var largestDivisorNum32 = Int()\n  \
    \  var largestDivisorNum33 = Int()\n    var largestDivisorNum34 = Int()\n    var\
    \ largestDivisorNum35 = Int()\n    var largestDivisorNum36 = Int()\n    var largestDivisorNum37\
    \ = Int()\n    var largestDivisorNum38 = Int()\n    var largestDivisorNum39 =\
    \ Int()\n    var largestDivisorNum40 = Int()\n    var largestDivisorNum41 = Int()\n\
    \    var largestDivisorNum42 = Int()\n    var largestDivisorNum43 = Int()\n  \
    \  var largestDivisorNum44 = Int()\n    var largestDivisorNum45 = Int()\n    var\
    \ largestDivisorNum46 = Int()\n    var largestDivisorNum47 = Int\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmppz1vc263.swift:53:31: error: expected member name or constructor\
    \ call after type name\n    var largestDivisorNum47 = Int\n                  \
    \            ^\n/tmp/tmppz1vc263.swift:53:31: note: add arguments after the type\
    \ to construct a value of the type\n    var largestDivisorNum47 = Int\n      \
    \                        ^\n                                 ()\n/tmp/tmppz1vc263.swift:53:31:\
    \ note: use '.self' to reference the type object\n    var largestDivisorNum47\
    \ = Int\n                              ^\n                                 .self\n\
    /tmp/tmppz1vc263.swift:6:9: warning: initialization of variable 'largestDivisor'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var largestDivisor = Int()\n    ~~~~^~~~~~~~~~~~~~\n    _\n/tmp/tmppz1vc263.swift:7:9:\
    \ warning: initialization of variable 'largestDivisorNum' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var largestDivisorNum =\
    \ Int()\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmppz1vc263.swift:8:9: warning:\
    \ initialization of variable 'largestDivisorNum2' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var largestDivisorNum2 = Int()\n\
    \    ~~~~^~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmppz1vc263.swift:9:9: warning: initialization\
    \ of variable 'largestDivisorNum3' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var largestDivisorNum3 = Int()\n    ~~~~^~~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmppz1vc263.swift:10:9: warning: initialization of variable 'largestDivisorNum4'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var largestDivisorNum4 = Int()\n    ~~~~^~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmppz1vc263.swift:11:9:\
    \ warning: initialization of variable 'largestDivisorNum5' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var largestDivisorNum5\
    \ = Int()\n    ~~~~^~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmppz1vc263.swift:12:9: warning:\
    \ initialization of variable 'largestDivisorNum6' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    "
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 1\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            if divisor * divisor > n {\n         \
    \       return largestDivisor\n            }\n            largestDivisor = divisor\n\
    \        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: Exception
  stderr: 'tmp7cyygitu/tmp7cyygitu.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac942488c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac94217fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac94217f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac94217e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7cyygitu                        0x0000559ab27c842b <unavailable> + 5163

    5    libc.so.6                          0x00002ac942674460 __libc_start_main +
    245

    6    tmp7cyygitu                        0x0000559ab27c7fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = Int(n)\n    for divisor in 1...n {\n      \
    \  if n % divisor == 0 {\n            largest = divisor\n        }\n    }\n  \
    \  return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpl18neyst/tmpl18neyst.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80b1c09c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80b1900b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80b1900988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80b18ff7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl18neyst                        0x0000558205edb475 <unavailable> + 5237

    5    libc.so.6                          0x00002b80b1df5460 __libc_start_main +
    245

    6    tmpl18neyst                        0x0000558205edb129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 1\n    var largestDivisorIndex = 0\n\
    \    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n            if largestDivisor\
    \ < i {\n                largestDivisor = i\n                largestDivisorIndex\
    \ = i\n            }\n        }\n    }\n    return largestDivisorIndex\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpuqnmrlqc.swift:8:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpuqnmrlqc.swift:8:12: error:\
    \ expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n      \
    \     ^\n/tmp/tmpuqnmrlqc.swift:8:12: error: expected Sequence expression for\
    \ for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824479
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var maxDivisor = 1\n    var maxDivisorIndex = 0\n    for\
    \ i := 1; i <= n; i++ {\n        if n % i == 0 {\n            if maxDivisor <\
    \ i {\n                maxDivisor = i\n                maxDivisorIndex = i\n \
    \           }\n        }\n    }\n    return maxDivisorIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp3oo6iaef.swift:8:12: error: expected type\n    for i := 1; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmp3oo6iaef.swift:8:12: error:\
    \ expected 'in' after for-each pattern\n    for i := 1; i <= n; i++ {\n      \
    \     ^\n/tmp/tmp3oo6iaef.swift:8:12: error: expected Sequence expression for\
    \ for-each loop\n    for i := 1; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 1\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            if largestDivisor < divisor {\n      \
    \          largestDivisor = divisor\n            }\n        }\n    }\n    return\
    \ largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpknwfs0xa/tmpknwfs0xa.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afd2a985c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afd2a67cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afd2a67c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afd2a67b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpknwfs0xa                        0x0000558741632335 <unavailable> + 4917

    5    libc.so.6                          0x00002afd2ab71460 __libc_start_main +
    245

    6    tmpknwfs0xa                        0x0000558741631fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824480
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var maxDivisor = 1\n    var maxDivisorIndex = -1\n    for\
    \ i := 0; i < n; i++ {\n        if n % maxDivisor == 0 {\n            maxDivisorIndex\
    \ = i\n        }\n        maxDivisor *= 2\n    }\n    return maxDivisorIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpmbghlf2g.swift:8:12: error: expected type\n    for i := 0; i <\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpmbghlf2g.swift:8:12: error:\
    \ expected 'in' after for-each pattern\n    for i := 0; i < n; i++ {\n       \
    \    ^\n/tmp/tmpmbghlf2g.swift:8:12: error: expected Sequence expression for for-each\
    \ loop\n    for i := 0; i < n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824479
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for divisor in divisors(n) {\n\
    \        if divisor > largestDivisor {\n            largestDivisor = divisor\n\
    \        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpup6v48bu.swift:7:20: error: cannot find 'divisors' in scope\n \
    \   for divisor in divisors(n) {\n                   ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int()\n    var largestDivisorRemainder\
    \ = Int()\n    for divisor in 1...n {\n        if n % divisor == 0 {\n       \
    \     if divisor * divisor > largestDivisor {\n                largestDivisor\
    \ = divisor\n                largestDivisorRemainder = n\n            }\n    \
    \    }\n    }\n    if largestDivisorRemainder == 0 {\n        return largestDivisor\n\
    \    } else {\n        return largestDivisor\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmphyyevkdz/tmphyyevkdz.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0fdc6ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0fdc3e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0fdc3e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0fdc3e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphyyevkdz                        0x000056393f280335 <unavailable> + 4917

    5    libc.so.6                          0x00002b0fdc8d7460 __libc_start_main +
    245

    6    tmphyyevkdz                        0x000056393f27ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824480
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 1\n    var divisor = 1\n    for divisor\
    \ <= n {\n        if n % divisor == 0 {\n            largestDivisor = divisor\n\
    \        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp1zcqxqgh.swift:8:17: error: expected 'in' after for-each pattern\n\
    \    for divisor <= n {\n                ^\n/tmp/tmp1zcqxqgh.swift:8:17: error:\
    \ unary operator cannot be separated from its operand\n    for divisor <= n {\n\
    \                ^ ~\n                  \n/tmp/tmp1zcqxqgh.swift:8:17: error:\
    \ '<=' is not a prefix unary operator\n    for divisor <= n {\n              \
    \  ^\n"
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var maxDivisor =\
    \ 1\n    for divisor in 1...n {\n        if n % divisor == 0 {\n            if\
    \ maxDivisor < divisor {\n                maxDivisor = divisor\n            }\n\
    \        }\n    }\n    return maxDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n:\
    \ 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: Exception
  stderr: 'tmpo4pls8f4/tmpo4pls8f4.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b50cd55fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b50cd256b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b50cd256988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b50cd2557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo4pls8f4                        0x00005569aa06f335 <unavailable> + 4917

    5    libc.so.6                          0x00002b50cd74b460 __libc_start_main +
    245

    6    tmpo4pls8f4                        0x00005569aa06efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824480
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int()\n    var largestDivisorIndex =\
    \ Int()\n    for i := 0; i < n; i++ {\n        if n % i == 0 {\n            if\
    \ largestDivisor == 0 || largestDivisor > i {\n                largestDivisor\
    \ = i\n                largestDivisorIndex = i\n            }\n        }\n   \
    \ }\n    return largestDivisorIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n:\
    \ 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpszki3ssg.swift:8:12: error: expected type\n    for i := 0; i <\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpszki3ssg.swift:8:12: error:\
    \ expected 'in' after for-each pattern\n    for i := 0; i < n; i++ {\n       \
    \    ^\n/tmp/tmpszki3ssg.swift:8:12: error: expected Sequence expression for for-each\
    \ loop\n    for i := 0; i < n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var maxDivisor = 1\n    for divisor in 1...n {\n        if\
    \ n % divisor == 0 {\n            if maxDivisor < divisor {\n                maxDivisor\
    \ = divisor\n            }\n        }\n    }\n    return maxDivisor\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp8n1dvp09/tmp8n1dvp09.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b61350fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6134df1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6134df1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6134df07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8n1dvp09                        0x000055e8c0bf1335 <unavailable> + 4917

    5    libc.so.6                          0x00002b61352e6460 __libc_start_main +
    245

    6    tmp8n1dvp09                        0x000055e8c0bf0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var max_divisor = 0\n    for divisor in 1...n {\n       \
    \ if n % divisor == 0 {\n            if divisor > max_divisor {\n            \
    \    max_divisor = divisor\n            }\n        }\n    }\n    return max_divisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpi1va8dud/tmpi1va8dud.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26e00bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26dfdb1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26dfdb1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26dfdb07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi1va8dud                        0x000055ac5d87e335 <unavailable> + 4917

    5    libc.so.6                          0x00002b26e02a6460 __libc_start_main +
    245

    6    tmpi1va8dud                        0x000055ac5d87dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = Int(n)\n    var divisor = 1\n    while divisor\
    \ <= n {\n        if n % divisor == 0 {\n            largest = divisor\n     \
    \   }\n        divisor++\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpq6ene0go.swift:12:16: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        divisor++\n               ^~\n"
  stdout: ''
  timestamp: 1659824479
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return 0\n    }\n    var maxDivisor =\
    \ 1\n    var maxDivisorIndex = -1\n    for i := 0; i < n; i++ {\n        if n\
    \ % maxDivisor == 0 {\n            maxDivisorIndex = i\n            maxDivisor\
    \ = maxDivisor + 1\n        }\n    }\n    return maxDivisorIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpvra0xgbs.swift:11:12: error: expected type\n    for i := 0; i <\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpvra0xgbs.swift:11:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < n; i++ {\n\
    \           ^\n/tmp/tmpvra0xgbs.swift:11:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            if largestDivisor == 0 {\n           \
    \     largestDivisor = divisor\n            } else {\n                if divisor\
    \ > largestDivisor {\n                    largestDivisor = divisor\n         \
    \       }\n            }\n        }\n    }\n    return largestDivisor\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp1ehx1cq6/tmp1ehx1cq6.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0275f67c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0275c5eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0275c5e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0275c5d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1ehx1cq6                        0x0000563047beb335 <unavailable> + 4917

    5    libc.so.6                          0x00002b0276153460 __libc_start_main +
    245

    6    tmp1ehx1cq6                        0x0000563047beafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824480
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for divisor in divisors(n) {\n     \
    \   if n % divisor == 0 {\n            if largest < divisor {\n              \
    \  largest = divisor\n            }\n        }\n    }\n    return largest\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpwsmcylb_.swift:7:20: error: cannot find 'divisors' in scope\n \
    \   for divisor in divisors(n) {\n                   ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int()\n    for divisor in stride(from:\
    \ n, through: 1, by: -1) {\n        if n % divisor == 0 {\n            largestDivisor\
    \ = divisor\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp96jtsqg2/tmp96jtsqg2.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba89afe6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba89acddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba89acdd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba89acdc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp96jtsqg2                        0x000055c2ca23756b <unavailable> + 5483

    5    libc.so.6                          0x00002ba89b1d2460 __libc_start_main +
    245

    6    tmp96jtsqg2                        0x000055c2ca237129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824480
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return n\n    }\n\n    var max_divisor\
    \ = 1\n    var max_divisor_index = 0\n\n    for i := 1; i <= n; i++ {\n      \
    \  if n % i == 0 {\n            if max_divisor < i {\n                max_divisor\
    \ = i\n                max_divisor_index = i\n            }\n        }\n    }\n\
    \n    return max_divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpglho78hj.swift:13:12: error: expected type\n    for i := 1; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpglho78hj.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i <= n; i++ {\n\
    \           ^\n/tmp/tmpglho78hj.swift:13:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 1; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824480
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            if divisor * divisor > largestDivisor\
    \ {\n                largestDivisor = divisor\n            }\n        }\n    }\n\
    \    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpnea948wi/tmpnea948wi.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac570b9cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac570893b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac570893988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5708927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnea948wi                        0x00005633446a7335 <unavailable> + 4917

    5    libc.so.6                          0x00002ac570d88460 __libc_start_main +
    245

    6    tmpnea948wi                        0x00005633446a6fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824480
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int(1)\n    for divisor in 1...n {\n\
    \        if n % divisor == 0 {\n            if largestDivisor < divisor {\n  \
    \              largestDivisor = divisor\n            }\n        }\n    }\n   \
    \ return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpyr638j0z/tmpyr638j0z.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1629b06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b16297fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b16297fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b16297fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyr638j0z                        0x0000561694413335 <unavailable> + 4917

    5    libc.so.6                          0x00002b1629cf2460 __libc_start_main +
    245

    6    tmpyr638j0z                        0x0000561694412fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var largest = n\n\
    \    for divisor in 1...n {\n        if n % divisor == 0 {\n            largest\
    \ = divisor\n        }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpx34b6a1h/tmpx34b6a1h.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba207a44c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba20773bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba20773b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba20773a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx34b6a1h                        0x000055fb9f692335 <unavailable> + 4917

    5    libc.so.6                          0x00002ba207c30460 __libc_start_main +
    245

    6    tmpx34b6a1h                        0x000055fb9f691fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824480
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var max_divisor\
    \ = 1\n    var max_divisor_index = 0\n    for i := 1; i <= n; i++ {\n        if\
    \ n % i == 0 {\n            if max_divisor < i {\n                max_divisor\
    \ = i\n                max_divisor_index = i\n            }\n        }\n    }\n\
    \    return max_divisor_index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpu03p8fmz.swift:11:12: error: expected type\n    for i := 1; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpu03p8fmz.swift:11:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i <= n; i++ {\n\
    \           ^\n/tmp/tmpu03p8fmz.swift:11:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 1; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824479
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return n\n    }\n\n    var largestDivisor\
    \ = Int(1)\n    var largestDivisorFactor = Int(1)\n\n    for i := 2; i <= n; i++\
    \ {\n        if n % i == 0 {\n            largestDivisor = i\n            largestDivisorFactor\
    \ = Int(n / i)\n        }\n    }\n\n    return largestDivisorFactor * largestDivisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpww_lxoui.swift:13:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpww_lxoui.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmpww_lxoui.swift:13:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824480
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var max_divisor = 0\n    for divisor in 1...n {\n       \
    \ if n % divisor == 0 {\n            if divisor > max_divisor {\n            \
    \    max_divisor = divisor\n            }\n        }\n    }\n    return max_divisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpi1va8dud/tmpi1va8dud.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26e00bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26dfdb1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26dfdb1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26dfdb07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi1va8dud                        0x000055ac5d87e335 <unavailable> + 4917

    5    libc.so.6                          0x00002b26e02a6460 __libc_start_main +
    245

    6    tmpi1va8dud                        0x000055ac5d87dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 1\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            largestDivisor = divisor\n        }\n\
    \    }\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpd61ddb7n/tmpd61ddb7n.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b5562ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b55325b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1b55325988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1b553247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd61ddb7n                        0x00005648a2d06335 <unavailable> + 4917

    5    libc.so.6                          0x00002b1b5581a460 __libc_start_main +
    245

    6    tmpd61ddb7n                        0x00005648a2d05fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824480
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    var divisor = 1\n    for _ in 0..<n\
    \ {\n        if n % divisor == 0 {\n            divisor++\n            if divisor\
    \ > largest {\n                largest = divisor\n            }\n        } else\
    \ {\n            divisor = 1\n        }\n    }\n    return largest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpeg9ublvm.swift:10:20: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            divisor++\n                   ^~\n"
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var max_divisor = 0\n    for divisor in 1...n {\n       \
    \ if n % divisor == 0 {\n            if divisor > max_divisor {\n            \
    \    max_divisor = divisor\n            }\n        }\n    }\n    return max_divisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpi1va8dud/tmpi1va8dud.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26e00bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26dfdb1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26dfdb1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26dfdb07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi1va8dud                        0x000055ac5d87e335 <unavailable> + 4917

    5    libc.so.6                          0x00002b26e02a6460 __libc_start_main +
    245

    6    tmpi1va8dud                        0x000055ac5d87dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var largestDivisor\
    \ = 1\n    var largestDivisorFactor = 1\n    for i := 2; i <= n; i++ {\n     \
    \   if n % i == 0 {\n            largestDivisorFactor = i\n            if largestDivisor\
    \ < largestDivisorFactor {\n                largestDivisor = largestDivisorFactor\n\
    \            }\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpo9ja9ow_.swift:11:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpo9ja9ow_.swift:11:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmpo9ja9ow_.swift:11:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824480
- exit_code: -1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int()\n    for divisor in stride(from:\
    \ n, to: Int.max, by: 2) {\n        if n % divisor == 0 {\n            if largestDivisor\
    \ == 0 || largestDivisor > divisor {\n                largestDivisor = divisor\n\
    \            }\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824485
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var maxDivisor = 0\n    var divisor = 1\n    while divisor\
    \ <= n {\n        if n % divisor == 0 {\n            maxDivisor = divisor\n  \
    \      }\n        divisor++\n    }\n    return maxDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpqwss4z7s.swift:12:16: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        divisor++\n               ^~\n"
  stdout: ''
  timestamp: 1659824480
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            if divisor > largestDivisor {\n      \
    \          largestDivisor = divisor\n            }\n        }\n    }\n    return\
    \ largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmp8fdji42m/tmp8fdji42m.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba44b6fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba44b3f5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba44b3f5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba44b3f47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8fdji42m                        0x00005562f22eb335 <unavailable> + 4917

    5    libc.so.6                          0x00002ba44b8ea460 __libc_start_main +
    245

    6    tmp8fdji42m                        0x00005562f22eafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var max_divisor = 0\n    for divisor in 1...n {\n       \
    \ if n % divisor == 0 {\n            if divisor > max_divisor {\n            \
    \    max_divisor = divisor\n            }\n        }\n    }\n    return max_divisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpi1va8dud/tmpi1va8dud.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26e00bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26dfdb1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26dfdb1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26dfdb07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi1va8dud                        0x000055ac5d87e335 <unavailable> + 4917

    5    libc.so.6                          0x00002b26e02a6460 __libc_start_main +
    245

    6    tmpi1va8dud                        0x000055ac5d87dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var max_divisor = 0\n    for divisor in 1...n {\n       \
    \ if n % divisor == 0 {\n            if divisor > max_divisor {\n            \
    \    max_divisor = divisor\n            }\n        }\n    }\n    return max_divisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpi1va8dud/tmpi1va8dud.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26e00bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26dfdb1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26dfdb1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26dfdb07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi1va8dud                        0x000055ac5d87e335 <unavailable> + 4917

    5    libc.so.6                          0x00002b26e02a6460 __libc_start_main +
    245

    6    tmpi1va8dud                        0x000055ac5d87dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    var divisor = 1\n    for _ in 0..<n\
    \ {\n        if n % divisor == 0 {\n            divisor++\n            if divisor\
    \ > largest {\n                largest = divisor\n            }\n        } else\
    \ {\n            divisor = 1\n        }\n    }\n    return largest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpeg9ublvm.swift:10:20: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            divisor++\n                   ^~\n"
  stdout: ''
  timestamp: 1659824479
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for divisor in divisors {\n \
    \       if n % divisor == 0 {\n            if divisor > largestDivisor {\n   \
    \             largestDivisor = divisor\n            }\n        }\n    }\n    return\
    \ largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpt1psgxlz.swift:7:20: error: cannot find 'divisors' in scope\n \
    \   for divisor in divisors {\n                   ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824480
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for divisor in 1...n {\n    \
    \    if n%divisor == 0 {\n            largestDivisor = divisor\n        }\n  \
    \  }\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpxnxibd4q/tmpxnxibd4q.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d8e1d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d8deccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d8decc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d8decb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxnxibd4q                        0x0000560831dc8335 <unavailable> + 4917

    5    libc.so.6                          0x00002b3d8e3c1460 __libc_start_main +
    245

    6    tmpxnxibd4q                        0x0000560831dc7fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824480
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = Int(n)\n    var divisor = 1\n    for _ in 0..<n\
    \ {\n        if n % divisor == 0 {\n            divisor++\n        } else {\n\
    \            divisor = 1\n        }\n        if divisor > largest {\n        \
    \    largest = divisor\n        }\n    }\n    return largest\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpx2reeko9.swift:10:20: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            divisor++\n                   ^~\n"
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var maxDivisor = 1\n    for divisor in 1...n {\n        if\
    \ n % divisor == 0 {\n            if divisor > maxDivisor {\n                maxDivisor\
    \ = divisor\n            }\n        }\n    }\n    return maxDivisor\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpg_4qmbc4/tmpg_4qmbc4.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9d4b034c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9d4ad2bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9d4ad2b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9d4ad2a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg_4qmbc4                        0x000055c037d3a335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9d4b220460 __libc_start_main +
    245

    6    tmpg_4qmbc4                        0x000055c037d39fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var max_divisor = 0\n    for divisor in 1...n {\n       \
    \ if n % divisor == 0 {\n            if divisor > max_divisor {\n            \
    \    max_divisor = divisor\n            }\n        }\n    }\n    return max_divisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpi1va8dud/tmpi1va8dud.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26e00bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26dfdb1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26dfdb1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26dfdb07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi1va8dud                        0x000055ac5d87e335 <unavailable> + 4917

    5    libc.so.6                          0x00002b26e02a6460 __libc_start_main +
    245

    6    tmpi1va8dud                        0x000055ac5d87dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var largest = Int(n/2)\n\
    \    for i := 3; i <= largest; i++ {\n        if n % i == 0 {\n            largest\
    \ = i\n        }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpzwonjv9r.swift:10:12: error: expected type\n    for i := 3; i <=\
    \ largest; i++ {\n           ^\n            <#type#>\n/tmp/tmpzwonjv9r.swift:10:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 3; i <= largest; i++\
    \ {\n           ^\n/tmp/tmpzwonjv9r.swift:10:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 3; i <= largest; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824480
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var max_divisor\
    \ = 0\n    var max_divisor_value = 0\n    for divisor in 1...n {\n        if n\
    \ % divisor == 0 {\n            if divisor > max_divisor {\n                max_divisor\
    \ = divisor\n                max_divisor_value = n\n            }\n        } else\
    \ {\n            if divisor > max_divisor_value {\n                max_divisor_value\
    \ = divisor\n            }\n        }\n    }\n    return max_divisor\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpz96812a5/tmpz96812a5.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba676070c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba675d67b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba675d67988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba675d667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz96812a5                        0x00005628f7837335 <unavailable> + 4917

    5    libc.so.6                          0x00002ba67625c460 __libc_start_main +
    245

    6    tmpz96812a5                        0x00005628f7836fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824480
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var max_divisor = 0\n    for divisor in 1...n {\n       \
    \ if n % divisor == 0 {\n            if max_divisor < divisor {\n            \
    \    max_divisor = divisor\n            }\n        }\n    }\n    return max_divisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpovbpiwn_/tmpovbpiwn_.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b047d796c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b047d48db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b047d48d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b047d48c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpovbpiwn_                        0x000055e0173b4335 <unavailable> + 4917

    5    libc.so.6                          0x00002b047d982460 __libc_start_main +
    245

    6    tmpovbpiwn_                        0x000055e0173b3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var max_divisor = 0\n    for divisor in 1...n {\n       \
    \ if n % divisor == 0 {\n            if divisor > max_divisor {\n            \
    \    max_divisor = divisor\n            }\n        }\n    }\n    return max_divisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpi1va8dud/tmpi1va8dud.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26e00bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26dfdb1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26dfdb1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26dfdb07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi1va8dud                        0x000055ac5d87e335 <unavailable> + 4917

    5    libc.so.6                          0x00002b26e02a6460 __libc_start_main +
    245

    6    tmpi1va8dud                        0x000055ac5d87dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 1\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            if divisor > largestDivisor {\n      \
    \          largestDivisor = divisor\n            }\n        }\n    }\n    return\
    \ largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpyfz9p9rp/tmpyfz9p9rp.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b69222adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6921fa4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6921fa4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6921fa37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyfz9p9rp                        0x000055ffa18f1335 <unavailable> + 4917

    5    libc.so.6                          0x00002b6922499460 __libc_start_main +
    245

    6    tmpyfz9p9rp                        0x000055ffa18f0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 1\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            largestDivisor = divisor\n        }\n\
    \    }\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpd61ddb7n/tmpd61ddb7n.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b5562ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b55325b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1b55325988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1b553247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd61ddb7n                        0x00005648a2d06335 <unavailable> + 4917

    5    libc.so.6                          0x00002b1b5581a460 __libc_start_main +
    245

    6    tmpd61ddb7n                        0x00005648a2d05fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824480
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var max_divisor\
    \ = 1\n    var max_divisor_index = 0\n    for i := 1; i <= n; i++ {\n        if\
    \ n % i == 0 {\n            if max_divisor < i {\n                max_divisor\
    \ = i\n                max_divisor_index = i\n            }\n        }\n    }\n\
    \    return max_divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp4c9bd54i.swift:11:12: error: expected type\n    for i := 1; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmp4c9bd54i.swift:11:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i <= n; i++ {\n\
    \           ^\n/tmp/tmp4c9bd54i.swift:11:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 1; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824480
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var maxDivisor = 0\n    for divisor in 1...n {\n        if\
    \ n % divisor == 0 {\n            if divisor > maxDivisor {\n                maxDivisor\
    \ = divisor\n            }\n        }\n    }\n    return maxDivisor\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp7k5whvey/tmp7k5whvey.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae023030c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae022d27b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae022d27988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae022d267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7k5whvey                        0x0000558720801335 <unavailable> + 4917

    5    libc.so.6                          0x00002ae02321c460 __libc_start_main +
    245

    6    tmp7k5whvey                        0x0000558720800fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824480
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for divisor in 1...n {\n        if n\
    \ % divisor == 0 {\n            largest = divisor\n        }\n    }\n    return\
    \ largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(largest_divisor(n: 3)\
    \ == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) ==\
    \ 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49) ==\
    \ 7)"
  status: Exception
  stderr: 'tmp38neag1k/tmp38neag1k.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace77be0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace778d7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ace778d7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ace778d67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp38neag1k                        0x00005559fac86335 <unavailable> + 4917

    5    libc.so.6                          0x00002ace77dcc460 __libc_start_main +
    245

    6    tmp38neag1k                        0x00005559fac85fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for divisor in 1...n {\n        if n\
    \ % divisor == 0 {\n            if largest < divisor {\n                largest\
    \ = divisor\n            }\n        }\n    }\n    return largest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpj00dpk6n/tmpj00dpk6n.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac843cebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8439e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac8439e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8439e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj00dpk6n                        0x000055864847a335 <unavailable> + 4917

    5    libc.so.6                          0x00002ac843ed7460 __libc_start_main +
    245

    6    tmpj00dpk6n                        0x0000558648479fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var maxDivisor = 1\n    for divisor in 1...n {\n        if\
    \ n % divisor == 0 {\n            if divisor > maxDivisor {\n                maxDivisor\
    \ = divisor\n            }\n        }\n    }\n    return maxDivisor\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpg_4qmbc4/tmpg_4qmbc4.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9d4b034c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9d4ad2bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9d4ad2b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9d4ad2a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg_4qmbc4                        0x000055c037d3a335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9d4b220460 __libc_start_main +
    245

    6    tmpg_4qmbc4                        0x000055c037d39fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var maxDivisor = 1\n    for divisor in 1...n {\n        if\
    \ n % divisor == 0 {\n            if maxDivisor < divisor {\n                maxDivisor\
    \ = divisor\n            }\n        }\n    }\n    return maxDivisor\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp8n1dvp09/tmp8n1dvp09.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b61350fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6134df1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6134df1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6134df07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8n1dvp09                        0x000055e8c0bf1335 <unavailable> + 4917

    5    libc.so.6                          0x00002b61352e6460 __libc_start_main +
    245

    6    tmp8n1dvp09                        0x000055e8c0bf0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for divisor in 1...n {\n        if n\
    \ % divisor == 0 {\n            largest = divisor\n        }\n    }\n    return\
    \ largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(largest_divisor(n: 3)\
    \ == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) ==\
    \ 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49) ==\
    \ 7)"
  status: Exception
  stderr: 'tmp38neag1k/tmp38neag1k.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace77be0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace778d7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ace778d7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ace778d67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp38neag1k                        0x00005559fac86335 <unavailable> + 4917

    5    libc.so.6                          0x00002ace77dcc460 __libc_start_main +
    245

    6    tmp38neag1k                        0x00005559fac85fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 1\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            if divisor > largestDivisor {\n      \
    \          largestDivisor = divisor\n            }\n        }\n    }\n    return\
    \ largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpyfz9p9rp/tmpyfz9p9rp.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b69222adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6921fa4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6921fa4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6921fa37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyfz9p9rp                        0x000055ffa18f1335 <unavailable> + 4917

    5    libc.so.6                          0x00002b6922499460 __libc_start_main +
    245

    6    tmpyfz9p9rp                        0x000055ffa18f0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var largestDivisor\
    \ = 1\n    for divisor in 2...n {\n        if n % divisor == 0 {\n           \
    \ largestDivisor = divisor\n        }\n    }\n    return largestDivisor\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp5kuhcb2z/tmp5kuhcb2z.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb5a939c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb5a630b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb5a630988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb5a62f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5kuhcb2z                        0x000055b26f8a5335 <unavailable> + 4917

    5    libc.so.6                          0x00002aeb5ab25460 __libc_start_main +
    245

    6    tmp5kuhcb2z                        0x000055b26f8a4fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824480
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            if divisor > largestDivisor {\n      \
    \          largestDivisor = divisor\n            }\n        }\n    }\n    return\
    \ largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmp8fdji42m/tmp8fdji42m.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba44b6fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba44b3f5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba44b3f5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba44b3f47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8fdji42m                        0x00005562f22eb335 <unavailable> + 4917

    5    libc.so.6                          0x00002ba44b8ea460 __libc_start_main +
    245

    6    tmp8fdji42m                        0x00005562f22eafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    var divisor = 0\n    for divisor\
    \ in 1...n {\n        if n % divisor == 0 {\n            if largestDivisor < divisor\
    \ {\n                largestDivisor = divisor\n            }\n        }\n    }\n\
    \    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmp5ok0z1oq/tmp5ok0z1oq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3996c40c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3996937b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3996937988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b39969367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ok0z1oq                        0x000055e86113a335 <unavailable> + 4917

    5    libc.so.6                          0x00002b3996e2c460 __libc_start_main +
    245

    6    tmp5ok0z1oq                        0x000055e861139fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824480
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = Int(n)\n    for divisor in 1...n {\n      \
    \  if n % divisor == 0 {\n            largest = divisor\n        }\n    }\n  \
    \  return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpl18neyst/tmpl18neyst.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80b1c09c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80b1900b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80b1900988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80b18ff7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl18neyst                        0x0000558205edb475 <unavailable> + 5237

    5    libc.so.6                          0x00002b80b1df5460 __libc_start_main +
    245

    6    tmpl18neyst                        0x0000558205edb129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int(1)\n    for divisor in 1...n {\n\
    \        if n % divisor == 0 {\n            if largestDivisor < divisor {\n  \
    \              largestDivisor = divisor\n            }\n        }\n    }\n   \
    \ return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpyr638j0z/tmpyr638j0z.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1629b06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b16297fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b16297fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b16297fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyr638j0z                        0x0000561694413335 <unavailable> + 4917

    5    libc.so.6                          0x00002b1629cf2460 __libc_start_main +
    245

    6    tmpyr638j0z                        0x0000561694412fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = Int(n)\n    var divisor = 1\n    for divisor\
    \ < n {\n        if n % divisor == 0 {\n            largest = divisor\n      \
    \  }\n        divisor++\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpa5nkuojg.swift:8:17: error: expected 'in' after for-each pattern\n\
    \    for divisor < n {\n                ^\n/tmp/tmpa5nkuojg.swift:8:17: error:\
    \ unary operator cannot be separated from its operand\n    for divisor < n {\n\
    \                ^~\n                 \n/tmp/tmpa5nkuojg.swift:8:17: error: '<'\
    \ is not a prefix unary operator\n    for divisor < n {\n                ^\n"
  stdout: ''
  timestamp: 1659824480
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return 0\n    }\n    var max_divisor\
    \ = 0\n    var max_divisor_index = 0\n    for i := 1; i < n; i++ {\n        if\
    \ n % i == 0 {\n            if max_divisor < i {\n                max_divisor\
    \ = i\n                max_divisor_index = i\n            }\n        }\n    }\n\
    \    return max_divisor_index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmppx7tml3_.swift:11:12: error: expected type\n    for i := 1; i <\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmppx7tml3_.swift:11:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i < n; i++ {\n\
    \           ^\n/tmp/tmppx7tml3_.swift:11:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 1; i < n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824480
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var maxDivisor = 1\n    for divisor in 1...n {\n        if\
    \ n % divisor == 0 {\n            maxDivisor = divisor\n        }\n    }\n   \
    \ return maxDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpypunx434/tmpypunx434.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae02d50fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae02d206b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae02d206988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae02d2057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpypunx434                        0x00005631a77b4335 <unavailable> + 4917

    5    libc.so.6                          0x00002ae02d6fb460 __libc_start_main +
    245

    6    tmpypunx434                        0x00005631a77b3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824480
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = Int(n)\n    for divisor in 1...n {\n      \
    \  if n % divisor == 0 {\n            largest = divisor\n        }\n    }\n  \
    \  return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpl18neyst/tmpl18neyst.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80b1c09c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80b1900b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80b1900988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80b18ff7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl18neyst                        0x0000558205edb475 <unavailable> + 5237

    5    libc.so.6                          0x00002b80b1df5460 __libc_start_main +
    245

    6    tmpl18neyst                        0x0000558205edb129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var maxDivisor = 1\n    for divisor in 1...n {\n        if\
    \ n % divisor == 0 {\n            if maxDivisor < divisor {\n                maxDivisor\
    \ = divisor\n            }\n        }\n    }\n    return maxDivisor\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp8n1dvp09/tmp8n1dvp09.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b61350fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6134df1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6134df1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6134df07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8n1dvp09                        0x000055e8c0bf1335 <unavailable> + 4917

    5    libc.so.6                          0x00002b61352e6460 __libc_start_main +
    245

    6    tmp8n1dvp09                        0x000055e8c0bf0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            largestDivisor = divisor\n        }\n\
    \    }\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpbzt_j2w5/tmpbzt_j2w5.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab4d2edfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab4d2bd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab4d2bd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4d2bd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbzt_j2w5                        0x000055a604ca3335 <unavailable> + 4917

    5    libc.so.6                          0x00002ab4d30cb460 __libc_start_main +
    245

    6    tmpbzt_j2w5                        0x000055a604ca2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for divisor in 1...n {\n        if n\
    \ % divisor == 0 {\n            if largest < divisor {\n                largest\
    \ = divisor\n            }\n        }\n    }\n    return largest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpj00dpk6n/tmpj00dpk6n.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac843cebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8439e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac8439e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8439e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj00dpk6n                        0x000055864847a335 <unavailable> + 4917

    5    libc.so.6                          0x00002ac843ed7460 __libc_start_main +
    245

    6    tmpj00dpk6n                        0x0000558648479fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = Int(n)\n    var divisor = 1\n    while divisor\
    \ <= n {\n        if n % divisor == 0 {\n            largest = divisor\n     \
    \   }\n        divisor++\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpq6ene0go.swift:12:16: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        divisor++\n               ^~\n"
  stdout: ''
  timestamp: 1659824479
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var max_divisor\
    \ = 1\n    var max_divisor_index = 0\n    for i := 1; i <= n; i++ {\n        if\
    \ n % i == 0 {\n            if max_divisor < i {\n                max_divisor\
    \ = i\n                max_divisor_index = i\n            }\n        }\n    }\n\
    \    return max_divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp4c9bd54i.swift:11:12: error: expected type\n    for i := 1; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmp4c9bd54i.swift:11:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i <= n; i++ {\n\
    \           ^\n/tmp/tmp4c9bd54i.swift:11:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 1; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824480
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int()\n    for divisor in 1...n {\n\
    \        if n % divisor == 0 {\n            if largestDivisor == 0 || largestDivisor\
    \ > divisor {\n                largestDivisor = divisor\n            }\n     \
    \   }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n:\
    \ 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: Exception
  stderr: 'tmpf4i9akm_/tmpf4i9akm_.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae192849c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae192540b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae192540988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae19253f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf4i9akm_                        0x00005635f3a6942b <unavailable> + 5163

    5    libc.so.6                          0x00002ae192a35460 __libc_start_main +
    245

    6    tmpf4i9akm_                        0x00005635f3a68fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var maxDivisor = 1\n    for divisor in 1...n {\n        if\
    \ n % divisor == 0 {\n            if maxDivisor < divisor {\n                maxDivisor\
    \ = divisor\n            }\n        }\n    }\n    return maxDivisor\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp8n1dvp09/tmp8n1dvp09.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b61350fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6134df1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6134df1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6134df07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8n1dvp09                        0x000055e8c0bf1335 <unavailable> + 4917

    5    libc.so.6                          0x00002b61352e6460 __libc_start_main +
    245

    6    tmp8n1dvp09                        0x000055e8c0bf0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            if divisor > largestDivisor {\n      \
    \          largestDivisor = divisor\n            }\n        }\n    }\n    return\
    \ largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmp8fdji42m/tmp8fdji42m.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba44b6fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba44b3f5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba44b3f5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba44b3f47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8fdji42m                        0x00005562f22eb335 <unavailable> + 4917

    5    libc.so.6                          0x00002ba44b8ea460 __libc_start_main +
    245

    6    tmp8fdji42m                        0x00005562f22eafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int()\n    var largestDivisorCount =\
    \ 0\n    for number in 1...n {\n        if number % 2 == 0 {\n            if number\
    \ > largestDivisor {\n                largestDivisor = number\n              \
    \  largestDivisorCount = 1\n            } else {\n                largestDivisorCount\
    \ += 1\n            }\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpplxj_ddd/tmpplxj_ddd.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af1aef4ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af1aec45b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af1aec45988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af1aec447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpplxj_ddd                        0x00005638fdc61335 <unavailable> + 4917

    5    libc.so.6                          0x00002af1af13a460 __libc_start_main +
    245

    6    tmpplxj_ddd                        0x00005638fdc60fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824480
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var maxDivisor = 1\n    for divisor in 1...n {\n        if\
    \ n % divisor == 0 {\n            maxDivisor = divisor\n        }\n    }\n   \
    \ return maxDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpypunx434/tmpypunx434.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae02d50fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae02d206b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae02d206988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae02d2057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpypunx434                        0x00005631a77b4335 <unavailable> + 4917

    5    libc.so.6                          0x00002ae02d6fb460 __libc_start_main +
    245

    6    tmpypunx434                        0x00005631a77b3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824480
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for divisor in 1...n {\n        if n\
    \ % divisor == 0 {\n            if largest < divisor {\n                largest\
    \ = divisor\n            }\n        }\n    }\n    return largest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpj00dpk6n/tmpj00dpk6n.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac843cebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8439e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac8439e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8439e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj00dpk6n                        0x000055864847a335 <unavailable> + 4917

    5    libc.so.6                          0x00002ac843ed7460 __libc_start_main +
    245

    6    tmpj00dpk6n                        0x0000558648479fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var max_divisor = 0\n    for divisor in 1...n {\n       \
    \ if n % divisor == 0 {\n            if divisor > max_divisor {\n            \
    \    max_divisor = divisor\n            }\n        }\n    }\n    return max_divisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpi1va8dud/tmpi1va8dud.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26e00bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26dfdb1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26dfdb1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26dfdb07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi1va8dud                        0x000055ac5d87e335 <unavailable> + 4917

    5    libc.so.6                          0x00002b26e02a6460 __libc_start_main +
    245

    6    tmpi1va8dud                        0x000055ac5d87dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for divisor in divisors(n) {\n\
    \        if divisor > largestDivisor {\n            largestDivisor = divisor\n\
    \        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpup6v48bu.swift:7:20: error: cannot find 'divisors' in scope\n \
    \   for divisor in divisors(n) {\n                   ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824479
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return n\n    }\n\n    var maxDivisor\
    \ = 1\n    var maxDivisorIndex = -1\n\n    for i := 1; i <= n; i++ {\n       \
    \ if n % i == 0 {\n            if maxDivisor < i {\n                maxDivisor\
    \ = i\n                maxDivisorIndex = i\n            }\n        }\n    }\n\n\
    \    return maxDivisorIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp_gbel_8y.swift:13:12: error: expected type\n    for i := 1; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmp_gbel_8y.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i <= n; i++ {\n\
    \           ^\n/tmp/tmp_gbel_8y.swift:13:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 1; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824480
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = Int(n)\n    var divisor = 1\n    for divisor\
    \ < n {\n        if n % divisor == 0 {\n            largest = divisor\n      \
    \  }\n        divisor++\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpa5nkuojg.swift:8:17: error: expected 'in' after for-each pattern\n\
    \    for divisor < n {\n                ^\n/tmp/tmpa5nkuojg.swift:8:17: error:\
    \ unary operator cannot be separated from its operand\n    for divisor < n {\n\
    \                ^~\n                 \n/tmp/tmpa5nkuojg.swift:8:17: error: '<'\
    \ is not a prefix unary operator\n    for divisor < n {\n                ^\n"
  stdout: ''
  timestamp: 1659824480
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var max_divisor = 0\n    for divisor in 1...n {\n       \
    \ if n % divisor == 0 {\n            if divisor > max_divisor {\n            \
    \    max_divisor = divisor\n            }\n        }\n    }\n    return max_divisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpi1va8dud/tmpi1va8dud.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26e00bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26dfdb1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26dfdb1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26dfdb07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi1va8dud                        0x000055ac5d87e335 <unavailable> + 4917

    5    libc.so.6                          0x00002b26e02a6460 __libc_start_main +
    245

    6    tmpi1va8dud                        0x000055ac5d87dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var max_divisor = 0\n    for divisor in 1...n {\n       \
    \ if n % divisor == 0 {\n            if max_divisor < divisor {\n            \
    \    max_divisor = divisor\n            }\n        }\n    }\n    return max_divisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpovbpiwn_/tmpovbpiwn_.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b047d796c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b047d48db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b047d48d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b047d48c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpovbpiwn_                        0x000055e0173b4335 <unavailable> + 4917

    5    libc.so.6                          0x00002b047d982460 __libc_start_main +
    245

    6    tmpovbpiwn_                        0x000055e0173b3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: -1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int()\n    for divisor in stride(from:\
    \ n, to: Int.max, by: 1) {\n        if n % divisor == 0 {\n            largestDivisor\
    \ = divisor\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824485
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var largestDivisor\
    \ = 1\n    var largestDivisorIndex = 0\n    for i := 2; i <= n; i++ {\n      \
    \  if n % i == 0 {\n            if largestDivisor > i {\n                largestDivisor\
    \ = i\n                largestDivisorIndex = i\n            }\n        }\n   \
    \ }\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp21lsjfoc.swift:11:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmp21lsjfoc.swift:11:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmp21lsjfoc.swift:11:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824479
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for divisor in divisors(n) {\n\
    \        if n % divisor == 0 {\n            largestDivisor = divisor\n       \
    \ }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n:\
    \ 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp5iutyni8.swift:7:20: error: cannot find 'divisors' in scope\n \
    \   for divisor in divisors(n) {\n                   ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824480
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            if divisor > largestDivisor {\n      \
    \          largestDivisor = divisor\n            }\n        }\n    }\n    return\
    \ largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmp8fdji42m/tmp8fdji42m.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba44b6fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba44b3f5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba44b3f5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba44b3f47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8fdji42m                        0x00005562f22eb335 <unavailable> + 4917

    5    libc.so.6                          0x00002ba44b8ea460 __libc_start_main +
    245

    6    tmp8fdji42m                        0x00005562f22eafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var max_divisor = 0\n    for divisor in 1...n {\n       \
    \ if n % divisor == 0 {\n            if divisor > max_divisor {\n            \
    \    max_divisor = divisor\n            }\n        }\n    }\n    return max_divisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpi1va8dud/tmpi1va8dud.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26e00bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26dfdb1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26dfdb1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26dfdb07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi1va8dud                        0x000055ac5d87e335 <unavailable> + 4917

    5    libc.so.6                          0x00002b26e02a6460 __libc_start_main +
    245

    6    tmpi1va8dud                        0x000055ac5d87dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int(1)\n    var largestDivisorCount\
    \ = 0\n    for divisor in 1...n {\n        if n % divisor == 0 {\n           \
    \ largestDivisorCount = divisor + 1\n            if largestDivisor > largestDivisorCount\
    \ {\n                largestDivisor = largestDivisorCount\n            }\n   \
    \     }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: Exception
  stderr: 'tmpje6ycoo7/tmpje6ycoo7.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b06cb03fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b06cad36b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b06cad36988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b06cad357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpje6ycoo7                        0x0000555c48eda42b <unavailable> + 5163

    5    libc.so.6                          0x00002b06cb22b460 __libc_start_main +
    245

    6    tmpje6ycoo7                        0x0000555c48ed9fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824480
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var max_divisor = 0\n    for divisor in 1...n {\n       \
    \ if n % divisor == 0 {\n            max_divisor = divisor\n        }\n    }\n\
    \    return max_divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpaga5j2c2/tmpaga5j2c2.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aac15ff9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aac15cf0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aac15cf0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aac15cef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaga5j2c2                        0x0000563c73e58335 <unavailable> + 4917

    5    libc.so.6                          0x00002aac161e5460 __libc_start_main +
    245

    6    tmpaga5j2c2                        0x0000563c73e57fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824480
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var max_divisor = 0\n    for divisor in 1...n {\n       \
    \ if n % divisor == 0 {\n            if divisor > max_divisor {\n            \
    \    max_divisor = divisor\n            }\n        }\n    }\n    return max_divisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpi1va8dud/tmpi1va8dud.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26e00bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26dfdb1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26dfdb1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26dfdb07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi1va8dud                        0x000055ac5d87e335 <unavailable> + 4917

    5    libc.so.6                          0x00002b26e02a6460 __libc_start_main +
    245

    6    tmpi1va8dud                        0x000055ac5d87dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var maxDivisor = Int(1)\n    var maxDivisorValue = Int(1)\n\
    \    for divisor in 1...n {\n        if n % divisor == 0 {\n            if maxDivisor\
    \ < divisor {\n                maxDivisor = divisor\n                maxDivisorValue\
    \ = divisor\n            }\n        }\n    }\n    return maxDivisorValue\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpulqyfcis/tmpulqyfcis.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba3af0e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba3aedd8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba3aedd8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba3aedd77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpulqyfcis                        0x000055e13088a335 <unavailable> + 4917

    5    libc.so.6                          0x00002ba3af2cd460 __libc_start_main +
    245

    6    tmpulqyfcis                        0x000055e130889fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824480
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 1\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            if divisor > largestDivisor {\n      \
    \          largestDivisor = divisor\n            }\n        }\n    }\n    return\
    \ largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpyfz9p9rp/tmpyfz9p9rp.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b69222adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6921fa4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6921fa4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6921fa37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyfz9p9rp                        0x000055ffa18f1335 <unavailable> + 4917

    5    libc.so.6                          0x00002b6922499460 __libc_start_main +
    245

    6    tmpyfz9p9rp                        0x000055ffa18f0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            if divisor > largestDivisor {\n      \
    \          largestDivisor = divisor\n            }\n        }\n    }\n    return\
    \ largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmp8fdji42m/tmp8fdji42m.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba44b6fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba44b3f5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba44b3f5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba44b3f47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8fdji42m                        0x00005562f22eb335 <unavailable> + 4917

    5    libc.so.6                          0x00002ba44b8ea460 __libc_start_main +
    245

    6    tmp8fdji42m                        0x00005562f22eafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int(1)\n    var largestDivisorCount\
    \ = 0\n    for d in divisors(n) {\n        if d > largestDivisor {\n         \
    \   largestDivisorCount = 1\n            largestDivisor = d\n        } else if\
    \ d == largestDivisor {\n            largestDivisorCount += 1\n        }\n   \
    \ }\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp5p07__66.swift:8:14: error: cannot find 'divisors' in scope\n \
    \   for d in divisors(n) {\n             ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824480
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for divisor in 1...n {\n        if n\
    \ % divisor == 0 {\n            largest = divisor\n        }\n    }\n    return\
    \ largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(largest_divisor(n: 3)\
    \ == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) ==\
    \ 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49) ==\
    \ 7)"
  status: Exception
  stderr: 'tmp38neag1k/tmp38neag1k.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace77be0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace778d7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ace778d7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ace778d67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp38neag1k                        0x00005559fac86335 <unavailable> + 4917

    5    libc.so.6                          0x00002ace77dcc460 __libc_start_main +
    245

    6    tmp38neag1k                        0x00005559fac85fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var maxDivisor =\
    \ 1\n    var maxDivisorValue = n\n    for divisor in 2...n {\n        if n % divisor\
    \ == 0 {\n            if divisor * divisor > maxDivisorValue {\n             \
    \   maxDivisorValue = divisor\n                maxDivisor = divisor\n        \
    \    }\n        }\n    }\n    return maxDivisor\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: Exception
  stderr: 'tmpnytq6cca/tmpnytq6cca.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2d5c287c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2d5bf7eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2d5bf7e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2d5bf7d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnytq6cca                        0x0000562ee774e335 <unavailable> + 4917

    5    libc.so.6                          0x00002b2d5c473460 __libc_start_main +
    245

    6    tmpnytq6cca                        0x0000562ee774dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824480
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 1\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            largestDivisor = divisor\n        }\n\
    \    }\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpd61ddb7n/tmpd61ddb7n.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b5562ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b55325b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1b55325988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1b553247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd61ddb7n                        0x00005648a2d06335 <unavailable> + 4917

    5    libc.so.6                          0x00002b1b5581a460 __libc_start_main +
    245

    6    tmpd61ddb7n                        0x00005648a2d05fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824480
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n == 1 {\n        return 1\n    }\n    var max_divisor\
    \ = 1\n    var max_divisor_index = 0\n    for i := 1; i <= n; i++ {\n        if\
    \ n % i == 0 {\n            if max_divisor < i {\n                max_divisor\
    \ = i\n                max_divisor_index = i\n            }\n        }\n    }\n\
    \    return max_divisor_index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmppchs2ywo.swift:11:12: error: expected type\n    for i := 1; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmppchs2ywo.swift:11:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i <= n; i++ {\n\
    \           ^\n/tmp/tmppchs2ywo.swift:11:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 1; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824480
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = Int(n)\n    var divisor = Int(n)\n    for divisor\
    \ > 1 {\n        if n % divisor == 0 {\n            largest = divisor\n      \
    \  }\n        divisor--\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpwdugpsa9.swift:8:17: error: expected 'in' after for-each pattern\n\
    \    for divisor > 1 {\n                ^\n/tmp/tmpwdugpsa9.swift:8:17: error:\
    \ unary operator cannot be separated from its operand\n    for divisor > 1 {\n\
    \                ^~\n                 \n/tmp/tmpwdugpsa9.swift:8:17: error: '>'\
    \ is not a prefix unary operator\n    for divisor > 1 {\n                ^\n"
  stdout: ''
  timestamp: 1659824480
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int(1)\n    for divisor in 1...n {\n\
    \        if n % divisor == 0 {\n            if divisor > largestDivisor {\n  \
    \              largestDivisor = divisor\n            }\n        }\n    }\n   \
    \ return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpf2qbc85t/tmpf2qbc85t.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2034d97c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2034a8eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2034a8e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2034a8d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf2qbc85t                        0x000055f1df628335 <unavailable> + 4917

    5    libc.so.6                          0x00002b2034f83460 __libc_start_main +
    245

    6    tmpf2qbc85t                        0x000055f1df627fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824480
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            if divisor > largestDivisor {\n      \
    \          largestDivisor = divisor\n            }\n        }\n    }\n    return\
    \ largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmp8fdji42m/tmp8fdji42m.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba44b6fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba44b3f5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba44b3f5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba44b3f47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8fdji42m                        0x00005562f22eb335 <unavailable> + 4917

    5    libc.so.6                          0x00002ba44b8ea460 __libc_start_main +
    245

    6    tmp8fdji42m                        0x00005562f22eafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    var divisor = 1\n    for divisor <=\
    \ n {\n        if n % divisor == 0 {\n            largest = divisor\n        }\n\
    \        divisor++\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp2qajuuoj.swift:8:17: error: expected 'in' after for-each pattern\n\
    \    for divisor <= n {\n                ^\n/tmp/tmp2qajuuoj.swift:8:17: error:\
    \ unary operator cannot be separated from its operand\n    for divisor <= n {\n\
    \                ^ ~\n                  \n/tmp/tmp2qajuuoj.swift:8:17: error:\
    \ '<=' is not a prefix unary operator\n    for divisor <= n {\n              \
    \  ^\n"
  stdout: ''
  timestamp: 1659824480
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var largest = Int(n)\n\
    \    var divisor = 1\n    for _ in 0..<n {\n        if n % divisor == 0 {\n  \
    \          divisor++\n            if divisor > largest {\n                largest\
    \ = divisor\n            }\n        } else {\n            divisor = 1\n      \
    \  }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpyoiehse2.swift:13:20: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            divisor++\n                   ^~\n"
  stdout: ''
  timestamp: 1659824480
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var max_divisor = 0\n    for divisor in 1...n {\n       \
    \ if n % divisor == 0 {\n            if divisor > max_divisor {\n            \
    \    max_divisor = divisor\n            }\n        }\n    }\n    return max_divisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpi1va8dud/tmpi1va8dud.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26e00bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26dfdb1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26dfdb1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26dfdb07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi1va8dud                        0x000055ac5d87e335 <unavailable> + 4917

    5    libc.so.6                          0x00002b26e02a6460 __libc_start_main +
    245

    6    tmpi1va8dud                        0x000055ac5d87dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int(1)\n    for divisor in 1...n {\n\
    \        if n % divisor == 0 {\n            if divisor * divisor > largestDivisor\
    \ {\n                largestDivisor = divisor\n            }\n        }\n    }\n\
    \    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpp9jcw6vz/tmpp9jcw6vz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39e76c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b39e73bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b39e73bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b39e73bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp9jcw6vz                        0x000055e41a67a335 <unavailable> + 4917

    5    libc.so.6                          0x00002b39e78b2460 __libc_start_main +
    245

    6    tmpp9jcw6vz                        0x000055e41a679fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824480
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = Int()\n    for divisor in 1...n {\n       \
    \ if n % divisor == 0 {\n            if largest < divisor {\n                largest\
    \ = divisor\n            }\n        }\n    }\n    return largest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp55zlbgif/tmp55zlbgif.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b76bf8dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b76bf5d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b76bf5d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b76bf5d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp55zlbgif                        0x0000555d89d87335 <unavailable> + 4917

    5    libc.so.6                          0x00002b76bfac6460 __libc_start_main +
    245

    6    tmp55zlbgif                        0x0000555d89d86fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824480
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var largestDivisor\
    \ = Int()\n    var largestDivisorRemainder = Int()\n    for number in stride(from:\
    \ n, through: 1, by: -1) {\n        if number % 2 == 0 {\n            if number\
    \ > largestDivisor {\n                largestDivisor = number\n              \
    \  largestDivisorRemainder = number\n            }\n        } else {\n       \
    \     if number > largestDivisorRemainder {\n                largestDivisorRemainder\
    \ = number\n            }\n        }\n    }\n    return largestDivisor\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpiz2nhmge/tmpiz2nhmge.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba09f372c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba09f069b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba09f069988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba09f0687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiz2nhmge                        0x000055d701272475 <unavailable> + 5237

    5    libc.so.6                          0x00002ba09f55e460 __libc_start_main +
    245

    6    tmpiz2nhmge                        0x000055d701272129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824480
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = Int(n)\n    var divisor = Int(n)\n    var remainder\
    \ = Int(n)\n\n    while divisor > 0 {\n        remainder = divisor % 2\n     \
    \   divisor = Int(divisor / 2)\n        if remainder > 0 {\n            largest\
    \ = divisor\n        }\n    }\n\n    return largest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmptp0_jqpf/tmptp0_jqpf.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57fa71fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57fa416b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57fa416988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57fa4157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptp0_jqpf                        0x00005605e6377375 <unavailable> + 4981

    5    libc.so.6                          0x00002b57fa90b460 __libc_start_main +
    245

    6    tmptp0_jqpf                        0x00005605e6377029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1659824480
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var max_divisor = 0\n    for divisor in 1...n {\n       \
    \ if n % divisor == 0 {\n            if divisor > max_divisor {\n            \
    \    max_divisor = divisor\n            }\n        }\n    }\n    return max_divisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpi1va8dud/tmpi1va8dud.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26e00bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26dfdb1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26dfdb1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26dfdb07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi1va8dud                        0x000055ac5d87e335 <unavailable> + 4917

    5    libc.so.6                          0x00002b26e02a6460 __libc_start_main +
    245

    6    tmpi1va8dud                        0x000055ac5d87dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 1\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            largestDivisor = divisor\n        }\n\
    \    }\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpd61ddb7n/tmpd61ddb7n.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b5562ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b55325b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1b55325988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1b553247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd61ddb7n                        0x00005648a2d06335 <unavailable> + 4917

    5    libc.so.6                          0x00002b1b5581a460 __libc_start_main +
    245

    6    tmpd61ddb7n                        0x00005648a2d05fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824480
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return n\n    }\n\n    var max_divisor\
    \ = 0\n    var max_divisor_index = 0\n    var max_divisor_value = n\n\n    for\
    \ i := 1; i < n; i++ {\n        if n % i == 0 {\n            if max_divisor <\
    \ i {\n                max_divisor = i\n                max_divisor_index = i\n\
    \                max_divisor_value = n\n            }\n            if max_divisor_value\
    \ < n {\n                max_divisor_value = n\n            }\n        }\n   \
    \ }\n\n    return max_divisor_index\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n:\
    \ 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpq_gvo9q2.swift:14:12: error: expected type\n    for i := 1; i <\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpq_gvo9q2.swift:14:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i < n; i++ {\n\
    \           ^\n/tmp/tmpq_gvo9q2.swift:14:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 1; i < n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824480
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int()\n    for divisor in divisors(n)\
    \ {\n        if n % divisor == 0 {\n            if largest == nil {\n        \
    \        largestDivisor = divisor\n            } else {\n                if largestDivisor\
    \ > divisor {\n                    largestDivisor = divisor\n                }\n\
    \            }\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpkofrj0df.swift:7:20: error: cannot find 'divisors' in scope\n \
    \   for divisor in divisors(n) {\n                   ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824480
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            if divisor > largestDivisor {\n      \
    \          largestDivisor = divisor\n            }\n        }\n    }\n    return\
    \ largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmp8fdji42m/tmp8fdji42m.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba44b6fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba44b3f5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba44b3f5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba44b3f47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8fdji42m                        0x00005562f22eb335 <unavailable> + 4917

    5    libc.so.6                          0x00002ba44b8ea460 __libc_start_main +
    245

    6    tmp8fdji42m                        0x00005562f22eafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var largestDivisor\
    \ = Int()\n    var largestDivisorFactor = Int()\n    for factor in 2...n {\n \
    \       if n % factor == 0 {\n            if largestDivisorFactor > factor {\n\
    \                largestDivisor = factor\n                largestDivisorFactor\
    \ = factor\n            } else {\n                largestDivisorFactor = factor\n\
    \            }\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpxcij54u_/tmpxcij54u_.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab78918cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab788e83b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab788e83988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab788e827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxcij54u_                        0x000055f47d196335 <unavailable> + 4917

    5    libc.so.6                          0x00002ab789378460 __libc_start_main +
    245

    6    tmpxcij54u_                        0x000055f47d195fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824480
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 1\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            if divisor * divisor > n {\n         \
    \       largestDivisor = divisor\n            }\n        }\n    }\n    return\
    \ largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmp81cis4bl/tmp81cis4bl.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0d0551dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0d05214b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0d05214988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0d052137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp81cis4bl                        0x000055cd3a481335 <unavailable> + 4917

    5    libc.so.6                          0x00002b0d05709460 __libc_start_main +
    245

    6    tmp81cis4bl                        0x000055cd3a480fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824480
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var maxDivisor = Int()\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            if maxDivisor < divisor {\n          \
    \      maxDivisor = divisor\n            }\n        }\n    }\n    return maxDivisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpwcxzi_x0/tmpwcxzi_x0.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b557f8f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b557f5e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b557f5e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b557f5e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcxzi_x0                        0x000055d153faa335 <unavailable> + 4917

    5    libc.so.6                          0x00002b557fade460 __libc_start_main +
    245

    6    tmpwcxzi_x0                        0x000055d153fa9fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var max_divisor = 0\n    for divisor in 1...n {\n       \
    \ if n % divisor == 0 {\n            if divisor > max_divisor {\n            \
    \    max_divisor = divisor\n            }\n        }\n    }\n    return max_divisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpi1va8dud/tmpi1va8dud.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26e00bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26dfdb1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26dfdb1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26dfdb07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi1va8dud                        0x000055ac5d87e335 <unavailable> + 4917

    5    libc.so.6                          0x00002b26e02a6460 __libc_start_main +
    245

    6    tmpi1va8dud                        0x000055ac5d87dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 1\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            if largestDivisor > divisor {\n      \
    \          largestDivisor = divisor\n            }\n        }\n    }\n    return\
    \ largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpzrq53ddu/tmpzrq53ddu.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1174ec7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1174bbeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1174bbe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1174bbd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzrq53ddu                        0x0000561719a3142b <unavailable> + 5163

    5    libc.so.6                          0x00002b11750b3460 __libc_start_main +
    245

    6    tmpzrq53ddu                        0x0000561719a30fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824480
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            if divisor * divisor > n {\n         \
    \       largestDivisor = divisor\n            } else {\n                break\n\
    \            }\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpg8sssmc4/tmpg8sssmc4.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6fdd4e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6fdd1deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6fdd1de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6fdd1dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg8sssmc4                        0x0000558b40d98335 <unavailable> + 4917

    5    libc.so.6                          0x00002b6fdd6d3460 __libc_start_main +
    245

    6    tmpg8sssmc4                        0x0000558b40d97fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824480
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            if divisor > largestDivisor {\n      \
    \          largestDivisor = divisor\n            }\n        }\n    }\n    return\
    \ largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmp8fdji42m/tmp8fdji42m.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba44b6fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba44b3f5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba44b3f5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba44b3f47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8fdji42m                        0x00005562f22eb335 <unavailable> + 4917

    5    libc.so.6                          0x00002ba44b8ea460 __libc_start_main +
    245

    6    tmp8fdji42m                        0x00005562f22eafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int()\n    for divisor in stride(from:\
    \ 1, through: n, by: 1) {\n        if n % divisor == 0 {\n            largestDivisor\
    \ = divisor\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpri4cq4ro/tmpri4cq4ro.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b411a17bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4119e72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4119e72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4119e717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpri4cq4ro                        0x000055fedafbc475 <unavailable> + 5237

    5    libc.so.6                          0x00002b411a367460 __libc_start_main +
    245

    6    tmpri4cq4ro                        0x000055fedafbc129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824480
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 1\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            if divisor * divisor > n {\n         \
    \       largestDivisor = divisor\n            } else {\n                largestDivisor\
    \ = n * divisor / divisor\n            }\n        }\n    }\n    return largestDivisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp3s09ere9/tmp3s09ere9.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b20300a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b202fd98b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b202fd98988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b202fd977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3s09ere9                        0x0000559bc1763335 <unavailable> + 4917

    5    libc.so.6                          0x00002b203028d460 __libc_start_main +
    245

    6    tmp3s09ere9                        0x0000559bc1762fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824480
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var max_divisor\
    \ = 0\n    var max_divisor_index = 0\n    for i := 1; i <= n; i++ {\n        if\
    \ n % i == 0 {\n            if max_divisor < i {\n                max_divisor\
    \ = i\n                max_divisor_index = i\n            }\n        }\n    }\n\
    \    return max_divisor_index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpmd_s_h6x.swift:11:12: error: expected type\n    for i := 1; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpmd_s_h6x.swift:11:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i <= n; i++ {\n\
    \           ^\n/tmp/tmpmd_s_h6x.swift:11:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 1; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824480
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = Int(n)\n    var divisor = 1\n    while divisor\
    \ <= n {\n        if n % divisor == 0 {\n            largest = divisor\n     \
    \   }\n        divisor *= 2\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp3sh6wjnn/tmp3sh6wjnn.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b98dcb20c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b98dc817b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b98dc817988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b98dc8167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3sh6wjnn                        0x000055c36602c46b <unavailable> + 5227

    5    libc.so.6                          0x00002b98dcd0c460 __libc_start_main +
    245

    6    tmp3sh6wjnn                        0x000055c36602c029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1659824480
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            if divisor > largestDivisor {\n      \
    \          largestDivisor = divisor\n            }\n        }\n    }\n    return\
    \ largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmp8fdji42m/tmp8fdji42m.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba44b6fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba44b3f5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba44b3f5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba44b3f47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8fdji42m                        0x00005562f22eb335 <unavailable> + 4917

    5    libc.so.6                          0x00002ba44b8ea460 __libc_start_main +
    245

    6    tmp8fdji42m                        0x00005562f22eafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824479
