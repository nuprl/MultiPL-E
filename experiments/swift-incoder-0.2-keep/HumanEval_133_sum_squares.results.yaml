language: swift
name: HumanEval_133_sum_squares
results:
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for x in lst {\n        sum += x * x\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp92_8r1ut.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmp92_8r1ut.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: -4
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum: Int = 0\n    for n in lst {\n        sum += Int(n * n)\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: Exception
  stderr: 'tmpzk6op0fm/tmpzk6op0fm.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b002eb29c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b002e820b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b002e820988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b002e81f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzk6op0fm                        0x000055626abae7db <unavailable> + 6107

    5    libc.so.6                          0x00002b002ed15460 __libc_start_main +
    245

    6    tmpzk6op0fm                        0x000055626abae1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for n in lst {\n        sum += n * n\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpek4swwia.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += n * n\n                 ^\n\
    \               Int( )\n/tmp/tmpek4swwia.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum: Double = 0\n    for n in lst {\n        sum += n * n\n\
    \    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp990zzqj6.swift:16:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for x in lst {\n        sum += x * x\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp92_8r1ut.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmp92_8r1ut.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for x in lst {\n        sum += x * x\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp92_8r1ut.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmp92_8r1ut.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for x in lst {\n        sum += x * x\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp92_8r1ut.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmp92_8r1ut.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for n in lst {\n        sum += n * n\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpek4swwia.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += n * n\n                 ^\n\
    \               Int( )\n/tmp/tmpek4swwia.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        sum += num * num\n\
    \    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmprtd4updf.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += num * num\n                \
    \   ^\n               Int(     )\n/tmp/tmprtd4updf.swift:16:16: error: cannot\
    \ find 'ceil' in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for n in lst {\n        sum += n * n\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpek4swwia.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += n * n\n                 ^\n\
    \               Int( )\n/tmp/tmpek4swwia.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for x in lst {\n        sum += x * x\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp92_8r1ut.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmp92_8r1ut.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        sum += num * num\n\
    \    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmprtd4updf.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += num * num\n                \
    \   ^\n               Int(     )\n/tmp/tmprtd4updf.swift:16:16: error: cannot\
    \ find 'ceil' in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        sum += num * num\n\
    \    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmprtd4updf.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += num * num\n                \
    \   ^\n               Int(     )\n/tmp/tmprtd4updf.swift:16:16: error: cannot\
    \ find 'ceil' in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for x in lst {\n        sum += x * x\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp92_8r1ut.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmp92_8r1ut.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum: Double = 0\n    for x in lst {\n        sum += x * x\n\
    \    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp9bwm78v2.swift:16:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        sum += num * num\n\
    \    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmprtd4updf.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += num * num\n                \
    \   ^\n               Int(     )\n/tmp/tmprtd4updf.swift:16:16: error: cannot\
    \ find 'ceil' in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for x in lst {\n        sum += x * x\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp92_8r1ut.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmp92_8r1ut.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum: Double = 0\n    for num in lst {\n        sum += num\
    \ * num\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp5b94wgw6.swift:16:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum: Double = 0\n    for x in lst {\n        sum += x * x\n\
    \    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp9bwm78v2.swift:16:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        sum += num * num\n\
    \    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmprtd4updf.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += num * num\n                \
    \   ^\n               Int(     )\n/tmp/tmprtd4updf.swift:16:16: error: cannot\
    \ find 'ceil' in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for x in lst {\n        sum += x * x\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp92_8r1ut.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmp92_8r1ut.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        sum += num * num\n\
    \    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmprtd4updf.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += num * num\n                \
    \   ^\n               Int(     )\n/tmp/tmprtd4updf.swift:16:16: error: cannot\
    \ find 'ceil' in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for x in lst {\n        sum += x * x\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp92_8r1ut.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmp92_8r1ut.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum: Double = 0\n    for x in lst {\n        sum += x * x\n\
    \    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp9bwm78v2.swift:16:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        sum += num * num\n\
    \    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmprtd4updf.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += num * num\n                \
    \   ^\n               Int(     )\n/tmp/tmprtd4updf.swift:16:16: error: cannot\
    \ find 'ceil' in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for x in lst {\n        sum += x * x\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp92_8r1ut.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmp92_8r1ut.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        sum += num * num\n\
    \    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmprtd4updf.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += num * num\n                \
    \   ^\n               Int(     )\n/tmp/tmprtd4updf.swift:16:16: error: cannot\
    \ find 'ceil' in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        sum += num * num\n\
    \    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmprtd4updf.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += num * num\n                \
    \   ^\n               Int(     )\n/tmp/tmprtd4updf.swift:16:16: error: cannot\
    \ find 'ceil' in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum: Int = 0\n    for num in lst {\n        sum += num * num\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp1h9_g3lx.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += num * num\n                \
    \   ^\n               Int(     )\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum: Double = 0\n    for num in lst {\n        sum += num\
    \ * num\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp5b94wgw6.swift:16:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for x in lst {\n        sum += x * x\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp92_8r1ut.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmp92_8r1ut.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum: Double = 0\n    for x in lst {\n        sum += x * x\n\
    \    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp9bwm78v2.swift:16:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        sum += num * num\n\
    \    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmprtd4updf.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += num * num\n                \
    \   ^\n               Int(     )\n/tmp/tmprtd4updf.swift:16:16: error: cannot\
    \ find 'ceil' in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for x in lst {\n        sum += x * x\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp92_8r1ut.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmp92_8r1ut.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        sum += num * num\n\
    \    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmprtd4updf.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += num * num\n                \
    \   ^\n               Int(     )\n/tmp/tmprtd4updf.swift:16:16: error: cannot\
    \ find 'ceil' in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for x in lst {\n        sum += x * x\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp92_8r1ut.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmp92_8r1ut.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum: Double = 0\n    for x in lst {\n        sum += x * x\n\
    \    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp9bwm78v2.swift:16:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum: Double = 0\n    for x in lst {\n        sum += x * x\n\
    \    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp9bwm78v2.swift:16:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for n in lst {\n        sum += n * n\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpek4swwia.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += n * n\n                 ^\n\
    \               Int( )\n/tmp/tmpek4swwia.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        sum += num * num\n\
    \    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmprtd4updf.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += num * num\n                \
    \   ^\n               Int(     )\n/tmp/tmprtd4updf.swift:16:16: error: cannot\
    \ find 'ceil' in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for x in lst {\n        sum += x * x\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp92_8r1ut.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmp92_8r1ut.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for x in lst {\n        sum += x * x\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp92_8r1ut.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmp92_8r1ut.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for x in lst {\n        sum += x * x\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp92_8r1ut.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmp92_8r1ut.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for n in lst {\n        sum += n * n\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpek4swwia.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += n * n\n                 ^\n\
    \               Int( )\n/tmp/tmpek4swwia.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum: Double = 0\n    for x in lst {\n        sum += x * x\n\
    \    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp9bwm78v2.swift:16:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        sum += num * num\n\
    \    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmprtd4updf.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += num * num\n                \
    \   ^\n               Int(     )\n/tmp/tmprtd4updf.swift:16:16: error: cannot\
    \ find 'ceil' in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum: Int = 0\n    for num in lst {\n        sum += num * num\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp1h9_g3lx.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += num * num\n                \
    \   ^\n               Int(     )\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        sum += num * num\n\
    \    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmprtd4updf.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += num * num\n                \
    \   ^\n               Int(     )\n/tmp/tmprtd4updf.swift:16:16: error: cannot\
    \ find 'ceil' in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        sum += num * num\n\
    \    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmprtd4updf.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += num * num\n                \
    \   ^\n               Int(     )\n/tmp/tmprtd4updf.swift:16:16: error: cannot\
    \ find 'ceil' in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for x in lst {\n        sum += x * x\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp92_8r1ut.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmp92_8r1ut.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for x in lst {\n        sum += x * x\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp92_8r1ut.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmp92_8r1ut.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for x in lst {\n        sum += x * x\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp92_8r1ut.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmp92_8r1ut.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        sum += num * num\n\
    \    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmprtd4updf.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += num * num\n                \
    \   ^\n               Int(     )\n/tmp/tmprtd4updf.swift:16:16: error: cannot\
    \ find 'ceil' in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        sum += num * num\n\
    \    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmprtd4updf.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += num * num\n                \
    \   ^\n               Int(     )\n/tmp/tmprtd4updf.swift:16:16: error: cannot\
    \ find 'ceil' in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for x in lst {\n        sum += x * x\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp92_8r1ut.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmp92_8r1ut.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for x in lst {\n        sum += x * x\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp92_8r1ut.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmp92_8r1ut.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for x in lst {\n        sum += x * x\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp92_8r1ut.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmp92_8r1ut.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for x in lst {\n        sum += x * x\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp92_8r1ut.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmp92_8r1ut.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum: Int = 0\n    for num in lst {\n        sum += num * num\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp1h9_g3lx.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += num * num\n                \
    \   ^\n               Int(     )\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        sum += num * num\n\
    \    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmprtd4updf.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += num * num\n                \
    \   ^\n               Int(     )\n/tmp/tmprtd4updf.swift:16:16: error: cannot\
    \ find 'ceil' in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum: Double = 0\n    for num in lst {\n        sum += num\
    \ * num\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp5b94wgw6.swift:16:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        sum += num * num\n\
    \    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmprtd4updf.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += num * num\n                \
    \   ^\n               Int(     )\n/tmp/tmprtd4updf.swift:16:16: error: cannot\
    \ find 'ceil' in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        sum += num * num\n\
    \    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmprtd4updf.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += num * num\n                \
    \   ^\n               Int(     )\n/tmp/tmprtd4updf.swift:16:16: error: cannot\
    \ find 'ceil' in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for x in lst {\n        sum += x * x\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp92_8r1ut.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmp92_8r1ut.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: -4
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum: Int = 0\n    for n in lst {\n        sum += Int(n * n)\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: Exception
  stderr: 'tmpzk6op0fm/tmpzk6op0fm.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b002eb29c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b002e820b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b002e820988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b002e81f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzk6op0fm                        0x000055626abae7db <unavailable> + 6107

    5    libc.so.6                          0x00002b002ed15460 __libc_start_main +
    245

    6    tmpzk6op0fm                        0x000055626abae1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for x in lst {\n        sum += x * x\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp92_8r1ut.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmp92_8r1ut.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for x in lst {\n        sum += x * x\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp92_8r1ut.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmp92_8r1ut.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for n in lst {\n        sum += n * n\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpek4swwia.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += n * n\n                 ^\n\
    \               Int( )\n/tmp/tmpek4swwia.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum: Double = 0\n    for x in lst {\n        sum += x * x\n\
    \    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp9bwm78v2.swift:16:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        sum += num * num\n\
    \    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmprtd4updf.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += num * num\n                \
    \   ^\n               Int(     )\n/tmp/tmprtd4updf.swift:16:16: error: cannot\
    \ find 'ceil' in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        sum += num * num\n\
    \    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmprtd4updf.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += num * num\n                \
    \   ^\n               Int(     )\n/tmp/tmprtd4updf.swift:16:16: error: cannot\
    \ find 'ceil' in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for x in lst {\n        sum += x * x\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp92_8r1ut.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmp92_8r1ut.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum: Double = 0\n    for x in lst {\n        sum += x * x\n\
    \    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp9bwm78v2.swift:16:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for x in lst {\n        sum += x * x\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp92_8r1ut.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmp92_8r1ut.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for n in lst {\n        sum += n * n\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpek4swwia.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += n * n\n                 ^\n\
    \               Int( )\n/tmp/tmpek4swwia.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for x in lst {\n        sum += x * x\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp92_8r1ut.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmp92_8r1ut.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for x in lst {\n        sum += x * x\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp92_8r1ut.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmp92_8r1ut.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for n in lst {\n        sum += n * n\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpek4swwia.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += n * n\n                 ^\n\
    \               Int( )\n/tmp/tmpek4swwia.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum: Double = 0\n    for n in lst {\n        sum += n * n\n\
    \    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp990zzqj6.swift:16:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for n in lst {\n        sum += n * n\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpek4swwia.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += n * n\n                 ^\n\
    \               Int( )\n/tmp/tmpek4swwia.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        sum += num * num\n\
    \    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmprtd4updf.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += num * num\n                \
    \   ^\n               Int(     )\n/tmp/tmprtd4updf.swift:16:16: error: cannot\
    \ find 'ceil' in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        sum += num * num\n\
    \    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmprtd4updf.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += num * num\n                \
    \   ^\n               Int(     )\n/tmp/tmprtd4updf.swift:16:16: error: cannot\
    \ find 'ceil' in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for x in lst {\n        sum += x * x\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp92_8r1ut.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmp92_8r1ut.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        sum += num * num\n\
    \    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmprtd4updf.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += num * num\n                \
    \   ^\n               Int(     )\n/tmp/tmprtd4updf.swift:16:16: error: cannot\
    \ find 'ceil' in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum: Int = 0\n    for num in lst {\n        sum += num * num\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp1h9_g3lx.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += num * num\n                \
    \   ^\n               Int(     )\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for n in lst {\n        sum += n * n\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpek4swwia.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += n * n\n                 ^\n\
    \               Int( )\n/tmp/tmpek4swwia.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum: Double = 0\n    for num in lst {\n        sum += num\
    \ * num\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp5b94wgw6.swift:16:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum: Double = 0\n    for n in lst {\n        sum += n * n\n\
    \    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp990zzqj6.swift:16:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum: Double = 0\n    for num in lst {\n        sum += num\
    \ * num\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp5b94wgw6.swift:16:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        sum += num * num\n\
    \    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmprtd4updf.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += num * num\n                \
    \   ^\n               Int(     )\n/tmp/tmprtd4updf.swift:16:16: error: cannot\
    \ find 'ceil' in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        sum += num * num\n\
    \    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmprtd4updf.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += num * num\n                \
    \   ^\n               Int(     )\n/tmp/tmprtd4updf.swift:16:16: error: cannot\
    \ find 'ceil' in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        sum += num * num\n\
    \    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmprtd4updf.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += num * num\n                \
    \   ^\n               Int(     )\n/tmp/tmprtd4updf.swift:16:16: error: cannot\
    \ find 'ceil' in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum: Double = 0\n    for x in lst {\n        sum += x * x\n\
    \    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp9bwm78v2.swift:16:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        sum += num * num\n\
    \    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmprtd4updf.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += num * num\n                \
    \   ^\n               Int(     )\n/tmp/tmprtd4updf.swift:16:16: error: cannot\
    \ find 'ceil' in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        sum += num * num\n\
    \    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmprtd4updf.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += num * num\n                \
    \   ^\n               Int(     )\n/tmp/tmprtd4updf.swift:16:16: error: cannot\
    \ find 'ceil' in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum: Double = 0\n    for x in lst {\n        sum += x * x\n\
    \    }\n    return Int(round(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst:\
    \ [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst:\
    \ [100.0, 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0])\
    \ == 200000000)\nassert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst:\
    \ [-1.4, 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpxh3ow1fm.swift:16:16: error: cannot find 'round' in scope\n   \
    \ return Int(round(sum))\n               ^~~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for x in lst {\n        sum += x * x\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp92_8r1ut.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmp92_8r1ut.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for x in lst {\n        sum += x * x\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp92_8r1ut.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmp92_8r1ut.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: -4
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum: Int = 0\n    for x in lst {\n        sum += Int(x * x)\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: Exception
  stderr: 'tmplta_ah8d/tmplta_ah8d.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0c2b61c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0c2858b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0c2858988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0c28577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplta_ah8d                        0x00005607f042c7db <unavailable> + 6107

    5    libc.so.6                          0x00002ba0c2d4d460 __libc_start_main +
    245

    6    tmplta_ah8d                        0x00005607f042c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        sum += num * num\n\
    \    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmprtd4updf.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += num * num\n                \
    \   ^\n               Int(     )\n/tmp/tmprtd4updf.swift:16:16: error: cannot\
    \ find 'ceil' in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        sum += num * num\n\
    \    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmprtd4updf.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += num * num\n                \
    \   ^\n               Int(     )\n/tmp/tmprtd4updf.swift:16:16: error: cannot\
    \ find 'ceil' in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum: Double = 0\n    for num in lst {\n        sum += num\
    \ * num\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp5b94wgw6.swift:16:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: -4
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum: Int = 0\n    for n in lst {\n        sum += Int(n * n)\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: Exception
  stderr: 'tmpzk6op0fm/tmpzk6op0fm.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b002eb29c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b002e820b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b002e820988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b002e81f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzk6op0fm                        0x000055626abae7db <unavailable> + 6107

    5    libc.so.6                          0x00002b002ed15460 __libc_start_main +
    245

    6    tmpzk6op0fm                        0x000055626abae1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for x in lst {\n        sum += x * x\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp92_8r1ut.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmp92_8r1ut.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for x in lst {\n        sum += x * x\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp92_8r1ut.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmp92_8r1ut.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        sum += num * num\n\
    \    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmprtd4updf.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += num * num\n                \
    \   ^\n               Int(     )\n/tmp/tmprtd4updf.swift:16:16: error: cannot\
    \ find 'ceil' in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for n in lst {\n        sum += n * n\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpek4swwia.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += n * n\n                 ^\n\
    \               Int( )\n/tmp/tmpek4swwia.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for x in lst {\n        sum += x * x\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp92_8r1ut.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmp92_8r1ut.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for n in lst {\n        sum += n * n\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpek4swwia.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += n * n\n                 ^\n\
    \               Int( )\n/tmp/tmpek4swwia.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for x in lst {\n        sum += x * x\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp92_8r1ut.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmp92_8r1ut.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for x in lst {\n        sum += x * x\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp92_8r1ut.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmp92_8r1ut.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum: Double = 0\n    for num in lst {\n        sum += num\
    \ * num\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp5b94wgw6.swift:16:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum: Double = 0\n    for x in lst {\n        sum += x * x\n\
    \    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp9bwm78v2.swift:16:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        sum += num * num\n\
    \    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmprtd4updf.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += num * num\n                \
    \   ^\n               Int(     )\n/tmp/tmprtd4updf.swift:16:16: error: cannot\
    \ find 'ceil' in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for n in lst {\n        sum += n * n\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpek4swwia.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += n * n\n                 ^\n\
    \               Int( )\n/tmp/tmpek4swwia.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for n in lst {\n        sum += n * n\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpek4swwia.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += n * n\n                 ^\n\
    \               Int( )\n/tmp/tmpek4swwia.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for x in lst {\n        sum += x * x\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp92_8r1ut.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmp92_8r1ut.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for x in lst {\n        sum += x * x\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp92_8r1ut.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmp92_8r1ut.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: -4
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum: Int = 0\n    for num in lst {\n        sum += Int(num\
    \ * num)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: Exception
  stderr: 'tmp6yq1kx3i/tmp6yq1kx3i.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6023f04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6023bfbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6023bfb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6023bfa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6yq1kx3i                        0x0000557c379037db <unavailable> + 6107

    5    libc.so.6                          0x00002b60240f0460 __libc_start_main +
    245

    6    tmp6yq1kx3i                        0x0000557c379031a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        sum += num * num\n\
    \    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmprtd4updf.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += num * num\n                \
    \   ^\n               Int(     )\n/tmp/tmprtd4updf.swift:16:16: error: cannot\
    \ find 'ceil' in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for n in lst {\n        sum += n * n\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpek4swwia.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += n * n\n                 ^\n\
    \               Int( )\n/tmp/tmpek4swwia.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for x in lst {\n        sum += x * x\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp92_8r1ut.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmp92_8r1ut.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for x in lst {\n        sum += x * x\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp92_8r1ut.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmp92_8r1ut.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for x in lst {\n        sum += x * x\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp92_8r1ut.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmp92_8r1ut.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum: Double = 0\n    for num in lst {\n        sum += num\
    \ * num\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp5b94wgw6.swift:16:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for x in lst {\n        sum += x * x\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp92_8r1ut.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmp92_8r1ut.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        sum += num * num\n\
    \    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmprtd4updf.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += num * num\n                \
    \   ^\n               Int(     )\n/tmp/tmprtd4updf.swift:16:16: error: cannot\
    \ find 'ceil' in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for x in lst {\n        sum += x * x\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp92_8r1ut.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmp92_8r1ut.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for x in lst {\n        sum += x * x\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp92_8r1ut.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmp92_8r1ut.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for x in lst {\n        sum += x * x\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp92_8r1ut.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmp92_8r1ut.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for x in lst {\n        sum += x * x\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp92_8r1ut.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmp92_8r1ut.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum: Double = 0.0\n    for x in lst {\n        sum += x *\
    \ x\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst:\
    \ [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst:\
    \ [100.0, 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0])\
    \ == 200000000)\nassert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst:\
    \ [-1.4, 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmppoce1hhr.swift:16:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum: Double = 0\n    for num in lst {\n        sum += num\
    \ * num\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp5b94wgw6.swift:16:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for x in lst {\n        sum += x * x\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp92_8r1ut.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmp92_8r1ut.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum: Int = 0\n    for number in lst {\n        sum += Int(pow(number,\
    \ 2))\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzt6lex2e.swift:14:20: error: cannot find 'pow' in scope\n     \
    \   sum += Int(pow(number, 2))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum: Double = 0\n    for num in lst {\n        sum += num\
    \ * num\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp5b94wgw6.swift:16:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for x in lst {\n        sum += x * x\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp92_8r1ut.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmp92_8r1ut.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for x in lst {\n        sum += x * x\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp92_8r1ut.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmp92_8r1ut.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for x in lst {\n        sum += x * x\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp92_8r1ut.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmp92_8r1ut.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for x in lst {\n        sum += x * x\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp92_8r1ut.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmp92_8r1ut.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: -4
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum: Int = 0\n    for n in lst {\n        sum += Int(n * n)\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: Exception
  stderr: 'tmpzk6op0fm/tmpzk6op0fm.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b002eb29c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b002e820b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b002e820988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b002e81f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzk6op0fm                        0x000055626abae7db <unavailable> + 6107

    5    libc.so.6                          0x00002b002ed15460 __libc_start_main +
    245

    6    tmpzk6op0fm                        0x000055626abae1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        sum += num * num\n\
    \    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmprtd4updf.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += num * num\n                \
    \   ^\n               Int(     )\n/tmp/tmprtd4updf.swift:16:16: error: cannot\
    \ find 'ceil' in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for n in lst {\n        sum += n * n\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpek4swwia.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += n * n\n                 ^\n\
    \               Int( )\n/tmp/tmpek4swwia.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        sum += num * num\n\
    \    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmprtd4updf.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += num * num\n                \
    \   ^\n               Int(     )\n/tmp/tmprtd4updf.swift:16:16: error: cannot\
    \ find 'ceil' in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for x in lst {\n        sum += x * x\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp92_8r1ut.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmp92_8r1ut.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for x in lst {\n        sum += x * x\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp92_8r1ut.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmp92_8r1ut.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for n in lst {\n        sum += n * n\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpek4swwia.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += n * n\n                 ^\n\
    \               Int( )\n/tmp/tmpek4swwia.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        sum += num * num\n\
    \    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmprtd4updf.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += num * num\n                \
    \   ^\n               Int(     )\n/tmp/tmprtd4updf.swift:16:16: error: cannot\
    \ find 'ceil' in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        sum += num * num\n\
    \    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmprtd4updf.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += num * num\n                \
    \   ^\n               Int(     )\n/tmp/tmprtd4updf.swift:16:16: error: cannot\
    \ find 'ceil' in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for x in lst {\n        sum += x * x\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp92_8r1ut.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmp92_8r1ut.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        sum += num * num\n\
    \    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmprtd4updf.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += num * num\n                \
    \   ^\n               Int(     )\n/tmp/tmprtd4updf.swift:16:16: error: cannot\
    \ find 'ceil' in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for x in lst {\n        sum += x * x\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp92_8r1ut.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmp92_8r1ut.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for x in lst {\n        sum += x * x\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp92_8r1ut.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmp92_8r1ut.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum: Double = 0\n    for n in lst {\n        sum += n * n\n\
    \    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp990zzqj6.swift:16:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for x in lst {\n        sum += x * x\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp92_8r1ut.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmp92_8r1ut.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum: Double = 0\n    for num in lst {\n        sum += num\
    \ * num\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp5b94wgw6.swift:16:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for x in lst {\n        sum += x * x\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp92_8r1ut.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmp92_8r1ut.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for x in lst {\n        sum += x * x\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp92_8r1ut.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmp92_8r1ut.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for n in lst {\n        sum += n * n\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpek4swwia.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += n * n\n                 ^\n\
    \               Int( )\n/tmp/tmpek4swwia.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for x in lst {\n        sum += x * x\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp92_8r1ut.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmp92_8r1ut.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum: Int = 0\n    for x in lst {\n        sum += Int(pow(Double(x),\
    \ 2))\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpeg2zav7s.swift:14:20: error: cannot find 'pow' in scope\n     \
    \   sum += Int(pow(Double(x), 2))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for x in lst {\n        sum += x * x\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp92_8r1ut.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmp92_8r1ut.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        sum += num * num\n\
    \    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmprtd4updf.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += num * num\n                \
    \   ^\n               Int(     )\n/tmp/tmprtd4updf.swift:16:16: error: cannot\
    \ find 'ceil' in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for x in lst {\n        sum += x * x\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp92_8r1ut.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmp92_8r1ut.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for x in lst {\n        sum += x * x\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp92_8r1ut.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmp92_8r1ut.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        sum += num * num\n\
    \    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmprtd4updf.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += num * num\n                \
    \   ^\n               Int(     )\n/tmp/tmprtd4updf.swift:16:16: error: cannot\
    \ find 'ceil' in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum: Double = 0\n    for x in lst {\n        sum += x * x\n\
    \    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp9bwm78v2.swift:16:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        sum += num * num\n\
    \    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmprtd4updf.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += num * num\n                \
    \   ^\n               Int(     )\n/tmp/tmprtd4updf.swift:16:16: error: cannot\
    \ find 'ceil' in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for x in lst {\n        sum += x * x\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp92_8r1ut.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmp92_8r1ut.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        sum += num * num\n\
    \    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmprtd4updf.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += num * num\n                \
    \   ^\n               Int(     )\n/tmp/tmprtd4updf.swift:16:16: error: cannot\
    \ find 'ceil' in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        sum += num * num\n\
    \    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmprtd4updf.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += num * num\n                \
    \   ^\n               Int(     )\n/tmp/tmprtd4updf.swift:16:16: error: cannot\
    \ find 'ceil' in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for x in lst {\n        sum += x * x\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp92_8r1ut.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmp92_8r1ut.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for x in lst {\n        sum += x * x\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp92_8r1ut.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmp92_8r1ut.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        sum += num * num\n\
    \    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmprtd4updf.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += num * num\n                \
    \   ^\n               Int(     )\n/tmp/tmprtd4updf.swift:16:16: error: cannot\
    \ find 'ceil' in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for x in lst {\n        sum += x * x\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp92_8r1ut.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmp92_8r1ut.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        sum += num * num\n\
    \    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmprtd4updf.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += num * num\n                \
    \   ^\n               Int(     )\n/tmp/tmprtd4updf.swift:16:16: error: cannot\
    \ find 'ceil' in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for x in lst {\n        sum += x * x\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp92_8r1ut.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmp92_8r1ut.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for x in lst {\n        sum += x * x\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp92_8r1ut.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmp92_8r1ut.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for x in lst {\n        sum += x * x\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp92_8r1ut.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmp92_8r1ut.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for x in lst {\n        sum += x * x\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp92_8r1ut.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmp92_8r1ut.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for n in lst {\n        sum += n * n\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpek4swwia.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += n * n\n                 ^\n\
    \               Int( )\n/tmp/tmpek4swwia.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        sum += num * num\n\
    \    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmprtd4updf.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += num * num\n                \
    \   ^\n               Int(     )\n/tmp/tmprtd4updf.swift:16:16: error: cannot\
    \ find 'ceil' in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for x in lst {\n        sum += x * x\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp92_8r1ut.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmp92_8r1ut.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum: Double = 0\n    for x in lst {\n        sum += x * x\n\
    \    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp9bwm78v2.swift:16:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum: Double = 0\n    for num in lst {\n        sum += num\
    \ * num\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp5b94wgw6.swift:16:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for n in lst {\n        sum += n * n\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpek4swwia.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += n * n\n                 ^\n\
    \               Int( )\n/tmp/tmpek4swwia.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for x in lst {\n        sum += x * x\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp92_8r1ut.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmp92_8r1ut.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for x in lst {\n        sum += x * x\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp92_8r1ut.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmp92_8r1ut.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum: Double = 0.0\n    for n in lst {\n        sum += n *\
    \ n\n    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0,\
    \ 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst:\
    \ [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst:\
    \ [100.0, 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0])\
    \ == 200000000)\nassert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst:\
    \ [-1.4, 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpmlw1pu1l.swift:16:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum: Double = 0\n    for x in lst {\n        sum += x * x\n\
    \    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp9bwm78v2.swift:16:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        sum += num * num\n\
    \    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmprtd4updf.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += num * num\n                \
    \   ^\n               Int(     )\n/tmp/tmprtd4updf.swift:16:16: error: cannot\
    \ find 'ceil' in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for n in lst {\n        sum += n * n\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpek4swwia.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += n * n\n                 ^\n\
    \               Int( )\n/tmp/tmpek4swwia.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for n in lst {\n        sum += n * n\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpek4swwia.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += n * n\n                 ^\n\
    \               Int( )\n/tmp/tmpek4swwia.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for x in lst {\n        sum += x * x\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp92_8r1ut.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmp92_8r1ut.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum: Double = 0\n    for x in lst {\n        sum += x * x\n\
    \    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp9bwm78v2.swift:16:16: error: cannot find 'ceil' in scope\n    return\
    \ Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        sum += num * num\n\
    \    }\n    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmprtd4updf.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += num * num\n                \
    \   ^\n               Int(     )\n/tmp/tmprtd4updf.swift:16:16: error: cannot\
    \ find 'ceil' in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for x in lst {\n        sum += x * x\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp92_8r1ut.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmp92_8r1ut.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for x in lst {\n        sum += x * x\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp92_8r1ut.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmp92_8r1ut.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for n in lst {\n        sum += n * n\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpek4swwia.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += n * n\n                 ^\n\
    \               Int( )\n/tmp/tmpek4swwia.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for x in lst {\n        sum += x * x\n    }\n\
    \    return Int(ceil(sum))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp92_8r1ut.swift:14:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += x * x\n                 ^\n\
    \               Int( )\n/tmp/tmp92_8r1ut.swift:16:16: error: cannot find 'ceil'\
    \ in scope\n    return Int(ceil(sum))\n               ^~~~\n"
  stdout: ''
  timestamp: 1659821098
