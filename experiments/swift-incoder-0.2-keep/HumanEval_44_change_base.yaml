name: HumanEval_44_change_base
language: swift
prompt: "\n/// Change numerical base of input number x to base.\n/// return string\
  \ representation after the conversion.\n/// base numbers are less than 10.\n///\
  \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n/// >>>\
  \ change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\n\
  assert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base:\
  \ 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x:\
  \ 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
  \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
  \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
  \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
completions: ["    let bases = Array(1...base).map(String.init)\n    let digits =\
    \ x.toInt()\n    let result = \"\"\n    for b in bases {\n        let digit =\
    \ digits % b\n        digits /= b\n        result += digit\n    }\n    return\
    \ result", "    let bases = [\"\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"\
    6\", \"7\", \"8\", \"9\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\n    let basesCount\
    \ = bases.count\n    let basesIndex = bases.startIndex\n    let basesCount = bases.count\n\
    \    let basesIndex = bases.startIndex\n    let basesCount = bases.count\n   \
    \ let basesIndex = bases.startIndex\n    let basesCount = bases.count\n    let\
    \ basesIndex = bases.startIndex\n    let basesCount = bases.count\n    let basesIndex\
    \ = bases.startIndex\n    let basesCount = bases.count\n    let basesIndex = bases.startIndex\n\
    \    let basesCount = bases.count\n    let basesIndex = bases.startIndex\n   \
    \ let basesCount = bases.count\n    let basesIndex = bases.startIndex\n    let\
    \ basesCount = bases.count\n    let basesIndex = bases.startIndex\n    let basesCount\
    \ = bases.count\n    let basesIndex = bases.startIndex\n    let basesCount = bases.count\n\
    \    let basesIndex = bases.startIndex\n    let basesCount = bases.count\n   \
    \ let basesIndex = bases.startIndex\n    let basesCount = bases.count\n    let\
    \ basesIndex = bases.startIndex\n    let basesCount = bases.count\n    let basesIndex\
    \ = bases.startIndex\n    let basesCount = bases.count\n    let basesIndex = bases.startIndex\n\
    \    let basesCount = bases.count\n    let basesIndex = bases.startIndex\n   \
    \ let basesCount = bases.count\n    let basesIndex = bases.startIndex\n    let\
    \ basesCount = bases.count\n    let basesIndex = bases.startIndex\n    let basesCount\
    \ = bases.count\n    let basesIndex = bases.startIndex\n    let basesCount = bases.count\n\
    \    let basesIndex = bases.startIndex\n    let basesCount = bases.count\n   \
    \ let basesIndex = bases.startIndex\n    let basesCount = bases.count\n    let\
    \ basesIndex = bases.startIndex\n    let basesCount = bases.count\n    let basesIndex\
    \ = bases.startIndex\n    let basesCount = bases.count\n    let basesIndex = bases.startIndex\n\
    \    let basesCount = bases.count\n    let basesIndex = bases.startIndex\n   \
    \ let basesCount = bases.count\n    let basesIndex = bases.startIndex\n    let\
    \ basesCount = bases.count\n    let basesIndex = bases.startIndex\n    let basesCount\
    \ = bases.count\n    let basesIndex = bases.startIndex\n    let basesCount = bases.",
  "    var result = \"\"\n    var remainder = x % base\n    while remainder != 0 {\n\
    \        result = String(remainder) + result\n        remainder = x % base\n \
    \       x /= base\n    }\n    return String(base)", "    var result = \"\"\n \
    \   var remainder = x % base\n    while remainder != 0 {\n        result = String(remainder)\
    \ + result\n        remainder = x % base\n    }\n    return String(base)", " \
    \   let bases = [\"\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"\
    , \"8\", \"9\"]\n    let baseIndex = bases.index(base)!\n    let baseDigit = bases[baseIndex]\n\
    \    let digits = x.toString(base: base).components(separatedBy: CharacterSet.decimalDigits.inverted)\n\
    \    return String(digits[baseIndex] + baseDigit)", "    let baseDigits = baseDigits(base)\n\
    \    var result = \"\"\n    var remainder = x % base\n    for digit in baseDigits\
    \ {\n        if remainder < baseDigits[digit] {\n            result += String(digit)\n\
    \            remainder *= base\n        } else {\n            result += String(digit)\n\
    \            remainder /= base\n        }\n    }\n    if remainder > 0 {\n   \
    \     result += \"0\"\n    }\n    return result", "    var result = \"\"\n   \
    \ var remainder = x % base\n    while remainder > 0 {\n        result = String(remainder)\
    \ + result\n        remainder = x % base\n    }\n    if remainder > 0 {\n    \
    \    result = String(remainder) + result\n    }\n    return result", "    var\
    \ result = \"\"\n    var remainder = x % base\n    while remainder != 0 {\n  \
    \      result = String(remainder) + result\n        remainder = x % base\n   \
    \     x /= base\n    }\n    if x > 0 {\n        result = String(base) + result\n\
    \    }\n    return result", "    var result = \"\"\n    var remainder = x % base\n\
    \    if remainder == 0 {\n        result = String(x / base)\n    } else {\n  \
    \      result = String(remainder) + String(x / base)\n    }\n    return result",
  "    let bases = [\"\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\",\
    \ \"8\", \"9\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\n    let basesLen =\
    \ bases.count\n    let baseIndex = bases.firstIndex(of: base)!\n    let baseChar\
    \ = bases[baseIndex]\n    let baseCharLen = baseChar.count\n    let baseCharIndex\
    \ = baseChar.firstIndex(of: x)!\n    let baseCharChar = baseChar[baseCharIndex]\n\
    \    let baseCharCharLen = baseCharChar.count\n    let baseCharCharIndex = baseCharChar.firstIndex(of:\
    \ \"0\")!\n    let baseCharCharChar = baseCharChar[baseCharCharIndex]\n    let\
    \ baseCharCharCharLen = baseCharCharChar.count\n    let baseCharCharCharIndex\
    \ = baseCharCharChar.firstIndex(of: \"\")!\n    let baseCharCharCharChar = baseCharCharChar[baseCharCharCharIndex]\n\
    \    let baseCharCharCharCharLen = baseCharCharCharChar.count\n    let baseCharCharCharCharIndex\
    \ = baseCharCharCharChar.firstIndex(of: \"\")!\n    let baseCharCharCharCharChar\
    \ = baseCharCharCharChar[baseCharCharCharCharIndex]\n    let baseCharCharCharCharLen\
    \ = baseCharCharCharCharChar.count\n    let baseCharCharCharCharCharIndex = baseCharCharCharCharChar.firstIndex(of:\
    \ \"\")!\n    let baseCharCharCharCharCharChar = baseCharCharCharCharChar[baseCharCharCharCharCharIndex]\n\
    \    let baseCharCharCharCharCharLen = baseCharCharCharCharCharChar.count\n  \
    \  let baseCharCharCharCharCharIndex = baseCharCharCharCharCharChar.firstIndex(of:\
    \ \"\")!\n    let baseCharCharCharCharCharChar = baseCharCharCharCharCharChar[baseCharCharCharCharCharCharIndex]\n\
    \    let baseCharCharCharCharCharCharLen = baseCharCharCharCharCharCharChar.count\n\
    \    let baseCharCharCharCharCharCharIndex = baseCharCharCharCharCharCharChar.firstIndex(of:\
    \ \"\")!\n    let baseCharCharCharCharCharCharChar = baseCharCharCharCharCharCharChar[baseCharCharCharCharCharCharCharIndex]\n\
    \    let baseCharCharCharCharCharCharLen = baseCharCharCharCharCharCharChar.count\n\
    \    let baseCharCharCharCharCharCharIndex = baseCharCharCharCharCharCharChar.firstIndex(of:\
    \ \"\")!\n    let baseCharCharCharCharCharCharChar = baseCharCharChar", "    if\
    \ base < 10 {\n        return String(x)\n    }\n    var result = \"\"\n    var\
    \ remainder = x % base\n    while remainder != 0 {\n        result = String(remainder)\
    \ + result\n        remainder = x % base\n        x /= base\n    }\n    return\
    \ String(result)", "    let bases = [\n        \"0\", \"1\", \"2\", \"3\", \"\
    4\", \"5\", \"6\", \"7\",\n        \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"\
    E\", \"F\"\n    ]\n    let basesReversed = [\n        \"F\", \"E\", \"D\", \"\
    C\", \"B\", \"A\", \"9\", \"8\",\n        \"7\", \"6\", \"5\", \"4\", \"3\", \"\
    2\", \"1\", \"0\"\n    ]\n    let basesReversedReversed = [\n        \"0\", \"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\",\n        \"8\", \"9\", \"A\", \"\
    B\", \"C\", \"D\", \"E\", \"F\"\n    ]\n    let basesReversedReversedReversed\
    \ = [\n        \"F\", \"E\", \"D\", \"C\", \"B\", \"A\", \"9\", \"8\",\n     \
    \   \"7\", \"6\", \"5\", \"4\", \"3\", \"2\", \"1\", \"0\"\n    ]\n    let basesReversedReversedReversedReversed\
    \ = [\n        \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\",\n     \
    \   \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"\n    ]\n    let basesReversedReversedReversedReversedReversed\
    \ = [\n        \"F\", \"E\", \"D\", \"C\", \"B\", \"A\", \"9\", \"8\",\n     \
    \   \"7\", \"6\", \"5\", \"4\", \"3\", \"2\", \"1\", \"0\"\n    ]\n    let basesReversedReversedReversedReversedReversedReversed\
    \ = [\n        \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\",\n     \
    \   \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"\n    ]\n    let basesReversedReversedReversedReversedReversedReversedReversed\
    \ = [\n        \"F\", \"E\", \"D\", \"C\", \"B\", \"A\", \"9\", \"8\",\n     \
    \   \"7\", \"6\", \"5\", \"4\", \"3\", \"2\", \"1\", \"0\"\n    ]\n    let basesReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = [\n        \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\",\n     \
    \   \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"\n    ]\n    let basesReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = [\n        \"F\", \"E\", \"D\", \"C\", \"B\", \"A\", \"9\", \"8\",\n     \
    \   \"7\", \"6\", \"5\", \"4\", \"3\", \"2\", \"1\", \"0\"\n    ]\n    let basesReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = [\n        \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\",\n     \
    \   \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"\n", "    let baseDigits\
    \ = base.digits\n    let digits = x.digits\n    var result = \"\"\n    for i in\
    \ 0..<baseDigits {\n        let digit = digits[i]\n        let baseDigit = baseDigits[i]\n\
    \        if digit > baseDigit {\n            result += String(digit - baseDigit\
    \ + base)\n        } else {\n            result += String(digit + base)\n    \
    \    }\n    }\n    return result", "    var result = \"\"\n    var digits = \"\
    \"\n    var baseDigits = \"\"\n    var baseDigitCount = 0\n    var digitCount\
    \ = 0\n    var digitBase = 0\n    var digitBaseCount = 0\n    var digitBaseDigitCount\
    \ = 0\n    var digitBaseDigit = 0\n    var digitBaseDigitCount2 = 0\n    var digitBaseDigit2\
    \ = 0\n    var digitBaseDigit2Count = 0\n    var digitBaseDigit3 = 0\n    var\
    \ digitBaseDigit3Count = 0\n    var digitBaseDigit4 = 0\n    var digitBaseDigit4Count\
    \ = 0\n    var digitBaseDigit5 = 0\n    var digitBaseDigit5Count = 0\n    var\
    \ digitBaseDigit6 = 0\n    var digitBaseDigit6Count = 0\n    var digitBaseDigit7\
    \ = 0\n    var digitBaseDigit7Count = 0\n    var digitBaseDigit8 = 0\n    var\
    \ digitBaseDigit8Count = 0\n    var digitBaseDigit9 = 0\n    var digitBaseDigit9Count\
    \ = 0\n    var digitBaseDigit10 = 0\n    var digitBaseDigit10Count = 0\n    var\
    \ digitBaseDigit11 = 0\n    var digitBaseDigit11Count = 0\n    var digitBaseDigit12\
    \ = 0\n    var digitBaseDigit12Count = 0\n    var digitBaseDigit13 = 0\n    var\
    \ digitBaseDigit13Count = 0\n    var digitBaseDigit14 = 0\n    var digitBaseDigit14Count\
    \ = 0\n    var digitBaseDigit15 = 0\n    var digitBaseDigit15Count = 0\n    var\
    \ digitBaseDigit16 = 0\n    var digitBaseDigit16Count = 0\n    var digitBaseDigit17\
    \ = 0\n    var digitBaseDigit17Count = 0\n    var digitBaseDigit18 = 0\n    var\
    \ digitBaseDigit18Count = 0\n    var digitBaseDigit19 = 0\n    var digitBaseDigit19Count\
    \ = 0\n    var digitBaseDigit20 = 0\n    var digitBaseDigit20Count = 0\n    var\
    \ digitBaseDigit21 = 0\n    var digitBaseDigit21Count = 0\n    var digitBaseDigit22\
    \ = 0\n    var digitBaseDigit22Count = 0\n    var digitBaseDigit23 = 0\n    var\
    \ digitBaseDigit23Count = 0\n    var digitBaseDigit24 = 0\n    var digitBaseDigit24Count\
    \ = 0\n    var digitBaseDigit25 = 0\n    var digitBaseDigit25Count = 0\n    var\
    \ digitBaseDigit26 = 0\n    var digitBaseDigit26Count = 0\n    var digitBaseDigit27\
    \ = 0\n    var digitBaseDigit27Count = 0\n    var digitBaseDigit28 = 0\n    var\
    \ digitBaseDigit28Count = 0\n    var digitBaseDigit29 = 0\n    var digitBaseDigit29Count\
    \ = 0\n    var digitBaseDigit30 = 0\n    var digitBaseDigit30Count = 0\n    var\
    \ digitBaseDigit31 = 0\n    var digitBaseDigit31Count = 0\n    var digitBaseDigit",
  '    let bases = ["", "K", "M", "B", "T", "Qa", "Qi", "Qo", "Qu", "Sa", "Se", "So",
    "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta",
    "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti",
    "To", "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti", "To",
    "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta",
    "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti",
    "To", "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti", "To",
    "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta",
    "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti",
    "To", "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti", "To",
    "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta",
    "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti",
    "To", "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti", "To",
    "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta",
    "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti",
    "To", "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti", "To",
    "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta",
    "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti",
    "To", "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti", "To",
    "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti", "', "    let bases = [\n     \
    \   \"0\",\n        \"1\",\n        \"2\",\n        \"3\",\n        \"4\",\n \
    \       \"5\",\n        \"6\",\n        \"7\",\n        \"8\",\n        \"9\"\
    ,\n        \"10\",\n        \"11\",\n        \"12\",\n        \"13\",\n      \
    \  \"14\",\n        \"15\",\n        \"16\",\n        \"17\",\n        \"18\"\
    ,\n        \"19\",\n        \"20\",\n        \"21\",\n        \"22\",\n      \
    \  \"23\",\n        \"24\",\n        \"25\",\n        \"26\",\n        \"27\"\
    ,\n        \"28\",\n        \"29\",\n        \"30\",\n        \"31\"\n    ]\n\
    \    let baseIndex = bases.index(base)!\n    let result = x.toString(baseIndex).reversed()\n\
    \    return String(result)", "    let baseDigits = String(base)\n    var result\
    \ = \"\"\n    var remainder = x\n    var digit = 0\n    while remainder > 0 {\n\
    \        remainder, remainder = remainder / base, digit\n        result = String(digit)\
    \ + result\n        digit += 1\n    }\n    return result", "    let baseDigits\
    \ = baseDigits(base)\n    var result = \"\"\n    var remainder = x\n    for digit\
    \ in baseDigits {\n        if remainder < 0 {\n            result += \"-\"\n \
    \           remainder = -remainder\n        }\n        result += digits[remainder\
    \ % base]\n        remainder = remainder / base\n    }\n    if remainder > 0 {\n\
    \        result += \"+\"\n        remainder = -remainder\n    }\n    result +=\
    \ digits[remainder]\n    return result", "    let digits = String(x.toInt())\n\
    \    let baseDigits = String(base.toInt())\n    var result = \"\"\n    for i in\
    \ 0..<digits.count {\n        let digit = digits[i]\n        let baseDigit = baseDigits[i]\n\
    \        if digit == baseDigit {\n            result += digit\n        } else\
    \ {\n            result += digit + baseDigit\n        }\n    }\n    return result",
  "    var result = \"\"\n    var remainder = x % base\n    while remainder != 0 {\n\
    \        result = String(remainder) + result\n        remainder = x % base\n \
    \       x /= base\n    }\n    return String(result)", "    let bases = [\"\",\
    \ \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\"\
    , \"B\", \"C\", \"D\", \"E\", \"F\"]\n    let baseIndex = bases.count\n    let\
    \ baseString = bases[baseIndex]\n    let baseStringIndex = baseString.count\n\
    \    let baseStringLength = baseString.count\n    let baseStringLength2 = baseStringLength\
    \ * baseStringLength\n    let baseStringLength3 = baseStringLength2 * baseStringLength\n\
    \    let baseStringLength4 = baseStringLength3 * baseStringLength\n    let baseStringLength5\
    \ = baseStringLength4 * baseStringLength\n    let baseStringLength6 = baseStringLength5\
    \ * baseStringLength\n    let baseStringLength7 = baseStringLength6 * baseStringLength\n\
    \    let baseStringLength8 = baseStringLength7 * baseStringLength\n    let baseStringLength9\
    \ = baseStringLength8 * baseStringLength\n    let baseStringLength10 = baseStringLength9\
    \ * baseStringLength\n    let baseStringLength11 = baseStringLength10 * baseStringLength\n\
    \    let baseStringLength12 = baseStringLength11 * baseStringLength\n    let baseStringLength13\
    \ = baseStringLength12 * baseStringLength\n    let baseStringLength14 = baseStringLength13\
    \ * baseStringLength\n    let baseStringLength15 = baseStringLength14 * baseStringLength\n\
    \    let baseStringLength16 = baseStringLength15 * baseStringLength\n    let baseStringLength17\
    \ = baseStringLength16 * baseStringLength\n    let baseStringLength18 = baseStringLength17\
    \ * baseStringLength\n    let baseStringLength19 = baseStringLength18 * baseStringLength\n\
    \    let baseStringLength20 = baseStringLength19 * baseStringLength\n    let baseStringLength21\
    \ = baseStringLength20 * baseStringLength\n    let baseStringLength22 = baseStringLength21\
    \ * baseStringLength\n    let baseStringLength23 = baseStringLength22 * baseStringLength\n\
    \    let baseStringLength24 = baseStringLength23 * baseStringLength\n    let baseStringLength25\
    \ = baseStringLength24 * baseStringLength\n    let baseStringLength26 = baseStringLength25\
    \ * baseStringLength\n    let baseStringLength27 = baseStringLength26 * baseStringLength\n\
    \    let baseStringLength28 = baseStringLength27 * baseStringLength\n    let baseStringLength29\
    \ = baseStringLength28 * baseStringLength\n    let baseStringLength30 = baseStringLength29\
    \ * baseStringLength\n    let baseStringLength31 = baseStringLength30 * baseStringLength\n\
    \    let baseStringLength32 = baseStringLength31 * baseStringLength\n    let ",
  "    var result = \"\"\n    var remainder = x % base\n    while remainder != 0 {\n\
    \        result = String(remainder) + result\n        remainder = x % base\n \
    \       x /= base\n    }\n    return String(result)", "    let bases = [\"\",\
    \ \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]\n    return\
    \ String(Int(x) / Int(base))", "    var result = \"\"\n    var remainder = x %\
    \ base\n    if remainder == 0 {\n        return String(Int(x))\n    }\n    while\
    \ remainder > 0 {\n        result = String(Int(remainder) + base) + result\n \
    \       remainder = x % base\n        x /= base\n    }\n    return String(Int(x))\
    \ + result", "    let bases = [\"\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\"\
    , \"6\", \"7\", \"8\", \"9\"]\n    let basesLen = bases.count\n    let baseIndex\
    \ = bases.index(base)!\n    let baseDigit = bases[baseIndex]\n    let digits =\
    \ x.toInt()\n    var result: String = \"\"\n    for digit in digits {\n      \
    \  let digitString = String(digit)\n        let digitIndex = digitString.index(digitString)\n\
    \        let digitValue = digitString[digitIndex..<digitString.endIndex]\n   \
    \     let newDigitValue = digitValue + baseDigit\n        result = result + newDigitValue\n\
    \    }\n    return result", "    let baseNum = pow(base, Int(log10(x))) + 1\n\
    \    let numStr = String(format: \"%0*d\", baseNum, x)\n    return numStr", " \
    \   if base < 2 {\n        return String(x)\n    }\n    var result = \"\"\n  \
    \  var remainder = x\n    var divisor = base\n    while remainder > 0 {\n    \
    \    remainder, remainder = remainder / divisor, base\n        divisor *= base\n\
    \    }\n    while divisor > 0 {\n        result = String(remainder) + result\n\
    \        divisor--\n    }\n    return result", "    var result = \"\"\n    var\
    \ remainder = 0\n    var quotient = 0\n    var quotientString = \"\"\n    var\
    \ remainderString = \"\"\n    var quotientStringLen = 0\n    var remainderStringLen\
    \ = 0\n    var quotientStringLen2 = 0\n    var remainderStringLen2 = 0\n    var\
    \ quotientStringLen3 = 0\n    var remainderStringLen3 = 0\n    var quotientStringLen4\
    \ = 0\n    var remainderStringLen4 = 0\n    var quotientStringLen5 = 0\n    var\
    \ remainderStringLen5 = 0\n    var quotientStringLen6 = 0\n    var remainderStringLen6\
    \ = 0\n    var quotientStringLen7 = 0\n    var remainderStringLen7 = 0\n    var\
    \ quotientStringLen8 = 0\n    var remainderStringLen8 = 0\n    var quotientStringLen9\
    \ = 0\n    var remainderStringLen9 = 0\n    var quotientStringLen10 = 0\n    var\
    \ remainderStringLen10 = 0\n    var quotientStringLen11 = 0\n    var remainderStringLen11\
    \ = 0\n    var quotientStringLen12 = 0\n    var remainderStringLen12 = 0\n   \
    \ var quotientStringLen13 = 0\n    var remainderStringLen13 = 0\n    var quotientStringLen14\
    \ = 0\n    var remainderStringLen14 = 0\n    var quotientStringLen15 = 0\n   \
    \ var remainderStringLen15 = 0\n    var quotientStringLen16 = 0\n    var remainderStringLen16\
    \ = 0\n    var quotientStringLen17 = 0\n    var remainderStringLen17 = 0\n   \
    \ var quotientStringLen18 = 0\n    var remainderStringLen18 = 0\n    var quotientStringLen19\
    \ = 0\n    var remainderStringLen19 = 0\n    var quotientStringLen20 = 0\n   \
    \ var remainderStringLen20 = 0\n    var quotientStringLen21 = 0\n    var remainderStringLen21\
    \ = 0\n    var quotientStringLen22 = 0\n    var remainderStringLen22 = 0\n   \
    \ var quotientStringLen23 = 0\n    var remainderStringLen23 = 0\n    var quotientStringLen24\
    \ = 0\n    var remainderStringLen24 = 0\n    var quotientStringLen25 = 0\n   \
    \ var remainderStringLen25 = 0\n    var quotientStringLen26 = 0\n    var remainderStringLen26\
    \ = 0\n    var quotientStringLen27 = 0\n    var remainderStringLen27 = 0\n   \
    \ var quotientStringLen28 = 0\n    var remainderStringLen28 = 0\n    var quotientStringLen29\
    \ = 0\n    var remainderStringLen29 = 0\n    var quotientStringLen30 = 0\n   \
    \ var remainderStringLen30 = 0\n    var quotientStringLen31 = 0\n", "    var result\
    \ = \"\"\n    var remainder = x % base\n    while remainder != 0 {\n        result\
    \ = String(remainder) + result\n        remainder = x % base\n    }\n    if base\
    \ < 10 {\n        result = String(base) + result\n    }\n    return result", " \
    \   let baseDigit = String((base - 1))\n    let digits = x.toString(baseDigit)\n\
    \    return digits", '    let bases = ["", "K", "M", "B", "T", "Qa", "Qi", "Qo",
    "Qu", "Ra", "Ri", "Ro", "Ru", "Rh", "D", "C", "B", "A", "N", "Q", "K", "M", "B",
    "T", "Qa", "Qi", "Qo", "Qu", "Ra", "Ri", "Ro", "Ru", "Rh", "D", "C", "B", "A",
    "N", "Q", "K", "M", "B", "T", "Qa", "Qi", "Qo", "Qu", "Ra", "Ri", "Ro", "Ru",
    "Rh", "D", "C", "B", "A", "N", "Q", "K", "M", "B", "T", "Qa", "Qi", "Qo", "Qu",
    "Ra", "Ri", "Ro", "Ru", "Rh", "D", "C", "B", "A", "N", "Q", "K", "M", "B", "T",
    "Qa", "Qi", "Qo", "Qu", "Ra", "Ri", "Ro", "Ru", "Rh", "D", "C", "B", "A", "N",
    "Q", "K", "M", "B", "T", "Qa", "Qi", "Qo", "Qu", "Ra", "Ri", "Ro", "Ru", "Rh",
    "D", "C", "B", "A", "N", "Q", "K", "M", "B", "T", "Qa", "Qi", "Qo", "Qu", "Ra",
    "Ri", "Ro", "Ru", "Rh", "D", "C", "B", "A", "N", "Q", "K", "M", "B", "T", "Qa",
    "Qi", "Qo", "Qu", "Ra", "Ri", "Ro", "Ru", "Rh", "D", "C", "B", "A", "N", "Q",
    "K", "M", "B", "T", "Qa", "Qi", "Qo", "Qu", "Ra", "Ri", "Ro", "Ru", "Rh", "D",
    "C", "B", "A", "N", "Q", "K", "M", "B", "T", "Qa", "Qi", "Qo", "Qu", "Ra", "Ri",
    "Ro", "Ru", "Rh", "D", "C", "B", "A", "N", "Q", "K", "M", "B", "T", "Qa", "Qi",
    "Qo", "Qu", "Ra", "Ri", "Ro", "Ru", "Rh", "D", "C", "B", "A", "N", "Q", "K", "M",
    "B", "T", "Qa", "Qi", "Qo", "Qu", "Ra", "Ri", "Ro", "Ru", "Rh", "D", "C", "B",
    "A", "N", "Q", "K", "M", "B", "T", "Qa", "Qi", "Qo", "Qu", "Ra", "Ri", "Ro", "Ru",
    "Rh", "D", "C", "B", "A", "N", "Q", "', "    let bases = StringBuffer(\"\")\n\
    \    var remainder = x\n    var remainderBase = base\n    while remainder > 0\
    \ {\n        remainderBase *= base\n        remainder -= 1\n    }\n    while remainderBase\
    \ > 0 {\n        remainder *= base\n        remainderBase -= 1\n    }\n    bases.reverse()\n\
    \    return String(remainder)", "    var result = \"\"\n    var remainder: Int\n\
    \    var quotient: Int\n\n    if base < 2 {\n        return \"\"\n    }\n\n  \
    \  if base == 2 {\n        result = String(format: \"%0*d\", 2, x)\n        return\
    \ String(result)\n    }\n\n    if base == 10 {\n        result = String(format:\
    \ \"%0*d\", 2, x)\n        return String(result)\n    }\n\n    remainder = x %\
    \ base\n    quotient = x / base\n\n    if quotient == 0 {\n        return \"\"\
    \n    }\n\n    if quotient == 1 {\n        result = String(format: \"%0*d\", base,\
    \ x)\n        return String(result)\n    }\n\n    if quotient == 2 {\n       \
    \ result = String(format: \"%0*d\", base, x)\n        return String(result)\n\
    \    }\n\n    if quotient == 3 {\n        result = String(format: \"%0*d\", base,\
    \ x)\n        return String(result)\n    }\n\n    if quotient == 4 {\n       \
    \ result = String(format: \"%0*d\", base, x)\n        return String(result)\n\
    \    }\n\n    if quotient == 5 {\n        result = String(format: \"%0*d\", base,\
    \ x)\n        return String(result)\n    }\n\n    if quotient == 6 {\n       \
    \ result = String(format: \"%0*d\", base, x)\n        return String(result)\n\
    \    }\n\n    if quotient == 7 {\n        result = String(format: \"%0*d\", base,\
    \ x)\n        return String(result)\n    }\n\n    if quotient == 8 {\n       \
    \ result = String(format: \"%0*d\", base, x)\n        return String(result)\n\
    \    }\n\n    if quotient == 9 {\n        result = String(format: \"%0*d\", base,\
    \ x)\n        return String(result)\n    }\n\n    if quotient == 10 {\n      \
    \  result = String(format: \"%0*d\", base, x)\n        return String(result)\n\
    \    }\n\n    if quotient == 11 {\n        result = String(format: \"%0*d\", base,\
    \ x)\n        return String(result)\n    }\n\n    if quotient == 12 {\n      \
    \  result = String(format: \"%0*d\", base, x)\n        return String(result)\n\
    \    }\n\n    if quotient == 13 {\n        result = String(format: \"%0*d\", base,\
    \ x)\n        return String(result)\n    }\n\n    if quotient == 14 {\n      \
    \  result = String(format: \"%0*d\", base, x)\n        return String(result)\n\
    \    }\n\n    if quotient == 15 {\n        result = String(format: \"%0*d\", base,\
    \ x)\n        return String(result)\n    }\n\n    if quotient == 16 {\n      \
    \  result = String(format: \"%0*d\", base, x)\n        return String(result)\n\
    \    }\n\n    if quotient == 17 {\n        result = String(format: \"%0*d\", base,\
    \ x)\n        return String(result)\n    }\n\n    if quotient == 18 {\n      \
    \  result = String(format: \"%", '    let bases = ["", "0", "1", "2", "3", "4",
    "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18",
    "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31",
    "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44",
    "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57",
    "58", "59", "60", "61", "62", "63", "64", "65", "66", "67", "68", "69", "70",
    "71", "72", "73", "74", "75", "76", "77", "78", "79", "80", "81", "82", "83",
    "84", "85", "86", "87", "88", "89", "90", "91", "92", "93", "94", "95", "96",
    "97", "98", "99", "100", "101", "102", "103", "104", "105", "106", "107", "108",
    "109", "110", "111", "112", "113", "114", "115", "116", "117", "118", "119", "120",
    "121", "122", "123", "124", "125", "126", "127", "128", "129", "130", "131", "132",
    "133", "134", "135", "136", "137", "138", "139", "140", "141", "142", "143", "144",
    "145", "146", "147", "148", "149", "150", "151", "152", "153", "154", "155", "156",
    "157", "158", "159", "160", "161", "162", "163", "164", "165", "166", "167", "168",
    "169", "170", "171", "172", "173", "174", "175", "176", "177", "178", "179", "180",
    "181", "182", "183", "184", "185", "186", "187", "188", "189", "190", "191", "192",
    "193", "194", "195", "196", "197", "198", "199", "200", "201", "202", "203", "204",
    "205", "206", "207", "208", "209", "210", "211", "212", "213", "214", "215", "216",
    "217", "218", "219", "220", "221", "222", "223", "224", "225", "226", "227", "228",
    "229", "230", "231", "232", "233", "234", "235", "236", "237", "238", "239", "240",
    "241", "242", "243", "244", "245", "246", "247", "248", "249", "250", "251", "252",
    "253", "254", "255', "    let baseDigits = baseDigits(base)\n    var result =\
    \ \"\"\n    var remainder = x\n    for digit in baseDigits {\n        if remainder\
    \ < 10 {\n            result += String(remainder)\n            remainder = 0\n\
    \        } else {\n            result += String(digit)\n            remainder\
    \ -= 10\n        }\n    }\n    if remainder > 0 {\n        result += String(remainder)\n\
    \    }\n    return result", "    var result = \"\"\n    var remainder = x % base\n\
    \    while remainder != 0 {\n        result = String(remainder) + result\n   \
    \     remainder = x % base\n    }\n    return String(base)", "    let baseDigits\
    \ = base.digits\n    var result = \"\"\n    var remainder = x % base\n    while\
    \ remainder > 0 {\n        result = String(remainder) + result\n        remainder\
    \ = remainder / base\n    }\n    result = String(remainder) + result\n    return\
    \ String(result)", "    let bases = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\",\
    \ \"E\", \"Z\", \"Y\"]\n    let baseIndex = bases.index(base)!\n    let x = x.toInt()\n\
    \    let result = String(Int(x) / Int(base))\n    return bases[baseIndex] + result",
  "    let digits = x.toInt()\n    let result = \"\"\n    var remainder = digits\n\
    \    while remainder > 0 {\n        let remainderDigit = remainder % base\n  \
    \      remainder = remainder / base\n        result = String(remainderDigit +\
    \ result) ?? \"\"\n    }\n    return result", "    var result = \"\"\n    var\
    \ remainder = x % base\n    while remainder != 0 {\n        result = String(remainder)\
    \ + result\n        remainder = x % base\n        x /= base\n    }\n    return\
    \ String(result)", "    let bases = [\"\", \"0\", \"1\", \"2\", \"3\", \"4\",\
    \ \"5\", \"6\", \"7\", \"8\", \"9\"]\n    let basesLen = bases.count\n    let\
    \ baseIndex = bases.firstIndex(of: base)!\n    let baseString = bases[baseIndex]\n\
    \    let baseStringLen = baseString.count\n    let baseStringIndex = baseString.firstIndex(of:\
    \ x)!\n    let baseStringSubstring = baseString[baseStringIndex..<baseStringIndex\
    \ + baseStringLen]\n    return baseStringSubstring", "    var result = \"\"\n\
    \    var remainder = x % base\n    while remainder != 0 {\n        result = String(remainder)\
    \ + result\n        remainder = x % base\n    }\n    return String(base)", " \
    \   if base < 2 {\n        return \"\"\n    }\n    var result = \"\"\n    var\
    \ remainder = x % base\n    for _ in 0..<base {\n        if remainder > 0 {\n\
    \            result += String(remainder)\n            remainder = remainder /\
    \ base\n        } else {\n            remainder = 0\n        }\n    }\n    if\
    \ remainder > 0 {\n        result += String(remainder)\n    }\n    return result",
  "    let bases = [\n        \"0\",\n        \"1\",\n        \"2\",\n        \"3\"\
    ,\n        \"4\",\n        \"5\",\n        \"6\",\n        \"7\",\n        \"\
    8\",\n        \"9\",\n        \"10\",\n        \"11\",\n        \"12\",\n    \
    \    \"13\",\n        \"14\",\n        \"15\",\n        \"16\",\n        \"17\"\
    ,\n        \"18\",\n        \"19\",\n        \"20\",\n        \"21\",\n      \
    \  \"22\",\n        \"23\",\n        \"24\",\n        \"25\",\n        \"26\"\
    ,\n        \"27\",\n        \"28\",\n        \"29\",\n        \"30\",\n      \
    \  \"31\"\n    ]\n    let basesLen = bases.count\n    let basesLen2 = basesLen\
    \ / 2\n    let basesLen3 = basesLen / 3\n    let basesLen4 = basesLen / 4\n  \
    \  let basesLen5 = basesLen / 5\n    let basesLen6 = basesLen / 6\n    let basesLen7\
    \ = basesLen / 7\n    let basesLen8 = basesLen / 8\n    let basesLen9 = basesLen\
    \ / 9\n    let basesLen10 = basesLen / 10\n    let basesLen11 = basesLen / 11\n\
    \    let basesLen12 = basesLen / 12\n    let basesLen13 = basesLen / 13\n    let\
    \ basesLen14 = basesLen / 14\n    let basesLen15 = basesLen / 15\n    let basesLen16\
    \ = basesLen / 16\n    let basesLen17 = basesLen / 17\n    let basesLen18 = basesLen\
    \ / 18\n    let basesLen19 = basesLen / 19\n    let basesLen20 = basesLen / 20\n\
    \    let basesLen21 = basesLen / 21\n    let basesLen22 = basesLen / 22\n    let\
    \ basesLen23 = basesLen / 23\n    let basesLen24 = basesLen / 24\n    let basesLen25\
    \ = basesLen / 25\n    let basesLen26 = basesLen / 26\n    let basesLen27 = basesLen\
    \ / 27\n    let basesLen28 = basesLen / 28\n    let basesLen29 = basesLen / 29\n\
    \    let basesLen30 = basesLen / 30\n    let basesLen31 = basesLen / 31\n    let\
    \ basesLen32 = basesLen / 32\n    let basesLen33 = basesLen / 33\n    let basesLen34\
    \ = base", "    var result = \"\"\n    var remainder = x % base\n    while remainder\
    \ != 0 {\n        result = String(remainder) + result\n        remainder = x %\
    \ base\n        x /= base\n    }\n    return String(result)", "    let bases =\
    \ [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"]\n    let baseIndex\
    \ = bases.firstIndex(of: base)!\n    let result = String(x)\n    if baseIndex\
    \ < 0 {\n        return \"\"\n    }\n    let remainder = x % base\n    let quotient\
    \ = x / base\n    if quotient > 0 {\n        return change_base(quotient, base:\
    \ bases[baseIndex])\n    } else {\n        return change_base(remainder, base:\
    \ bases[baseIndex])\n    }", "    let baseNum = pow(base, Int(log10(x))) + 1\n\
    \    let baseString = String(baseNum)\n    let baseStringLength = baseString.count\n\
    \    let newBase = pow(base, Int(log10(x))) + 1\n    let newBaseString = String(newBase)\n\
    \    let newBaseStringLength = newBaseString.count\n    if baseStringLength <\
    \ newBaseStringLength {\n        return String(format: \"%0\" + newBaseStringLength\
    \ + \"d\", x)\n    } else {\n        return String(format: \"%0\" + baseStringLength\
    \ + \"d\", x)\n    }", "    if base < 10 {\n        return String(format: \"%0\"\
    \ + String(base) + \"d\", x)\n    }\n    return String(format: \"%0\" + String(base)\
    \ + \"x\", x)", "    let bases = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"\
    E\", \"Z\", \"Y\"]\n    var result = \"\"\n    var remainder = x\n    for _ in\
    \ 0..<base {\n        remainder = remainder / base\n        result = bases[remainder]\
    \ + result\n    }\n    return result", "    if base < 2 {\n        return \"\"\
    \n    }\n    var result = \"\"\n    var remainder = x\n    var divisor = base\n\
    \    while remainder > 0 {\n        var quotient = remainder / divisor\n     \
    \   remainder = remainder % divisor\n        result = String(quotient) + result\n\
    \        divisor *= base\n    }\n    return result", "    var result = \"\"\n\
    \    var remainder = x % base\n    while remainder != 0 {\n        result = String(remainder)\
    \ + result\n        remainder = x % base\n        x /= base\n    }\n    return\
    \ String(result)", "    let digits = x.toString(base).reversed()\n    return digits.reverse().reduce(\"\
    \") { $0 + String($1) + String($2) }", "    let base10 = 10\n    let base16 =\
    \ 16\n    let base26 = 26\n    let base32 = 32\n    let base36 = 36\n    let base42\
    \ = 42\n    let base48 = 48\n    let base56 = 56\n    let base62 = 62\n    let\
    \ base68 = 68\n    let base76 = 76\n    let base82 = 82\n    let base88 = 88\n\
    \    let base96 = 96\n    let base102 = 102\n    let base108 = 108\n    let base112\
    \ = 112\n    let base116 = 116\n    let base122 = 122\n    let base128 = 128\n\
    \    let base136 = 136\n    let base144 = 144\n    let base152 = 152\n    let\
    \ base158 = 158\n    let base162 = 162\n    let base168 = 168\n    let base176\
    \ = 176\n    let base184 = 184\n    let base192 = 192\n    let base198 = 198\n\
    \    let base206 = 206\n    let base212 = 212\n    let base218 = 218\n    let\
    \ base226 = 226\n    let base232 = 232\n    let base238 = 238\n    let base246\
    \ = 246\n    let base252 = 252\n    let base258 = 258\n    let base262 = 262\n\
    \    let base268 = 268\n    let base276 = 276\n    let base284 = 284\n    let\
    \ base292 = 292\n    let base298 = 299\n    let base306 = 306\n    let base312\
    \ = 312\n    let base318 = 318\n    let base326 = 326\n    let base332 = 332\n\
    \    let base338 = 338\n    let base346 = 346\n    let base352 = 352\n    let\
    \ base358 = 358\n    let base362 = 362\n    let base368 = 368\n    let base376\
    \ = 376\n    let base384 = 384\n    let base392 = 392\n    let base398 = 398\n\
    \    let base406 = 406\n    let base412 = 412\n    let base418 = 418\n    let\
    \ base426 = 426\n    let base432 = 432\n    let base438 = 438\n    let base446\
    \ = 446\n    let base452 = 452\n    let base458 = 458\n    let base466 = 466\n\
    \    let base472 = 472\n    let base478 = 478\n    let base484 = 484\n    let\
    \ base492 = 492\n    let base498 = 498\n    let base506 = 506\n    let base512\
    \ = 512\n    let base518 = 518\n    let base526 = 526\n    let base532 = 532\n\
    \    let base538 = 538\n    let base546 = ", "    var result = \"\"\n    var remainder\
    \ = x % base\n    while remainder != 0 {\n        result = String(remainder) +\
    \ result\n        remainder = x % base\n    }\n    return result", "    let baseStr\
    \ = String(base)\n    let baseInt = Int(baseStr)\n    let baseInt = Int(baseStr)\n\
    \    let baseInt = Int(baseStr)\n    let baseInt = Int(baseStr)\n    let baseInt\
    \ = Int(baseStr)\n    let baseInt = Int(baseStr)\n    let baseInt = Int(baseStr)\n\
    \    let baseInt = Int(baseStr)\n    let baseInt = Int(baseStr)\n    let baseInt\
    \ = Int(baseStr)\n    let baseInt = Int(baseStr)\n    let baseInt = Int(baseStr)\n\
    \    let baseInt = Int(baseStr)\n    let baseInt = Int(baseStr)\n    let baseInt\
    \ = Int(baseStr)\n    let baseInt = Int(baseStr)\n    let baseInt = Int(baseStr)\n\
    \    let baseInt = Int(baseStr)\n    let baseInt = Int(baseStr)\n    let baseInt\
    \ = Int(baseStr)\n    let baseInt = Int(baseStr)\n    let baseInt = Int(baseStr)\n\
    \    let baseInt = Int(baseStr)\n    let baseInt = Int(baseStr)\n    let baseInt\
    \ = Int(baseStr)\n    let baseInt = Int(baseStr)\n    let baseInt = Int(baseStr)\n\
    \    let baseInt = Int(baseStr)\n    let baseInt = Int(baseStr)\n    let baseInt\
    \ = Int(baseStr)\n    let baseInt = Int(baseStr)\n    let baseInt = Int(baseStr)\n\
    \    let baseInt = Int(baseStr)\n    let baseInt = Int(baseStr)\n    let baseInt\
    \ = Int(baseStr)\n    let baseInt = Int(baseStr)\n    let baseInt = Int(baseStr)\n\
    \    let baseInt = Int(baseStr)\n    let baseInt = Int(baseStr)\n    let baseInt\
    \ = Int(baseStr)\n    let baseInt = Int(baseStr)\n    let baseInt = Int(baseStr)\n\
    \    let baseInt = Int(baseStr)\n    let baseInt = Int(baseStr)\n    let baseInt\
    \ = Int(baseStr)\n    let baseInt = Int(baseStr)\n    let baseInt = Int(baseStr)\n\
    \    let baseInt = Int(baseStr)\n    let baseInt = Int(baseStr)\n    let baseInt\
    \ = Int(baseStr)\n    let baseInt = Int(baseStr)\n    let baseInt = Int(baseStr)\n\
    \    let baseInt = Int(baseStr)\n    let baseInt = Int(baseStr)\n    let baseInt\
    \ = Int(baseStr)\n    let baseInt = Int(baseStr)\n    let base", "    var result\
    \ = \"\"\n    var remainder = x % base\n    while remainder != 0 {\n        result\
    \ = String(remainder) + result\n        remainder = x % base\n        x /= base\n\
    \    }\n    return String(result)", "    var result = \"\"\n    var remainder\
    \ = x % base\n    while remainder != 0 {\n        result = String(remainder) +\
    \ result\n        remainder = x % base\n        x /= base\n    }\n    return String(result)",
  "    let baseChar = String(base)\n    let baseCharArray = baseChar.unicodeScalars\n\
    \    let baseCharArrayCount = baseCharArray.count\n    var result: String = String()\n\
    \    var remainder: Int = 0\n    var remainderChar: Character?\n    var remainderCharArray:\
    \ [Character?] = []\n    var remainderCharArrayCount = 0\n    var remainderCharArrayIndex\
    \ = 0\n    var remainderCharArrayIndexCount = 0\n    var remainderCharArrayIndexCountMax\
    \ = baseCharArrayCount - 1\n    var remainderCharArrayIndexCountMin = 0\n    var\
    \ remainderCharArrayIndexCountMaxMin = 0\n    var remainderCharArrayIndexCountMinMax\
    \ = 0\n    var remainderCharArrayIndexCountMaxMinMax = 0\n    var remainderCharArrayIndexCountMinMaxMax\
    \ = 0\n    var remainderCharArrayIndexCountMinMaxMax = 0\n    var remainderCharArrayIndexCountMinMaxMax\
    \ = 0\n    var remainderCharArrayIndexCountMinMaxMax = 0\n    var remainderCharArrayIndexCountMinMaxMax\
    \ = 0\n    var remainderCharArrayIndexCountMinMaxMax = 0\n    var remainderCharArrayIndexCountMinMaxMax\
    \ = 0\n    var remainderCharArrayIndexCountMinMaxMax = 0\n    var remainderCharArrayIndexCountMinMaxMax\
    \ = 0\n    var remainderCharArrayIndexCountMinMaxMax = 0\n    var remainderCharArrayIndexCountMinMaxMax\
    \ = 0\n    var remainderCharArrayIndexCountMinMaxMax = 0\n    var remainderCharArrayIndexCountMinMaxMax\
    \ = 0\n    var remainderCharArrayIndexCountMinMaxMax = 0\n    var remainderCharArrayIndexCountMinMaxMax\
    \ = 0\n    var remainderCharArrayIndexCountMinMaxMax = 0\n    var remainderCharArrayIndexCountMinMaxMax\
    \ = 0\n    var remainderCharArrayIndexCountMinMaxMax = 0\n    var remainderCharArrayIndexCountMinMaxMax\
    \ = 0\n    var remainderCharArrayIndexCountMinMaxMax = 0\n    var remainderCharArrayIndexCountMinMaxMax\
    \ = 0\n    var remainderCharArrayIndexCountMinMaxMax = 0\n    var remainderCharArrayIndexCountMinMaxMax\
    \ = 0\n    var remainderCharArrayIndexCountMinMaxMax = 0\n    var remainderCharArrayIndexCountMinMaxMax\
    \ = 0\n    var remainderCharArrayIndexCountMinMaxMax = 0\n    var remainderCharArrayIndexCountMinMaxMax\
    \ = 0\n    var remainderCharArrayIndexCountMinMaxMax = 0\n    var remainderCharArrayIndexCountMinMaxMax\
    \ = 0\n    var remainderCharArrayIndexCountMinMaxMax = 0\n    var remainderCharArrayIndexCount",
  "    var result = \"\"\n    var remainder = x\n    var quotient = base\n    while\
    \ quotient > 0 {\n        remainder, remainder = remainder / quotient, quotient\
    \ % quotient\n        result = String(remainder) + result\n    }\n    return String(quotient)\
    \ + result", "    var result = \"\"\n    var remainder = x % base\n    while remainder\
    \ != 0 {\n        result = String(remainder) + result\n        remainder = x %\
    \ base\n    }\n    return result", "    if base < 2 {\n        return String(x)\n\
    \    }\n    var result = \"\"\n    var remainder = x\n    var quotient = base\n\
    \    while quotient > 0 {\n        remainder, remainder = remainder / base, quotient\
    \ -= 1\n        result += String(remainder)\n    }\n    return result", "    let\
    \ bases = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    if bases.contains(base) {\n       \
    \ return x.toString(base)\n    }\n    return \"\"", "    var result = \"\"\n \
    \   var remainder = x % base\n    if remainder == 0 {\n        return x.toString(base)\n\
    \    }\n    while remainder > 0 {\n        result = String(remainder) + result\n\
    \        remainder = x % base\n        x /= base\n    }\n    return result", " \
    \   let digits = x.toInt()\n    let baseDigits = base.toInt()\n    var result\
    \ = \"\"\n    for digit in digits {\n        let index = digit.truncatingRemainder(dividingBy:\
    \ baseDigits)\n        result = String(digits[index])\n    }\n    return result",
  "    let bases = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"]\n\
    \    let baseIndex = bases.count\n    let baseIndex = baseIndex.min(base)\n  \
    \  let baseIndex = baseIndex.max(10)\n    let baseIndex = baseIndex.min(10)\n\
    \    let baseIndex = baseIndex.max(bases.count)\n    let baseIndex = baseIndex.min(10)\n\
    \    let baseIndex = baseIndex.max(bases.count)\n    let baseIndex = baseIndex.min(10)\n\
    \    let baseIndex = baseIndex.max(bases.count)\n    let baseIndex = baseIndex.min(10)\n\
    \    let baseIndex = baseIndex.max(bases.count)\n    let baseIndex = baseIndex.min(10)\n\
    \    let baseIndex = baseIndex.max(bases.count)\n    let baseIndex = baseIndex.min(10)\n\
    \    let baseIndex = baseIndex.max(bases.count)\n    let baseIndex = baseIndex.min(10)\n\
    \    let baseIndex = baseIndex.max(bases.count)\n    let baseIndex = baseIndex.min(10)\n\
    \    let baseIndex = baseIndex.max(bases.count)\n    let baseIndex = baseIndex.min(10)\n\
    \    let baseIndex = baseIndex.max(bases.count)\n    let baseIndex = baseIndex.min(10)\n\
    \    let baseIndex = baseIndex.max(bases.count)\n    let baseIndex = baseIndex.min(10)\n\
    \    let baseIndex = baseIndex.max(bases.count)\n    let baseIndex = baseIndex.min(10)\n\
    \    let baseIndex = baseIndex.max(bases.count)\n    let baseIndex = baseIndex.min(10)\n\
    \    let baseIndex = baseIndex.max(bases.count)\n    let baseIndex = baseIndex.min(10)\n\
    \    let baseIndex = baseIndex.max(bases.count)\n    let baseIndex = baseIndex.min(10)\n\
    \    let baseIndex = baseIndex.max(bases.count)\n    let baseIndex = baseIndex.min(10)\n\
    \    let baseIndex = baseIndex.max(bases.count)\n    let baseIndex = baseIndex.min(10)\n\
    \    let baseIndex = baseIndex.max(bases.count)\n    let baseIndex = baseIndex.min(10)\n\
    \    let baseIndex = baseIndex.max(bases.count)\n    let baseIndex = baseIndex.min(10)\n\
    \    let baseIndex = baseIndex.max(bases.count)\n    let baseIndex = baseIndex.min(10)\n\
    \    let baseIndex = baseIndex.max(bases.count)\n    let baseIndex = baseIndex.min(10)\n\
    \    let baseIndex = baseIndex.max(bases.count)\n    let baseIndex = baseIndex.min(10)\n\
    \    let baseIndex = baseIndex.max(bases.count)\n    let baseIndex = baseIndex.min(10)\n\
    \    let baseIndex = baseIndex.max(bases.count)\n    let baseIndex = baseIndex.",
  "    var result = \"\"\n    var remainder = x % base\n    while remainder != 0 {\n\
    \        result = String(remainder) + result\n        remainder = x % base\n \
    \   }\n    return String(base)", "    if base < 10 {\n        return String(format:\
    \ \"%0\" + String(base) + \"d\", x)\n    }\n    return String(format: \"%0\" +\
    \ String(base) + \"x\", x)", "    let base10 = String(base)\n    let base16 =\
    \ String(base10)\n    let base16Upper = base16.uppercased()\n    let base16Lower\
    \ = base16.lowercased()\n    let base16Digits = base16Upper.unicodeScalars.map\
    \ { $0.value }\n    let base16DigitsUpper = base16Digits.map { String($0) }\n\
    \    let base16DigitsLower = base16Digits.map { String($0).lowercased() }\n  \
    \  let base16DigitsUpperLower = base16DigitsUpper.zip(base16DigitsLower).map {\n\
    \        $0.1 + $0.2 + $0.3 }\n    let base16DigitsUpperLowerString = base16DigitsUpperLower.map\
    \ { String($0) }\n    let base16DigitsUpperLowerStringString = base16DigitsUpperLowerString.map\
    \ { String($0) }\n    let base16DigitsUpperLowerStringStringString = base16DigitsUpperLowerStringString.map\
    \ { String($0) }\n    let base16DigitsUpperLowerStringStringStringString = base16DigitsUpperLowerStringStringString.map\
    \ { String($0) }\n    let base16DigitsUpperLowerStringStringStringStringString\
    \ = base16DigitsUpperLowerStringStringStringString.map { String($0) }\n    let\
    \ base16DigitsUpperLowerStringStringStringStringStringString = base16DigitsUpperLowerStringStringStringStringStringString.map\
    \ { String($0) }\n    let base16DigitsUpperLowerStringStringStringStringStringStringStringString\
    \ = base16DigitsUpperLowerStringStringStringStringStringStringStringStringString.map\
    \ { String($0) }\n    let base16DigitsUpperLowerStringStringStringStringStringStringStringStringStringString\
    \ = base16DigitsUpperLowerStringStringStringStringStringStringStringStringStringString.map\
    \ { String($0) }\n    let base16DigitsUpperLowerStringStringStringStringStringStringStringStringStringStringStringStringString\
    \ = base16DigitsUpperLowerStringStringStringStringStringStringStringStringStringStringStringStringString.map\
    \ { String($0) }\n    let base16DigitsUpperLowerStringStringStringStringStringStringStringStringStringStringStringStringStringStringString\
    \ = base16DigitsUpperLowerStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringString.map\
    \ { String($0) }\n    let base16DigitsUpperLowerStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringString\
    \ = base16DigitsUpperLowerStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringString.map\
    \ { String($", "    var result = \"\"\n    var remainder = x % base\n    while\
    \ remainder != 0 {\n        result = String(remainder) + result\n        remainder\
    \ = x % base\n        x /= base\n    }\n    return String(result)", "    var result\
    \ = \"\"\n    var remainder = x % base\n    while remainder > 0 {\n        result\
    \ = String(remainder) + result\n        remainder = x % base\n        x /= base\n\
    \    }\n    return String(base) + result", "    var result = \"\"\n    var remainder\
    \ = x % base\n    while remainder != 0 {\n        result = String(remainder) +\
    \ result\n        remainder = x % base\n        x /= base\n    }\n    return String(base)",
  "    let baseChars = baseChars(base)\n    var result = \"\"\n    var remainder =\
    \ x\n    for char in baseChars {\n        if remainder < 0 {\n            result\
    \ += \"-\"\n            remainder *= -1\n        }\n        result += char\n \
    \       remainder /= base\n    }\n    return result", "    var result = \"\"\n\
    \    var remainder = x % base\n    if remainder == 0 {\n        result = String(x\
    \ / base)\n    } else {\n        result = String(remainder) + String(x / base)\n\
    \    }\n    return result", "    let digits = x.toInt()\n    let digits_base =\
    \ digits.toInt()\n    let digits_base2 = digits_base * base\n    let digits_base3\
    \ = digits_base2 * base\n    let digits_base4 = digits_base3 * base\n    let digits_base5\
    \ = digits_base4 * base\n    let digits_base6 = digits_base5 * base\n    let digits_base7\
    \ = digits_base6 * base\n    let digits_base8 = digits_base7 * base\n    let digits_base9\
    \ = digits_base8 * base\n    let digits_base10 = digits_base9 * base\n    let\
    \ digits_base11 = digits_base10 * base\n    let digits_base12 = digits_base11\
    \ * base\n    let digits_base13 = digits_base12 * base\n    let digits_base14\
    \ = digits_base13 * base\n    let digits_base15 = digits_base14 * base\n    let\
    \ digits_base16 = digits_base15 * base\n    let digits_base17 = digits_base16\
    \ * base\n    let digits_base18 = digits_base17 * base\n    let digits_base19\
    \ = digits_base18 * base\n    let digits_base20 = digits_base19 * base\n    let\
    \ digits_base21 = digits_base20 * base\n    let digits_base22 = digits_base21\
    \ * base\n    let digits_base23 = digits_base22 * base\n    let digits_base24\
    \ = digits_base23 * base\n    let digits_base25 = digits_base24 * base\n    let\
    \ digits_base26 = digits_base25 * base\n    let digits_base27 = digits_base26\
    \ * base\n    let digits_base28 = digits_base27 * base\n    let digits_base29\
    \ = digits_base28 * base\n    let digits_base30 = digits_base29 * base\n    let\
    \ digits_base31 = digits_base30 * base\n    let digits_base32 = digits_base31\
    \ * base\n    let digits_base33 = digits_base32 * base\n    let digits_base34\
    \ = digits_base33 * base\n    let digits_base35 = digits_base34 * base\n    let\
    \ digits_base36 = digits_base35 * base\n    let digits_base37 = digits_base36\
    \ * base\n    let digits_base38 = digits_base37 * base\n    let digits_base39\
    \ = digits_base38 * base\n    let digits_base40 = digits_base39 * base\n    let\
    \ digits_base41 = ", "    var result = \"\"\n    var remainder = x % base\n  \
    \  while remainder != 0 {\n        result = String(remainder) + result\n     \
    \   remainder = x % base\n        x /= base\n    }\n    if x > 0 {\n        result\
    \ = String(base) + result\n    }\n    return result", "    let digits = x.toString(base).characters.map({\
    \ String($0) })\n    return digits.reverse().reduce(\"\") { $0 + String($1) +\
    \ String($2) }", "    let baseStr = String(base)\n    let baseInt = Int(baseStr)\n\
    \    let x = Int(x)\n    let result = Int(x) / baseInt\n    return String(result)",
  "    let digits = x.digits\n    var result = \"\"\n    for digit in digits {\n \
    \       let index = digit.index(of: base)\n        if index != nil {\n       \
    \     result += String(digit[index!])\n        } else {\n            result +=\
    \ String(digit)\n        }\n    }\n    return result", "    var result = \"\"\n\
    \    var remainder = x % base\n    if remainder == 0 {\n        return String(Int(x))\n\
    \    }\n    var quotient = x / base\n    while quotient > 0 {\n        result\
    \ = String(quotient) + result\n        remainder = remainder % base\n        quotient\
    \ = quotient / base\n    }\n    if remainder != 0 {\n        result = String(quotient)\
    \ + result\n    }\n    return result", "    var result = \"\"\n    var remainder\
    \ = x % base\n    if remainder == 0 {\n        result = String(x / base)\n   \
    \ } else {\n        result = String(remainder) + String(x / base)\n    }\n   \
    \ return result", "    var result = \"\"\n    var remainder = x % base\n    while\
    \ remainder != 0 {\n        result = String(remainder) + result\n        remainder\
    \ = x % base\n        x /= base\n    }\n    return String(result)", "    var result\
    \ = \"\"\n    var remainder = x % base\n    while remainder != 0 {\n        result\
    \ = String(remainder) + result\n        remainder = x % base\n        x /= base\n\
    \    }\n    return String(base)", "    var result = \"\"\n    var remainder =\
    \ x % base\n    while remainder != 0 {\n        result = String(remainder) + result\n\
    \        remainder = x % base\n        x /= base\n    }\n    return String(result)",
  "    let baseDigit = digits[base]\n    let digits = x.toString(radix: base)\n  \
    \  return String(digits[0..<baseDigit.count])", "    let bases = [\"\", \"0\"\
    , \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]\n    let baseIndex\
    \ = bases.index(base)!\n    let baseString = bases[baseIndex]\n    let result\
    \ = String(format: \"%0\" + String(base) + \"d\", x)\n    return baseString +\
    \ result", "    let bases = [\n        \"0\",\n        \"1\",\n        \"2\",\n\
    \        \"3\",\n        \"4\",\n        \"5\",\n        \"6\",\n        \"7\"\
    ,\n        \"8\",\n        \"9\",\n        \"10\",\n        \"11\",\n        \"\
    12\",\n        \"13\",\n        \"14\",\n        \"15\",\n        \"16\",\n  \
    \      \"17\",\n        \"18\",\n        \"19\",\n        \"20\",\n        \"\
    21\",\n        \"22\",\n        \"23\",\n        \"24\",\n        \"25\",\n  \
    \      \"26\",\n        \"27\",\n        \"28\",\n        \"29\",\n        \"\
    30\",\n        \"31\"\n    ]\n    let baseIndex = bases.index(base)\n    let baseString\
    \ = bases[baseIndex]\n    let result = String(format: \"%0\" + String((x - baseIndex)\
    \ * baseString.count) + \"d\", x)\n    return result", "    let base10 = 10\n\
    \    let base16 = 16\n    let base26 = 26\n    let base32 = 32\n    let base36\
    \ = 36\n    let base42 = 42\n    let base48 = 48\n    let base56 = 56\n    let\
    \ base62 = 62\n    let base68 = 68\n    let base76 = 76\n    let base84 = 84\n\
    \    let base92 = 92\n    let base100 = 100\n    let base108 = 108\n    let base116\
    \ = 116\n    let base124 = 124\n    let base132 = 132\n    let base140 = 140\n\
    \    let base148 = 148\n    let base156 = 156\n    let base162 = 162\n    let\
    \ base170 = 170\n    let base178 = 178\n    let base186 = 186\n    let base192\
    \ = 192\n    let base200 = 200\n    let base208 = 208\n    let base216 = 216\n\
    \    let base222 = 222\n    let base230 = 230\n    let base238 = 238\n    let\
    \ base246 = 246\n    let base252 = 252\n    let base258 = 258\n    let base264\
    \ = 264\n    let base272 = 272\n    let base280 = 280\n    let base288 = 288\n\
    \    let base296 = 296\n    let base304 = 304\n    let base312 = 312\n    let\
    \ base320 = 320\n    let base328 = 328\n    let base336 = 336\n    let base344\
    \ = 344\n    let base352 = 352\n    let base360 = 360\n    let base368 = 368\n\
    \    let base376 = 376\n    let base384 = 384\n    let base392 = 392\n    let\
    \ base400 = 400\n    let base408 = 408\n    let base416 = 416\n    let base422\
    \ = 422\n    let base430 = 430\n    let base438 = 438\n    let base446 = 446\n\
    \    let base452 = 452\n    let base458 = 458\n    let base464 = 464\n    let\
    \ base472 = 472\n    let base480 = 480\n    let base488 = 488\n    let base496\
    \ = 496\n    let base504 = 504\n    let base512 = 512\n    let base520 = 520\n\
    \    let base528 = 528\n    let base536 = 536\n    let base544 = 544\n    let\
    \ base552 = 552\n    let base558 = 560\n    let base566 = 566\n    let base574\
    \ = 574\n    let base582 = 582\n    let base590 = 590\n    let base598 = 598\n\
    \    let base606 = 606\n    let base614 = 614\n    let base622 = ", "    var result\
    \ = \"\"\n    var digits = \"\"\n    var power = 1\n    var remainder = 0\n  \
    \  var i = 0\n    for i = x.toInt(); i >= 0; i /= 10 {\n        digits += String(i\
    \ % base)\n        power = power * 10\n        remainder = i % base\n    }\n \
    \   if power > 0 {\n        digits += \"0\"\n    }\n    if remainder > 0 {\n \
    \       digits += String(remainder)\n    }\n    for i = x.toInt(); i >= 0; i /=\
    \ 10 {\n        digits += String(i % base)\n        power = power * 10\n     \
    \   remainder = i % base\n    }\n    if power > 0 {\n        digits += \"0\"\n\
    \    }\n    if remainder > 0 {\n        digits += String(remainder)\n    }\n \
    \   result = digits + result\n    return result", "    var result = \"\"\n   \
    \ var remainder = x % base\n    while remainder != 0 {\n        result = String(remainder)\
    \ + result\n        remainder = x % base\n        x /= base\n    }\n    return\
    \ String(result)", "    var result = \"\"\n    var remainder = x % base\n    while\
    \ remainder != 0 {\n        result = String(remainder) + result\n        remainder\
    \ = x % base\n    }\n    return String(base)", "    var result = \"\"\n    var\
    \ remainder = x\n    var digits = \"\"\n    var baseDigits = \"\"\n    var baseDigitCount\
    \ = 0\n    var baseDigitCountBase = 0\n    var baseDigitCountBase2 = 0\n    var\
    \ baseDigitCountBase3 = 0\n    var baseDigitCountBase4 = 0\n    var baseDigitCountBase5\
    \ = 0\n    var baseDigitCountBase6 = 0\n    var baseDigitCountBase7 = 0\n    var\
    \ baseDigitCountBase8 = 0\n    var baseDigitCountBase9 = 0\n    var baseDigitCountBase10\
    \ = 0\n    var baseDigitCountBase11 = 0\n    var baseDigitCountBase12 = 0\n  \
    \  var baseDigitCountBase13 = 0\n    var baseDigitCountBase14 = 0\n    var baseDigitCountBase15\
    \ = 0\n    var baseDigitCountBase16 = 0\n    var baseDigitCountBase17 = 0\n  \
    \  var baseDigitCountBase18 = 0\n    var baseDigitCountBase19 = 0\n    var baseDigitCountBase20\
    \ = 0\n    var baseDigitCountBase21 = 0\n    var baseDigitCountBase22 = 0\n  \
    \  var baseDigitCountBase23 = 0\n    var baseDigitCountBase24 = 0\n    var baseDigitCountBase25\
    \ = 0\n    var baseDigitCountBase26 = 0\n    var baseDigitCountBase27 = 0\n  \
    \  var baseDigitCountBase28 = 0\n    var baseDigitCountBase29 = 0\n    var baseDigitCountBase30\
    \ = 0\n    var baseDigitCountBase31 = 0\n    var baseDigitCountBase32 = 0\n  \
    \  var baseDigitCountBase33 = 0\n    var baseDigitCountBase34 = 0\n    var baseDigitCountBase35\
    \ = 0\n    var baseDigitCountBase36 = 0\n    var baseDigitCountBase37 = 0\n  \
    \  var baseDigitCountBase38 = 0\n    var baseDigitCountBase39 = 0\n    var baseDigitCountBase40\
    \ = 0\n    var baseDigitCountBase41 = 0\n    var baseDigitCountBase42 = 0\n  \
    \  var baseDigitCountBase43 = 0\n    var baseDigitCountBase44 = 0\n    var baseDigitCountBase45\
    \ = 0\n    var baseDigitCountBase46 = 0\n    var baseDigitCountBase47 = 0\n  \
    \  var baseDigitCountBase48 = 0\n    var baseDigitCountBase49 = 0\n    var baseDigitCountBase50\
    \ = 0\n    var baseDigitCountBase51 = 0\n    var baseDigitCountBase52 = 0\n  \
    \  var baseDigitCountBase53 = 0\n    var baseDigitCountBase54 = 0\n    var baseDigitCountBase55\
    \ = 0\n    var baseDigitCountBase56 = 0\n    var baseDigitCountBase57 = 0\n  \
    \  var baseDigitCountBase58 = 0\n    var baseDigitCountBase59 = 0\n    var baseDigitCountBase60\
    \ = 0\n    var baseDigitCountBase61 = 0", "    if base < 2 {\n        return \"\
    \"\n    }\n    if base == 10 {\n        return String(x)\n    }\n    var s = \"\
    \"\n    var remainder = x % base\n    for _ in 0..<(base - remainder) {\n    \
    \    s += \"0\"\n    }\n    s += String(remainder)\n    return s", "    if base\
    \ < 10 {\n        return String(format: \"%0\" + String(base) + \"d\", x)\n  \
    \  }\n    return String(format: \"%0\" + String(base) + \"x\", x)", "    var result\
    \ = \"\"\n    var remainder: Int\n    var quotient: Int\n    var remainderBase:\
    \ Int\n    var quotientBase: Int\n    var remainderBaseBase: Int\n    var quotientBaseBase:\
    \ Int\n    var remainderBaseBaseBase: Int\n    var quotientBaseBaseBase: Int\n\
    \    var remainderBaseBaseBaseBase: Int\n    var quotientBaseBaseBaseBase: Int\n\
    \    var remainderBaseBaseBaseBase: Int\n    var quotientBaseBaseBaseBase: Int\n\
    \    var remainderBaseBaseBaseBase: Int\n    var quotientBaseBaseBaseBase: Int\n\
    \    var remainderBaseBaseBaseBase: Int\n    var quotientBaseBaseBaseBase: Int\n\
    \    var remainderBaseBaseBaseBase: Int\n    var quotientBaseBaseBaseBase: Int\n\
    \    var remainderBaseBaseBaseBase: Int\n    var quotientBaseBaseBaseBase: Int\n\
    \    var remainderBaseBaseBaseBase: Int\n    var quotientBaseBaseBaseBase: Int\n\
    \    var remainderBaseBaseBaseBase: Int\n    var quotientBaseBaseBaseBase: Int\n\
    \    var remainderBaseBaseBaseBase: Int\n    var quotientBaseBaseBaseBase: Int\n\
    \    var remainderBaseBaseBaseBase: Int\n    var quotientBaseBaseBaseBase: Int\n\
    \    var remainderBaseBaseBaseBase: Int\n    var quotientBaseBaseBaseBase: Int\n\
    \    var remainderBaseBaseBaseBase: Int\n    var quotientBaseBaseBaseBase: Int\n\
    \    var remainderBaseBaseBaseBase: Int\n    var quotientBaseBaseBaseBase: Int\n\
    \    var remainderBaseBaseBaseBase: Int\n    var quotientBaseBaseBaseBase: Int\n\
    \    var remainderBaseBaseBaseBase: Int\n    var quotientBaseBaseBaseBase: Int\n\
    \    var remainderBaseBaseBaseBase: Int\n    var quotientBaseBaseBaseBase: Int\n\
    \    var remainderBaseBaseBaseBase: Int\n    var quotientBaseBaseBaseBase: Int\n\
    \    var remainderBaseBaseBaseBase: Int\n    var quotientBaseBaseBaseBase: Int\n\
    \    var remainderBaseBaseBaseBase: Int\n    var quotientBaseBaseBaseBase: Int\n\
    \    var remainderBaseBaseBaseBase: Int\n    var quotientBaseBaseBaseBase: Int\n\
    \    var remainderBaseBaseBaseBase: Int\n    var quotientBaseBaseBaseBase: Int\n\
    \    var remainderBaseBaseBaseBase: Int\n    var quotientBaseBaseBaseBase: Int\n\
    \    var remainderBaseBaseBaseBase: ", "    let base10 = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    let base16 = \"0123456789abcdefghijklmnopqrstuvwxyz\"\n    let base26 =\
    \ \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\n    let\
    \ base36 = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\
    \    let base62 = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\
    \n    let base62 = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\
    \n    let base62 = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\
    \n    let base62 = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\
    \n    let base62 = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\
    \n    let base62 = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\
    \n    let base62 = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\
    \n    let base62 = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\
    \n    let base62 = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\
    \n    let base62 = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklm",
  "    let base10 = Int(pow(base, Double(x)))\n    return String(base10)", "    let\
    \ bases = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"]\n   \
    \ let baseIndex = bases.index(base)!\n    let result = x.toInt().toString(base:\
    \ baseIndex)\n    return String(result)", "    let baseNum = pow(base, Int(log10(x)))\
    \ + 1\n    return String(format: \"%0*d\", baseNum, x)", "    var result = \"\"\
    \n    var remainder = x % base\n    var quotient = x / base\n    for _ in 0..<quotient\
    \ {\n        result = String(remainder) + result\n        remainder = remainder\
    \ % base\n    }\n    if remainder != 0 {\n        result = String(remainder) +\
    \ result\n    }\n    return result", "    let bases = [\n        \"0\",\n    \
    \    \"1\",\n        \"2\",\n        \"3\",\n        \"4\",\n        \"5\",\n\
    \        \"6\",\n        \"7\",\n        \"8\",\n        \"9\",\n        \"10\"\
    ,\n        \"11\",\n        \"12\",\n        \"13\",\n        \"14\",\n      \
    \  \"15\",\n        \"16\",\n        \"17\",\n        \"18\",\n        \"19\"\
    ,\n        \"20\",\n        \"21\",\n        \"22\",\n        \"23\",\n      \
    \  \"24\",\n        \"25\",\n        \"26\",\n        \"27\",\n        \"28\"\
    ,\n        \"29\",\n        \"30\",\n        \"31\"\n    ]\n    let baseIndex\
    \ = bases.index(base)!\n    let baseString = bases[baseIndex]\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = baseString.count\n    let baseStringLength = baseString.count\n    let baseStringLength\
    \ = base", "    let bases = [\n        \"0\",\n        \"1\",\n        \"2\",\n\
    \        \"3\",\n        \"4\",\n        \"5\",\n        \"6\",\n        \"7\"\
    ,\n        \"8\",\n        \"9\",\n        \"10\",\n        \"11\",\n        \"\
    12\",\n        \"13\",\n        \"14\",\n        \"15\",\n        \"16\",\n  \
    \      \"17\",\n        \"18\",\n        \"19\",\n        \"20\",\n        \"\
    21\",\n        \"22\",\n        \"23\",\n        \"24\",\n        \"25\",\n  \
    \      \"26\",\n        \"27\",\n        \"28\",\n        \"29\",\n        \"\
    30\",\n        \"31\"\n    ]\n    let baseIndex = bases.index(base)!\n    let\
    \ baseString = \"\\(bases[baseIndex])\"\n    let baseStringLength = baseString.count\n\
    \    let baseStringWithZeros = baseString.repeatElement(with: baseStringLength,\
    \ count: baseStringLength)\n    let baseStringWithZeros = baseStringWithZeros.dropLast()\n\
    \    let baseStringWithZeros = baseStringWithZeros.dropFirst()\n    let baseStringWithZeros\
    \ = baseStringWithZeros.dropLast()\n    let baseStringWithZeros = baseStringWithZeros.dropFirst()\n\
    \    let baseStringWithZeros = baseStringWithZeros.dropLast()\n    let baseStringWithZeros\
    \ = baseStringWithZeros.dropFirst()\n    let baseStringWithZeros = baseStringWithZeros.dropLast()\n\
    \    let baseStringWithZeros = baseStringWithZeros.dropFirst()\n    let baseStringWithZeros\
    \ = baseStringWithZeros.dropLast()\n    let baseStringWithZeros = baseStringWithZeros.dropFirst()\n\
    \    let baseStringWithZeros = baseStringWithZeros.dropLast()\n    let baseStringWithZeros\
    \ = baseStringWithZeros.dropFirst()\n    let baseStringWithZeros = baseStringWithZeros.dropLast()\n\
    \    let baseStringWithZeros = baseStringWithZeros.dropFirst()\n    let baseStringWithZeros\
    \ = baseStringWithZeros.dropLast()\n    let baseStringWithZeros = baseStringWithZeros.dropFirst()\n\
    \    let baseStringWithZeros = baseStringWithZeros.dropLast()\n    let baseStringWithZeros\
    \ = baseStringWithZeros.dropFirst()\n    let baseStringWithZeros = baseStringWithZeros.dropLast()\n\
    \    let baseStringWithZeros = baseStringWithZeros.dropFirst()\n    let baseStringWithZeros\
    \ = baseStringWithZeros.dropLast()\n    let baseString", "    var result = \"\"\
    \n    var remainder = x % base\n    while remainder != 0 {\n        result = String(remainder)\
    \ + result\n        remainder = x % base\n        x /= base\n    }\n    return\
    \ String(base)", "    var result = \"\"\n    var remainder = x % base\n    while\
    \ remainder != 0 {\n        result = String(remainder) + result\n        remainder\
    \ = x % base\n        x /= base\n    }\n    return String(result)", "    var result\
    \ = \"\"\n    var remainder = x % base\n    while remainder != 0 {\n        result\
    \ = String(remainder) + result\n        remainder = x % base\n        x /= base\n\
    \    }\n    return String(result)", "    if base < 10 {\n        return String(x)\n\
    \    }\n    var result = \"\"\n    var remainder = x % base\n    for _ in 0..<base\
    \ {\n        result = String(remainder) + result\n        remainder = remainder\
    \ / base\n    }\n    return result", "    var result = \"\"\n    var remainder\
    \ = x % base\n    while remainder != 0 {\n        result = String(remainder) +\
    \ result\n        remainder = x % base\n        x /= base\n    }\n    return String(result)",
  "    let bases = [\"\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\",\
    \ \"8\", \"9\"]\n    let basesLen = bases.count\n    let baseIndex = bases.index(base)!\n\
    \    let baseChar = bases[baseIndex]\n    let baseCharLen = baseChar.count\n \
    \   let baseCharIndex = baseChar.index(baseChar)!\n    let baseCharChar = baseChar[baseCharIndex]\n\
    \    let baseCharCharLen = baseCharChar.count\n    let baseCharCharIndex = baseCharChar.index(baseCharChar)!\n\
    \    let baseCharCharChar = baseCharChar[baseCharCharIndex]\n    let baseCharCharCharLen\
    \ = baseCharCharChar.count\n    let baseCharCharCharIndex = baseCharCharChar.index(baseCharCharChar)!\n\
    \    let baseCharCharCharChar = baseCharCharChar[baseCharCharCharIndex]\n    let\
    \ baseCharCharCharCharLen = baseCharCharCharChar.count\n    let baseCharCharCharCharIndex\
    \ = baseCharCharCharChar.index(baseCharCharCharChar)!\n    let baseCharCharCharCharChar\
    \ = baseCharCharCharChar[baseCharCharCharCharIndex]\n    let baseCharCharCharCharLen\
    \ = baseCharCharCharCharChar.count\n    let baseCharCharCharCharIndex = baseCharCharCharCharChar.index(baseCharCharCharCharChar)!\n\
    \    let baseCharCharCharCharChar = baseCharCharCharCharChar[baseCharCharCharCharCharIndex]\n\
    \    let baseCharCharCharCharCharLen = baseCharCharCharCharCharChar.count\n  \
    \  let baseCharCharCharCharIndex = baseCharCharCharCharCharChar.index(baseCharCharCharCharCharChar)!\n\
    \    let baseCharCharCharCharChar = baseCharCharCharCharCharChar[baseCharCharCharCharCharCharIndex]\n\
    \    let baseCharCharCharCharCharLen = baseCharCharCharCharCharCharChar.count\n\
    \    let baseCharCharCharCharCharIndex = baseCharCharCharCharCharCharChar.index(baseCharCharCharCharCharCharChar)!\n\
    \    let baseCharCharCharCharCharChar = baseCharCharCharCharCharChar[baseCharCharCharCharCharCharIndex]\n\
    \    let baseCharCharCharCharCharLen = baseCharCharCharCharCharCharChar.count\n\
    \    let baseCharCharCharCharIndex = baseCharCharCharCharCharCharChar.index(baseCharCharCharCharCharChar)!\n\
    \    let baseCharCharCharCharCharChar = baseCharCharCharCharCharChar[baseCharChar",
  "    let bases = String((0..<base).map { _ in \"0123456789ABCDEF\" })\n    let base_index\
    \ = bases.index(of: base)!\n    let base_rev = bases[base_index..<bases.endIndex].reversed()\n\
    \    let base_rev_str = base_rev.joinWithSeparator(\"\")\n    let base_rev_str\
    \ = base_rev_str.replacingOccurrences(of: \" \", with: \"\")\n    let base_rev_str\
    \ = base_rev_str.replacingOccurrences(of: \"-\", with: \"0\")\n    let base_rev_str\
    \ = base_rev_str.replacingOccurrences(of: \"+\", with: \"0\")\n    let base_rev_str\
    \ = base_rev_str.replacingOccurrences(of: \".\", with: \"\")\n    let base_rev_str\
    \ = base_rev_str.replacingOccurrences(of: \",\", with: \"\")\n    let base_rev_str\
    \ = base_rev_str.replacingOccurrences(of: \"'\", with: \"\")\n    let base_rev_str\
    \ = base_rev_str.replacingOccurrences(of: \"'\", with: \"\")\n    let base_rev_str\
    \ = base_rev_str.replacingOccurrences(of: \"0\", with: \"\")\n    let base_rev_str\
    \ = base_rev_str.replacingOccurrences(of: \"1\", with: \"1\")\n    let base_rev_str\
    \ = base_rev_str.replacingOccurrences(of: \"2\", with: \"2\")\n    let base_rev_str\
    \ = base_rev_str.replacingOccurrences(of: \"3\", with: \"3\")\n    let base_rev_str\
    \ = base_rev_str.replacingOccurrences(of: \"4\", with: \"4\")\n    let base_rev_str\
    \ = base_rev_str.replacingOccurrences(of: \"5\", with: \"5\")\n    let base_rev_str\
    \ = base_rev_str.replacingOccurrences(of: \"6\", with: \"6\")\n    let base_rev_str\
    \ = base_rev_str.replacingOccurrences(of: \"7\", with: \"7\")\n    let base_rev_str\
    \ = base_rev_str.replacingOccurrences(of: \"8\", with: \"8\")\n    let base_rev_str\
    \ = base_rev_str.replacingOccurrences(of: \"9\", with: \"9\")\n    let base_rev_str\
    \ = base_rev_str.replacingOccurrences(of: \"A\", with: \"a\")\n    let base_rev_str\
    \ = base_rev_str.replacingOccurrences(of: \"B\", with: \"b\")\n    let base_rev_str\
    \ = base_rev_str.replacingOccurrences(", "    var result = \"\"\n    var remainder\
    \ = x % base\n    while remainder != 0 {\n        result = String(remainder) +\
    \ result\n        remainder = x % base\n        x /= base\n    }\n    return String(result)",
  "    let bases = [\"\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\",\
    \ \"8\", \"9\"]\n    let baseIndex = bases.index(base)!\n    let result = String(x)\n\
    \    if baseIndex < 0 {\n        return \"\"\n    }\n    if baseIndex == 0 {\n\
    \        return result + bases[baseIndex]\n    }\n    let remainder = x % base\n\
    \    return result + bases[baseIndex - remainder] + bases[remainder]", "    if\
    \ base < 10 {\n        return String(x)\n    }\n    var result: String = \"\"\n\
    \    var remainder: Int\n    var quotient: Int\n    var i: Int\n    for i = base;\
    \ i > 0; i-- {\n        remainder = x % i\n        quotient = x / i\n        result\
    \ = String(quotient) + result\n        x = remainder\n    }\n    return result",
  "    let baseDigits = baseDigits(base)\n    var result = \"\"\n    var remainder\
    \ = x % base\n    for digit in baseDigits {\n        if remainder >= base {\n\
    \            result += digit\n            remainder -= base\n        } else {\n\
    \            result += digit + remainder\n            remainder = 0\n        }\n\
    \    }\n    return result", "    let baseDigits = baseDigits(base)\n    var result\
    \ = \"\"\n    var remainder = x\n    for digit in baseDigits {\n        if remainder\
    \ < 0 {\n            result += \"-\"\n            remainder *= -1\n        }\n\
    \        result += (digits[digit] + remainder).charAt((digits[digit] - digits[digit].toInt())\
    \ % base) + digits[digit].toInt()\n        remainder *= base\n    }\n    return\
    \ result", "    let baseDigits = baseDigits(base)\n    let digits = digits(x)\n\
    \    var result = \"\"\n    for digit in digits {\n        let index = baseDigits.index(of:\
    \ digit)\n        if index == nil {\n            result += digit\n        } else\
    \ {\n            result += String(digit)\n        }\n    }\n    return result",
  "    let bases = [\"\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\",\
    \ \"8\", \"9\"]\n    let basesIndex = [0, 2, 4, 6, 8]\n    let basesIndexReverse\
    \ = [8, 6, 4, 2, 0]\n    let basesReverse = [\"\", \"0\", \"1\", \"2\", \"3\"\
    , \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]\n    let basesReverseIndex = [8, 6,\
    \ 4, 2, 0]\n    let basesReverseIndexReverse = [0, 2, 4, 6, 8]\n    var result\
    \ = \"\"\n    var remainder = x\n    var baseIndex = basesIndex[base]\n    while\
    \ remainder > 0 {\n        remainder, remainder = remainder / baseIndex, baseIndex\n\
    \        baseIndex = basesIndexReverse[baseIndex]\n    }\n    while baseIndex\
    \ != 0 {\n        result = bases[baseIndex] + result\n        baseIndex = basesReverseIndex[baseIndex]\n\
    \    }\n    return result", "    var result = \"\"\n    var remainder = x % base\n\
    \    while remainder != 0 {\n        result = String(remainder) + result\n   \
    \     remainder = x % base\n        x /= base\n    }\n    return String(base)",
  "    var result = \"\"\n    var remainder = x % base\n    while remainder != 0 {\n\
    \        result = String(remainder) + result\n        remainder = x % base\n \
    \   }\n    return String(base)", "    var s = String(x)\n    var base = base\n\
    \    var i = 0\n    var result = 0\n    var digits = \"\"\n    var digits_len\
    \ = s.count\n\n    while i < digits_len {\n        digits = String(s.characters[i..<i+base])\n\
    \        result = Int(digits)\n        i += base\n        s = String(result)\n\
    \    }\n    return s", "    let baseDigits = String(base)\n    let digits = String(UInt32(x))\n\
    \    let digitCount = digits.count\n    var result = \"\"\n    var remainder:\
    \ UInt32 = 0\n    for index in 0..<digitCount {\n        let digit = digits[index]\n\
    \        let digitValue = UInt32(digit)\n        let digitBase = digitValue /\
    \ UInt32(baseDigits.count)\n        remainder = digitValue % UInt32(baseDigits.count)\n\
    \        result = digitBase * baseDigits + String(remainder)\n    }\n    return\
    \ result", "    var result = \"\"\n    var remainder = x % base\n    while remainder\
    \ != 0 {\n        result = String(remainder) + result\n        remainder = x %\
    \ base\n        x /= base\n    }\n    return String(result)", "    let baseDigits\
    \ = baseDigits(base)\n    var result = \"\"\n    var remainder = x\n    for digit\
    \ in baseDigits {\n        if remainder < 10 {\n            result += String(digit)\n\
    \            remainder /= 10\n        } else {\n            result += String(digit)\
    \ + String(remainder % 10)\n            remainder /= 10\n        }\n    }\n  \
    \  return result", "    var result = \"\"\n    var remainder = x % base\n    while\
    \ remainder != 0 {\n        result = String(remainder) + result\n        remainder\
    \ = x % base\n        x /= base\n    }\n    return String(base)", "    if base\
    \ < 2 {\n        return String(x)\n    }\n    var result = \"\"\n    var remainder\
    \ = x % base\n    if remainder == 0 {\n        return String(x)\n    }\n    if\
    \ base > 10 {\n        return String(x)\n    }\n    while remainder > 0 {\n  \
    \      remainder, remainder = remainder / base, base\n    }\n    while remainder\
    \ > 0 {\n        result = String(remainder) + result\n        remainder, remainder\
    \ = remainder % base, base\n    }\n    return result", "    var result = \"\"\n\
    \    var remainder = x % base\n    while remainder != 0 {\n        result = String(remainder)\
    \ + result\n        remainder = x % base\n        x /= base\n    }\n    return\
    \ String(result)", "    let digits = x.toInt()\n    let digits_base = digits.toInt()\n\
    \    let digits_base2 = digits_base * base\n    let digits_base3 = digits_base2\
    \ * base\n    let digits_base4 = digits_base3 * base\n    let digits_base5 = digits_base4\
    \ * base\n    let digits_base6 = digits_base5 * base\n    let digits_base7 = digits_base6\
    \ * base\n    let digits_base8 = digits_base7 * base\n    let digits_base9 = digits_base8\
    \ * base\n    let digits_base10 = digits_base9 * base\n    let digits_base11 =\
    \ digits_base10 * base\n    let digits_base12 = digits_base11 * base\n    let\
    \ digits_base13 = digits_base12 * base\n    let digits_base14 = digits_base13\
    \ * base\n    let digits_base15 = digits_base14 * base\n    let digits_base16\
    \ = digits_base15 * base\n    let digits_base17 = digits_base16 * base\n    let\
    \ digits_base18 = digits_base17 * base\n    let digits_base19 = digits_base18\
    \ * base\n    let digits_base20 = digits_base19 * base\n    let digits_base21\
    \ = digits_base20 * base\n    let digits_base22 = digits_base21 * base\n    let\
    \ digits_base23 = digits_base22 * base\n    let digits_base24 = digits_base23\
    \ * base\n    let digits_base25 = digits_base24 * base\n    let digits_base26\
    \ = digits_base25 * base\n    let digits_base27 = digits_base26 * base\n    let\
    \ digits_base28 = digits_base27 * base\n    let digits_base29 = digits_base28\
    \ * base\n    let digits_base30 = digits_base29 * base\n    let digits_base31\
    \ = digits_base30 * base\n    let digits_base32 = digits_base31 * base\n    let\
    \ digits_base33 = digits_base32 * base\n    let digits_base34 = digits_base33\
    \ * base\n    let digits_base35 = digits_base34 * base\n    let digits_base36\
    \ = digits_base35 * base\n    let digits_base37 = digits_base36 * base\n    let\
    \ digits_base38 = digits_base37 * base\n    let digits_base39 = digits_base38\
    \ * base\n    let digits_base40 = digits_base39 * base\n    let digits_base41\
    \ = ", "    let baseString = String(base)\n    var result: String = \"\"\n   \
    \ var remainder: Int = 0\n    var quotient: Int = 0\n    var remainderString:\
    \ String = \"\"\n    var quotientString: String = \"\"\n    while x >= base {\n\
    \        remainder = x % base\n        quotient = x / base\n        remainderString\
    \ = String(remainder)\n        quotientString = String(quotient)\n        result\
    \ = quotientString + remainderString\n        x = quotient\n    }\n    if x <\
    \ base {\n        result = String(base) + result\n    }\n    return result", " \
    \   if base < 10 {\n        return String(x)\n    }\n    var result = \"\"\n \
    \   var remainder = x % base\n    for _ in 0..<(base - remainder).magnitude()\
    \ {\n        result = String(remainder) + result\n        remainder = remainder\
    \ / base\n    }\n    return String(remainder) + result", "    var result = \"\"\
    \n    var remainder = x\n    var divisor = base\n    while remainder > 0 {\n \
    \       remainder, remainder = remainder / divisor, divisor\n        result +=\
    \ String(divisor)\n    }\n    return result", "    let baseString = String(base)\n\
    \    let x = String(x)\n    var result = \"\"\n    for char in x.unicodeScalars\
    \ {\n        let unicodeScalar = char.value as UnicodeScalar\n        let digit\
    \ = Int(unicodeScalar.value)\n        let digitString = String(digit)\n      \
    \  let digitBase = Int(digitString)\n        if digitBase == base {\n        \
    \    result += digitString\n        } else {\n            result += digitString.prefix(digitBase\
    \ - base)\n        }\n    }\n    return result", "    var result = \"\"\n    var\
    \ remainder = x % base\n    while remainder != 0 {\n        result = String(remainder)\
    \ + result\n        remainder = x % base\n    }\n    return result", "    let\
    \ digits = String(Int(x))\n    var result = \"\"\n    for digit in digits.characters\
    \ {\n        let index = Int(digit) - Int(base)\n        result = String(digit)\
    \ + result\n    }\n    return result", "    var result = \"\"\n    var digits\
    \ = \"\"\n    var baseDigits = \"\"\n    var power = 0\n    var powerDigits =\
    \ \"\"\n    var powerBaseDigits = \"\"\n    var powerBase = \"\"\n    var powerBaseDigit\
    \ = \"\"\n    var powerBaseDigits = \"\"\n    var powerBaseDigit = \"\"\n    var\
    \ powerBaseDigits = \"\"\n    var powerBaseDigit = \"\"\n    var powerBaseDigits\
    \ = \"\"\n    var powerBaseDigit = \"\"\n    var powerBaseDigits = \"\"\n    var\
    \ powerBaseDigit = \"\"\n    var powerBaseDigits = \"\"\n    var powerBaseDigit\
    \ = \"\"\n    var powerBaseDigits = \"\"\n    var powerBaseDigit = \"\"\n    var\
    \ powerBaseDigits = \"\"\n    var powerBaseDigit = \"\"\n    var powerBaseDigits\
    \ = \"\"\n    var powerBaseDigit = \"\"\n    var powerBaseDigits = \"\"\n    var\
    \ powerBaseDigit = \"\"\n    var powerBaseDigits = \"\"\n    var powerBaseDigit\
    \ = \"\"\n    var powerBaseDigits = \"\"\n    var powerBaseDigit = \"\"\n    var\
    \ powerBaseDigits = \"\"\n    var powerBaseDigit = \"\"\n    var powerBaseDigits\
    \ = \"\"\n    var powerBaseDigit = \"\"\n    var powerBaseDigits = \"\"\n    var\
    \ powerBaseDigit = \"\"\n    var powerBaseDigits = \"\"\n    var powerBaseDigit\
    \ = \"\"\n    var powerBaseDigits = \"\"\n    var powerBaseDigit = \"\"\n    var\
    \ powerBaseDigits = \"\"\n    var powerBaseDigit = \"\"\n    var powerBaseDigits\
    \ = \"\"\n    var powerBaseDigit = \"\"\n    var powerBaseDigits = \"\"\n    var\
    \ powerBaseDigit = \"\"\n    var powerBaseDigits = \"\"\n    var powerBaseDigit\
    \ = \"\"\n    var powerBaseDigits = \"\"\n    var powerBaseDigit = \"\"\n    var\
    \ powerBaseDigits = \"\"\n    var powerBaseDigit = \"\"\n    var powerBaseDigits\
    \ = \"\"\n    var powerBaseDigit = \"\"\n    var powerBaseDigits = \"\"\n    var\
    \ powerBaseDigit = \"\"\n    var powerBaseDigits = \"\"\n    var powerBaseDigit\
    \ = \"\"\n    var powerBaseDigits = \"\"\n    var powerBaseDigit = \"\"\n    var\
    \ powerBaseDigits = \"\"\n    var powerBaseDigit = \"\"\n    var powerBaseDigits\
    \ = \"\"\n    var powerBaseDigit = \"\"\n    var powerBaseDigits = \"\"\n    var\
    \ powerBaseDigit = \"\"\n    var powerBaseDigits = \"\"\n    var powerBaseDigit\
    \ = \"\"\n    var powerBaseDigits = \"\"\n    var powerBaseDigit = \"\"\n    var\
    \ powerBaseDigits = \"\"\n    var powerBaseDigit = \"\"\n    var powerBaseDigits\
    \ = \"\"\n    var powerBaseDigit = \"\"\n    var powerBaseDigits = \"\"\n    var\
    \ powerBaseDigit = \"\"\n    var powerBaseDigits = \"\"\n    var powerBaseDigit\
    \ = \"\"\n    var powerBaseDigits = \"\"\n    var powerBaseDigit = \"\"\n    var ",
  "    let digits = x.toInt()\n    let result = \"\"\n    var remainder: Int = 0\n\
    \    while digits != 0 {\n        remainder = digits % base\n        digits =\
    \ digits / base\n        result = String(remainder) + result\n    }\n    return\
    \ result", "    var result = \"\"\n    var remainder = x % base\n    while remainder\
    \ != 0 {\n        result = String(remainder) + result\n        remainder = x %\
    \ base\n        x /= base\n    }\n    return String(result)", "    let baseDigits\
    \ = String(base)\n    var digits = String(x)\n    var result: String = \"\"\n\
    \    var i = 0\n    while i < digits.length {\n        let digit = digits[i]\n\
    \        if digit == \"0\" {\n            i += 1\n            continue\n     \
    \   }\n        if digit == \"1\" {\n            result += baseDigits.substringToIndex(advance(digits,\
    \ i, 1))\n            i += 2\n            continue\n        }\n        if digit\
    \ == \"2\" {\n            result += baseDigits.substringToIndex(advance(digits,\
    \ i, 2))\n            i += 3\n            continue\n        }\n        if digit\
    \ == \"3\" {\n            result += baseDigits.substringToIndex(advance(digits,\
    \ i, 3))\n            i += 4\n            continue\n        }\n        if digit\
    \ == \"4\" {\n            result += baseDigits.substringToIndex(advance(digits,\
    \ i, 4))\n            i += 5\n            continue\n        }\n        if digit\
    \ == \"5\" {\n            result += baseDigits.substringToIndex(advance(digits,\
    \ i, 5))\n            i += 6\n            continue\n        }\n        if digit\
    \ == \"6\" {\n            result += baseDigits.substringToIndex(advance(digits,\
    \ i, 6))\n            i += 7\n            continue\n        }\n        if digit\
    \ == \"7\" {\n            result += baseDigits.substringToIndex(advance(digits,\
    \ i, 7))\n            i += 8\n            continue\n        }\n        if digit\
    \ == \"8\" {\n            result += baseDigits.substringToIndex(advance(digits,\
    \ i, 8))\n            i += 9\n            continue\n        }\n        if digit\
    \ == \"9\" {\n            result += baseDigits.substringToIndex(advance(digits,\
    \ i, 9))\n            i += 10\n            continue\n        }\n        result\
    \ += digit\n        i += 1\n    }\n    return result", "    var s = String(x)\n\
    \    var r = \"\"\n    var i = 0\n    while i < s.count {\n        if s[i] ==\
    \ '0' {\n            i += 1\n            continue\n        }\n        var c =\
    \ s[i]\n        if c >= '0' && c <= '9' {\n            c -= base\n           \
    \ if c < 0 {\n                c += 10\n            }\n        }\n        if c\
    \ >= 'a' && c <= 'z' {\n            c -= base\n            if c < 0 {\n      \
    \          c += 26\n            }\n        }\n        if c >= 'A' && c <= 'Z'\
    \ {\n            c -= base\n            if c < 0 {\n                c += 26\n\
    \            }\n        }\n        if c >= 'a' && c <= 'z' {\n            c -=\
    \ base\n            if c < 0 {\n                c += 26\n            }\n     \
    \   }\n        if c >= 'A' && c <= 'Z' {\n            c -= base\n            if\
    \ c < 0 {\n                c += 26\n            }\n        }\n        if c >=\
    \ '0' && c <= '9' {\n            c -= base\n            if c < 0 {\n         \
    \       c += 10\n            }\n        }\n        if c >= 'a' && c <= 'z' {\n\
    \            c -= base\n            if c < 0 {\n                c += 26\n    \
    \        }\n        }\n        if c >= 'A' && c <= 'Z' {\n            c -= base\n\
    \            if c < 0 {\n                c += 26\n            }\n        }\n \
    \       if c >= 'a' && c <= 'z' {\n            c -= base\n            if c < 0\
    \ {\n                c += 26\n            }\n        }\n        if c >= 'A' &&\
    \ c <= 'Z' {\n            c -= base\n            if c < 0 {\n                c\
    \ += 26\n            }\n        }\n        if c >= '0' && c <= '9' {\n       \
    \     c -= base\n            if c < 0 {\n                c += 10\n           \
    \ }\n        }\n        if c >= 'a' && c <= 'z' {\n            c -= base\n   \
    \         if c < 0 {\n                c += 26\n            }\n        }\n    \
    \    if c >= 'A' && c <= 'Z' {\n            c -= base\n            if c < 0 {\n\
    \                c += 26\n            }\n        }\n        if c >= 'a' && c <=\
    \ 'z' {\n            c -= base\n            if c < 0 {\n                c += 26\n\
    \            }\n        }\n        if c >= 'A' && c <= 'Z' {\n            c -=\
    \ base\n            if c < 0 {\n                c += 26\n            }", "   \
    \ let bases = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"]\n\
    \    let baseIndex = bases.index(base)!\n    let baseString = bases[baseIndex]\n\
    \    let result = x.toInt().toString(baseString)\n    return result", "    let\
    \ bases = [\n        \"0\",\n        \"1\",\n        \"2\",\n        \"3\",\n\
    \        \"4\",\n        \"5\",\n        \"6\",\n        \"7\",\n        \"8\"\
    ,\n        \"9\",\n        \"10\",\n        \"11\",\n        \"12\",\n       \
    \ \"13\",\n        \"14\",\n        \"15\",\n        \"16\",\n        \"17\",\n\
    \        \"18\",\n        \"19\",\n        \"20\",\n        \"21\",\n        \"\
    22\",\n        \"23\",\n        \"24\",\n        \"25\",\n        \"26\",\n  \
    \      \"27\",\n        \"28\",\n        \"29\",\n        \"30\",\n        \"\
    31\"\n    ]\n    if base < 0 || base > len(bases) {\n        return \"\"\n   \
    \ }\n    let base_index = bases.index(bases.startIndex, offsetBy: base)\n    return\
    \ String(x.toInt().div(bases[base_index]))", "    let bases = String((0..<base).map\
    \ { _ in \"0123456789ABCDEF\" })\n    let base10 = String((0..<base).map { _ in\
    \ \"0123456789\" })\n    let base16 = String((0..<base).map { _ in \"0123456789ABCDEF\"\
    \ })\n    let base16upper = String((0..<base).map { _ in \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \ })\n    let base16lower = String((0..<base).map { _ in \"0123456789abcdefghijklmnopqrstuvwxyz\"\
    \ })\n    let base32 = String((0..<base).map { _ in \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\"\
    \ })\n    let base32upper = String((0..<base).map { _ in \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \ })\n    let base32lower = String((0..<base).map { _ in \"0123456789abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\"\
    \ })\n    let base32hex = String((0..<base).map { _ in \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\"\
    \ })\n    let base32hexupper = String((0..<base).map { _ in \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\"\
    \ })\n    let base32hexlower = String((0..<base).map ", "    let base10 = 10\n\
    \    let base16 = 16\n    let base26 = 26\n    let base32 = 32\n    let base36\
    \ = 36\n    let base42 = 42\n    let base48 = 48\n    let base56 = 56\n    let\
    \ base62 = 62\n    let base68 = 68\n    let base76 = 76\n    let base84 = 84\n\
    \    let base92 = 92\n    let base100 = 100\n    let base108 = 108\n    let base116\
    \ = 116\n    let base124 = 124\n    let base132 = 132\n    let base140 = 140\n\
    \    let base148 = 148\n    let base156 = 156\n    let base162 = 162\n    let\
    \ base168 = 168\n    let base176 = 176\n    let base184 = 184\n    let base192\
    \ = 192\n    let base200 = 200\n    let base208 = 208\n    let base216 = 216\n\
    \    let base224 = 224\n    let base232 = 232\n    let base240 = 240\n    let\
    \ base248 = 248\n    let base256 = 256\n    let base264 = 264\n    let base272\
    \ = 272\n    let base280 = 280\n    let base288 = 288\n    let base296 = 296\n\
    \    let base304 = 304\n    let base312 = 312\n    let base320 = 320\n    let\
    \ base328 = 328\n    let base336 = 336\n    let base344 = 344\n    let base352\
    \ = 352\n    let base360 = 360\n    let base368 = 368\n    let base376 = 376\n\
    \    let base384 = 384\n    let base392 = 392\n    let base400 = 300\n    let\
    \ base408 = 408\n    let base416 = 416\n    let base424 = 424\n    let base432\
    \ = 432\n    let base440 = 440\n    let base448 = 448\n    let base456 = 456\n\
    \    let base464 = 464\n    let base472 = 472\n    let base480 = 480\n    let\
    \ base488 = 488\n    let base496 = 496\n    let base504 = 504\n    let base512\
    \ = 512\n    let base520 = 520\n    let base528 = 528\n    let base536 = 536\n\
    \    let base544 = 544\n    let base552 = 552\n    let base560 = 560\n    let\
    \ base568 = 568\n    let base576 = 576\n    let base584 = 584\n    let base592\
    \ = 592\n    let base600 = 600\n    let base608 = 608\n    let base616 = 616\n\
    \    let base624 = 624\n    let base632 = 632\n    let base640 = 640\n    let\
    \ base648 = ", "    let bases = [\n        \"0\", \"1\", \"2\", \"3\", \"4\",\
    \ \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"\
    15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\",\
    \ \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"\n    ]\n    let basesIndex\
    \ = [\n        \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\"\
    , \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\"\
    , \"29\", \"30\", \"31\"\n    ]\n    let basesIndexReverse = [\n        \"0\"\
    , \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\"\
    , \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\"\
    , \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"\
    \n    ].reverse()\n    let basesIndexReverse2 = [\n        \"0\", \"1\", \"2\"\
    , \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"\
    13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\",\
    \ \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"\n   \
    \ ].reverse()\n    let basesIndexReverse3 = [\n        \"0\", \"1\", \"2\", \"\
    3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\"\
    , \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\"\
    , \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"\n    ].reverse()\n\
    \    let basesIndexReverse4 = [\n        \"0\", \"1\", \"2\", \"3\", \"4\", \"\
    5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\"\
    , \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\"\
    , \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"\n    ].reverse()\n    let basesIndexReverse5\
    \ = [\n        \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\"\
    , \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\"\
    , \"29\", \"30\", \"31\"\n    ].reverse()\n    let basesIndexReverse6 = [\n  \
    \      \"0\", \"1\", \"2\", \"3\", \"", "    var result = \"\"\n    var remainder\
    \ = x % base\n    while remainder != 0 {\n        result = String(remainder) +\
    \ result\n        remainder = x % base\n        x /= base\n    }\n    return String(base)",
  "    let digits = x.toInt()\n    let baseDigits = base.toInt()\n    var result =\
    \ \"\"\n    var remainder = digits\n    while remainder > 0 {\n        let remainderDigit\
    \ = remainder % baseDigits\n        remainder = remainder / baseDigits\n     \
    \   result = String(remainderDigit + baseDigits)\n    }\n    return result", " \
    \   let baseNum = Int(base)\n    let xNum = Int(x)\n    if xNum < baseNum {\n\
    \        return String(xNum)\n    }\n    let remainder = Int(xNum / baseNum)\n\
    \    let quotient = xNum % baseNum\n    return String(quotient * baseNum) + String(remainder)",
  "    var result = \"\"\n    var remainder = x % base\n    while remainder != 0 {\n\
    \        result = String(remainder) + result\n        remainder = x % base\n \
    \       x /= base\n    }\n    return String(result)", "    let baseNum = base\n\
    \    var result = \"\"\n    var remainder = x\n    while remainder > 0 {\n   \
    \     let remainderDigit = remainder % baseNum\n        remainder = remainder\
    \ / baseNum\n        result = String(repeating: \"0\", count: baseNum) + String(remainderDigit)\
    \ + result\n    }\n    return result", "    var result = \"\"\n    var remainder\
    \ = x % base\n    while remainder != 0 {\n        result = String(remainder) +\
    \ result\n        remainder = x % base\n        x /= base\n    }\n    return String(base)",
  "    let baseNum = Int(base)\n    let numStr = String(x)\n    var result = \"\"\n\
    \    for char in numStr {\n        let num = Int(char) - baseNum\n        result\
    \ = String(num) + result\n    }\n    return result", "    if base < 2 {\n    \
    \    return String(x)\n    }\n    var result = \"\"\n    var remainder = x % base\n\
    \    var quotient = x / base\n    while quotient > 0 {\n        result = String(quotient)\
    \ + result\n        remainder = remainder % base\n        quotient = quotient\
    \ / base\n    }\n    if remainder > 0 {\n        result = String(quotient) + result\n\
    \    }\n    return result", "    var result = \"\"\n    var remainder = x % base\n\
    \    while remainder != 0 {\n        result = String(remainder) + result\n   \
    \     remainder = x % base\n    }\n    return result", "    let digits = x.toInt()\n\
    \    let digits_base = digits.toInt()\n    let digits_base2 = digits_base * base\n\
    \    let digits_base3 = digits_base2 * base\n    let digits_base4 = digits_base3\
    \ * base\n    let digits_base5 = digits_base4 * base\n    let digits_base6 = digits_base5\
    \ * base\n    let digits_base7 = digits_base6 * base\n    let digits_base8 = digits_base7\
    \ * base\n    let digits_base9 = digits_base8 * base\n    let digits_base10 =\
    \ digits_base9 * base\n    let digits_base11 = digits_base10 * base\n    let digits_base12\
    \ = digits_base11 * base\n    let digits_base13 = digits_base12 * base\n    let\
    \ digits_base14 = digits_base13 * base\n    let digits_base15 = digits_base14\
    \ * base\n    let digits_base16 = digits_base15 * base\n    let digits_base17\
    \ = digits_base16 * base\n    let digits_base18 = digits_base17 * base\n    let\
    \ digits_base19 = digits_base18 * base\n    let digits_base20 = digits_base19\
    \ * base\n    let digits_base21 = digits_base20 * base\n    let digits_base22\
    \ = digits_base21 * base\n    let digits_base23 = digits_base22 * base\n    let\
    \ digits_base24 = digits_base23 * base\n    let digits_base25 = digits_base24\
    \ * base\n    let digits_base26 = digits_base25 * base\n    let digits_base27\
    \ = digits_base26 * base\n    let digits_base28 = digits_base27 * base\n    let\
    \ digits_base29 = digits_base28 * base\n    let digits_base30 = digits_base29\
    \ * base\n    let digits_base31 = digits_base30 * base\n    let digits_base32\
    \ = digits_base31 * base\n    let digits_base33 = digits_base32 * base\n    let\
    \ digits_base34 = digits_base33 * base\n    let digits_base35 = digits_base34\
    \ * base\n    let digits_base36 = digits_base35 * base\n    let digits_base37\
    \ = digits_base36 * base\n    let digits_base38 = digits_base37 * base\n    let\
    \ digits_base39 = digits_base38 * base\n    let digits_base40 = digits_base39\
    \ * base\n    let digits_base41 = ", "    if base < 2 {\n        return String(x)\n\
    \    }\n    var result = \"\"\n    var remainder = x\n    var digits = base\n\
    \    while remainder > 0 {\n        var digit = remainder % base\n        remainder\
    \ = remainder / base\n        result = String(digit) + result\n    }\n    if digits\
    \ < base {\n        result = String(digits) + result\n    }\n    return result",
  "    var result = \"\"\n    var remainder = x % base\n    if remainder == 0 {\n\
    \        return String(Int(x))\n    }\n    if base < 10 {\n        result = String(Int(x))\
    \ + String(base)\n    } else {\n        var quotient = x / base\n        var remainder\
    \ = x % base\n        while remainder != 0 {\n            quotient = quotient\
    \ * base\n            remainder = remainder % base\n        }\n        result\
    \ = String(quotient) + String(base)\n    }\n    return result", "    let bases\
    \ = [\n        \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\"\
    , \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\"\
    , \"29\", \"30\", \"31\"\n    ]\n    let baseIndex = bases.index(base)!\n    let\
    \ baseString = bases[baseIndex]\n    let result = String(x)\n    let index = result.index(of:\
    \ baseString)!\n    let newResult = result.substring(to: index)\n    return newResult",
  "    let bases = [\"\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\",\
    \ \"8\", \"9\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\n    let basesIndex\
    \ = [0, 2, 4, 6, 8]\n    let basesIndex2 = [0, 2, 4, 6, 8]\n    let basesIndex3\
    \ = [0, 2, 4, 6, 8]\n    let basesIndex4 = [0, 2, 4, 6, 8]\n    let basesIndex5\
    \ = [0, 2, 4, 6, 8]\n    let basesIndex6 = [0, 2, 4, 6, 8]\n    let basesIndex7\
    \ = [0, 2, 4, 6, 8]\n    let basesIndex8 = [0, 2, 4, 6, 8]\n    let basesIndex9\
    \ = [0, 2, 4, 6, 8]\n    let basesIndex10 = [0, 2, 4, 6, 8]\n    let basesIndex11\
    \ = [0, 2, 4, 6, 8]\n    let basesIndex12 = [0, 2, 4, 6, 8]\n    let basesIndex13\
    \ = [0, 2, 4, 6, 8]\n    let basesIndex14 = [0, 2, 4, 6, 8]\n    let basesIndex15\
    \ = [0, 2, 4, 6, 8]\n    let basesIndex16 = [0, 2, 4, 6, 8]\n    let basesIndex17\
    \ = [0, 2, 4, 6, 8]\n    let basesIndex18 = [0, 2, 4, 6, 8]\n    let basesIndex19\
    \ = [0, 2, 4, 6, 8]\n    let basesIndex20 = [0, 2, 4, 6, 8]\n    let basesIndex21\
    \ = [0, 2, 4, 6, 8]\n    let basesIndex22 = [0, 2, 4, 6, 8]\n    let basesIndex23\
    \ = [0, 2, 4, 6, 8]\n    let basesIndex24 = [0, 2, 4, 6, 8]\n    let basesIndex25\
    \ = [0, 2, 4, 6, 8]\n    let basesIndex26 = [0, 2, 4, 6, 8]\n    let basesIndex27\
    \ = [0, 2, 4, 6, 8]\n    let basesIndex28 = [0, 2, 4, 6, 8]\n    let basesIndex29\
    \ = [0, 2, 4, 6, 8]\n    let basesIndex30 = [0, 2, 4, 6, 8]\n    let basesIndex31\
    \ = [0, 2, 4, 6, 8]\n    let basesIndex32 = [0, 2, 4, 6, 8]\n    let basesIndex33\
    \ = [0, 2, 4, 6, 8]\n    let basesIndex34 = [0, 2, 4, 6, 8]\n    let basesIndex35\
    \ = [0, 2, 4, 6, 8]\n    let basesIndex36 = [0, 2, 4, 6, 8]\n    let basesIndex37\
    \ = [0, 2, 4, 6, 8]\n    let basesIndex38 = [0, 2, 4, 6, 8]\n    let basesIndex39\
    \ = [0, 2, 4, 6, 8]\n    let basesIndex40 = [0, 2, 4, 6, 8]\n    let basesIndex41\
    \ = [0, 2, 4, 6, 8]\n    let basesIndex42 = [0, 2, 4, 6, 8]\n    let basesIndex43\
    \ = [0, 2, 4, 6, 8]\n    let basesIndex44 = [0, 2, 4, 6, 8]\n", "    let base10\
    \ = \"0123456789ABCDEF\"\n    let base16 = \"0123456789abcdef\"\n    let base32\
    \ = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    let\
    \ base36 = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\
    \n    let base62 = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\"\
    \n    let base62 = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz\"\
    \n    let base62 = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz\"\
    \n    let base62 = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz\"\
    \n    let base62 = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz\"\
    \n    let base62 = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0123456789abcdefgh",
  "    var result = \"\"\n    var remainder = x\n    var quotient = base\n    while\
    \ quotient > 0 {\n        remainder, remainder = remainder / base, quotient -=\
    \ 1\n        result = String(remainder) + result\n    }\n    return result", " \
    \   var result = \"\"\n    var remainder = x % base\n    while remainder != 0\
    \ {\n        result = String(remainder) + result\n        remainder = x % base\n\
    \        x /= base\n    }\n    return String(base)", "    let baseDigits = String(base)\n\
    \    let digits = String(UInt32(x))\n    var result = \"\"\n    for index in 0..<digits.count\
    \ {\n        let digit = digits[index]\n        if digit == \"0\" {\n        \
    \    result += \"0\"\n        } else if digit == \"1\" {\n            result +=\
    \ \"1\"\n        } else if digit == \"2\" {\n            result += \"2\"\n   \
    \     } else if digit == \"3\" {\n            result += \"3\"\n        } else\
    \ if digit == \"4\" {\n            result += \"4\"\n        } else if digit ==\
    \ \"5\" {\n            result += \"5\"\n        } else if digit == \"6\" {\n \
    \           result += \"6\"\n        } else if digit == \"7\" {\n            result\
    \ += \"7\"\n        } else if digit == \"8\" {\n            result += \"8\"\n\
    \        } else if digit == \"9\" {\n            result += \"9\"\n        } else\
    \ if digit == \"A\" {\n            result += \"A\"\n        } else if digit ==\
    \ \"B\" {\n            result += \"B\"\n        } else if digit == \"C\" {\n \
    \           result += \"C\"\n        } else if digit == \"D\" {\n            result\
    \ += \"D\"\n        } else if digit == \"E\" {\n            result += \"E\"\n\
    \        } else if digit == \"F\" {\n            result += \"F\"\n        } else\
    \ {\n            result += \"?\"\n        }\n    }\n    if base < 10 {\n     \
    \   return result\n    }\n    if base > 10 {\n        let baseDigits = String(base)\n\
    \        let digits = String(UInt32(x))\n        var result = \"\"\n        for\
    \ index in 0..<digits.count {\n            let digit = digits[index]\n       \
    \     if digit == \"0\" {\n                result += \"0\"\n            } else\
    \ if digit == \"1\" {\n                result += \"1\"\n            } else if\
    \ digit == \"2\" {\n                result += \"2\"\n            } else if digit\
    \ == \"3\" {\n                result += \"3\"\n            } else if digit ==\
    \ \"4\" {\n                result += \"4\"\n            } else if digit == \"\
    5\" {\n                result += \"5\"\n            } else if digit == \"6\" {\n\
    \                result += \"6\"\n            } else if digit == \"7\" {\n   \
    \             result += \"7\"\n            } else if digit == \"8\" {\n      \
    \          result += \"8\"\n            } else if digit == \"9\" {\n         \
    \       result += \"9\"\n            } else if digit == \"A\" {\n            \
    \    result += \"A\"\n            } else if digit == \"B\" {\n               \
    \ result += \"B\"\n            } else if digit == \"C\" {\n                result\
    \ += \"C\"\n            } else ", "    var result = \"\"\n    var remainder =\
    \ x % base\n    while remainder != 0 {\n        result = String(remainder) + result\n\
    \        remainder = x % base\n    }\n    return String(base)", "    let bases\
    \ = [\"\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"\
    ]\n    let baseIndex = bases.index(base)!\n    let baseString = bases[baseIndex]\n\
    \    let result = String(format: \"%@%@\", baseString, x)\n    return result",
  "    let bases = [\"\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\",\
    \ \"8\", \"9\"]\n    let basesCount = bases.count\n    let basesIndex = bases.index\
    \ {\n        $0 == String(base)\n    }\n    let basesCount = basesIndex!\n   \
    \ let basesString = bases[basesIndex!]\n    let basesStringCount = basesString.count\n\
    \    let basesStringIndex = basesString.index {\n        $0 == String(base)\n\
    \    }\n    let basesStringCount = basesStringIndex!\n    let basesStringIndex\
    \ = basesString.index {\n        $0 == String(base)\n    }\n    let basesStringCount\
    \ = basesStringIndex!\n    let basesStringIndex = basesString.index {\n      \
    \  $0 == String(base)\n    }\n    let basesStringCount = basesStringIndex!\n \
    \   let basesStringIndex = basesString.index {\n        $0 == String(base)\n \
    \   }\n    let basesStringCount = basesStringIndex!\n    let basesStringIndex\
    \ = basesString.index {\n        $0 == String(base)\n    }\n    let basesStringCount\
    \ = basesStringIndex!\n    let basesStringIndex = basesString.index {\n      \
    \  $0 == String(base)\n    }\n    let basesStringCount = basesStringIndex!\n \
    \   let basesStringIndex = basesString.index {\n        $0 == String(base)\n \
    \   }\n    let basesStringCount = basesStringIndex!\n    let basesStringIndex\
    \ = basesString.index {\n        $0 == String(base)\n    }\n    let basesStringCount\
    \ = basesStringIndex!\n    let basesStringIndex = basesString.index {\n      \
    \  $0 == String(base)\n    }\n    let basesStringCount = basesStringIndex!\n \
    \   let basesStringIndex = basesString.index {\n        $0 == String(base)\n \
    \   }\n    let basesStringCount = basesStringIndex!\n    let basesStringIndex\
    \ = basesString.index {\n        $0 == String(base)\n    }\n    let basesStringCount\
    \ = basesStringIndex!\n    let basesStringIndex = basesString.index {\n      \
    \  $0 == String(base)\n    }\n    let basesStringCount = basesStringIndex!\n \
    \   let basesStringIndex = basesString.index {\n        $0 == String(base)\n \
    \   }\n    let basesStringCount = basesStringIndex!\n    let basesStringIndex\
    \ = basesString.index {\n        $0 == String(base)\n    }\n    let basesStringCount\
    \ = basesStringIndex!\n    let basesStringIndex = basesString.index {\n      \
    \  $0 == String(base)\n    }\n    let basesStringCount = basesStringIndex!\n",
  "    let bases = [\"\", \"K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"]\n\
    \    let baseIndex = bases.index(base)!\n    let baseString = bases[baseIndex]\n\
    \    let baseInt = Int(baseString)!\n    let baseDouble = Double(baseString)!\n\
    \    let baseFloat = Float(baseString)!\n    let baseInt = Int(x)\n    let baseDouble\
    \ = Double(x)\n    let baseFloat = Float(x)\n    let baseInt = Int(baseString)\n\
    \    let baseDouble = Double(baseString)\n    let baseFloat = Float(baseString)\n\
    \    let baseInt = Int(x)\n    let baseDouble = Double(x)\n    let baseFloat =\
    \ Float(x)\n    let baseInt = Int(baseString)\n    let baseDouble = Double(baseString)\n\
    \    let baseFloat = Float(baseString)\n    let baseInt = Int(x)\n    let baseDouble\
    \ = Double(x)\n    let baseFloat = Float(x)\n    let baseInt = Int(baseString)\n\
    \    let baseDouble = Double(baseString)\n    let baseFloat = Float(baseString)\n\
    \    let baseInt = Int(x)\n    let baseDouble = Double(x)\n    let baseFloat =\
    \ Float(x)\n    let baseInt = Int(baseString)\n    let baseDouble = Double(baseString)\n\
    \    let baseFloat = Float(baseString)\n    let baseInt = Int(x)\n    let baseDouble\
    \ = Double(x)\n    let baseFloat = Float(x)\n    let baseInt = Int(baseString)\n\
    \    let baseDouble = Double(baseString)\n    let baseFloat = Float(baseString)\n\
    \    let baseInt = Int(x)\n    let baseDouble = Double(x)\n    let baseFloat =\
    \ Float(x)\n    let baseInt = Int(baseString)\n    let baseDouble = Double(baseString)\n\
    \    let baseFloat = Float(baseString)\n    let baseInt = Int(x)\n    let baseDouble\
    \ = Double(x)\n    let baseFloat = Float(x)\n    let baseInt = Int(baseString)\n\
    \    let baseDouble = Double(baseString)\n    let baseFloat = Float(baseString)\n\
    \    let baseInt = Int(x)\n    let baseDouble = Double(x)\n    let baseFloat =\
    \ Float(x)\n    let baseInt = Int(baseString)\n    let baseDouble = Double(baseString)\n\
    \    let baseFloat = Float(baseString)\n    let baseInt = Int(x)\n    let baseDouble\
    \ = Double(x)\n    let baseFloat = Float(x)\n    let baseInt = Int(baseString)\n\
    \    let baseDouble = Double(baseString)\n    let baseFloat = Float(baseString)\n\
    \    let baseInt = Int(x)\n    let baseDouble = Double(x)\n    let baseFloat =\
    \ Float(x)\n    let base", "    var result = \"\"\n    var remainder = x % base\n\
    \    while remainder != 0 {\n        result = String(remainder) + result\n   \
    \     remainder = x % base\n        x /= base\n    }\n    return String(result)",
  "    let baseDigits = baseDigits(base)\n    var result = \"\"\n    for digit in\
    \ x.toString(baseDigits) {\n        result = digits[digit] + result\n    }\n \
    \   return result", "    let bases = [\"\", \"0\", \"1\", \"2\", \"3\", \"4\"\
    , \"5\", \"6\", \"7\", \"8\", \"9\"]\n    let basesLen = bases.count\n    let\
    \ baseIndex = bases.index(base)!\n    let baseChar = bases[baseIndex]\n    let\
    \ baseCharLen = baseChar.count\n    let baseCharIndex = baseChar.index(baseChar)!\n\
    \    let baseCharChar = baseChar[baseCharIndex]\n    let baseCharCharLen = baseCharChar.count\n\
    \    let baseCharCharIndex = baseCharChar.index(baseCharChar)!\n    let baseCharCharChar\
    \ = baseCharChar[baseCharCharIndex]\n    let baseCharCharCharLen = baseCharCharChar.count\n\
    \    let baseCharCharCharIndex = baseCharCharChar.index(baseCharCharChar)!\n \
    \   let baseCharCharCharChar = baseCharCharChar[baseCharCharCharIndex]\n    let\
    \ baseCharCharCharCharLen = baseCharCharCharChar.count\n    let baseCharCharCharCharIndex\
    \ = baseCharCharCharChar.index(baseCharCharCharChar)!\n    let baseCharCharCharCharChar\
    \ = baseCharCharCharChar[baseCharCharCharCharIndex]\n    let baseCharCharCharCharLen\
    \ = baseCharCharCharCharChar.count\n    let baseCharCharCharCharIndex = baseCharCharCharCharChar.index(baseCharCharCharCharChar)!\n\
    \    let baseCharCharCharCharChar = baseCharCharCharCharChar[baseCharCharCharCharCharIndex]\n\
    \    let baseCharCharCharCharCharLen = baseCharCharCharCharCharChar.count\n  \
    \  let baseCharCharCharCharIndex = baseCharCharCharCharCharChar.index(baseCharCharCharCharCharChar)!\n\
    \    let baseCharCharCharCharChar = baseCharCharCharCharCharChar[baseCharCharCharCharCharCharIndex]\n\
    \    let baseCharCharCharCharCharLen = baseCharCharCharCharCharCharChar.count\n\
    \    let baseCharCharCharCharCharIndex = baseCharCharCharCharCharCharChar.index(baseCharCharCharCharCharCharChar)!\n\
    \    let baseCharCharCharCharCharChar = baseCharCharCharCharCharChar[baseCharCharCharCharCharCharCharIndex]\n\
    \    let baseCharCharCharCharCharLen = baseCharCharCharCharCharCharChar.count\n\
    \    let baseCharCharCharCharIndex = baseCharCharCharCharCharCharChar.index(baseCharCharCharCharCharCharChar)!\n\
    \    let baseCharCharCharCharCharChar = baseCharCharCharCharCharChar[base", " \
    \   var result = \"\"\n    var remainder = x % base\n    while remainder != 0\
    \ {\n        result = String(remainder) + result\n        remainder = x % base\n\
    \    }\n    return String(base)", "    let bases = [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10]\n    let basesLen = bases.count\n    var result: String = \"\"\n    if x\
    \ < 0 {\n        result = \"-\" + change_base(-x, base)\n    } else {\n      \
    \  if base < basesLen {\n            let baseIndex = bases.index(of: base)!\n\
    \            let remainder = x % bases[baseIndex]\n            let quotient =\
    \ x / bases[baseIndex]\n            result = String(quotient) + String(remainder)\n\
    \        } else {\n            result = \"0\"\n        }\n    }\n    return result",
  "    let base10 = 10\n    let base16 = 16\n    let base26 = 26\n    let base32 =\
    \ 32\n    let base36 = 36\n    let base42 = 42\n    let base48 = 48\n    let base56\
    \ = 56\n    let base62 = 62\n    let base68 = 68\n    let base76 = 76\n    let\
    \ base84 = 84\n    let base92 = 92\n    let base100 = 100\n    \n    if base <\
    \ base10 {\n        return String(Int(x) / Int(base))\n    } else if base < base16\
    \ {\n        return String(Int(x) / Int(base10) * Int(base))\n    } else if base\
    \ < base26 {\n        return String(Int(x) / Int(base16) * Int(base10) * Int(base))\n\
    \    } else if base < base32 {\n        return String(Int(x) / Int(base26) * Int(base16)\
    \ * Int(base10) * Int(base))\n    } else if base < base36 {\n        return String(Int(x)\
    \ / Int(base32) * Int(base26) * Int(base16) * Int(base10) * Int(base))\n    }\
    \ else if base < base42 {\n        return String(Int(x) / Int(base36) * Int(base32)\
    \ * Int(base26) * Int(base16) * Int(base10) * Int(base))\n    } else if base <\
    \ base48 {\n        return String(Int(x) / Int(base42) * Int(base36) * Int(base32)\
    \ * Int(base26) * Int(base16) * Int(base10) * Int(base))\n    } else if base <\
    \ base56 {\n        return String(Int(x) / Int(base48) * Int(base42) * Int(base36)\
    \ * Int(base32) * Int(base26) * Int(base16) * Int(base10) * Int(base))\n    }\
    \ else if base < base62 {\n        return String(Int(x) / Int(base56) * Int(base48)\
    \ * Int(base42) * Int(base36) * Int(base32) * Int(base26) * Int(base16) * Int(base10)\
    \ * Int(base))\n    } else if base < base68 {\n        return String(Int(x) /\
    \ Int(base62) * Int(base56) * Int(base48) * Int(base42) * Int(base36) * Int(base32)\
    \ * Int(base26) * Int(base16) * Int(base10) * Int(base))\n    } else if base <\
    \ base76 {\n        return String(Int(x) / Int(base68) * Int(base62) * Int(base56)\
    \ * Int(base48) * Int(base42) * Int(base36) * Int(base32) * Int(base26) * Int(base16)\
    \ * Int(base10) * Int(base))\n    } else if base < base84 {\n        return String(Int(x)\
    \ / Int(", "    var result = \"\"\n    var remainder = x % base\n    while remainder\
    \ != 0 {\n        result = String(remainder) + result\n        remainder = x %\
    \ base\n        x /= base\n    }\n    return String(result)", "    var result\
    \ = \"\"\n    var remainder: Int\n    var quotient: Int\n    var quotientString:\
    \ String\n    var remainderString: String\n    var baseString: String\n    var\
    \ baseStringLen: Int\n    var baseStringLen2: Int\n    var baseStringLen3: Int\n\
    \    var baseStringLen4: Int\n    var baseStringLen5: Int\n    var baseStringLen6:\
    \ Int\n    var baseStringLen7: Int\n    var baseStringLen8: Int\n    var baseStringLen9:\
    \ Int\n    var baseStringLen10: Int\n    var baseStringLen11: Int\n    var baseStringLen12:\
    \ Int\n    var baseStringLen13: Int\n    var baseStringLen14: Int\n    var baseStringLen15:\
    \ Int\n    var baseStringLen16: Int\n    var baseStringLen17: Int\n    var baseStringLen18:\
    \ Int\n    var baseStringLen19: Int\n    var baseStringLen20: Int\n    var baseStringLen21:\
    \ Int\n    var baseStringLen22: Int\n    var baseStringLen23: Int\n    var baseStringLen24:\
    \ Int\n    var baseStringLen25: Int\n    var baseStringLen26: Int\n    var baseStringLen27:\
    \ Int\n    var baseStringLen28: Int\n    var baseStringLen29: Int\n    var baseStringLen30:\
    \ Int\n    var baseStringLen31: Int\n    var baseStringLen32: Int\n    var baseStringLen33:\
    \ Int\n    var baseStringLen34: Int\n    var baseStringLen35: Int\n    var baseStringLen36:\
    \ Int\n    var baseStringLen37: Int\n    var baseStringLen38: Int\n    var baseStringLen39:\
    \ Int\n    var baseStringLen40: Int\n    var baseStringLen41: Int\n    var baseStringLen42:\
    \ Int\n    var baseStringLen43: Int\n    var baseStringLen44: Int\n    var baseStringLen45:\
    \ Int\n    var baseStringLen46: Int\n    var baseStringLen47: Int\n    var baseStringLen48:\
    \ Int\n    var baseStringLen49: Int\n    var baseStringLen50: Int\n    var baseStringLen51:\
    \ Int\n    var baseStringLen52: Int\n    var baseStringLen53: Int\n    var baseStringLen54:\
    \ Int\n    var baseStringLen55: Int\n    var baseStringLen56: Int\n    var baseStringLen57:\
    \ Int\n    var baseStringLen58: Int\n    var baseStringLen59: Int\n    var baseStringLen60:\
    \ Int\n    var baseStringLen", "    let baseDigits = String(base)\n    var digits\
    \ = String(x)\n    var result = \"\"\n    while digits.count > 0 {\n        let\
    \ lastDigit = digits.last!\n        if lastDigit >= baseDigits.count {\n     \
    \       digits += \"0\"\n        } else {\n            digits += baseDigits[lastDigit]\n\
    \        }\n    }\n    while digits.count < baseDigits.count {\n        digits\
    \ += \"0\"\n    }\n    while digits.count > baseDigits.count {\n        digits\
    \ = String(digits.dropLast())\n    }\n    while digits.count < baseDigits.count\
    \ {\n        digits = String(digits.dropFirst())\n    }\n    while digits.count\
    \ > 0 {\n        let lastDigit = digits.last!\n        if lastDigit >= baseDigits.count\
    \ {\n            digits += \"0\"\n        } else {\n            digits += baseDigits[lastDigit]\n\
    \        }\n    }\n    while digits.count < baseDigits.count {\n        digits\
    \ += \"0\"\n    }\n    while digits.count > baseDigits.count {\n        digits\
    \ = String(digits.dropLast())\n    }\n    while digits.count < baseDigits.count\
    \ {\n        digits = String(digits.dropFirst())\n    }\n    while digits.count\
    \ > 0 {\n        let lastDigit = digits.last!\n        if lastDigit >= baseDigits.count\
    \ {\n            digits += \"0\"\n        } else {\n            digits += baseDigits[lastDigit]\n\
    \        }\n    }\n    while digits.count < baseDigits.count {\n        digits\
    \ += \"0\"\n    }\n    while digits.count > baseDigits.count {\n        digits\
    \ = String(digits.dropLast())\n    }\n    while digits.count < baseDigits.count\
    \ {\n        digits = String(digits.dropFirst())\n    }\n    while digits.count\
    \ > 0 {\n        let lastDigit = digits.last!\n        if lastDigit >= baseDigits.count\
    \ {\n            digits += \"0\"\n        } else {\n            digits += baseDigits[lastDigit]\n\
    \        }\n    }\n    while digits.count < baseDigits.count {\n        digits\
    \ += \"0\"\n    }\n    while digits.count > baseDigits.count {\n        digits\
    \ = String(digits.dropLast())\n    }\n    while digits.count < baseDigits.count\
    \ {\n        digits = String(digits.dropFirst())\n    }\n    while digits.count\
    \ > 0 {\n        let lastDigit = digits.last!\n        if lastDigit >= baseDigits.count\
    \ {\n            digits += \"0\"\n        } else {\n            digits += baseDigits[lastDigit]\n\
    \        }\n    }\n    while digits.count < baseDigits.count {\n        digits\
    \ += \"0\"\n    }\n    while digits.count > baseDigits.count {\n        digit",
  "    let bases = [\"\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\",\
    \ \"8\", \"9\"]\n    let basesCount = bases.count\n    let basesIndex = bases.index(base)!\n\
    \    let basesCount = bases.count\n    let basesIndex = bases.index(base)!\n \
    \   let basesCount = bases.count\n    let basesIndex = bases.index(base)!\n  \
    \  let basesCount = bases.count\n    let basesIndex = bases.index(base)!\n   \
    \ let basesCount = bases.count\n    let basesIndex = bases.index(base)!\n    let\
    \ basesCount = bases.count\n    let basesIndex = bases.index(base)!\n    let basesCount\
    \ = bases.count\n    let basesIndex = bases.index(base)!\n    let basesCount =\
    \ bases.count\n    let basesIndex = bases.index(base)!\n    let basesCount = bases.count\n\
    \    let basesIndex = bases.index(base)!\n    let basesCount = bases.count\n \
    \   let basesIndex = bases.index(base)!\n    let basesCount = bases.count\n  \
    \  let basesIndex = bases.index(base)!\n    let basesCount = bases.count\n   \
    \ let basesIndex = bases.index(base)!\n    let basesCount = bases.count\n    let\
    \ basesIndex = bases.index(base)!\n    let basesCount = bases.count\n    let basesIndex\
    \ = bases.index(base)!\n    let basesCount = bases.count\n    let basesIndex =\
    \ bases.index(base)!\n    let basesCount = bases.count\n    let basesIndex = bases.index(base)!\n\
    \    let basesCount = bases.count\n    let basesIndex = bases.index(base)!\n \
    \   let basesCount = bases.count\n    let basesIndex = bases.index(base)!\n  \
    \  let basesCount = bases.count\n    let basesIndex = bases.index(base)!\n   \
    \ let basesCount = bases.count\n    let basesIndex = bases.index(base)!\n    let\
    \ basesCount = bases.count\n    let basesIndex = bases.index(base)!\n    let basesCount\
    \ = bases.count\n    let basesIndex = bases.index(base)!\n    let basesCount =\
    \ bases.count\n    let basesIndex = bases.index(base)!\n    let basesCount = bases.count\n\
    \    let basesIndex = bases.index(base)!\n    let basesCount = bases.count\n \
    \   let basesIndex = bases.index(base)!\n    let basesCount = bases.count\n  \
    \  let basesIndex = bases.index(base)!\n    let basesCount = bases.count\n   \
    \ let basesIndex = bases.index(base)!\n    let basesCount = bases.count\n    let\
    \ basesIndex = bases.index(base)!\n    let basesCount = bases.count\n    let basesIndex\
    \ = bases.index(", "    let digits = x.toInt()\n    let digits_base = digits.toInt()\n\
    \    let digits_base2 = digits_base * base\n    let digits_base3 = digits_base2\
    \ * base\n    let digits_base4 = digits_base3 * base\n    let digits_base5 = digits_base4\
    \ * base\n    let digits_base6 = digits_base5 * base\n    let digits_base7 = digits_base6\
    \ * base\n    let digits_base8 = digits_base7 * base\n    let digits_base9 = digits_base8\
    \ * base\n    let digits_base10 = digits_base9 * base\n    let digits_base11 =\
    \ digits_base10 * base\n    let digits_base12 = digits_base11 * base\n    let\
    \ digits_base13 = digits_base12 * base\n    let digits_base14 = digits_base13\
    \ * base\n    let digits_base15 = digits_base14 * base\n    let digits_base16\
    \ = digits_base15 * base\n    let digits_base17 = digits_base16 * base\n    let\
    \ digits_base18 = digits_base17 * base\n    let digits_base19 = digits_base18\
    \ * base\n    let digits_base20 = digits_base19 * base\n    let digits_base21\
    \ = digits_base20 * base\n    let digits_base22 = digits_base21 * base\n    let\
    \ digits_base23 = digits_base22 * base\n    let digits_base24 = digits_base23\
    \ * base\n    let digits_base25 = digits_base24 * base\n    let digits_base26\
    \ = digits_base25 * base\n    let digits_base27 = digits_base26 * base\n    let\
    \ digits_base28 = digits_base27 * base\n    let digits_base29 = digits_base28\
    \ * base\n    let digits_base30 = digits_base29 * base\n    let digits_base31\
    \ = digits_base30 * base\n    let digits_base32 = digits_base31 * base\n    let\
    \ digits_base33 = digits_base32 * base\n    let digits_base34 = digits_base33\
    \ * base\n    let digits_base35 = digits_base34 * base\n    let digits_base36\
    \ = digits_base35 * base\n    let digits_base37 = digits_base36 * base\n    let\
    \ digits_base38 = digits_base37 * base\n    let digits_base39 = digits_base38\
    \ * base\n    let digits_base40 = digits_base39 * base\n    let digits_base41\
    \ = ", "    let bases = [\"\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\"]\n    let basesLen = bases.count\n    let baseIndex = bases.firstIndex(of:\
    \ base)!\n    let baseNum = Int(x) / Int(base)\n    let baseNumStr = String(baseNum)\n\
    \    let baseNumLen = baseNumStr.count\n    let baseNumStr = baseNumStr.prefix(baseNumLen)\n\
    \    let baseNumStr = baseNumStr + bases[baseIndex]\n    return baseNumStr", " \
    \   var result = \"\"\n    var remainder = x % base\n    while remainder != 0\
    \ {\n        result = String(remainder) + result\n        remainder = x % base\n\
    \        x /= base\n    }\n    return String(result)", "    var result = \"\"\n\
    \    var remainder = x % base\n    while remainder != 0 {\n        result = String(remainder)\
    \ + result\n        remainder = x % base\n        x /= base\n    }\n    return\
    \ String(result)", "    let digits = x.toInt()\n    let baseDigits = base.toInt()\n\
    \    var result = \"\"\n    var remainder = 0\n    var i = 0\n    while i < digits\
    \ {\n        remainder = digits % baseDigits\n        result = String(remainder)\
    \ + result\n        digits = digits / baseDigits\n        i += 1\n    }\n    return\
    \ result", "    var result = \"\"\n    var remainder = x % base\n    while remainder\
    \ != 0 {\n        result = String(remainder) + result\n        remainder = x %\
    \ base\n    }\n    return String(base)", "    var result = \"\"\n    var remainder\
    \ = x % base\n    while remainder != 0 {\n        result = String(remainder) +\
    \ result\n        remainder = x % base\n    }\n    return String(base)", "   \
    \ let bases = Array(1...base).map { String($0) }\n    var result = \"\"\n    var\
    \ i = 0\n    while i < x.toInt().toString(base).count {\n        let digit = x.toInt().toString(base).substring(i,\
    \ i + 1)\n        if let index = bases.index(of: digit) {\n            result\
    \ = result + bases[index]\n        } else {\n            result = result + digit\n\
    \        }\n        i = i + 1\n    }\n    return result", "    let baseString\
    \ = String(base)\n    var result: String = \"\"\n    var remainder: Int = 0\n\
    \    var digit: Int = 0\n    var digitString: String = \"\"\n    var digitStringString:\
    \ String = \"\"\n    var digitStringStringString: String = \"\"\n    var digitStringStringStringString:\
    \ String = \"\"\n    var digitStringStringStringStringString: String = \"\"\n\
    \    var digitStringStringStringStringStringString: String = \"\"\n    var digitStringStringStringStringStringStringString:\
    \ String = \"\"\n    var digitStringStringStringStringStringStringStringString:\
    \ String = \"\"\n    var digitStringStringStringStringStringStringStringStringString:\
    \ String = \"\"\n    var digitStringStringStringStringStringStringStringStringStringString:\
    \ String = \"\"\n    var digitStringStringStringStringStringStringStringStringStringStringString:\
    \ String = \"\"\n    var digitStringStringStringStringStringStringStringStringStringStringString:\
    \ String = \"\"\n    var digitStringStringStringStringStringStringStringStringStringStringStringString:\
    \ String = \"\"\n    var digitStringStringStringStringStringStringStringStringStringStringStringString:\
    \ String = \"\"\n    var digitStringStringStringStringStringStringStringStringStringStringStringString:\
    \ String = \"\"\n    var digitStringStringStringStringStringStringStringStringStringStringStringStringString:\
    \ String = \"\"\n    var digitStringStringStringStringStringStringStringStringStringStringStringStringString:\
    \ String = \"\"\n    var digitStringStringStringStringStringStringStringStringStringStringStringStringString:\
    \ String = \"\"\n    var digitStringStringStringStringStringStringStringStringStringStringStringStringString:\
    \ String = \"\"\n    var digitStringStringStringStringStringStringStringStringStringStringStringStringString:\
    \ String = \"\"\n    var digitStringStringStringStringStringStringStringStringStringStringStringStringString:\
    \ String = \"\"\n    var digitStringStringStringStringStringStringStringStringStringStringStringStringString:\
    \ String = \"\"\n    var digitStringStringStringStringStringStringStringStringStringStringStringStringString:\
    \ String = \"\"\n    var digitStringStringStringStringStringStringStringStringStringStringStringStringString:\
    \ String = \"\"\n    var digitStringStringStringStringStringStringStringStringStringStringStringStringString:\
    \ String = \"\"\n    var digitStringStringStringStringStringStringStringStringStringStringStringStringString:\
    \ String = \"\"\n    var digitStringStringStringStringStringStringStringStringStringStringStringStringString:\
    \ String = \"\"\n    var digitStringStringStringStringStringStringStringStringStringStringStringStringString:\
    \ String = \"\"\n    var digitStringStringStringStringStringStringStringStringStringStringStringStringStringString:\
    \ String = \"\"\n    var digitStringStringStringStringStringStringStringStringStringStringStringStringString:\
    \ String = \"\"\n    var digitStringStringStringStringStringStringStringStringStringStringStringStringStringString:\
    \ String = \"\"\n    var digitStringStringStringStringStringStringStringString",
  "    var result = \"\"\n    var remainder = x % base\n    while remainder != 0 {\n\
    \        result = String(remainder) + result\n        remainder = x % base\n \
    \       x /= base\n    }\n    return String(result)", "    let baseDigits = baseDigits(base)\n\
    \    var result = \"\"\n    var remainder = x % base\n    for digit in baseDigits\
    \ {\n        if remainder > 0 {\n            result += String(remainder % base)\n\
    \            remainder = remainder / base\n        } else {\n            result\
    \ += String(digit)\n        }\n    }\n    if remainder > 0 {\n        result +=\
    \ String(remainder)\n    }\n    return result", "    var result = \"\"\n    var\
    \ remainder: Int\n    var quotient: Int\n    var quotientString: String\n    var\
    \ remainderString: String\n    var quotientStringDigits: [String] = []\n    var\
    \ remainderStringDigits: [String] = []\n    var quotientStringDigit: Int\n   \
    \ var remainderStringDigit: Int\n    var quotientStringDigitString: String\n \
    \   var remainderStringDigitString: String\n    var quotientStringDigitStringDigits:\
    \ [String] = []\n    var remainderStringDigitStringDigits: [String] = []\n   \
    \ var quotientStringDigitStringDigit: Int\n    var remainderStringDigitStringDigit:\
    \ Int\n    var quotientStringDigitStringDigitString: String\n    var remainderStringDigitStringDigitString:\
    \ String\n    var quotientStringDigitStringDigitStringDigits: [String] = []\n\
    \    var remainderStringDigitStringDigitStringDigits: [String] = []\n    var quotientStringDigitStringDigitStringDigit:\
    \ Int\n    var remainderStringDigitStringDigitStringDigit: Int\n    var quotientStringDigitStringDigitStringDigitString:\
    \ String\n    var remainderStringDigitStringDigitStringDigitString: String\n \
    \   var quotientStringDigitStringDigitStringDigitStringDigits: [String] = []\n\
    \    var remainderStringDigitStringDigitStringDigitStringDigits: [String] = []\n\
    \    var quotientStringDigitStringDigitStringDigitStringDigit: Int\n    var remainderStringDigitStringDigitStringDigitStringDigit:\
    \ Int\n    var quotientStringDigitStringDigitStringDigitStringDigitString: String\n\
    \    var remainderStringDigitStringDigitStringDigitStringDigitString: String\n\
    \    var quotientStringDigitStringDigitStringDigitStringDigitStringDigits: [String]\
    \ = []\n    var remainderStringDigitStringDigitStringDigitStringDigitStringDigits:\
    \ [String] = []\n    var quotientStringDigitStringDigitStringDigitStringDigitStringDigit:\
    \ Int\n    var remainderStringDigitStringDigitStringDigitStringDigitStringDigit:\
    \ Int\n    var quotientStringDigitStringDigitStringDigitStringDigitStringDigitString:\
    \ String\n    var remainderStringDigitStringDigitStringDigitStringDigitStringDigitString:\
    \ String\n    var quotientStringDigitStringDigitStringDigitStringDigitStringDigitStringDigits:\
    \ [String] = []\n    var remainderStringDigitStringDigitStringDigitStringDigitStringDigitStringDigits:\
    \ [String] = []\n    var quotientStringDigitStringDigitStringDigitStringDigitStringDigitStringDigit:\
    \ Int\n    var remainderStringDigitStringDigitStringDigitStringDigitStringDigitStringDigit:\
    \ Int\n    var quotientStringDigitStringDigitStringDigitStringDigitStringDigitStringDigitString:\
    \ String\n    var remainderStringDigitStringDigitStringDigitStringDigitStringDigitStringDigitString:\
    \ String\n    var quotientString", "    var result = \"\"\n    var remainder =\
    \ x % base\n    while remainder != 0 {\n        result = String(remainder) + result\n\
    \        remainder = x % base\n        x /= base\n    }\n    return String(result)",
  "    if base < 10 {\n        return String(format: \"%0\" + String(base) + \"d\"\
    , x)\n    }\n    var result = \"\"\n    var remainder = x\n    var divisor = base\n\
    \    while remainder > 0 {\n        remainder, remainder = remainder / divisor,\
    \ divisor\n        result += String(format: \"%0\" + String(base) + \"d\", remainder)\n\
    \    }\n    return result", "    let bases = [\"\", \"0\", \"1\", \"2\", \"3\"\
    , \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"a\", \"b\", \"c\", \"d\", \"e\"\
    , \"f\"]\n    let basesReversed = bases.reverse()\n    let basesReversedCount\
    \ = bases.count\n    let basesReversedCount2 = basesReversed.count\n    let basesReversedCount3\
    \ = basesReversedCount * 2\n    let basesReversedCount4 = basesReversedCount3\
    \ * 2\n    let basesReversedCount5 = basesReversedCount4 * 2\n    let basesReversedCount6\
    \ = basesReversedCount5 * 2\n    let basesReversedCount7 = basesReversedCount6\
    \ * 2\n    let basesReversedCount8 = basesReversedCount7 * 2\n    let basesReversedCount9\
    \ = basesReversedCount8 * 2\n    let basesReversedCount10 = basesReversedCount9\
    \ * 2\n    let basesReversedCount11 = basesReversedCount10 * 2\n    let basesReversedCount12\
    \ = basesReversedCount11 * 2\n    let basesReversedCount13 = basesReversedCount12\
    \ * 2\n    let basesReversedCount14 = basesReversedCount13 * 2\n    let basesReversedCount15\
    \ = basesReversedCount14 * 2\n    let basesReversedCount16 = basesReversedCount15\
    \ * 2\n    let basesReversedCount17 = basesReversedCount16 * 2\n    let basesReversedCount18\
    \ = basesReversedCount17 * 2\n    let basesReversedCount19 = basesReversedCount18\
    \ * 2\n    let basesReversedCount20 = basesReversedCount19 * 2\n    let basesReversedCount21\
    \ = basesReversedCount20 * 2\n    let basesReversedCount22 = basesReversedCount21\
    \ * 2\n    let basesReversedCount23 = basesReversedCount22 * 2\n    let basesReversedCount24\
    \ = basesReversedCount23 * 2\n    let basesReversedCount25 = basesReversedCount24\
    \ * 2\n    let basesReversedCount26 = basesReversedCount25 * 2\n    let basesReversedCount27\
    \ = basesReversedCount26 * 2\n    let basesReversedCount28 = basesReversedCount27\
    \ * 2\n    let basesReversedCount29 = basesReversedCount28 * 2\n    let basesReversedCount",
  "    let digits = x.toInt()\n    var result = \"\"\n    for _ in 0..<digits {\n\
    \        let digit = digits % base\n        digits = digits / base\n        result\
    \ = String(digit) + result\n    }\n    return result", "    let baseDigits = baseDigits(base)\n\
    \    var result: String = \"\"\n    var remainder: Int = 0\n    var digit: Int\
    \ = 0\n    var digits: String = \"\"\n    var digitBase: Int = 0\n    var digitBaseDigits:\
    \ String = \"\"\n    var digitBaseDigit: Int = 0\n    var digitBaseDigits: String\
    \ = \"\"\n    var digitBaseDigit: Int = 0\n    var digitBaseDigits: String = \"\
    \"\n    var digitBaseDigit: Int = 0\n    var digitBaseDigits: String = \"\"\n\
    \    var digitBaseDigit: Int = 0\n    var digitBaseDigits: String = \"\"\n   \
    \ var digitBaseDigit: Int = 0\n    var digitBaseDigits: String = \"\"\n    var\
    \ digitBaseDigit: Int = 0\n    var digitBaseDigits: String = \"\"\n    var digitBaseDigit:\
    \ Int = 0\n    var digitBaseDigits: String = \"\"\n    var digitBaseDigit: Int\
    \ = 0\n    var digitBaseDigits: String = \"\"\n    var digitBaseDigit: Int = 0\n\
    \    var digitBaseDigits: String = \"\"\n    var digitBaseDigit: Int = 0\n   \
    \ var digitBaseDigits: String = \"\"\n    var digitBaseDigit: Int = 0\n    var\
    \ digitBaseDigits: String = \"\"\n    var digitBaseDigit: Int = 0\n    var digitBaseDigits:\
    \ String = \"\"\n    var digitBaseDigit: Int = 0\n    var digitBaseDigits: String\
    \ = \"\"\n    var digitBaseDigit: Int = 0\n    var digitBaseDigits: String = \"\
    \"\n    var digitBaseDigit: Int = 0\n    var digitBaseDigits: String = \"\"\n\
    \    var digitBaseDigit: Int = 0\n    var digitBaseDigits: String = \"\"\n   \
    \ var digitBaseDigit: Int = 0\n    var digitBaseDigits: String = \"\"\n    var\
    \ digitBaseDigit: Int = 0\n    var digitBaseDigits: String = \"\"\n    var digitBaseDigit:\
    \ Int = 0\n    var digitBaseDigits: String = \"\"\n    var digitBaseDigit: Int\
    \ = 0\n    var digitBaseDigits: String = \"\"\n    var digitBaseDigit: Int = 0\n\
    \    var digitBaseDigits: String = \"\"\n    var digitBaseDigit: Int = 0\n   \
    \ var digitBaseDigits: String = \"\"\n    var digitBaseDigit: Int = 0\n    var\
    \ digitBaseDigits: String = \"\"\n    var digitBaseDigit: Int = 0\n    var digitBaseDigits:\
    \ String = \"\"\n    var digitBaseDigit: Int = 0\n    var digitBaseDigits: String\
    \ = \"\"\n    var digitBaseDigit: Int = 0\n    var digitBaseDigits: String = \"\
    \"\n    var digitBaseDigit: Int = 0\n    var digitBaseDigits: String = \"\"\n\
    \    var digitBaseDigit: Int = 0\n    var digitBaseDigits: String = \"\"\n   \
    \ var digitBaseDigit: Int = 0\n    var digitBaseDigits: String = \"\"\n", "  \
    \  let bases = [\"\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\",\
    \ \"8\", \"9\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\n    let basesLen =\
    \ bases.count\n    let baseIndex = bases.firstIndex(of: base)\n    if baseIndex\
    \ == -1 {\n        return \"Invalid base\"\n    }\n    let baseString = bases[baseIndex!]\n\
    \    let baseStringLen = baseString.count\n    let baseStringIndex = x.toInt().toInt()\n\
    \    let baseStringIndex = baseStringIndex / baseStringLen\n    let baseStringIndex\
    \ = baseStringIndex % baseStringLen\n    let baseStringIndex = baseStringIndex\
    \ + baseStringLen\n    let baseStringIndex = baseStringIndex + baseStringLen\n\
    \    let baseStringIndex = baseStringIndex + baseStringLen\n    let baseStringIndex\
    \ = baseStringIndex + baseStringLen\n    let baseStringIndex = baseStringIndex\
    \ + baseStringLen\n    let baseStringIndex = baseStringIndex + baseStringLen\n\
    \    let baseStringIndex = baseStringIndex + baseStringLen\n    let baseStringIndex\
    \ = baseStringIndex + baseStringLen\n    let baseStringIndex = baseStringIndex\
    \ + baseStringLen\n    let baseStringIndex = baseStringIndex + baseStringLen\n\
    \    let baseStringIndex = baseStringIndex + baseStringLen\n    let baseStringIndex\
    \ = baseStringIndex + baseStringLen\n    let baseStringIndex = baseStringIndex\
    \ + baseStringLen\n    let baseStringIndex = baseStringIndex + baseStringLen\n\
    \    let baseStringIndex = baseStringIndex + baseStringLen\n    let baseStringIndex\
    \ = baseStringIndex + baseStringLen\n    let baseStringIndex = baseStringIndex\
    \ + baseStringLen\n    let baseStringIndex = baseStringIndex + baseStringLen\n\
    \    let baseStringIndex = baseStringIndex + baseStringLen\n    let baseStringIndex\
    \ = baseStringIndex + baseStringLen\n    let baseStringIndex = baseStringIndex\
    \ + baseStringLen\n    let baseStringIndex = baseStringIndex + baseStringLen\n\
    \    let baseStringIndex = baseStringIndex + baseStringLen\n    let baseStringIndex\
    \ = baseStringIndex + baseStringLen\n    let baseStringIndex = baseStringIndex\
    \ + baseStringLen\n    let baseStringIndex = baseStringIndex + baseStringLen\n\
    \    let baseStringIndex = baseStringIndex + baseStringLen\n    let baseStringIndex\
    \ = baseStringIndex + baseStringLen\n    let baseStringIndex = baseStringIndex\
    \ + baseStringLen\n    let baseStringIndex = baseStringIndex + baseStringLen\n\
    \    let baseStringIndex = baseStringIndex + baseStringLen\n    let baseStringIndex\
    \ = baseStringIndex + baseStringLen\n    let baseStringIndex = baseStringIndex\
    \ + baseString", "    var result = \"\"\n    var remainder = x % base\n    while\
    \ remainder != 0 {\n        result = String(remainder) + result\n        remainder\
    \ = x % base\n        x /= base\n    }\n    return String(result)", "    var result\
    \ = \"\"\n    var digits = \"\"\n    var remainder = x % base\n    for _ in 0..<base\
    \ {\n        digits = \"0\" + String(remainder)\n        remainder = Int(String(digits[1...]).dropLast())\n\
    \    }\n    for _ in 0..<base {\n        result += String(digits[0..<base])\n\
    \    }\n    return result", "    var result = \"\"\n    var remainder = x % base\n\
    \    while remainder != 0 {\n        result = String(remainder) + result\n   \
    \     remainder = x % base\n        x /= base\n    }\n    return String(result)",
  "    var result = \"\"\n    var remainder = x % base\n    while remainder != 0 {\n\
    \        result = String(remainder) + result\n        remainder = x % base\n \
    \   }\n    return String(base)", "    let baseDigits = base.digits\n    var digits\
    \ = x.digits\n    var baseDigit = baseDigits.first!\n    var result = \"\"\n \
    \   var carry = 0\n    for digit in digits {\n        let digitValue = digit.value\
    \ % baseDigit\n        digit.value = digitValue + carry\n        carry = digitValue\
    \ / baseDigit\n        result += digit.stringValue\n    }\n    if carry > 0 {\n\
    \        result += \"0\"\n    }\n    return String(result)", "    var result =\
    \ \"\"\n    var remainder: Int\n    var quotient: Int\n\n    if base < 2 {\n \
    \       return \"\"\n    }\n\n    if base == 2 {\n        if x == 0 {\n      \
    \      return \"0\"\n        }\n        if x == 1 {\n            return \"1\"\n\
    \        }\n        if x == 2 {\n            return \"2\"\n        }\n       \
    \ if x == 3 {\n            return \"3\"\n        }\n        if x == 4 {\n    \
    \        return \"4\"\n        }\n        if x == 5 {\n            return \"5\"\
    \n        }\n        if x == 6 {\n            return \"6\"\n        }\n      \
    \  if x == 7 {\n            return \"7\"\n        }\n        if x == 8 {\n   \
    \         return \"8\"\n        }\n        if x == 9 {\n            return \"\
    9\"\n        }\n        if x == 10 {\n            return \"A\"\n        }\n  \
    \      if x == 11 {\n            return \"B\"\n        }\n        if x == 12 {\n\
    \            return \"C\"\n        }\n        if x == 13 {\n            return\
    \ \"D\"\n        }\n        if x == 14 {\n            return \"E\"\n        }\n\
    \        if x == 15 {\n            return \"F\"\n        }\n        if x == 16\
    \ {\n            return \"G\"\n        }\n        if x == 17 {\n            return\
    \ \"H\"\n        }\n        if x == 18 {\n            return \"I\"\n        }\n\
    \        if x == 19 {\n            return \"J\"\n        }\n        if x == 20\
    \ {\n            return \"K\"\n        }\n        if x == 21 {\n            return\
    \ \"L\"\n        }\n        if x == 22 {\n            return \"M\"\n        }\n\
    \        if x == 23 {\n            return \"N\"\n        }\n        if x == 24\
    \ {\n            return \"O\"\n        }\n        if x == 25 {\n            return\
    \ \"P\"\n        }\n        if x == 26 {\n            return \"Q\"\n        }\n\
    \        if x == 27 {\n            return \"R\"\n        }\n        if x == 28\
    \ {\n            return \"S\"\n        }\n        if x == 29 {\n            return\
    \ \"T\"\n        }\n        if x == 30 {\n            return \"U\"\n        }\n\
    \        if x == 31 {\n            return \"V\"\n        }\n        if x == 32\
    \ {\n            return \"W\"\n        }\n        if x == 33 {\n            return\
    \ \"X\"\n        }\n        if x == 34 {\n            return \"Y\"\n        }\n\
    \        if x == 35 {\n            return \"Z\"\n        }\n        if x == 36\
    \ {\n            return \"0\"\n        }\n        if x == 37 {\n            return\
    \ \"1\"\n        }\n        if x == 38 {\n            return \"2\"\n        }\n\
    \        if x == 39 {\n            return \"3\"\n        }\n        if x == 40\
    \ {\n            return \"4\"\n        }\n        if x == 41 {\n            return\
    \ \"5\"\n        }\n        if x == 42 {\n            return \"6\"\n        }\n\
    \        if x == 43 {\n            return \"7\"\n        }\n        if x == 44\
    \ {\n            return \"8\"\n        }\n        if ", "    let base10 = \"0123456789ABCDEF\"\
    \n    let base16 = \"0123456789ABCDEF\"\n    let base16upper = \"0123456789ABCDEF\"\
    \n    let base16lower = \"0123456789abcdef\"\n    let base16upperupper = \"0123456789ABCDEF\"\
    \n    let base16upperlower = \"0123456789abcdef\"\n    let base16lowerupper =\
    \ \"0123456789abcdef\"\n    let base16lowerlower = \"0123456789abcdef\"\n    let\
    \ base16upperupperupper = \"0123456789ABCDEF\"\n    let base16upperupperlower\
    \ = \"0123456789abcdef\"\n    let base16upperlowerupper = \"0123456789abcdef\"\
    \n    let base16upperlowerlower = \"0123456789abcdef\"\n    let base16lowerupperupper\
    \ = \"0123456789abcdef\"\n    let base16lowerupperlower = \"0123456789abcdef\"\
    \n    let base16lowerlowerupper = \"0123456789abcdef\"\n    let base16lowerlowerlower\
    \ = \"0123456789abcdef\"\n    let base16upperupperupperupper = \"0123456789ABCDEF\"\
    \n    let base16upperupperupperlower = \"0123456789abcdef\"\n    let base16upperupperlowerupper\
    \ = \"0123456789abcdef\"\n    let base16upperupperlowerlower = \"0123456789abcdef\"\
    \n    let base16upperlowerupperupper = \"0123456789abcdef\"\n    let base16upperlowerlowerupper\
    \ = \"0123456789abcdef\"\n    let base16upperlowerlowerlower = \"0123456789abcdef\"\
    \n    let base16lowerupperupperupper = \"0123456789abcdef\"\n    let base16lowerupperupperupper\
    \ = \"0123456789abcdef\"\n    let base16lowerupperlowerupper = \"0123456789abcdef\"\
    \n    let base16lowerupperlowerlowerupper = \"0123456789abcdef\"\n    let base16lowerlowerupperupper\
    \ = \"0123456789abcdef\"\n    let base16lowerlowerlowerupper = \"0123456789abcdef\"\
    \n    let base16lowerlowerlowerupper = \"0123456789abcdef\"\n    let base16upperupperupperupperupper\
    \ = \"0123456789ABCDEF\"\n    let base16upperupperupperupperlower = \"0123456789abcdef\"\
    \n    let base16upperupperupperlowerupper = \"0123456789abcdef\"\n    let base16upperupperupperlowerlower\
    \ = \"0123456789abcdef\"\n    let base16upperupperlowerupperupper = \"0123456789abcdef\"\
    \n    let base16upperupperlowerlowerupper = \"0123456789abcdef\"\n    let base16upperlowerupperupper\
    \ = \"0123456789abcdef\"\n    let base16upperlowerupperupper = \"0123456789abcdef\"\
    \n    let base16upperlowerlowerupper = \"0123456789abcdef\"\n    let base16upperlowerlowerupper\
    \ = \"0123456789abcdef\"\n    let base16lowerupperupperupper = \"0123456789abcdef\"\
    \n    let base16lowerupperupperupper = \"0123456789abcdef\"\n    let base16lowerupperlowerupper\
    \ = \"0123456789abcdef\"\n    let base16lowerupperlowerupper = \"0123456789abcdef\"\
    \n", "    var result = \"\"\n    var remainder = x\n    var quotient = base\n\
    \    while quotient > 0 {\n        remainder = remainder % base\n        quotient\
    \ = quotient / base\n        result = String(remainder) + result\n    }\n    return\
    \ result", "    let digits = x.toInt()\n    let digits_base = digits.toInt()\n\
    \    let digits_base2 = digits_base * base\n    let digits_base3 = digits_base2\
    \ * base\n    let digits_base4 = digits_base3 * base\n    let digits_base5 = digits_base4\
    \ * base\n    let digits_base6 = digits_base5 * base\n    let digits_base7 = digits_base6\
    \ * base\n    let digits_base8 = digits_base7 * base\n    let digits_base9 = digits_base8\
    \ * base\n    let digits_base10 = digits_base9 * base\n    let digits_base11 =\
    \ digits_base10 * base\n    let digits_base12 = digits_base11 * base\n    let\
    \ digits_base13 = digits_base12 * base\n    let digits_base14 = digits_base13\
    \ * base\n    let digits_base15 = digits_base14 * base\n    let digits_base16\
    \ = digits_base15 * base\n    let digits_base17 = digits_base16 * base\n    let\
    \ digits_base18 = digits_base17 * base\n    let digits_base19 = digits_base18\
    \ * base\n    let digits_base20 = digits_base19 * base\n    let digits_base21\
    \ = digits_base20 * base\n    let digits_base22 = digits_base21 * base\n    let\
    \ digits_base23 = digits_base22 * base\n    let digits_base24 = digits_base23\
    \ * base\n    let digits_base25 = digits_base24 * base\n    let digits_base26\
    \ = digits_base25 * base\n    let digits_base27 = digits_base26 * base\n    let\
    \ digits_base28 = digits_base27 * base\n    let digits_base29 = digits_base28\
    \ * base\n    let digits_base30 = digits_base29 * base\n    let digits_base31\
    \ = digits_base30 * base\n    let digits_base32 = digits_base31 * base\n    let\
    \ digits_base33 = digits_base32 * base\n    let digits_base34 = digits_base33\
    \ * base\n    let digits_base35 = digits_base34 * base\n    let digits_base36\
    \ = digits_base35 * base\n    let digits_base37 = digits_base36 * base\n    let\
    \ digits_base38 = digits_base37 * base\n    let digits_base39 = digits_base38\
    \ * base\n    let digits_base40 = digits_base39 * base\n    let digits_base41\
    \ = "]
stop_tokens:
- "\n}"
