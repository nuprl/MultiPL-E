name: HumanEval_44_change_base
language: swift
prompt: "\n/// Change numerical base of input number x to base.\n/// return string\
  \ representation after the conversion.\n/// base numbers are less than 10.\n///\
  \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n/// >>>\
  \ change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\n\
  assert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x: 234, base:\
  \ 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x:\
  \ 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
  \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
  \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
  \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
completions: ["    let bases = Array(1...base).map(String.init)\n    let digits =\
    \ x.toInt()\n    let result = \"\"\n    for b in bases {\n        let digit =\
    \ digits % b\n        digits /= b\n        result += digit\n    }\n    return\
    \ result", "    let bases = [\"\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"\
    6\", \"7\", \"8\", \"9\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\n    let basesCount\
    \ = bases.count\n    let basesIndex = bases.startIndex\n    let basesCount = bases.count\n\
    \    let basesIndex = bases.startIndex\n    let basesCount = bases.count\n   \
    \ let basesIndex = bases.startIndex\n    let basesCount = bases.count\n    let\
    \ basesIndex = bases.startIndex\n    let basesCount = bases.count\n    let basesIndex\
    \ = bases.startIndex\n    let basesCount = bases.count\n    let basesIndex = bases.startIndex\n\
    \    let basesCount = bases.count\n    let basesIndex = bases.startIndex\n   \
    \ let basesCount = bases.count\n    let basesIndex = bases.startIndex\n    let\
    \ basesCount = bases.count\n    let basesIndex = bases.startIndex\n    let basesCount\
    \ = bases.count\n    let basesIndex = bases.startIndex\n    let basesCount = bases.count\n\
    \    let basesIndex = bases.startIndex\n    let basesCount = bases.count\n   \
    \ let basesIndex = bases.startIndex\n    let basesCount = bases.count\n    let\
    \ basesIndex = bases.startIndex\n    let basesCount = bases.count\n    let basesIndex\
    \ = bases.startIndex\n    let basesCount = bases.count\n    let basesIndex = bases.startIndex\n\
    \    let basesCount = bases.count\n    let basesIndex = bases.startIndex\n   \
    \ let basesCount = bases.count\n    let basesIndex = bases.startIndex\n    let\
    \ basesCount = bases.count\n    let basesIndex = bases.startIndex\n    let basesCount\
    \ = bases.count\n    let basesIndex = bases.startIndex\n    let basesCount = bases.count\n\
    \    let basesIndex = bases.startIndex\n    let basesCount = bases.count\n   \
    \ let basesIndex = bases.startIndex\n    let basesCount = bases.count\n    let\
    \ basesIndex = bases.startIndex\n    let basesCount = bases.count\n    let basesIndex\
    \ = bases.startIndex\n    let basesCount = bases.count\n    let basesIndex = bases.startIndex\n\
    \    let basesCount = bases.count\n    let basesIndex = bases.startIndex\n   \
    \ let basesCount = bases.count\n    let basesIndex = bases.startIndex\n    let\
    \ basesCount = bases.count\n    let basesIndex = bases.startIndex\n    let basesCount\
    \ = bases.count\n    let basesIndex = bases.startIndex\n    let basesCount = bases.",
  "    var result = \"\"\n    var remainder = x % base\n    while remainder != 0 {\n\
    \        result = String(remainder) + result\n        remainder = x % base\n \
    \       x /= base\n    }\n    return String(base)", "    var result = \"\"\n \
    \   var remainder = x % base\n    while remainder != 0 {\n        result = String(remainder)\
    \ + result\n        remainder = x % base\n    }\n    return String(base)", " \
    \   let bases = [\"\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"\
    , \"8\", \"9\"]\n    let baseIndex = bases.index(base)!\n    let baseDigit = bases[baseIndex]\n\
    \    let digits = x.toString(base: base).components(separatedBy: CharacterSet.decimalDigits.inverted)\n\
    \    return String(digits[baseIndex] + baseDigit)", "    let baseDigits = baseDigits(base)\n\
    \    var result = \"\"\n    var remainder = x % base\n    for digit in baseDigits\
    \ {\n        if remainder < baseDigits[digit] {\n            result += String(digit)\n\
    \            remainder *= base\n        } else {\n            result += String(digit)\n\
    \            remainder /= base\n        }\n    }\n    if remainder > 0 {\n   \
    \     result += \"0\"\n    }\n    return result", "    var result = \"\"\n   \
    \ var remainder = x % base\n    while remainder > 0 {\n        result = String(remainder)\
    \ + result\n        remainder = x % base\n    }\n    if remainder > 0 {\n    \
    \    result = String(remainder) + result\n    }\n    return result", "    var\
    \ result = \"\"\n    var remainder = x % base\n    while remainder != 0 {\n  \
    \      result = String(remainder) + result\n        remainder = x % base\n   \
    \     x /= base\n    }\n    if x > 0 {\n        result = String(base) + result\n\
    \    }\n    return result", "    var result = \"\"\n    var remainder = x % base\n\
    \    if remainder == 0 {\n        result = String(x / base)\n    } else {\n  \
    \      result = String(remainder) + String(x / base)\n    }\n    return result",
  "    let bases = [\"\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\",\
    \ \"8\", \"9\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\n    let basesLen =\
    \ bases.count\n    let baseIndex = bases.firstIndex(of: base)!\n    let baseChar\
    \ = bases[baseIndex]\n    let baseCharLen = baseChar.count\n    let baseCharIndex\
    \ = baseChar.firstIndex(of: x)!\n    let baseCharChar = baseChar[baseCharIndex]\n\
    \    let baseCharCharLen = baseCharChar.count\n    let baseCharCharIndex = baseCharChar.firstIndex(of:\
    \ \"0\")!\n    let baseCharCharChar = baseCharChar[baseCharCharIndex]\n    let\
    \ baseCharCharCharLen = baseCharCharChar.count\n    let baseCharCharCharIndex\
    \ = baseCharCharChar.firstIndex(of: \"\")!\n    let baseCharCharCharChar = baseCharCharChar[baseCharCharCharIndex]\n\
    \    let baseCharCharCharCharLen = baseCharCharCharChar.count\n    let baseCharCharCharCharIndex\
    \ = baseCharCharCharChar.firstIndex(of: \"\")!\n    let baseCharCharCharCharChar\
    \ = baseCharCharCharChar[baseCharCharCharCharIndex]\n    let baseCharCharCharCharLen\
    \ = baseCharCharCharCharChar.count\n    let baseCharCharCharCharCharIndex = baseCharCharCharCharChar.firstIndex(of:\
    \ \"\")!\n    let baseCharCharCharCharCharChar = baseCharCharCharCharChar[baseCharCharCharCharCharIndex]\n\
    \    let baseCharCharCharCharCharLen = baseCharCharCharCharCharChar.count\n  \
    \  let baseCharCharCharCharCharIndex = baseCharCharCharCharCharChar.firstIndex(of:\
    \ \"\")!\n    let baseCharCharCharCharCharChar = baseCharCharCharCharCharChar[baseCharCharCharCharCharCharIndex]\n\
    \    let baseCharCharCharCharCharCharLen = baseCharCharCharCharCharCharChar.count\n\
    \    let baseCharCharCharCharCharCharIndex = baseCharCharCharCharCharCharChar.firstIndex(of:\
    \ \"\")!\n    let baseCharCharCharCharCharCharChar = baseCharCharCharCharCharCharChar[baseCharCharCharCharCharCharCharIndex]\n\
    \    let baseCharCharCharCharCharCharLen = baseCharCharCharCharCharCharChar.count\n\
    \    let baseCharCharCharCharCharCharIndex = baseCharCharCharCharCharCharChar.firstIndex(of:\
    \ \"\")!\n    let baseCharCharCharCharCharCharChar = baseCharCharChar", "    if\
    \ base < 10 {\n        return String(x)\n    }\n    var result = \"\"\n    var\
    \ remainder = x % base\n    while remainder != 0 {\n        result = String(remainder)\
    \ + result\n        remainder = x % base\n        x /= base\n    }\n    return\
    \ String(result)", "    let bases = [\n        \"0\", \"1\", \"2\", \"3\", \"\
    4\", \"5\", \"6\", \"7\",\n        \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"\
    E\", \"F\"\n    ]\n    let basesReversed = [\n        \"F\", \"E\", \"D\", \"\
    C\", \"B\", \"A\", \"9\", \"8\",\n        \"7\", \"6\", \"5\", \"4\", \"3\", \"\
    2\", \"1\", \"0\"\n    ]\n    let basesReversedReversed = [\n        \"0\", \"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\",\n        \"8\", \"9\", \"A\", \"\
    B\", \"C\", \"D\", \"E\", \"F\"\n    ]\n    let basesReversedReversedReversed\
    \ = [\n        \"F\", \"E\", \"D\", \"C\", \"B\", \"A\", \"9\", \"8\",\n     \
    \   \"7\", \"6\", \"5\", \"4\", \"3\", \"2\", \"1\", \"0\"\n    ]\n    let basesReversedReversedReversedReversed\
    \ = [\n        \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\",\n     \
    \   \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"\n    ]\n    let basesReversedReversedReversedReversedReversed\
    \ = [\n        \"F\", \"E\", \"D\", \"C\", \"B\", \"A\", \"9\", \"8\",\n     \
    \   \"7\", \"6\", \"5\", \"4\", \"3\", \"2\", \"1\", \"0\"\n    ]\n    let basesReversedReversedReversedReversedReversedReversed\
    \ = [\n        \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\",\n     \
    \   \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"\n    ]\n    let basesReversedReversedReversedReversedReversedReversedReversed\
    \ = [\n        \"F\", \"E\", \"D\", \"C\", \"B\", \"A\", \"9\", \"8\",\n     \
    \   \"7\", \"6\", \"5\", \"4\", \"3\", \"2\", \"1\", \"0\"\n    ]\n    let basesReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = [\n        \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\",\n     \
    \   \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"\n    ]\n    let basesReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = [\n        \"F\", \"E\", \"D\", \"C\", \"B\", \"A\", \"9\", \"8\",\n     \
    \   \"7\", \"6\", \"5\", \"4\", \"3\", \"2\", \"1\", \"0\"\n    ]\n    let basesReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = [\n        \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\",\n     \
    \   \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"\n", "    let baseDigits\
    \ = base.digits\n    let digits = x.digits\n    var result = \"\"\n    for i in\
    \ 0..<baseDigits {\n        let digit = digits[i]\n        let baseDigit = baseDigits[i]\n\
    \        if digit > baseDigit {\n            result += String(digit - baseDigit\
    \ + base)\n        } else {\n            result += String(digit + base)\n    \
    \    }\n    }\n    return result", "    var result = \"\"\n    var digits = \"\
    \"\n    var baseDigits = \"\"\n    var baseDigitCount = 0\n    var digitCount\
    \ = 0\n    var digitBase = 0\n    var digitBaseCount = 0\n    var digitBaseDigitCount\
    \ = 0\n    var digitBaseDigit = 0\n    var digitBaseDigitCount2 = 0\n    var digitBaseDigit2\
    \ = 0\n    var digitBaseDigit2Count = 0\n    var digitBaseDigit3 = 0\n    var\
    \ digitBaseDigit3Count = 0\n    var digitBaseDigit4 = 0\n    var digitBaseDigit4Count\
    \ = 0\n    var digitBaseDigit5 = 0\n    var digitBaseDigit5Count = 0\n    var\
    \ digitBaseDigit6 = 0\n    var digitBaseDigit6Count = 0\n    var digitBaseDigit7\
    \ = 0\n    var digitBaseDigit7Count = 0\n    var digitBaseDigit8 = 0\n    var\
    \ digitBaseDigit8Count = 0\n    var digitBaseDigit9 = 0\n    var digitBaseDigit9Count\
    \ = 0\n    var digitBaseDigit10 = 0\n    var digitBaseDigit10Count = 0\n    var\
    \ digitBaseDigit11 = 0\n    var digitBaseDigit11Count = 0\n    var digitBaseDigit12\
    \ = 0\n    var digitBaseDigit12Count = 0\n    var digitBaseDigit13 = 0\n    var\
    \ digitBaseDigit13Count = 0\n    var digitBaseDigit14 = 0\n    var digitBaseDigit14Count\
    \ = 0\n    var digitBaseDigit15 = 0\n    var digitBaseDigit15Count = 0\n    var\
    \ digitBaseDigit16 = 0\n    var digitBaseDigit16Count = 0\n    var digitBaseDigit17\
    \ = 0\n    var digitBaseDigit17Count = 0\n    var digitBaseDigit18 = 0\n    var\
    \ digitBaseDigit18Count = 0\n    var digitBaseDigit19 = 0\n    var digitBaseDigit19Count\
    \ = 0\n    var digitBaseDigit20 = 0\n    var digitBaseDigit20Count = 0\n    var\
    \ digitBaseDigit21 = 0\n    var digitBaseDigit21Count = 0\n    var digitBaseDigit22\
    \ = 0\n    var digitBaseDigit22Count = 0\n    var digitBaseDigit23 = 0\n    var\
    \ digitBaseDigit23Count = 0\n    var digitBaseDigit24 = 0\n    var digitBaseDigit24Count\
    \ = 0\n    var digitBaseDigit25 = 0\n    var digitBaseDigit25Count = 0\n    var\
    \ digitBaseDigit26 = 0\n    var digitBaseDigit26Count = 0\n    var digitBaseDigit27\
    \ = 0\n    var digitBaseDigit27Count = 0\n    var digitBaseDigit28 = 0\n    var\
    \ digitBaseDigit28Count = 0\n    var digitBaseDigit29 = 0\n    var digitBaseDigit29Count\
    \ = 0\n    var digitBaseDigit30 = 0\n    var digitBaseDigit30Count = 0\n    var\
    \ digitBaseDigit31 = 0\n    var digitBaseDigit31Count = 0\n    var digitBaseDigit",
  '    let bases = ["", "K", "M", "B", "T", "Qa", "Qi", "Qo", "Qu", "Sa", "Se", "So",
    "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta",
    "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti",
    "To", "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti", "To",
    "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta",
    "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti",
    "To", "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti", "To",
    "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta",
    "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti",
    "To", "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti", "To",
    "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta",
    "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti",
    "To", "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti", "To",
    "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta",
    "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti",
    "To", "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti", "To",
    "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta",
    "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti",
    "To", "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti", "To",
    "Ta", "Ti", "To", "Ta", "Ti", "To", "Ta", "Ti", "', "    let bases = [\n     \
    \   \"0\",\n        \"1\",\n        \"2\",\n        \"3\",\n        \"4\",\n \
    \       \"5\",\n        \"6\",\n        \"7\",\n        \"8\",\n        \"9\"\
    ,\n        \"10\",\n        \"11\",\n        \"12\",\n        \"13\",\n      \
    \  \"14\",\n        \"15\",\n        \"16\",\n        \"17\",\n        \"18\"\
    ,\n        \"19\",\n        \"20\",\n        \"21\",\n        \"22\",\n      \
    \  \"23\",\n        \"24\",\n        \"25\",\n        \"26\",\n        \"27\"\
    ,\n        \"28\",\n        \"29\",\n        \"30\",\n        \"31\"\n    ]\n\
    \    let baseIndex = bases.index(base)!\n    let result = x.toString(baseIndex).reversed()\n\
    \    return String(result)", "    let baseDigits = String(base)\n    var result\
    \ = \"\"\n    var remainder = x\n    var digit = 0\n    while remainder > 0 {\n\
    \        remainder, remainder = remainder / base, digit\n        result = String(digit)\
    \ + result\n        digit += 1\n    }\n    return result", "    let baseDigits\
    \ = baseDigits(base)\n    var result = \"\"\n    var remainder = x\n    for digit\
    \ in baseDigits {\n        if remainder < 0 {\n            result += \"-\"\n \
    \           remainder = -remainder\n        }\n        result += digits[remainder\
    \ % base]\n        remainder = remainder / base\n    }\n    if remainder > 0 {\n\
    \        result += \"+\"\n        remainder = -remainder\n    }\n    result +=\
    \ digits[remainder]\n    return result", "    let digits = String(x.toInt())\n\
    \    let baseDigits = String(base.toInt())\n    var result = \"\"\n    for i in\
    \ 0..<digits.count {\n        let digit = digits[i]\n        let baseDigit = baseDigits[i]\n\
    \        if digit == baseDigit {\n            result += digit\n        } else\
    \ {\n            result += digit + baseDigit\n        }\n    }\n    return result",
  "    var result = \"\"\n    var remainder = x % base\n    while remainder != 0 {\n\
    \        result = String(remainder) + result\n        remainder = x % base\n \
    \       x /= base\n    }\n    return String(result)"]
stop_tokens:
- "\n}"
