name: HumanEval_62_derivative
language: swift
prompt: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x +\
  \ xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
  /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
  \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4,\
  \ 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3,\
  \ 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\
  assert(derivative(xs: [1]) == [] as [Int])"
completions: ["    var result = [Int]()\n    var i = 0\n    for x in xs {\n      \
    \  result.append(x * xs[i - 1])\n        i += 1\n    }\n    return result", " \
    \   var result = [Int]()\n    for x in xs {\n        result.append(x * x)\n  \
    \  }\n    return result", "    var result = [Int]()\n    var j = 0\n    for i\
    \ in xs {\n        result[j] = i\n        j++\n    }\n    result.reverse()\n \
    \   return result", "    var result = [Int]()\n    for x in xs {\n        result.append(x\
    \ * x)\n    }\n    return result", "    var result = [Int]()\n    for x in xs\
    \ {\n        result.append(x * x)\n    }\n    return result", "    var result\
    \ = [Int]()\n    for x in xs {\n        result.append(x * x)\n    }\n    return\
    \ result", "    var result = [Int]()\n    var power = 1\n    for x in xs {\n \
    \       result.append(power * x)\n        power *= x\n    }\n    return result",
  "    var result = [Int]()\n    var i = 0\n    for x in xs {\n        result.append(1)\n\
    \        result.append(x * result[i])\n        i += 1\n    }\n    return result",
  "    var result = [Int]()\n    for x in xs {\n        result.append(x * x)\n   \
    \ }\n    return result", "    var result = [Int]()\n    for x in xs {\n      \
    \  result.append(x * x)\n    }\n    return result", "    var result = [Int]()\n\
    \    for x in xs {\n        result.append(x * x)\n    }\n    return result", " \
    \   var result = [Int]()\n    var i = 0\n    for x in xs {\n        result.append(x\
    \ * xs[i])\n        i += 1\n    }\n    return result", "    var result = [Int]()\n\
    \    for x in xs {\n        result.append(x * x)\n    }\n    return result", " \
    \   var result = [Int]()\n    for x in xs {\n        result.append(x * x)\n  \
    \  }\n    return result", "    var result = [Int]()\n    for i in 0..<xs.count\
    \ {\n        result.append(xs[i] * xs[i])\n    }\n    return result", "    var\
    \ result = [Int]()\n    var x = 1\n    for _ in 0..<xs.count {\n        result.append(xs[xs.count\
    \ - 1])\n        x *= xs[xs.count - 1]\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 0..<xs.count {\n        result.append(xs[i])\n     \
    \   result.append(xs[i] * xs[i])\n    }\n    return result", "    var result =\
    \ [Int]()\n    for x in xs {\n        result.append(x * x)\n    }\n    return\
    \ result", "    var result = [Int]()\n    for x in xs {\n        result.append(x\
    \ * x)\n    }\n    return result", "    var result = [Int]()\n    var j = 0\n\
    \    for i in xs {\n        result[j] = i\n        j++\n    }\n    result.reverse()\n\
    \    return result"]
stop_tokens:
- "\n}"
