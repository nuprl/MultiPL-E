name: HumanEval_119_match_parens
language: swift
prompt: "\n/// You are given a list of two strings, both strings consist of open\n\
  /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
  \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
  \ string will be good.\n/// A string S is considered to be good if and only if all\
  \ parentheses in S\n/// are balanced. For example: the string '(())()' is good,\
  \ while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way to make\
  \ a good string, and return 'No' otherwise.\n/// Examples:\n/// match_parens(['()(',\
  \ ')']) == 'Yes'\n/// match_parens([')', ')']) == 'No'\nfunc match_parens(lst: [String])\
  \ -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(match_parens(lst: [\"()(\", \")\"]) == \"\
  Yes\")\nassert(match_parens(lst: [\")\", \")\"]) == \"No\")\nassert(match_parens(lst:\
  \ [\"(()(())\", \"())())\"]) == \"No\")\nassert(match_parens(lst: [\")())\", \"\
  (()()(\"]) == \"Yes\")\nassert(match_parens(lst: [\"(())))\", \"(()())((\"]) ==\
  \ \"Yes\")\nassert(match_parens(lst: [\"()\", \"())\"]) == \"No\")\nassert(match_parens(lst:\
  \ [\"(()(\", \"()))()\"]) == \"Yes\")\nassert(match_parens(lst: [\"((((\", \"((())\"\
  ]) == \"No\")\nassert(match_parens(lst: [\")(()\", \"(()(\"]) == \"No\")\nassert(match_parens(lst:\
  \ [\")(\", \")(\"]) == \"No\")\nassert(match_parens(lst: [\"(\", \")\"]) == \"Yes\"\
  )\nassert(match_parens(lst: [\")\", \"(\"]) == \"Yes\")"
completions: ["    var stack = Stack()\n    for s in lst {\n        if s == '(' {\n\
    \            stack.push(s)\n        } else if s == ')' {\n            if stack.top()\
    \ == '(' {\n                stack.pop()\n            } else {\n              \
    \  return \"No\"\n            }\n        } else {\n            return \"No\"\n\
    \        }\n    }\n    if stack.top() != nil {\n        return \"No\"\n    } else\
    \ {\n        return \"Yes\"\n    }", "    var stack = [String]()\n    var result\
    \ = \"No\"\n    for s in lst {\n        if s == \"(\" {\n            stack.append(s)\n\
    \        } else if s == \")\" {\n            if stack.isEmpty {\n            \
    \    result = \"Yes\"\n                break\n            } else {\n         \
    \       stack.removeLast()\n            }\n        } else {\n            if stack.isEmpty\
    \ {\n                result = \"Yes\"\n                break\n            }\n\
    \        }\n    }\n    return result", "    var stack = [String]()\n    for s\
    \ in lst {\n        if s == \"(\" {\n            stack.append(s)\n        } else\
    \ if s == \")\" {\n            if stack.count > 0 {\n                stack.removeLast()\n\
    \            } else {\n                return \"No\"\n            }\n        }\
    \ else {\n            return \"No\"\n        }\n    }\n    if stack.count > 0\
    \ {\n        return \"No\"\n    } else {\n        return \"Yes\"\n    }", "  \
    \  var stack = [String]()\n    var result = \"No\"\n    for s in lst {\n     \
    \   if s == \"(\" {\n            stack.append(s)\n        } else if s == \")\"\
    \ {\n            if stack.isEmpty {\n                result = \"No\"\n       \
    \         break\n            }\n            stack.removeLast()\n        } else\
    \ {\n            if stack.isEmpty {\n                result = \"Yes\"\n      \
    \          break\n            }\n            stack.removeLast()\n            stack.append(s)\n\
    \        }\n    }\n    return result", "    var stack = [String]()\n    var result\
    \ = \"No\"\n    for s in lst {\n        if s == \"(\" {\n            stack.append(s)\n\
    \        } else if s == \")\" {\n            if stack.count > 0 {\n          \
    \      stack.removeLast()\n            } else {\n                result = \"Yes\"\
    \n            }\n        }\n    }\n    return result", "    var stack = [String]()\n\
    \    var result = \"No\"\n    for s in lst {\n        if s == \"(\" {\n      \
    \      stack.append(s)\n        } else if s == \")\" {\n            if stack.isEmpty\
    \ {\n                result = \"Yes\"\n                break\n            }\n\
    \            stack.removeLast()\n        }\n    }\n    return result", "    var\
    \ stack = Stack()\n    for s in lst {\n        if s == '(' {\n            stack.push(s)\n\
    \        } else if s == ')' {\n            if stack.top() == '(' {\n         \
    \       stack.pop()\n            } else {\n                return \"No\"\n   \
    \         }\n        } else {\n            return \"No\"\n        }\n    }\n \
    \   if stack.top() != nil {\n        return \"No\"\n    } else {\n        return\
    \ \"Yes\"\n    }", "    var stack = [String]()\n    var result = \"No\"\n    for\
    \ s in lst {\n        if s == \"(\" {\n            stack.append(s)\n        }\
    \ else if s == \")\" {\n            if stack.isEmpty {\n                result\
    \ = \"Yes\"\n                break\n            }\n            stack.removeLast()\n\
    \        } else {\n            if stack.isEmpty {\n                result = \"\
    Yes\"\n                break\n            }\n            stack.removeLast()\n\
    \            stack.append(s)\n        }\n    }\n    return result", "    var stack\
    \ = [String]()\n    var result = \"No\"\n    for s in lst {\n        if s.contains(\"\
    (\") {\n            stack.append(s)\n        } else {\n            if stack.count\
    \ > 0 {\n                if stack[stack.count - 1] == s {\n                  \
    \  stack.removeLast()\n                } else {\n                    result =\
    \ \"No\"\n                    break\n                }\n            } else {\n\
    \                result = \"Yes\"\n                break\n            }\n    \
    \    }\n    }\n    return result", "    var stack = Stack()\n    var result =\
    \ \"No\"\n    for s in lst {\n        if s == \"(\" || s == \")\" {\n        \
    \    stack.push(s)\n        } else {\n            if stack.len() == 0 {\n    \
    \            result = \"No\"\n                break\n            }\n         \
    \   result == \"Yes\"\n        }\n    }\n    return result", "    var stack =\
    \ [String]()\n    var result = \"No\"\n    for s in lst {\n        if s.contains(\"\
    (\") {\n            stack.append(s)\n        } else if s.contains(\")\") {\n \
    \           if stack.count > 0 {\n                stack.removeLast()\n       \
    \     } else {\n                result = \"Yes\"\n            }\n        }\n \
    \   }\n    return result", "    var stack = Stack()\n    for s in lst {\n    \
    \    if s == '(' {\n            stack.push(s)\n        } else if s == ')' {\n\
    \            if stack.top() == '(' {\n                stack.pop()\n          \
    \  } else {\n                return \"No\"\n            }\n        } else {\n\
    \            return \"No\"\n        }\n    }\n    if stack.top() != nil {\n  \
    \      return \"No\"\n    } else {\n        return \"Yes\"\n    }", "    var stack\
    \ = Stack()\n    var res = \"\"\n    for s in lst {\n        if s == \"(\" ||\
    \ s == \")\" {\n            stack.push(s)\n        } else {\n            if stack.len()\
    \ == 0 {\n                res += s\n            } else {\n                let\
    \ top = stack.top()\n                if top == \"(\" && s == \"(\" || top == \"\
    (\" && s == \")\" {\n                    stack.pop()\n                } else {\n\
    \                    res += top\n                }\n            }\n        }\n\
    \    }\n    return res == \"\" ? \"No\" : \"Yes\"", "    var stack = [String]()\n\
    \    var result = \"No\"\n    for s in lst {\n        if s.contains(\"(\") {\n\
    \            stack.append(s)\n        } else if s.contains(\")\") {\n        \
    \    if stack.count > 0 {\n                stack.removeLast()\n            } else\
    \ {\n                result = \"Yes\"\n            }\n        }\n    }\n    return\
    \ result", "    var stack = [String]()\n    var result = \"No\"\n    for s in\
    \ lst {\n        if s == \"(\" {\n            stack.append(s)\n        } else\
    \ if s == \")\" {\n            if stack.isEmpty {\n                result = \"\
    Yes\"\n                break\n            } else {\n                stack.removeLast()\n\
    \            }\n        }\n    }\n    return result", "    var stack = [String]()\n\
    \    var result = \"No\"\n    for s in lst {\n        if s == \"(\" {\n      \
    \      stack.append(s)\n        } else if s == \")\" {\n            if stack.isEmpty\
    \ {\n                result = \"Yes\"\n                break\n            } else\
    \ {\n                stack.removeLast()\n            }\n        }\n    }\n   \
    \ return result", "    var stack = [String]()\n    var result = \"No\"\n    for\
    \ s in lst {\n        if s == \"(\" {\n            stack.append(s)\n        }\
    \ else if s == \")\" {\n            if stack.isEmpty {\n                result\
    \ = \"Yes\"\n                break\n            } else {\n                stack.removeLast()\n\
    \            }\n        } else {\n            if stack.isEmpty {\n           \
    \     result = \"Yes\"\n                break\n            }\n        }\n    }\n\
    \    return result", "    var stack = [String]()\n    var result = \"No\"\n  \
    \  for s in lst {\n        if s == \"(\" {\n            stack.append(s)\n    \
    \    } else if s == \")\" {\n            if stack.isEmpty {\n                result\
    \ = \"Yes\"\n                break\n            }\n            stack.removeLast()\n\
    \        } else {\n            if stack.isEmpty {\n                result = \"\
    Yes\"\n                break\n            }\n            stack.removeLast()\n\
    \            stack.append(s)\n        }\n    }\n    return result", "    guard\
    \ lst.count >= 2 else { return \"No\" }\n    guard lst[0] == \")\" && lst[1] ==\
    \ \")\" else { return \"No\" }\n    var stack = [String]()\n    var result = \"\
    No\"\n    for str in lst {\n        if str == \"(\" {\n            stack.append(str)\n\
    \        } else if str == \")\" {\n            if stack.count > 0 {\n        \
    \        stack.removeLast()\n            } else {\n                result = \"\
    Yes\"\n            }\n        }\n    }\n    return result", "    var stack = [String]()\n\
    \    var result = \"No\"\n    for s in lst {\n        if s == \"(\" || s == \"\
    )\" {\n            if stack.isEmpty {\n                result = \"Yes\"\n    \
    \            break\n            }\n            if stack[stack.count - 1] == s\
    \ {\n                stack.removeLast()\n            } else {\n              \
    \  result = \"No\"\n                break\n            }\n        } else {\n \
    \           stack.append(s)\n        }\n    }\n    return result"]
stop_tokens:
- "\n}"
