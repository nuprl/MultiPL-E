language: swift
name: HumanEval_71_triangle_area
results:
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3 = sqrt(pow(c, 2) +\
    \ pow(a, 2))\n    let area = (side1 + side2 + side3) / 2.0\n    if area > 0.0\
    \ {\n        return round(area, 2)\n    } else {\n        return -1.0\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpp2abx4b3.swift:11:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmpp2abx4b3.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmpp2abx4b3.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmpp2abx4b3.swift:12:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmpp2abx4b3.swift:12:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmpp2abx4b3.swift:12:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmpp2abx4b3.swift:13:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmpp2abx4b3.swift:13:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmpp2abx4b3.swift:13:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmpp2abx4b3.swift:16:16: error: cannot find 'round' in\
    \ scope\n        return round(area, 2)\n               ^~~~~\n"
  stdout: ''
  timestamp: 1660014764
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    var sum: Double = 0\n    sum += a\n  \
    \  sum += b\n    sum += c\n    if sum > c {\n        return Double(sum - c) /\
    \ 2\n    } else {\n        return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpqbo59ss1.swift:12:12: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n    sum += a\n           ^\n           Double(\
    \ )\n/tmp/tmpqbo59ss1.swift:13:12: error: cannot convert value of type 'Int' to\
    \ expected argument type 'Double'\n    sum += b\n           ^\n           Double(\
    \ )\n/tmp/tmpqbo59ss1.swift:14:12: error: cannot convert value of type 'Int' to\
    \ expected argument type 'Double'\n    sum += c\n           ^\n           Double(\
    \ )\n/tmp/tmpqbo59ss1.swift:15:12: error: binary operator '>' cannot be applied\
    \ to operands of type 'Double' and 'Int'\n    if sum > c {\n       ~~~ ^ ~\n/tmp/tmpqbo59ss1.swift:15:12:\
    \ note: overloads for '>' exist with these partially matching parameter lists:\
    \ (Int, Int)\n    if sum > c {\n           ^\n/tmp/tmpqbo59ss1.swift:16:27: error:\
    \ binary operator '-' cannot be applied to operands of type 'Double' and 'Int'\n\
    \        return Double(sum - c) / 2\n                      ~~~ ^ ~\n/tmp/tmpqbo59ss1.swift:16:27:\
    \ note: overloads for '-' exist with these partially matching parameter lists:\
    \ (Double, Double), (Int, Int)\n        return Double(sum - c) / 2\n         \
    \                 ^\n"
  stdout: ''
  timestamp: 1660014764
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let a = abs(a)\n    let b = abs(b)\n \
    \   let c = abs(c)\n    let s = a + b + c\n    if s > 0 {\n        let area =\
    \ sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    }\
    \ else {\n        return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b:\
    \ 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpshwggy1v.swift:16:20: error: cannot find 'sqrt' in scope\n    \
    \    let area = sqrt(s * (s - a) * (s - b) * (s - c))\n                   ^~~~\n\
    /tmp/tmpshwggy1v.swift:17:16: error: cannot find 'round' in scope\n        return\
    \ round(area, 2)\n               ^~~~~\n"
  stdout: ''
  timestamp: 1660014764
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    var a = a\n    var b = b\n    var c =\
    \ c\n    var area = 0.0\n    var isValid = false\n    \n    if a > b {\n     \
    \   if b > c {\n            isValid = true\n            area = (a * b) / c\n \
    \       } else {\n            isValid = false\n            area = -1\n       \
    \ }\n    } else {\n        if c > b {\n            isValid = true\n          \
    \  area = (b * c) / a\n        } else {\n            isValid = false\n       \
    \     area = -1\n        }\n    }\n    \n    if isValid {\n        return round(area,\
    \ 2)\n    } else {\n        return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp3izs_k1h.swift:20:28: error: cannot assign value of type 'Int'\
    \ to type 'Double'\n            area = (a * b) / c\n                   ~~~~~~~~^~~\n\
    \                   Double(    )\n/tmp/tmp3izs_k1h.swift:28:28: error: cannot\
    \ assign value of type 'Int' to type 'Double'\n            area = (b * c) / a\n\
    \                   ~~~~~~~~^~~\n                   Double(    )\n/tmp/tmp3izs_k1h.swift:36:16:\
    \ error: cannot find 'round' in scope\n        return round(area, 2)\n       \
    \        ^~~~~\n"
  stdout: ''
  timestamp: 1660014764
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    if a + b > c {\n        return -1\n  \
    \  }\n    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n     \
    \   return -1\n    }\n    return Double(sqrt(Double(a * a + b * b + c * c)))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpparmko_v.swift:20:19: error: cannot find 'sqrt' in scope\n    return\
    \ Double(sqrt(Double(a * a + b * b + c * c)))\n                  ^~~~\n"
  stdout: ''
  timestamp: 1660014764
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let side1 = abs(a) + abs(b) + abs(c)\n\
    \    let side2 = abs(a) + abs(b) - abs(c)\n    let side3 = abs(a) - abs(b) - abs(c)\n\
    \    let area = Double(side1 * side2 * side3)\n    if area > 0 {\n        return\
    \ round(area, 2)\n    } else {\n        return -1\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpp4d1jnsp.swift:16:16: error: cannot find 'round' in scope\n   \
    \     return round(area, 2)\n               ^~~~~\n"
  stdout: ''
  timestamp: 1660014764
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3 = sqrt(pow(c, 2) +\
    \ pow(a, 2))\n    let area: Double = side1 + side2 + side3\n    if area > 0 {\n\
    \        return round(area, 2)\n    } else {\n        return -1\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp0ihi1cf9.swift:11:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmp0ihi1cf9.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmp0ihi1cf9.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmp0ihi1cf9.swift:12:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmp0ihi1cf9.swift:12:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmp0ihi1cf9.swift:12:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmp0ihi1cf9.swift:13:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmp0ihi1cf9.swift:13:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmp0ihi1cf9.swift:13:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmp0ihi1cf9.swift:14:38: error: cannot convert value of\
    \ type 'String' to specified type 'Double'\n    let area: Double = side1 + side2\
    \ + side3\n                       ~~~~~~~~~~~~~~^~~~~~~\n/tmp/tmp0ihi1cf9.swift:16:16:\
    \ error: cannot find 'round' in scope\n        return round(area, 2)\n       \
    \        ^~~~~\n"
  stdout: ''
  timestamp: 1660014764
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let a = abs(a)\n    let b = abs(b)\n \
    \   let c = abs(c)\n    if a + b > c {\n        return Double(a + b - c)\n   \
    \ }\n    if a + c > b {\n        return Double(a + c - b)\n    }\n    if b + c\
    \ > a {\n        return Double(b + c - a)\n    }\n    return Double(a + b + c)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmp4n7_4cwf/tmp4n7_4cwf.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeac4e2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeac4b21b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeac4b21988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeac4b207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4n7_4cwf                        0x000055ec2b4102bf <unavailable> + 4799

    5    libc.so.6                          0x00002aeac5016460 __libc_start_main +
    245

    6    tmp4n7_4cwf                        0x000055ec2b40ff59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1660014764
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let side1 = abs(a) + abs(b) + abs(c)\n\
    \    let side2 = abs(a) + abs(b) - abs(c)\n    let side3 = abs(a) - abs(b) - abs(c)\n\
    \    let area: Double\n    \n    if side1 > side2 && side1 > side3 {\n       \
    \ area = side1 / 2\n    } else if side2 > side3 {\n        area = side2 / 2\n\
    \    } else {\n        area = side3 / 2\n    }\n    \n    return round(area, 2)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmptee6tctl.swift:17:22: error: cannot assign value of type 'Int'\
    \ to type 'Double'\n        area = side1 / 2\n               ~~~~~~^~~\n     \
    \          Double(  )\n/tmp/tmptee6tctl.swift:19:22: error: cannot assign value\
    \ of type 'Int' to type 'Double'\n        area = side2 / 2\n               ~~~~~~^~~\n\
    \               Double(  )\n/tmp/tmptee6tctl.swift:21:22: error: cannot assign\
    \ value of type 'Int' to type 'Double'\n        area = side3 / 2\n           \
    \    ~~~~~~^~~\n               Double(  )\n/tmp/tmptee6tctl.swift:24:12: error:\
    \ cannot find 'round' in scope\n    return round(area, 2)\n           ^~~~~\n"
  stdout: ''
  timestamp: 1660014764
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let sides = a + b + c\n    if sides <=\
    \ 0 {\n        return -1\n    }\n    let area = Double(sides) / Double(3.0)\n\
    \    if area >= 1.0 {\n        return area\n    }\n    return round(area, 2)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp6xvd6wu9.swift:19:12: error: cannot find 'round' in scope\n   \
    \ return round(area, 2)\n           ^~~~~\n"
  stdout: ''
  timestamp: 1660014764
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let a = abs(a)\n    let b = abs(b)\n \
    \   let c = abs(c)\n    let sum = a + b + c\n    if sum < c {\n        return\
    \ Double(sum)\n    }\n    if sum > c {\n        return Double(sum - c)\n    }\n\
    \    if sum > b {\n        return Double(sum - b - c)\n    }\n    if sum > a {\n\
    \        return Double(sum - a - b - c)\n    }\n    return Double(-1)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpe2ybdi5e/tmpe2ybdi5e.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac18c419c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac18c110b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac18c110988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac18c10f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe2ybdi5e                        0x000055c18b5722bf <unavailable> + 4799

    5    libc.so.6                          0x00002ac18c605460 __libc_start_main +
    245

    6    tmpe2ybdi5e                        0x000055c18b571f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1660014764
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    var sum: Double = 0\n    sum += a\n  \
    \  sum += b\n    sum += c\n    if sum > c {\n        return Double(sum - c) /\
    \ 2\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpf1gf80nd.swift:12:12: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n    sum += a\n           ^\n           Double(\
    \ )\n/tmp/tmpf1gf80nd.swift:13:12: error: cannot convert value of type 'Int' to\
    \ expected argument type 'Double'\n    sum += b\n           ^\n           Double(\
    \ )\n/tmp/tmpf1gf80nd.swift:14:12: error: cannot convert value of type 'Int' to\
    \ expected argument type 'Double'\n    sum += c\n           ^\n           Double(\
    \ )\n/tmp/tmpf1gf80nd.swift:15:12: error: binary operator '>' cannot be applied\
    \ to operands of type 'Double' and 'Int'\n    if sum > c {\n       ~~~ ^ ~\n/tmp/tmpf1gf80nd.swift:15:12:\
    \ note: overloads for '>' exist with these partially matching parameter lists:\
    \ (Int, Int)\n    if sum > c {\n           ^\n/tmp/tmpf1gf80nd.swift:16:27: error:\
    \ binary operator '-' cannot be applied to operands of type 'Double' and 'Int'\n\
    \        return Double(sum - c) / 2\n                      ~~~ ^ ~\n/tmp/tmpf1gf80nd.swift:16:27:\
    \ note: overloads for '-' exist with these partially matching parameter lists:\
    \ (Double, Double), (Int, Int)\n        return Double(sum - c) / 2\n         \
    \                 ^\n"
  stdout: ''
  timestamp: 1660014764
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    var sum: Double = 0\n    var sum2: Double\
    \ = 0\n    var sum3: Double = 0\n    var sum4: Double = 0\n    var sum5: Double\
    \ = 0\n    var sum6: Double = 0\n    var sum7: Double = 0\n    var sum8: Double\
    \ = 0\n    var sum9: Double = 0\n    var sum10: Double = 0\n    var sum11: Double\
    \ = 0\n    var sum12: Double = 0\n    var sum13: Double = 0\n    var sum14: Double\
    \ = 0\n    var sum15: Double = 0\n    var sum16: Double = 0\n    var sum17: Double\
    \ = 0\n    var sum18: Double = 0\n    var sum19: Double = 0\n    var sum20: Double\
    \ = 0\n    var sum21: Double = 0\n    var sum22: Double = 0\n    var sum23: Double\
    \ = 0\n    var sum24: Double = 0\n    var sum25: Double = 0\n    var sum26: Double\
    \ = 0\n    var sum27: Double = 0\n    var sum28: Double = 0\n    var sum29: Double\
    \ = 0\n    var sum30: Double = 0\n    var sum31: Double = 0\n    var sum32: Double\
    \ = 0\n    var sum33: Double = 0\n    var sum34: Double = 0\n    var sum35: Double\
    \ = 0\n    var sum36: Double = 0\n    var sum37: Double = 0\n    var sum38: Double\
    \ = 0\n    var sum39: Double = 0\n    var sum40: Double = 0\n    var sum41: Double\
    \ = 0\n    var sum42: Double = 0\n    var sum43: Double = 0\n    var sum44: Double\
    \ = 0\n    var sum45: Double = 0\n    var sum46: Double = 0\n    var sum47: Double\
    \ = 0\n    var sum48: Double = 0\n    var sum49: Double = 0\n    var sum50: Double\
    \ = 0\n    var sum51: Double = 0\n    var sum52: Double = 0\n    var sum53: Double\
    \ = 0\n    var sum54: Double = 0\n    var sum55: Double = 0\n    var sum56: Double\
    \ = 0\n    var sum57: Double = 0\n    var sum58: Double = 0\n    var sum59: Double\
    \ = 0\n    var sum60: Double = 0\n    var sum61: Double = 0\n    var sum62: Double\
    \ = 0\n    var sum63: Double = 0\n    var sum64: Double = 0\n    var sum65: Double\
    \ = 0\n    var sum66: Double = 0\n    var sum67: Double = 0\n    var sum68: Double\
    \ = 0\n    var sum69: Double = 0\n    var sum70: Double = 0\n    var sum71: Double\
    \ = 0\n    var sum72: Double = 0\n    var sum73: Double = 0\n    var sum74: Double\
    \ = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3, b:\
    \ 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp6tftq02q.swift:11:9: warning: variable 'sum' was never used; consider\
    \ replacing with '_' or removing it\n    var sum: Double = 0\n        ^~~\n  \
    \      _\n/tmp/tmp6tftq02q.swift:12:9: warning: variable 'sum2' was never used;\
    \ consider replacing with '_' or removing it\n    var sum2: Double = 0\n     \
    \   ^~~~\n        _\n/tmp/tmp6tftq02q.swift:13:9: warning: variable 'sum3' was\
    \ never used; consider replacing with '_' or removing it\n    var sum3: Double\
    \ = 0\n        ^~~~\n        _\n/tmp/tmp6tftq02q.swift:14:9: warning: variable\
    \ 'sum4' was never used; consider replacing with '_' or removing it\n    var sum4:\
    \ Double = 0\n        ^~~~\n        _\n/tmp/tmp6tftq02q.swift:15:9: warning: variable\
    \ 'sum5' was never used; consider replacing with '_' or removing it\n    var sum5:\
    \ Double = 0\n        ^~~~\n        _\n/tmp/tmp6tftq02q.swift:16:9: warning: variable\
    \ 'sum6' was never used; consider replacing with '_' or removing it\n    var sum6:\
    \ Double = 0\n        ^~~~\n        _\n/tmp/tmp6tftq02q.swift:17:9: warning: variable\
    \ 'sum7' was never used; consider replacing with '_' or removing it\n    var sum7:\
    \ Double = 0\n        ^~~~\n        _\n/tmp/tmp6tftq02q.swift:18:9: warning: variable\
    \ 'sum8' was never used; consider replacing with '_' or removing it\n    var sum8:\
    \ Double = 0\n        ^~~~\n        _\n/tmp/tmp6tftq02q.swift:19:9: warning: variable\
    \ 'sum9' was never used; consider replacing with '_' or removing it\n    var sum9:\
    \ Double = 0\n        ^~~~\n        _\n/tmp/tmp6tftq02q.swift:20:9: warning: variable\
    \ 'sum10' was never used; consider replacing with '_' or removing it\n    var\
    \ sum10: Double = 0\n        ^~~~~\n        _\n/tmp/tmp6tftq02q.swift:21:9: warning:\
    \ variable 'sum11' was never used; consider replacing with '_' or removing it\n\
    \    var sum11: Double = 0\n        ^~~~~\n        _\n/tmp/tmp6tftq02q.swift:22:9:\
    \ warning: variable 'sum12' was never used; consider replacing with '_' or removing\
    \ it\n    var sum12: Double = 0\n        ^~~~~\n        _\n/tmp/tmp6tftq02q.swift:23:9:\
    \ warning: variable 'sum13' was never used; consider replacing with '_' or removing"
  stdout: ''
  timestamp: 1660014764
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let side1 = abs(a) + abs(b) + abs(c)\n\
    \    let side2 = abs(a) + abs(b) - abs(c)\n    let side3 = abs(a) - abs(b) - abs(c)\n\
    \    if side1 == side2 && side2 == side3 {\n        return Double(side1)\n   \
    \ }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpbr1d6a4l/tmpbr1d6a4l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade675e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade672d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade672d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade672d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbr1d6a4l                        0x00005606fb05a2bf <unavailable> + 4799

    5    libc.so.6                          0x00002ade677cd460 __libc_start_main +
    245

    6    tmpbr1d6a4l                        0x00005606fb059f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1660014764
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let a = abs(a)\n    let b = abs(b)\n \
    \   let c = abs(c)\n    if a + b > c {\n        return -1\n    }\n    if a + c\
    \ > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n   \
    \ }\n    return (a * b * c) / Double(a + b + c)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpyvedkvv2.swift:23:19: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n    return (a * b * c) / Double(a + b +\
    \ c)\n                  ^\n           Double(    )\n"
  stdout: ''
  timestamp: 1660014765
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let sides = [a, b, c]\n    let sumOfSides\
    \ = sides.reduce(0, +)\n    if sumOfSides > sides.last {\n        return -1\n\
    \    }\n    let thirdSide = sides.last\n    let thirdSideArea = sides.last * sides.last\n\
    \    let thirdSideLength = thirdSide * thirdSide\n    let thirdSideArea = thirdSideLength\
    \ * thirdSide\n    let thirdSideArea = thirdSideArea / 2\n    let thirdSideArea\
    \ = round(thirdSideArea, 2)\n    return thirdSideArea\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmphmqagb9u.swift:13:27: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    if sumOfSides > sides.last {\n  \
    \                        ^\n/tmp/tmphmqagb9u.swift:13:27: note: coalesce using\
    \ '??' to provide a default when the optional value contains 'nil'\n    if sumOfSides\
    \ > sides.last {\n                          ^\n                              \
    \ ?? <#default value#>\n/tmp/tmphmqagb9u.swift:13:27: note: force-unwrap using\
    \ '!' to abort execution if the optional value contains 'nil'\n    if sumOfSides\
    \ > sides.last {\n                          ^\n                              !\n\
    /tmp/tmphmqagb9u.swift:17:36: error: binary operator '*' cannot be applied to\
    \ two 'Int?' operands\n    let thirdSideArea = sides.last * sides.last\n     \
    \                   ~~~~~~~~~~ ^ ~~~~~~~~~~\n/tmp/tmphmqagb9u.swift:17:36: note:\
    \ overloads for '*' exist with these partially matching parameter lists: (Int,\
    \ Int)\n    let thirdSideArea = sides.last * sides.last\n                    \
    \               ^\n/tmp/tmphmqagb9u.swift:18:37: error: binary operator '*' cannot\
    \ be applied to two 'Int?' operands\n    let thirdSideLength = thirdSide * thirdSide\n\
    \                          ~~~~~~~~~ ^ ~~~~~~~~~\n/tmp/tmphmqagb9u.swift:18:37:\
    \ note: overloads for '*' exist with these partially matching parameter lists:\
    \ (Int, Int)\n    let thirdSideLength = thirdSide * thirdSide\n              \
    \                      ^\n/tmp/tmphmqagb9u.swift:21:25: error: cannot find 'round'\
    \ in scope\n    let thirdSideArea = round(thirdSideArea, 2)\n                \
    \        ^~~~~\n"
  stdout: ''
  timestamp: 1660014764
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    if a + b > c {\n        return Double(-1)\
    \ / Double(Double(-1))\n    }\n    if a + c > b {\n        return Double(-1) /\
    \ Double(Double(-1))\n    }\n    if b + c > a {\n        return Double(-1) / Double(Double(-1))\n\
    \    }\n    return Double(Double(a) + Double(b) + Double(c)) / Double(Double(3))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmp8uhzt4jv/tmp8uhzt4jv.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6193c7cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6193973b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6193973988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b61939727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8uhzt4jv                        0x0000555a17eba21f <unavailable> + 4639

    5    libc.so.6                          0x00002b6193e68460 __libc_start_main +
    245

    6    tmp8uhzt4jv                        0x0000555a17eb9eb9 <unavailable> + 3769

    '
  stdout: ''
  timestamp: 1660014764
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let side1 = abs(a) + abs(b) + abs(c)\n\
    \    let side2 = abs(a) + abs(b) - abs(c)\n    let side3 = abs(a) - abs(b) - abs(c)\n\
    \    let area: Double = side1 * side2 * side3\n    return round(area, 2)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp4w7rvj95.swift:14:38: error: cannot convert value of type 'Int'\
    \ to specified type 'Double'\n    let area: Double = side1 * side2 * side3\n \
    \                      ~~~~~~~~~~~~~~^~~~~~~\n                       Double( \
    \             )\n/tmp/tmp4w7rvj95.swift:15:12: error: cannot find 'round' in scope\n\
    \    return round(area, 2)\n           ^~~~~\n"
  stdout: ''
  timestamp: 1660014764
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    var sum: Double = 0\n    var a: Double\
    \ = a\n    var b: Double = b\n    var c: Double = c\n    var d: Double = 0\n \
    \   var e: Double = 0\n    var f: Double = 0\n    var g: Double = 0\n    var h:\
    \ Double = 0\n    var i: Double = 0\n    var j: Double = 0\n    var k: Double\
    \ = 0\n    var l: Double = 0\n    var m: Double = 0\n    var n: Double = 0\n \
    \   var o: Double = 0\n    var p: Double = 0\n    var q: Double = 0\n    var r:\
    \ Double = 0\n    var s: Double = 0\n    var t: Double = 0\n    var u: Double\
    \ = 0\n    var v: Double = 0\n    var w: Double = 0\n    var x: Double = 0\n \
    \   var y: Double = 0\n    var z: Double = 0\n    var a: Double = 0\n    var b:\
    \ Double = 0\n    var c: Double = 0\n    var d: Double = 0\n    var e: Double\
    \ = 0\n    var f: Double = 0\n    var g: Double = 0\n    var h: Double = 0\n \
    \   var i: Double = 0\n    var j: Double = 0\n    var k: Double = 0\n    var l:\
    \ Double = 0\n    var m: Double = 0\n    var n: Double = 0\n    var o: Double\
    \ = 0\n    var p: Double = 0\n    var q: Double = 0\n    var r: Double = 0\n \
    \   var s: Double = 0\n    var t: Double = 0\n    var u: Double = 0\n    var v:\
    \ Double = 0\n    var w: Double = 0\n    var x: Double = 0\n    var y: Double\
    \ = 0\n    var z: Double = 0\n    var a: Double = 0\n    var b: Double = 0\n \
    \   var c: Double = 0\n    var d: Double = 0\n    var e: Double = 0\n    var f:\
    \ Double = 0\n    var g: Double = 0\n    var h: Double = 0\n    var i: Double\
    \ = 0\n    var j: Double = 0\n    var k: Double = 0\n    var l: Double = 0\n \
    \   var m: Double = 0\n    var n: Double = 0\n    var o: Double = 0\n    var p:\
    \ Double = 0\n    var q: Double = 0\n    var r: Double = 0\n    var s: Double\
    \ = 0\n    var t: Double = 0\n    var u: Double = 0\n    var v: Double = 0\n \
    \   var w: Double = 0\n    var x: Double = 0\n    var y: Double = 0\n    var z:\
    \ Double = 0\n    var a: Double = 0\n    var b: Double = 0\n    var c: Double\
    \ = 0\n    var d: Double = 0\n    var e: Double = 0\n    var f: Double = 0\n \
    \   var g: Double = 0\n    var h: Double = 0\n    var i: Double = 0\n    var j:\
    \ Double = 0\n    var k: Double = 0\n    var l: Double = 0\n    var m: Double\
    \ = 0\n    var n: Double = 0\n    var o: Double = 0\n    var p: Double = 0\n \
    \   var q: Double = 0\n    var r: Double = 0\n    var \n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp_dh88yr2.swift:108:8: error: expected pattern\n    var \n     \
    \  ^\n/tmp/tmp_dh88yr2.swift:12:21: error: cannot convert value of type 'Int'\
    \ to specified type 'Double'\n    var a: Double = a\n                    ^\n \
    \                   Double( )\n/tmp/tmp_dh88yr2.swift:13:21: error: cannot convert\
    \ value of type 'Int' to specified type 'Double'\n    var b: Double = b\n    \
    \                ^\n                    Double( )\n/tmp/tmp_dh88yr2.swift:14:21:\
    \ error: cannot convert value of type 'Int' to specified type 'Double'\n    var\
    \ c: Double = c\n                    ^\n                    Double( )\n/tmp/tmp_dh88yr2.swift:38:9:\
    \ error: invalid redeclaration of 'a'\n    var a: Double = 0\n        ^\n/tmp/tmp_dh88yr2.swift:12:9:\
    \ note: 'a' previously declared here\n    var a: Double = a\n        ^\n/tmp/tmp_dh88yr2.swift:39:9:\
    \ error: invalid redeclaration of 'b'\n    var b: Double = 0\n        ^\n/tmp/tmp_dh88yr2.swift:13:9:\
    \ note: 'b' previously declared here\n    var b: Double = b\n        ^\n/tmp/tmp_dh88yr2.swift:40:9:\
    \ error: invalid redeclaration of 'c'\n    var c: Double = 0\n        ^\n/tmp/tmp_dh88yr2.swift:14:9:\
    \ note: 'c' previously declared here\n    var c: Double = c\n        ^\n/tmp/tmp_dh88yr2.swift:41:9:\
    \ error: invalid redeclaration of 'd'\n    var d: Double = 0\n        ^\n/tmp/tmp_dh88yr2.swift:15:9:\
    \ note: 'd' previously declared here\n    var d: Double = 0\n        ^\n/tmp/tmp_dh88yr2.swift:42:9:\
    \ error: invalid redeclaration of 'e'\n    var e: Double = 0\n        ^\n/tmp/tmp_dh88yr2.swift:16:9:\
    \ note: 'e' previously declared here\n    var e: Double = 0\n        ^\n/tmp/tmp_dh88yr2.swift:43:9:\
    \ error: invalid redeclaration of 'f'\n    var f: Double = 0\n        ^\n/tmp/tmp_dh88yr2.swift:17:9:\
    \ note: 'f' previously declared here\n    var f: Double = 0\n        ^\n/tmp/tmp_dh88yr2.swift:44:9:\
    \ error: invalid redeclaration of 'g'\n    var g: Double = 0\n        ^\n/tmp/tmp_dh88yr2.swift:18:9:\
    \ note: 'g' previously declared here\n    var g: Double = 0\n        ^\n/tmp/tmp_dh88yr2.swift:45:9:\
    \ error: invalid redeclaration of 'h'\n    var h: Double = 0\n        ^\n/tmp/tmp_"
  stdout: ''
  timestamp: 1660014764
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    var a = a\n    var b = b\n    var c =\
    \ c\n    var sum = a\n    var sum2 = b\n    var sum3 = c\n    var area = 0\n \
    \   \n    if a < b {\n        sum = b\n    }\n    if a < c {\n        sum = c\n\
    \    }\n    if b < c {\n        sum = a\n    }\n    \n    if sum > sum2 {\n  \
    \      area = Double(sum * sum - sum2 * sum3)\n    }\n    if sum2 > sum3 {\n \
    \       area = Double(sum2 * sum3 - sum * sum2)\n    }\n    if sum3 > sum {\n\
    \        area = Double(sum3 * sum - sum * sum3)\n    }\n    \n    if area < 0\
    \ {\n        area = -1\n    }\n    \n    return area\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp3pu9se13.swift:30:16: error: cannot assign value of type 'Double'\
    \ to type 'Int'\n        area = Double(sum * sum - sum2 * sum3)\n            \
    \   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n               Int(                     \
    \      )\n/tmp/tmp3pu9se13.swift:33:16: error: cannot assign value of type 'Double'\
    \ to type 'Int'\n        area = Double(sum2 * sum3 - sum * sum2)\n           \
    \    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n               Int(                   \
    \         )\n/tmp/tmp3pu9se13.swift:36:16: error: cannot assign value of type\
    \ 'Double' to type 'Int'\n        area = Double(sum3 * sum - sum * sum3)\n   \
    \            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n               Int(            \
    \               )\n/tmp/tmp3pu9se13.swift:43:12: error: cannot convert return\
    \ expression of type 'Int' to return type 'Double'\n    return area\n        \
    \   ^~~~\n           Double( )\n"
  stdout: ''
  timestamp: 1660014766
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let side1 = abs(a) + abs(b) + abs(c)\n\
    \    let side2 = abs(a) + abs(b) - abs(c)\n    let side3 = abs(a) - abs(b) + abs(c)\n\
    \    let side4 = abs(a) - abs(b) - abs(c)\n    let area: Double\n    switch side1,\
    \ side2, side3, side4 {\n    case 0..<1:\n        area = side1\n    case 1..<2:\n\
    \        area = side2\n    case 2..<3:\n        area = side3\n    case 3..<4:\n\
    \        area = side4\n    default:\n        area = -1\n    }\n    return round(area\
    \ * 100) / 100\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpkzj7f4ds.swift:16:17: error: expected '{' after 'switch' subject\
    \ expression\n    switch side1, side2, side3, side4 {\n                ^\n/tmp/tmpkzj7f4ds.swift:16:17:\
    \ error: consecutive statements on a line must be separated by ';'\n    switch\
    \ side1, side2, side3, side4 {\n                ^\n                ;\n/tmp/tmpkzj7f4ds.swift:16:17:\
    \ error: expected expression\n    switch side1, side2, side3, side4 {\n      \
    \          ^\n/tmp/tmpkzj7f4ds.swift:28:12: error: cannot find 'round' in scope\n\
    \    return round(area * 100) / 100\n           ^~~~~\n"
  stdout: ''
  timestamp: 1660014764
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let sides = sqrt(pow(a, 2) + pow(b, 2)\
    \ + pow(c, 2))\n    if sides > 0 {\n        return Double(round(sides * 100))\
    \ / 100\n    } else {\n        return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp6z2d7199.swift:11:17: error: cannot find 'sqrt' in scope\n    let\
    \ sides = sqrt(pow(a, 2) + pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmp6z2d7199.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let sides = sqrt(pow(a, 2) + pow(b, 2)\
    \ + pow(c, 2))\n                     ^~~\n/tmp/tmp6z2d7199.swift:11:34: error:\
    \ cannot find 'pow' in scope\n    let sides = sqrt(pow(a, 2) + pow(b, 2) + pow(c,\
    \ 2))\n                                 ^~~\n/tmp/tmp6z2d7199.swift:11:46: error:\
    \ cannot find 'pow' in scope\n    let sides = sqrt(pow(a, 2) + pow(b, 2) + pow(c,\
    \ 2))\n                                             ^~~\n/tmp/tmp6z2d7199.swift:13:23:\
    \ error: cannot find 'round' in scope\n        return Double(round(sides * 100))\
    \ / 100\n                      ^~~~~\n"
  stdout: ''
  timestamp: 1660014764
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let sides = [a, b, c]\n    let sum = sides.reduce(0,\
    \ +)\n    if sum > sides.last {\n        return -1\n    }\n    return Double(sides.last)\
    \ * Double(sides.last) / Double(sides.last)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpngb4w7h5.swift:13:20: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    if sum > sides.last {\n         \
    \          ^\n/tmp/tmpngb4w7h5.swift:13:20: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n    if sum > sides.last {\n\
    \                   ^\n                        ?? <#default value#>\n/tmp/tmpngb4w7h5.swift:13:20:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    if sum > sides.last {\n                   ^\n                   \
    \    !\n/tmp/tmpngb4w7h5.swift:16:25: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return Double(sides.last) * Double(sides.last)\
    \ / Double(sides.last)\n                        ^\n/tmp/tmpngb4w7h5.swift:16:25:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n    return Double(sides.last) * Double(sides.last) / Double(sides.last)\n\
    \                        ^\n                             ?? <#default value#>\n\
    /tmp/tmpngb4w7h5.swift:16:25: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n    return Double(sides.last) * Double(sides.last)\
    \ / Double(sides.last)\n                        ^\n                          \
    \  !\n/tmp/tmpngb4w7h5.swift:16:46: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return Double(sides.last) * Double(sides.last)\
    \ / Double(sides.last)\n                                             ^\n/tmp/tmpngb4w7h5.swift:16:46:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n    return Double(sides.last) * Double(sides.last) / Double(sides.last)\n\
    \                                             ^\n                            \
    \                      ?? <#default value#>\n/tmp/tmpngb4w7h5.swift:16:46: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \    return Double(sides.last) * Double(sides.last) / Double(sides.last)\n   \
    \                                          ^\n            "
  stdout: ''
  timestamp: 1660014775
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    var a = a\n    var b = b\n    var c =\
    \ c\n    var area: Double = 0\n    var isValidTriangle: Bool = false\n    \n \
    \   if a > b {\n        a = b\n    }\n    if a > c {\n        a = c\n    }\n \
    \   if b > c {\n        b = c\n    }\n    \n    if a + b > c {\n        isValidTriangle\
    \ = true\n        area = (a * b) / 2.0\n    }\n    \n    if a + c > b {\n    \
    \    isValidTriangle = true\n        area = (a * c) / 2.0\n    }\n    \n    if\
    \ b + c > a {\n        isValidTriangle = true\n        area = (b * c) / 2.0\n\
    \    }\n    \n    if isValidTriangle == true {\n        return round(area, 2)\n\
    \    }\n    else {\n        return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmph_k73s_t.swift:29:19: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n        area = (a * b) / 2.0\n         \
    \         ^\n               Double()\n/tmp/tmph_k73s_t.swift:34:19: error: cannot\
    \ convert value of type 'Int' to expected argument type 'Double'\n        area\
    \ = (a * c) / 2.0\n                  ^\n               Double()\n/tmp/tmph_k73s_t.swift:39:19:\
    \ error: cannot convert value of type 'Int' to expected argument type 'Double'\n\
    \        area = (b * c) / 2.0\n                  ^\n               Double()\n\
    /tmp/tmph_k73s_t.swift:43:16: error: cannot find 'round' in scope\n        return\
    \ round(area, 2)\n               ^~~~~\n"
  stdout: ''
  timestamp: 1660014764
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let sides = a + b + c\n    if sides <=\
    \ 0 {\n        return -1\n    }\n    let area = Double(a * b * c) / Double(sides)\n\
    \    if area > Double(Double.pi) {\n        return -1\n    }\n    return round(area,\
    \ 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(triangle_area(a: 3, b: 4, c:\
    \ 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpr4zpx3x6.swift:19:12: error: cannot find 'round' in scope\n   \
    \ return round(area, 2)\n           ^~~~~\n"
  stdout: ''
  timestamp: 1660014764
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let side1 = abs(a) + abs(b) + abs(c)\n\
    \    let side2 = abs(a) + abs(b) - abs(c)\n    let side3 = abs(a) - abs(b) - abs(c)\n\
    \    if side1 == side2 && side2 == side3 {\n        return Double(side1)\n   \
    \ }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpbr1d6a4l/tmpbr1d6a4l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade675e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade672d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade672d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade672d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbr1d6a4l                        0x00005606fb05a2bf <unavailable> + 4799

    5    libc.so.6                          0x00002ade677cd460 __libc_start_main +
    245

    6    tmpbr1d6a4l                        0x00005606fb059f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1660014764
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    var sum: Double = 0\n    \n    if a +\
    \ b > c {\n        sum = a + b\n    } else {\n        sum = a + c\n    }\n   \
    \ \n    if a + c > b {\n        sum = sum + c\n    } else {\n        sum = sum\
    \ + b\n    }\n    \n    return Double(sum) / Double(2.0)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpsickv6ha.swift:14:17: error: cannot assign value of type 'Int'\
    \ to type 'Double'\n        sum = a + b\n              ~~^~~\n              Double(\
    \ )\n/tmp/tmpsickv6ha.swift:16:17: error: cannot assign value of type 'Int' to\
    \ type 'Double'\n        sum = a + c\n              ~~^~~\n              Double(\
    \ )\n/tmp/tmpsickv6ha.swift:20:21: error: cannot convert value of type 'Int' to\
    \ expected argument type 'Double'\n        sum = sum + c\n                   \
    \ ^\n                    Double( )\n/tmp/tmpsickv6ha.swift:22:21: error: cannot\
    \ convert value of type 'Int' to expected argument type 'Double'\n        sum\
    \ = sum + b\n                    ^\n                    Double( )\n"
  stdout: ''
  timestamp: 1660014764
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let side1 = abs(a) + abs(b) + abs(c)\n\
    \    let side2 = abs(a) + abs(b) - abs(c)\n    let side3 = abs(a) - abs(b) - abs(c)\n\
    \    if side1 == side2 && side2 == side3 {\n        return Double(side1)\n   \
    \ }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpbr1d6a4l/tmpbr1d6a4l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade675e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade672d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade672d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade672d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbr1d6a4l                        0x00005606fb05a2bf <unavailable> + 4799

    5    libc.so.6                          0x00002ade677cd460 __libc_start_main +
    245

    6    tmpbr1d6a4l                        0x00005606fb059f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1660014764
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let a = abs(a)\n    let b = abs(b)\n \
    \   let c = abs(c)\n    if a + b > c {\n        return Double(a + b - c)\n   \
    \ } else {\n        return Double(a + b + c - a)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpajx8sh6i/tmpajx8sh6i.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff84f1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff84c14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff84c14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff84c137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpajx8sh6i                        0x000055a08f1b92bf <unavailable> + 4799

    5    libc.so.6                          0x00002aff85109460 __libc_start_main +
    245

    6    tmpajx8sh6i                        0x000055a08f1b8f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1660014764
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    var sum: Double = 0\n    var sum2: Double\
    \ = 0\n    var sum3: Double = 0\n    var sum4: Double = 0\n    var sum5: Double\
    \ = 0\n    var sum6: Double = 0\n    var sum7: Double = 0\n    var sum8: Double\
    \ = 0\n    var sum9: Double = 0\n    var sum10: Double = 0\n    var sum11: Double\
    \ = 0\n    var sum12: Double = 0\n    var sum13: Double = 0\n    var sum14: Double\
    \ = 0\n    var sum15: Double = 0\n    var sum16: Double = 0\n    var sum17: Double\
    \ = 0\n    var sum18: Double = 0\n    var sum19: Double = 0\n    var sum20: Double\
    \ = 0\n    var sum21: Double = 0\n    var sum22: Double = 0\n    var sum23: Double\
    \ = 0\n    var sum24: Double = 0\n    var sum25: Double = 0\n    var sum26: Double\
    \ = 0\n    var sum27: Double = 0\n    var sum28: Double = 0\n    var sum29: Double\
    \ = 0\n    var sum30: Double = 0\n    var sum31: Double = 0\n    var sum32: Double\
    \ = 0\n    var sum33: Double = 0\n    var sum34: Double = 0\n    var sum35: Double\
    \ = 0\n    var sum36: Double = 0\n    var sum37: Double = 0\n    var sum38: Double\
    \ = 0\n    var sum39: Double = 0\n    var sum40: Double = 0\n    var sum41: Double\
    \ = 0\n    var sum42: Double = 0\n    var sum43: Double = 0\n    var sum44: Double\
    \ = 0\n    var sum45: Double = 0\n    var sum46: Double = 0\n    var sum47: Double\
    \ = 0\n    var sum48: Double = 0\n    var sum49: Double = 0\n    var sum50: Double\
    \ = 0\n    var sum51: Double = 0\n    var sum52: Double = 0\n    var sum53: Double\
    \ = 0\n    var sum54: Double = 0\n    var sum55: Double = 0\n    var sum56: Double\
    \ = 0\n    var sum57: Double = 0\n    var sum58: Double = 0\n    var sum59: Double\
    \ = 0\n    var sum60: Double = 0\n    var sum61: Double = 0\n    var sum62: Double\
    \ = 0\n    var sum63: Double = 0\n    var sum64: Double = 0\n    var sum65: Double\
    \ = 0\n    var sum66: Double = 0\n    var sum67: Double = 0\n    var sum68: Double\
    \ = 0\n    var sum69: Double = 0\n    var sum70: Double = 0\n    var sum71: Double\
    \ = 0\n    var sum72: Double = 0\n    var sum73: Double = 0\n    var sum74: Double\
    \ = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3, b:\
    \ 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp6tftq02q.swift:11:9: warning: variable 'sum' was never used; consider\
    \ replacing with '_' or removing it\n    var sum: Double = 0\n        ^~~\n  \
    \      _\n/tmp/tmp6tftq02q.swift:12:9: warning: variable 'sum2' was never used;\
    \ consider replacing with '_' or removing it\n    var sum2: Double = 0\n     \
    \   ^~~~\n        _\n/tmp/tmp6tftq02q.swift:13:9: warning: variable 'sum3' was\
    \ never used; consider replacing with '_' or removing it\n    var sum3: Double\
    \ = 0\n        ^~~~\n        _\n/tmp/tmp6tftq02q.swift:14:9: warning: variable\
    \ 'sum4' was never used; consider replacing with '_' or removing it\n    var sum4:\
    \ Double = 0\n        ^~~~\n        _\n/tmp/tmp6tftq02q.swift:15:9: warning: variable\
    \ 'sum5' was never used; consider replacing with '_' or removing it\n    var sum5:\
    \ Double = 0\n        ^~~~\n        _\n/tmp/tmp6tftq02q.swift:16:9: warning: variable\
    \ 'sum6' was never used; consider replacing with '_' or removing it\n    var sum6:\
    \ Double = 0\n        ^~~~\n        _\n/tmp/tmp6tftq02q.swift:17:9: warning: variable\
    \ 'sum7' was never used; consider replacing with '_' or removing it\n    var sum7:\
    \ Double = 0\n        ^~~~\n        _\n/tmp/tmp6tftq02q.swift:18:9: warning: variable\
    \ 'sum8' was never used; consider replacing with '_' or removing it\n    var sum8:\
    \ Double = 0\n        ^~~~\n        _\n/tmp/tmp6tftq02q.swift:19:9: warning: variable\
    \ 'sum9' was never used; consider replacing with '_' or removing it\n    var sum9:\
    \ Double = 0\n        ^~~~\n        _\n/tmp/tmp6tftq02q.swift:20:9: warning: variable\
    \ 'sum10' was never used; consider replacing with '_' or removing it\n    var\
    \ sum10: Double = 0\n        ^~~~~\n        _\n/tmp/tmp6tftq02q.swift:21:9: warning:\
    \ variable 'sum11' was never used; consider replacing with '_' or removing it\n\
    \    var sum11: Double = 0\n        ^~~~~\n        _\n/tmp/tmp6tftq02q.swift:22:9:\
    \ warning: variable 'sum12' was never used; consider replacing with '_' or removing\
    \ it\n    var sum12: Double = 0\n        ^~~~~\n        _\n/tmp/tmp6tftq02q.swift:23:9:\
    \ warning: variable 'sum13' was never used; consider replacing with '_' or removing"
  stdout: ''
  timestamp: 1660014764
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    var sum: Double = 0\n    var sum2: Double\
    \ = 0\n    var sum3: Double = 0\n    var sum4: Double = 0\n    var sum5: Double\
    \ = 0\n    var sum6: Double = 0\n    var sum7: Double = 0\n    var sum8: Double\
    \ = 0\n    var sum9: Double = 0\n    var sum10: Double = 0\n    var sum11: Double\
    \ = 0\n    var sum12: Double = 0\n    var sum13: Double = 0\n    var sum14: Double\
    \ = 0\n    var sum15: Double = 0\n    var sum16: Double = 0\n    var sum17: Double\
    \ = 0\n    var sum18: Double = 0\n    var sum19: Double = 0\n    var sum20: Double\
    \ = 0\n    var sum21: Double = 0\n    var sum22: Double = 0\n    var sum23: Double\
    \ = 0\n    var sum24: Double = 0\n    var sum25: Double = 0\n    var sum26: Double\
    \ = 0\n    var sum27: Double = 0\n    var sum28: Double = 0\n    var sum29: Double\
    \ = 0\n    var sum30: Double = 0\n    var sum31: Double = 0\n    var sum32: Double\
    \ = 0\n    var sum33: Double = 0\n    var sum34: Double = 0\n    var sum35: Double\
    \ = 0\n    var sum36: Double = 0\n    var sum37: Double = 0\n    var sum38: Double\
    \ = 0\n    var sum39: Double = 0\n    var sum40: Double = 0\n    var sum41: Double\
    \ = 0\n    var sum42: Double = 0\n    var sum43: Double = 0\n    var sum44: Double\
    \ = 0\n    var sum45: Double = 0\n    var sum46: Double = 0\n    var sum47: Double\
    \ = 0\n    var sum48: Double = 0\n    var sum49: Double = 0\n    var sum50: Double\
    \ = 0\n    var sum51: Double = 0\n    var sum52: Double = 0\n    var sum53: Double\
    \ = 0\n    var sum54: Double = 0\n    var sum55: Double = 0\n    var sum56: Double\
    \ = 0\n    var sum57: Double = 0\n    var sum58: Double = 0\n    var sum59: Double\
    \ = 0\n    var sum60: Double = 0\n    var sum61: Double = 0\n    var sum62: Double\
    \ = 0\n    var sum63: Double = 0\n    var sum64: Double = 0\n    var sum65: Double\
    \ = 0\n    var sum66: Double = 0\n    var sum67: Double = 0\n    var sum68: Double\
    \ = 0\n    var sum69: Double = 0\n    var sum70: Double = 0\n    var sum71: Double\
    \ = 0\n    var sum72: Double = 0\n    var sum73: Double = 0\n    var sum74: Double\
    \ = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3, b:\
    \ 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp6tftq02q.swift:11:9: warning: variable 'sum' was never used; consider\
    \ replacing with '_' or removing it\n    var sum: Double = 0\n        ^~~\n  \
    \      _\n/tmp/tmp6tftq02q.swift:12:9: warning: variable 'sum2' was never used;\
    \ consider replacing with '_' or removing it\n    var sum2: Double = 0\n     \
    \   ^~~~\n        _\n/tmp/tmp6tftq02q.swift:13:9: warning: variable 'sum3' was\
    \ never used; consider replacing with '_' or removing it\n    var sum3: Double\
    \ = 0\n        ^~~~\n        _\n/tmp/tmp6tftq02q.swift:14:9: warning: variable\
    \ 'sum4' was never used; consider replacing with '_' or removing it\n    var sum4:\
    \ Double = 0\n        ^~~~\n        _\n/tmp/tmp6tftq02q.swift:15:9: warning: variable\
    \ 'sum5' was never used; consider replacing with '_' or removing it\n    var sum5:\
    \ Double = 0\n        ^~~~\n        _\n/tmp/tmp6tftq02q.swift:16:9: warning: variable\
    \ 'sum6' was never used; consider replacing with '_' or removing it\n    var sum6:\
    \ Double = 0\n        ^~~~\n        _\n/tmp/tmp6tftq02q.swift:17:9: warning: variable\
    \ 'sum7' was never used; consider replacing with '_' or removing it\n    var sum7:\
    \ Double = 0\n        ^~~~\n        _\n/tmp/tmp6tftq02q.swift:18:9: warning: variable\
    \ 'sum8' was never used; consider replacing with '_' or removing it\n    var sum8:\
    \ Double = 0\n        ^~~~\n        _\n/tmp/tmp6tftq02q.swift:19:9: warning: variable\
    \ 'sum9' was never used; consider replacing with '_' or removing it\n    var sum9:\
    \ Double = 0\n        ^~~~\n        _\n/tmp/tmp6tftq02q.swift:20:9: warning: variable\
    \ 'sum10' was never used; consider replacing with '_' or removing it\n    var\
    \ sum10: Double = 0\n        ^~~~~\n        _\n/tmp/tmp6tftq02q.swift:21:9: warning:\
    \ variable 'sum11' was never used; consider replacing with '_' or removing it\n\
    \    var sum11: Double = 0\n        ^~~~~\n        _\n/tmp/tmp6tftq02q.swift:22:9:\
    \ warning: variable 'sum12' was never used; consider replacing with '_' or removing\
    \ it\n    var sum12: Double = 0\n        ^~~~~\n        _\n/tmp/tmp6tftq02q.swift:23:9:\
    \ warning: variable 'sum13' was never used; consider replacing with '_' or removing"
  stdout: ''
  timestamp: 1660014764
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \    let side2 = sqrt(pow(c, 2) + pow(d, 2))\n    let side3 = sqrt(pow(d, 2) +\
    \ pow(e, 2))\n    let area = side1 + side2 + side3\n    if area > 0 {\n      \
    \  return Double(area)\n    } else {\n        return -1\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpvvp6qjnt.swift:11:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmpvvp6qjnt.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmpvvp6qjnt.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmpvvp6qjnt.swift:12:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(c, 2) + pow(d, 2))\n                ^~~~\n/tmp/tmpvvp6qjnt.swift:12:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(c, 2) + pow(d, 2))\n\
    \                     ^~~\n/tmp/tmpvvp6qjnt.swift:12:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(c, 2) + pow(d, 2))\n                    \
    \             ^~~\n/tmp/tmpvvp6qjnt.swift:12:38: error: cannot find 'd' in scope\n\
    \    let side2 = sqrt(pow(c, 2) + pow(d, 2))\n                               \
    \      ^\n/tmp/tmpvvp6qjnt.swift:13:17: error: cannot find 'sqrt' in scope\n \
    \   let side3 = sqrt(pow(d, 2) + pow(e, 2))\n                ^~~~\n/tmp/tmpvvp6qjnt.swift:13:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(d, 2) + pow(e, 2))\n\
    \                     ^~~\n/tmp/tmpvvp6qjnt.swift:13:26: error: cannot find 'd'\
    \ in scope\n    let side3 = sqrt(pow(d, 2) + pow(e, 2))\n                    \
    \     ^\n/tmp/tmpvvp6qjnt.swift:13:34: error: cannot find 'pow' in scope\n   \
    \ let side3 = sqrt(pow(d, 2) + pow(e, 2))\n                                 ^~~\n\
    /tmp/tmpvvp6qjnt.swift:13:38: error: cannot find 'e' in scope\n    let side3 =\
    \ sqrt(pow(d, 2) + pow(e, 2))\n                                     ^\n"
  stdout: ''
  timestamp: 1660014764
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let side1 = abs(a) + abs(b) + abs(c)\n\
    \    let side2 = abs(a) + abs(b) - abs(c)\n    let side3 = abs(a) - abs(b) - abs(c)\n\
    \    if side1 == side2 && side2 == side3 {\n        return Double(side1)\n   \
    \ }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpbr1d6a4l/tmpbr1d6a4l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade675e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade672d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade672d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade672d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbr1d6a4l                        0x00005606fb05a2bf <unavailable> + 4799

    5    libc.so.6                          0x00002ade677cd460 __libc_start_main +
    245

    6    tmpbr1d6a4l                        0x00005606fb059f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1660014764
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3 = sqrt(pow(c, 2) +\
    \ pow(a, 2))\n    let area: Double = side1 * side2 * side3\n    return round(area,\
    \ 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(triangle_area(a: 3, b: 4, c:\
    \ 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp6_8an1ns.swift:11:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmp6_8an1ns.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmp6_8an1ns.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmp6_8an1ns.swift:12:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmp6_8an1ns.swift:12:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmp6_8an1ns.swift:12:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmp6_8an1ns.swift:13:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmp6_8an1ns.swift:13:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmp6_8an1ns.swift:13:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmp6_8an1ns.swift:14:38: error: cannot convert value of\
    \ type 'Duration' to specified type 'Double'\n    let area: Double = side1 * side2\
    \ * side3\n                       ~~~~~~~~~~~~~~^~~~~~~\n/tmp/tmp6_8an1ns.swift:15:12:\
    \ error: cannot find 'round' in scope\n    return round(area, 2)\n           ^~~~~\n"
  stdout: ''
  timestamp: 1660014764
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    if a > b {\n        if b > c {\n     \
    \       return a + b + c\n        } else {\n            return b + c\n       \
    \ }\n    } else {\n        if c > b {\n            return a + c\n        } else\
    \ {\n            return c\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpk71_sl6g.swift:13:26: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n            return a + b + c\n         \
    \          ~~~~~~^~~\n                   Double(  )\n/tmp/tmpk71_sl6g.swift:15:22:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \            return b + c\n                   ~~^~~\n                   Double(\
    \ )\n/tmp/tmpk71_sl6g.swift:19:22: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n            return a + c\n             \
    \      ~~^~~\n                   Double( )\n/tmp/tmpk71_sl6g.swift:21:20: error:\
    \ cannot convert return expression of type 'Int' to return type 'Double'\n   \
    \         return c\n                   ^\n                   Double( )\n"
  stdout: ''
  timestamp: 1660014764
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let side1 = abs(a) + abs(b) + abs(c)\n\
    \    let side2 = abs(a) + abs(b) - abs(c)\n    let side3 = abs(a) - abs(b) + abs(c)\n\
    \    let side4 = abs(a) - abs(b) - abs(c)\n    let area = (side1 + side2 + side3\
    \ + side4) / 4\n    if area > 0 {\n        return round(area, 2)\n    } else {\n\
    \        return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpxxfb384y.swift:17:16: error: cannot find 'round' in scope\n   \
    \     return round(area, 2)\n               ^~~~~\n"
  stdout: ''
  timestamp: 1660014764
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3 = sqrt(pow(c, 2) +\
    \ pow(a, 2))\n    let area: Double = side1 + side2 + side3\n    if area > 0 {\n\
    \        return round(area, 2)\n    } else {\n        return -1\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp0ihi1cf9.swift:11:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmp0ihi1cf9.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmp0ihi1cf9.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmp0ihi1cf9.swift:12:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmp0ihi1cf9.swift:12:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmp0ihi1cf9.swift:12:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmp0ihi1cf9.swift:13:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmp0ihi1cf9.swift:13:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmp0ihi1cf9.swift:13:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmp0ihi1cf9.swift:14:38: error: cannot convert value of\
    \ type 'String' to specified type 'Double'\n    let area: Double = side1 + side2\
    \ + side3\n                       ~~~~~~~~~~~~~~^~~~~~~\n/tmp/tmp0ihi1cf9.swift:16:16:\
    \ error: cannot find 'round' in scope\n        return round(area, 2)\n       \
    \        ^~~~~\n"
  stdout: ''
  timestamp: 1660014764
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let a1 = abs(a)\n    let b1 = abs(b)\n\
    \    let c1 = abs(c)\n    if a1 + b1 > c1 {\n        return a * b * c / 2\n  \
    \  } else {\n        return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b:\
    \ 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp0thesqr2.swift:15:26: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return a * b * c / 2\n         \
    \      ~~~~~~~~~~^~~\n               Double(      )\n"
  stdout: ''
  timestamp: 1660014764
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let side1 = abs(a) + abs(b) + abs(c)\n\
    \    let side2 = abs(a) + abs(b) - abs(c)\n    let side3 = abs(a) - abs(b) - abs(c)\n\
    \    let area: Double = side1 * side2 * side3\n    if area > 0 {\n        return\
    \ round(area, 2)\n    } else {\n        return -1\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpxomlyim7.swift:14:38: error: cannot convert value of type 'Int'\
    \ to specified type 'Double'\n    let area: Double = side1 * side2 * side3\n \
    \                      ~~~~~~~~~~~~~~^~~~~~~\n                       Double( \
    \             )\n/tmp/tmpxomlyim7.swift:16:16: error: cannot find 'round' in scope\n\
    \        return round(area, 2)\n               ^~~~~\n"
  stdout: ''
  timestamp: 1660014764
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    var a = a\n    var b = b\n    var c =\
    \ c\n    var area: Double = 0\n    \n    if a + b > c {\n        a = c\n     \
    \   b = a - b\n        c = a + b\n    }\n    \n    if a + c > b {\n        a =\
    \ b\n        b = a - c\n        c = a + c\n    }\n    \n    if b + c > a {\n \
    \       a = c\n        b = a - b\n        c = a + b\n    }\n    \n    if a + b\
    \ > c {\n        a = c\n        b = a - b\n        c = a + b\n    }\n    \n  \
    \  if a + c > b {\n        a = b\n        b = a - c\n        c = a + c\n    }\n\
    \    \n    if b + c > a {\n        a = c\n        b = a - b\n        c = a + b\n\
    \    }\n    \n    if a + b > c {\n        a = c\n        b = a - b\n        c\
    \ = a + b\n    }\n    \n    if a + c > b {\n        a = b\n        b = a - c\n\
    \        c = a + c\n    }\n    \n    if b + c > a {\n        a = c\n        b\
    \ = a - b\n        c = a + b\n    }\n    \n    if a + b > c {\n        a = c\n\
    \        b = a - b\n        c = a + b\n    }\n    \n    if a + c > b {\n     \
    \   a = b\n        b = a - c\n        c = a + c\n    }\n    \n    if b + c > a\
    \ {\n        a = c\n        b = a - b\n        c = a + b\n    }\n    \n    if\
    \ a + b > c {\n        a = c\n        b = a - b\n        c = a + b\n    }\n  \
    \  \n    if a + c > b {\n        a = b\n        b = a - c\n        c = a + c\n\
    \    }\n    \n    if b + c > a {\n        a = c\n        b = a - b\n        c\
    \ = a + b\n    }\n    \n    if a + b > c {\n        a = c\n        b = a - b\n\
    \        c = a + b\n    }\n    \n    if a + c > b {\n        a = b\n        b\
    \ = a - c\n        c = a + c\n    }\n    \n    if b + c > a {\n        a = c\n\
    \        b = a - b\n        c = a + b\n    }\n    \n    if a + b > c {\n     \
    \   a = c\n        b = a - b\n        c = a + b\n    }\n    \n    if a + c > b\
    \ {\n        a = b\n        b = a - c\n        c = a + c\n    }\n    \n    if\
    \ b + c > a {\n        a = c\n        b = a - b\n        c = a + b\n    }\n  \
    \  \n    if a + b > c {\n        a = c\n        b = a - b\n        c = a + b\n\
    \    }\n    \n    if a + c > b {\n        a = \n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpnh1nww8n.swift:150:1: error: expected expression in assignment\n\
    }\n^\n/tmp/tmpnh1nww8n.swift:173:47: error: expected '}' at end of brace statement\n\
    assert(triangle_area(a: 2, b: 2, c: 10) == -1)\n                             \
    \                 ^\n/tmp/tmpnh1nww8n.swift:10:54: note: to match this opening\
    \ '{'\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n              \
    \                                       ^\n/tmp/tmpnh1nww8n.swift:153:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014764
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let sides = [a, b, c]\n    let sum = sides.reduce(0,\
    \ +)\n    if sum > sides[2] {\n        return Double(sides[0] * sides[1]) / Double(sides[0]\
    \ + sides[1])\n    } else {\n        return -1\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpelejj1d_/tmpelejj1d_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1001eccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1001bc3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1001bc3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1001bc27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpelejj1d_                        0x00005570b37ee39f <unavailable> + 5023

    5    libc.so.6                          0x00002b10020b8460 __libc_start_main +
    245

    6    tmpelejj1d_                        0x00005570b37ee039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014764
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let side1 = abs(a) + abs(b) + abs(c)\n\
    \    let side2 = abs(a) + abs(b) - abs(c)\n    let side3 = abs(a) - abs(b) - abs(c)\n\
    \    let area: Double\n    if side1 > 0 && side2 > 0 && side3 > 0 {\n        area\
    \ = side1 * side2 * side3\n    } else {\n        area = -1\n    }\n    return\
    \ round(area, 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpmigz0cs4.swift:16:30: error: cannot assign value of type 'Int'\
    \ to type 'Double'\n        area = side1 * side2 * side3\n               ~~~~~~~~~~~~~~^~~~~~~\n\
    \               Double(              )\n/tmp/tmpmigz0cs4.swift:20:12: error: cannot\
    \ find 'round' in scope\n    return round(area, 2)\n           ^~~~~\n"
  stdout: ''
  timestamp: 1660014764
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let side1 = abs(a) + abs(b) + abs(c)\n\
    \    let side2 = abs(a) + abs(b) - abs(c)\n    let side3 = abs(a) - abs(b) - abs(c)\n\
    \    let area = Double(side1 + side2 + side3)\n    if area >= 0 {\n        return\
    \ area\n    } else {\n        return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpo_obslp6/tmpo_obslp6.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b777e996c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b777e68db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b777e68d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b777e68c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo_obslp6                        0x00005561ec8d42bf <unavailable> + 4799

    5    libc.so.6                          0x00002b777eb82460 __libc_start_main +
    245

    6    tmpo_obslp6                        0x00005561ec8d3f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1660014764
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    if a > b {\n        if b > c {\n     \
    \       return (b + c) / 2\n        } else {\n            return -1\n        }\n\
    \    } else {\n        if c > b {\n            return -1\n        } else {\n \
    \           return (b + c) / 2\n        }\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmprr3p0f6c.swift:13:28: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n            return (b + c) / 2\n       \
    \            ~~~~~~~~^~~\n                   Double(    )\n/tmp/tmprr3p0f6c.swift:21:28:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \            return (b + c) / 2\n                   ~~~~~~~~^~~\n            \
    \       Double(    )\n"
  stdout: ''
  timestamp: 1660014764
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let side1 = abs(a) + abs(b) + abs(c)\n\
    \    let side2 = abs(a) + abs(b) - abs(c)\n    let side3 = abs(a) - abs(b) - abs(c)\n\
    \    let area: Double = side1 * side2 * side3\n    if area < 0 {\n        return\
    \ -1\n    }\n    return round(area * 100) / 100\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpa1cpaqza.swift:14:38: error: cannot convert value of type 'Int'\
    \ to specified type 'Double'\n    let area: Double = side1 * side2 * side3\n \
    \                      ~~~~~~~~~~~~~~^~~~~~~\n                       Double( \
    \             )\n/tmp/tmpa1cpaqza.swift:18:12: error: cannot find 'round' in scope\n\
    \    return round(area * 100) / 100\n           ^~~~~\n"
  stdout: ''
  timestamp: 1660014764
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3 = sqrt(pow(c, 2) +\
    \ pow(a, 2))\n    let area = (side1 + side2 + side3) / 2.0\n    if area > 0 {\n\
    \        return round(area, 2)\n    } else {\n        return -1\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpyxlbybrm.swift:11:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmpyxlbybrm.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmpyxlbybrm.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmpyxlbybrm.swift:12:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmpyxlbybrm.swift:12:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmpyxlbybrm.swift:12:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmpyxlbybrm.swift:13:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmpyxlbybrm.swift:13:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmpyxlbybrm.swift:13:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmpyxlbybrm.swift:16:16: error: cannot find 'round' in\
    \ scope\n        return round(area, 2)\n               ^~~~~\n"
  stdout: ''
  timestamp: 1660014764
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let sides = [a, b, c]\n    let sum = sides.reduce(0,\
    \ +)\n    if sum > sides[2] {\n        return Double(sides[2]) / Double(sides[0])\n\
    \    } else {\n        return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b:\
    \ 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmp86pwgmd0/tmp86pwgmd0.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad0a1bb2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad0a18a9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad0a18a9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0a18a87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp86pwgmd0                        0x000055e0c9efa39f <unavailable> + 5023

    5    libc.so.6                          0x00002ad0a1d9e460 __libc_start_main +
    245

    6    tmp86pwgmd0                        0x000055e0c9efa039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014764
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3 = sqrt(pow(c, 2) +\
    \ pow(a, 2))\n    let area: Double = side1 + side2 + side3\n    if area > 0 {\n\
    \        return round(area * 100) / 100\n    } else {\n        return -1\n   \
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(triangle_area(a: 3, b: 4, c:\
    \ 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpyrbe97n6.swift:11:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmpyrbe97n6.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmpyrbe97n6.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmpyrbe97n6.swift:12:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmpyrbe97n6.swift:12:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmpyrbe97n6.swift:12:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmpyrbe97n6.swift:13:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmpyrbe97n6.swift:13:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmpyrbe97n6.swift:13:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmpyrbe97n6.swift:14:38: error: cannot convert value of\
    \ type 'String' to specified type 'Double'\n    let area: Double = side1 + side2\
    \ + side3\n                       ~~~~~~~~~~~~~~^~~~~~~\n/tmp/tmpyrbe97n6.swift:16:16:\
    \ error: cannot find 'round' in scope\n        return round(area * 100) / 100\n\
    \               ^~~~~\n"
  stdout: ''
  timestamp: 1660014764
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    var sum: Double = 0\n    if a + b > c\
    \ {\n        sum = a + b\n    } else {\n        sum = a + c\n    }\n    if a +\
    \ c > b {\n        sum = sum + c\n    } else {\n        sum = sum + b\n    }\n\
    \    if b + c > a {\n        sum = sum + c\n    } else {\n        sum = sum +\
    \ b\n    }\n    return Double(sum) / Double(3.0)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp1cvetvq8.swift:13:17: error: cannot assign value of type 'Int'\
    \ to type 'Double'\n        sum = a + b\n              ~~^~~\n              Double(\
    \ )\n/tmp/tmp1cvetvq8.swift:15:17: error: cannot assign value of type 'Int' to\
    \ type 'Double'\n        sum = a + c\n              ~~^~~\n              Double(\
    \ )\n/tmp/tmp1cvetvq8.swift:18:21: error: cannot convert value of type 'Int' to\
    \ expected argument type 'Double'\n        sum = sum + c\n                   \
    \ ^\n                    Double( )\n/tmp/tmp1cvetvq8.swift:20:21: error: cannot\
    \ convert value of type 'Int' to expected argument type 'Double'\n        sum\
    \ = sum + b\n                    ^\n                    Double( )\n/tmp/tmp1cvetvq8.swift:23:21:\
    \ error: cannot convert value of type 'Int' to expected argument type 'Double'\n\
    \        sum = sum + c\n                    ^\n                    Double( )\n\
    /tmp/tmp1cvetvq8.swift:25:21: error: cannot convert value of type 'Int' to expected\
    \ argument type 'Double'\n        sum = sum + b\n                    ^\n     \
    \               Double( )\n"
  stdout: ''
  timestamp: 1660014764
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let a = abs(a)\n    let b = abs(b)\n \
    \   let c = abs(c)\n    if a + b > c {\n        return Double(a + b - c)\n   \
    \ } else {\n        return Double(-1 * a + b - c)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpe2chqt2q/tmpe2chqt2q.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafc8bfdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafc88f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafc88f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafc88f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe2chqt2q                        0x000055682a1122bf <unavailable> + 4799

    5    libc.so.6                          0x00002aafc8de9460 __libc_start_main +
    245

    6    tmpe2chqt2q                        0x000055682a111f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1660014764
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    var sum: Double = 0\n    var sum2: Double\
    \ = 0\n    var sum3: Double = 0\n    var sum4: Double = 0\n    var sum5: Double\
    \ = 0\n    var sum6: Double = 0\n    var sum7: Double = 0\n    var sum8: Double\
    \ = 0\n    var sum9: Double = 0\n    var sum10: Double = 0\n    var sum11: Double\
    \ = 0\n    var sum12: Double = 0\n    var sum13: Double = 0\n    var sum14: Double\
    \ = 0\n    var sum15: Double = 0\n    var sum16: Double = 0\n    var sum17: Double\
    \ = 0\n    var sum18: Double = 0\n    var sum19: Double = 0\n    var sum20: Double\
    \ = 0\n    var sum21: Double = 0\n    var sum22: Double = 0\n    var sum23: Double\
    \ = 0\n    var sum24: Double = 0\n    var sum25: Double = 0\n    var sum26: Double\
    \ = 0\n    var sum27: Double = 0\n    var sum28: Double = 0\n    var sum29: Double\
    \ = 0\n    var sum30: Double = 0\n    var sum31: Double = 0\n    var sum32: Double\
    \ = 0\n    var sum33: Double = 0\n    var sum34: Double = 0\n    var sum35: Double\
    \ = 0\n    var sum36: Double = 0\n    var sum37: Double = 0\n    var sum38: Double\
    \ = 0\n    var sum39: Double = 0\n    var sum40: Double = 0\n    var sum41: Double\
    \ = 0\n    var sum42: Double = 0\n    var sum43: Double = 0\n    var sum44: Double\
    \ = 0\n    var sum45: Double = 0\n    var sum46: Double = 0\n    var sum47: Double\
    \ = 0\n    var sum48: Double = 0\n    var sum49: Double = 0\n    var sum50: Double\
    \ = 0\n    var sum51: Double = 0\n    var sum52: Double = 0\n    var sum53: Double\
    \ = 0\n    var sum54: Double = 0\n    var sum55: Double = 0\n    var sum56: Double\
    \ = 0\n    var sum57: Double = 0\n    var sum58: Double = 0\n    var sum59: Double\
    \ = 0\n    var sum60: Double = 0\n    var sum61: Double = 0\n    var sum62: Double\
    \ = 0\n    var sum63: Double = 0\n    var sum64: Double = 0\n    var sum65: Double\
    \ = 0\n    var sum66: Double = 0\n    var sum67: Double = 0\n    var sum68: Double\
    \ = 0\n    var sum69: Double = 0\n    var sum70: Double = 0\n    var sum71: Double\
    \ = 0\n    var sum72: Double = 0\n    var sum73: Double = 0\n    var sum74: Double\
    \ = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3, b:\
    \ 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp6tftq02q.swift:11:9: warning: variable 'sum' was never used; consider\
    \ replacing with '_' or removing it\n    var sum: Double = 0\n        ^~~\n  \
    \      _\n/tmp/tmp6tftq02q.swift:12:9: warning: variable 'sum2' was never used;\
    \ consider replacing with '_' or removing it\n    var sum2: Double = 0\n     \
    \   ^~~~\n        _\n/tmp/tmp6tftq02q.swift:13:9: warning: variable 'sum3' was\
    \ never used; consider replacing with '_' or removing it\n    var sum3: Double\
    \ = 0\n        ^~~~\n        _\n/tmp/tmp6tftq02q.swift:14:9: warning: variable\
    \ 'sum4' was never used; consider replacing with '_' or removing it\n    var sum4:\
    \ Double = 0\n        ^~~~\n        _\n/tmp/tmp6tftq02q.swift:15:9: warning: variable\
    \ 'sum5' was never used; consider replacing with '_' or removing it\n    var sum5:\
    \ Double = 0\n        ^~~~\n        _\n/tmp/tmp6tftq02q.swift:16:9: warning: variable\
    \ 'sum6' was never used; consider replacing with '_' or removing it\n    var sum6:\
    \ Double = 0\n        ^~~~\n        _\n/tmp/tmp6tftq02q.swift:17:9: warning: variable\
    \ 'sum7' was never used; consider replacing with '_' or removing it\n    var sum7:\
    \ Double = 0\n        ^~~~\n        _\n/tmp/tmp6tftq02q.swift:18:9: warning: variable\
    \ 'sum8' was never used; consider replacing with '_' or removing it\n    var sum8:\
    \ Double = 0\n        ^~~~\n        _\n/tmp/tmp6tftq02q.swift:19:9: warning: variable\
    \ 'sum9' was never used; consider replacing with '_' or removing it\n    var sum9:\
    \ Double = 0\n        ^~~~\n        _\n/tmp/tmp6tftq02q.swift:20:9: warning: variable\
    \ 'sum10' was never used; consider replacing with '_' or removing it\n    var\
    \ sum10: Double = 0\n        ^~~~~\n        _\n/tmp/tmp6tftq02q.swift:21:9: warning:\
    \ variable 'sum11' was never used; consider replacing with '_' or removing it\n\
    \    var sum11: Double = 0\n        ^~~~~\n        _\n/tmp/tmp6tftq02q.swift:22:9:\
    \ warning: variable 'sum12' was never used; consider replacing with '_' or removing\
    \ it\n    var sum12: Double = 0\n        ^~~~~\n        _\n/tmp/tmp6tftq02q.swift:23:9:\
    \ warning: variable 'sum13' was never used; consider replacing with '_' or removing"
  stdout: ''
  timestamp: 1660014764
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    if a + b > c {\n        return -1\n  \
    \  }\n    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n     \
    \   return -1\n    }\n    return Double(sqrt(Double(a * a + b * b + c * c)))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpparmko_v.swift:20:19: error: cannot find 'sqrt' in scope\n    return\
    \ Double(sqrt(Double(a * a + b * b + c * c)))\n                  ^~~~\n"
  stdout: ''
  timestamp: 1660014764
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    var sum: Double = 0\n    var sum2: Double\
    \ = 0\n    var sum3: Double = 0\n    var sum4: Double = 0\n    var sum5: Double\
    \ = 0\n    var sum6: Double = 0\n    var sum7: Double = 0\n    var sum8: Double\
    \ = 0\n    var sum9: Double = 0\n    var sum10: Double = 0\n    var sum11: Double\
    \ = 0\n    var sum12: Double = 0\n    var sum13: Double = 0\n    var sum14: Double\
    \ = 0\n    var sum15: Double = 0\n    var sum16: Double = 0\n    var sum17: Double\
    \ = 0\n    var sum18: Double = 0\n    var sum19: Double = 0\n    var sum20: Double\
    \ = 0\n    var sum21: Double = 0\n    var sum22: Double = 0\n    var sum23: Double\
    \ = 0\n    var sum24: Double = 0\n    var sum25: Double = 0\n    var sum26: Double\
    \ = 0\n    var sum27: Double = 0\n    var sum28: Double = 0\n    var sum29: Double\
    \ = 0\n    var sum30: Double = 0\n    var sum31: Double = 0\n    var sum32: Double\
    \ = 0\n    var sum33: Double = 0\n    var sum34: Double = 0\n    var sum35: Double\
    \ = 0\n    var sum36: Double = 0\n    var sum37: Double = 0\n    var sum38: Double\
    \ = 0\n    var sum39: Double = 0\n    var sum40: Double = 0\n    var sum41: Double\
    \ = 0\n    var sum42: Double = 0\n    var sum43: Double = 0\n    var sum44: Double\
    \ = 0\n    var sum45: Double = 0\n    var sum46: Double = 0\n    var sum47: Double\
    \ = 0\n    var sum48: Double = 0\n    var sum49: Double = 0\n    var sum50: Double\
    \ = 0\n    var sum51: Double = 0\n    var sum52: Double = 0\n    var sum53: Double\
    \ = 0\n    var sum54: Double = 0\n    var sum55: Double = 0\n    var sum56: Double\
    \ = 0\n    var sum57: Double = 0\n    var sum58: Double = 0\n    var sum59: Double\
    \ = 0\n    var sum60: Double = 0\n    var sum61: Double = 0\n    var sum62: Double\
    \ = 0\n    var sum63: Double = 0\n    var sum64: Double = 0\n    var sum65: Double\
    \ = 0\n    var sum66: Double = 0\n    var sum67: Double = 0\n    var sum68: Double\
    \ = 0\n    var sum69: Double = 0\n    var sum70: Double = 0\n    var sum71: Double\
    \ = 0\n    var sum72: Double = 0\n    var sum73: Double = 0\n    var sum74: Double\
    \ = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3, b:\
    \ 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp6tftq02q.swift:11:9: warning: variable 'sum' was never used; consider\
    \ replacing with '_' or removing it\n    var sum: Double = 0\n        ^~~\n  \
    \      _\n/tmp/tmp6tftq02q.swift:12:9: warning: variable 'sum2' was never used;\
    \ consider replacing with '_' or removing it\n    var sum2: Double = 0\n     \
    \   ^~~~\n        _\n/tmp/tmp6tftq02q.swift:13:9: warning: variable 'sum3' was\
    \ never used; consider replacing with '_' or removing it\n    var sum3: Double\
    \ = 0\n        ^~~~\n        _\n/tmp/tmp6tftq02q.swift:14:9: warning: variable\
    \ 'sum4' was never used; consider replacing with '_' or removing it\n    var sum4:\
    \ Double = 0\n        ^~~~\n        _\n/tmp/tmp6tftq02q.swift:15:9: warning: variable\
    \ 'sum5' was never used; consider replacing with '_' or removing it\n    var sum5:\
    \ Double = 0\n        ^~~~\n        _\n/tmp/tmp6tftq02q.swift:16:9: warning: variable\
    \ 'sum6' was never used; consider replacing with '_' or removing it\n    var sum6:\
    \ Double = 0\n        ^~~~\n        _\n/tmp/tmp6tftq02q.swift:17:9: warning: variable\
    \ 'sum7' was never used; consider replacing with '_' or removing it\n    var sum7:\
    \ Double = 0\n        ^~~~\n        _\n/tmp/tmp6tftq02q.swift:18:9: warning: variable\
    \ 'sum8' was never used; consider replacing with '_' or removing it\n    var sum8:\
    \ Double = 0\n        ^~~~\n        _\n/tmp/tmp6tftq02q.swift:19:9: warning: variable\
    \ 'sum9' was never used; consider replacing with '_' or removing it\n    var sum9:\
    \ Double = 0\n        ^~~~\n        _\n/tmp/tmp6tftq02q.swift:20:9: warning: variable\
    \ 'sum10' was never used; consider replacing with '_' or removing it\n    var\
    \ sum10: Double = 0\n        ^~~~~\n        _\n/tmp/tmp6tftq02q.swift:21:9: warning:\
    \ variable 'sum11' was never used; consider replacing with '_' or removing it\n\
    \    var sum11: Double = 0\n        ^~~~~\n        _\n/tmp/tmp6tftq02q.swift:22:9:\
    \ warning: variable 'sum12' was never used; consider replacing with '_' or removing\
    \ it\n    var sum12: Double = 0\n        ^~~~~\n        _\n/tmp/tmp6tftq02q.swift:23:9:\
    \ warning: variable 'sum13' was never used; consider replacing with '_' or removing"
  stdout: ''
  timestamp: 1660014764
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3 = sqrt(pow(c, 2) +\
    \ pow(a, 2))\n    let area: Double = side1 * side2 * side3\n    if area >= 0 {\n\
    \        return area\n    } else {\n        return -1\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpvho4gui1.swift:11:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmpvho4gui1.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmpvho4gui1.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmpvho4gui1.swift:12:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmpvho4gui1.swift:12:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmpvho4gui1.swift:12:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmpvho4gui1.swift:13:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmpvho4gui1.swift:13:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmpvho4gui1.swift:13:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmpvho4gui1.swift:14:38: error: cannot convert value of\
    \ type 'Duration' to specified type 'Double'\n    let area: Double = side1 * side2\
    \ * side3\n                       ~~~~~~~~~~~~~~^~~~~~~\n"
  stdout: ''
  timestamp: 1660014764
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let a = abs(a)\n    let b = abs(b)\n \
    \   let c = abs(c)\n    let s = a + b + c\n    if s == 0 {\n        return -1\n\
    \    }\n    let area = (a * b * c) / s\n    return round(area, 2)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpm1mx5av0.swift:19:12: error: cannot find 'round' in scope\n   \
    \ return round(area, 2)\n           ^~~~~\n"
  stdout: ''
  timestamp: 1660014764
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let a = abs(a)\n    let b = abs(b)\n \
    \   let c = abs(c)\n    if a + b > c {\n        return Double(a + b - c)\n   \
    \ } else {\n        return Double(a + b + c - a)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpajx8sh6i/tmpajx8sh6i.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff84f1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff84c14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff84c14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff84c137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpajx8sh6i                        0x000055a08f1b92bf <unavailable> + 4799

    5    libc.so.6                          0x00002aff85109460 __libc_start_main +
    245

    6    tmpajx8sh6i                        0x000055a08f1b8f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1660014764
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let side1 = abs(a) + abs(b) + abs(c)\n\
    \    let side2 = abs(a) + abs(b) - abs(c)\n    let side3 = abs(a) - abs(b) - abs(c)\n\
    \    return Double(side1 + side2 + side3) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmprrjo_1wq/tmprrjo_1wq.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba41aedcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba41abd3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba41abd3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba41abd27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprrjo_1wq                        0x00005577d79c52bf <unavailable> + 4799

    5    libc.so.6                          0x00002ba41b0c8460 __libc_start_main +
    245

    6    tmprrjo_1wq                        0x00005577d79c4f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1660014765
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    var sum: Double = 0\n    if a + b > c\
    \ {\n        sum = a + b\n    } else {\n        sum = a + c\n    }\n    if a +\
    \ c > b {\n        sum = sum + c\n    } else {\n        sum = sum + b\n    }\n\
    \    if b + c > a {\n        sum = sum + c\n    } else {\n        sum = sum +\
    \ b\n    }\n    return Double(sum) / Double(3.0)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp1cvetvq8.swift:13:17: error: cannot assign value of type 'Int'\
    \ to type 'Double'\n        sum = a + b\n              ~~^~~\n              Double(\
    \ )\n/tmp/tmp1cvetvq8.swift:15:17: error: cannot assign value of type 'Int' to\
    \ type 'Double'\n        sum = a + c\n              ~~^~~\n              Double(\
    \ )\n/tmp/tmp1cvetvq8.swift:18:21: error: cannot convert value of type 'Int' to\
    \ expected argument type 'Double'\n        sum = sum + c\n                   \
    \ ^\n                    Double( )\n/tmp/tmp1cvetvq8.swift:20:21: error: cannot\
    \ convert value of type 'Int' to expected argument type 'Double'\n        sum\
    \ = sum + b\n                    ^\n                    Double( )\n/tmp/tmp1cvetvq8.swift:23:21:\
    \ error: cannot convert value of type 'Int' to expected argument type 'Double'\n\
    \        sum = sum + c\n                    ^\n                    Double( )\n\
    /tmp/tmp1cvetvq8.swift:25:21: error: cannot convert value of type 'Int' to expected\
    \ argument type 'Double'\n        sum = sum + b\n                    ^\n     \
    \               Double( )\n"
  stdout: ''
  timestamp: 1660014764
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    var area = 0.0\n    if a + b > c {\n \
    \       return -1\n    }\n    if a + c > b {\n        return -1\n    }\n    if\
    \ b + c > a {\n        return -1\n    }\n    area = Double(a * b * c) / Double(a\
    \ + b + c)\n    return round(area, 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b:\
    \ 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpoufi3ttn.swift:22:12: error: cannot find 'round' in scope\n   \
    \ return round(area, 2)\n           ^~~~~\n"
  stdout: ''
  timestamp: 1660014764
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    var sum: Double = 0\n    var sum2: Double\
    \ = 0\n    var sum3: Double = 0\n    \n    if a > b {\n        sum = b\n     \
    \   sum2 = b\n        sum3 = b\n    } else {\n        sum = a\n        sum2 =\
    \ a\n        sum3 = a\n    }\n    \n    if c > sum2 {\n        sum2 = c\n    \
    \    sum3 = c\n    } else {\n        sum2 = c\n        sum3 = c\n    }\n    \n\
    \    if sum3 > sum2 {\n        sum3 = sum2\n    }\n    \n    if sum3 > sum {\n\
    \        sum = sum3\n    }\n    \n    if sum3 > 0 {\n        return Double(round(Double(sum)\
    \ / Double(sum3)))\n    } else {\n        return -1\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp7ol30k9b.swift:16:15: error: cannot assign value of type 'Int'\
    \ to type 'Double'\n        sum = b\n              ^\n              Double( )\n\
    /tmp/tmp7ol30k9b.swift:17:16: error: cannot assign value of type 'Int' to type\
    \ 'Double'\n        sum2 = b\n               ^\n               Double( )\n/tmp/tmp7ol30k9b.swift:18:16:\
    \ error: cannot assign value of type 'Int' to type 'Double'\n        sum3 = b\n\
    \               ^\n               Double( )\n/tmp/tmp7ol30k9b.swift:20:15: error:\
    \ cannot assign value of type 'Int' to type 'Double'\n        sum = a\n      \
    \        ^\n              Double( )\n/tmp/tmp7ol30k9b.swift:21:16: error: cannot\
    \ assign value of type 'Int' to type 'Double'\n        sum2 = a\n            \
    \   ^\n               Double( )\n/tmp/tmp7ol30k9b.swift:22:16: error: cannot assign\
    \ value of type 'Int' to type 'Double'\n        sum3 = a\n               ^\n \
    \              Double( )\n/tmp/tmp7ol30k9b.swift:25:10: error: binary operator\
    \ '>' cannot be applied to operands of type 'Int' and 'Double'\n    if c > sum2\
    \ {\n       ~ ^ ~~~~\n/tmp/tmp7ol30k9b.swift:25:10: note: overloads for '>' exist\
    \ with these partially matching parameter lists: (Int, Int)\n    if c > sum2 {\n\
    \         ^\n/tmp/tmp7ol30k9b.swift:26:16: error: cannot assign value of type\
    \ 'Int' to type 'Double'\n        sum2 = c\n               ^\n               Double(\
    \ )\n/tmp/tmp7ol30k9b.swift:27:16: error: cannot assign value of type 'Int' to\
    \ type 'Double'\n        sum3 = c\n               ^\n               Double( )\n\
    /tmp/tmp7ol30k9b.swift:29:16: error: cannot assign value of type 'Int' to type\
    \ 'Double'\n        sum2 = c\n               ^\n               Double( )\n/tmp/tmp7ol30k9b.swift:30:16:\
    \ error: cannot assign value of type 'Int' to type 'Double'\n        sum3 = c\n\
    \               ^\n               Double( )\n/tmp/tmp7ol30k9b.swift:42:23: error:\
    \ cannot find 'round' in scope\n        return Double(round(Double(sum) / Double(sum3)))\n\
    \                      ^~~~~\n"
  stdout: ''
  timestamp: 1660014764
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let a = abs(a)\n    let b = abs(b)\n \
    \   let c = abs(c)\n    if a + b > c {\n        return Double(a + b - c)\n   \
    \ } else {\n        return Double(a + b + c - a)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpajx8sh6i/tmpajx8sh6i.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff84f1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff84c14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff84c14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff84c137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpajx8sh6i                        0x000055a08f1b92bf <unavailable> + 4799

    5    libc.so.6                          0x00002aff85109460 __libc_start_main +
    245

    6    tmpajx8sh6i                        0x000055a08f1b8f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1660014764
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let sides = a + b + c\n    if sides ==\
    \ 0 {\n        return -1\n    }\n    let area = sqrt(Double(a * b * c) / sides)\n\
    \    return round(area, 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp716z6qfo.swift:15:16: error: cannot find 'sqrt' in scope\n    let\
    \ area = sqrt(Double(a * b * c) / sides)\n               ^~~~\n/tmp/tmp716z6qfo.swift:15:39:\
    \ error: binary operator '/' cannot be applied to operands of type 'Double' and\
    \ 'Int'\n    let area = sqrt(Double(a * b * c) / sides)\n                    ~~~~~~~~~~~~~~~~~\
    \ ^ ~~~~~\n/tmp/tmp716z6qfo.swift:15:39: note: overloads for '/' exist with these\
    \ partially matching parameter lists: (Double, Double), (Int, Int)\n    let area\
    \ = sqrt(Double(a * b * c) / sides)\n                                      ^\n\
    /tmp/tmp716z6qfo.swift:16:12: error: cannot find 'round' in scope\n    return\
    \ round(area, 2)\n           ^~~~~\n"
  stdout: ''
  timestamp: 1660014764
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let sides = [a, b, c]\n    let sum = sides.reduce(0,\
    \ +)\n    if sum > sides.last {\n        return -1\n    }\n    let area = sides.reduce(0,\
    \ +) / Double(sides.count)\n    return Double(area)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpdj1q_yxl.swift:13:20: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    if sum > sides.last {\n         \
    \          ^\n/tmp/tmpdj1q_yxl.swift:13:20: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n    if sum > sides.last {\n\
    \                   ^\n                        ?? <#default value#>\n/tmp/tmpdj1q_yxl.swift:13:20:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    if sum > sides.last {\n                   ^\n                   \
    \    !\n/tmp/tmpdj1q_yxl.swift:16:32: error: cannot convert value of type '(Double)\
    \ -> Double' to expected argument type '(Double, Int) throws -> Double'\n    let\
    \ area = sides.reduce(0, +) / Double(sides.count)\n                          \
    \     ^\n"
  stdout: ''
  timestamp: 1660014765
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let sides = [a, b, c]\n    let sum = sides.reduce(0,\
    \ +)\n    if sum > sides.last {\n        return Double(sum)\n    }\n    return\
    \ -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(triangle_area(a: 3, b: 4, c:\
    \ 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpg4fep0p6.swift:13:20: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    if sum > sides.last {\n         \
    \          ^\n/tmp/tmpg4fep0p6.swift:13:20: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n    if sum > sides.last {\n\
    \                   ^\n                        ?? <#default value#>\n/tmp/tmpg4fep0p6.swift:13:20:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    if sum > sides.last {\n                   ^\n                   \
    \    !\n"
  stdout: ''
  timestamp: 1660014764
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    if a + b > c {\n        return -1\n  \
    \  }\n    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n     \
    \   return -1\n    }\n    return Double(sqrt(Double(a * a + b * b + c * c)))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpparmko_v.swift:20:19: error: cannot find 'sqrt' in scope\n    return\
    \ Double(sqrt(Double(a * a + b * b + c * c)))\n                  ^~~~\n"
  stdout: ''
  timestamp: 1660014764
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    var sum: Double = 0\n    var sum2: Double\
    \ = 0\n    var sum3: Double = 0\n    var sum4: Double = 0\n    var sum5: Double\
    \ = 0\n    var sum6: Double = 0\n    var sum7: Double = 0\n    var sum8: Double\
    \ = 0\n    var sum9: Double = 0\n    var sum10: Double = 0\n    var sum11: Double\
    \ = 0\n    var sum12: Double = 0\n    var sum13: Double = 0\n    var sum14: Double\
    \ = 0\n    var sum15: Double = 0\n    var sum16: Double = 0\n    var sum17: Double\
    \ = 0\n    var sum18: Double = 0\n    var sum19: Double = 0\n    var sum20: Double\
    \ = 0\n    var sum21: Double = 0\n    var sum22: Double = 0\n    var sum23: Double\
    \ = 0\n    var sum24: Double = 0\n    var sum25: Double = 0\n    var sum26: Double\
    \ = 0\n    var sum27: Double = 0\n    var sum28: Double = 0\n    var sum29: Double\
    \ = 0\n    var sum30: Double = 0\n    var sum31: Double = 0\n    var sum32: Double\
    \ = 0\n    var sum33: Double = 0\n    var sum34: Double = 0\n    var sum35: Double\
    \ = 0\n    var sum36: Double = 0\n    var sum37: Double = 0\n    var sum38: Double\
    \ = 0\n    var sum39: Double = 0\n    var sum40: Double = 0\n    var sum41: Double\
    \ = 0\n    var sum42: Double = 0\n    var sum43: Double = 0\n    var sum44: Double\
    \ = 0\n    var sum45: Double = 0\n    var sum46: Double = 0\n    var sum47: Double\
    \ = 0\n    var sum48: Double = 0\n    var sum49: Double = 0\n    var sum50: Double\
    \ = 0\n    var sum51: Double = 0\n    var sum52: Double = 0\n    var sum53: Double\
    \ = 0\n    var sum54: Double = 0\n    var sum55: Double = 0\n    var sum56: Double\
    \ = 0\n    var sum57: Double = 0\n    var sum58: Double = 0\n    var sum59: Double\
    \ = 0\n    var sum60: Double = 0\n    var sum61: Double = 0\n    var sum62: Double\
    \ = 0\n    var sum63: Double = 0\n    var sum64: Double = 0\n    var sum65: Double\
    \ = 0\n    var sum66: Double = 0\n    var sum67: Double = 0\n    var sum68: Double\
    \ = 0\n    var sum69: Double = 0\n    var sum70: Double = 0\n    var sum71: Double\
    \ = 0\n    var sum72: Double = 0\n    var sum73: Double = 0\n    var sum74: Double\
    \ = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3, b:\
    \ 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp6tftq02q.swift:11:9: warning: variable 'sum' was never used; consider\
    \ replacing with '_' or removing it\n    var sum: Double = 0\n        ^~~\n  \
    \      _\n/tmp/tmp6tftq02q.swift:12:9: warning: variable 'sum2' was never used;\
    \ consider replacing with '_' or removing it\n    var sum2: Double = 0\n     \
    \   ^~~~\n        _\n/tmp/tmp6tftq02q.swift:13:9: warning: variable 'sum3' was\
    \ never used; consider replacing with '_' or removing it\n    var sum3: Double\
    \ = 0\n        ^~~~\n        _\n/tmp/tmp6tftq02q.swift:14:9: warning: variable\
    \ 'sum4' was never used; consider replacing with '_' or removing it\n    var sum4:\
    \ Double = 0\n        ^~~~\n        _\n/tmp/tmp6tftq02q.swift:15:9: warning: variable\
    \ 'sum5' was never used; consider replacing with '_' or removing it\n    var sum5:\
    \ Double = 0\n        ^~~~\n        _\n/tmp/tmp6tftq02q.swift:16:9: warning: variable\
    \ 'sum6' was never used; consider replacing with '_' or removing it\n    var sum6:\
    \ Double = 0\n        ^~~~\n        _\n/tmp/tmp6tftq02q.swift:17:9: warning: variable\
    \ 'sum7' was never used; consider replacing with '_' or removing it\n    var sum7:\
    \ Double = 0\n        ^~~~\n        _\n/tmp/tmp6tftq02q.swift:18:9: warning: variable\
    \ 'sum8' was never used; consider replacing with '_' or removing it\n    var sum8:\
    \ Double = 0\n        ^~~~\n        _\n/tmp/tmp6tftq02q.swift:19:9: warning: variable\
    \ 'sum9' was never used; consider replacing with '_' or removing it\n    var sum9:\
    \ Double = 0\n        ^~~~\n        _\n/tmp/tmp6tftq02q.swift:20:9: warning: variable\
    \ 'sum10' was never used; consider replacing with '_' or removing it\n    var\
    \ sum10: Double = 0\n        ^~~~~\n        _\n/tmp/tmp6tftq02q.swift:21:9: warning:\
    \ variable 'sum11' was never used; consider replacing with '_' or removing it\n\
    \    var sum11: Double = 0\n        ^~~~~\n        _\n/tmp/tmp6tftq02q.swift:22:9:\
    \ warning: variable 'sum12' was never used; consider replacing with '_' or removing\
    \ it\n    var sum12: Double = 0\n        ^~~~~\n        _\n/tmp/tmp6tftq02q.swift:23:9:\
    \ warning: variable 'sum13' was never used; consider replacing with '_' or removing"
  stdout: ''
  timestamp: 1660014764
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    if a + b > c {\n        return Double(-1)\
    \ * Double(M_PI) / Double(6)\n    }\n    if a + c > b {\n        return Double(-1)\
    \ * Double(M_PI) / Double(6)\n    }\n    if b + c > a {\n        return Double(-1)\
    \ * Double(M_PI) / Double(6)\n    }\n    return Double(M_PI) / Double(6)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpf25phjrd.swift:12:36: error: cannot find 'M_PI' in scope\n    \
    \    return Double(-1) * Double(M_PI) / Double(6)\n                          \
    \         ^~~~\n/tmp/tmpf25phjrd.swift:15:36: error: cannot find 'M_PI' in scope\n\
    \        return Double(-1) * Double(M_PI) / Double(6)\n                      \
    \             ^~~~\n/tmp/tmpf25phjrd.swift:18:36: error: cannot find 'M_PI' in\
    \ scope\n        return Double(-1) * Double(M_PI) / Double(6)\n              \
    \                     ^~~~\n/tmp/tmpf25phjrd.swift:20:19: error: cannot find 'M_PI'\
    \ in scope\n    return Double(M_PI) / Double(6)\n                  ^~~~\n"
  stdout: ''
  timestamp: 1660014764
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let a = abs(a)\n    let b = abs(b)\n \
    \   let c = abs(c)\n    if a + b > c {\n        return Double(a + b - c)\n   \
    \ } else {\n        return Double(a + b + c - a)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpajx8sh6i/tmpajx8sh6i.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff84f1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff84c14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff84c14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff84c137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpajx8sh6i                        0x000055a08f1b92bf <unavailable> + 4799

    5    libc.so.6                          0x00002aff85109460 __libc_start_main +
    245

    6    tmpajx8sh6i                        0x000055a08f1b8f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1660014764
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3 = sqrt(pow(c, 2) +\
    \ pow(a, 2))\n    let area: Double = side1 + side2 + side3\n    if area > 0 {\n\
    \        return round(area, 2)\n    } else {\n        return -1\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp0ihi1cf9.swift:11:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmp0ihi1cf9.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmp0ihi1cf9.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmp0ihi1cf9.swift:12:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmp0ihi1cf9.swift:12:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmp0ihi1cf9.swift:12:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmp0ihi1cf9.swift:13:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmp0ihi1cf9.swift:13:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmp0ihi1cf9.swift:13:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmp0ihi1cf9.swift:14:38: error: cannot convert value of\
    \ type 'String' to specified type 'Double'\n    let area: Double = side1 + side2\
    \ + side3\n                       ~~~~~~~~~~~~~~^~~~~~~\n/tmp/tmp0ihi1cf9.swift:16:16:\
    \ error: cannot find 'round' in scope\n        return round(area, 2)\n       \
    \        ^~~~~\n"
  stdout: ''
  timestamp: 1660014764
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let sides = sqrt(pow(a, 2) + pow(b, 2)\
    \ + pow(c, 2))\n    if sides > 0 {\n        return Double(round(sides * 100))\
    \ / 100\n    } else {\n        return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp6z2d7199.swift:11:17: error: cannot find 'sqrt' in scope\n    let\
    \ sides = sqrt(pow(a, 2) + pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmp6z2d7199.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let sides = sqrt(pow(a, 2) + pow(b, 2)\
    \ + pow(c, 2))\n                     ^~~\n/tmp/tmp6z2d7199.swift:11:34: error:\
    \ cannot find 'pow' in scope\n    let sides = sqrt(pow(a, 2) + pow(b, 2) + pow(c,\
    \ 2))\n                                 ^~~\n/tmp/tmp6z2d7199.swift:11:46: error:\
    \ cannot find 'pow' in scope\n    let sides = sqrt(pow(a, 2) + pow(b, 2) + pow(c,\
    \ 2))\n                                             ^~~\n/tmp/tmp6z2d7199.swift:13:23:\
    \ error: cannot find 'round' in scope\n        return Double(round(sides * 100))\
    \ / 100\n                      ^~~~~\n"
  stdout: ''
  timestamp: 1660014764
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3 = sqrt(pow(c, 2) +\
    \ pow(a, 2))\n    let area: Double = side1 + side2 + side3\n    if area < 0 {\n\
    \        return -1\n    }\n    return round(area * 100) / 100\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmppp7punl8.swift:11:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmppp7punl8.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmppp7punl8.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmppp7punl8.swift:12:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmppp7punl8.swift:12:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmppp7punl8.swift:12:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmppp7punl8.swift:13:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmppp7punl8.swift:13:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmppp7punl8.swift:13:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmppp7punl8.swift:14:38: error: cannot convert value of\
    \ type 'String' to specified type 'Double'\n    let area: Double = side1 + side2\
    \ + side3\n                       ~~~~~~~~~~~~~~^~~~~~~\n/tmp/tmppp7punl8.swift:18:12:\
    \ error: cannot find 'round' in scope\n    return round(area * 100) / 100\n  \
    \         ^~~~~\n"
  stdout: ''
  timestamp: 1660014765
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let a = abs(a)\n    let b = abs(b)\n \
    \   let c = abs(c)\n    let s = a + b + c\n    if s > 0 {\n        return s /\
    \ 2\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp9s5zc3hm.swift:16:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return s / 2\n               ~~^~~\n\
    \               Double( )\n"
  stdout: ''
  timestamp: 1660014765
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3 = sqrt(pow(c, 2) +\
    \ pow(a, 2))\n    if side1 + side2 > side3 {\n        return Double(round(side1\
    \ + side2 - side3))\n    } else {\n        return -1\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpjf_ot2i1.swift:11:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmpjf_ot2i1.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmpjf_ot2i1.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmpjf_ot2i1.swift:12:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmpjf_ot2i1.swift:12:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmpjf_ot2i1.swift:12:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmpjf_ot2i1.swift:13:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmpjf_ot2i1.swift:13:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmpjf_ot2i1.swift:13:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmpjf_ot2i1.swift:15:23: error: cannot find 'round' in\
    \ scope\n        return Double(round(side1 + side2 - side3))\n               \
    \       ^~~~~\n"
  stdout: ''
  timestamp: 1660014765
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    var a = a\n    var b = b\n    var c =\
    \ c\n    var sum: Double = 0\n    var area: Double = 0\n    var isValid: Bool\
    \ = false\n    \n    if a + b > c {\n        isValid = true\n        sum = a\n\
    \        a = b\n        b = c\n        c = sum\n    }\n    \n    if a + c > b\
    \ {\n        isValid = true\n        sum = a\n        a = c\n        c = b\n \
    \       b = sum\n    }\n    \n    if b + c > a {\n        isValid = true\n   \
    \     sum = b\n        b = c\n        c = a\n        a = sum\n    }\n    \n  \
    \  if isValid {\n        area = sqrt(Double(a * b * c))\n    }\n    \n    return\
    \ area\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3, b:\
    \ 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpg27oz42h.swift:20:15: error: cannot assign value of type 'Int'\
    \ to type 'Double'\n        sum = a\n              ^\n              Double( )\n\
    /tmp/tmpg27oz42h.swift:23:13: error: cannot assign value of type 'Double' to type\
    \ 'Int'\n        c = sum\n            ^~~\n            Int( )\n/tmp/tmpg27oz42h.swift:28:15:\
    \ error: cannot assign value of type 'Int' to type 'Double'\n        sum = a\n\
    \              ^\n              Double( )\n/tmp/tmpg27oz42h.swift:31:13: error:\
    \ cannot assign value of type 'Double' to type 'Int'\n        b = sum\n      \
    \      ^~~\n            Int( )\n/tmp/tmpg27oz42h.swift:36:15: error: cannot assign\
    \ value of type 'Int' to type 'Double'\n        sum = b\n              ^\n   \
    \           Double( )\n/tmp/tmpg27oz42h.swift:39:13: error: cannot assign value\
    \ of type 'Double' to type 'Int'\n        a = sum\n            ^~~\n         \
    \   Int( )\n/tmp/tmpg27oz42h.swift:43:16: error: cannot find 'sqrt' in scope\n\
    \        area = sqrt(Double(a * b * c))\n               ^~~~\n"
  stdout: ''
  timestamp: 1660014765
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let sides = [a, b, c]\n    let sumOfSides\
    \ = sides.reduce(0, +)\n    if sumOfSides > sides[2] {\n        return -1\n  \
    \  }\n    return Double(sides[0] * sides[1] * sides[2]) / Double(sides[0] + sides[1]\
    \ + sides[2])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpcclsaiuj/tmpcclsaiuj.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0ac3cd4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0ac39cbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0ac39cb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0ac39ca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcclsaiuj                        0x000055b56aa6b39f <unavailable> + 5023

    5    libc.so.6                          0x00002b0ac3ec0460 __libc_start_main +
    245

    6    tmpcclsaiuj                        0x000055b56aa6b039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014765
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    if a + b > c {\n        return -1\n  \
    \  }\n    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n     \
    \   return -1\n    }\n    return Double(sqrt(Double(a * b * c)))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp_n79eimj.swift:20:19: error: cannot find 'sqrt' in scope\n    return\
    \ Double(sqrt(Double(a * b * c)))\n                  ^~~~\n"
  stdout: ''
  timestamp: 1660014765
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    if a + b > c {\n        return -1\n  \
    \  }\n    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n     \
    \   return -1\n    }\n    return Double(sqrt(pow((b * b) - (4 * a * c)), 2))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpaft57_c9.swift:20:19: error: cannot find 'sqrt' in scope\n    return\
    \ Double(sqrt(pow((b * b) - (4 * a * c)), 2))\n                  ^~~~\n/tmp/tmpaft57_c9.swift:20:24:\
    \ error: cannot find 'pow' in scope\n    return Double(sqrt(pow((b * b) - (4 *\
    \ a * c)), 2))\n                       ^~~\n"
  stdout: ''
  timestamp: 1660014765
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let a1 = b * b - 4 * a * c\n    let a2\
    \ = math.sqrt(a1)\n    let a3 = math.sqrt(a2)\n    let a4 = math.sqrt(a3)\n  \
    \  let a5 = math.sqrt(a4)\n    let a6 = math.sqrt(a5)\n    let a7 = math.sqrt(a6)\n\
    \    let a8 = math.sqrt(a7)\n    let a9 = math.sqrt(a8)\n    let a10 = math.sqrt(a9)\n\
    \    let a11 = math.sqrt(a10)\n    let a12 = math.sqrt(a11)\n    let a13 = math.sqrt(a12)\n\
    \    let a14 = math.sqrt(a13)\n    let a15 = math.sqrt(a14)\n    let a16 = math.sqrt(a15)\n\
    \    let a17 = math.sqrt(a16)\n    let a18 = math.sqrt(a17)\n    let a19 = math.sqrt(a18)\n\
    \    let a20 = math.sqrt(a19)\n    let a21 = math.sqrt(a20)\n    let a22 = math.sqrt(a21)\n\
    \    let a23 = math.sqrt(a22)\n    let a24 = math.sqrt(a23)\n    let a25 = math.sqrt(a24)\n\
    \    let a26 = math.sqrt(a25)\n    let a27 = math.sqrt(a26)\n    let a28 = math.sqrt(a27)\n\
    \    let a29 = math.sqrt(a28)\n    let a30 = math.sqrt(a29)\n    let a31 = math.sqrt(a30)\n\
    \    let a32 = math.sqrt(a31)\n    let a33 = math.sqrt(a32)\n    let a34 = math.sqrt(a33)\n\
    \    let a35 = math.sqrt(a34)\n    let a36 = math.sqrt(a35)\n    let a37 = math.sqrt(a36)\n\
    \    let a38 = math.sqrt(a37)\n    let a39 = math.sqrt(a38)\n    let a40 = math.sqrt(a39)\n\
    \    let a41 = math.sqrt(a40)\n    let a42 = math.sqrt(a41)\n    let a43 = math.sqrt(a42)\n\
    \    let a44 = math.sqrt(a43) \n    let a45 = math.sqrt(a44)\n    let a46 = math.sqrt(a45)\n\
    \    let a47 = math.sqrt(a46)\n    let a48 = math.sqrt(a47)\n    let a49 = math.sqrt(a48)\n\
    \    let a50 = math.sqrt(a49)\n    let a51 = math.sqrt(a50)\n    let a52 = math.sqrt(a51)\n\
    \    let a53 = math.sqrt(a52)\n    let a54 = math.sqrt(a53)\n    let a55 = math.sqrt(a54)\n\
    \    let a56 = math.sqrt(a55)\n    let a57 = math.sqrt(a56)\n    let a58 = math.sqrt(a57)\n\
    \    let a59 = math.sqrt(a58)\n    let a60 = math.sqrt(a59)\n    let a61 = math.sqrt(a60)\n\
    \    let a62 = math.sqrt(a61)\n    let a63 = math.sqrt(a62)\n    let a64\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpm4tx4aom.swift:12:14: error: cannot find 'math' in scope\n    let\
    \ a2 = math.sqrt(a1)\n             ^~~~\n/tmp/tmpm4tx4aom.swift:13:14: error:\
    \ cannot find 'math' in scope\n    let a3 = math.sqrt(a2)\n             ^~~~\n\
    /tmp/tmpm4tx4aom.swift:14:14: error: cannot find 'math' in scope\n    let a4 =\
    \ math.sqrt(a3)\n             ^~~~\n/tmp/tmpm4tx4aom.swift:15:14: error: cannot\
    \ find 'math' in scope\n    let a5 = math.sqrt(a4)\n             ^~~~\n/tmp/tmpm4tx4aom.swift:16:14:\
    \ error: cannot find 'math' in scope\n    let a6 = math.sqrt(a5)\n           \
    \  ^~~~\n/tmp/tmpm4tx4aom.swift:17:14: error: cannot find 'math' in scope\n  \
    \  let a7 = math.sqrt(a6)\n             ^~~~\n/tmp/tmpm4tx4aom.swift:18:14: error:\
    \ cannot find 'math' in scope\n    let a8 = math.sqrt(a7)\n             ^~~~\n\
    /tmp/tmpm4tx4aom.swift:19:14: error: cannot find 'math' in scope\n    let a9 =\
    \ math.sqrt(a8)\n             ^~~~\n/tmp/tmpm4tx4aom.swift:20:15: error: cannot\
    \ find 'math' in scope\n    let a10 = math.sqrt(a9)\n              ^~~~\n/tmp/tmpm4tx4aom.swift:21:15:\
    \ error: cannot find 'math' in scope\n    let a11 = math.sqrt(a10)\n         \
    \     ^~~~\n/tmp/tmpm4tx4aom.swift:22:15: error: cannot find 'math' in scope\n\
    \    let a12 = math.sqrt(a11)\n              ^~~~\n/tmp/tmpm4tx4aom.swift:23:15:\
    \ error: cannot find 'math' in scope\n    let a13 = math.sqrt(a12)\n         \
    \     ^~~~\n/tmp/tmpm4tx4aom.swift:24:15: error: cannot find 'math' in scope\n\
    \    let a14 = math.sqrt(a13)\n              ^~~~\n/tmp/tmpm4tx4aom.swift:25:15:\
    \ error: cannot find 'math' in scope\n    let a15 = math.sqrt(a14)\n         \
    \     ^~~~\n/tmp/tmpm4tx4aom.swift:26:15: error: cannot find 'math' in scope\n\
    \    let a16 = math.sqrt(a15)\n              ^~~~\n/tmp/tmpm4tx4aom.swift:27:15:\
    \ error: cannot find 'math' in scope\n    let a17 = math.sqrt(a16)\n         \
    \     ^~~~\n/tmp/tmpm4tx4aom.swift:28:15: error: cannot find 'math' in scope\n\
    \    let a18 = math.sqrt(a17)\n              ^~~~\n/tmp/tmpm4tx4aom.swift:29:15:\
    \ error: cannot find 'math' in scope\n    let a19 = math.sqrt(a18)\n         \
    \     ^~~~\n/tmp/tmpm4tx4aom.swift:30:15: error: ca"
  stdout: ''
  timestamp: 1660014765
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let sides = [a, b, c]\n    let sum = sides.reduce(0,\
    \ combine: +)\n    if sum > sides[2] {\n        return Double(sides[2]) / Double(sides[0])\n\
    \    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp67bdgm1w.swift:12:27: error: extraneous argument label 'combine:'\
    \ in call\n    let sum = sides.reduce(0, combine: +)\n                       \
    \   ^   ~~~~~~~~~\n                              \n"
  stdout: ''
  timestamp: 1660014765
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    var sum: Double = 0\n    \n    if a +\
    \ b > c {\n        sum = a + b\n    } else {\n        sum = a + c\n    }\n   \
    \ \n    if a + c > b {\n        sum = sum + c\n    } else {\n        sum = sum\
    \ + b\n    }\n    \n    if b + c > a {\n        sum = sum + c\n    } else {\n\
    \        sum = sum + b\n    }\n    \n    return Double(sum) / Double(3.0)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpb6sp8dyj.swift:14:17: error: cannot assign value of type 'Int'\
    \ to type 'Double'\n        sum = a + b\n              ~~^~~\n              Double(\
    \ )\n/tmp/tmpb6sp8dyj.swift:16:17: error: cannot assign value of type 'Int' to\
    \ type 'Double'\n        sum = a + c\n              ~~^~~\n              Double(\
    \ )\n/tmp/tmpb6sp8dyj.swift:20:21: error: cannot convert value of type 'Int' to\
    \ expected argument type 'Double'\n        sum = sum + c\n                   \
    \ ^\n                    Double( )\n/tmp/tmpb6sp8dyj.swift:22:21: error: cannot\
    \ convert value of type 'Int' to expected argument type 'Double'\n        sum\
    \ = sum + b\n                    ^\n                    Double( )\n/tmp/tmpb6sp8dyj.swift:26:21:\
    \ error: cannot convert value of type 'Int' to expected argument type 'Double'\n\
    \        sum = sum + c\n                    ^\n                    Double( )\n\
    /tmp/tmpb6sp8dyj.swift:28:21: error: cannot convert value of type 'Int' to expected\
    \ argument type 'Double'\n        sum = sum + b\n                    ^\n     \
    \               Double( )\n"
  stdout: ''
  timestamp: 1660014765
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    if a + b > c {\n        return -1\n  \
    \  }\n    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n     \
    \   return -1\n    }\n    return Double(a * b * c / 2)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpyz9ymnul/tmpyz9ymnul.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3c0ad36c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3c0aa2db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3c0aa2d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3c0aa2c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyz9ymnul                        0x0000564b8e4a125f <unavailable> + 4703

    5    libc.so.6                          0x00002b3c0af22460 __libc_start_main +
    245

    6    tmpyz9ymnul                        0x0000564b8e4a0ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660014765
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let a2 = a * a\n    let b2 = b * b\n \
    \   let c2 = c * c\n    let a3 = a2 + b2\n    let b3 = b2 + c2\n    let c3 = c2\
    \ + a2\n    let a4 = a2 + c3\n    let b4 = b2 + c3\n    let c4 = c2 + a2\n   \
    \ let a5 = a3 + b4\n    let b5 = b3 + c4\n    let c5 = c3 + a4\n    let a6 = a3\
    \ + b5\n    let b6 = b3 + c5\n    let c6 = c3 + a4\n    let a7 = a4 + b6\n   \
    \ let b7 = b4 + c6\n    let c7 = c4 + a4\n    let a8 = a4 + b7\n    let b8 = b4\
    \ + c7\n    let c8 = c4 + a4\n    let a9 = a5 + b6\n    let b9 = b5 + c7\n   \
    \ let c9 = c5 + a4\n    let a10 = a5 + b9\n    let b10 = b5 + c9\n    let c10\
    \ = c5 + a4\n    let a11 = a6 + b6\n    let b11 = b6 + c7\n    let c11 = c6 +\
    \ a4\n    let a12 = a6 + b11\n    let b12 = b6 + c11\n    let c12 = c6 + a4\n\
    \    let a13 = a7 + b7\n    let b13 = b7 + c7\n    let c13 = c7 + a4\n    let\
    \ a14 = a7 + b13\n    let b14 = b7 + c13\n    let c14 = c7 + a4\n    let a15 =\
    \ a8 + b8\n    let b15 = b8 + c8\n    let c15 = c8 + a4\n    let a16 = a8 + b15\n\
    \    let b16 = b8 + c15\n    let c16 = c8 + a4\n    let a17 = a9 + b9\n    let\
    \ b17 = b9 + c9\n    let c17 = c9 + a4\n    let a18 = a9 + b17\n    let b18 =\
    \ b9 + c17\n    let c18 = c9 + a4\n    let a19 = a10 + b10\n    let b19 = b10\
    \ + c10\n    let c19 = c10 + a4\n    let a20 = a10 + b19\n    let b20 = b10 +\
    \ c19\n    let c20 = c10 + a4\n    let a21 = a11 + b11\n    let b21 = b11 + c11\n\
    \    let c21 = c11 + a4\n    let a22 = a11 + b21\n    let b22 = b11 + c21\n  \
    \  let c22 = c11 + a4\n    let a23 = a12 + b12\n    let b23 = b12 + c12\n    let\
    \ c23 = c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpf07a6190.swift:44:9: warning: initialization of immutable value\
    \ 'a13' was never used; consider replacing with assignment to '_' or removing\
    \ it\n    let a13 = a7 + b7\n    ~~~~^~~\n    _\n/tmp/tmpf07a6190.swift:47:9:\
    \ warning: initialization of immutable value 'a14' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    let a14 = a7 + b13\n    ~~~~^~~\n\
    \    _\n/tmp/tmpf07a6190.swift:48:9: warning: initialization of immutable value\
    \ 'b14' was never used; consider replacing with assignment to '_' or removing\
    \ it\n    let b14 = b7 + c13\n    ~~~~^~~\n    _\n/tmp/tmpf07a6190.swift:49:9:\
    \ warning: initialization of immutable value 'c14' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    let c14 = c7 + a4\n    ~~~~^~~\n\
    \    _\n/tmp/tmpf07a6190.swift:50:9: warning: initialization of immutable value\
    \ 'a15' was never used; consider replacing with assignment to '_' or removing\
    \ it\n    let a15 = a8 + b8\n    ~~~~^~~\n    _\n/tmp/tmpf07a6190.swift:53:9:\
    \ warning: initialization of immutable value 'a16' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    let a16 = a8 + b15\n    ~~~~^~~\n\
    \    _\n/tmp/tmpf07a6190.swift:54:9: warning: initialization of immutable value\
    \ 'b16' was never used; consider replacing with assignment to '_' or removing\
    \ it\n    let b16 = b8 + c15\n    ~~~~^~~\n    _\n/tmp/tmpf07a6190.swift:55:9:\
    \ warning: initialization of immutable value 'c16' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    let c16 = c8 + a4\n    ~~~~^~~\n\
    \    _\n/tmp/tmpf07a6190.swift:56:9: warning: initialization of immutable value\
    \ 'a17' was never used; consider replacing with assignment to '_' or removing\
    \ it\n    let a17 = a9 + b9\n    ~~~~^~~\n    _\n/tmp/tmpf07a6190.swift:59:9:\
    \ warning: initialization of immutable value 'a18' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    let a18 = a9 + b17\n    ~~~~^~~\n\
    \    _\n/tmp/tmpf07a6190.swift:60:9: warning: initialization of immutable value\
    \ 'b18' was never used; consider replacing with assignment to '"
  stdout: ''
  timestamp: 1660014765
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    var sum: Double = 0\n    var sum2: Double\
    \ = 0\n    var sum3: Double = 0\n    var sum4: Double = 0\n    var sum5: Double\
    \ = 0\n    var sum6: Double = 0\n    var sum7: Double = 0\n    var sum8: Double\
    \ = 0\n    var sum9: Double = 0\n    var sum10: Double = 0\n    var sum11: Double\
    \ = 0\n    var sum12: Double = 0\n    var sum13: Double = 0\n    var sum14: Double\
    \ = 0\n    var sum15: Double = 0\n    var sum16: Double = 0\n    var sum17: Double\
    \ = 0\n    var sum18: Double = 0\n    var sum19: Double = 0\n    var sum20: Double\
    \ = 0\n    var sum21: Double = 0\n    var sum22: Double = 0\n    var sum23: Double\
    \ = 0\n    var sum24: Double = 0\n    var sum25: Double = 0\n    var sum26: Double\
    \ = 0\n    var sum27: Double = 0\n    var sum28: Double = 0\n    var sum29: Double\
    \ = 0\n    var sum30: Double = 0\n    var sum31: Double = 0\n    var sum32: Double\
    \ = 0\n    var sum33: Double = 0\n    var sum34: Double = 0\n    var sum35: Double\
    \ = 0\n    var sum36: Double = 0\n    var sum37: Double = 0\n    var sum38: Double\
    \ = 0\n    var sum39: Double = 0\n    var sum40: Double = 0\n    var sum41: Double\
    \ = 0\n    var sum42: Double = 0\n    var sum43: Double = 0\n    var sum44: Double\
    \ = 0\n    var sum45: Double = 0\n    var sum46: Double = 0\n    var sum47: Double\
    \ = 0\n    var sum48: Double = 0\n    var sum49: Double = 0\n    var sum50: Double\
    \ = 0\n    var sum51: Double = 0\n    var sum52: Double = 0\n    var sum53: Double\
    \ = 0\n    var sum54: Double = 0\n    var sum55: Double = 0\n    var sum56: Double\
    \ = 0\n    var sum57: Double = 0\n    var sum58: Double = 0\n    var sum59: Double\
    \ = 0\n    var sum60: Double = 0\n    var sum61: Double = 0\n    var sum62: Double\
    \ = 0\n    var sum63: Double = 0\n    var sum64: Double = 0\n    var sum65: Double\
    \ = 0\n    var sum66: Double = 0\n    var sum67: Double = 0\n    var sum68: Double\
    \ = 0\n    var sum69: Double = 0\n    var sum70: Double = 0\n    var sum71: Double\
    \ = 0\n    var sum72: Double = 0\n    var sum73: Double = 0\n    var sum74: Double\
    \ = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3, b:\
    \ 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp6tftq02q.swift:11:9: warning: variable 'sum' was never used; consider\
    \ replacing with '_' or removing it\n    var sum: Double = 0\n        ^~~\n  \
    \      _\n/tmp/tmp6tftq02q.swift:12:9: warning: variable 'sum2' was never used;\
    \ consider replacing with '_' or removing it\n    var sum2: Double = 0\n     \
    \   ^~~~\n        _\n/tmp/tmp6tftq02q.swift:13:9: warning: variable 'sum3' was\
    \ never used; consider replacing with '_' or removing it\n    var sum3: Double\
    \ = 0\n        ^~~~\n        _\n/tmp/tmp6tftq02q.swift:14:9: warning: variable\
    \ 'sum4' was never used; consider replacing with '_' or removing it\n    var sum4:\
    \ Double = 0\n        ^~~~\n        _\n/tmp/tmp6tftq02q.swift:15:9: warning: variable\
    \ 'sum5' was never used; consider replacing with '_' or removing it\n    var sum5:\
    \ Double = 0\n        ^~~~\n        _\n/tmp/tmp6tftq02q.swift:16:9: warning: variable\
    \ 'sum6' was never used; consider replacing with '_' or removing it\n    var sum6:\
    \ Double = 0\n        ^~~~\n        _\n/tmp/tmp6tftq02q.swift:17:9: warning: variable\
    \ 'sum7' was never used; consider replacing with '_' or removing it\n    var sum7:\
    \ Double = 0\n        ^~~~\n        _\n/tmp/tmp6tftq02q.swift:18:9: warning: variable\
    \ 'sum8' was never used; consider replacing with '_' or removing it\n    var sum8:\
    \ Double = 0\n        ^~~~\n        _\n/tmp/tmp6tftq02q.swift:19:9: warning: variable\
    \ 'sum9' was never used; consider replacing with '_' or removing it\n    var sum9:\
    \ Double = 0\n        ^~~~\n        _\n/tmp/tmp6tftq02q.swift:20:9: warning: variable\
    \ 'sum10' was never used; consider replacing with '_' or removing it\n    var\
    \ sum10: Double = 0\n        ^~~~~\n        _\n/tmp/tmp6tftq02q.swift:21:9: warning:\
    \ variable 'sum11' was never used; consider replacing with '_' or removing it\n\
    \    var sum11: Double = 0\n        ^~~~~\n        _\n/tmp/tmp6tftq02q.swift:22:9:\
    \ warning: variable 'sum12' was never used; consider replacing with '_' or removing\
    \ it\n    var sum12: Double = 0\n        ^~~~~\n        _\n/tmp/tmp6tftq02q.swift:23:9:\
    \ warning: variable 'sum13' was never used; consider replacing with '_' or removing"
  stdout: ''
  timestamp: 1660014764
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    var sum: Double = 0\n    var area: Double\
    \ = 0\n    if a + b > c {\n        sum = a + b\n    } else {\n        sum = a\
    \ + c\n    }\n    if a + c > b {\n        sum = sum + c\n    } else {\n      \
    \  sum = sum + b\n    }\n    area = Double(sum) / 2.0\n    if area > Double(Double.greatestFiniteMagnitude)\
    \ {\n        return -1\n    }\n    return area\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpimxzd725.swift:14:17: error: cannot assign value of type 'Int'\
    \ to type 'Double'\n        sum = a + b\n              ~~^~~\n              Double(\
    \ )\n/tmp/tmpimxzd725.swift:16:17: error: cannot assign value of type 'Int' to\
    \ type 'Double'\n        sum = a + c\n              ~~^~~\n              Double(\
    \ )\n/tmp/tmpimxzd725.swift:19:21: error: cannot convert value of type 'Int' to\
    \ expected argument type 'Double'\n        sum = sum + c\n                   \
    \ ^\n                    Double( )\n/tmp/tmpimxzd725.swift:21:21: error: cannot\
    \ convert value of type 'Int' to expected argument type 'Double'\n        sum\
    \ = sum + b\n                    ^\n                    Double( )\n"
  stdout: ''
  timestamp: 1660014765
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let a = abs(a)\n    let b = abs(b)\n \
    \   let c = abs(c)\n    if a + b > c {\n        return Double(a + b - c)\n   \
    \ }\n    if a + c > b {\n        return Double(a + c - b)\n    }\n    if b + c\
    \ > a {\n        return Double(b + c - a)\n    }\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpx6vu8r70/tmpx6vu8r70.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba8ca0b1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba8c9da8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba8c9da8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8c9da77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx6vu8r70                        0x00005647ace492bf <unavailable> + 4799

    5    libc.so.6                          0x00002ba8ca29d460 __libc_start_main +
    245

    6    tmpx6vu8r70                        0x00005647ace48f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1660014765
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let sides = [a, b, c]\n    guard sides.count\
    \ >= 3 else { return -1 }\n    let sum = sides.reduce(0.0, combine: +)\n    if\
    \ sum > sides[2] { return Double(sides[2]) }\n    return Double(sum / 2)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp4od8tm5i.swift:13:27: error: extraneous argument label 'combine:'\
    \ in call\n    let sum = sides.reduce(0.0, combine: +)\n                     \
    \     ^     ~~~~~~~~~\n                                \n/tmp/tmp4od8tm5i.swift:13:42:\
    \ error: cannot convert value of type '(Double) -> Double' to expected argument\
    \ type '(Double, Int) throws -> Double'\n    let sum = sides.reduce(0.0, combine:\
    \ +)\n                                         ^\n"
  stdout: ''
  timestamp: 1660014765
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let side1 = abs(a) + abs(b) + abs(c)\n\
    \    let side2 = abs(a) + abs(b) - abs(c)\n    let side3 = abs(a) - abs(b) - abs(c)\n\
    \    let area = side1 * side2 * side3\n    if area > 0 {\n        return Double(area)\n\
    \    } else {\n        return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b:\
    \ 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpp7s0oyro/tmpp7s0oyro.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf9d401c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf9d0f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf9d0f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf9d0f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp7s0oyro                        0x0000559564c462bf <unavailable> + 4799

    5    libc.so.6                          0x00002aaf9d5ed460 __libc_start_main +
    245

    6    tmpp7s0oyro                        0x0000559564c45f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1660014765
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3 = sqrt(pow(c, 2) +\
    \ pow(a, 2))\n    let area = (side1 + side2 + side3) / 2.0\n    if area > 0 {\n\
    \        return round(area * 100) / 100\n    } else {\n        return -1\n   \
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(triangle_area(a: 3, b: 4, c:\
    \ 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp0u0l7n4v.swift:11:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmp0u0l7n4v.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmp0u0l7n4v.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmp0u0l7n4v.swift:12:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmp0u0l7n4v.swift:12:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmp0u0l7n4v.swift:12:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmp0u0l7n4v.swift:13:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmp0u0l7n4v.swift:13:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmp0u0l7n4v.swift:13:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmp0u0l7n4v.swift:16:16: error: cannot find 'round' in\
    \ scope\n        return round(area * 100) / 100\n               ^~~~~\n"
  stdout: ''
  timestamp: 1660014765
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \    let side2 = sqrt(pow(c, 2) + pow(d, 2))\n    let side3 = sqrt(pow(d, 2) +\
    \ pow(e, 2))\n    let area: Double = side1 * side2 * side3\n    if area > 0 {\n\
    \        return round(area, 2)\n    } else {\n        return -1\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpcttsj0rt.swift:11:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmpcttsj0rt.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmpcttsj0rt.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmpcttsj0rt.swift:12:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(c, 2) + pow(d, 2))\n                ^~~~\n/tmp/tmpcttsj0rt.swift:12:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(c, 2) + pow(d, 2))\n\
    \                     ^~~\n/tmp/tmpcttsj0rt.swift:12:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(c, 2) + pow(d, 2))\n                    \
    \             ^~~\n/tmp/tmpcttsj0rt.swift:12:38: error: cannot find 'd' in scope\n\
    \    let side2 = sqrt(pow(c, 2) + pow(d, 2))\n                               \
    \      ^\n/tmp/tmpcttsj0rt.swift:13:17: error: cannot find 'sqrt' in scope\n \
    \   let side3 = sqrt(pow(d, 2) + pow(e, 2))\n                ^~~~\n/tmp/tmpcttsj0rt.swift:13:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(d, 2) + pow(e, 2))\n\
    \                     ^~~\n/tmp/tmpcttsj0rt.swift:13:26: error: cannot find 'd'\
    \ in scope\n    let side3 = sqrt(pow(d, 2) + pow(e, 2))\n                    \
    \     ^\n/tmp/tmpcttsj0rt.swift:13:34: error: cannot find 'pow' in scope\n   \
    \ let side3 = sqrt(pow(d, 2) + pow(e, 2))\n                                 ^~~\n\
    /tmp/tmpcttsj0rt.swift:13:38: error: cannot find 'e' in scope\n    let side3 =\
    \ sqrt(pow(d, 2) + pow(e, 2))\n                                     ^\n/tmp/tmpcttsj0rt.swift:14:38:\
    \ error: cannot convert value of type 'Duration' to specified type 'Double'\n\
    \    let area: Double = side1 * side2 * side3\n                       ~~~~~~~~~~~~~~^~~~~~~\n\
    /tmp/tmpcttsj0rt.swift:16:16: error: cannot find 'round' in scope\n        return\
    \ round(area, 2)\n               ^~~~~\n"
  stdout: ''
  timestamp: 1660014765
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let side1 = abs(a) + abs(b) + abs(c)\n\
    \    let side2 = abs(a) + abs(b) - abs(c)\n    let side3 = abs(a) - abs(b) - abs(c)\n\
    \    if side1 == side2 && side2 == side3 {\n        return Double(side1)\n   \
    \ }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpbr1d6a4l/tmpbr1d6a4l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade675e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade672d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade672d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade672d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbr1d6a4l                        0x00005606fb05a2bf <unavailable> + 4799

    5    libc.so.6                          0x00002ade677cd460 __libc_start_main +
    245

    6    tmpbr1d6a4l                        0x00005606fb059f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1660014764
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    if a + b > c {\n        return Double(-1)\
    \ * Double(a / b)\n    }\n    if a + c > b {\n        return Double(-1) * Double(b\
    \ / c)\n    }\n    if b + c > a {\n        return Double(-1) * Double(c / a)\n\
    \    }\n    return Double(-1) * Double(a + b + c) / 2\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmp6mfitupw/tmp6mfitupw.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb68bdec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb688d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb688d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb688d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6mfitupw                        0x00005647d96a625f <unavailable> + 4703

    5    libc.so.6                          0x00002abb68dca460 __libc_start_main +
    245

    6    tmp6mfitupw                        0x00005647d96a5ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660014765
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let side1 = abs(a) + abs(b) + abs(c)\n\
    \    let side2 = abs(a) + abs(b) - abs(c)\n    let side3 = abs(a) - abs(b) - abs(c)\n\
    \    if side1 == side2 && side2 == side3 {\n        return Double(side1)\n   \
    \ } else {\n        return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b:\
    \ 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpffqfvonv/tmpffqfvonv.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0e1f6d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0e1f3cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0e1f3ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0e1f3c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpffqfvonv                        0x000055769347d2bf <unavailable> + 4799

    5    libc.so.6                          0x00002b0e1f8bf460 __libc_start_main +
    245

    6    tmpffqfvonv                        0x000055769347cf59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1660014765
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let side1 = abs(a) + abs(b) + abs(c)\n\
    \    let side2 = abs(a) + abs(b) - abs(c)\n    let side3 = abs(a) - abs(b) - abs(c)\n\
    \    let area: Double = side1 * side2 * side3\n    if area < 0 {\n        return\
    \ -1\n    }\n    return round(area * 100) / 100\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpa1cpaqza.swift:14:38: error: cannot convert value of type 'Int'\
    \ to specified type 'Double'\n    let area: Double = side1 * side2 * side3\n \
    \                      ~~~~~~~~~~~~~~^~~~~~~\n                       Double( \
    \             )\n/tmp/tmpa1cpaqza.swift:18:12: error: cannot find 'round' in scope\n\
    \    return round(area * 100) / 100\n           ^~~~~\n"
  stdout: ''
  timestamp: 1660014764
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3 = sqrt(pow(c, 2) +\
    \ pow(a, 2))\n    let area: Double = side1 * side2 * side3\n    return round(area,\
    \ 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(triangle_area(a: 3, b: 4, c:\
    \ 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp6_8an1ns.swift:11:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmp6_8an1ns.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmp6_8an1ns.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmp6_8an1ns.swift:12:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmp6_8an1ns.swift:12:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmp6_8an1ns.swift:12:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmp6_8an1ns.swift:13:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmp6_8an1ns.swift:13:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmp6_8an1ns.swift:13:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmp6_8an1ns.swift:14:38: error: cannot convert value of\
    \ type 'Duration' to specified type 'Double'\n    let area: Double = side1 * side2\
    \ * side3\n                       ~~~~~~~~~~~~~~^~~~~~~\n/tmp/tmp6_8an1ns.swift:15:12:\
    \ error: cannot find 'round' in scope\n    return round(area, 2)\n           ^~~~~\n"
  stdout: ''
  timestamp: 1660014764
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let a1 = (a + b) / 2\n    let b1 = (b\
    \ + c) / 2\n    let c1 = (c + a) / 2\n    if a1 + b1 > c1 {\n        return a1\
    \ * b1 * c1\n    } else {\n        return -1\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpv6hc4nev.swift:15:24: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return a1 * b1 * c1\n          \
    \     ~~~~~~~~^~~~\n               Double(     )\n"
  stdout: ''
  timestamp: 1660014765
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    if a + b > c {\n        return Double(-1)\
    \ / Double(Double(-1))\n    }\n    if a + c > b {\n        return Double(-1) /\
    \ Double(Double(-1))\n    }\n    if b + c > a {\n        return Double(-1) / Double(Double(-1))\n\
    \    }\n    return Double(a * b * c) / Double(Double(a) + Double(b) + Double(c))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpia32xt6x/tmpia32xt6x.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b261d284c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b261cf7bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b261cf7b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b261cf7a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpia32xt6x                        0x000055cf7522321f <unavailable> + 4639

    5    libc.so.6                          0x00002b261d470460 __libc_start_main +
    245

    6    tmpia32xt6x                        0x000055cf75222eb9 <unavailable> + 3769

    '
  stdout: ''
  timestamp: 1660014765
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let a = abs(a)\n    let b = abs(b)\n \
    \   let c = abs(c)\n    let ac = a + c\n    let bc = b + c\n    let ab = a + b\n\
    \    let acb = ac + bc\n    let bca = b + c\n    let abc = (ab + bc + acb) / 2.0\n\
    \    let acbc = acb + abc\n    let abca = abc + abc\n    let acbca = acbc + acb\n\
    \    let abcca = abcc + abc\n    let acbcab = acbc + acb + abc\n    let acbcabc\
    \ = acbcab + acbc + abc\n    let acbcabcd = acbcabc + acbc + abc + abc\n    let\
    \ acbcabcde = acbcabcde + acbc + abc + abc + abc\n    let acbcabcdef = acbcabcdef\
    \ + acbc + abc + abc + abc + abc\n    let acbcabcdefg = acbcabcdefg + acbc + abc\
    \ + abc + abc + abc + abc + abc\n    let acbcabcdefgh = acbcabcdefgh + acbc +\
    \ abc + abc + abc + abc + abc + abc + abc + abc\n    let acbcabcdefghi = acbcabcdefghi\
    \ + acbc + abc + abc + abc + abc + abc + abc + abc + abc + abc + abc\n    let\
    \ acbcabcdefghij = acbcabcdefghij + acbc + abc + abc + abc + abc + abc + abc +\
    \ abc + abc + abc + abc + abc + abc + abc + abc + abc + abc + abc + abc + abc\
    \ + abc + abc + abc + abc + abc + abc + abc + abc + abc + abc + abc + abc + abc\
    \ + abc + abc + abc + abc + abc + abc + abc + abc + abc + abc + abc + abc + abc\
    \ + abc + abc + abc + abc + abc + abc + abc + abc + abc + abc + abc + abc + abc\
    \ + abc + abc + abc + abc + abc + abc + abc + abc + abc + abc + abc + abc + abc\
    \ + abc + abc + abc + abc + abc + abc + abc + abc + abc + abc + abc + abc + abc\
    \ + abc + abc + abc + abc + abc + abc + abc + abc + abc + abc + abc + abc + abc\
    \ + abc + abc + abc + abc + abc + abc + \n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b:\
    \ 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp0tdf4iy0.swift:33:1: error: expected expression after operator\n\
    }\n^\n/tmp/tmp0tdf4iy0.swift:19:31: error: binary operator '/' cannot be applied\
    \ to operands of type 'Int' and 'Double'\n    let abc = (ab + bc + acb) / 2.0\n\
    \              ~~~~~~~~~~~~~~~ ^ ~~~\n/tmp/tmp0tdf4iy0.swift:19:31: note: overloads\
    \ for '/' exist with these partially matching parameter lists: (Double, Double),\
    \ (Duration, Double), (Int, Int)\n    let abc = (ab + bc + acb) / 2.0\n      \
    \                        ^\n/tmp/tmp0tdf4iy0.swift:23:17: error: cannot find 'abcc'\
    \ in scope\n    let abcca = abcc + abc\n                ^~~~\n/tmp/tmp0tdf4iy0.swift:27:21:\
    \ error: use of local variable 'acbcabcde' before its declaration\n    let acbcabcde\
    \ = acbcabcde + acbc + abc + abc + abc\n                    ^\n/tmp/tmp0tdf4iy0.swift:27:9:\
    \ note: 'acbcabcde' declared here\n    let acbcabcde = acbcabcde + acbc + abc\
    \ + abc + abc\n        ^\n/tmp/tmp0tdf4iy0.swift:28:22: error: use of local variable\
    \ 'acbcabcdef' before its declaration\n    let acbcabcdef = acbcabcdef + acbc\
    \ + abc + abc + abc + abc\n                     ^\n/tmp/tmp0tdf4iy0.swift:28:9:\
    \ note: 'acbcabcdef' declared here\n    let acbcabcdef = acbcabcdef + acbc + abc\
    \ + abc + abc + abc\n        ^\n/tmp/tmp0tdf4iy0.swift:29:23: error: use of local\
    \ variable 'acbcabcdefg' before its declaration\n    let acbcabcdefg = acbcabcdefg\
    \ + acbc + abc + abc + abc + abc + abc + abc\n                      ^\n/tmp/tmp0tdf4iy0.swift:29:9:\
    \ note: 'acbcabcdefg' declared here\n    let acbcabcdefg = acbcabcdefg + acbc\
    \ + abc + abc + abc + abc + abc + abc\n        ^\n/tmp/tmp0tdf4iy0.swift:30:24:\
    \ error: use of local variable 'acbcabcdefgh' before its declaration\n    let\
    \ acbcabcdefgh = acbcabcdefgh + acbc + abc + abc + abc + abc + abc + abc + abc\
    \ + abc\n                       ^\n/tmp/tmp0tdf4iy0.swift:30:9: note: 'acbcabcdefgh'\
    \ declared here\n    let acbcabcdefgh = acbcabcdefgh + acbc + abc + abc + abc\
    \ + abc + abc + abc + abc + abc\n        ^\n/tmp/tmp0tdf4iy0.swift:31:25: error:\
    \ use of local variable 'acbcabcdefghi' before its declaration\n    let acbcab"
  stdout: ''
  timestamp: 1660015212
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3 = sqrt(pow(c, 2) +\
    \ pow(a, 2))\n    let area: Double = side1 + side2 + side3\n    if area > 0 {\n\
    \        return round(area, 2)\n    } else {\n        return -1\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp0ihi1cf9.swift:11:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmp0ihi1cf9.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmp0ihi1cf9.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmp0ihi1cf9.swift:12:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmp0ihi1cf9.swift:12:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmp0ihi1cf9.swift:12:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmp0ihi1cf9.swift:13:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmp0ihi1cf9.swift:13:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmp0ihi1cf9.swift:13:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmp0ihi1cf9.swift:14:38: error: cannot convert value of\
    \ type 'String' to specified type 'Double'\n    let area: Double = side1 + side2\
    \ + side3\n                       ~~~~~~~~~~~~~~^~~~~~~\n/tmp/tmp0ihi1cf9.swift:16:16:\
    \ error: cannot find 'round' in scope\n        return round(area, 2)\n       \
    \        ^~~~~\n"
  stdout: ''
  timestamp: 1660014764
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3 = sqrt(pow(c, 2) +\
    \ pow(a, 2))\n    let area: Double = side1 * side2 * side3\n    if area > 0 {\n\
    \        return round(area, 2)\n    } else {\n        return -1\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpzy9i9neg.swift:11:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmpzy9i9neg.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmpzy9i9neg.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmpzy9i9neg.swift:12:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmpzy9i9neg.swift:12:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmpzy9i9neg.swift:12:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmpzy9i9neg.swift:13:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmpzy9i9neg.swift:13:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmpzy9i9neg.swift:13:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmpzy9i9neg.swift:14:38: error: cannot convert value of\
    \ type 'Duration' to specified type 'Double'\n    let area: Double = side1 * side2\
    \ * side3\n                       ~~~~~~~~~~~~~~^~~~~~~\n/tmp/tmpzy9i9neg.swift:16:16:\
    \ error: cannot find 'round' in scope\n        return round(area, 2)\n       \
    \        ^~~~~\n"
  stdout: ''
  timestamp: 1660014765
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let side1 = abs(a) + abs(b) + abs(c)\n\
    \    let side2 = abs(a) + abs(b) - abs(c)\n    let side3 = abs(a) - abs(b) - abs(c)\n\
    \    if side1 == side2 && side2 == side3 {\n        return Double(side1)\n   \
    \ } else {\n        return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b:\
    \ 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpffqfvonv/tmpffqfvonv.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0e1f6d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0e1f3cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0e1f3ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0e1f3c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpffqfvonv                        0x000055769347d2bf <unavailable> + 4799

    5    libc.so.6                          0x00002b0e1f8bf460 __libc_start_main +
    245

    6    tmpffqfvonv                        0x000055769347cf59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1660014765
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let sides = [a, b, c]\n    let sum = sides.reduce(0,\
    \ +)\n    if sum > sides[2] {\n        return Double(sides[2]) / Double(sides[2])\n\
    \    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmp8pxcqz0v/tmp8pxcqz0v.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b067a703c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b067a3fab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b067a3fa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b067a3f97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8pxcqz0v                        0x00005567167a339f <unavailable> + 5023

    5    libc.so.6                          0x00002b067a8ef460 __libc_start_main +
    245

    6    tmp8pxcqz0v                        0x00005567167a3039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014765
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    var sum: Double = 0\n    var sum2: Double\
    \ = 0\n    var sum3: Double = 0\n    var sum4: Double = 0\n    var sum5: Double\
    \ = 0\n    var sum6: Double = 0\n    var sum7: Double = 0\n    var sum8: Double\
    \ = 0\n    var sum9: Double = 0\n    var sum10: Double = 0\n    var sum11: Double\
    \ = 0\n    var sum12: Double = 0\n    var sum13: Double = 0\n    var sum14: Double\
    \ = 0\n    var sum15: Double = 0\n    var sum16: Double = 0\n    var sum17: Double\
    \ = 0\n    var sum18: Double = 0\n    var sum19: Double = 0\n    var sum20: Double\
    \ = 0\n    var sum21: Double = 0\n    var sum22: Double = 0\n    var sum23: Double\
    \ = 0\n    var sum24: Double = 0\n    var sum25: Double = 0\n    var sum26: Double\
    \ = 0\n    var sum27: Double = 0\n    var sum28: Double = 0\n    var sum29: Double\
    \ = 0\n    var sum30: Double = 0\n    var sum31: Double = 0\n    var sum32: Double\
    \ = 0\n    var sum33: Double = 0\n    var sum34: Double = 0\n    var sum35: Double\
    \ = 0\n    var sum36: Double = 0\n    var sum37: Double = 0\n    var sum38: Double\
    \ = 0\n    var sum39: Double = 0\n    var sum40: Double = 0\n    var sum41: Double\
    \ = 0\n    var sum42: Double = 0\n    var sum43: Double = 0\n    var sum44: Double\
    \ = 0\n    var sum45: Double = 0\n    var sum46: Double = 0\n    var sum47: Double\
    \ = 0\n    var sum48: Double = 0\n    var sum49: Double = 0\n    var sum50: Double\
    \ = 0\n    var sum51: Double = 0\n    var sum52: Double = 0\n    var sum53: Double\
    \ = 0\n    var sum54: Double = 0\n    var sum55: Double = 0\n    var sum56: Double\
    \ = 0\n    var sum57: Double = 0\n    var sum58: Double = 0\n    var sum59: Double\
    \ = 0\n    var sum60: Double = 0\n    var sum61: Double = 0\n    var sum62: Double\
    \ = 0\n    var sum63: Double = 0\n    var sum64: Double = 0\n    var sum65: Double\
    \ = 0\n    var sum66: Double = 0\n    var sum67: Double = 0\n    var sum68: Double\
    \ = 0\n    var sum69: Double = 0\n    var sum70: Double = 0\n    var sum71: Double\
    \ = 0\n    var sum72: Double = 0\n    var sum73: Double = 0\n    var sum74: Double\
    \ = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3, b:\
    \ 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp6tftq02q.swift:11:9: warning: variable 'sum' was never used; consider\
    \ replacing with '_' or removing it\n    var sum: Double = 0\n        ^~~\n  \
    \      _\n/tmp/tmp6tftq02q.swift:12:9: warning: variable 'sum2' was never used;\
    \ consider replacing with '_' or removing it\n    var sum2: Double = 0\n     \
    \   ^~~~\n        _\n/tmp/tmp6tftq02q.swift:13:9: warning: variable 'sum3' was\
    \ never used; consider replacing with '_' or removing it\n    var sum3: Double\
    \ = 0\n        ^~~~\n        _\n/tmp/tmp6tftq02q.swift:14:9: warning: variable\
    \ 'sum4' was never used; consider replacing with '_' or removing it\n    var sum4:\
    \ Double = 0\n        ^~~~\n        _\n/tmp/tmp6tftq02q.swift:15:9: warning: variable\
    \ 'sum5' was never used; consider replacing with '_' or removing it\n    var sum5:\
    \ Double = 0\n        ^~~~\n        _\n/tmp/tmp6tftq02q.swift:16:9: warning: variable\
    \ 'sum6' was never used; consider replacing with '_' or removing it\n    var sum6:\
    \ Double = 0\n        ^~~~\n        _\n/tmp/tmp6tftq02q.swift:17:9: warning: variable\
    \ 'sum7' was never used; consider replacing with '_' or removing it\n    var sum7:\
    \ Double = 0\n        ^~~~\n        _\n/tmp/tmp6tftq02q.swift:18:9: warning: variable\
    \ 'sum8' was never used; consider replacing with '_' or removing it\n    var sum8:\
    \ Double = 0\n        ^~~~\n        _\n/tmp/tmp6tftq02q.swift:19:9: warning: variable\
    \ 'sum9' was never used; consider replacing with '_' or removing it\n    var sum9:\
    \ Double = 0\n        ^~~~\n        _\n/tmp/tmp6tftq02q.swift:20:9: warning: variable\
    \ 'sum10' was never used; consider replacing with '_' or removing it\n    var\
    \ sum10: Double = 0\n        ^~~~~\n        _\n/tmp/tmp6tftq02q.swift:21:9: warning:\
    \ variable 'sum11' was never used; consider replacing with '_' or removing it\n\
    \    var sum11: Double = 0\n        ^~~~~\n        _\n/tmp/tmp6tftq02q.swift:22:9:\
    \ warning: variable 'sum12' was never used; consider replacing with '_' or removing\
    \ it\n    var sum12: Double = 0\n        ^~~~~\n        _\n/tmp/tmp6tftq02q.swift:23:9:\
    \ warning: variable 'sum13' was never used; consider replacing with '_' or removing"
  stdout: ''
  timestamp: 1660014764
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    var sum: Double = 0\n    var a: Double\
    \ = 0\n    var b: Double = 0\n    var c: Double = 0\n    var d: Double = 0\n \
    \   var e: Double = 0\n    var f: Double = 0\n    var g: Double = 0\n    var h:\
    \ Double = 0\n    var i: Double = 0\n    var j: Double = 0\n    var k: Double\
    \ = 0\n    var l: Double = 0\n    var m: Double = 0\n    var n: Double = 0\n \
    \   var o: Double = 0\n    var p: Double = 0\n    var q: Double = 0\n    var r:\
    \ Double = 0\n    var s: Double = 0\n    var t: Double = 0\n    var u: Double\
    \ = 0\n    var v: Double = 0\n    var w: Double = 0\n    var x: Double = 0\n \
    \   var y: Double = 0\n    var z: Double = 0\n    var a: Double = 0\n    var b:\
    \ Double = 0\n    var c: Double = 0\n    var d: Double = 0\n    var e: Double\
    \ = 0\n    var f: Double = 0\n    var g: Double = 0\n    var h: Double = 0\n \
    \   var i: Double = 0\n    var j: Double = 0\n    var k: Double = 0\n    var l:\
    \ Double = 0\n    var m: Double = 0\n    var n: Double = 0\n    var o: Double\
    \ = 0\n    var p: Double = 0\n    var q: Double = 0\n    var r: Double = 0\n \
    \   var s: Double = 0\n    var t: Double = 0\n    var u: Double = 0\n    var v:\
    \ Double = 0\n    var w: Double = 0\n    var x: Double = 0\n    var y: Double\
    \ = 0\n    var z: Double = 0\n    var a: Double = 0\n    var b: Double = 0\n \
    \   var c: Double = 0\n    var d: Double = 0\n    var e: Double = 0\n    var f:\
    \ Double = 0\n    var g: Double = 0\n    var h: Double = 0\n    var i: Double\
    \ = 0\n    var j: Double = 0\n    var k: Double = 0\n    var l: Double = 0\n \
    \   var m: Double = 0\n    var n: Double = 0\n    var o: Double = 0\n    var p:\
    \ Double = 0\n    var q: Double = 0\n    var r: Double = 0\n    var s: Double\
    \ = 0\n    var t: Double = 0\n    var u: Double = 0\n    var v: Double = 0\n \
    \   var w: Double = 0\n    var x: Double = 0\n    var y: Double = 0\n    var z:\
    \ Double = 0\n    var a: Double = 0\n    var b: Double = 0\n    var c: Double\
    \ = 0\n    var d: Double = 0\n    var e: Double = 0\n    var f: Double = 0\n \
    \   var g: Double = 0\n    var h: Double = 0\n    var i: Double = 0\n    var j:\
    \ Double = 0\n    var k: Double = 0\n    var l: Double = 0\n    var m: Double\
    \ = 0\n    var n: Double = 0\n    var o: Double = 0\n    var p: Double = 0\n \
    \   var q: Double = 0\n    var r: Double = 0\n    var \n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpyvct87iq.swift:108:8: error: expected pattern\n    var \n     \
    \  ^\n/tmp/tmpyvct87iq.swift:38:9: error: invalid redeclaration of 'a'\n    var\
    \ a: Double = 0\n        ^\n/tmp/tmpyvct87iq.swift:12:9: note: 'a' previously\
    \ declared here\n    var a: Double = 0\n        ^\n/tmp/tmpyvct87iq.swift:39:9:\
    \ error: invalid redeclaration of 'b'\n    var b: Double = 0\n        ^\n/tmp/tmpyvct87iq.swift:13:9:\
    \ note: 'b' previously declared here\n    var b: Double = 0\n        ^\n/tmp/tmpyvct87iq.swift:40:9:\
    \ error: invalid redeclaration of 'c'\n    var c: Double = 0\n        ^\n/tmp/tmpyvct87iq.swift:14:9:\
    \ note: 'c' previously declared here\n    var c: Double = 0\n        ^\n/tmp/tmpyvct87iq.swift:41:9:\
    \ error: invalid redeclaration of 'd'\n    var d: Double = 0\n        ^\n/tmp/tmpyvct87iq.swift:15:9:\
    \ note: 'd' previously declared here\n    var d: Double = 0\n        ^\n/tmp/tmpyvct87iq.swift:42:9:\
    \ error: invalid redeclaration of 'e'\n    var e: Double = 0\n        ^\n/tmp/tmpyvct87iq.swift:16:9:\
    \ note: 'e' previously declared here\n    var e: Double = 0\n        ^\n/tmp/tmpyvct87iq.swift:43:9:\
    \ error: invalid redeclaration of 'f'\n    var f: Double = 0\n        ^\n/tmp/tmpyvct87iq.swift:17:9:\
    \ note: 'f' previously declared here\n    var f: Double = 0\n        ^\n/tmp/tmpyvct87iq.swift:44:9:\
    \ error: invalid redeclaration of 'g'\n    var g: Double = 0\n        ^\n/tmp/tmpyvct87iq.swift:18:9:\
    \ note: 'g' previously declared here\n    var g: Double = 0\n        ^\n/tmp/tmpyvct87iq.swift:45:9:\
    \ error: invalid redeclaration of 'h'\n    var h: Double = 0\n        ^\n/tmp/tmpyvct87iq.swift:19:9:\
    \ note: 'h' previously declared here\n    var h: Double = 0\n        ^\n/tmp/tmpyvct87iq.swift:46:9:\
    \ error: invalid redeclaration of 'i'\n    var i: Double = 0\n        ^\n/tmp/tmpyvct87iq.swift:20:9:\
    \ note: 'i' previously declared here\n    var i: Double = 0\n        ^\n/tmp/tmpyvct87iq.swift:47:9:\
    \ error: invalid redeclaration of 'j'\n    var j: Double = 0\n        ^\n/tmp/tmpyvct87iq.swift:21:9:\
    \ note: 'j' previously declared here\n    var j: Double = 0\n        ^\n/tmp/tmpyvct87iq.swift:48:9:\
    \ error: invalid re"
  stdout: ''
  timestamp: 1660014765
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    if a + b > c {\n        return -1\n  \
    \  }\n    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n     \
    \   return -1\n    }\n    return Double(sqrt(pow(a, 2) + pow(b, 2) + pow(c, 2)))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpea1p65fa.swift:20:19: error: cannot find 'sqrt' in scope\n    return\
    \ Double(sqrt(pow(a, 2) + pow(b, 2) + pow(c, 2)))\n                  ^~~~\n/tmp/tmpea1p65fa.swift:20:24:\
    \ error: cannot find 'pow' in scope\n    return Double(sqrt(pow(a, 2) + pow(b,\
    \ 2) + pow(c, 2)))\n                       ^~~\n/tmp/tmpea1p65fa.swift:20:36:\
    \ error: cannot find 'pow' in scope\n    return Double(sqrt(pow(a, 2) + pow(b,\
    \ 2) + pow(c, 2)))\n                                   ^~~\n/tmp/tmpea1p65fa.swift:20:48:\
    \ error: cannot find 'pow' in scope\n    return Double(sqrt(pow(a, 2) + pow(b,\
    \ 2) + pow(c, 2)))\n                                               ^~~\n"
  stdout: ''
  timestamp: 1660014769
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let side1 = abs(a) + abs(b) + abs(c)\n\
    \    let side2 = abs(a) + abs(b) - abs(c)\n    let side3 = abs(a) - abs(b) - abs(c)\n\
    \    let area: Double\n    switch side1 {\n    case side2:\n        area = side3\n\
    \    case side3:\n        area = side2\n    case side1:\n        area = side1\n\
    \    default:\n        area = -1\n    }\n    return round(area)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpwrm4jr71.swift:17:16: error: cannot assign value of type 'Int'\
    \ to type 'Double'\n        area = side3\n               ^~~~~\n             \
    \  Double( )\n/tmp/tmpwrm4jr71.swift:19:16: error: cannot assign value of type\
    \ 'Int' to type 'Double'\n        area = side2\n               ^~~~~\n       \
    \        Double( )\n/tmp/tmpwrm4jr71.swift:21:16: error: cannot assign value of\
    \ type 'Int' to type 'Double'\n        area = side1\n               ^~~~~\n  \
    \             Double( )\n/tmp/tmpwrm4jr71.swift:25:12: error: cannot find 'round'\
    \ in scope\n    return round(area)\n           ^~~~~\n"
  stdout: ''
  timestamp: 1660014765
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let a = abs(a)\n    let b = abs(b)\n \
    \   let c = abs(c)\n    let s = a + b + c\n    if s > 0 {\n        let area =\
    \ (a * b * c) / s\n        return Double(round(area / 100)) / 100\n    }\n   \
    \ return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpegvnnmhi.swift:17:23: error: cannot find 'round' in scope\n   \
    \     return Double(round(area / 100)) / 100\n                      ^~~~~\n"
  stdout: ''
  timestamp: 1660014765
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let side1 = abs(a) + abs(b) + abs(c)\n\
    \    let side2 = abs(a) + abs(b) - abs(c)\n    let side3 = abs(a) - abs(b) + abs(c)\n\
    \    let side4 = abs(a) - abs(b) - abs(c)\n    let area = (side1 + side2 + side3\
    \ + side4) / 4\n    if area > 0 {\n        return round(area, 2)\n    } else {\n\
    \        return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpxxfb384y.swift:17:16: error: cannot find 'round' in scope\n   \
    \     return round(area, 2)\n               ^~~~~\n"
  stdout: ''
  timestamp: 1660014764
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let side1 = abs(a) + abs(b) + abs(c)\n\
    \    let side2 = abs(a) + abs(b) - abs(c)\n    let side3 = abs(a) - abs(b) - abs(c)\n\
    \    if side1 > side2 && side1 > side3 {\n        return Double(round(side1 /\
    \ 2))\n    } else if side2 > side3 {\n        return Double(round(side2 / 2))\n\
    \    } else {\n        return Double(round(side3 / 2))\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp7m2lfq1y.swift:15:23: error: cannot find 'round' in scope\n   \
    \     return Double(round(side1 / 2))\n                      ^~~~~\n/tmp/tmp7m2lfq1y.swift:17:23:\
    \ error: cannot find 'round' in scope\n        return Double(round(side2 / 2))\n\
    \                      ^~~~~\n/tmp/tmp7m2lfq1y.swift:19:23: error: cannot find\
    \ 'round' in scope\n        return Double(round(side3 / 2))\n                \
    \      ^~~~~\n"
  stdout: ''
  timestamp: 1660014765
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let a1 = b * b - 4 * a * c\n    let a2\
    \ = sqrt(a1)\n    let a3 = sqrt(a2)\n    let a4 = b * b + 4 * a * c\n    let a5\
    \ = sqrt(a4)\n    let a6 = sqrt(a5)\n    let a7 = a6 - a\n    let a8 = sqrt(a7)\n\
    \    let a9 = a8 - a\n    let a10 = a9 - a\n    let a11 = a10 - a\n    let a12\
    \ = a11 - a\n    let a13 = a12 - a\n    let a14 = a13 - a\n    let a15 = a14 -\
    \ a\n    let a16 = a15 - a\n    let a17 = a16 - a\n    let a18 = a17 - a\n   \
    \ let a19 = a18 - a\n    let a20 = a19 - a\n    let a21 = a20 - a\n    let a22\
    \ = a21 - a\n    let a23 = a22 - a\n    let a24 = a23 - a\n    let a25 = a24 -\
    \ a\n    let a26 = a25 - a\n    let a27 = a26 - a\n    let a28 = a27 - a\n   \
    \ let a29 = a28 - a\n    let a30 = a29 - a\n    let a31 = a30 - a\n    let a32\
    \ = a31 - a\n    let a33 = a32 - a\n    let a34 = a33 - a\n    let a35 = a34 -\
    \ a\n    let a36 = a35 - a\n    let a37 = a36 - a\n    let a38 = a37 - a\n   \
    \ let a39 = a38 - a\n    let a40 = a39 - a\n    let a41 = a40 - a\n    let a42\
    \ = a41 - a\n    let a43 = a42 - a\n    let a44 = a43 - a\n    let a45 = a44 -\
    \ a\n    let a46 = a45 - a\n    let a47 = a46 - a\n    let a48 = a47 - a\n   \
    \ let a49 = a48 - a\n    let a50 = a49 - a\n    let a51 = a50 - a\n    let a52\
    \ = a51 - a\n    let a53 = a52 - a\n    let a54 = a53 - a\n    let a55 = a54 -\
    \ a\n    let a56 = a55 - a\n    let a57 = a56 - a\n    let a58 = a57 - a\n   \
    \ let a59 = a58 - a\n    let a60 = a59 - a\n    let a61 = a60 - a\n    let a62\
    \ = a61 - a\n    let a63 = a62 - a\n    let a64 = a63 - a\n    let a65 = a64 -\
    \ a\n    let a66 = a65 - a\n    let a67 = a66 - a\n    let a68 = a67 - a\n   \
    \ let a69 = a68 - a\n    let a70 = a69 - a\n    let a71 = a70 - a\n    let a72\
    \ = a71 - a\n    let a73 = \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp7xg2s959.swift:83:14: error: expected initial value after '='\n\
    \    let a73 = \n             ^\n/tmp/tmp7xg2s959.swift:12:14: error: cannot find\
    \ 'sqrt' in scope\n    let a2 = sqrt(a1)\n             ^~~~\n/tmp/tmp7xg2s959.swift:13:14:\
    \ error: cannot find 'sqrt' in scope\n    let a3 = sqrt(a2)\n             ^~~~\n\
    /tmp/tmp7xg2s959.swift:15:14: error: cannot find 'sqrt' in scope\n    let a5 =\
    \ sqrt(a4)\n             ^~~~\n/tmp/tmp7xg2s959.swift:16:14: error: cannot find\
    \ 'sqrt' in scope\n    let a6 = sqrt(a5)\n             ^~~~\n/tmp/tmp7xg2s959.swift:18:14:\
    \ error: cannot find 'sqrt' in scope\n    let a8 = sqrt(a7)\n             ^~~~\n"
  stdout: ''
  timestamp: 1660014765
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let side1 = abs(a) + abs(b) + abs(c)\n\
    \    let side2 = abs(a) + abs(b) - abs(c)\n    let side3 = abs(a) - abs(b) - abs(c)\n\
    \    if side1 == side2 && side2 == side3 {\n        return Double(side1)\n   \
    \ }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpbr1d6a4l/tmpbr1d6a4l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade675e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade672d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade672d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade672d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbr1d6a4l                        0x00005606fb05a2bf <unavailable> + 4799

    5    libc.so.6                          0x00002ade677cd460 __libc_start_main +
    245

    6    tmpbr1d6a4l                        0x00005606fb059f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1660014764
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let a = abs(a)\n    let b = abs(b)\n \
    \   let c = abs(c)\n    if a + b > c {\n        return Double(a + b - c)\n   \
    \ }\n    if a + c > b {\n        return Double(a + c - b)\n    }\n    if b + c\
    \ > a {\n        return Double(b + c - a)\n    }\n    return Double(a + b + c)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmp4n7_4cwf/tmp4n7_4cwf.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeac4e2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeac4b21b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeac4b21988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeac4b207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4n7_4cwf                        0x000055ec2b4102bf <unavailable> + 4799

    5    libc.so.6                          0x00002aeac5016460 __libc_start_main +
    245

    6    tmp4n7_4cwf                        0x000055ec2b40ff59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1660014764
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let a = abs(a)\n    let b = abs(b)\n \
    \   let c = abs(c)\n    if a + b > c {\n        return -1\n    }\n    if a + c\
    \ > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n   \
    \ }\n    return sqrt(Double(a * b * c))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b:\
    \ 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmphuapi8w1.swift:23:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(Double(a * b * c))\n           ^~~~\n"
  stdout: ''
  timestamp: 1660014765
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let sides = [a, b, c]\n    let sumOfSides\
    \ = sides.reduce(0, +)\n    if sumOfSides > sides[2]{\n        return Double(sides[2]\
    \ * sides[2] / 2)\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b:\
    \ 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpsmqq5wca/tmpsmqq5wca.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b40c8af3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b40c87eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b40c87ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b40c87e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsmqq5wca                        0x000055a36f5bb42f <unavailable> + 5167

    5    libc.so.6                          0x00002b40c8cdf460 __libc_start_main +
    245

    6    tmpsmqq5wca                        0x000055a36f5bb0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014765
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let a = abs(a)\n    let b = abs(b)\n \
    \   let c = abs(c)\n    let s = a + b + c\n    if s > 0 {\n        return Double(s\
    \ * (s - a) * (s - b) * (s - c)) / Double(s * a + s * b + s * c)\n    } else {\n\
    \        return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpcl7hee7h/tmpcl7hee7h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba8354ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba8351f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba8351f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8351f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcl7hee7h                        0x000055abf7c862bf <unavailable> + 4799

    5    libc.so.6                          0x00002ba8356eb460 __libc_start_main +
    245

    6    tmpcl7hee7h                        0x000055abf7c85f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1660014765
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3 = sqrt(pow(c, 2) +\
    \ pow(a, 2))\n    let area: Double = side1 + side2 + side3\n    if area > 0 {\n\
    \        return round(area, 2)\n    } else {\n        return -1\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp0ihi1cf9.swift:11:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmp0ihi1cf9.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmp0ihi1cf9.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmp0ihi1cf9.swift:12:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmp0ihi1cf9.swift:12:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmp0ihi1cf9.swift:12:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmp0ihi1cf9.swift:13:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmp0ihi1cf9.swift:13:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmp0ihi1cf9.swift:13:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmp0ihi1cf9.swift:14:38: error: cannot convert value of\
    \ type 'String' to specified type 'Double'\n    let area: Double = side1 + side2\
    \ + side3\n                       ~~~~~~~~~~~~~~^~~~~~~\n/tmp/tmp0ihi1cf9.swift:16:16:\
    \ error: cannot find 'round' in scope\n        return round(area, 2)\n       \
    \        ^~~~~\n"
  stdout: ''
  timestamp: 1660014764
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    var a = Double(a)\n    var b = Double(b)\n\
    \    var c = Double(c)\n    var s = a + b + c\n    if s > 0 {\n        return\
    \ s / 2\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmppvlk15yn/tmppvlk15yn.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad598ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad598b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad598b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad598b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppvlk15yn                        0x0000562f43678261 <unavailable> + 4705

    5    libc.so.6                          0x00002ad599092460 __libc_start_main +
    245

    6    tmppvlk15yn                        0x0000562f43677e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660014765
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3 = sqrt(pow(c, 2) +\
    \ pow(a, 2))\n    let area: Double = side1 + side2 + side3\n    if area > 0 {\n\
    \        return round(area * 100) / 100\n    } else {\n        return -1\n   \
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(triangle_area(a: 3, b: 4, c:\
    \ 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpyrbe97n6.swift:11:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmpyrbe97n6.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmpyrbe97n6.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmpyrbe97n6.swift:12:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmpyrbe97n6.swift:12:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmpyrbe97n6.swift:12:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmpyrbe97n6.swift:13:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmpyrbe97n6.swift:13:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmpyrbe97n6.swift:13:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmpyrbe97n6.swift:14:38: error: cannot convert value of\
    \ type 'String' to specified type 'Double'\n    let area: Double = side1 + side2\
    \ + side3\n                       ~~~~~~~~~~~~~~^~~~~~~\n/tmp/tmpyrbe97n6.swift:16:16:\
    \ error: cannot find 'round' in scope\n        return round(area * 100) / 100\n\
    \               ^~~~~\n"
  stdout: ''
  timestamp: 1660014764
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    var sum: Double = 0\n    var a: Double\
    \ = a\n    var b: Double = b\n    var c: Double = c\n    if a + b > c {\n    \
    \    sum = a * b\n    } else {\n        sum = c\n    }\n    if a + c > b {\n \
    \       sum += a\n    } else {\n        sum += b\n    }\n    if b + c > a {\n\
    \        sum += b\n    } else {\n        sum += c\n    }\n    return Double(sum)\
    \ / Double(3.0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpl4d9yayb.swift:12:21: error: cannot convert value of type 'Int'\
    \ to specified type 'Double'\n    var a: Double = a\n                    ^\n \
    \                   Double( )\n/tmp/tmpl4d9yayb.swift:13:21: error: cannot convert\
    \ value of type 'Int' to specified type 'Double'\n    var b: Double = b\n    \
    \                ^\n                    Double( )\n/tmp/tmpl4d9yayb.swift:14:21:\
    \ error: cannot convert value of type 'Int' to specified type 'Double'\n    var\
    \ c: Double = c\n                    ^\n                    Double( )\n"
  stdout: ''
  timestamp: 1660014765
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    if a + b > c {\n        return -1\n  \
    \  }\n    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n     \
    \   return -1\n    }\n    return Double(sqrt(Double(a * a + b * b + c * c)))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpparmko_v.swift:20:19: error: cannot find 'sqrt' in scope\n    return\
    \ Double(sqrt(Double(a * a + b * b + c * c)))\n                  ^~~~\n"
  stdout: ''
  timestamp: 1660014764
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3 = sqrt(pow(c, 2) +\
    \ pow(a, 2))\n    let area: Double = side1 + side2 + side3\n    if area > 0 {\n\
    \        return round(area * 100) / 100\n    } else {\n        return -1\n   \
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(triangle_area(a: 3, b: 4, c:\
    \ 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpyrbe97n6.swift:11:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmpyrbe97n6.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmpyrbe97n6.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmpyrbe97n6.swift:12:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmpyrbe97n6.swift:12:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmpyrbe97n6.swift:12:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmpyrbe97n6.swift:13:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmpyrbe97n6.swift:13:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmpyrbe97n6.swift:13:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmpyrbe97n6.swift:14:38: error: cannot convert value of\
    \ type 'String' to specified type 'Double'\n    let area: Double = side1 + side2\
    \ + side3\n                       ~~~~~~~~~~~~~~^~~~~~~\n/tmp/tmpyrbe97n6.swift:16:16:\
    \ error: cannot find 'round' in scope\n        return round(area * 100) / 100\n\
    \               ^~~~~\n"
  stdout: ''
  timestamp: 1660014764
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let sides = a + b + c\n    if sides <=\
    \ 0 {\n        return -1\n    }\n    let area = sqrt(Double(a) * Double(b) * Double(c))\n\
    \    return round(area, 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp5b52cdrn.swift:15:16: error: cannot find 'sqrt' in scope\n    let\
    \ area = sqrt(Double(a) * Double(b) * Double(c))\n               ^~~~\n/tmp/tmp5b52cdrn.swift:16:12:\
    \ error: cannot find 'round' in scope\n    return round(area, 2)\n           ^~~~~\n"
  stdout: ''
  timestamp: 1660014765
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let side1 = abs(a) + abs(b) + abs(c)\n\
    \    let side2 = abs(a) + abs(b) - abs(c)\n    let side3 = abs(a) - abs(b) - abs(c)\n\
    \    if side1 == side2 && side2 == side3 {\n        return Double(side1)\n   \
    \ } else {\n        return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b:\
    \ 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpffqfvonv/tmpffqfvonv.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0e1f6d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0e1f3cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0e1f3ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0e1f3c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpffqfvonv                        0x000055769347d2bf <unavailable> + 4799

    5    libc.so.6                          0x00002b0e1f8bf460 __libc_start_main +
    245

    6    tmpffqfvonv                        0x000055769347cf59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1660014765
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let side1 = abs(a) + abs(b) + abs(c)\n\
    \    let side2 = abs(a) + abs(b) - abs(c)\n    let side3 = abs(a) - abs(b) - abs(c)\n\
    \    let area: Double\n    \n    if side1 > 0 && side2 > 0 && side3 > 0 {\n  \
    \      area = side1 * side2 * side3 / 2\n    } else {\n        area = -1\n   \
    \ }\n    \n    return round(area, 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b:\
    \ 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp267v53fa.swift:17:38: error: cannot assign value of type 'Int'\
    \ to type 'Double'\n        area = side1 * side2 * side3 / 2\n               ~~~~~~~~~~~~~~~~~~~~~~^~~\n\
    \               Double(                  )\n/tmp/tmp267v53fa.swift:22:12: error:\
    \ cannot find 'round' in scope\n    return round(area, 2)\n           ^~~~~\n"
  stdout: ''
  timestamp: 1660014765
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let a = abs(a)\n    let b = abs(b)\n \
    \   let c = abs(c)\n    let s = (a+b+c)/2.0\n    if a > b+c {\n        return\
    \ -1\n    }\n    if b > a+c {\n        return -1\n    }\n    if c > a+b {\n  \
    \      return -1\n    }\n    return round(Double(s))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpw0elwwcn.swift:14:20: error: binary operator '/' cannot be applied\
    \ to operands of type 'Int' and 'Double'\n    let s = (a+b+c)/2.0\n          \
    \  ~~~~~~~^~~~\n/tmp/tmpw0elwwcn.swift:14:20: note: overloads for '/' exist with\
    \ these partially matching parameter lists: (Double, Double), (Duration, Double),\
    \ (Int, Int)\n    let s = (a+b+c)/2.0\n                   ^\n/tmp/tmpw0elwwcn.swift:24:12:\
    \ error: cannot find 'round' in scope\n    return round(Double(s))\n         \
    \  ^~~~~\n"
  stdout: ''
  timestamp: 1660014765
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let a = abs(a)\n    let b = abs(b)\n \
    \   let c = abs(c)\n    if a + b > c {\n        return Double(a + b - c) / 2\n\
    \    }\n    if a + c > b {\n        return Double(a + c - b) / 2\n    }\n    if\
    \ b + c > a {\n        return Double(b + c - a) / 2\n    }\n    return -1\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpo4q7xsyt/tmpo4q7xsyt.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b85b8f02c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b85b8bf9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b85b8bf9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b85b8bf87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo4q7xsyt                        0x0000556ae87d52bf <unavailable> + 4799

    5    libc.so.6                          0x00002b85b90ee460 __libc_start_main +
    245

    6    tmpo4q7xsyt                        0x0000556ae87d4f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1660014765
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let side1 = abs(a) + abs(b) + abs(c)\n\
    \    let side2 = abs(a) + abs(b) - abs(c)\n    let side3 = abs(a) - abs(b) - abs(c)\n\
    \    let area: Double = Double(side1 + side2 + side3)\n    return round(area,\
    \ 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(triangle_area(a: 3, b: 4, c:\
    \ 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpff5p8vj_.swift:15:12: error: cannot find 'round' in scope\n   \
    \ return round(area, 2)\n           ^~~~~\n"
  stdout: ''
  timestamp: 1660014765
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let side1 = abs(a) + abs(b) + abs(c)\n\
    \    let side2 = abs(a) + abs(b) - abs(c)\n    let side3 = abs(a) - abs(b) - abs(c)\n\
    \    let area = side1 * side2 * side3\n    return Double(area) / 3\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmplcn2tvri/tmplcn2tvri.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1799d28c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1799a1fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1799a1f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1799a1e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplcn2tvri                        0x0000555cb9fb82bf <unavailable> + 4799

    5    libc.so.6                          0x00002b1799f14460 __libc_start_main +
    245

    6    tmplcn2tvri                        0x0000555cb9fb7f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1660014765
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    var sum: Double = 0\n    var sum2: Double\
    \ = 0\n    var sum3: Double = 0\n    \n    if a > b {\n        sum = a + b\n \
    \       sum2 = b + c\n        sum3 = c + a\n    } else {\n        sum = a + c\n\
    \        sum2 = b + c\n        sum3 = c + a\n    }\n    \n    if sum > sum2 {\n\
    \        if sum > sum3 {\n            return sum * 0.5\n        } else {\n   \
    \         return sum2 * 0.5\n        }\n    } else {\n        if sum2 > sum3 {\n\
    \            return sum2 * 0.5\n        } else {\n            return sum3 * 0.5\n\
    \        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpqh_g5i__.swift:16:17: error: cannot assign value of type 'Int'\
    \ to type 'Double'\n        sum = a + b\n              ~~^~~\n              Double(\
    \ )\n/tmp/tmpqh_g5i__.swift:17:18: error: cannot assign value of type 'Int' to\
    \ type 'Double'\n        sum2 = b + c\n               ~~^~~\n               Double(\
    \ )\n/tmp/tmpqh_g5i__.swift:18:18: error: cannot assign value of type 'Int' to\
    \ type 'Double'\n        sum3 = c + a\n               ~~^~~\n               Double(\
    \ )\n/tmp/tmpqh_g5i__.swift:20:17: error: cannot assign value of type 'Int' to\
    \ type 'Double'\n        sum = a + c\n              ~~^~~\n              Double(\
    \ )\n/tmp/tmpqh_g5i__.swift:21:18: error: cannot assign value of type 'Int' to\
    \ type 'Double'\n        sum2 = b + c\n               ~~^~~\n               Double(\
    \ )\n/tmp/tmpqh_g5i__.swift:22:18: error: cannot assign value of type 'Int' to\
    \ type 'Double'\n        sum3 = c + a\n               ~~^~~\n               Double(\
    \ )\n"
  stdout: ''
  timestamp: 1660014765
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let a = abs(a)\n    let b = abs(b)\n \
    \   let c = abs(c)\n    let s = a + b + c\n    if s > 0 {\n        return Double(sqrt(s\
    \ * (s - a) * (s - b) * (s - c)))\n    } else {\n        return -1\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpfvyh6yn3.swift:16:23: error: cannot find 'sqrt' in scope\n    \
    \    return Double(sqrt(s * (s - a) * (s - b) * (s - c)))\n                  \
    \    ^~~~\n"
  stdout: ''
  timestamp: 1660014765
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let sides = [a, b, c]\n    let sum = sides.reduce(0,\
    \ combine: +)\n    if sum > sides[2] {\n        return Double(sides[2]) / 2.0\n\
    \    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpbu0hj3gz.swift:12:27: error: extraneous argument label 'combine:'\
    \ in call\n    let sum = sides.reduce(0, combine: +)\n                       \
    \   ^   ~~~~~~~~~\n                              \n"
  stdout: ''
  timestamp: 1660014765
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let side1 = abs(a) + abs(b) + abs(c)\n\
    \    let side2 = abs(a) + abs(b) - abs(c)\n    let side3 = abs(a) - abs(b) - abs(c)\n\
    \    let area: Double\n    \n    if side1 == side2 && side2 == side3 {\n     \
    \   area = Double(side1)\n    } else {\n        area = Double(-1)\n    }\n   \
    \ \n    return area\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpg4vwk92f/tmpg4vwk92f.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b61a8283c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b61a7f7ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b61a7f7a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b61a7f797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg4vwk92f                        0x0000562d791862bf <unavailable> + 4799

    5    libc.so.6                          0x00002b61a846f460 __libc_start_main +
    245

    6    tmpg4vwk92f                        0x0000562d79185f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1660014765
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let a = abs(a)\n    let b = abs(b)\n \
    \   let c = abs(c)\n    if a + b > c {\n        return -1\n    }\n    if a + c\
    \ > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n   \
    \ }\n    return (a * b * c) / Double(a + b + c)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpyvedkvv2.swift:23:19: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n    return (a * b * c) / Double(a + b +\
    \ c)\n                  ^\n           Double(    )\n"
  stdout: ''
  timestamp: 1660014765
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3 = sqrt(pow(c, 2) +\
    \ pow(a, 2))\n    let area = (side1 + side2 + side3) / 2\n    if area > 0 {\n\
    \        return area\n    } else {\n        return -1\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpz8xavekq.swift:11:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmpz8xavekq.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmpz8xavekq.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmpz8xavekq.swift:12:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmpz8xavekq.swift:12:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmpz8xavekq.swift:12:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmpz8xavekq.swift:13:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmpz8xavekq.swift:13:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmpz8xavekq.swift:13:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n"
  stdout: ''
  timestamp: 1660014765
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let a = abs(a)\n    let b = abs(b)\n \
    \   let c = abs(c)\n    if a + b > c {\n        return Double(a + b - c)\n   \
    \ } else {\n        return Double(a + b + c - a)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpajx8sh6i/tmpajx8sh6i.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff84f1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff84c14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff84c14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff84c137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpajx8sh6i                        0x000055a08f1b92bf <unavailable> + 4799

    5    libc.so.6                          0x00002aff85109460 __libc_start_main +
    245

    6    tmpajx8sh6i                        0x000055a08f1b8f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1660014764
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let side1 = abs(a) + abs(b) + abs(c)\n\
    \    let side2 = abs(a) + abs(b) - abs(c)\n    let side3 = abs(a) - abs(b) + abs(c)\n\
    \    let side4 = abs(a) - abs(b) - abs(c)\n    let area: Double\n    switch {\n\
    \    case side1 == side2 && side2 == side3 && side3 == side4:\n        area =\
    \ Double(side1)\n    case side1 == side2 && side2 == side3 || side1 == side2 &&\
    \ side3 == side4:\n        area = Double(side2)\n    case side1 == side3 && side2\
    \ == side4 || side1 == side3 && side4 == side2:\n        area = Double(side3)\n\
    \    case side1 == side4 && side2 == side3 || side1 == side4 && side3 == side2:\n\
    \        area = Double(side4)\n    default:\n        area = -1\n    }\n    return\
    \ round(area, 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpbuxeaybf.swift:16:12: error: expected expression in 'switch' statement\n\
    \    switch {\n           ^\n/tmp/tmpbuxeaybf.swift:28:12: error: cannot find\
    \ 'round' in scope\n    return round(area, 2)\n           ^~~~~\n"
  stdout: ''
  timestamp: 1660014765
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let area: Double = abs(a * b * c) / Double(pow(a,\
    \ 2) + pow(b, 2) + pow(c, 2))\n    return area >= 0.0 ? area : -1\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpkf1yg6yt.swift:11:48: error: cannot find 'pow' in scope\n    let\
    \ area: Double = abs(a * b * c) / Double(pow(a, 2) + pow(b, 2) + pow(c, 2))\n\
    \                                               ^~~\n/tmp/tmpkf1yg6yt.swift:11:60:\
    \ error: cannot find 'pow' in scope\n    let area: Double = abs(a * b * c) / Double(pow(a,\
    \ 2) + pow(b, 2) + pow(c, 2))\n                                              \
    \             ^~~\n/tmp/tmpkf1yg6yt.swift:11:72: error: cannot find 'pow' in scope\n\
    \    let area: Double = abs(a * b * c) / Double(pow(a, 2) + pow(b, 2) + pow(c,\
    \ 2))\n                                                                      \
    \ ^~~\n/tmp/tmpkf1yg6yt.swift:11:24: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n    let area: Double = abs(a * b * c) /\
    \ Double(pow(a, 2) + pow(b, 2) + pow(c, 2))\n                       ^\n      \
    \                 Double(       )\n"
  stdout: ''
  timestamp: 1660014772
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let sides = [a, b, c]\n    guard sides.count\
    \ > 3 else {\n        return -1\n    }\n    let sum = sides.reduce(0, +)\n   \
    \ if sum > sides[2] {\n        return Double(sides[0] * sides[1]) / 2\n    } else\
    \ {\n        return Double(sides[0] * sides[1] * sides[2]) / 3\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmp1zvuh91l/tmp1zvuh91l.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acacb9b1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acacb6a8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acacb6a8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acacb6a77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1zvuh91l                        0x00005625b2fb13ff <unavailable> + 5119

    5    libc.so.6                          0x00002acacbb9d460 __libc_start_main +
    245

    6    tmp1zvuh91l                        0x00005625b2fb1099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1660014765
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let side1 = abs(a) + abs(b) + abs(c)\n\
    \    let side2 = abs(a) + abs(b) - abs(c)\n    let side3 = abs(a) - abs(b) - abs(c)\n\
    \    let area: Double = side1 * side2 * side3\n    if area > 0 {\n        return\
    \ round(area, 2)\n    } else {\n        return -1\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpxomlyim7.swift:14:38: error: cannot convert value of type 'Int'\
    \ to specified type 'Double'\n    let area: Double = side1 * side2 * side3\n \
    \                      ~~~~~~~~~~~~~~^~~~~~~\n                       Double( \
    \             )\n/tmp/tmpxomlyim7.swift:16:16: error: cannot find 'round' in scope\n\
    \        return round(area, 2)\n               ^~~~~\n"
  stdout: ''
  timestamp: 1660014764
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3 = sqrt(pow(c, 2) +\
    \ pow(a, 2))\n    let area = (side1 + side2 + side3) / 2\n    if area > 0 {\n\
    \        return area\n    } else {\n        return -1\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpz8xavekq.swift:11:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmpz8xavekq.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmpz8xavekq.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmpz8xavekq.swift:12:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmpz8xavekq.swift:12:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmpz8xavekq.swift:12:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmpz8xavekq.swift:13:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmpz8xavekq.swift:13:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmpz8xavekq.swift:13:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n"
  stdout: ''
  timestamp: 1660014765
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let sides = [a, b, c]\n    let sum = sides.reduce(0,\
    \ +)\n    if sum > sides.last {\n        return -1\n    }\n    let area = Double(sides.last)\
    \ * Double(sides.last) / Double(sides.count)\n    return round(area, 2)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp8f3_ouxa.swift:13:20: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    if sum > sides.last {\n         \
    \          ^\n/tmp/tmp8f3_ouxa.swift:13:20: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n    if sum > sides.last {\n\
    \                   ^\n                        ?? <#default value#>\n/tmp/tmp8f3_ouxa.swift:13:20:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    if sum > sides.last {\n                   ^\n                   \
    \    !\n/tmp/tmp8f3_ouxa.swift:16:50: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    let area = Double(sides.last) * Double(sides.last)\
    \ / Double(sides.count)\n                                                 ^\n\
    /tmp/tmp8f3_ouxa.swift:16:50: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    let area = Double(sides.last) * Double(sides.last)\
    \ / Double(sides.count)\n                                                 ^\n\
    \                                                      ?? <#default value#>\n\
    /tmp/tmp8f3_ouxa.swift:16:50: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n    let area = Double(sides.last) * Double(sides.last)\
    \ / Double(sides.count)\n                                                 ^\n\
    \                                                     !\n/tmp/tmp8f3_ouxa.swift:16:29:\
    \ error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n\
    \    let area = Double(sides.last) * Double(sides.last) / Double(sides.count)\n\
    \                            ^\n/tmp/tmp8f3_ouxa.swift:16:29: note: coalesce using\
    \ '??' to provide a default when the optional value contains 'nil'\n    let area\
    \ = Double(sides.last) * Double(sides.last) / Double(sides.count)\n          \
    \                  ^\n                                 ?? <#default value#>\n\
    /tmp/tmp8f3_ouxa.swift:16:29: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n    let area = Double(sides.last"
  stdout: ''
  timestamp: 1660014769
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3 = sqrt(pow(c, 2) +\
    \ pow(a, 2))\n    let area = side1 + side2 + side3\n    if area > 0 {\n      \
    \  return round(area / 2)\n    } else {\n        return -1\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp7ueht9ql.swift:11:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmp7ueht9ql.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmp7ueht9ql.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmp7ueht9ql.swift:12:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmp7ueht9ql.swift:12:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmp7ueht9ql.swift:12:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmp7ueht9ql.swift:13:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmp7ueht9ql.swift:13:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmp7ueht9ql.swift:13:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmp7ueht9ql.swift:16:16: error: cannot find 'round' in\
    \ scope\n        return round(area / 2)\n               ^~~~~\n"
  stdout: ''
  timestamp: 1660014765
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3 = sqrt(pow(c, 2) +\
    \ pow(a, 2))\n    let area: Double = side1 + side2 + side3\n    if area < 0 {\n\
    \        return -1\n    } else {\n        return round(area * 100) / 100\n   \
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(triangle_area(a: 3, b: 4, c:\
    \ 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp4fofgu86.swift:11:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmp4fofgu86.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmp4fofgu86.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmp4fofgu86.swift:12:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmp4fofgu86.swift:12:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmp4fofgu86.swift:12:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmp4fofgu86.swift:13:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmp4fofgu86.swift:13:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmp4fofgu86.swift:13:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmp4fofgu86.swift:14:38: error: cannot convert value of\
    \ type 'String' to specified type 'Double'\n    let area: Double = side1 + side2\
    \ + side3\n                       ~~~~~~~~~~~~~~^~~~~~~\n/tmp/tmp4fofgu86.swift:18:16:\
    \ error: cannot find 'round' in scope\n        return round(area * 100) / 100\n\
    \               ^~~~~\n"
  stdout: ''
  timestamp: 1660014765
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let sides = [a, b, c]\n    let sum = sides.reduce(0,\
    \ +)\n    if sum > sides[2] {\n        return Double(sides[0] * sides[1]) / Double(sides[0]\
    \ + sides[1])\n    } else {\n        return -1\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpelejj1d_/tmpelejj1d_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1001eccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1001bc3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1001bc3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1001bc27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpelejj1d_                        0x00005570b37ee39f <unavailable> + 5023

    5    libc.so.6                          0x00002b10020b8460 __libc_start_main +
    245

    6    tmpelejj1d_                        0x00005570b37ee039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014764
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3 = sqrt(pow(c, 2) +\
    \ pow(a, 2))\n    let area = side1 + side2 + side3\n    return round(area / 2)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp8wgul46o.swift:11:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmp8wgul46o.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmp8wgul46o.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmp8wgul46o.swift:12:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmp8wgul46o.swift:12:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmp8wgul46o.swift:12:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmp8wgul46o.swift:13:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmp8wgul46o.swift:13:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmp8wgul46o.swift:13:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmp8wgul46o.swift:15:12: error: cannot find 'round' in\
    \ scope\n    return round(area / 2)\n           ^~~~~\n"
  stdout: ''
  timestamp: 1660014765
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let a1 = b * b - 4 * a * c\n    let a2\
    \ = sqrt(a1)\n    let a3 = sqrt(a2)\n    let a4 = sqrt(a3)\n    if a2 > a3 &&\
    \ a3 > a4 {\n        return (a1 + a2 + a3) / 2\n    } else {\n        return -1\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3, b:\
    \ 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpkix38lho.swift:12:14: error: cannot find 'sqrt' in scope\n    let\
    \ a2 = sqrt(a1)\n             ^~~~\n/tmp/tmpkix38lho.swift:13:14: error: cannot\
    \ find 'sqrt' in scope\n    let a3 = sqrt(a2)\n             ^~~~\n/tmp/tmpkix38lho.swift:14:14:\
    \ error: cannot find 'sqrt' in scope\n    let a4 = sqrt(a3)\n             ^~~~\n\
    /tmp/tmpkix38lho.swift:16:31: error: cannot convert return expression of type\
    \ 'Int' to return type 'Double'\n        return (a1 + a2 + a3) / 2\n         \
    \      ~~~~~~~~~~~~~~~^~~\n               Double(           )\n"
  stdout: ''
  timestamp: 1660014766
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let side1 = abs(a) + abs(b) + abs(c)\n\
    \    let side2 = abs(a) + abs(b) - abs(c)\n    let side3 = abs(a) - abs(b) - abs(c)\n\
    \    let area = side1 * side2 * side3\n    if area > 0 {\n        return Double(area)\
    \ / 3\n    } else {\n        return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpw9g6a7jl/tmpw9g6a7jl.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b157f30ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b157f001b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b157f001988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b157f0007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw9g6a7jl                        0x000055747a79b2bf <unavailable> + 4799

    5    libc.so.6                          0x00002b157f4f6460 __libc_start_main +
    245

    6    tmpw9g6a7jl                        0x000055747a79af59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1660014765
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let sides = [a, b, c]\n    let sum = sides.reduce(0,\
    \ +)\n    if sum > sides.last {\n        return -1\n    }\n    return Double(sides.last)\
    \ * Double(sides.last) / Double(sides.first)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp0p4h0c82.swift:13:20: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    if sum > sides.last {\n         \
    \          ^\n/tmp/tmp0p4h0c82.swift:13:20: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n    if sum > sides.last {\n\
    \                   ^\n                        ?? <#default value#>\n/tmp/tmp0p4h0c82.swift:13:20:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    if sum > sides.last {\n                   ^\n                   \
    \    !\n/tmp/tmp0p4h0c82.swift:16:67: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return Double(sides.last) * Double(sides.last)\
    \ / Double(sides.first)\n                                                    \
    \              ^\n/tmp/tmp0p4h0c82.swift:16:67: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n    return Double(sides.last)\
    \ * Double(sides.last) / Double(sides.first)\n                               \
    \                                   ^\n                                      \
    \                                  ?? <#default value#>\n/tmp/tmp0p4h0c82.swift:16:67:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    return Double(sides.last) * Double(sides.last) / Double(sides.first)\n\
    \                                                                  ^\n       \
    \                                                                !\n/tmp/tmp0p4h0c82.swift:16:25:\
    \ error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n\
    \    return Double(sides.last) * Double(sides.last) / Double(sides.first)\n  \
    \                      ^\n/tmp/tmp0p4h0c82.swift:16:25: note: coalesce using '??'\
    \ to provide a default when the optional value contains 'nil'\n    return Double(sides.last)\
    \ * Double(sides.last) / Double(sides.first)\n                        ^\n    \
    \                         ?? <#default value#>\n/tmp/tmp0p4h0c82.swift:16:25:\
    \ note: force-unwrap using '!' to abort execution if the optiona"
  stdout: ''
  timestamp: 1660014778
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    if a > b {\n        if b > c {\n     \
    \       return (b + c) / 2\n        } else {\n            return -1\n        }\n\
    \    } else {\n        if c > b {\n            return -1\n        } else {\n \
    \           return (b + c) / 2\n        }\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmprr3p0f6c.swift:13:28: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n            return (b + c) / 2\n       \
    \            ~~~~~~~~^~~\n                   Double(    )\n/tmp/tmprr3p0f6c.swift:21:28:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \            return (b + c) / 2\n                   ~~~~~~~~^~~\n            \
    \       Double(    )\n"
  stdout: ''
  timestamp: 1660014764
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let side1 = abs(a) + abs(b) + abs(c)\n\
    \    let side2 = abs(a) + abs(b) - abs(c)\n    let side3 = abs(a) - abs(b) - abs(c)\n\
    \    if side1 == side2 && side2 == side3 {\n        return Double(side1)\n   \
    \ }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpbr1d6a4l/tmpbr1d6a4l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade675e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade672d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade672d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade672d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbr1d6a4l                        0x00005606fb05a2bf <unavailable> + 4799

    5    libc.so.6                          0x00002ade677cd460 __libc_start_main +
    245

    6    tmpbr1d6a4l                        0x00005606fb059f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1660014764
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3 = sqrt(pow(c, 2) +\
    \ pow(a, 2))\n    let area: Double = side1 + side2 + side3\n    if area > 0 {\n\
    \        return round(area, 2)\n    } else {\n        return -1\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp0ihi1cf9.swift:11:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmp0ihi1cf9.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmp0ihi1cf9.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmp0ihi1cf9.swift:12:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmp0ihi1cf9.swift:12:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmp0ihi1cf9.swift:12:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmp0ihi1cf9.swift:13:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmp0ihi1cf9.swift:13:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmp0ihi1cf9.swift:13:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmp0ihi1cf9.swift:14:38: error: cannot convert value of\
    \ type 'String' to specified type 'Double'\n    let area: Double = side1 + side2\
    \ + side3\n                       ~~~~~~~~~~~~~~^~~~~~~\n/tmp/tmp0ihi1cf9.swift:16:16:\
    \ error: cannot find 'round' in scope\n        return round(area, 2)\n       \
    \        ^~~~~\n"
  stdout: ''
  timestamp: 1660014764
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    if a > b {\n        if b > c {\n     \
    \       return a + b + c\n        } else {\n            return b + a + c\n   \
    \     }\n    } else {\n        if c > b {\n            return a + c + b\n    \
    \    } else {\n            return c + a + b\n        }\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmprh5aypod.swift:13:26: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n            return a + b + c\n         \
    \          ~~~~~~^~~\n                   Double(  )\n/tmp/tmprh5aypod.swift:15:26:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \            return b + a + c\n                   ~~~~~~^~~\n                \
    \   Double(  )\n/tmp/tmprh5aypod.swift:19:26: error: cannot convert return expression\
    \ of type 'Int' to return type 'Double'\n            return a + c + b\n      \
    \             ~~~~~~^~~\n                   Double(  )\n/tmp/tmprh5aypod.swift:21:26:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \            return c + a + b\n                   ~~~~~~^~~\n                \
    \   Double(  )\n"
  stdout: ''
  timestamp: 1660014765
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let side1 = abs(a) + abs(b) + abs(c)\n\
    \    let side2 = abs(a) + abs(b) - abs(c)\n    let side3 = abs(a) - abs(b) - abs(c)\n\
    \    if side1 == side2 && side2 == side3 {\n        return Double(side1)\n   \
    \ }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpbr1d6a4l/tmpbr1d6a4l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade675e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade672d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade672d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade672d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbr1d6a4l                        0x00005606fb05a2bf <unavailable> + 4799

    5    libc.so.6                          0x00002ade677cd460 __libc_start_main +
    245

    6    tmpbr1d6a4l                        0x00005606fb059f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1660014764
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    var a = a\n    var b = b\n    var c =\
    \ c\n    var sum = a\n    var sum2 = b\n    var sum3 = c\n    var sum4 = a + b\
    \ + c\n    var sum5 = a + b + c + a\n    var sum6 = b + c + a + b\n    var sum7\
    \ = a + a + b + c + a + b + c\n    var sum8 = a + a + b + c + a + b + c + a\n\
    \    var sum9 = a + a + b + c + a + b + c + a + b\n    var sum10 = a + a + b +\
    \ c + a + b + c + a + b + c\n    var sum11 = a + a + b + c + a + b + c + a + b\
    \ + c + a\n    var sum12 = a + a + b + c + a + b + c + a + b + c + a + b\n   \
    \ var sum13 = a + a + b + c + a + b + c + a + b + c + a + b + c\n    var sum14\
    \ = a + a + b + c + a + b + c + a + b + c + a + b + c + a\n    var sum15 = a +\
    \ a + b + c + a + b + c + a + b + c + a + b + c + a + b\n    var sum16 = a + a\
    \ + b + c + a + b + c + a + b + c + a + b + c + a + b + c\n    var sum17 = a +\
    \ a + b + c + a + b + c + a + b + c + a + b + c + a + b + c + a\n    var sum18\
    \ = a + a + b + c + a + b + c + a + b + c + a + b + c + a + b + c + a + b\n  \
    \  var sum19 = a + a + b + c + a + b + c + a + b + c + a + b + c + a + b + c +\
    \ a + b + c\n    var sum20 = a + a + b + c + a + b + c + a + b + c + a + b + c\
    \ + a + b + c + a + b + c + a + b + c + a\n    var sum21 = a + a + b + c + a +\
    \ b + c + a + b + c + a + b + c + a + b + c + a + b + c + a + b + c + a + b +\
    \ c\n    var sum22 = a + a + b + c + a + b + c + a + b + c + a + b + c + a + b\
    \ + c + a + b + c + a + b + c + a + b + c + a + b + c + a + b + c + a + b + c\
    \ + a + b + c + a + b + c + a + b + c + a + b + c + a + b + c + a + b + c + a\
    \ + b + c + a + b + c + a + b + c + a + b + c + a + b + c + a + b + c + a + b\
    \ + c + a + b + c + a + b + c + a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b:\
    \ 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpf1dsj9aw.swift:11:9: warning: variable 'a' was never mutated; consider\
    \ changing to 'let' constant\n    var a = a\n    ~~~ ^\n    let\n/tmp/tmpf1dsj9aw.swift:12:9:\
    \ warning: variable 'b' was never mutated; consider changing to 'let' constant\n\
    \    var b = b\n    ~~~ ^\n    let\n/tmp/tmpf1dsj9aw.swift:13:9: warning: variable\
    \ 'c' was never mutated; consider changing to 'let' constant\n    var c = c\n\
    \    ~~~ ^\n    let\n/tmp/tmpf1dsj9aw.swift:14:9: warning: initialization of variable\
    \ 'sum' was never used; consider replacing with assignment to '_' or removing\
    \ it\n    var sum = a\n    ~~~~^~~\n    _\n/tmp/tmpf1dsj9aw.swift:15:9: warning:\
    \ initialization of variable 'sum2' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var sum2 = b\n    ~~~~^~~~\n    _\n/tmp/tmpf1dsj9aw.swift:16:9:\
    \ warning: initialization of variable 'sum3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var sum3 = c\n    ~~~~^~~~\n    _\n\
    /tmp/tmpf1dsj9aw.swift:17:9: warning: initialization of variable 'sum4' was never\
    \ used; consider replacing with assignment to '_' or removing it\n    var sum4\
    \ = a + b + c\n    ~~~~^~~~\n    _\n/tmp/tmpf1dsj9aw.swift:18:9: warning: initialization\
    \ of variable 'sum5' was never used; consider replacing with assignment to '_'\
    \ or removing it\n    var sum5 = a + b + c + a\n    ~~~~^~~~\n    _\n/tmp/tmpf1dsj9aw.swift:19:9:\
    \ warning: initialization of variable 'sum6' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var sum6 = b + c + a + b\n    ~~~~^~~~\n\
    \    _\n/tmp/tmpf1dsj9aw.swift:20:9: warning: initialization of variable 'sum7'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var sum7 = a + a + b + c + a + b + c\n    ~~~~^~~~\n    _\n/tmp/tmpf1dsj9aw.swift:21:9:\
    \ warning: initialization of variable 'sum8' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var sum8 = a + a + b + c + a + b\
    \ + c + a\n    ~~~~^~~~\n    _\n/tmp/tmpf1dsj9aw.swift:22:9: warning: initialization\
    \ of variable 'sum9' was never used; consider replacin"
  stdout: ''
  timestamp: 1660014765
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let side1 = abs(a) + abs(b) + abs(c)\n\
    \    let side2 = abs(a) + abs(b) - abs(c)\n    let side3 = abs(a) - abs(b) - abs(c)\n\
    \    if side1 == side2 && side2 == side3 {\n        return Double(side1)\n   \
    \ }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpbr1d6a4l/tmpbr1d6a4l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade675e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade672d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade672d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade672d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbr1d6a4l                        0x00005606fb05a2bf <unavailable> + 4799

    5    libc.so.6                          0x00002ade677cd460 __libc_start_main +
    245

    6    tmpbr1d6a4l                        0x00005606fb059f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1660014764
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    if a + b > c {\n        return Double(-1)\
    \ / Double(Double(a + b) - c)\n    }\n    if a + c > b {\n        return Double(-1)\
    \ / Double(Double(a + c) - b)\n    }\n    if b + c > a {\n        return Double(-1)\
    \ / Double(Double(b + c) - a)\n    }\n    return Double(-1) / Double(Double(a\
    \ + b) + Double(a + c) + Double(b + c))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b:\
    \ 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp34y_epm4.swift:12:50: error: binary operator '-' cannot be applied\
    \ to operands of type 'Double' and 'Int'\n        return Double(-1) / Double(Double(a\
    \ + b) - c)\n                                   ~~~~~~~~~~~~~ ^ ~\n/tmp/tmp34y_epm4.swift:12:50:\
    \ note: overloads for '-' exist with these partially matching parameter lists:\
    \ (Double, Double), (Int, Int)\n        return Double(-1) / Double(Double(a +\
    \ b) - c)\n                                                 ^\n/tmp/tmp34y_epm4.swift:15:50:\
    \ error: binary operator '-' cannot be applied to operands of type 'Double' and\
    \ 'Int'\n        return Double(-1) / Double(Double(a + c) - b)\n             \
    \                      ~~~~~~~~~~~~~ ^ ~\n/tmp/tmp34y_epm4.swift:15:50: note:\
    \ overloads for '-' exist with these partially matching parameter lists: (Double,\
    \ Double), (Int, Int)\n        return Double(-1) / Double(Double(a + c) - b)\n\
    \                                                 ^\n/tmp/tmp34y_epm4.swift:18:50:\
    \ error: binary operator '-' cannot be applied to operands of type 'Double' and\
    \ 'Int'\n        return Double(-1) / Double(Double(b + c) - a)\n             \
    \                      ~~~~~~~~~~~~~ ^ ~\n/tmp/tmp34y_epm4.swift:18:50: note:\
    \ overloads for '-' exist with these partially matching parameter lists: (Double,\
    \ Double), (Int, Int)\n        return Double(-1) / Double(Double(b + c) - a)\n\
    \                                                 ^\n"
  stdout: ''
  timestamp: 1660014768
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    if a + b > c {\n        return -1\n  \
    \  }\n    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n     \
    \   return -1\n    }\n    return Double(sqrt(Double(a * a + b * b + c * c)))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpparmko_v.swift:20:19: error: cannot find 'sqrt' in scope\n    return\
    \ Double(sqrt(Double(a * a + b * b + c * c)))\n                  ^~~~\n"
  stdout: ''
  timestamp: 1660014764
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let a = abs(a)\n    let b = abs(b)\n \
    \   let c = abs(c)\n    if a + b > c {\n        return Double(a + b - c)\n   \
    \ } else {\n        return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b:\
    \ 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpv3a5rcsj/tmpv3a5rcsj.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a6ee92c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a6eb89b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7a6eb89988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7a6eb887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv3a5rcsj                        0x000055fcecc6c2bf <unavailable> + 4799

    5    libc.so.6                          0x00002b7a6f07e460 __libc_start_main +
    245

    6    tmpv3a5rcsj                        0x000055fcecc6bf59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1660014765
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    var sum: Double = 0\n    if a + b > c\
    \ {\n        sum = a + b\n    } else {\n        sum = a + c\n    }\n    if a +\
    \ c > b {\n        sum = sum + c\n    } else {\n        sum = sum + b\n    }\n\
    \    if b + c > a {\n        sum = sum + c\n    } else {\n        sum = sum +\
    \ b\n    }\n    return Double(sum) / Double(2.0 * Double(a * b))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp_csj9ze_.swift:13:17: error: cannot assign value of type 'Int'\
    \ to type 'Double'\n        sum = a + b\n              ~~^~~\n              Double(\
    \ )\n/tmp/tmp_csj9ze_.swift:15:17: error: cannot assign value of type 'Int' to\
    \ type 'Double'\n        sum = a + c\n              ~~^~~\n              Double(\
    \ )\n/tmp/tmp_csj9ze_.swift:18:21: error: cannot convert value of type 'Int' to\
    \ expected argument type 'Double'\n        sum = sum + c\n                   \
    \ ^\n                    Double( )\n/tmp/tmp_csj9ze_.swift:20:21: error: cannot\
    \ convert value of type 'Int' to expected argument type 'Double'\n        sum\
    \ = sum + b\n                    ^\n                    Double( )\n/tmp/tmp_csj9ze_.swift:23:21:\
    \ error: cannot convert value of type 'Int' to expected argument type 'Double'\n\
    \        sum = sum + c\n                    ^\n                    Double( )\n\
    /tmp/tmp_csj9ze_.swift:25:21: error: cannot convert value of type 'Int' to expected\
    \ argument type 'Double'\n        sum = sum + b\n                    ^\n     \
    \               Double( )\n"
  stdout: ''
  timestamp: 1660014765
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let sides = [a, b, c]\n    let sum = sides.reduce(0,\
    \ +)\n    if sum > sides[2] {\n        return Double(sides[2] * sides[2] / 2)\n\
    \    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpg_h_68le/tmpg_h_68le.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba271569c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba271260b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba271260988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba27125f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg_h_68le                        0x0000559b46bda42f <unavailable> + 5167

    5    libc.so.6                          0x00002ba271755460 __libc_start_main +
    245

    6    tmpg_h_68le                        0x0000559b46bda0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014765
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    var area = 0.0\n    if a + b > c {\n \
    \       return -1\n    }\n    if a + c > b {\n        return -1\n    }\n    if\
    \ b + c > a {\n        return -1\n    }\n    area = Double(a * b * c) / Double(a\
    \ + b + c)\n    return round(area, 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b:\
    \ 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpoufi3ttn.swift:22:12: error: cannot find 'round' in scope\n   \
    \ return round(area, 2)\n           ^~~~~\n"
  stdout: ''
  timestamp: 1660014764
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let a = abs(a)\n    let b = abs(b)\n \
    \   let c = abs(c)\n    if a + b > c {\n        return Double(a + b - c)\n   \
    \ }\n    if a + c > b {\n        return Double(a + c - b)\n    }\n    if b + c\
    \ > a {\n        return Double(b + c - a)\n    }\n    return Double(a + b + c)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmp4n7_4cwf/tmp4n7_4cwf.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeac4e2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeac4b21b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeac4b21988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeac4b207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4n7_4cwf                        0x000055ec2b4102bf <unavailable> + 4799

    5    libc.so.6                          0x00002aeac5016460 __libc_start_main +
    245

    6    tmp4n7_4cwf                        0x000055ec2b40ff59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1660014764
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let a = abs(a)\n    let b = abs(b)\n \
    \   let c = abs(c)\n    let s = (a + b + c) / 2\n    let area = s * s\n    if\
    \ area > c {\n        return area\n    } else {\n        return -1\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp58wic_3p.swift:17:16: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return area\n               ^~~~\n\
    \               Double( )\n"
  stdout: ''
  timestamp: 1660014765
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3 = sqrt(pow(c, 2) +\
    \ pow(a, 2))\n    if side1 + side2 > side3 {\n        return Double(round(side1\
    \ + side2 - side3) * 100) / 100\n    } else {\n        return -1\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmptbme0wol.swift:11:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmptbme0wol.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmptbme0wol.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmptbme0wol.swift:12:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmptbme0wol.swift:12:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmptbme0wol.swift:12:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmptbme0wol.swift:13:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmptbme0wol.swift:13:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmptbme0wol.swift:13:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmptbme0wol.swift:15:23: error: cannot find 'round' in\
    \ scope\n        return Double(round(side1 + side2 - side3) * 100) / 100\n   \
    \                   ^~~~~\n"
  stdout: ''
  timestamp: 1660014766
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let a = abs(a)\n    let b = abs(b)\n \
    \   let c = abs(c)\n    let s = a + b + c\n    if s == 0 {\n        return -1\n\
    \    }\n    let area = sqrt(s * (s - a) * (s - b) * (s - c))\n    return Double(area)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpv5jagpdx.swift:18:16: error: cannot find 'sqrt' in scope\n    let\
    \ area = sqrt(s * (s - a) * (s - b) * (s - c))\n               ^~~~\n"
  stdout: ''
  timestamp: 1660014765
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    if a >= b + c {\n        return -1\n \
    \   }\n    if b >= a + c {\n        return -1\n    }\n    if c >= a + b {\n  \
    \      return -1\n    }\n    let area = (a * b + c * a - b * c) / (2.0 * a)\n\
    \    return Double(area.rounded(to: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b:\
    \ 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpifyt6dmq.swift:20:16: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    let area = (a * b + c * a - b * c) / (2.0 * a)\n      \
    \         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014812
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    var sum: Double = 0\n    sum += a\n  \
    \  sum += b\n    sum += c\n    if sum > c {\n        return -1\n    }\n    return\
    \ Double(sum) / Double(2.0 * c)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp5qxhlxa3.swift:12:12: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n    sum += a\n           ^\n           Double(\
    \ )\n/tmp/tmp5qxhlxa3.swift:13:12: error: cannot convert value of type 'Int' to\
    \ expected argument type 'Double'\n    sum += b\n           ^\n           Double(\
    \ )\n/tmp/tmp5qxhlxa3.swift:14:12: error: cannot convert value of type 'Int' to\
    \ expected argument type 'Double'\n    sum += c\n           ^\n           Double(\
    \ )\n/tmp/tmp5qxhlxa3.swift:15:12: error: binary operator '>' cannot be applied\
    \ to operands of type 'Double' and 'Int'\n    if sum > c {\n       ~~~ ^ ~\n/tmp/tmp5qxhlxa3.swift:15:12:\
    \ note: overloads for '>' exist with these partially matching parameter lists:\
    \ (Int, Int)\n    if sum > c {\n           ^\n/tmp/tmp5qxhlxa3.swift:18:37: error:\
    \ binary operator '*' cannot be applied to operands of type 'Double' and 'Int'\n\
    \    return Double(sum) / Double(2.0 * c)\n                                ~~~\
    \ ^ ~\n/tmp/tmp5qxhlxa3.swift:18:37: note: overloads for '*' exist with these\
    \ partially matching parameter lists: (Double, Double), (Int, Int)\n    return\
    \ Double(sum) / Double(2.0 * c)\n                                    ^\n"
  stdout: ''
  timestamp: 1660014765
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let side1 = abs(a) + abs(b) + abs(c)\n\
    \    let side2 = abs(a) + abs(b) - abs(c)\n    let side3 = abs(a) - abs(b) - abs(c)\n\
    \    let area: Double = side1 * side2 * side3\n    if area > 0 {\n        return\
    \ round(area, 2)\n    } else {\n        return -1\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpxomlyim7.swift:14:38: error: cannot convert value of type 'Int'\
    \ to specified type 'Double'\n    let area: Double = side1 * side2 * side3\n \
    \                      ~~~~~~~~~~~~~~^~~~~~~\n                       Double( \
    \             )\n/tmp/tmpxomlyim7.swift:16:16: error: cannot find 'round' in scope\n\
    \        return round(area, 2)\n               ^~~~~\n"
  stdout: ''
  timestamp: 1660014764
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let side1 = abs(a) + abs(b) + abs(c)\n\
    \    let side2 = abs(a) + abs(b) - abs(c)\n    let side3 = abs(a) - abs(b) - abs(c)\n\
    \    let area = Double(side1 + side2 + side3)\n    if area > 0 {\n        return\
    \ round(area, 2)\n    } else {\n        return -1\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpwwjli68x.swift:16:16: error: cannot find 'round' in scope\n   \
    \     return round(area, 2)\n               ^~~~~\n"
  stdout: ''
  timestamp: 1660014765
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let side1 = abs(a) + abs(b) + abs(c)\n\
    \    let side2 = abs(a) + abs(b) - abs(c)\n    let side3 = abs(a) - abs(b) - abs(c)\n\
    \    if side1 == side2 && side2 == side3 {\n        return Double(side1)\n   \
    \ }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpbr1d6a4l/tmpbr1d6a4l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade675e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade672d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade672d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade672d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbr1d6a4l                        0x00005606fb05a2bf <unavailable> + 4799

    5    libc.so.6                          0x00002ade677cd460 __libc_start_main +
    245

    6    tmpbr1d6a4l                        0x00005606fb059f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1660014764
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let side1 = abs(a) + abs(b) + abs(c)\n\
    \    let side2 = abs(a) + abs(b) - abs(c)\n    let side3 = abs(a) - abs(b) - abs(c)\n\
    \    if side1 == side2 && side2 == side3 {\n        return Double(side1)\n   \
    \ }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpbr1d6a4l/tmpbr1d6a4l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade675e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade672d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade672d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade672d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbr1d6a4l                        0x00005606fb05a2bf <unavailable> + 4799

    5    libc.so.6                          0x00002ade677cd460 __libc_start_main +
    245

    6    tmpbr1d6a4l                        0x00005606fb059f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1660014764
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    if a > b {\n        if b > c {\n     \
    \       return Double(a + b + c) / 2\n        } else {\n            return Double(a\
    \ + b) / 2\n        }\n    } else {\n        if c > b {\n            return Double(a\
    \ + c) / 2\n        } else {\n            return Double(a + b) / 2\n        }\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3, b:\
    \ 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmp27s6ooyg/tmp27s6ooyg.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafef1bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafeeeb1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafeeeb1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafeeeb07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp27s6ooyg                        0x000055d50ede61cf <unavailable> + 4559

    5    libc.so.6                          0x00002aafef3a6460 __libc_start_main +
    245

    6    tmp27s6ooyg                        0x000055d50ede5e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660014766
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let side1 = abs(a) + abs(b) + abs(c)\n\
    \    let side2 = abs(a) + abs(b) - abs(c)\n    let side3 = abs(a) - abs(b) - abs(c)\n\
    \    let area: Double = side1 * side2 * side3\n    if area > 0 {\n        return\
    \ round(area, 2)\n    } else {\n        return -1\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpxomlyim7.swift:14:38: error: cannot convert value of type 'Int'\
    \ to specified type 'Double'\n    let area: Double = side1 * side2 * side3\n \
    \                      ~~~~~~~~~~~~~~^~~~~~~\n                       Double( \
    \             )\n/tmp/tmpxomlyim7.swift:16:16: error: cannot find 'round' in scope\n\
    \        return round(area, 2)\n               ^~~~~\n"
  stdout: ''
  timestamp: 1660014764
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let a = Double(a)\n    let b = Double(b)\n\
    \    let c = Double(c)\n    if a + b > c {\n        return Double(a + b - c)\n\
    \    }\n    if a + c > b {\n        return Double(a + c - b)\n    }\n    if b\
    \ + c > a {\n        return Double(b + c - a)\n    }\n    return -1\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpbgsh51bz/tmpbgsh51bz.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5d5c51fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5d5c216b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5d5c216988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5d5c2157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbgsh51bz                        0x0000563bd7d7c21f <unavailable> + 4639

    5    libc.so.6                          0x00002b5d5c70b460 __libc_start_main +
    245

    6    tmpbgsh51bz                        0x0000563bd7d7beb9 <unavailable> + 3769

    '
  stdout: ''
  timestamp: 1660014766
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let a = abs(a)\n    let b = abs(b)\n \
    \   let c = abs(c)\n    if a + b > c {\n        return Double(a + b - c)\n   \
    \ } else {\n        return Double(-1 * a + b - c)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpe2chqt2q/tmpe2chqt2q.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafc8bfdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafc88f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafc88f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafc88f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe2chqt2q                        0x000055682a1122bf <unavailable> + 4799

    5    libc.so.6                          0x00002aafc8de9460 __libc_start_main +
    245

    6    tmpe2chqt2q                        0x000055682a111f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1660014764
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    if a > b {\n        return triangle_area(b,\
    \ a, c)\n    }\n    if a > c {\n        return triangle_area(c, a, b)\n    }\n\
    \    if b > c {\n        return triangle_area(b, c, a)\n    }\n    return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpdxnw3hv4.swift:12:29: error: missing argument labels 'a:b:c:' in\
    \ call\n        return triangle_area(b, a, c)\n                            ^\n\
    \                             a: b: c: \n/tmp/tmpdxnw3hv4.swift:15:29: error:\
    \ missing argument labels 'a:b:c:' in call\n        return triangle_area(c, a,\
    \ b)\n                            ^\n                             a: b: c: \n\
    /tmp/tmpdxnw3hv4.swift:18:29: error: missing argument labels 'a:b:c:' in call\n\
    \        return triangle_area(b, c, a)\n                            ^\n      \
    \                       a: b: c: \n"
  stdout: ''
  timestamp: 1660014765
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let a = abs(a)\n    let b = abs(b)\n \
    \   let c = abs(c)\n    if a + b > c {\n        return Double(a + b - c)\n   \
    \ }\n    if a + c > b {\n        return Double(a + c - b)\n    }\n    if b + c\
    \ > a {\n        return Double(b + c - a)\n    }\n    return Double(a + b + c)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmp4n7_4cwf/tmp4n7_4cwf.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeac4e2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeac4b21b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeac4b21988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeac4b207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4n7_4cwf                        0x000055ec2b4102bf <unavailable> + 4799

    5    libc.so.6                          0x00002aeac5016460 __libc_start_main +
    245

    6    tmp4n7_4cwf                        0x000055ec2b40ff59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1660014764
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    var sum: Double = 0\n    var sum2: Double\
    \ = 0\n    var sum3: Double = 0\n    var sum4: Double = 0\n    var sum5: Double\
    \ = 0\n    var sum6: Double = 0\n    var sum7: Double = 0\n    var sum8: Double\
    \ = 0\n    var sum9: Double = 0\n    var sum10: Double = 0\n    var sum11: Double\
    \ = 0\n    var sum12: Double = 0\n    var sum13: Double = 0\n    var sum14: Double\
    \ = 0\n    var sum15: Double = 0\n    var sum16: Double = 0\n    var sum17: Double\
    \ = 0\n    var sum18: Double = 0\n    var sum19: Double = 0\n    var sum20: Double\
    \ = 0\n    var sum21: Double = 0\n    var sum22: Double = 0\n    var sum23: Double\
    \ = 0\n    var sum24: Double = 0\n    var sum25: Double = 0\n    var sum26: Double\
    \ = 0\n    var sum27: Double = 0\n    var sum28: Double = 0\n    var sum29: Double\
    \ = 0\n    var sum30: Double = 0\n    var sum31: Double = 0\n    var sum32: Double\
    \ = 0\n    var sum33: Double = 0\n    var sum34: Double = 0\n    var sum35: Double\
    \ = 0\n    var sum36: Double = 0\n    var sum37: Double = 0\n    var sum38: Double\
    \ = 0\n    var sum39: Double = 0\n    var sum40: Double = 0\n    var sum41: Double\
    \ = 0\n    var sum42: Double = 0\n    var sum43: Double = 0\n    var sum44: Double\
    \ = 0\n    var sum45: Double = 0\n    var sum46: Double = 0\n    var sum47: Double\
    \ = 0\n    var sum48: Double = 0\n    var sum49: Double = 0\n    var sum50: Double\
    \ = 0\n    var sum51: Double = 0\n    var sum52: Double = 0\n    var sum53: Double\
    \ = 0\n    var sum54: Double = 0\n    var sum55: Double = 0\n    var sum56: Double\
    \ = 0\n    var sum57: Double = 0\n    var sum58: Double = 0\n    var sum59: Double\
    \ = 0\n    var sum60: Double = 0\n    var sum61: Double = 0\n    var sum62: Double\
    \ = 0\n    var sum63: Double = 0\n    var sum64: Double = 0\n    var sum65: Double\
    \ = 0\n    var sum66: Double = 0\n    var sum67: Double = 0\n    var sum68: Double\
    \ = 0\n    var sum69: Double = 0\n    var sum70: Double = 0\n    var sum71: Double\
    \ = 0\n    var sum72: Double = 0\n    var sum73: Double = 0\n    var sum74: Double\
    \ = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3, b:\
    \ 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp6tftq02q.swift:11:9: warning: variable 'sum' was never used; consider\
    \ replacing with '_' or removing it\n    var sum: Double = 0\n        ^~~\n  \
    \      _\n/tmp/tmp6tftq02q.swift:12:9: warning: variable 'sum2' was never used;\
    \ consider replacing with '_' or removing it\n    var sum2: Double = 0\n     \
    \   ^~~~\n        _\n/tmp/tmp6tftq02q.swift:13:9: warning: variable 'sum3' was\
    \ never used; consider replacing with '_' or removing it\n    var sum3: Double\
    \ = 0\n        ^~~~\n        _\n/tmp/tmp6tftq02q.swift:14:9: warning: variable\
    \ 'sum4' was never used; consider replacing with '_' or removing it\n    var sum4:\
    \ Double = 0\n        ^~~~\n        _\n/tmp/tmp6tftq02q.swift:15:9: warning: variable\
    \ 'sum5' was never used; consider replacing with '_' or removing it\n    var sum5:\
    \ Double = 0\n        ^~~~\n        _\n/tmp/tmp6tftq02q.swift:16:9: warning: variable\
    \ 'sum6' was never used; consider replacing with '_' or removing it\n    var sum6:\
    \ Double = 0\n        ^~~~\n        _\n/tmp/tmp6tftq02q.swift:17:9: warning: variable\
    \ 'sum7' was never used; consider replacing with '_' or removing it\n    var sum7:\
    \ Double = 0\n        ^~~~\n        _\n/tmp/tmp6tftq02q.swift:18:9: warning: variable\
    \ 'sum8' was never used; consider replacing with '_' or removing it\n    var sum8:\
    \ Double = 0\n        ^~~~\n        _\n/tmp/tmp6tftq02q.swift:19:9: warning: variable\
    \ 'sum9' was never used; consider replacing with '_' or removing it\n    var sum9:\
    \ Double = 0\n        ^~~~\n        _\n/tmp/tmp6tftq02q.swift:20:9: warning: variable\
    \ 'sum10' was never used; consider replacing with '_' or removing it\n    var\
    \ sum10: Double = 0\n        ^~~~~\n        _\n/tmp/tmp6tftq02q.swift:21:9: warning:\
    \ variable 'sum11' was never used; consider replacing with '_' or removing it\n\
    \    var sum11: Double = 0\n        ^~~~~\n        _\n/tmp/tmp6tftq02q.swift:22:9:\
    \ warning: variable 'sum12' was never used; consider replacing with '_' or removing\
    \ it\n    var sum12: Double = 0\n        ^~~~~\n        _\n/tmp/tmp6tftq02q.swift:23:9:\
    \ warning: variable 'sum13' was never used; consider replacing with '_' or removing"
  stdout: ''
  timestamp: 1660014764
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let sides = [a, b, c]\n    let sum = sides.reduce(0,\
    \ +)\n    if sum > sides.last {\n        return -1\n    }\n    return Double(sides.last)\
    \ * Double(sides.last) / Double(sides.count)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp99vcbg9m.swift:13:20: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    if sum > sides.last {\n         \
    \          ^\n/tmp/tmp99vcbg9m.swift:13:20: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n    if sum > sides.last {\n\
    \                   ^\n                        ?? <#default value#>\n/tmp/tmp99vcbg9m.swift:13:20:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    if sum > sides.last {\n                   ^\n                   \
    \    !\n/tmp/tmp99vcbg9m.swift:16:46: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return Double(sides.last) * Double(sides.last)\
    \ / Double(sides.count)\n                                             ^\n/tmp/tmp99vcbg9m.swift:16:46:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n    return Double(sides.last) * Double(sides.last) / Double(sides.count)\n\
    \                                             ^\n                            \
    \                      ?? <#default value#>\n/tmp/tmp99vcbg9m.swift:16:46: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \    return Double(sides.last) * Double(sides.last) / Double(sides.count)\n  \
    \                                           ^\n                              \
    \                   !\n/tmp/tmp99vcbg9m.swift:16:25: error: value of optional\
    \ type 'Int?' must be unwrapped to a value of type 'Int'\n    return Double(sides.last)\
    \ * Double(sides.last) / Double(sides.count)\n                        ^\n/tmp/tmp99vcbg9m.swift:16:25:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n    return Double(sides.last) * Double(sides.last) / Double(sides.count)\n\
    \                        ^\n                             ?? <#default value#>\n\
    /tmp/tmp99vcbg9m.swift:16:25: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n    return Double(sides.last) * Double(sides.last)\
    \ / Double(sides.count)\n           "
  stdout: ''
  timestamp: 1660014769
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    var sum: Double = 0\n    var a: Double\
    \ = a\n    var b: Double = b\n    var c: Double = c\n    if a + b > c {\n    \
    \    sum = a * b\n        a = c\n        b = sum\n        c = a\n    }\n    if\
    \ a + c > b {\n        sum = a * c\n        a = b\n        b = sum\n        c\
    \ = a\n    }\n    if b + c > a {\n        sum = b * c\n        a = b\n       \
    \ b = sum\n        c = a\n    }\n    return Double(sqrt(Double(a * a + b * b +\
    \ c * c)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp9xr246r9.swift:12:21: error: cannot convert value of type 'Int'\
    \ to specified type 'Double'\n    var a: Double = a\n                    ^\n \
    \                   Double( )\n/tmp/tmp9xr246r9.swift:13:21: error: cannot convert\
    \ value of type 'Int' to specified type 'Double'\n    var b: Double = b\n    \
    \                ^\n                    Double( )\n/tmp/tmp9xr246r9.swift:14:21:\
    \ error: cannot convert value of type 'Int' to specified type 'Double'\n    var\
    \ c: Double = c\n                    ^\n                    Double( )\n/tmp/tmp9xr246r9.swift:33:19:\
    \ error: cannot find 'sqrt' in scope\n    return Double(sqrt(Double(a * a + b\
    \ * b + c * c)))\n                  ^~~~\n"
  stdout: ''
  timestamp: 1660014766
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let a1 = b * b - 4 * a * c\n    let a2\
    \ = sqrt(a1)\n    let a3 = sqrt(a2)\n    let a4 = sqrt(a3)\n    let a5 = sqrt(a4)\n\
    \    let a6 = sqrt(a5)\n    let a7 = sqrt(a6)\n    let a8 = sqrt(a7)\n    let\
    \ a9 = sqrt(a8)\n    let a10 = sqrt(a9)\n    let a11 = sqrt(a10)\n    let a12\
    \ = sqrt(a11)\n    let a13 = sqrt(a12)\n    let a14 = sqrt(a13)\n    let a15 =\
    \ sqrt(a14)\n    let a16 = sqrt(a15)\n    let a17 = sqrt(a16)\n    let a18 = sqrt(a17)\n\
    \    let a19 = sqrt(a18)\n    let a20 = sqrt(a19)\n    let a21 = sqrt(a20)\n \
    \   let a22 = sqrt(a21)\n    let a23 = sqrt(a22)\n    let a24 = sqrt(a23)\n  \
    \  let a25 = sqrt(a24)\n    let a26 = sqrt(a25)\n    let a27 = sqrt(a26)\n   \
    \ let a28 = sqrt(a27)\n    let a29 = sqrt(a28)\n    let a30 = sqrt(a29)\n    let\
    \ a31 = sqrt(a30)\n    let a32 = sqrt(a31)\n    let a33 = sqrt(a32)\n    let a34\
    \ = sqrt(a33)\n    let a35 = sqrt(a34)\n    let a36 = sqrt(a35)\n    let a37 =\
    \ sqrt(a36)\n    let a38 = sqrt(a37)\n    let a39 = sqrt(a38)\n    let a40 = sqrt(a39)\n\
    \    let a41 = sqrt(a40)\n    let a42 = sqrt(a41)\n    let a43 = sqrt(a42)\n \
    \   let a44 = sqrt(a43) // sqrt(a44)\n    let a45 = sqrt(a44)\n    let a46 = sqrt(a45)\n\
    \    let a47 = sqrt(a46)\n    let a48 = sqrt(a47)\n    let a49 = sqrt(a48)\n \
    \   let a50 = sqrt(a49)\n    let a51 = sqrt(a50)\n    let a52 = sqrt(a51)\n  \
    \  let a53 = sqrt(a52)\n    let a54 = sqrt(a53)\n    let a55 = sqrt(a54)\n   \
    \ let a56 = sqrt(a55)\n    let a57 = sqrt(a56)\n    let a58 = sqrt(a57)\n    let\
    \ a59 = sqrt(a58)\n    let a60 = sqrt(a59)\n    let a61 = sqrt(a60)\n    let a62\
    \ = sqrt(a61)\n    let a63 = sqrt(a62)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b:\
    \ 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpokl5_cp5.swift:12:14: error: cannot find 'sqrt' in scope\n    let\
    \ a2 = sqrt(a1)\n             ^~~~\n/tmp/tmpokl5_cp5.swift:13:14: error: cannot\
    \ find 'sqrt' in scope\n    let a3 = sqrt(a2)\n             ^~~~\n/tmp/tmpokl5_cp5.swift:14:14:\
    \ error: cannot find 'sqrt' in scope\n    let a4 = sqrt(a3)\n             ^~~~\n\
    /tmp/tmpokl5_cp5.swift:15:14: error: cannot find 'sqrt' in scope\n    let a5 =\
    \ sqrt(a4)\n             ^~~~\n/tmp/tmpokl5_cp5.swift:16:14: error: cannot find\
    \ 'sqrt' in scope\n    let a6 = sqrt(a5)\n             ^~~~\n/tmp/tmpokl5_cp5.swift:17:14:\
    \ error: cannot find 'sqrt' in scope\n    let a7 = sqrt(a6)\n             ^~~~\n\
    /tmp/tmpokl5_cp5.swift:18:14: error: cannot find 'sqrt' in scope\n    let a8 =\
    \ sqrt(a7)\n             ^~~~\n/tmp/tmpokl5_cp5.swift:19:14: error: cannot find\
    \ 'sqrt' in scope\n    let a9 = sqrt(a8)\n             ^~~~\n/tmp/tmpokl5_cp5.swift:20:15:\
    \ error: cannot find 'sqrt' in scope\n    let a10 = sqrt(a9)\n              ^~~~\n\
    /tmp/tmpokl5_cp5.swift:21:15: error: cannot find 'sqrt' in scope\n    let a11\
    \ = sqrt(a10)\n              ^~~~\n/tmp/tmpokl5_cp5.swift:22:15: error: cannot\
    \ find 'sqrt' in scope\n    let a12 = sqrt(a11)\n              ^~~~\n/tmp/tmpokl5_cp5.swift:23:15:\
    \ error: cannot find 'sqrt' in scope\n    let a13 = sqrt(a12)\n              ^~~~\n\
    /tmp/tmpokl5_cp5.swift:24:15: error: cannot find 'sqrt' in scope\n    let a14\
    \ = sqrt(a13)\n              ^~~~\n/tmp/tmpokl5_cp5.swift:25:15: error: cannot\
    \ find 'sqrt' in scope\n    let a15 = sqrt(a14)\n              ^~~~\n/tmp/tmpokl5_cp5.swift:26:15:\
    \ error: cannot find 'sqrt' in scope\n    let a16 = sqrt(a15)\n              ^~~~\n\
    /tmp/tmpokl5_cp5.swift:27:15: error: cannot find 'sqrt' in scope\n    let a17\
    \ = sqrt(a16)\n              ^~~~\n/tmp/tmpokl5_cp5.swift:28:15: error: cannot\
    \ find 'sqrt' in scope\n    let a18 = sqrt(a17)\n              ^~~~\n/tmp/tmpokl5_cp5.swift:29:15:\
    \ error: cannot find 'sqrt' in scope\n    let a19 = sqrt(a18)\n              ^~~~\n\
    /tmp/tmpokl5_cp5.swift:30:15: error: cannot find 'sqrt' in scope\n    let a20\
    \ = sqrt(a19)\n              ^~~~\n/tmp/tmpokl5_cp5.swif"
  stdout: ''
  timestamp: 1660014766
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    if a > b {\n        if b > c {\n     \
    \       return b * b * c / 6\n        } else {\n            return -1\n      \
    \  }\n    } else {\n        if c > b {\n            return -1\n        } else\
    \ {\n            return a * b * c / 6\n        }\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpcs888nb4.swift:13:30: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n            return b * b * c / 6\n     \
    \              ~~~~~~~~~~^~~\n                   Double(      )\n/tmp/tmpcs888nb4.swift:21:30:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \            return a * b * c / 6\n                   ~~~~~~~~~~^~~\n        \
    \           Double(      )\n"
  stdout: ''
  timestamp: 1660014766
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let a = abs(a)\n    let b = abs(b)\n \
    \   let c = abs(c)\n    if a + b > c {\n        return Double(a + b - c)\n   \
    \ } else {\n        return Double(a + b + c - a)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpajx8sh6i/tmpajx8sh6i.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff84f1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff84c14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff84c14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff84c137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpajx8sh6i                        0x000055a08f1b92bf <unavailable> + 4799

    5    libc.so.6                          0x00002aff85109460 __libc_start_main +
    245

    6    tmpajx8sh6i                        0x000055a08f1b8f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1660014764
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    if a > b {\n        return triangle_area(b,\
    \ a, c)\n    }\n    if b > c {\n        return triangle_area(a, c, b)\n    }\n\
    \    if a + b > c {\n        return triangle_area(a, b, c)\n    }\n    return\
    \ Double(sqrt(Double(a * b * c) / Double(a + b + c)))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpbnj6e_47.swift:12:29: error: missing argument labels 'a:b:c:' in\
    \ call\n        return triangle_area(b, a, c)\n                            ^\n\
    \                             a: b: c: \n/tmp/tmpbnj6e_47.swift:15:29: error:\
    \ missing argument labels 'a:b:c:' in call\n        return triangle_area(a, c,\
    \ b)\n                            ^\n                             a: b: c: \n\
    /tmp/tmpbnj6e_47.swift:18:29: error: missing argument labels 'a:b:c:' in call\n\
    \        return triangle_area(a, b, c)\n                            ^\n      \
    \                       a: b: c: \n/tmp/tmpbnj6e_47.swift:20:19: error: cannot\
    \ find 'sqrt' in scope\n    return Double(sqrt(Double(a * b * c) / Double(a +\
    \ b + c)))\n                  ^~~~\n"
  stdout: ''
  timestamp: 1660014766
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let a1 = b * b - 4 * a * c\n    let a2\
    \ = sqrt(a1)\n    let a3 = sqrt(a2)\n    let a4 = sqrt(a3)\n    if a4 < 0 {\n\
    \        return -1\n    }\n    return Double(a1 + a2 + a3)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpfku1slu6.swift:12:14: error: cannot find 'sqrt' in scope\n    let\
    \ a2 = sqrt(a1)\n             ^~~~\n/tmp/tmpfku1slu6.swift:13:14: error: cannot\
    \ find 'sqrt' in scope\n    let a3 = sqrt(a2)\n             ^~~~\n/tmp/tmpfku1slu6.swift:14:14:\
    \ error: cannot find 'sqrt' in scope\n    let a4 = sqrt(a3)\n             ^~~~\n"
  stdout: ''
  timestamp: 1660014766
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    var area: Double = 0\n    if a + b > c\
    \ {\n        area = Double(a / b) * Double(c / b)\n    } else {\n        area\
    \ = Double(c / a) * Double(b / a)\n    }\n    return area\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpdb2py2si/tmpdb2py2si.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aac15cc8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aac159bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aac159bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aac159be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdb2py2si                        0x00005595269b825f <unavailable> + 4703

    5    libc.so.6                          0x00002aac15eb4460 __libc_start_main +
    245

    6    tmpdb2py2si                        0x00005595269b7ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660014766
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let side1 = abs(a) + abs(b) + abs(c)\n\
    \    let side2 = abs(a) + abs(b) - abs(c)\n    let side3 = abs(a) - abs(b) + abs(c)\n\
    \    let side4 = abs(a) - abs(b) - abs(c)\n    let side5 = abs(a) + abs(b) - abs(c)\n\
    \    let side6 = abs(a) - abs(b) + abs(c)\n    let side7 = abs(a) + abs(b) + abs(c)\n\
    \    let side8 = abs(a) - abs(b) - abs(c)\n    let side9 = abs(a) - abs(b) + abs(c)\n\
    \    let side10 = abs(a) - abs(b) - abs(c)\n    let side11 = abs(a) + abs(b) +\
    \ abs(c)\n    let side12 = abs(a) - abs(b) + abs(c)\n    let side13 = abs(a) -\
    \ abs(b) - abs(c)\n    let side14 = abs(a) + abs(b) - abs(c)\n    let side15 =\
    \ abs(a) - abs(b) + abs(c)\n    let side16 = abs(a) - abs(b) - abs(c)\n    let\
    \ side17 = abs(a) + abs(b) + abs(c)\n    let side18 = abs(a) - abs(b) + abs(c)\n\
    \    let side19 = abs(a) - abs(b) - abs(c)\n    let side20 = abs(a) + abs(b) -\
    \ abs(c)\n    let side21 = abs(a) - abs(b) + abs(c)\n    let side22 = abs(a) -\
    \ abs(b) - abs(c)\n    let side23 = abs(a) + abs(b) - abs(c)\n    let side24 =\
    \ abs(a) - abs(b) + abs(c)\n    let side25 = abs(a) - abs(b) - abs(c)\n    let\
    \ side26 = abs(a) + abs(b) + abs(c)\n    let side27 = abs(a) - abs(b) + abs(c)\n\
    \    let side28 = abs(a) - abs(b) - abs(c)\n    let side29 = abs(a) + abs(b) +\
    \ abs(c)\n    let side30 = abs(a) - abs(b) + abs(c)\n    let side31 = abs(a) -\
    \ abs(b) - abs(c)\n    let side32 = abs(a) + abs(b) + abs(c)\n    let side33 =\
    \ abs(a) - abs(b) + abs(c)\n    let side34 = abs(a) - abs(b) - abs(c)\n    let\
    \ side35 = abs(a) + abs(b) + abs(c)\n    let side36 = abs(a) - abs(b) + abs(c)\n\
    \    let side37 = abs(a) - abs(b) - abs(c)\n    let side38 = abs(a) + abs(b) +\
    \ abs(c)\n    let side39 = abs(a) - abs(b) + abs(c)\n    let side40 = abs(a) -\
    \ abs(b) - abs(c)\n    let side41 = \n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b:\
    \ 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpted86fz9.swift:51:17: error: expected initial value after '='\n\
    \    let side41 = \n                ^\n"
  stdout: ''
  timestamp: 1660014766
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let a = abs(a)\n    let b = abs(b)\n \
    \   let c = abs(c)\n    if a + b > c {\n        return Double(a + b - c) / 2\n\
    \    }\n    if a + c > b {\n        return Double(a + c - b) / 2\n    }\n    if\
    \ b + c > a {\n        return Double(b + c - a) / 2\n    }\n    return -1\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpo4q7xsyt/tmpo4q7xsyt.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b85b8f02c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b85b8bf9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b85b8bf9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b85b8bf87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo4q7xsyt                        0x0000556ae87d52bf <unavailable> + 4799

    5    libc.so.6                          0x00002b85b90ee460 __libc_start_main +
    245

    6    tmpo4q7xsyt                        0x0000556ae87d4f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1660014765
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let side1 = abs(a) + abs(b) + abs(c)\n\
    \    let side2 = abs(a) + abs(b) - abs(c)\n    let side3 = abs(a) - abs(b) - abs(c)\n\
    \    let area = side1 + side2 + side3\n    if area > 0 {\n        return Double(area)\
    \ / 3\n    } else {\n        return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpmqp2clf6/tmpmqp2clf6.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3c9854ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3c98241b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3c98241988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3c982407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmqp2clf6                        0x000056273abe92bf <unavailable> + 4799

    5    libc.so.6                          0x00002b3c98736460 __libc_start_main +
    245

    6    tmpmqp2clf6                        0x000056273abe8f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1660014766
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3 = sqrt(pow(c, 2) +\
    \ pow(a, 2))\n    let area = side1 + side2 + side3\n    if area > 0 {\n      \
    \  return round(area * 100) / 100\n    } else {\n        return -1\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmplms3f2_g.swift:11:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmplms3f2_g.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmplms3f2_g.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmplms3f2_g.swift:12:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmplms3f2_g.swift:12:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmplms3f2_g.swift:12:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmplms3f2_g.swift:13:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmplms3f2_g.swift:13:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmplms3f2_g.swift:13:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmplms3f2_g.swift:16:16: error: cannot find 'round' in\
    \ scope\n        return round(area * 100) / 100\n               ^~~~~\n"
  stdout: ''
  timestamp: 1660014766
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3 = sqrt(pow(c, 2) +\
    \ pow(a, 2))\n    if side1 + side2 > side3 {\n        return round(side1 + side2\
    \ - side3)\n    } else {\n        return -1\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp1vrlut0t.swift:11:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmp1vrlut0t.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmp1vrlut0t.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmp1vrlut0t.swift:12:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmp1vrlut0t.swift:12:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmp1vrlut0t.swift:12:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmp1vrlut0t.swift:13:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmp1vrlut0t.swift:13:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmp1vrlut0t.swift:13:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmp1vrlut0t.swift:15:16: error: cannot find 'round' in\
    \ scope\n        return round(side1 + side2 - side3)\n               ^~~~~\n"
  stdout: ''
  timestamp: 1660014766
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let a1 = b * b - 4 * a * c\n    let a2\
    \ = Math.sqrt(a1)\n    let a3 = -b + Math.sqrt(a1)\n    let a4 = -b - Math.sqrt(a1)\n\
    \    let a5 = Math.sqrt(a3)\n    let a6 = Math.sqrt(a4)\n    let a7 = Math.sqrt(a5)\n\
    \    let a8 = Math.sqrt(a6)\n    let a9 = Math.sqrt(a7)\n    let a10 = Math.sqrt(a8)\n\
    \    let a11 = Math.sqrt(a9)\n    let a12 = Math.sqrt(a10)\n    let a13 = Math.sqrt(a11)\n\
    \    let a14 = Math.sqrt(a12)\n    let a15 = Math.sqrt(a13)\n    let a16 = Math.sqrt(a14)\n\
    \    let a17 = Math.sqrt(a15)\n    let a18 = Math.sqrt(a16)\n    let a19 = Math.sqrt(a17)\n\
    \    let a20 = Math.sqrt(a18)\n    let a21 = Math.sqrt(a19)\n    let a22 = Math.sqrt(a20)\n\
    \    let a23 = Math.sqrt(a21)\n    let a24 = Math.sqrt(a22)\n    let a25 = Math.sqrt(a23)\n\
    \    let a26 = Math.sqrt(a24)\n    let a27 = Math.sqrt(a25)\n    let a28 = Math.sqrt(a26)\n\
    \    let a29 = Math.sqrt(a27)\n    let a30 = Math.sqrt(a28)\n    let a31 = Math.sqrt(a29)\n\
    \    let a32 = Math.sqrt(a30)\n    let a33 = Math.sqrt(a31)\n    let a34 = Math.sqrt(a32)\n\
    \    let a35 = Math.sqrt(a33)\n    let a36 = Math.sqrt(a34)\n    let a37 = Math.sqrt(a35)\n\
    \    let a38 = Math.sqrt(a36)\n    let a39 = Math.sqrt(a37)\n    let a40 = Math.sqrt(a38)\n\
    \    let a41 = Math.sqrt(a39)\n    let a42 = Math.sqrt(a40)\n    let a43 = Math.sqrt(a41)\n\
    \    let a44 = Math.sqrt(a42)\n    let a45 = Math.sqrt(a44)\n    let a46 = Math.sqrt(a45)\n\
    \    let a47 = Math.sqrt(a46)\n    let a48 = Math.sqrt(a47)\n    let a49 = Math.sqrt(a48)\n\
    \    let a50 = Math.sqrt(a49)\n    let a51 = Math.sqrt(a50)\n    let a52 = Math.sqrt(a51)\n\
    \    let a53 = Math.sqrt(a52)\n    let a54 = Math.sqrt(a53)\n    let a55 = Math.sqrt(a54)\n\
    \    let a56 = Math.sqrt(a55)\n    let a57 = Math.sqrt(a56)\n    let a58 = Math.sqrt(a57)\n\
    \    let a59 = Math.sqrt(a58)\n    let a60 = Math.sqrt(a59)\n    let a61 = \n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp1udfycvn.swift:71:14: error: expected initial value after '='\n\
    \    let a61 = \n             ^\n/tmp/tmp1udfycvn.swift:12:14: error: cannot find\
    \ 'Math' in scope\n    let a2 = Math.sqrt(a1)\n             ^~~~\n/tmp/tmp1udfycvn.swift:13:19:\
    \ error: cannot find 'Math' in scope\n    let a3 = -b + Math.sqrt(a1)\n      \
    \            ^~~~\n/tmp/tmp1udfycvn.swift:14:19: error: cannot find 'Math' in\
    \ scope\n    let a4 = -b - Math.sqrt(a1)\n                  ^~~~\n/tmp/tmp1udfycvn.swift:15:14:\
    \ error: cannot find 'Math' in scope\n    let a5 = Math.sqrt(a3)\n           \
    \  ^~~~\n/tmp/tmp1udfycvn.swift:16:14: error: cannot find 'Math' in scope\n  \
    \  let a6 = Math.sqrt(a4)\n             ^~~~\n/tmp/tmp1udfycvn.swift:17:14: error:\
    \ cannot find 'Math' in scope\n    let a7 = Math.sqrt(a5)\n             ^~~~\n\
    /tmp/tmp1udfycvn.swift:18:14: error: cannot find 'Math' in scope\n    let a8 =\
    \ Math.sqrt(a6)\n             ^~~~\n/tmp/tmp1udfycvn.swift:19:14: error: cannot\
    \ find 'Math' in scope\n    let a9 = Math.sqrt(a7)\n             ^~~~\n/tmp/tmp1udfycvn.swift:20:15:\
    \ error: cannot find 'Math' in scope\n    let a10 = Math.sqrt(a8)\n          \
    \    ^~~~\n/tmp/tmp1udfycvn.swift:21:15: error: cannot find 'Math' in scope\n\
    \    let a11 = Math.sqrt(a9)\n              ^~~~\n/tmp/tmp1udfycvn.swift:22:15:\
    \ error: cannot find 'Math' in scope\n    let a12 = Math.sqrt(a10)\n         \
    \     ^~~~\n/tmp/tmp1udfycvn.swift:23:15: error: cannot find 'Math' in scope\n\
    \    let a13 = Math.sqrt(a11)\n              ^~~~\n/tmp/tmp1udfycvn.swift:24:15:\
    \ error: cannot find 'Math' in scope\n    let a14 = Math.sqrt(a12)\n         \
    \     ^~~~\n/tmp/tmp1udfycvn.swift:25:15: error: cannot find 'Math' in scope\n\
    \    let a15 = Math.sqrt(a13)\n              ^~~~\n/tmp/tmp1udfycvn.swift:26:15:\
    \ error: cannot find 'Math' in scope\n    let a16 = Math.sqrt(a14)\n         \
    \     ^~~~\n/tmp/tmp1udfycvn.swift:27:15: error: cannot find 'Math' in scope\n\
    \    let a17 = Math.sqrt(a15)\n              ^~~~\n/tmp/tmp1udfycvn.swift:28:15:\
    \ error: cannot find 'Math' in scope\n    let a18 = Math.sqrt(a16)\n         \
    \     ^~~~\n/tmp/tmp1udfycvn.swift:29:15: err"
  stdout: ''
  timestamp: 1660014766
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let a = abs(a)\n    let b = abs(b)\n \
    \   let c = abs(c)\n    if a + b > c {\n        return Double(a + b - c)\n   \
    \ }\n    if a + c > b {\n        return Double(a + c - b)\n    }\n    if b + c\
    \ > a {\n        return Double(b + c - a)\n    }\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpx6vu8r70/tmpx6vu8r70.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba8ca0b1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba8c9da8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba8c9da8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8c9da77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx6vu8r70                        0x00005647ace492bf <unavailable> + 4799

    5    libc.so.6                          0x00002ba8ca29d460 __libc_start_main +
    245

    6    tmpx6vu8r70                        0x00005647ace48f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1660014765
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3 = sqrt(pow(c, 2) +\
    \ pow(a, 2))\n    let area = (side1 + side2 + side3) / 2.0\n    if area > 0 {\n\
    \        return round(area * 100) / 100\n    } else {\n        return -1\n   \
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(triangle_area(a: 3, b: 4, c:\
    \ 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp0u0l7n4v.swift:11:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmp0u0l7n4v.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmp0u0l7n4v.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmp0u0l7n4v.swift:12:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmp0u0l7n4v.swift:12:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmp0u0l7n4v.swift:12:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmp0u0l7n4v.swift:13:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmp0u0l7n4v.swift:13:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmp0u0l7n4v.swift:13:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmp0u0l7n4v.swift:16:16: error: cannot find 'round' in\
    \ scope\n        return round(area * 100) / 100\n               ^~~~~\n"
  stdout: ''
  timestamp: 1660014765
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let a1 = b * b - 4 * a * c\n    let a2\
    \ = sqrt(a1)\n    let a3 = sqrt(a2)\n    let a4 = b * b + 4 * a * c\n    let a5\
    \ = sqrt(a4)\n    let a6 = a * b + 4 * a * c\n    let a7 = a * b - 4 * a * c\n\
    \    let a8 = sqrt(a7)\n    let a9 = a * b - 4 * a * c\n    let a10 = a * b +\
    \ 4 * a * c\n    let a11 = a * b + 4 * a * c\n    let a12 = a * b - 4 * a * c\n\
    \    let a13 = a * b + 4 * a * c\n    let a14 = a * b + 4 * a * c\n    let a15\
    \ = a * b - 4 * a * c\n    let a16 = a * b + 4 * a * c\n    let a17 = a * b +\
    \ 4 * a * c\n    let a18 = a * b - 4 * a * c\n    let a19 = a * b + 4 * a * c\n\
    \    let a20 = a * b + 4 * a * c\n    let a21 = a * b - 4 * a * c\n    let a22\
    \ = a * b + 4 * a * c\n    let a23 = a * b + 4 * a * c\n    let a24 = a * b -\
    \ 4 * a * c\n    let a25 = a * b + 4 * a * c\n    let a26 = a * b + 4 * a * c\n\
    \    let a27 = a * b - 4 * a * c\n    let a28 = a * b + 4 * a * c\n    let a29\
    \ = a * b + 4 * a * c\n    let a30 = a * b - 4 * a * c\n    let a31 = a * b +\
    \ 4 * a * c\n    let a32 = a * b + 4 * a * c\n    let a33 = a * b - 4 * a * c\n\
    \    let a34 = a * b + 4 * a * c\n    let a35 = a * b + 4 * a * c\n    let a36\
    \ = a * b - 4 * a * c\n    let a37 = a * b + 4 * a * c\n    let a38 = a * b +\
    \ 4 * a * c\n    let a39 = a * b - 4 * a * c\n    let a40 = a * b + 4 * a * c\n\
    \    let a41 = a * b + 4 * a * c\n    let a42 = a * b - 4 * a * c\n    let a43\
    \ = a * b + 4 * a * c\n    let a44 = a * b + 4 * a * c\n    let a45 = a * b -\
    \ 4 * a * c\n    let a46 = a * b + 4 * a * c\n    let a47 = a * b + 4 * a * c\n\
    \    let a48 = a * b - 4 * a * c\n    let a49 = a * b\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpd71ngy4z.swift:12:14: error: cannot find 'sqrt' in scope\n    let\
    \ a2 = sqrt(a1)\n             ^~~~\n/tmp/tmpd71ngy4z.swift:13:14: error: cannot\
    \ find 'sqrt' in scope\n    let a3 = sqrt(a2)\n             ^~~~\n/tmp/tmpd71ngy4z.swift:15:14:\
    \ error: cannot find 'sqrt' in scope\n    let a5 = sqrt(a4)\n             ^~~~\n\
    /tmp/tmpd71ngy4z.swift:18:14: error: cannot find 'sqrt' in scope\n    let a8 =\
    \ sqrt(a7)\n             ^~~~\n"
  stdout: ''
  timestamp: 1660014766
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let a = abs(a)\n    let b = abs(b)\n \
    \   let c = abs(c)\n    if a + b > c {\n        return -1\n    }\n    if a + c\
    \ > b {\n        return -1\n    }\n    if b + c > a {\n        return -1\n   \
    \ }\n    return Double(sqrt(pow(a, 2) + pow(b, 2) + pow(c, 2)))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpe_i9yf6c.swift:23:19: error: cannot find 'sqrt' in scope\n    return\
    \ Double(sqrt(pow(a, 2) + pow(b, 2) + pow(c, 2)))\n                  ^~~~\n/tmp/tmpe_i9yf6c.swift:23:24:\
    \ error: cannot find 'pow' in scope\n    return Double(sqrt(pow(a, 2) + pow(b,\
    \ 2) + pow(c, 2)))\n                       ^~~\n/tmp/tmpe_i9yf6c.swift:23:36:\
    \ error: cannot find 'pow' in scope\n    return Double(sqrt(pow(a, 2) + pow(b,\
    \ 2) + pow(c, 2)))\n                                   ^~~\n/tmp/tmpe_i9yf6c.swift:23:48:\
    \ error: cannot find 'pow' in scope\n    return Double(sqrt(pow(a, 2) + pow(b,\
    \ 2) + pow(c, 2)))\n                                               ^~~\n"
  stdout: ''
  timestamp: 1660014769
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    if a + b > c {\n        return Double(-1)\
    \ / Double(Double(a + b - c))\n    }\n    if a + c > b {\n        return Double(-1)\
    \ / Double(Double(a + c - b))\n    }\n    if b + c > a {\n        return Double(-1)\
    \ / Double(Double(b + c - a))\n    }\n    return Double(a + b + c) / Double(Double(a\
    \ + b + c) + Double(b + c + a))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmprvpy53nr/tmprvpy53nr.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad21942cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad219123b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad219123988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad2191227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprvpy53nr                        0x00005563ecb0521f <unavailable> + 4639

    5    libc.so.6                          0x00002ad219618460 __libc_start_main +
    245

    6    tmprvpy53nr                        0x00005563ecb04eb9 <unavailable> + 3769

    '
  stdout: ''
  timestamp: 1660014766
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3 = sqrt(pow(c, 2) +\
    \ pow(a, 2))\n    let area: Double = side1 + side2 + side3\n    if area > 0 {\n\
    \        return round(area * 100) / 100\n    } else {\n        return -1\n   \
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(triangle_area(a: 3, b: 4, c:\
    \ 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpyrbe97n6.swift:11:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmpyrbe97n6.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmpyrbe97n6.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmpyrbe97n6.swift:12:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmpyrbe97n6.swift:12:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmpyrbe97n6.swift:12:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmpyrbe97n6.swift:13:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmpyrbe97n6.swift:13:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmpyrbe97n6.swift:13:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmpyrbe97n6.swift:14:38: error: cannot convert value of\
    \ type 'String' to specified type 'Double'\n    let area: Double = side1 + side2\
    \ + side3\n                       ~~~~~~~~~~~~~~^~~~~~~\n/tmp/tmpyrbe97n6.swift:16:16:\
    \ error: cannot find 'round' in scope\n        return round(area * 100) / 100\n\
    \               ^~~~~\n"
  stdout: ''
  timestamp: 1660014764
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let a = abs(a)\n    let b = abs(b)\n \
    \   let c = abs(c)\n    if a + b > c {\n        return Double(a + b - c)\n   \
    \ }\n    if a + c > b {\n        return Double(a + c - b)\n    }\n    if b + c\
    \ > a {\n        return Double(b + c - a)\n    }\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpx6vu8r70/tmpx6vu8r70.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba8ca0b1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba8c9da8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba8c9da8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8c9da77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx6vu8r70                        0x00005647ace492bf <unavailable> + 4799

    5    libc.so.6                          0x00002ba8ca29d460 __libc_start_main +
    245

    6    tmpx6vu8r70                        0x00005647ace48f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1660014765
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let side1 = abs(a) + abs(b) + abs(c)\n\
    \    let side2 = abs(a) + abs(b) - abs(c)\n    let side3 = abs(a) - abs(b) - abs(c)\n\
    \    if side1 > side2 && side1 > side3 {\n        return Double(round(side1 *\
    \ 100) / 100)\n    } else if side2 > side3 {\n        return Double(round(side2\
    \ * 100) / 100)\n    } else {\n        return Double(round(side3 * 100) / 100)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3, b:\
    \ 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpqt5cwo86.swift:15:23: error: cannot find 'round' in scope\n   \
    \     return Double(round(side1 * 100) / 100)\n                      ^~~~~\n/tmp/tmpqt5cwo86.swift:17:23:\
    \ error: cannot find 'round' in scope\n        return Double(round(side2 * 100)\
    \ / 100)\n                      ^~~~~\n/tmp/tmpqt5cwo86.swift:19:23: error: cannot\
    \ find 'round' in scope\n        return Double(round(side3 * 100) / 100)\n   \
    \                   ^~~~~\n"
  stdout: ''
  timestamp: 1660014766
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3 = sqrt(pow(c, 2) +\
    \ pow(a, 2))\n    let area: Double = side1 + side2 + side3\n    if area > 0 {\n\
    \        return round(area, 2)\n    } else {\n        return -1\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp0ihi1cf9.swift:11:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmp0ihi1cf9.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmp0ihi1cf9.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmp0ihi1cf9.swift:12:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmp0ihi1cf9.swift:12:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmp0ihi1cf9.swift:12:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmp0ihi1cf9.swift:13:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmp0ihi1cf9.swift:13:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmp0ihi1cf9.swift:13:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmp0ihi1cf9.swift:14:38: error: cannot convert value of\
    \ type 'String' to specified type 'Double'\n    let area: Double = side1 + side2\
    \ + side3\n                       ~~~~~~~~~~~~~~^~~~~~~\n/tmp/tmp0ihi1cf9.swift:16:16:\
    \ error: cannot find 'round' in scope\n        return round(area, 2)\n       \
    \        ^~~~~\n"
  stdout: ''
  timestamp: 1660014764
