name: HumanEval_93_encode
language: swift
prompt: "\n/// Write a function that takes a message, and encodes in such a \n///\
  \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
  \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
  \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
  /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc encode(message:\
  \ String) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\n\
  assert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\"\
  ) == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\"\
  )\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq\
  \ wRkTg\")"
completions: ["    var result = \"\"\n    for letter in message {\n        switch\
    \ letter {\n        case \"a\":\n            result = \"t\"\n        case \"e\"\
    :\n            result = \"h\"\n        case \"i\":\n            result = \"k\"\
    \n        case \"o\":\n            result = \"g\"\n        case \"u\":\n     \
    \       result = \"s\"\n        case \"A\":\n            result = \"T\"\n    \
    \    case \"E\":\n            result = \"H\"\n        case \"I\":\n          \
    \  result = \"K\"\n        case \"O\":\n            result = \"G\"\n        case\
    \ \"U\":\n            result = \"S\"\n        default:\n            result = letter\n\
    \        }\n    }\n    return result", "    var result = \"\"\n    for letter\
    \ in message {\n        if letter.isUpper() {\n            result += letter.lowercased()\n\
    \        } else {\n            result += letter.uppercased()\n        }\n    }\n\
    \    for letter in result {\n        if letter.isUpper() {\n            result\
    \ += letter.lowercased()\n        } else {\n            result += letter.uppercased()\n\
    \        }\n    }\n    return result", "    var result = \"\"\n    for letter\
    \ in message {\n        let index = alphabet.index(of: letter)!\n        let replacement\
    \ = alphabet[index + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ vowel, with: replacement)\n    }\n    return result", "    var result = \"\"\
    \n    for char in message {\n        let index = english.index(of: char)\n   \
    \     let replacement = english[(index! + 2)%26]\n        result += String(char).replacingOccurrences(of:\
    \ char, with: replacement)\n    }\n    return result", "    var result = \"\"\n\
    \    for letter in message {\n        switch letter {\n        case \"a\":\n \
    \       case \"e\":\n        case \"i\":\n        case \"o\":\n        case \"\
    u\":\n            result += letter\n        default:\n            result += letter\n\
    \            result += letter.lowercased\n        }\n    }\n    return result",
  "    var result = \"\"\n    for letter in message {\n        let index = alphabet.index(of:\
    \ letter)!\n        let replacement = alphabet[index + 2]\n        result += String(letter).replacingOccurrences(of:\
    \ \"A\", with: replacement)\n    }\n    return result", "    var result = \"\"\
    \n    for letter in message {\n        switch letter {\n        case \"a\":\n\
    \            result = \"t\"\n        case \"e\":\n            result = \"h\"\n\
    \        case \"i\":\n            result = \"k\"\n        case \"o\":\n      \
    \      result = \"g\"\n        case \"u\":\n            result = \"s\"\n     \
    \   case \"A\":\n            result = \"T\"\n        case \"E\":\n           \
    \ result = \"H\"\n        case \"I\":\n            result = \"K\"\n        case\
    \ \"O\":\n            result = \"G\"\n        case \"U\":\n            result\
    \ = \"S\"\n        default:\n            result = letter\n        }\n    }\n \
    \   return result", "    var result = \"\"\n    for letter in message {\n    \
    \    let index = alphabet.index(of: letter)\n        if index == nil {\n     \
    \       return \"\"\n        }\n        let nextLetter = alphabet[index! + 1]\n\
    \        let index = alphabet.index(of: nextLetter)\n        if index == nil {\n\
    \            return \"\"\n        }\n        let nextVowel = alphabet[index! +\
    \ 1]\n        let index = alphabet.index(of: nextVowel)\n        if index == nil\
    \ {\n            return \"\"\n        }\n        let nextVowel = alphabet[index!\
    \ + 1]\n        let index = alphabet.index(of: nextVowel)\n        if index ==\
    \ nil {\n            return \"\"\n        }\n        let nextVowel = alphabet[index!\
    \ + 1]\n        let index = alphabet.index(of: nextVowel)\n        if index ==\
    \ nil {\n            return \"\"\n        }\n        let nextVowel = alphabet[index!\
    \ + 1]\n        let index = alphabet.index(of: nextVowel)\n        if index ==\
    \ nil {\n            return \"\"\n        }\n        let nextVowel = alphabet[index!\
    \ + 1]\n        let index = alphabet.index(of: nextVowel)\n        if index ==\
    \ nil {\n            return \"\"\n        }\n        let nextVowel = alphabet[index!\
    \ + 1]\n        let index = alphabet.index(of: nextVowel)\n        if index ==\
    \ nil {\n            return \"\"\n        }\n        let nextVowel = alphabet[index!\
    \ + 1]\n        let index = alphabet.index(of: nextVowel)\n        if index ==\
    \ nil {\n            return \"\"\n        }\n        let nextVowel = alphabet[index!\
    \ + 1]\n        let index = alphabet.index(of: nextVowel)\n        if index ==\
    \ nil {\n            return \"\"\n        }\n        let nextVowel = alphabet[index!\
    \ + 1]\n        let index = alphabet.index(of: nextVowel)\n        if index ==\
    \ nil {\n            return \"\"\n        }\n        let nextVowel = alphabet[index!\
    \ + 1]\n        let index = alphabet.index(of: nextVowel)\n        if index ==\
    \ nil {\n            return \"\"\n        }\n        let nextVowel = alphabet[index!\
    \ + 1]\n        let index = alphabet.index(of: nextVowel)\n        if index ==\
    \ nil {\n            return \"\"\n        }\n        let nextVowel = alphabet[index!\
    \ + 1]\n        let index = alphabet.index(of: nextVowel)\n        if index ==\
    \ nil {\n            return \"\"\n        }\n        let nextVowel = alphabet[index!\
    \ + 1]\n        let index = alphabet.index(of: nextVowel)\n        if index ==\
    \ nil {\n            return \"\"\n        }\n        let nextVowel = alphabet[index!\
    \ + 1]", "    var result = \"\"\n    for letter in message {\n        let index\
    \ = english.index(of: letter)\n        let replacement = english[index! + 2]\n\
    \        result += replacement\n    }\n    return result", "    var result = \"\
    \"\n    for letter in message {\n        let index = alphabet.index(of: letter)!\n\
    \        let nextLetter = alphabet[index + 2]\n        let replacement = alphabet[index\
    \ + 1]\n        result += nextLetter + replacement\n    }\n    return result",
  "    var result = \"\"\n    for letter in message {\n        switch letter {\n \
    \       case \"a\":\n        case \"e\":\n        case \"i\":\n        case \"\
    o\":\n        case \"u\":\n            result += letter\n        default:\n  \
    \          result += letter + String(letter).characters.map { String($0).lowercased().firstIndex(of:\
    \ String(letter).lowercased()) ?? 0 }\n        }\n    }\n    return result", " \
    \   var result = \"\"\n    for char in message {\n        let index = english.index(of:\
    \ char)\n        let replacement = english[index! + 2]\n        result += String(char).replacingOccurrences(of:\
    \ char, with: replacement)\n    }\n    return result", "    var result = \"\"\n\
    \    for letter in message {\n        let index = alphabet.index(of: letter)\n\
    \        if index == nil {\n            result += letter\n        } else {\n \
    \           let twoLettersBefore = alphabet.index(of: alphabet[index!], offsetBy:\
    \ 2)\n            if twoLettersBefore == nil {\n                result += alphabet[index!]\n\
    \            } else {\n                result += alphabet[twoLettersBefore!]\n\
    \            }\n        }\n    }\n    return result", "    var result = \"\"\n\
    \    for letter in message {\n        if letter.isUpper() {\n            result\
    \ += letter.lowercased()\n        } else {\n            result += letter.uppercased()\n\
    \        }\n    }\n    for vowel in \"AEIOUaeiou\" {\n        let index = result.index(of:\
    \ vowel)\n        if index != nil {\n            let two = result.index(before:\
    \ index!)\n            let one = result.index(before: two!)\n            let replacement\
    \ = result.substring(from: one!)\n            result = result.substring(to: index!)\
    \ + replacement\n        }\n    }\n    return result", "    var result = \"\"\n\
    \    for letter in message {\n        let index = english.index(of: letter)\n\
    \        let vowel = vowels[index]\n        let replacement = english[vowel.next!.index]\n\
    \        result += replacement\n    }\n    return result", "    var result = \"\
    \"\n    for letter in message {\n        let index = alphabet.index(of: letter)\n\
    \        let replacement = alphabet[index! + 2]\n        result += replacement\n\
    \    }\n    return result", "    var result = \"\"\n    for letter in message\
    \ {\n        switch letter {\n        case \"a\":\n        case \"e\":\n     \
    \   case \"i\":\n        case \"o\":\n        case \"u\":\n            result\
    \ += letter\n        default:\n            result += letter.lowercased()\n   \
    \     }\n    }\n    for letter in result {\n        switch letter {\n        case\
    \ \"a\":\n        case \"e\":\n        case \"i\":\n        case \"o\":\n    \
    \    case \"u\":\n            result += letter.lowercased()\n        default:\n\
    \            result += letter\n        }\n    }\n    return result", "    var\
    \ result = \"\"\n    for letter in message {\n        if letter.isUpper() {\n\
    \            result += String(letter)\n        } else {\n            result +=\
    \ String(letter).swapCase()\n        }\n    }\n    for letter in result {\n  \
    \      if letter.isLetter() {\n            result += String(letter)\n        }\
    \ else {\n            result += String(letter).swapCase()\n        }\n    }\n\
    \    return result", "    var result = \"\"\n    for letter in message {\n   \
    \     if letter.isUpper() {\n            result += letter.lowercased()\n     \
    \   } else {\n            result += letter.uppercased()\n        }\n    }\n  \
    \  for vowel in \"AEIOUaeiou\" {\n        result = result.replacingOccurrences(of:\
    \ vowel, with: vowel.lowercased())\n    }\n    return result", "    var result\
    \ = \"\"\n    for letter in message {\n        switch letter {\n        case \"\
    A\":\n            result += \"B\"\n        case \"B\":\n            result +=\
    \ \"A\"\n        case \"C\":\n            result += \"D\"\n        case \"D\"\
    :\n            result += \"C\"\n        case \"E\":\n            result += \"\
    F\"\n        case \"F\":\n            result += \"E\"\n        case \"G\":\n \
    \           result += \"H\"\n        case \"H\":\n            result += \"G\"\n\
    \        case \"I\":\n            result += \"J\"\n        case \"J\":\n     \
    \       result += \"I\"\n        case \"K\":\n            result += \"L\"\n  \
    \      case \"L\":\n            result += \"K\"\n        case \"M\":\n       \
    \     result += \"N\"\n        case \"N\":\n            result += \"M\"\n    \
    \    case \"O\":\n            result += \"P\"\n        case \"P\":\n         \
    \   result += \"O\"\n        case \"Q\":\n            result += \"R\"\n      \
    \  case \"R\":\n            result += \"Q\"\n        case \"S\":\n           \
    \ result += \"T\"\n        case \"T\":\n            result += \"S\"\n        case\
    \ \"U\":\n            result += \"V\"\n        case \"V\":\n            result\
    \ += \"U\"\n        case \"W\":\n            result += \"X\"\n        case \"\
    X\":\n            result += \"W\"\n        case \"Y\":\n            result +=\
    \ \"Z\"\n        case \"Z\":\n            result += \"Y\"\n        default:\n\
    \            result += letter\n        }\n    }\n    return result"]
stop_tokens:
- "\n}"
