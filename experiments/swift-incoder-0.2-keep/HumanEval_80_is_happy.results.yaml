language: swift
name: HumanEval_80_is_happy
results:
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.isEmpty {\n        return false\n    }\n    if s.count <\
    \ 3 {\n        return false\n    }\n    var lastLetter = s[0]\n    for letter\
    \ in s.dropFirst() {\n        if letter == lastLetter {\n            return false\n\
    \        }\n        lastLetter = letter\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp1bx2gv75.swift:19:22: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var lastLetter\
    \ = s[0]\n                     ^~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014146
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 {\n        return\
    \ false\n    }\n    var count = 0\n    for c in s.characters {\n        if c ==\
    \ s.characters[count] {\n            count += 1\n        } else {\n          \
    \  count = 0\n        }\n        if count >= 3 {\n            return false\n \
    \       }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpauy_pgc0.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpauy_pgc0.swift:18:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpauy_pgc0.swift:19:17: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ c == s.characters[count] {\n                ^~~~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpauy_pgc0.swift:19:19:\
    \ error: 'characters' is unavailable: Please use String directly\n        if c\
    \ == s.characters[count] {\n                  ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    var i = 0\n    var j = 0\n    var k = 0\n    var count = 0\n\
    \    for _ in s.characters {\n        i += 1\n        j += 1\n        k += 1\n\
    \        if i == j && j == k {\n            count += 1\n        }\n    }\n   \
    \ return count >= 3 && count == s.characters.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp6iuz56zx.swift:17:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for _ in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp6iuz56zx.swift:25:37:\
    \ error: 'characters' is unavailable: Please use String directly\n    return count\
    \ >= 3 && count == s.characters.count\n                                    ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.isEmpty {\n        return true\n    }\n    if s.count ==\
    \ 3 {\n        if s.isDistinct {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp4szzcamt.swift:17:14: error: value of type 'String' has no member\
    \ 'isDistinct'\n        if s.isDistinct {\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014146
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.isEmpty {\n        return false\n    }\n    if s.count <\
    \ 3 {\n        return false\n    }\n    var last: Character?\n    for c in s.characters\
    \ {\n        if last == nil {\n            last = c\n        } else {\n      \
    \      if last != c {\n                return false\n            }\n         \
    \   last = nil\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpwa7en4n3.swift:20:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014146
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    var count = 0\n    for letter in s {\n        if letter == letter\
    \ {\n            count += 1\n        } else if letter == letter {\n          \
    \  count += 1\n        } else if letter == letter {\n            count += 1\n\
    \        } else {\n            return false\n        }\n    }\n    return count\
    \ >= 3 && count == s.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpe7ty9iap.swift:25:37: error: 'characters' is unavailable: Please\
    \ use String directly\n    return count >= 3 && count == s.characters.count\n\
    \                                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    var count = 0\n    for c in s {\n        if !is_distinct(&c,\
    \ &s[count]) {\n            count += 1\n        }\n    }\n    return count >=\
    \ 3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpqwvshpsm.swift:15:13: error: cannot find 'is_distinct' in scope\n\
    \        if !is_distinct(&c, &s[count]) {\n            ^~~~~~~~~~~\n/tmp/tmpqwvshpsm.swift:15:25:\
    \ error: cannot pass immutable value as inout argument: 'c' is a 'let' constant\n\
    \        if !is_distinct(&c, &s[count]) {\n                        ^~\n/tmp/tmpqwvshpsm.swift:15:29:\
    \ error: cannot pass immutable value as inout argument: subscript is get-only\n\
    \        if !is_distinct(&c, &s[count]) {\n                            ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.isEmpty {\n        return true\n    }\n    let len = s.characters.count\n\
    \    if len < 3 {\n        return false\n    }\n    let letters = Array(s.characters)\n\
    \    let set = Set(letters)\n    return set.count == len && set.count == letters.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmphjz_4fe2.swift:16:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmphjz_4fe2.swift:20:27:\
    \ error: 'characters' is unavailable: Please use String directly\n    let letters\
    \ = Array(s.characters)\n                          ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 {\n        return\
    \ false\n    }\n    var last: Character? = nil\n    for char in s.characters {\n\
    \        if char == last {\n            return false\n        }\n        last\
    \ = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp1dt7oocw.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp1dt7oocw.swift:18:19:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in s.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    var count = 0\n    for letter in s {\n        if letter == letter\
    \ {\n            count += 1\n        } else if letter == letter + letter {\n \
    \           count += 1\n        } else if letter == letter + letter + letter {\n\
    \            count += 1\n        } else {\n            return false\n        }\n\
    \    }\n    return count >= 3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpt4eymjlm.swift:17:36: error: binary operator '+' cannot be applied\
    \ to two 'Character' operands\n        } else if letter == letter + letter {\n\
    \                            ~~~~~~ ^ ~~~~~~\n/tmp/tmpt4eymjlm.swift:19:45: error:\
    \ binary operator '+' cannot be applied to two 'Character' operands\n        }\
    \ else if letter == letter + letter + letter {\n                            ~~~~~~~~~~~~~~~\
    \ ^ ~~~~~~\n/tmp/tmpt4eymjlm.swift:19:36: error: binary operator '+' cannot be\
    \ applied to two 'Character' operands\n        } else if letter == letter + letter\
    \ + letter {\n                            ~~~~~~ ^ ~~~~~~\n"
  stdout: ''
  timestamp: 1660014149
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.isEmpty {\n        return true\n    }\n    if s.count <\
    \ 3 {\n        return false\n    }\n    var lastChar = s[0]\n    for char in s.dropFirst()\
    \ {\n        if char == lastChar {\n            return false\n        }\n    \
    \    lastChar = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmpd6xsbizy.swift:19:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var lastChar\
    \ = s[0]\n                   ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 {\n        return\
    \ false\n    }\n    var count = 0\n    for c in s.characters {\n        if c ==\
    \ s[count] {\n            count += 1\n        } else {\n            count = 0\n\
    \        }\n        if count == 3 {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpayg7gx2w.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpayg7gx2w.swift:18:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpayg7gx2w.swift:19:17: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ c == s[count] {\n                ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    var count = 0\n    for letter in s.characters {\n        if letter\
    \ == letter {\n            count += 1\n        } else if letter == letter + letter\
    \ {\n            count += 1\n        } else if letter == letter + letter + letter\
    \ {\n            count += 1\n        } else {\n            return false\n    \
    \    }\n    }\n    return count >= 3 && count == s.characters.count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp6yvd7msb.swift:14:21: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in s.characters {\n                    ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp6yvd7msb.swift:17:36:\
    \ error: binary operator '+' cannot be applied to two 'Character' operands\n \
    \       } else if letter == letter + letter {\n                            ~~~~~~\
    \ ^ ~~~~~~\n/tmp/tmp6yvd7msb.swift:19:36: error: binary operator '+' cannot be\
    \ applied to two 'Character' operands\n        } else if letter == letter + letter\
    \ + letter {\n                            ~~~~~~ ^ ~~~~~~\n/tmp/tmp6yvd7msb.swift:19:45:\
    \ error: binary operator '+' cannot be applied to two 'Character' operands\n \
    \       } else if letter == letter + letter + letter {\n                     \
    \       ~~~~~~~~~~~~~~~ ^ ~~~~~~\n/tmp/tmp6yvd7msb.swift:25:37: error: 'characters'\
    \ is unavailable: Please use String directly\n    return count >= 3 && count ==\
    \ s.characters.count\n                                    ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014149
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 {\n        return\
    \ false\n    }\n    var last: Character?\n    for char in s.characters {\n   \
    \     if char == last {\n            return false\n        }\n        last = char\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpktzjwjkc.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpktzjwjkc.swift:18:19:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in s.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    var count = 0\n    for c in s {\n        if count % 3 == 0 {\n\
    \            if s.rangeOfString(c) == nil {\n                return false\n  \
    \          }\n        } else {\n            if s.rangeOfString(c) != nil {\n \
    \               return false\n            }\n        }\n        count += 1\n \
    \   }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmppay1kcje.swift:16:18: error: value of type 'String' has no member\
    \ 'rangeOfString'\n            if s.rangeOfString(c) == nil {\n              \
    \ ~ ^~~~~~~~~~~~~\n/tmp/tmppay1kcje.swift:20:18: error: value of type 'String'\
    \ has no member 'rangeOfString'\n            if s.rangeOfString(c) != nil {\n\
    \               ~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 { return false }\n\
    \    var last: Character?\n    for char in s.characters {\n        if char ==\
    \ last {\n            return false\n        }\n        last = char\n    }\n  \
    \  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp8tcbb9og.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp8tcbb9og.swift:16:19:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in s.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 {\n        return\
    \ false\n    }\n    var lastChar = s.characters.last!\n    for char in s.characters[0..<len]\
    \ {\n        if char == lastChar {\n            return false\n        }\n    \
    \    lastChar = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmp9p90xy7g.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp9p90xy7g.swift:17:22:\
    \ error: 'characters' is unavailable: Please use String directly\n    var lastChar\
    \ = s.characters.last!\n                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp9p90xy7g.swift:18:17: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an integer range, use a String.Index\
    \ range instead.\n    for char in s.characters[0..<len] {\n                ^~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:5:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript<R>(bounds: R) -> String where R : RangeExpression,\
    \ R.Bound == Int { get }\n           ^\n/tmp/tmp9p90xy7g.swift:18:19: error: 'characters'\
    \ is unavailable: Please use String directly\n    for char in s.characters[0..<len]\
    \ {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 {\n        return\
    \ false\n    }\n    var lastChar = s.characters.last\n    for char in s.characters[0..<len]\
    \ {\n        if char == lastChar {\n            return false\n        }\n    \
    \    lastChar = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmpeilisxpe.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpeilisxpe.swift:17:22:\
    \ error: 'characters' is unavailable: Please use String directly\n    var lastChar\
    \ = s.characters.last\n                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpeilisxpe.swift:18:17: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an integer range, use a String.Index\
    \ range instead.\n    for char in s.characters[0..<len] {\n                ^~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:5:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript<R>(bounds: R) -> String where R : RangeExpression,\
    \ R.Bound == Int { get }\n           ^\n/tmp/tmpeilisxpe.swift:18:19: error: 'characters'\
    \ is unavailable: Please use String directly\n    for char in s.characters[0..<len]\
    \ {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 {\n        return\
    \ false\n    }\n    var lastChar: Character?\n    for char in s.characters {\n\
    \        if char == lastChar {\n            return false\n        }\n        lastChar\
    \ = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp3wmj69zb.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp3wmj69zb.swift:18:19:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in s.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 {\n        return\
    \ false\n    }\n    var lastChar = s.characters.last\n    for char in s.characters.dropLast()\
    \ {\n        if char == lastChar {\n            return false\n        }\n    \
    \    lastChar = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmp73w_ti0b.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp73w_ti0b.swift:17:22:\
    \ error: 'characters' is unavailable: Please use String directly\n    var lastChar\
    \ = s.characters.last\n                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp73w_ti0b.swift:18:19: error: 'characters'\
    \ is unavailable: Please use String directly\n    for char in s.characters.dropLast()\
    \ {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 {\n        return\
    \ false\n    }\n    var lastChar = s.characters.last!\n    var isHappy = true\n\
    \    for char in s.characters.dropLast() {\n        if char == lastChar {\n  \
    \          isHappy = false\n            break\n        }\n        lastChar = char\n\
    \    }\n    return isHappy\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7_b1jnak.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp7_b1jnak.swift:17:22:\
    \ error: 'characters' is unavailable: Please use String directly\n    var lastChar\
    \ = s.characters.last!\n                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp7_b1jnak.swift:19:19: error: 'characters'\
    \ is unavailable: Please use String directly\n    for char in s.characters.dropLast()\
    \ {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    var count = 0\n    for c in s {\n        if count % 3 == 0 {\n\
    \            if s.rangeOfString(c) == nil {\n                return false\n  \
    \          }\n        } else {\n            if s.rangeOfString(c) != nil {\n \
    \               return false\n            }\n        }\n        count += 1\n \
    \   }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmppay1kcje.swift:16:18: error: value of type 'String' has no member\
    \ 'rangeOfString'\n            if s.rangeOfString(c) == nil {\n              \
    \ ~ ^~~~~~~~~~~~~\n/tmp/tmppay1kcje.swift:20:18: error: value of type 'String'\
    \ has no member 'rangeOfString'\n            if s.rangeOfString(c) != nil {\n\
    \               ~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    var count = 0\n    for letter in s {\n        if letter == letter\
    \ {\n            count += 1\n        } else if letter == letter + letter {\n \
    \           count += 1\n        } else if letter == letter + letter + letter {\n\
    \            count += 1\n        } else {\n            return false\n        }\n\
    \    }\n    return count >= 3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpt4eymjlm.swift:17:36: error: binary operator '+' cannot be applied\
    \ to two 'Character' operands\n        } else if letter == letter + letter {\n\
    \                            ~~~~~~ ^ ~~~~~~\n/tmp/tmpt4eymjlm.swift:19:45: error:\
    \ binary operator '+' cannot be applied to two 'Character' operands\n        }\
    \ else if letter == letter + letter + letter {\n                            ~~~~~~~~~~~~~~~\
    \ ^ ~~~~~~\n/tmp/tmpt4eymjlm.swift:19:36: error: binary operator '+' cannot be\
    \ applied to two 'Character' operands\n        } else if letter == letter + letter\
    \ + letter {\n                            ~~~~~~ ^ ~~~~~~\n"
  stdout: ''
  timestamp: 1660014149
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    var count = 0\n    for letter in s {\n        if letter == letter\
    \ {\n            count += 1\n        } else {\n            count = 0\n       \
    \ }\n        if count >= 3 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmp6rl7ykuz/tmp6rl7ykuz.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea0e39cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea0e093b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea0e093988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea0e0927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6rl7ykuz                        0x000055915edf336d <unavailable> + 4973

    5    libc.so.6                          0x00002aea0e588460 __libc_start_main +
    245

    6    tmp6rl7ykuz                        0x000055915edf2ff9 <unavailable> + 4089

    '
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    return len >= 3 && allDistinct(s.characters.prefix(3))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_piobuxb.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp_piobuxb.swift:14:24:\
    \ error: cannot find 'allDistinct' in scope\n    return len >= 3 && allDistinct(s.characters.prefix(3))\n\
    \                       ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 { return false }\n    var last: Character? = nil\n\
    \    for c in s.characters {\n        if last == c { return false }\n        last\
    \ = c\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7qwes1gk.swift:15:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    return s.count > 3 && is_distinct_3_consecutive(s.characters)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpe2ugma25.swift:13:27: error: cannot find 'is_distinct_3_consecutive'\
    \ in scope\n    return s.count > 3 && is_distinct_3_consecutive(s.characters)\n\
    \                          ^~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    var count = 0\n    for letter in s.characters {\n        if letter\
    \ == s.characters.first {\n            count += 1\n        } else if letter ==\
    \ s.characters.last {\n            count -= 1\n        } else {\n            count\
    \ = 0\n        }\n        if count < 0 || count > 3 {\n            return false\n\
    \        }\n    }\n    return count >= 3\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmparm1n6xi.swift:14:21: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in s.characters {\n                    ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmparm1n6xi.swift:15:24:\
    \ error: 'characters' is unavailable: Please use String directly\n        if letter\
    \ == s.characters.first {\n                       ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmparm1n6xi.swift:17:31: error: 'characters'\
    \ is unavailable: Please use String directly\n        } else if letter == s.characters.last\
    \ {\n                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 {\n        return\
    \ false\n    }\n    var lastChar = s[0]\n    for char in s.characters {\n    \
    \    if char != lastChar {\n            return false\n        }\n        lastChar\
    \ = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpo6fwu_sy.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpo6fwu_sy.swift:17:20:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n    var lastChar = s[0]\n                   ^~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpo6fwu_sy.swift:18:19:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in s.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    var count = 0\n    for letter in s {\n        if letter == letter\
    \ {\n            count += 1\n        }\n    }\n    return count >= 3 && count\
    \ == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpagcfvfhf/tmpagcfvfhf.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafc89d9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafc86d0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafc86d0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafc86cf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpagcfvfhf                        0x00005643c91f65a1 <unavailable> + 5537

    5    libc.so.6                          0x00002aafc8bc5460 __libc_start_main +
    245

    6    tmpagcfvfhf                        0x00005643c91f6049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 {\n        return\
    \ false\n    }\n    var lastChar = s[0]\n    for char in s.characters {\n    \
    \    if char == lastChar {\n            return false\n        }\n        lastChar\
    \ = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_b1miof0.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp_b1miof0.swift:17:20:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n    var lastChar = s[0]\n                   ^~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp_b1miof0.swift:18:19:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in s.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 {\n        return\
    \ false\n    }\n    var last: Character?\n    var lastCount: Int = 0\n    for\
    \ char in s.characters {\n        if char == last {\n            lastCount++\n\
    \        } else {\n            last = char\n            lastCount = 1\n      \
    \  }\n    }\n    if lastCount != 3 {\n        return false\n    }\n    for char\
    \ in s.characters {\n        if char == last {\n            lastCount++\n    \
    \    } else {\n            last = char\n            lastCount = 1\n        }\n\
    \    }\n    if lastCount != 3 {\n        return false\n    }\n    for char in\
    \ s.characters {\n        if char == last {\n            lastCount++\n       \
    \ } else {\n            last = char\n            lastCount = 1\n        }\n  \
    \  }\n    if lastCount != 3 {\n        return false\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpuvjmjouq.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpuvjmjouq.swift:19:19:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in s.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpuvjmjouq.swift:21:22: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            lastCount++\n                  \
    \   ^~\n/tmp/tmpuvjmjouq.swift:30:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpuvjmjouq.swift:32:22:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  lastCount++\n                     ^~\n/tmp/tmpuvjmjouq.swift:41:19: error:\
    \ 'characters' is unavailable: Please use String directly\n    for char in s.characters\
    \ {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpuvjmjouq.swift:43:22: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            lastCount++\n                     ^~\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 {\n        return\
    \ false\n    }\n    var lastChar = s.characters.last!\n    var lastCharCount =\
    \ 1\n    for char in s.characters {\n        if char == lastChar {\n         \
    \   lastCharCount += 1\n        } else {\n            lastCharCount = 1\n    \
    \        lastChar = char\n        }\n        if lastCharCount > 3 {\n        \
    \    return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_z_xqw4a.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp_z_xqw4a.swift:17:22:\
    \ error: 'characters' is unavailable: Please use String directly\n    var lastChar\
    \ = s.characters.last!\n                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp_z_xqw4a.swift:19:19: error: 'characters'\
    \ is unavailable: Please use String directly\n    for char in s.characters {\n\
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    var count = 0\n    for letter in s.characters {\n        if letter\
    \ == letter {\n            count += 1\n        }\n    }\n    return count >= 3\
    \ && count == s.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpw78nlc9t.swift:14:21: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in s.characters {\n                    ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpw78nlc9t.swift:19:37:\
    \ error: 'characters' is unavailable: Please use String directly\n    return count\
    \ >= 3 && count == s.characters.count\n                                    ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 {\n        return\
    \ false\n    }\n    var last: Character?\n    var lastCount: Int = 0\n    for\
    \ char in s.characters {\n        if char == last! {\n            lastCount++\n\
    \        } else {\n            lastCount = 1\n            last = char\n      \
    \  }\n        if lastCount > 3 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpamrt6kqs.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpamrt6kqs.swift:19:19:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in s.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpamrt6kqs.swift:21:22: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            lastCount++\n                  \
    \   ^~\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 { return false }\n\
    \    let set = Set<Character>()\n    for c in s.characters {\n        set.insert(c)\n\
    \    }\n    return set.count == len && set.count == (set.count / 3)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpk0xj6wi4.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpk0xj6wi4.swift:16:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpk0xj6wi4.swift:17:13: error: cannot use mutating member\
    \ on immutable value: 'set' is a 'let' constant\n        set.insert(c)\n     \
    \   ~~~ ^\n/tmp/tmpk0xj6wi4.swift:15:5: note: change 'let' to 'var' to make it\
    \ mutable\n    let set = Set<Character>()\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.isEmpty {\n        return false\n    }\n    if s.count <\
    \ 3 {\n        return false\n    }\n    var last: Character? = nil\n    for c\
    \ in s.characters {\n        if last == c {\n            return false\n      \
    \  }\n        last = c\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmph6wtewmh.swift:20:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 {\n        return\
    \ false\n    }\n    var lastChar = s.characters.last\n    for char in s.characters.dropLast()\
    \ {\n        if char == lastChar {\n            return false\n        }\n    \
    \    lastChar = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmp73w_ti0b.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp73w_ti0b.swift:17:22:\
    \ error: 'characters' is unavailable: Please use String directly\n    var lastChar\
    \ = s.characters.last\n                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp73w_ti0b.swift:18:19: error: 'characters'\
    \ is unavailable: Please use String directly\n    for char in s.characters.dropLast()\
    \ {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    var count = 0\n    for letter in s {\n        if letter == letter\
    \ {\n            count += 1\n        } else if letter == letter {\n          \
    \  count += 1\n        } else if letter == letter {\n            count += 1\n\
    \        } else {\n            return false\n        }\n    }\n    return count\
    \ >= 3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmp4vbu_e94/tmp4vbu_e94.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af1b30cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af1b2dc2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af1b2dc2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af1b2dc17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4vbu_e94                        0x000055e1ba116551 <unavailable> + 5457

    5    libc.so.6                          0x00002af1b32b7460 __libc_start_main +
    245

    6    tmp4vbu_e94                        0x000055e1ba115ff9 <unavailable> + 4089

    '
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    var count = 0\n    for letter in s.characters {\n        if letter\
    \ == s.characters.first {\n            count += 1\n        } else if letter ==\
    \ s.characters.last {\n            count -= 1\n        } else {\n            count\
    \ = 0\n        }\n        if count < 0 || count > 3 {\n            return false\n\
    \        }\n    }\n    return count >= 3\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmparm1n6xi.swift:14:21: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in s.characters {\n                    ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmparm1n6xi.swift:15:24:\
    \ error: 'characters' is unavailable: Please use String directly\n        if letter\
    \ == s.characters.first {\n                       ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmparm1n6xi.swift:17:31: error: 'characters'\
    \ is unavailable: Please use String directly\n        } else if letter == s.characters.last\
    \ {\n                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 {\n        return\
    \ false\n    }\n    var lastChar = s[0]\n    for char in s.characters {\n    \
    \    if char == lastChar {\n            return false\n        }\n        lastChar\
    \ = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_b1miof0.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp_b1miof0.swift:17:20:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n    var lastChar = s[0]\n                   ^~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp_b1miof0.swift:18:19:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in s.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 {\n        return\
    \ false\n    }\n    var last: Character?\n    for char in s.characters {\n   \
    \     if char == last {\n            return false\n        }\n        last = char\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpktzjwjkc.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpktzjwjkc.swift:18:19:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in s.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    return s.count >= 3 && s.isHappy()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp979idhux.swift:13:30: error: value of type 'String' has no member\
    \ 'isHappy'\n    return s.count >= 3 && s.isHappy()\n                        \
    \   ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 { return false }\n\
    \    let mut seen = Set<String>()\n    for c in s.characters {\n        if seen.contains(c)\
    \ { return false }\n        seen.insert(c)\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmf5qbrlt.swift:15:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut seen = Set<String>()\n\
    \            ^\n/tmp/tmpmf5qbrlt.swift:15:13: note: join the identifiers together\n\
    \    let mut seen = Set<String>()\n        ~~~~^~~~\n        mutseen\n/tmp/tmpmf5qbrlt.swift:15:13:\
    \ note: join the identifiers together with camel-case\n    let mut seen = Set<String>()\n\
    \        ~~~~^~~~\n        mutSeen\n/tmp/tmpmf5qbrlt.swift:13:17: error: 'characters'\
    \ is unavailable: Please use String directly\n    let len = s.characters.count\n\
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpmf5qbrlt.swift:16:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpmf5qbrlt.swift:17:12:\
    \ error: cannot find 'seen' in scope\n        if seen.contains(c) { return false\
    \ }\n           ^~~~\n/tmp/tmpmf5qbrlt.swift:18:9: error: cannot find 'seen' in\
    \ scope\n        seen.insert(c)\n        ^~~~\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.length\n    if len < 3 {\n        return false\n\
    \    }\n    var last = 0\n    var lastCount = 0\n    for _ in 0..<len {\n    \
    \    if last == s.count {\n            return false\n        }\n        let c\
    \ = s[last]\n        if lastCount == 0 {\n            lastCount = 1\n        }\
    \ else {\n            lastCount += 1\n        }\n        if lastCount > 3 {\n\
    \            return false\n        }\n        if c != s[last] {\n            return\
    \ false\n        }\n        last = last + 1\n        lastCount = 1\n    }\n  \
    \  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp1glj9xhh.swift:13:17: error: value of type 'String' has no member\
    \ 'length'\n    let len = s.length\n              ~ ^~~~~~\n/tmp/tmp1glj9xhh.swift:23:17:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        let c = s[last]\n                ^~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 {\n        return\
    \ false\n    }\n    var lastChar = s.characters.last!\n    var lastCharCount =\
    \ 0\n    for char in s.characters {\n        if char == lastChar {\n         \
    \   lastCharCount += 1\n        } else {\n            lastCharCount = 1\n    \
    \        lastChar = char\n        }\n    }\n    return lastCharCount >= 3\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmphxz5d2nj.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmphxz5d2nj.swift:17:22:\
    \ error: 'characters' is unavailable: Please use String directly\n    var lastChar\
    \ = s.characters.last!\n                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmphxz5d2nj.swift:19:19: error: 'characters'\
    \ is unavailable: Please use String directly\n    for char in s.characters {\n\
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    var last:\
    \ Character?\n    var lastCount: Int = 0\n    for c in s.characters {\n      \
    \  if last != nil {\n            if last! == c {\n                lastCount++\n\
    \            } else {\n                lastCount = 1\n            }\n        }\n\
    \        last = c\n    }\n    return lastCount >= 3 && lastCount <= s.count &&\
    \ lastCount != s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp1kq2i7a9.swift:18:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp1kq2i7a9.swift:21:26:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \      lastCount++\n                         ^~\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 {\n        return\
    \ false\n    }\n    var last: Character?\n    for char in s.characters {\n   \
    \     if char == last {\n            return false\n        }\n        last = char\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpktzjwjkc.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpktzjwjkc.swift:18:19:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in s.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 { return false }\n\
    \    var last: Character? = nil\n    for c in s.characters {\n        if last\
    \ == c {\n            return false\n        }\n        last = c\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp4_g3fe2_.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp4_g3fe2_.swift:16:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    return s.count > 3 && s.characters.reduce(true) { (result, c)\
    \ in\n        return result && s.characters.contains(c)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpvm24vqt1.swift:13:29: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.count > 3 && s.characters.reduce(true) { (result,\
    \ c) in\n                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpvm24vqt1.swift:14:28: error: 'characters' is unavailable:\
    \ Please use String directly\n        return result && s.characters.contains(c)\n\
    \                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.isEmpty {\n        return false\n    }\n    let len = s.count\n\
    \    if len < 3 {\n        return false\n    }\n    var lastChar = s[0]\n    for\
    \ char in s.dropFirst() {\n        if char != lastChar {\n            return false\n\
    \        }\n        lastChar = char\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpqafcmfks.swift:20:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var lastChar\
    \ = s[0]\n                   ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 {\n        return\
    \ false\n    }\n    var last: Character? = nil\n    for char in s.characters {\n\
    \        if char != last {\n            last = char\n        } else {\n      \
    \      return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpayct5ppr.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpayct5ppr.swift:18:19:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in s.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    var count = 0\n    for letter in s {\n        if letter == letter\
    \ {\n            count += 1\n        } else {\n            count = 0\n       \
    \ }\n        if count >= 3 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmp6rl7ykuz/tmp6rl7ykuz.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea0e39cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea0e093b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea0e093988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea0e0927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6rl7ykuz                        0x000055915edf336d <unavailable> + 4973

    5    libc.so.6                          0x00002aea0e588460 __libc_start_main +
    245

    6    tmp6rl7ykuz                        0x000055915edf2ff9 <unavailable> + 4089

    '
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    var count = 0\n    for letter in s.characters {\n        if letter\
    \ == letter {\n            count += 1\n        } else {\n            count = 0\n\
    \        }\n        if count >= 3 {\n            return false\n        }\n   \
    \ }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxpwo1rus.swift:14:21: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in s.characters {\n                    ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    return s.count > 3 && is_distinct_3(s.characters.dropLast())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpyr6k8oco.swift:13:27: error: cannot find 'is_distinct_3' in scope\n\
    \    return s.count > 3 && is_distinct_3(s.characters.dropLast())\n          \
    \                ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    var count = 0\n    for letter in s {\n        if letter == letter\
    \ {\n            count += 1\n        } else {\n            count = 0\n       \
    \ }\n        if count == 3 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpdja6y9oh/tmpdja6y9oh.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf36bd9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf368d0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf368d0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf368cf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdja6y9oh                        0x00005649aded936d <unavailable> + 4973

    5    libc.so.6                          0x00002aaf36dc5460 __libc_start_main +
    245

    6    tmpdja6y9oh                        0x00005649aded8ff9 <unavailable> + 4089

    '
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    return s.count >= 3 && s.characters.reduce(true, {$0 && $1 ==\
    \ $2}) == true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp0_jb8v_4.swift:13:54: error: contextual closure type '(Bool, String.Element)\
    \ throws -> Bool' (aka '(Bool, Character) throws -> Bool') expects 2 arguments,\
    \ but 3 were used in closure body\n    return s.count >= 3 && s.characters.reduce(true,\
    \ {$0 && $1 == $2}) == true\n                                                \
    \     ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    var count = 0\n    for letter in s {\n        if letter == letter\
    \ {\n            count += 1\n        }\n    }\n    return count >= 3 && count\
    \ == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpagcfvfhf/tmpagcfvfhf.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafc89d9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafc86d0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafc86d0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafc86cf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpagcfvfhf                        0x00005643c91f65a1 <unavailable> + 5537

    5    libc.so.6                          0x00002aafc8bc5460 __libc_start_main +
    245

    6    tmpagcfvfhf                        0x00005643c91f6049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 {\n        return\
    \ false\n    }\n    var count = 0\n    var lastChar = s.characters.last!\n   \
    \ for char in s.characters {\n        if char == lastChar {\n            count\
    \ += 1\n        } else {\n            count = 0\n        }\n        lastChar =\
    \ char\n    }\n    return count >= 3 && count == len\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmperkeza6_.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmperkeza6_.swift:18:22:\
    \ error: 'characters' is unavailable: Please use String directly\n    var lastChar\
    \ = s.characters.last!\n                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmperkeza6_.swift:19:19: error: 'characters'\
    \ is unavailable: Please use String directly\n    for char in s.characters {\n\
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 {\n        return\
    \ false\n    }\n    var last: Character?\n    for c in s.characters {\n      \
    \  if last == nil {\n            last = c\n            continue\n        }\n \
    \       if last != c {\n            return false\n        }\n        last = nil\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpw5c0amkf.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpw5c0amkf.swift:18:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 {\n        return\
    \ false\n    }\n    var lastChar = s[0]\n    for char in s.characters {\n    \
    \    if char != lastChar {\n            return false\n        }\n        lastChar\
    \ = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpo6fwu_sy.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpo6fwu_sy.swift:17:20:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n    var lastChar = s[0]\n                   ^~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpo6fwu_sy.swift:18:19:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in s.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    var count = 0\n    for letter in s {\n        if letter == letter\
    \ {\n            count += 1\n        } else if letter == letter + letter {\n \
    \           count += 1\n        } else if letter == letter + letter + letter {\n\
    \            count += 1\n        } else {\n            return false\n        }\n\
    \    }\n    return count >= 3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpt4eymjlm.swift:17:36: error: binary operator '+' cannot be applied\
    \ to two 'Character' operands\n        } else if letter == letter + letter {\n\
    \                            ~~~~~~ ^ ~~~~~~\n/tmp/tmpt4eymjlm.swift:19:45: error:\
    \ binary operator '+' cannot be applied to two 'Character' operands\n        }\
    \ else if letter == letter + letter + letter {\n                            ~~~~~~~~~~~~~~~\
    \ ^ ~~~~~~\n/tmp/tmpt4eymjlm.swift:19:36: error: binary operator '+' cannot be\
    \ applied to two 'Character' operands\n        } else if letter == letter + letter\
    \ + letter {\n                            ~~~~~~ ^ ~~~~~~\n"
  stdout: ''
  timestamp: 1660014149
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    var count = 0\n    for letter in s {\n        if letter == letter\
    \ {\n            count += 1\n        }\n    }\n    return count >= 3 && count\
    \ == s.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmppaq764yp.swift:19:37: error: 'characters' is unavailable: Please\
    \ use String directly\n    return count >= 3 && count == s.characters.count\n\
    \                                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 {\n        return\
    \ false\n    }\n    var lastChar = s.characters.last!\n    for char in s.characters[0..<len]\
    \ {\n        if char == lastChar {\n            return false\n        }\n    \
    \    lastChar = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmp9p90xy7g.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp9p90xy7g.swift:17:22:\
    \ error: 'characters' is unavailable: Please use String directly\n    var lastChar\
    \ = s.characters.last!\n                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp9p90xy7g.swift:18:17: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an integer range, use a String.Index\
    \ range instead.\n    for char in s.characters[0..<len] {\n                ^~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:5:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript<R>(bounds: R) -> String where R : RangeExpression,\
    \ R.Bound == Int { get }\n           ^\n/tmp/tmp9p90xy7g.swift:18:19: error: 'characters'\
    \ is unavailable: Please use String directly\n    for char in s.characters[0..<len]\
    \ {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    var count = 0\n    for letter in s {\n        if letter == letter\
    \ {\n            count += 1\n        } else if letter == letter {\n          \
    \  count += 1\n        } else if letter == letter {\n            count += 1\n\
    \        } else {\n            return false\n        }\n    }\n    return count\
    \ >= 3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmp4vbu_e94/tmp4vbu_e94.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af1b30cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af1b2dc2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af1b2dc2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af1b2dc17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4vbu_e94                        0x000055e1ba116551 <unavailable> + 5457

    5    libc.so.6                          0x00002af1b32b7460 __libc_start_main +
    245

    6    tmp4vbu_e94                        0x000055e1ba115ff9 <unavailable> + 4089

    '
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 {\n        return\
    \ false\n    }\n    let set = Set<String>()\n    for i in 0..<len {\n        if\
    \ let c = s.character(at: i) {\n            if !set.contains(c) {\n          \
    \      set.insert(c)\n            }\n        }\n    }\n    return set.count ==\
    \ len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpopfgudtt.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpopfgudtt.swift:19:22:\
    \ error: value of type 'String' has no member 'character'\n        if let c =\
    \ s.character(at: i) {\n                   ~ ^~~~~~~~~\n/tmp/tmpopfgudtt.swift:21:21:\
    \ error: cannot use mutating member on immutable value: 'set' is a 'let' constant\n\
    \                set.insert(c)\n                ~~~ ^\n/tmp/tmpopfgudtt.swift:17:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let set = Set<String>()\n\
    \    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    return is_happy_helper(s.characters.map(String.init))\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdbids_5e.swift:13:12: error: cannot find 'is_happy_helper' in scope\n\
    \    return is_happy_helper(s.characters.map(String.init))\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    return len >= 3 && allSatisfying(isDistinctFrom:\
    \ 3, of: s.characters)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp8vkxz632.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp8vkxz632.swift:14:24:\
    \ error: cannot find 'allSatisfying' in scope\n    return len >= 3 && allSatisfying(isDistinctFrom:\
    \ 3, of: s.characters)\n                       ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 {\n        return\
    \ false\n    }\n    var count = 0\n    var lastChar = s.characters.last!\n   \
    \ for char in s.characters {\n        if char == lastChar {\n            count\
    \ += 1\n        } else {\n            count = 0\n        }\n        lastChar =\
    \ char\n    }\n    return count >= 3 && count == len\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmperkeza6_.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmperkeza6_.swift:18:22:\
    \ error: 'characters' is unavailable: Please use String directly\n    var lastChar\
    \ = s.characters.last!\n                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmperkeza6_.swift:19:19: error: 'characters'\
    \ is unavailable: Please use String directly\n    for char in s.characters {\n\
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    var count = 0\n    for c in s {\n        count += 1\n       \
    \ if count > 3 {\n            return false\n        }\n    }\n    for c in s {\n\
    \        if s.rangeOfString(c) == nil {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_3_7f38c.swift:21:14: error: value of type 'String' has no member\
    \ 'rangeOfString'\n        if s.rangeOfString(c) == nil {\n           ~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 {\n        return\
    \ false\n    }\n    var prev = \"\"\n    for char in s.characters {\n        if\
    \ char == prev {\n            return false\n        }\n        prev = char\n \
    \   }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmjdhyxj6.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpmjdhyxj6.swift:18:19:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in s.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpmjdhyxj6.swift:19:17: error: binary operator '==' cannot\
    \ be applied to operands of type 'Character' and 'String'\n        if char ==\
    \ prev {\n           ~~~~ ^  ~~~~\n/tmp/tmpmjdhyxj6.swift:19:17: note: overloads\
    \ for '==' exist with these partially matching parameter lists: (Character, Character),\
    \ (String, String)\n        if char == prev {\n                ^\n/tmp/tmpmjdhyxj6.swift:22:16:\
    \ error: cannot assign value of type 'Character' to type 'String'\n        prev\
    \ = char\n               ^~~~\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    var count = 0\n    for letter in s {\n        if letter == letter\
    \ {\n            count += 1\n        }\n    }\n    return count >= 3 && count\
    \ == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpagcfvfhf/tmpagcfvfhf.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafc89d9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafc86d0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafc86d0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafc86cf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpagcfvfhf                        0x00005643c91f65a1 <unavailable> + 5537

    5    libc.so.6                          0x00002aafc8bc5460 __libc_start_main +
    245

    6    tmpagcfvfhf                        0x00005643c91f6049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    var count = 0\n    for letter in s.characters {\n        if letter\
    \ == letter {\n            count += 1\n        } else if letter == letter + letter\
    \ {\n            count += 1\n        } else if letter == letter + letter + letter\
    \ {\n            count += 1\n        } else {\n            return false\n    \
    \    }\n    }\n    return count >= 3\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpv64e03yp.swift:14:21: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in s.characters {\n                    ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpv64e03yp.swift:17:36:\
    \ error: binary operator '+' cannot be applied to two 'Character' operands\n \
    \       } else if letter == letter + letter {\n                            ~~~~~~\
    \ ^ ~~~~~~\n/tmp/tmpv64e03yp.swift:19:45: error: binary operator '+' cannot be\
    \ applied to two 'Character' operands\n        } else if letter == letter + letter\
    \ + letter {\n                            ~~~~~~~~~~~~~~~ ^ ~~~~~~\n/tmp/tmpv64e03yp.swift:19:36:\
    \ error: binary operator '+' cannot be applied to two 'Character' operands\n \
    \       } else if letter == letter + letter + letter {\n                     \
    \       ~~~~~~ ^ ~~~~~~\n"
  stdout: ''
  timestamp: 1660014149
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    var count = 0\n    for letter in s {\n        if letter == letter\
    \ {\n            count += 1\n        } else if letter == letter + letter {\n \
    \           count += 1\n        } else if letter == letter + letter + letter {\n\
    \            count += 1\n        }\n    }\n    return count >= 3 && count == s.characters.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpr8rlraha.swift:17:36: error: binary operator '+' cannot be applied\
    \ to two 'Character' operands\n        } else if letter == letter + letter {\n\
    \                            ~~~~~~ ^ ~~~~~~\n/tmp/tmpr8rlraha.swift:19:45: error:\
    \ binary operator '+' cannot be applied to two 'Character' operands\n        }\
    \ else if letter == letter + letter + letter {\n                            ~~~~~~~~~~~~~~~\
    \ ^ ~~~~~~\n/tmp/tmpr8rlraha.swift:19:36: error: binary operator '+' cannot be\
    \ applied to two 'Character' operands\n        } else if letter == letter + letter\
    \ + letter {\n                            ~~~~~~ ^ ~~~~~~\n/tmp/tmpr8rlraha.swift:23:37:\
    \ error: 'characters' is unavailable: Please use String directly\n    return count\
    \ >= 3 && count == s.characters.count\n                                    ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014149
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 {\n        return\
    \ false\n    }\n    var lastChar = s.characters.last\n    for char in s.characters[0..<len]\
    \ {\n        if char == lastChar {\n            return false\n        }\n    \
    \    lastChar = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmpeilisxpe.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpeilisxpe.swift:17:22:\
    \ error: 'characters' is unavailable: Please use String directly\n    var lastChar\
    \ = s.characters.last\n                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpeilisxpe.swift:18:17: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an integer range, use a String.Index\
    \ range instead.\n    for char in s.characters[0..<len] {\n                ^~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:5:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript<R>(bounds: R) -> String where R : RangeExpression,\
    \ R.Bound == Int { get }\n           ^\n/tmp/tmpeilisxpe.swift:18:19: error: 'characters'\
    \ is unavailable: Please use String directly\n    for char in s.characters[0..<len]\
    \ {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    var count = 0\n    for letter in s {\n        if letter == letter\
    \ {\n            count += 1\n        } else if letter == letter + letter {\n \
    \           count += 1\n        } else if letter == letter + letter + letter {\n\
    \            count += 1\n        } else {\n            return false\n        }\n\
    \    }\n    return count >= 3 && count == s.characters.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjwjeetp3.swift:17:36: error: binary operator '+' cannot be applied\
    \ to two 'Character' operands\n        } else if letter == letter + letter {\n\
    \                            ~~~~~~ ^ ~~~~~~\n/tmp/tmpjwjeetp3.swift:19:45: error:\
    \ binary operator '+' cannot be applied to two 'Character' operands\n        }\
    \ else if letter == letter + letter + letter {\n                            ~~~~~~~~~~~~~~~\
    \ ^ ~~~~~~\n/tmp/tmpjwjeetp3.swift:19:36: error: binary operator '+' cannot be\
    \ applied to two 'Character' operands\n        } else if letter == letter + letter\
    \ + letter {\n                            ~~~~~~ ^ ~~~~~~\n/tmp/tmpjwjeetp3.swift:25:37:\
    \ error: 'characters' is unavailable: Please use String directly\n    return count\
    \ >= 3 && count == s.characters.count\n                                    ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014149
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 {\n        return\
    \ false\n    }\n    var last: Character?\n    for char in s.characters {\n   \
    \     if char == last {\n            return false\n        }\n        last = char\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpktzjwjkc.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpktzjwjkc.swift:18:19:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in s.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    var count = 0\n    for letter in s {\n        if letter == letter\
    \ {\n            count += 1\n        } else {\n            count = 0\n       \
    \ }\n        if count == 3 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpdja6y9oh/tmpdja6y9oh.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf36bd9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf368d0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf368d0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf368cf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdja6y9oh                        0x00005649aded936d <unavailable> + 4973

    5    libc.so.6                          0x00002aaf36dc5460 __libc_start_main +
    245

    6    tmpdja6y9oh                        0x00005649aded8ff9 <unavailable> + 4089

    '
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    var count = 0\n    for letter in s {\n        if letter == letter\
    \ {\n            count += 1\n        }\n    }\n    return count >= 3 && count\
    \ == s.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmppaq764yp.swift:19:37: error: 'characters' is unavailable: Please\
    \ use String directly\n    return count >= 3 && count == s.characters.count\n\
    \                                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 {\n        return\
    \ false\n    }\n    var lastChar = s[0]\n    for char in s.characters {\n    \
    \    if char == lastChar {\n            return false\n        }\n        lastChar\
    \ = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_b1miof0.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp_b1miof0.swift:17:20:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n    var lastChar = s[0]\n                   ^~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp_b1miof0.swift:18:19:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in s.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    var count = 0\n    for letter in s {\n        if letter == letter\
    \ {\n            count += 1\n        }\n        if count == 3 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: Exception
  stderr: 'tmp7ee0cg02/tmp7ee0cg02.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a12b4ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a12841b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a12841988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a128407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ee0cg02                        0x00005609b882036d <unavailable> + 4973

    5    libc.so.6                          0x00002b5a12d36460 __libc_start_main +
    245

    6    tmp7ee0cg02                        0x00005609b881fff9 <unavailable> + 4089

    '
  stdout: ''
  timestamp: 1660014147
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    var count = 0\n    for letter in s {\n        if letter == letter\
    \ {\n            count += 1\n        } else {\n            count = 0\n       \
    \ }\n        if count == 3 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpdja6y9oh/tmpdja6y9oh.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf36bd9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf368d0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf368d0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf368cf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdja6y9oh                        0x00005649aded936d <unavailable> + 4973

    5    libc.so.6                          0x00002aaf36dc5460 __libc_start_main +
    245

    6    tmpdja6y9oh                        0x00005649aded8ff9 <unavailable> + 4089

    '
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 {\n        return\
    \ false\n    }\n    var last: Character? = nil\n    for c in s.characters {\n\
    \        if last == c {\n            continue\n        }\n        if let last\
    \ = last {\n            if last != c {\n                return false\n       \
    \     }\n        } else {\n            last = c\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpyqoc3bjq.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpyqoc3bjq.swift:18:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    var count = 0\n    for letter in s.characters {\n        if letter\
    \ == letter {\n            count += 1\n        } else {\n            count = 0\n\
    \        }\n        if count >= 3 {\n            return false\n        }\n   \
    \ }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxpwo1rus.swift:14:21: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in s.characters {\n                    ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    var count = 0\n    for letter in s.characters {\n        if letter\
    \ == letter {\n            count += 1\n        } else {\n            count = 0\n\
    \        }\n        if count == 3 {\n            return false\n        }\n   \
    \ }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpyxdvdiyt.swift:14:21: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in s.characters {\n                    ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    return len >= 3\n        &&\
    \ s.characters.enumerated().filter({ $0.offset % 3 == 0 }).allSatisfy({ $0.element\
    \ != s.characters.count })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpgukvwi33.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpgukvwi33.swift:15:85:\
    \ error: cannot convert value of type 'String.Element' (aka 'Character') to expected\
    \ argument type 'Int'\n        && s.characters.enumerated().filter({ $0.offset\
    \ % 3 == 0 }).allSatisfy({ $0.element != s.characters.count })\n             \
    \                                                                       ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    var i = 0\n    var j = 0\n    var k = 0\n    var count = 0\n\
    \    var last = 0\n    var last2 = 0\n    var last3 = 0\n    var last4 = 0\n \
    \   var last5 = 0\n    var last6 = 0\n    var last7 = 0\n    var last8 = 0\n \
    \   var last9 = 0\n    var last10 = 0\n    var last11 = 0\n    var last12 = 0\n\
    \    var last13 = 0\n    var last14 = 0\n    var last15 = 0\n    var last16 =\
    \ 0\n    var last17 = 0\n    var last18 = 0\n    var last19 = 0\n    var last20\
    \ = 0\n    var last21 = 0\n    var last22 = 0\n    var last23 = 0\n    var last24\
    \ = 0\n    var last25 = 0\n    var last26 = 0\n    var last27 = 0\n    var last28\
    \ = 0\n    var last29 = 0\n    var last30 = 0\n    var last31 = 0\n    var last32\
    \ = 0\n    var last33 = 0\n    var last34 = 0\n    var last35 = 0\n    var last36\
    \ = 0\n    var last37 = 0\n    var last38 = 0\n    var last39 = 0\n    var last40\
    \ = 0\n    var last41 = 0\n    var last42 = 0\n    var last43 = 0\n    var last44\
    \ = 0\n    var last45 = 0\n    var last46 = 0\n    var last47 = 0\n    var last48\
    \ = 0\n    var last49 = 0\n    var last50 = 0\n    var last51 = 0\n    var last52\
    \ = 0\n    var last53 = 0\n    var last54 = 0\n    var last55 = 0\n    var last56\
    \ = 0\n    var last57 = 0\n    var last58 = 0\n    var last59 = 0\n    var last60\
    \ = 0\n    var last61 = 0\n    var last62 = 0\n    var last63 = 0\n    var last64\
    \ = 0\n    var last65 = 0\n    var last66 = 0\n    var last67 = 0\n    var last68\
    \ = 0\n    var last69 = 0\n    var last70 = 0\n    var last71 = 0\n    var last72\
    \ = 0\n    var last73 = 0\n    var last74 = 0\n    var last75 = 0\n    var last76\
    \ = 0\n    var last77 = 0\n    var last78 = 0\n    var last79 = 0\n    var last80\
    \ = 0\n    var last81 = 0\n    var last82 = 0\n    var last83 = 0\n    var last84\
    \ = 0\n    var last85 = 0\n    var last86 = 0\n    var last87 = 0\n    var last88\
    \ = 0\n    var last89 = 0\n    var last90 = 0\n    var last91 = 0\n    var last92\
    \ = 0\n    var last93 = 0\n    var last94 = 0\n    var last95 = 0\n    var last96\
    \ = 0\n    var last97 = 0\n    var last98 = 0\n    var last99 = 0\n    var last100\
    \ = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp634mkxqe.swift:13:9: warning: initialization of variable 'i' was\
    \ never used; consider replacing with assignment to '_' or removing it\n    var\
    \ i = 0\n    ~~~~^\n    _\n/tmp/tmp634mkxqe.swift:14:9: warning: initialization\
    \ of variable 'j' was never used; consider replacing with assignment to '_' or\
    \ removing it\n    var j = 0\n    ~~~~^\n    _\n/tmp/tmp634mkxqe.swift:15:9: warning:\
    \ initialization of variable 'k' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var k = 0\n    ~~~~^\n    _\n/tmp/tmp634mkxqe.swift:16:9:\
    \ warning: initialization of variable 'count' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var count = 0\n    ~~~~^~~~~\n  \
    \  _\n/tmp/tmp634mkxqe.swift:17:9: warning: initialization of variable 'last'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var last = 0\n    ~~~~^~~~\n    _\n/tmp/tmp634mkxqe.swift:18:9: warning: initialization\
    \ of variable 'last2' was never used; consider replacing with assignment to '_'\
    \ or removing it\n    var last2 = 0\n    ~~~~^~~~~\n    _\n/tmp/tmp634mkxqe.swift:19:9:\
    \ warning: initialization of variable 'last3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var last3 = 0\n    ~~~~^~~~~\n  \
    \  _\n/tmp/tmp634mkxqe.swift:20:9: warning: initialization of variable 'last4'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var last4 = 0\n    ~~~~^~~~~\n    _\n/tmp/tmp634mkxqe.swift:21:9: warning:\
    \ initialization of variable 'last5' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var last5 = 0\n    ~~~~^~~~~\n    _\n/tmp/tmp634mkxqe.swift:22:9:\
    \ warning: initialization of variable 'last6' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var last6 = 0\n    ~~~~^~~~~\n  \
    \  _\n/tmp/tmp634mkxqe.swift:23:9: warning: initialization of variable 'last7'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var last7 = 0\n    ~~~~^~~~~\n    _\n/tmp/tmp634mkxqe.swift:24:9: warning:\
    \ initialization of variabl"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    return len >= 3\n        &&\
    \ s.characters.enumerated().forEach { index, char in\n            guard index\
    \ != 0 else {\n                return false\n            }\n            guard\
    \ char != s[index - 1] else {\n                return false\n            }\n \
    \       }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") ==\
    \ false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") ==\
    \ true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") ==\
    \ true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpevovi6z5.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpevovi6z5.swift:15:38:\
    \ error: cannot convert value of type '()' to expected argument type 'Bool'\n\
    \        && s.characters.enumerated().forEach { index, char in\n             \
    \                        ^\n/tmp/tmpevovi6z5.swift:17:24: error: unexpected non-void\
    \ return value in void function\n                return false\n              \
    \         ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.isEmpty {\n        return true\n    }\n    let len = s.count\n\
    \    if len < 3 {\n        return false\n    }\n    var last: Character?\n   \
    \ var isHappy = true\n    for c in s.characters {\n        if last != nil {\n\
    \            if c == last! {\n                isHappy = false\n              \
    \  break\n            }\n        }\n        last = c\n    }\n    return isHappy\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpsi_o4lqm.swift:22:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 {\n        return\
    \ false\n    }\n    var i = 0\n    var j = 0\n    var k = 0\n    while i < len\
    \ {\n        if s.characters[i] != s.characters[j] {\n            return false\n\
    \        }\n        i += 1\n        j += 1\n        k += 1\n        if k == 3\
    \ {\n            i = 0\n            j = 0\n            k = 0\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpaik4ea0v.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpaik4ea0v.swift:21:12:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if s.characters[i] != s.characters[j] {\n\
    \           ^~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpaik4ea0v.swift:21:14: error: 'characters' is\
    \ unavailable: Please use String directly\n        if s.characters[i] != s.characters[j]\
    \ {\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpaik4ea0v.swift:21:31: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if s.characters[i]\
    \ != s.characters[j] {\n                              ^~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpaik4ea0v.swift:21:33:\
    \ error: 'characters' is unavailable: Please use String directly\n        if s.characters[i]\
    \ != s.characters[j] {\n                                ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    return s.count >= 3 && s.isHappy()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp979idhux.swift:13:30: error: value of type 'String' has no member\
    \ 'isHappy'\n    return s.count >= 3 && s.isHappy()\n                        \
    \   ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 {\n        return\
    \ false\n    }\n    let chars = Array(s.characters)\n    let set: Set<Character>\
    \ = chars.reduce(Set<Character>()) { $0 + ($1.isEmpty ? Set<Character>() : Set($1))\
    \ }\n    return set.count == len && set.count == chars.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp6slbc5nq.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp6slbc5nq.swift:17:25:\
    \ error: 'characters' is unavailable: Please use String directly\n    let chars\
    \ = Array(s.characters)\n                        ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp6slbc5nq.swift:18:37: error: cannot convert\
    \ value of type 'Array<Set<_>>' to specified type 'Set<Character>'\n    let set:\
    \ Set<Character> = chars.reduce(Set<Character>()) { $0 + ($1.isEmpty ? Set<Character>()\
    \ : Set($1)) }\n                              ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp6slbc5nq.swift:18:73: error: value of type 'String.Element' (aka 'Character')\
    \ has no member 'isEmpty'\n    let set: Set<Character> = chars.reduce(Set<Character>())\
    \ { $0 + ($1.isEmpty ? Set<Character>() : Set($1)) }\n                       \
    \                                              ~~ ^~~~~~~\n/tmp/tmp6slbc5nq.swift:18:102:\
    \ error: initializer 'init(_:)' requires that 'String.Element' (aka 'Character')\
    \ conform to 'Sequence'\n    let set: Set<Character> = chars.reduce(Set<Character>())\
    \ { $0 + ($1.isEmpty ? Set<Character>() : Set($1)) }\n                       \
    \                                                                            \
    \  ^\nSwift.Set:14:23: note: where 'Source' = 'String.Element' (aka 'Character')\n\
    \    @inlinable public init<Source>(_ sequence: __owned Source) where Element\
    \ == Source.Element, Source : Sequence\n                      ^\n"
  stdout: ''
  timestamp: 1660014148
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    var count = 0\n    for letter in s.characters {\n        if letter\
    \ == letter {\n            count += 1\n        } else {\n            count = 0\n\
    \        }\n        if count == 3 {\n            return false\n        }\n   \
    \ }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpyxdvdiyt.swift:14:21: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in s.characters {\n                    ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 {\n        return\
    \ false\n    }\n    var lastChar = s.characters.last!\n    for char in s.characters[0..<len]\
    \ {\n        if char == lastChar {\n            return false\n        }\n    \
    \    lastChar = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmp9p90xy7g.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp9p90xy7g.swift:17:22:\
    \ error: 'characters' is unavailable: Please use String directly\n    var lastChar\
    \ = s.characters.last!\n                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp9p90xy7g.swift:18:17: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an integer range, use a String.Index\
    \ range instead.\n    for char in s.characters[0..<len] {\n                ^~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:5:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript<R>(bounds: R) -> String where R : RangeExpression,\
    \ R.Bound == Int { get }\n           ^\n/tmp/tmp9p90xy7g.swift:18:19: error: 'characters'\
    \ is unavailable: Please use String directly\n    for char in s.characters[0..<len]\
    \ {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    var count = 0\n    for letter in s {\n        if letter == letter\
    \ {\n            count += 1\n        } else if letter == letter {\n          \
    \  count += 1\n        } else if letter == letter {\n            count += 1\n\
    \        } else {\n            return false\n        }\n    }\n    return count\
    \ >= 3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmp4vbu_e94/tmp4vbu_e94.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af1b30cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af1b2dc2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af1b2dc2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af1b2dc17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4vbu_e94                        0x000055e1ba116551 <unavailable> + 5457

    5    libc.so.6                          0x00002af1b32b7460 __libc_start_main +
    245

    6    tmp4vbu_e94                        0x000055e1ba115ff9 <unavailable> + 4089

    '
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 {\n        return\
    \ false\n    }\n    let set = Set<Character>(s.characters)\n    return set.count\
    \ == len && set.count == (set.count / 3)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpizgwcqn5.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpizgwcqn5.swift:17:32:\
    \ error: 'characters' is unavailable: Please use String directly\n    let set\
    \ = Set<Character>(s.characters)\n                               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 { return false }\n    var last: Character? = nil\n\
    \    for c in s.characters {\n        if last != nil && last != c {\n        \
    \    return false\n        }\n        last = c\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdudn6lq4.swift:15:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 {\n        return\
    \ false\n    }\n    var lastChar = s.characters.last!\n    var lastCharCount =\
    \ 0\n    for char in s.characters {\n        if char == lastChar {\n         \
    \   lastCharCount += 1\n        } else {\n            lastCharCount = 1\n    \
    \        lastChar = char\n        }\n    }\n    return lastCharCount >= 3\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmphxz5d2nj.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmphxz5d2nj.swift:17:22:\
    \ error: 'characters' is unavailable: Please use String directly\n    var lastChar\
    \ = s.characters.last!\n                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmphxz5d2nj.swift:19:19: error: 'characters'\
    \ is unavailable: Please use String directly\n    for char in s.characters {\n\
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 {\n        return\
    \ false\n    }\n    var last: Character?\n    for char in s.characters {\n   \
    \     if char == last {\n            return false\n        }\n        last = char\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpktzjwjkc.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpktzjwjkc.swift:18:19:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in s.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 { return false }\n    var last: Character? = nil\n\
    \    for c in s.characters {\n        if last != nil && last != c {\n        \
    \    return false\n        }\n        last = c\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdudn6lq4.swift:15:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 {\n        return\
    \ false\n    }\n    var last: Character?\n    for char in s.characters {\n   \
    \     if char == last {\n            return false\n        }\n        last = char\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpktzjwjkc.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpktzjwjkc.swift:18:19:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in s.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 {\n        return\
    \ false\n    }\n    var lastChar = s.characters.last\n    for char in s.characters.dropLast()\
    \ {\n        if char != lastChar {\n            return false\n        }\n    \
    \    lastChar = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmp4hy7lw07.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp4hy7lw07.swift:17:22:\
    \ error: 'characters' is unavailable: Please use String directly\n    var lastChar\
    \ = s.characters.last\n                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp4hy7lw07.swift:18:19: error: 'characters'\
    \ is unavailable: Please use String directly\n    for char in s.characters.dropLast()\
    \ {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    return s.count >= 3 && is_distinct_3_consecutive(s.characters)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp6uo1r37m.swift:13:28: error: cannot find 'is_distinct_3_consecutive'\
    \ in scope\n    return s.count >= 3 && is_distinct_3_consecutive(s.characters)\n\
    \                           ^~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 {\n        return\
    \ false\n    }\n    var last: Character? = nil\n    for c in s.characters {\n\
    \        if last != nil {\n            if last == c {\n                return\
    \ false\n            }\n        }\n        last = c\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpsp6ahfpk.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpsp6ahfpk.swift:18:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 {\n        return\
    \ false\n    }\n    var lastChar = s.characters.last!\n    var lastCharIndex =\
    \ s.characters.index(s.startIndex, offsetBy: -1)\n    while lastCharIndex < s.characters.endIndex\
    \ {\n        if lastChar == s.characters.index(lastCharIndex, offsetBy: -3) {\n\
    \            lastCharIndex = s.characters.index(lastCharIndex, offsetBy: -1)\n\
    \        } else {\n            lastChar = s.characters.last!\n            lastCharIndex\
    \ = s.characters.index(s.startIndex, offsetBy: -1)\n        }\n    }\n    return\
    \ lastCharIndex == s.characters.endIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpvrz14239.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpvrz14239.swift:17:22:\
    \ error: 'characters' is unavailable: Please use String directly\n    var lastChar\
    \ = s.characters.last!\n                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpvrz14239.swift:18:27: error: 'characters'\
    \ is unavailable: Please use String directly\n    var lastCharIndex = s.characters.index(s.startIndex,\
    \ offsetBy: -1)\n                          ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpvrz14239.swift:19:29: error: 'characters'\
    \ is unavailable: Please use String directly\n    while lastCharIndex < s.characters.endIndex\
    \ {\n                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpvrz14239.swift:20:21: error: binary operator '==' cannot\
    \ be applied to operands of type 'String.Element' (aka 'Character') and 'String.Index'\n\
    \        if lastChar == s.characters.index(lastCharIndex, offsetBy: -3) {\n  \
    \         ~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvrz14239.swift:20:21:\
    \ note: overloads for '==' exist with these partially matching parameter lists:\
    \ (Character, Character), (String.Index, String.Index)\n        if lastChar ==\
    \ s.characters.index(lastCharIndex, offsetBy: -3) {\n                    ^\n/tmp/tmpvrz14239.swift:21:31:\
    \ error: 'characters' is unavailable: Please use String directly\n           \
    \ lastCharIndex = s.characters.index(lastCharIndex, offsetBy: -1)\n          \
    \                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public v"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 {\n        return\
    \ false\n    }\n    var lastChar = s[0]\n    for char in s.characters {\n    \
    \    if char != lastChar {\n            return false\n        }\n        lastChar\
    \ = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpo6fwu_sy.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpo6fwu_sy.swift:17:20:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n    var lastChar = s[0]\n                   ^~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpo6fwu_sy.swift:18:19:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in s.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.length\n    if len < 3 {\n        return false\n\
    \    }\n    var last: Character? = nil\n    var lastCount = 0\n    for char in\
    \ s.characters {\n        if char == last {\n            lastCount++\n       \
    \ } else {\n            lastCount = 1\n            last = char\n        }\n  \
    \      if lastCount > 3 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmph7wmq9e_.swift:13:17: error: value of type 'String' has no member\
    \ 'length'\n    let len = s.length\n              ~ ^~~~~~\n/tmp/tmph7wmq9e_.swift:19:19:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in s.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmph7wmq9e_.swift:21:22: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            lastCount++\n                  \
    \   ^~\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 {\n        return\
    \ false\n    }\n    var lastChar = s.characters.last\n    for char in s.characters[0..<len]\
    \ {\n        if char == lastChar {\n            return false\n        }\n    \
    \    lastChar = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmpeilisxpe.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpeilisxpe.swift:17:22:\
    \ error: 'characters' is unavailable: Please use String directly\n    var lastChar\
    \ = s.characters.last\n                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpeilisxpe.swift:18:17: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an integer range, use a String.Index\
    \ range instead.\n    for char in s.characters[0..<len] {\n                ^~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:5:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript<R>(bounds: R) -> String where R : RangeExpression,\
    \ R.Bound == Int { get }\n           ^\n/tmp/tmpeilisxpe.swift:18:19: error: 'characters'\
    \ is unavailable: Please use String directly\n    for char in s.characters[0..<len]\
    \ {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 {\n        return\
    \ false\n    }\n    var last: Character?\n    for char in s.characters {\n   \
    \     if char == last {\n            return false\n        }\n        last = char\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpktzjwjkc.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpktzjwjkc.swift:18:19:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in s.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    var count = 0\n    for letter in s.characters {\n        if let\
    \ _ = s.range(of: letter) {\n            count += 1\n        }\n    }\n    return\
    \ count >= 3 && count == s.characters.count / 3\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmpoluirha7.swift:14:21: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in s.characters {\n                    ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpoluirha7.swift:15:22:\
    \ error: value of type 'String' has no member 'range'\n        if let _ = s.range(of:\
    \ letter) {\n                   ~ ^~~~~\n/tmp/tmpoluirha7.swift:19:37: error:\
    \ 'characters' is unavailable: Please use String directly\n    return count >=\
    \ 3 && count == s.characters.count / 3\n                                    ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    var count = 0\n    for letter in s {\n        if letter == letter\
    \ {\n            count += 1\n        } else if letter == letter + letter {\n \
    \           count += 1\n        } else if letter == letter + letter + letter {\n\
    \            count += 1\n        } else {\n            return false\n        }\n\
    \    }\n    return count >= 3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpt4eymjlm.swift:17:36: error: binary operator '+' cannot be applied\
    \ to two 'Character' operands\n        } else if letter == letter + letter {\n\
    \                            ~~~~~~ ^ ~~~~~~\n/tmp/tmpt4eymjlm.swift:19:45: error:\
    \ binary operator '+' cannot be applied to two 'Character' operands\n        }\
    \ else if letter == letter + letter + letter {\n                            ~~~~~~~~~~~~~~~\
    \ ^ ~~~~~~\n/tmp/tmpt4eymjlm.swift:19:36: error: binary operator '+' cannot be\
    \ applied to two 'Character' operands\n        } else if letter == letter + letter\
    \ + letter {\n                            ~~~~~~ ^ ~~~~~~\n"
  stdout: ''
  timestamp: 1660014149
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 {\n        return\
    \ false\n    }\n    var count = 0\n    for char in s.characters {\n        if\
    \ char == char {\n            count += 1\n        } else {\n            count\
    \ = 0\n        }\n        if count == 3 {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp6qsli4wg.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp6qsli4wg.swift:18:19:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in s.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    return len >= 3\n        &&\
    \ s.characters.enumerated().map({ (index, char) in\n            return char ==\
    \ s.characters.characters[index]\n        }).reduce(true) { ($0 && $1) || ($0\
    \ && $2) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") ==\
    \ false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") ==\
    \ true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") ==\
    \ true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9v7f4jt6.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp9v7f4jt6.swift:17:25:\
    \ error: contextual closure type '(Bool, Bool) throws -> Bool' expects 2 arguments,\
    \ but 3 were used in closure body\n        }).reduce(true) { ($0 && $1) || ($0\
    \ && $2) }\n                        ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    return s.count > 3 && s.isHappy()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnxh7ysg1.swift:13:29: error: value of type 'String' has no member\
    \ 'isHappy'\n    return s.count > 3 && s.isHappy()\n                         \
    \ ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 {\n        return\
    \ false\n    }\n    var last: Character?\n    for char in s.characters {\n   \
    \     if last == char {\n            return false\n        }\n        last = char\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpbhun7hhr.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpbhun7hhr.swift:18:19:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in s.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 {\n        return\
    \ false\n    }\n    var lastChar = s.characters.last\n    var isHappy = true\n\
    \    for char in s.characters.dropLast() {\n        if char != lastChar {\n  \
    \          isHappy = false\n        }\n        lastChar = char\n    }\n    return\
    \ isHappy\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") ==\
    \ false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") ==\
    \ true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") ==\
    \ true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpu1m9mu_m.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpu1m9mu_m.swift:17:22:\
    \ error: 'characters' is unavailable: Please use String directly\n    var lastChar\
    \ = s.characters.last\n                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpu1m9mu_m.swift:19:19: error: 'characters'\
    \ is unavailable: Please use String directly\n    for char in s.characters.dropLast()\
    \ {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 {\n        return\
    \ false\n    }\n    var lastChar = s[0]\n    for char in s.characters {\n    \
    \    if char != lastChar {\n            return false\n        }\n        lastChar\
    \ = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpo6fwu_sy.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpo6fwu_sy.swift:17:20:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n    var lastChar = s[0]\n                   ^~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpo6fwu_sy.swift:18:19:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in s.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 { return false }\n    var last: Character? = nil\n\
    \    for c in s.characters {\n        if last != nil && last == c { return false\
    \ }\n        last = c\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmpsdtqw22w.swift:15:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 {\n        return\
    \ false\n    }\n    var last: Character?\n    var lastCount: Int = 0\n    for\
    \ char in s.characters {\n        if char == last! {\n            lastCount++\n\
    \        } else {\n            lastCount = 1\n            last = char\n      \
    \  }\n        if lastCount > 3 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpamrt6kqs.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpamrt6kqs.swift:19:19:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in s.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpamrt6kqs.swift:21:22: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            lastCount++\n                  \
    \   ^~\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    var i = 0\n    var j = 0\n    var k = 0\n    var count = 0\n\
    \    for _ in s.characters {\n        if i == 0 {\n            i += 1\n      \
    \      continue\n        }\n        if j == 0 {\n            j += 1\n        \
    \    continue\n        }\n        if k == 0 {\n            k += 1\n          \
    \  continue\n        }\n        if s[i] == s[j] {\n            count += 1\n  \
    \          i += 1\n            j += 1\n            k += 1\n            continue\n\
    \        }\n        if count == 3 {\n            return false\n        }\n   \
    \     count = 0\n        i += 1\n        j += 1\n        k += 1\n    }\n    return\
    \ count == 3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpcd1q7wq8.swift:17:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for _ in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpcd1q7wq8.swift:30:12:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if s[i] == s[j] {\n           ^~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpcd1q7wq8.swift:30:20:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if s[i] == s[j] {\n                   ^~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    return s.count >= 3 && s.isHappy()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp979idhux.swift:13:30: error: value of type 'String' has no member\
    \ 'isHappy'\n    return s.count >= 3 && s.isHappy()\n                        \
    \   ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    return s.count > 3 && s.isHappy()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnxh7ysg1.swift:13:29: error: value of type 'String' has no member\
    \ 'isHappy'\n    return s.count > 3 && s.isHappy()\n                         \
    \ ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 {\n        return\
    \ false\n    }\n    var lastChar = s.characters.last!\n    var lastCharCount =\
    \ 0\n    for char in s.characters {\n        if char == lastChar {\n         \
    \   lastCharCount += 1\n        } else {\n            lastCharCount = 0\n    \
    \    }\n        if lastCharCount > 3 {\n            return false\n        }\n\
    \        lastChar = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpj2xdi5nk.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpj2xdi5nk.swift:17:22:\
    \ error: 'characters' is unavailable: Please use String directly\n    var lastChar\
    \ = s.characters.last!\n                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpj2xdi5nk.swift:19:19: error: 'characters'\
    \ is unavailable: Please use String directly\n    for char in s.characters {\n\
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.isEmpty {\n        return true\n    }\n    if s.count <\
    \ 3 {\n        return false\n    }\n    var last: Character?\n    for c in s.characters\
    \ {\n        if last == c {\n            continue\n        }\n        if last\
    \ != nil {\n            return false\n        }\n        last = c\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpug09h4s1.swift:20:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 {\n        return\
    \ false\n    }\n    var last: Character?\n    var lastCount: Int = 0\n    for\
    \ char in s.characters {\n        if char == last {\n            lastCount++\n\
    \        } else {\n            last = char\n            lastCount = 1\n      \
    \  }\n    }\n    return lastCount >= 3 && lastCount <= len\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpi5fgba0j.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpi5fgba0j.swift:19:19:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in s.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpi5fgba0j.swift:21:22: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            lastCount++\n                  \
    \   ^~\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    return s.isHappy()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpcpj78fyu.swift:13:14: error: value of type 'String' has no member\
    \ 'isHappy'\n    return s.isHappy()\n           ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    return s.count > 3 && s.isHappy()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnxh7ysg1.swift:13:29: error: value of type 'String' has no member\
    \ 'isHappy'\n    return s.count > 3 && s.isHappy()\n                         \
    \ ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.isEmpty {\n        return false\n    }\n    if s.count <\
    \ 3 {\n        return false\n    }\n    var last: Character?\n    for char in\
    \ s.characters {\n        if char == last {\n            return false\n      \
    \  }\n        last = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp4izofrqc.swift:20:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 {\n        return\
    \ false\n    }\n    var lastChar = s.characters.last!\n    var isHappy = true\n\
    \    for char in s.characters.dropLast() {\n        if char != lastChar {\n  \
    \          isHappy = false\n            break\n        }\n        lastChar = char\n\
    \    }\n    return isHappy\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpwea08705.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpwea08705.swift:17:22:\
    \ error: 'characters' is unavailable: Please use String directly\n    var lastChar\
    \ = s.characters.last!\n                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpwea08705.swift:19:19: error: 'characters'\
    \ is unavailable: Please use String directly\n    for char in s.characters.dropLast()\
    \ {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 {\n        return\
    \ false\n    }\n    var count = 0\n    for c in s.characters {\n        if c ==\
    \ s.characters.last {\n            count++\n        } else {\n            count\
    \ = 0\n        }\n        if count > 3 {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_ci8027n.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp_ci8027n.swift:18:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp_ci8027n.swift:19:19: error: 'characters' is unavailable:\
    \ Please use String directly\n        if c == s.characters.last {\n          \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp_ci8027n.swift:20:18:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  count++\n                 ^~\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    var count = 0\n    for letter in s {\n        if letter == letter\
    \ {\n            count += 1\n        } else if letter == letter {\n          \
    \  count += 1\n        } else if letter == letter {\n            count += 1\n\
    \        } else {\n            return false\n        }\n    }\n    return count\
    \ >= 3 && count == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpcq1a4pag/tmpcq1a4pag.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e20735c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e2042cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e2042c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e2042b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcq1a4pag                        0x0000559a09ce95a1 <unavailable> + 5537

    5    libc.so.6                          0x00002b8e20921460 __libc_start_main +
    245

    6    tmpcq1a4pag                        0x0000559a09ce9049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1660014148
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    var count = 0\n    for letter in s {\n        if letter == letter\
    \ {\n            count += 1\n        } else if letter == letter + letter {\n \
    \           count += 1\n        } else if letter == letter + letter + letter {\n\
    \            count += 1\n        } else {\n            return false\n        }\n\
    \    }\n    return count >= 3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpt4eymjlm.swift:17:36: error: binary operator '+' cannot be applied\
    \ to two 'Character' operands\n        } else if letter == letter + letter {\n\
    \                            ~~~~~~ ^ ~~~~~~\n/tmp/tmpt4eymjlm.swift:19:45: error:\
    \ binary operator '+' cannot be applied to two 'Character' operands\n        }\
    \ else if letter == letter + letter + letter {\n                            ~~~~~~~~~~~~~~~\
    \ ^ ~~~~~~\n/tmp/tmpt4eymjlm.swift:19:36: error: binary operator '+' cannot be\
    \ applied to two 'Character' operands\n        } else if letter == letter + letter\
    \ + letter {\n                            ~~~~~~ ^ ~~~~~~\n"
  stdout: ''
  timestamp: 1660014149
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    var count = 0\n    for letter in s {\n        if letter == letter\
    \ {\n            count += 1\n        }\n    }\n    return count >= 3 && count\
    \ == s.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmppaq764yp.swift:19:37: error: 'characters' is unavailable: Please\
    \ use String directly\n    return count >= 3 && count == s.characters.count\n\
    \                                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    return s.count >= 3 && s.isHappy()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp979idhux.swift:13:30: error: value of type 'String' has no member\
    \ 'isHappy'\n    return s.count >= 3 && s.isHappy()\n                        \
    \   ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 { return false }\n\
    \    let set = Set<String>()\n    for index in 0..<len {\n        let letter =\
    \ String(s.characters[index])\n        if !set.contains(letter) {\n          \
    \  set.insert(letter)\n        }\n    }\n    return set.count == len\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpo64wkzx0.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpo64wkzx0.swift:17:29:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        let letter = String(s.characters[index])\n\
    \                            ^~~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpo64wkzx0.swift:17:31: error: 'characters'\
    \ is unavailable: Please use String directly\n        let letter = String(s.characters[index])\n\
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpo64wkzx0.swift:19:17: error: cannot use mutating member\
    \ on immutable value: 'set' is a 'let' constant\n            set.insert(letter)\n\
    \            ~~~ ^\n/tmp/tmpo64wkzx0.swift:15:5: note: change 'let' to 'var' to\
    \ make it mutable\n    let set = Set<String>()\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    var count = 0\n    for letter in s {\n        if letter == letter\
    \ {\n            count += 1\n        } else if letter == letter {\n          \
    \  count += 1\n        } else if letter == letter {\n            count += 1\n\
    \        } else {\n            return false\n        }\n    }\n    return count\
    \ >= 3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmp4vbu_e94/tmp4vbu_e94.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af1b30cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af1b2dc2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af1b2dc2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af1b2dc17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4vbu_e94                        0x000055e1ba116551 <unavailable> + 5457

    5    libc.so.6                          0x00002af1b32b7460 __libc_start_main +
    245

    6    tmp4vbu_e94                        0x000055e1ba115ff9 <unavailable> + 4089

    '
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 {\n        return\
    \ false\n    }\n    var last: Character?\n    for char in s.characters {\n   \
    \     if char == last {\n            return false\n        }\n        last = char\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpktzjwjkc.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpktzjwjkc.swift:18:19:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in s.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.length\n    if len < 3 {\n        return false\n\
    \    }\n    let lastChar = s[len-1]\n    var isHappy = true\n    for index in\
    \ stride(from: len-2, through: 0, by: -1) {\n        if s[index] != lastChar {\n\
    \            isHappy = false\n            break\n        }\n    }\n    return\
    \ isHappy\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") ==\
    \ false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") ==\
    \ true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") ==\
    \ true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2cf8vtpz.swift:13:17: error: value of type 'String' has no member\
    \ 'length'\n    let len = s.length\n              ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 {\n        return\
    \ false\n    }\n    var last: Character?\n    for c in s.characters {\n      \
    \  if last != nil {\n            if c == last! {\n                return false\n\
    \            }\n        }\n        last = c\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7a3qc3ml.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp7a3qc3ml.swift:18:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    return s.count >= 3 && s.isHappy()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp979idhux.swift:13:30: error: value of type 'String' has no member\
    \ 'isHappy'\n    return s.count >= 3 && s.isHappy()\n                        \
    \   ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    var count = 0\n    for letter in s {\n        if letter == letter\
    \ {\n            count += 1\n        }\n    }\n    return count >= 3 && count\
    \ == s.count / 3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpl91it2l3/tmpl91it2l3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb14f7fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb14c76b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb14c76988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb14c757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl91it2l3                        0x000055ca69aa459b <unavailable> + 5531

    5    libc.so.6                          0x00002acb1516b460 __libc_start_main +
    245

    6    tmpl91it2l3                        0x000055ca69aa40e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660014148
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    var count = 0\n    for letter in s {\n        if letter == letter\
    \ {\n            count += 1\n        } else {\n            count = 0\n       \
    \ }\n        if count == 3 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpdja6y9oh/tmpdja6y9oh.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf36bd9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf368d0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf368d0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf368cf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdja6y9oh                        0x00005649aded936d <unavailable> + 4973

    5    libc.so.6                          0x00002aaf36dc5460 __libc_start_main +
    245

    6    tmpdja6y9oh                        0x00005649aded8ff9 <unavailable> + 4089

    '
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 {\n        return\
    \ false\n    }\n    var lastChar = s.characters.last!\n    var isHappy = true\n\
    \    for char in s.characters[0..<len] {\n        if char == lastChar {\n    \
    \        isHappy = false\n            break\n        }\n        lastChar = char\n\
    \    }\n    return isHappy\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpfz86t_3b.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpfz86t_3b.swift:17:22:\
    \ error: 'characters' is unavailable: Please use String directly\n    var lastChar\
    \ = s.characters.last!\n                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpfz86t_3b.swift:19:17: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an integer range, use a String.Index\
    \ range instead.\n    for char in s.characters[0..<len] {\n                ^~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:5:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript<R>(bounds: R) -> String where R : RangeExpression,\
    \ R.Bound == Int { get }\n           ^\n/tmp/tmpfz86t_3b.swift:19:19: error: 'characters'\
    \ is unavailable: Please use String directly\n    for char in s.characters[0..<len]\
    \ {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660014148
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 { return false }\n\
    \    var last: Character? = nil\n    for c in s.characters {\n        if last\
    \ != nil && last != c {\n            return false\n        }\n        last = c\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpo5zhr3l9.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpo5zhr3l9.swift:16:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014148
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    var count = 0\n    for letter in s {\n        if letter == letter\
    \ {\n            count += 1\n        } else if letter == letter + letter {\n \
    \           count += 1\n        } else if letter == letter + letter + letter {\n\
    \            count += 1\n        } else {\n            return false\n        }\n\
    \    }\n    return count >= 3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpt4eymjlm.swift:17:36: error: binary operator '+' cannot be applied\
    \ to two 'Character' operands\n        } else if letter == letter + letter {\n\
    \                            ~~~~~~ ^ ~~~~~~\n/tmp/tmpt4eymjlm.swift:19:45: error:\
    \ binary operator '+' cannot be applied to two 'Character' operands\n        }\
    \ else if letter == letter + letter + letter {\n                            ~~~~~~~~~~~~~~~\
    \ ^ ~~~~~~\n/tmp/tmpt4eymjlm.swift:19:36: error: binary operator '+' cannot be\
    \ applied to two 'Character' operands\n        } else if letter == letter + letter\
    \ + letter {\n                            ~~~~~~ ^ ~~~~~~\n"
  stdout: ''
  timestamp: 1660014149
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.length\n    if len < 3 {\n        return false\n\
    \    }\n    var lastChar = s[0]\n    for char in s.characters {\n        if char\
    \ == lastChar {\n            return false\n        }\n        lastChar = char\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpr90j3f68.swift:13:17: error: value of type 'String' has no member\
    \ 'length'\n    let len = s.length\n              ~ ^~~~~~\n/tmp/tmpr90j3f68.swift:17:20:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n    var lastChar = s[0]\n                   ^~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpr90j3f68.swift:18:19:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in s.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014148
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.isEmpty {\n        return true\n    }\n    let len = s.count\n\
    \    if len < 3 {\n        return false\n    }\n    var last: Character? = nil\n\
    \    var lastCount = 0\n    for c in s.characters {\n        if last == nil {\n\
    \            last = c\n            lastCount = 1\n        } else if last != c\
    \ {\n            if lastCount > 3 {\n                return false\n          \
    \  }\n            lastCount = 1\n            last = c\n        } else {\n    \
    \        lastCount++\n        }\n    }\n    return lastCount >= 3\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjpvz7g4t.swift:22:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpjpvz7g4t.swift:33:22:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  lastCount++\n                     ^~\n"
  stdout: ''
  timestamp: 1660014148
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.isEmpty {\n        return false\n    }\n    if s.count ==\
    \ 3 {\n        return true\n    }\n    var lastChar = s[0]\n    for char in s.characters\
    \ {\n        if char == lastChar {\n            return false\n        }\n    \
    \    lastChar = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmp7xad5a6v.swift:19:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var lastChar\
    \ = s[0]\n                   ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmp7xad5a6v.swift:20:19: error: 'characters' is\
    \ unavailable: Please use String directly\n    for char in s.characters {\n  \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660014148
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    return len >= 3\n        &&\
    \ s.characters.enumerated().map({ (index, char) in\n            return index ==\
    \ 3 && char == char\n        }).reduce(true, { $0 && $1 })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpa4n69eqh.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpa4n69eqh.swift:15:14:\
    \ error: 'characters' is unavailable: Please use String directly\n        && s.characters.enumerated().map({\
    \ (index, char) in\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014148
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 {\n        return\
    \ false\n    }\n    var lastChar = s.characters.last!\n    var lastCharCount =\
    \ 1\n    for char in s.characters {\n        if char == lastChar {\n         \
    \   lastCharCount += 1\n        } else {\n            lastCharCount = 1\n    \
    \        lastChar = char\n        }\n    }\n    return len >= 3\n        && lastCharCount\
    \ == 3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp0xqcyipq.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp0xqcyipq.swift:17:22:\
    \ error: 'characters' is unavailable: Please use String directly\n    var lastChar\
    \ = s.characters.last!\n                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp0xqcyipq.swift:19:19: error: 'characters'\
    \ is unavailable: Please use String directly\n    for char in s.characters {\n\
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660014148
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 {\n        return\
    \ false\n    }\n    let mut hash = [Int]()\n    for ch in s.characters {\n   \
    \     hash[ch] = hash[ch] ?? 0\n        hash[ch]++\n    }\n    return hash[s.characters.last!]\
    \ >= 3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp8y25vy38.swift:17:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut hash = [Int]()\n\
    \            ^\n/tmp/tmp8y25vy38.swift:17:13: note: join the identifiers together\n\
    \    let mut hash = [Int]()\n        ~~~~^~~~\n        muthash\n/tmp/tmp8y25vy38.swift:17:13:\
    \ note: join the identifiers together with camel-case\n    let mut hash = [Int]()\n\
    \        ~~~~^~~~\n        mutHash\n/tmp/tmp8y25vy38.swift:13:17: error: 'characters'\
    \ is unavailable: Please use String directly\n    let len = s.characters.count\n\
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp8y25vy38.swift:18:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    for ch in s.characters {\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp8y25vy38.swift:19:9:\
    \ error: cannot find 'hash' in scope\n        hash[ch] = hash[ch] ?? 0\n     \
    \   ^~~~\n/tmp/tmp8y25vy38.swift:19:20: error: cannot find 'hash' in scope\n \
    \       hash[ch] = hash[ch] ?? 0\n                   ^~~~\n/tmp/tmp8y25vy38.swift:20:17:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        hash[ch]++\n\
    \                ^~\n/tmp/tmp8y25vy38.swift:20:9: error: cannot find 'hash' in\
    \ scope\n        hash[ch]++\n        ^~~~\n/tmp/tmp8y25vy38.swift:22:12: error:\
    \ cannot find 'hash' in scope\n    return hash[s.characters.last!] >= 3\n    \
    \       ^~~~\n"
  stdout: ''
  timestamp: 1660014148
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 { return false }\n    var last: Character? = nil\n\
    \    for c in s.characters {\n        if last == c { return false }\n        last\
    \ = c\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7qwes1gk.swift:15:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    var count = 0\n    for letter in s {\n        if letter == letter\
    \ {\n            count += 1\n        }\n    }\n    return count >= 3 && count\
    \ == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpagcfvfhf/tmpagcfvfhf.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafc89d9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafc86d0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafc86d0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafc86cf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpagcfvfhf                        0x00005643c91f65a1 <unavailable> + 5537

    5    libc.so.6                          0x00002aafc8bc5460 __libc_start_main +
    245

    6    tmpagcfvfhf                        0x00005643c91f6049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1660014147
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    var count = 0\n    for letter in s {\n        if letter == letter\
    \ {\n            count += 1\n        } else if letter == letter {\n          \
    \  count += 1\n        } else if letter == letter {\n            count += 1\n\
    \        } else {\n            return false\n        }\n    }\n    return count\
    \ >= 3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmp4vbu_e94/tmp4vbu_e94.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af1b30cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af1b2dc2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af1b2dc2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af1b2dc17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4vbu_e94                        0x000055e1ba116551 <unavailable> + 5457

    5    libc.so.6                          0x00002af1b32b7460 __libc_start_main +
    245

    6    tmp4vbu_e94                        0x000055e1ba115ff9 <unavailable> + 4089

    '
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    return s.isHappy || (s.isHappy = s.isDistinctFrom(s.prefix(3)))\
    \ \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpgpprrhxq.swift:13:14: error: value of type 'String' has no member\
    \ 'isHappy'\n    return s.isHappy || (s.isHappy = s.isDistinctFrom(s.prefix(3)))\
    \ \n           ~ ^~~~~~~\n/tmp/tmpgpprrhxq.swift:13:36: error: use of '=' in a\
    \ boolean context, did you mean '=='?\n    return s.isHappy || (s.isHappy = s.isDistinctFrom(s.prefix(3)))\
    \ \n                           ~~~~~~~ ^   ~~~~~~~~~~~~~~\n                  \
    \                 ==\n/tmp/tmpgpprrhxq.swift:13:28: error: value of type 'String'\
    \ has no member 'isHappy'\n    return s.isHappy || (s.isHappy = s.isDistinctFrom(s.prefix(3)))\
    \ \n                         ~ ^~~~~~~\n/tmp/tmpgpprrhxq.swift:13:40: error: value\
    \ of type 'String' has no member 'isDistinctFrom'\n    return s.isHappy || (s.isHappy\
    \ = s.isDistinctFrom(s.prefix(3))) \n                                     ~ ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014148
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 {\n        return\
    \ false\n    }\n    let mut last: Character? = nil\n    for c in s.characters\
    \ {\n        if last == c {\n            continue\n        }\n        if last\
    \ != nil {\n            if last != c {\n                return false\n       \
    \     }\n        } else {\n            last = c\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp6lptz6ki.swift:17:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut last: Character?\
    \ = nil\n            ^\n/tmp/tmp6lptz6ki.swift:17:13: note: join the identifiers\
    \ together\n    let mut last: Character? = nil\n        ~~~~^~~~\n        mutlast\n\
    /tmp/tmp6lptz6ki.swift:17:13: note: join the identifiers together with camel-case\n\
    \    let mut last: Character? = nil\n        ~~~~^~~~\n        mutLast\n/tmp/tmp6lptz6ki.swift:13:17:\
    \ error: 'characters' is unavailable: Please use String directly\n    let len\
    \ = s.characters.count\n                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp6lptz6ki.swift:18:16: error: 'characters' is unavailable:\
    \ Please use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp6lptz6ki.swift:19:12:\
    \ error: cannot find 'last' in scope\n        if last == c {\n           ^~~~\n\
    /tmp/tmp6lptz6ki.swift:22:12: error: cannot find 'last' in scope\n        if last\
    \ != nil {\n           ^~~~\n/tmp/tmp6lptz6ki.swift:23:16: error: cannot find\
    \ 'last' in scope\n            if last != c {\n               ^~~~\n/tmp/tmp6lptz6ki.swift:27:13:\
    \ error: cannot find 'last' in scope\n            last = c\n            ^~~~\n"
  stdout: ''
  timestamp: 1660014148
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    return len >= 3\n        &&\
    \ s.characters.enumerated().map({ (index, char) -> Bool in\n            return\
    \ index%3 == 0\n                && char != s.characters.last!\n        }).reduce(true,\
    \ { (prev, next) -> Bool in\n            return prev && next\n        })\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpqihw3w2h.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpqihw3w2h.swift:15:14:\
    \ error: 'characters' is unavailable: Please use String directly\n        && s.characters.enumerated().map({\
    \ (index, char) -> Bool in\n             ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpqihw3w2h.swift:17:30: error: 'characters'\
    \ is unavailable: Please use String directly\n                && char != s.characters.last!\n\
    \                             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014148
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    var last:\
    \ Character? = nil\n    for c in s {\n        if last == c {\n            return\
    \ false\n        }\n        last = c\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: Exception
  stderr: 'tmp9ad87n84/tmp9ad87n84.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad5a9e66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad5a9b5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad5a9b5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad5a9b5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9ad87n84                        0x0000563df4db2888 <unavailable> + 6280

    5    libc.so.6                          0x00002ad5aa052460 __libc_start_main +
    245

    6    tmp9ad87n84                        0x0000563df4db2049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1660014148
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 {\n        return\
    \ false\n    }\n    let mut chars = String()\n    for i in 0..<len {\n       \
    \ chars.append(s.characters[i])\n    }\n    let mut seen = Set<String>()\n   \
    \ for i in 0..<len {\n        if seen.contains(chars.substring(i, i+3)) {\n  \
    \          return false\n        }\n        seen.insert(chars.substring(i, i+3))\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpbw1_yycj.swift:17:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut chars =\
    \ String()\n            ^\n/tmp/tmpbw1_yycj.swift:17:13: note: join the identifiers\
    \ together\n    let mut chars = String()\n        ~~~~^~~~~\n        mutchars\n\
    /tmp/tmpbw1_yycj.swift:17:13: note: join the identifiers together with camel-case\n\
    \    let mut chars = String()\n        ~~~~^~~~~\n        mutChars\n/tmp/tmpbw1_yycj.swift:21:13:\
    \ error: found an unexpected second identifier in constant declaration; is there\
    \ an accidental break?\n    let mut seen = Set<String>()\n            ^\n/tmp/tmpbw1_yycj.swift:21:13:\
    \ note: join the identifiers together\n    let mut seen = Set<String>()\n    \
    \    ~~~~^~~~\n        mutseen\n/tmp/tmpbw1_yycj.swift:21:13: note: join the identifiers\
    \ together with camel-case\n    let mut seen = Set<String>()\n        ~~~~^~~~\n\
    \        mutSeen\n/tmp/tmpbw1_yycj.swift:13:17: error: 'characters' is unavailable:\
    \ Please use String directly\n    let len = s.characters.count\n             \
    \   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpbw1_yycj.swift:19:9:\
    \ error: cannot find 'chars' in scope\n        chars.append(s.characters[i])\n\
    \        ^~~~~\n/tmp/tmpbw1_yycj.swift:21:9: error: invalid redeclaration of 'mut'\n\
    \    let mut seen = Set<String>()\n        ^\n/tmp/tmpbw1_yycj.swift:17:9: note:\
    \ 'mut' previously declared here\n    let mut chars = String()\n        ^\n/tmp/tmpbw1_yycj.swift:23:12:\
    \ error: cannot find 'seen' in scope\n        if seen.contains(chars.substring(i,\
    \ i+3)) {\n           ^~~~\n/tmp/tmpbw1_yycj.swift:23:26: error: cannot find 'chars'\
    \ in scope\n        if seen.contains(chars.substring(i, i+3)) {\n            \
    \             ^~~~~\n/tmp/tmpbw1_yycj.swift:26:9: error: cannot find 'seen' in\
    \ scope\n        seen.insert(chars.substring(i, i+3))\n        ^~~~\n/tmp/tmpbw1_yycj.swift:26:21:\
    \ error: cannot find 'chars' in scope\n        seen.insert(chars.substring(i,\
    \ i+3))\n              "
  stdout: ''
  timestamp: 1660014148
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.isEmpty {\n        return false\n    }\n    if s.count <\
    \ 3 {\n        return false\n    }\n    var lastChar = s[0]\n    for char in s.dropFirst()\
    \ {\n        if char == lastChar {\n            return false\n        }\n    \
    \    lastChar = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmp6y4xo1t0.swift:19:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var lastChar\
    \ = s[0]\n                   ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014148
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 {\n        return\
    \ false\n    }\n    var last: Character?\n    for char in s.characters {\n   \
    \     if char == last {\n            return false\n        }\n        last = char\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpktzjwjkc.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpktzjwjkc.swift:18:19:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in s.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    return len >= 3 && s.characters.enumerated().allSatisfy({\
    \ $0.offset % 3 == 0 && $0.element != s[$0.offset] })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp0yqcy2ml.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp0yqcy2ml.swift:14:26:\
    \ error: 'characters' is unavailable: Please use String directly\n    return len\
    \ >= 3 && s.characters.enumerated().allSatisfy({ $0.offset % 3 == 0 && $0.element\
    \ != s[$0.offset] })\n                         ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp0yqcy2ml.swift:14:99: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \    return len >= 3 && s.characters.enumerated().allSatisfy({ $0.offset % 3 ==\
    \ 0 && $0.element != s[$0.offset] })\n                                       \
    \                                                           ^~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014148
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    return s.count >= 3 && s.isHappy()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp979idhux.swift:13:30: error: value of type 'String' has no member\
    \ 'isHappy'\n    return s.count >= 3 && s.isHappy()\n                        \
    \   ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    return s.count >= 3 && s.isHappy()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp979idhux.swift:13:30: error: value of type 'String' has no member\
    \ 'isHappy'\n    return s.count >= 3 && s.isHappy()\n                        \
    \   ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 {\n        return\
    \ false\n    }\n    var last: Character?\n    for char in s.characters {\n   \
    \     if char != last {\n            return false\n        }\n        last = char\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_jtz4h33.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp_jtz4h33.swift:18:19:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in s.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014148
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 {\n        return\
    \ false\n    }\n    var lastChar = s.characters.last!\n    var isHappy = true\n\
    \    for char in s.characters {\n        if char == lastChar {\n            isHappy\
    \ = false\n        }\n        lastChar = char\n    }\n    return isHappy\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9b3dd18z.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp9b3dd18z.swift:17:22:\
    \ error: 'characters' is unavailable: Please use String directly\n    var lastChar\
    \ = s.characters.last!\n                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp9b3dd18z.swift:19:19: error: 'characters'\
    \ is unavailable: Please use String directly\n    for char in s.characters {\n\
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660014148
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 {\n        return\
    \ false\n    }\n    var i = 0\n    var j = 0\n    var k = 0\n    while i < len\
    \ {\n        if s[i] == s[j] {\n            i += 1\n            j += 1\n     \
    \       k = 0\n        } else {\n            k += 1\n            if k == 3 {\n\
    \                return false\n            }\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpku9n870z.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpku9n870z.swift:21:12:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if s[i] == s[j] {\n           ^~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpku9n870z.swift:21:20:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if s[i] == s[j] {\n                   ^~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014148
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    var count = 0\n    for letter in s {\n        if letter == letter\
    \ {\n            count += 1\n        } else if letter == letter {\n          \
    \  count += 1\n        } else if letter == letter {\n            count += 1\n\
    \        } else {\n            return false\n        }\n    }\n    return count\
    \ >= 3 && count % 3 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpnlkofxiu/tmpnlkofxiu.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b23f7797c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b23f748eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b23f748e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b23f748d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnlkofxiu                        0x000056540cbe953b <unavailable> + 5435

    5    libc.so.6                          0x00002b23f7983460 __libc_start_main +
    245

    6    tmpnlkofxiu                        0x000056540cbe9089 <unavailable> + 4233

    '
  stdout: ''
  timestamp: 1660014148
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    return s.count >= 3 && is_distinct_3(s.characters)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmposr79gaz.swift:13:28: error: cannot find 'is_distinct_3' in scope\n\
    \    return s.count >= 3 && is_distinct_3(s.characters)\n                    \
    \       ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014148
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    var count = 0\n    for letter in s {\n        if letter == letter\
    \ {\n            count += 1\n        } else if letter == letter + letter {\n \
    \           count += 1\n        } else if letter == letter + letter + letter {\n\
    \            count += 1\n        } else {\n            return false\n        }\n\
    \    }\n    return count >= 3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpt4eymjlm.swift:17:36: error: binary operator '+' cannot be applied\
    \ to two 'Character' operands\n        } else if letter == letter + letter {\n\
    \                            ~~~~~~ ^ ~~~~~~\n/tmp/tmpt4eymjlm.swift:19:45: error:\
    \ binary operator '+' cannot be applied to two 'Character' operands\n        }\
    \ else if letter == letter + letter + letter {\n                            ~~~~~~~~~~~~~~~\
    \ ^ ~~~~~~\n/tmp/tmpt4eymjlm.swift:19:36: error: binary operator '+' cannot be\
    \ applied to two 'Character' operands\n        } else if letter == letter + letter\
    \ + letter {\n                            ~~~~~~ ^ ~~~~~~\n"
  stdout: ''
  timestamp: 1660014149
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    var count = 0\n    for letter in s {\n        if letter == letter\
    \ {\n            count += 1\n        } else if letter == letter {\n          \
    \  count += 1\n        } else if letter == letter {\n            count += 1\n\
    \        } else {\n            return false\n        }\n    }\n    return count\
    \ >= 3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmp4vbu_e94/tmp4vbu_e94.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af1b30cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af1b2dc2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af1b2dc2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af1b2dc17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4vbu_e94                        0x000055e1ba116551 <unavailable> + 5457

    5    libc.so.6                          0x00002af1b32b7460 __libc_start_main +
    245

    6    tmp4vbu_e94                        0x000055e1ba115ff9 <unavailable> + 4089

    '
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 {\n        return\
    \ false\n    }\n    var lastChar = s.characters.last!\n    var isHappy = true\n\
    \    for i in 1..<len {\n        if s.characters.contains(lastChar) {\n      \
    \      isHappy = false\n            break\n        }\n        lastChar = s[i]\n\
    \    }\n    return isHappy\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpyb6ks57k.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpyb6ks57k.swift:17:22:\
    \ error: 'characters' is unavailable: Please use String directly\n    var lastChar\
    \ = s.characters.last!\n                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpyb6ks57k.swift:20:14: error: 'characters'\
    \ is unavailable: Please use String directly\n        if s.characters.contains(lastChar)\
    \ {\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpyb6ks57k.swift:24:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        lastChar\
    \ = s[i]\n                   ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014148
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    var count = 0\n    for letter in s {\n        if letter == letter\
    \ {\n            count += 1\n        }\n        if count == 3 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: Exception
  stderr: 'tmp7ee0cg02/tmp7ee0cg02.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a12b4ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a12841b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a12841988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a128407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ee0cg02                        0x00005609b882036d <unavailable> + 4973

    5    libc.so.6                          0x00002b5a12d36460 __libc_start_main +
    245

    6    tmp7ee0cg02                        0x00005609b881fff9 <unavailable> + 4089

    '
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    var count = 0\n    for c in s {\n        if count % 3 == 0 {\n\
    \            if let _ = s.rangeOfString(c) {\n                return false\n \
    \           }\n        } else {\n            if let _ = s.rangeOfString(c) {\n\
    \                count += 1\n            }\n        }\n    }\n    return count\
    \ >= 3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmppebejshu.swift:16:26: error: value of type 'String' has no member\
    \ 'rangeOfString'\n            if let _ = s.rangeOfString(c) {\n             \
    \          ~ ^~~~~~~~~~~~~\n/tmp/tmppebejshu.swift:20:26: error: value of type\
    \ 'String' has no member 'rangeOfString'\n            if let _ = s.rangeOfString(c)\
    \ {\n                       ~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014148
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 {\n        return\
    \ false\n    }\n    var count = 0\n    for c in s.characters {\n        if c ==\
    \ s[count] {\n            count += 1\n        } else {\n            count = 0\n\
    \        }\n        if count == 3 {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpayg7gx2w.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpayg7gx2w.swift:18:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpayg7gx2w.swift:19:17: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ c == s[count] {\n                ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    var count = 0\n    for letter in s {\n        if letter == letter\
    \ {\n            count += 1\n        }\n        else {\n            count = 0\n\
    \        }\n        if count == 3 {\n            return false\n        }\n   \
    \ }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmp2d1lxam1/tmp2d1lxam1.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3a00f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab39fdf0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab39fdf0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab39fdef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2d1lxam1                        0x000055a68f9c236d <unavailable> + 4973

    5    libc.so.6                          0x00002ab3a02e5460 __libc_start_main +
    245

    6    tmp2d1lxam1                        0x000055a68f9c1ff9 <unavailable> + 4089

    '
  stdout: ''
  timestamp: 1660014148
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    var count = 0\n    for letter in s {\n        if letter == letter\
    \ {\n            count += 1\n        }\n    }\n    return count >= 3 && count\
    \ % 3 == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") ==\
    \ false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") ==\
    \ true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") ==\
    \ true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpzidi74hy/tmpzidi74hy.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba565369c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba565060b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba565060988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba56505f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzidi74hy                        0x000055e2accc553b <unavailable> + 5435

    5    libc.so.6                          0x00002ba565555460 __libc_start_main +
    245

    6    tmpzidi74hy                        0x000055e2accc5089 <unavailable> + 4233

    '
  stdout: ''
  timestamp: 1660014148
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    return s.count >= 3 && s.characters.reduce(true) { ($0 && $1)\
    \ || ($0 && $2) || ($0 && $3) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdo6mvxdw.swift:13:41: error: cannot convert value of type '(Bool,\
    \ Bool, Bool, Bool) -> Bool' to expected argument type 'Bool'\n    return s.count\
    \ >= 3 && s.characters.reduce(true) { ($0 && $1) || ($0 && $2) || ($0 && $3) }\n\
    \                                        ^\n/tmp/tmpdo6mvxdw.swift:13:47: error:\
    \ missing argument label 'into:' in call\n    return s.count >= 3 && s.characters.reduce(true)\
    \ { ($0 && $1) || ($0 && $2) || ($0 && $3) }\n                               \
    \               ^\n                                               into: \n/tmp/tmpdo6mvxdw.swift:13:48:\
    \ error: cannot convert value of type 'Bool' to expected argument type '(inout\
    \ @escaping (Bool, Bool, Bool, Bool) -> Bool, String.Element) throws -> ()' (aka\
    \ '(inout @escaping (Bool, Bool, Bool, Bool) -> Bool, Character) throws -> ()')\n\
    \    return s.count >= 3 && s.characters.reduce(true) { ($0 && $1) || ($0 && $2)\
    \ || ($0 && $3) }\n                                               ^\n"
  stdout: ''
  timestamp: 1660014148
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    return s.count >= 3 && s.isHappy()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp979idhux.swift:13:30: error: value of type 'String' has no member\
    \ 'isHappy'\n    return s.count >= 3 && s.isHappy()\n                        \
    \   ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    var count = 0\n    for letter in s.characters {\n        if letter\
    \ == letter {\n            count += 1\n        } else {\n            count = 0\n\
    \        }\n        if count >= 3 {\n            return false\n        }\n   \
    \ }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxpwo1rus.swift:14:21: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in s.characters {\n                    ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    var count = 0\n    for letter in s {\n        if letter == letter\
    \ {\n            count += 1\n        } else {\n            count = 0\n       \
    \ }\n        if count == 3 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpdja6y9oh/tmpdja6y9oh.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf36bd9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf368d0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf368d0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf368cf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdja6y9oh                        0x00005649aded936d <unavailable> + 4973

    5    libc.so.6                          0x00002aaf36dc5460 __libc_start_main +
    245

    6    tmpdja6y9oh                        0x00005649aded8ff9 <unavailable> + 4089

    '
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 { return false }\n\
    \    let set = Set<Character>(s.characters)\n    return set.count == len && set.count\
    \ == (len - 3) * 3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp16cx6kfk.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp16cx6kfk.swift:15:32:\
    \ error: 'characters' is unavailable: Please use String directly\n    let set\
    \ = Set<Character>(s.characters)\n                               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014148
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 {\n        return\
    \ false\n    }\n    var lastChar = s.characters.last\n    for char in s.characters[0..<len]\
    \ {\n        if char == lastChar {\n            return false\n        }\n    \
    \    lastChar = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmpeilisxpe.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpeilisxpe.swift:17:22:\
    \ error: 'characters' is unavailable: Please use String directly\n    var lastChar\
    \ = s.characters.last\n                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpeilisxpe.swift:18:17: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an integer range, use a String.Index\
    \ range instead.\n    for char in s.characters[0..<len] {\n                ^~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:5:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript<R>(bounds: R) -> String where R : RangeExpression,\
    \ R.Bound == Int { get }\n           ^\n/tmp/tmpeilisxpe.swift:18:19: error: 'characters'\
    \ is unavailable: Please use String directly\n    for char in s.characters[0..<len]\
    \ {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 { return false }\n\
    \    let mut chars = Array(s.characters)\n    let mut i = 0\n    while i < chars.count\
    \ {\n        if chars[i] == chars[i+1] { return false }\n        i += 2\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmps8q1vef6.swift:15:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut chars =\
    \ Array(s.characters)\n            ^\n/tmp/tmps8q1vef6.swift:15:13: note: join\
    \ the identifiers together\n    let mut chars = Array(s.characters)\n        ~~~~^~~~~\n\
    \        mutchars\n/tmp/tmps8q1vef6.swift:15:13: note: join the identifiers together\
    \ with camel-case\n    let mut chars = Array(s.characters)\n        ~~~~^~~~~\n\
    \        mutChars\n/tmp/tmps8q1vef6.swift:16:13: error: found an unexpected second\
    \ identifier in constant declaration; is there an accidental break?\n    let mut\
    \ i = 0\n            ^\n/tmp/tmps8q1vef6.swift:16:13: note: join the identifiers\
    \ together\n    let mut i = 0\n        ~~~~^\n        muti\n/tmp/tmps8q1vef6.swift:16:13:\
    \ note: join the identifiers together with camel-case\n    let mut i = 0\n   \
    \     ~~~~^\n        mutI\n/tmp/tmps8q1vef6.swift:13:17: error: 'characters' is\
    \ unavailable: Please use String directly\n    let len = s.characters.count\n\
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmps8q1vef6.swift:15:29: error: 'characters' is unavailable: Please\
    \ use String directly\n    let mut chars = Array(s.characters)\n             \
    \               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmps8q1vef6.swift:16:9: error: invalid redeclaration of 'mut'\n    let\
    \ mut i = 0\n        ^\n/tmp/tmps8q1vef6.swift:15:9: note: 'mut' previously declared\
    \ here\n    let mut chars = Array(s.characters)\n        ^\n/tmp/tmps8q1vef6.swift:17:11:\
    \ error: cannot find 'i' in scope\n    while i < chars.count {\n          ^\n\
    /tmp/tmps8q1vef6.swift:17:15: error: cannot find 'chars' in scope\n    while i\
    \ < chars.count {\n              ^~~~~\n/tmp/tmps8q1vef6.swift:18:12: error: cannot\
    \ find 'chars' in scope\n        if chars[i] == chars[i+1] { return false }\n\
    \           ^~~~~\n/tmp/tmps8q1vef6.swift:1"
  stdout: ''
  timestamp: 1660014148
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 { return false }\n\
    \    var last: Character? = nil\n    for c in s.characters {\n        if last\
    \ == c {\n            return false\n        }\n        last = c\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp4_g3fe2_.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp4_g3fe2_.swift:16:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 {\n        return\
    \ false\n    }\n    let mut seen = Set<String>()\n    for i in 0..<len {\n   \
    \     if seen.contains(s.substring(i, i + 3)) {\n            return false\n  \
    \      }\n        seen.insert(s.substring(i, i + 3))\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpttmps4gu.swift:17:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut seen = Set<String>()\n\
    \            ^\n/tmp/tmpttmps4gu.swift:17:13: note: join the identifiers together\n\
    \    let mut seen = Set<String>()\n        ~~~~^~~~\n        mutseen\n/tmp/tmpttmps4gu.swift:17:13:\
    \ note: join the identifiers together with camel-case\n    let mut seen = Set<String>()\n\
    \        ~~~~^~~~\n        mutSeen\n/tmp/tmpttmps4gu.swift:13:17: error: 'characters'\
    \ is unavailable: Please use String directly\n    let len = s.characters.count\n\
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpttmps4gu.swift:19:12: error: cannot find 'seen' in scope\n      \
    \  if seen.contains(s.substring(i, i + 3)) {\n           ^~~~\n/tmp/tmpttmps4gu.swift:19:28:\
    \ error: value of type 'String' has no member 'substring'\n        if seen.contains(s.substring(i,\
    \ i + 3)) {\n                         ~ ^~~~~~~~~\n/tmp/tmpttmps4gu.swift:22:9:\
    \ error: cannot find 'seen' in scope\n        seen.insert(s.substring(i, i + 3))\n\
    \        ^~~~\n/tmp/tmpttmps4gu.swift:22:23: error: value of type 'String' has\
    \ no member 'substring'\n        seen.insert(s.substring(i, i + 3))\n        \
    \            ~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014148
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 { return false }\n    var last: Character?\n \
    \   for c in s.characters {\n        if last == c { return false }\n        last\
    \ = c\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpw7eam9c_.swift:15:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014148
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 {\n        return\
    \ false\n    }\n    var last: Character?\n    var lastCount: Int = 0\n    for\
    \ char in s.characters {\n        if char == last! {\n            lastCount +=\
    \ 1\n        } else {\n            last = char\n            lastCount = 1\n  \
    \      }\n        if lastCount > 3 {\n            return false\n        }\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp0ep2dky4.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp0ep2dky4.swift:19:19:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in s.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014148
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 {\n        return\
    \ false\n    }\n    var lastChar = s.characters.last\n    var lastCharIndex =\
    \ s.characters.count - 1\n    for char in s.characters {\n        if char == lastChar\
    \ {\n            lastCharIndex -= 1\n        }\n        if lastCharIndex < 0 {\n\
    \            return false\n        }\n        lastChar = char\n        lastCharIndex\
    \ = s.characters.count - 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpknl31y08.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpknl31y08.swift:17:22:\
    \ error: 'characters' is unavailable: Please use String directly\n    var lastChar\
    \ = s.characters.last\n                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpknl31y08.swift:18:27: error: 'characters'\
    \ is unavailable: Please use String directly\n    var lastCharIndex = s.characters.count\
    \ - 1\n                          ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpknl31y08.swift:19:19: error: 'characters' is unavailable:\
    \ Please use String directly\n    for char in s.characters {\n               \
    \   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpknl31y08.swift:27:27:\
    \ error: 'characters' is unavailable: Please use String directly\n        lastCharIndex\
    \ = s.characters.count - 1\n                          ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014148
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    var count = 0\n    for letter in s {\n        if letter == letter\
    \ {\n            count += 1\n        } else if letter == letter + letter {\n \
    \           count += 1\n        } else if letter == letter + letter + letter {\n\
    \            count += 1\n        } else {\n            return false\n        }\n\
    \    }\n    return count >= 3 && count == s.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp6tyb115r.swift:17:36: error: binary operator '+' cannot be applied\
    \ to two 'Character' operands\n        } else if letter == letter + letter {\n\
    \                            ~~~~~~ ^ ~~~~~~\n/tmp/tmp6tyb115r.swift:19:36: error:\
    \ binary operator '+' cannot be applied to two 'Character' operands\n        }\
    \ else if letter == letter + letter + letter {\n                            ~~~~~~\
    \ ^ ~~~~~~\n/tmp/tmp6tyb115r.swift:19:45: error: binary operator '+' cannot be\
    \ applied to two 'Character' operands\n        } else if letter == letter + letter\
    \ + letter {\n                            ~~~~~~~~~~~~~~~ ^ ~~~~~~\n"
  stdout: ''
  timestamp: 1660014150
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    return s.count > 3 && s.count % 3 == 0 && s.isDistinct\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpf98b5oy3.swift:13:49: error: value of type 'String' has no member\
    \ 'isDistinct'\n    return s.count > 3 && s.count % 3 == 0 && s.isDistinct\n \
    \                                             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014148
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 {\n        return\
    \ false\n    }\n    var last: Character?\n    for c in s.characters {\n      \
    \  if last != nil {\n            if c == last! {\n                return false\n\
    \            }\n        }\n        last = c\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7a3qc3ml.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp7a3qc3ml.swift:18:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 {\n        return\
    \ false\n    }\n    var last: Character?\n    for char in s.characters {\n   \
    \     if char == last {\n            return false\n        }\n        last = char\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpktzjwjkc.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpktzjwjkc.swift:18:19:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in s.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014147
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 {\n        return\
    \ false\n    }\n    let mut chars = String()\n    for i in 0..<len {\n       \
    \ chars.append(s.characters[i])\n    }\n    let charSet = chars.characters\n \
    \   let charSetCount = charSet.count\n    if charSetCount != charSet.reduce(0)\
    \ {\n        return false\n    }\n    for i in 0..<3 {\n        if charSet[i]\
    \ != charSet[i+3] {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp53kxa5nm.swift:17:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut chars =\
    \ String()\n            ^\n/tmp/tmp53kxa5nm.swift:17:13: note: join the identifiers\
    \ together\n    let mut chars = String()\n        ~~~~^~~~~\n        mutchars\n\
    /tmp/tmp53kxa5nm.swift:17:13: note: join the identifiers together with camel-case\n\
    \    let mut chars = String()\n        ~~~~^~~~~\n        mutChars\n/tmp/tmp53kxa5nm.swift:13:17:\
    \ error: 'characters' is unavailable: Please use String directly\n    let len\
    \ = s.characters.count\n                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp53kxa5nm.swift:19:9: error: cannot find 'chars' in\
    \ scope\n        chars.append(s.characters[i])\n        ^~~~~\n/tmp/tmp53kxa5nm.swift:21:19:\
    \ error: cannot find 'chars' in scope\n    let charSet = chars.characters\n  \
    \                ^~~~~\n"
  stdout: ''
  timestamp: 1660014148
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 {\n        return\
    \ false\n    }\n    let set = Set<String>()\n    for index in stride(from: 0,\
    \ to: len - 3, by: 3) {\n        if let c = String(s.characters[index ..< index\
    \ + 3]) {\n            if !set.contains(c) {\n                set.insert(c)\n\
    \            }\n        }\n    }\n    return set.count == len\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9iql0pqb.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp9iql0pqb.swift:19:27:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an integer\
    \ range, use a String.Index range instead.\n        if let c = String(s.characters[index\
    \ ..< index + 3]) {\n                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:5:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript<R>(bounds: R) -> String where R : RangeExpression,\
    \ R.Bound == Int { get }\n           ^\n/tmp/tmp9iql0pqb.swift:19:29: error: 'characters'\
    \ is unavailable: Please use String directly\n        if let c = String(s.characters[index\
    \ ..< index + 3]) {\n                            ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp9iql0pqb.swift:21:21: error: cannot use\
    \ mutating member on immutable value: 'set' is a 'let' constant\n            \
    \    set.insert(c)\n                ~~~ ^\n/tmp/tmp9iql0pqb.swift:17:5: note:\
    \ change 'let' to 'var' to make it mutable\n    let set = Set<String>()\n    ^~~\n\
    \    var\n/tmp/tmp9iql0pqb.swift:19:12: error: initializer for conditional binding\
    \ must have Optional type, not 'String'\n        if let c = String(s.characters[index\
    \ ..< index + 3]) {\n           ^       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014148
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    var count = 0\n    for letter in s.characters {\n        if letter\
    \ == letter {\n            count += 1\n        } else if letter == letter + letter\
    \ {\n            count += 1\n        } else if letter == letter + letter + letter\
    \ {\n            count += 1\n        } else {\n            return false\n    \
    \    }\n    }\n    return count >= 3\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpv64e03yp.swift:14:21: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in s.characters {\n                    ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpv64e03yp.swift:17:36:\
    \ error: binary operator '+' cannot be applied to two 'Character' operands\n \
    \       } else if letter == letter + letter {\n                            ~~~~~~\
    \ ^ ~~~~~~\n/tmp/tmpv64e03yp.swift:19:45: error: binary operator '+' cannot be\
    \ applied to two 'Character' operands\n        } else if letter == letter + letter\
    \ + letter {\n                            ~~~~~~~~~~~~~~~ ^ ~~~~~~\n/tmp/tmpv64e03yp.swift:19:36:\
    \ error: binary operator '+' cannot be applied to two 'Character' operands\n \
    \       } else if letter == letter + letter + letter {\n                     \
    \       ~~~~~~ ^ ~~~~~~\n"
  stdout: ''
  timestamp: 1660014149
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    var count = 0\n    for letter in s {\n        if letter == letter\
    \ {\n            count += 1\n        } else if letter == letter + letter {\n \
    \           count += 1\n        } else if letter == letter + letter + letter {\n\
    \            count += 1\n        } else {\n            return false\n        }\n\
    \    }\n    return count >= 3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpt4eymjlm.swift:17:36: error: binary operator '+' cannot be applied\
    \ to two 'Character' operands\n        } else if letter == letter + letter {\n\
    \                            ~~~~~~ ^ ~~~~~~\n/tmp/tmpt4eymjlm.swift:19:45: error:\
    \ binary operator '+' cannot be applied to two 'Character' operands\n        }\
    \ else if letter == letter + letter + letter {\n                            ~~~~~~~~~~~~~~~\
    \ ^ ~~~~~~\n/tmp/tmpt4eymjlm.swift:19:36: error: binary operator '+' cannot be\
    \ applied to two 'Character' operands\n        } else if letter == letter + letter\
    \ + letter {\n                            ~~~~~~ ^ ~~~~~~\n"
  stdout: ''
  timestamp: 1660014149
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    var count = 0\n    for c in s {\n        if count == 3 {\n  \
    \          if !is_distinct(s[count - 1], s[count - 2], s[count - 3]) {\n     \
    \           return false\n            }\n        }\n        count += 1\n    }\n\
    \    return count >= 3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpn761of1c.swift:16:17: error: cannot find 'is_distinct' in scope\n\
    \            if !is_distinct(s[count - 1], s[count - 2], s[count - 3]) {\n   \
    \             ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014148
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 {\n        return\
    \ false\n    }\n    var i = 0\n    var j = 0\n    var k = 0\n    while i < len\
    \ {\n        if s.characters[i] != s.characters[j] {\n            return false\n\
    \        }\n        i += 1\n        j += 1\n        k += 1\n        if k == 3\
    \ {\n            k = 0\n            j += 1\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpi3yli2fw.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpi3yli2fw.swift:21:12:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if s.characters[i] != s.characters[j] {\n\
    \           ^~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpi3yli2fw.swift:21:14: error: 'characters' is\
    \ unavailable: Please use String directly\n        if s.characters[i] != s.characters[j]\
    \ {\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpi3yli2fw.swift:21:31: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if s.characters[i]\
    \ != s.characters[j] {\n                              ^~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpi3yli2fw.swift:21:33:\
    \ error: 'characters' is unavailable: Please use String directly\n        if s.characters[i]\
    \ != s.characters[j] {\n                                ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014148
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let len = s.characters.count\n    if len < 3 {\n        return\
    \ false\n    }\n    var lastChar = s[0]\n    for char in s.characters {\n    \
    \    if char == lastChar {\n            return false\n        }\n        lastChar\
    \ = char\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_b1miof0.swift:13:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = s.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp_b1miof0.swift:17:20:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n    var lastChar = s[0]\n                   ^~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp_b1miof0.swift:18:19:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in s.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014147
