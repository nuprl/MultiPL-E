language: swift
name: HumanEval_135_can_arrange
results:
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    for idx in 0..<arr.count {\n        if arr[idx] > max {\n\
    \            max = arr[idx]\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmppw7jso6k/tmppw7jso6k.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae57083dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae570534b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae570534988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae5705337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppw7jso6k                        0x000055ab29c42552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae570a29460 __libc_start_main +
    245

    6    tmppw7jso6k                        0x000055ab29c421a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = 0\n    for index in 0..<arr.count {\n        if arr[index]\
    \ > arr[maxIndex] {\n            maxIndex = index\n        }\n    }\n    return\
    \ maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpjarcn6xt/tmpjarcn6xt.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1987cf2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19879e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19879e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19879e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjarcn6xt                        0x0000556f86a00552 <unavailable> + 5458

    5    libc.so.6                          0x00002b1987ede460 __libc_start_main +
    245

    6    tmpjarcn6xt                        0x0000556f86a001a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: 1
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = 0\n    var maxValue = arr[0]\n    for value in arr {\n   \
    \     if value > maxValue {\n            maxValue = value\n            maxIndex\
    \ = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpdkijb4pd.swift:15:24: error: cannot find 'index' in scope\n   \
    \         maxIndex = index\n                       ^~~~~\n"
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in 1..<arr.count\
    \ {\n        if arr[index] > maxValue {\n            maxValue = arr[index]\n \
    \           maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp7ugos3kr/tmp7ugos3kr.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0122ab2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01227a9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01227a9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01227a87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ugos3kr                        0x000055c4c76ba552 <unavailable> + 5458

    5    libc.so.6                          0x00002b0122c9e460 __libc_start_main +
    245

    6    tmp7ugos3kr                        0x000055c4c76ba1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = 0\n    for index in 0..<arr.count {\n        if arr[index]\
    \ > arr[maxIndex] {\n            maxIndex = index\n        }\n    }\n    return\
    \ maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpjarcn6xt/tmpjarcn6xt.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1987cf2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19879e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19879e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19879e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjarcn6xt                        0x0000556f86a00552 <unavailable> + 5458

    5    libc.so.6                          0x00002b1987ede460 __libc_start_main +
    245

    6    tmpjarcn6xt                        0x0000556f86a001a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    var index = 0\n    for element in arr {\n        if element\
    \ > max {\n            max = element\n            index = index + 1\n        }\n\
    \    }\n    if index == 0 {\n        return -1\n    }\n    return index\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp32v4ttmp/tmp32v4ttmp.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b235ece4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b235e9dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b235e9db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b235e9da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp32v4ttmp                        0x000055ab39b6a482 <unavailable> + 5250

    5    libc.so.6                          0x00002b235eed0460 __libc_start_main +
    245

    6    tmp32v4ttmp                        0x000055ab39b6a0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = -1\n    for index in 0..<arr.count {\n        if arr[index]\
    \ > arr[index-1] {\n            maxIndex = index\n        }\n    }\n    return\
    \ maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b2fb9c15c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2fb990c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2fb990c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b2fb990c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2fb990bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b2fb970be83 <unavailable> + 188035

    6    tmpjr9tvhdy                        0x0000557a232a9a4a <unavailable> + 6730

    7    tmpjr9tvhdy                        0x0000557a232a94d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b2fb9e01460 __libc_start_main +
    245

    9    tmpjr9tvhdy                        0x0000557a232a91a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count {\n   \
    \     if arr[index] > max {\n            max = arr[index]\n            maxIndex\
    \ = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpo7_an7kf/tmpo7_an7kf.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae675f1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae675c12b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae675c12988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae675c117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo7_an7kf                        0x000055b80bc32552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae676107460 __libc_start_main +
    245

    6    tmpo7_an7kf                        0x000055b80bc321a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count {\n   \
    \     if arr[index] > max {\n            max = arr[index]\n            maxIndex\
    \ = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpo7_an7kf/tmpo7_an7kf.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae675f1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae675c12b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae675c12988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae675c117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo7_an7kf                        0x000055b80bc32552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae676107460 __libc_start_main +
    245

    6    tmpo7_an7kf                        0x000055b80bc321a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count {\n   \
    \     if arr[index] > max {\n            max = arr[index]\n            maxIndex\
    \ = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpo7_an7kf/tmpo7_an7kf.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae675f1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae675c12b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae675c12988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae675c117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo7_an7kf                        0x000055b80bc32552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae676107460 __libc_start_main +
    245

    6    tmpo7_an7kf                        0x000055b80bc321a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    for idx in 0..<arr.count {\n        if arr[idx] > max {\n\
    \            max = arr[idx]\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmppw7jso6k/tmppw7jso6k.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae57083dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae570534b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae570534988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae5705337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppw7jso6k                        0x000055ab29c42552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae570a29460 __libc_start_main +
    245

    6    tmppw7jso6k                        0x000055ab29c421a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count {\n   \
    \     if arr[index] > max {\n            max = arr[index]\n            maxIndex\
    \ = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpo7_an7kf/tmpo7_an7kf.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae675f1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae675c12b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae675c12988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae675c117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo7_an7kf                        0x000055b80bc32552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae676107460 __libc_start_main +
    245

    6    tmpo7_an7kf                        0x000055b80bc321a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    for idx in 0..<arr.count {\n        if arr[idx] > max {\n\
    \            max = arr[idx]\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmppw7jso6k/tmppw7jso6k.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae57083dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae570534b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae570534988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae5705337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppw7jso6k                        0x000055ab29c42552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae570a29460 __libc_start_main +
    245

    6    tmppw7jso6k                        0x000055ab29c421a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = 0\n    var maxValue = arr[0]\n    for i in arr {\n       \
    \ if i > maxValue {\n            maxValue = i\n            maxIndex = i\n    \
    \    }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmp07vfqrhu/tmp07vfqrhu.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae9055abc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae9052a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae9052a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae9052a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp07vfqrhu                        0x000055c213cd74d2 <unavailable> + 5330

    5    libc.so.6                          0x00002ae905797460 __libc_start_main +
    245

    6    tmp07vfqrhu                        0x000055c213cd7129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    var maxIndex = 0\n    for idx in 0..<arr.count {\n     \
    \   if arr[idx] > max {\n            max = arr[idx]\n            maxIndex = idx\n\
    \        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmpm21du15_/tmpm21du15_.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a6bfdbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a6bcd2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a6bcd2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a6bcd17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm21du15_                        0x000055b37281e552 <unavailable> + 5458

    5    libc.so.6                          0x00002b6a6c1c7460 __libc_start_main +
    245

    6    tmpm21du15_                        0x000055b37281e1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = -1\n    for index in 0..<arr.count {\n        if arr[index]\
    \ > arr[index-1] {\n            maxIndex = index\n        }\n    }\n    return\
    \ maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b2fb9c15c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2fb990c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2fb990c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b2fb990c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2fb990bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b2fb970be83 <unavailable> + 188035

    6    tmpjr9tvhdy                        0x0000557a232a9a4a <unavailable> + 6730

    7    tmpjr9tvhdy                        0x0000557a232a94d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b2fb9e01460 __libc_start_main +
    245

    9    tmpjr9tvhdy                        0x0000557a232a91a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count {\n   \
    \     if arr[index] > max {\n            max = arr[index]\n            maxIndex\
    \ = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpo7_an7kf/tmpo7_an7kf.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae675f1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae675c12b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae675c12988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae675c117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo7_an7kf                        0x000055b80bc32552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae676107460 __libc_start_main +
    245

    6    tmpo7_an7kf                        0x000055b80bc321a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = -1\n    var maxVal = -1\n    for idx in 0..<arr.count {\n\
    \        if arr[idx] > maxVal {\n            maxVal = arr[idx]\n            maxIndex\
    \ = idx\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp416xt0sl/tmp416xt0sl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b10121e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1011edeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1011ede988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1011edd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp416xt0sl                        0x00005629c2004552 <unavailable> + 5458

    5    libc.so.6                          0x00002b10123d3460 __libc_start_main +
    245

    6    tmp416xt0sl                        0x00005629c20041a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in 1..<arr.count\
    \ {\n        if arr[index] > maxValue {\n            maxValue = arr[index]\n \
    \           maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp7ugos3kr/tmp7ugos3kr.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0122ab2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01227a9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01227a9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01227a87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ugos3kr                        0x000055c4c76ba552 <unavailable> + 5458

    5    libc.so.6                          0x00002b0122c9e460 __libc_start_main +
    245

    6    tmp7ugos3kr                        0x000055c4c76ba1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in 1..<arr.count\
    \ {\n        if arr[index] > maxValue {\n            maxValue = arr[index]\n \
    \           maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp7ugos3kr/tmp7ugos3kr.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0122ab2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01227a9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01227a9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01227a87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ugos3kr                        0x000055c4c76ba552 <unavailable> + 5458

    5    libc.so.6                          0x00002b0122c9e460 __libc_start_main +
    245

    6    tmp7ugos3kr                        0x000055c4c76ba1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count {\n   \
    \     if arr[index] > max {\n            max = arr[index]\n            maxIndex\
    \ = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpo7_an7kf/tmpo7_an7kf.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae675f1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae675c12b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae675c12988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae675c117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo7_an7kf                        0x000055b80bc32552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae676107460 __libc_start_main +
    245

    6    tmpo7_an7kf                        0x000055b80bc321a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: 1
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = -1\n    var maxValue = arr[0]\n    for value in arr {\n  \
    \      if value > maxValue {\n            maxValue = value\n            maxIndex\
    \ = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpsku2qy90.swift:15:24: error: cannot find 'index' in scope\n   \
    \         maxIndex = index\n                       ^~~~~\n"
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = -1\n    var maxValue = arr[0]\n    for index in 1..<arr.count\
    \ {\n        if arr[index] > maxValue {\n            maxValue = arr[index]\n \
    \           maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpb9q2zyam/tmpb9q2zyam.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95752c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9574fbfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9574fbf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9574fbe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb9q2zyam                        0x0000557af3409552 <unavailable> + 5458

    5    libc.so.6                          0x00002b95754b4460 __libc_start_main +
    245

    6    tmpb9q2zyam                        0x0000557af34091a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count {\n   \
    \     if arr[index] > max {\n            max = arr[index]\n            maxIndex\
    \ = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpo7_an7kf/tmpo7_an7kf.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae675f1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae675c12b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae675c12988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae675c117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo7_an7kf                        0x000055b80bc32552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae676107460 __libc_start_main +
    245

    6    tmpo7_an7kf                        0x000055b80bc321a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in 1..<arr.count\
    \ {\n        if arr[index] > maxValue {\n            maxValue = arr[index]\n \
    \           maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp7ugos3kr/tmp7ugos3kr.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0122ab2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01227a9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01227a9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01227a87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ugos3kr                        0x000055c4c76ba552 <unavailable> + 5458

    5    libc.so.6                          0x00002b0122c9e460 __libc_start_main +
    245

    6    tmp7ugos3kr                        0x000055c4c76ba1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: 1
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = -1\n    var maxValue = arr[0]\n    for value in arr {\n  \
    \      if value > maxValue {\n            maxValue = value\n            maxIndex\
    \ = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpsku2qy90.swift:15:24: error: cannot find 'index' in scope\n   \
    \         maxIndex = index\n                       ^~~~~\n"
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = -1\n    for index in 0..<arr.count {\n        if arr[index]\
    \ > arr[index-1] {\n            maxIndex = index\n        }\n    }\n    return\
    \ maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b2fb9c15c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2fb990c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2fb990c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b2fb990c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2fb990bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b2fb970be83 <unavailable> + 188035

    6    tmpjr9tvhdy                        0x0000557a232a9a4a <unavailable> + 6730

    7    tmpjr9tvhdy                        0x0000557a232a94d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b2fb9e01460 __libc_start_main +
    245

    9    tmpjr9tvhdy                        0x0000557a232a91a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count {\n   \
    \     if arr[index] > max {\n            max = arr[index]\n            maxIndex\
    \ = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpo7_an7kf/tmpo7_an7kf.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae675f1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae675c12b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae675c12988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae675c117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo7_an7kf                        0x000055b80bc32552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae676107460 __libc_start_main +
    245

    6    tmpo7_an7kf                        0x000055b80bc321a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count {\n   \
    \     if arr[index] > max {\n            max = arr[index]\n            maxIndex\
    \ = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpo7_an7kf/tmpo7_an7kf.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae675f1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae675c12b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae675c12988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae675c117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo7_an7kf                        0x000055b80bc32552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae676107460 __libc_start_main +
    245

    6    tmpo7_an7kf                        0x000055b80bc321a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = 0\n    var maxValue = arr[0]\n    for i in 1..<arr.count {\n\
    \        if arr[i] > maxValue {\n            maxValue = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpi4zw6xc8/tmpi4zw6xc8.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd919e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd916d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd916d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd916d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi4zw6xc8                        0x000055e7502b7552 <unavailable> + 5458

    5    libc.so.6                          0x00002acd91bce460 __libc_start_main +
    245

    6    tmpi4zw6xc8                        0x000055e7502b71a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count {\n   \
    \     if arr[index] > max {\n            max = arr[index]\n            maxIndex\
    \ = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpo7_an7kf/tmpo7_an7kf.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae675f1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae675c12b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae675c12988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae675c117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo7_an7kf                        0x000055b80bc32552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae676107460 __libc_start_main +
    245

    6    tmpo7_an7kf                        0x000055b80bc321a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in 1..<arr.count\
    \ {\n        if arr[index] > maxValue {\n            maxValue = arr[index]\n \
    \           maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp7ugos3kr/tmp7ugos3kr.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0122ab2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01227a9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01227a9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01227a87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ugos3kr                        0x000055c4c76ba552 <unavailable> + 5458

    5    libc.so.6                          0x00002b0122c9e460 __libc_start_main +
    245

    6    tmp7ugos3kr                        0x000055c4c76ba1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in 1..<arr.count\
    \ {\n        if arr[index] > maxValue {\n            maxValue = arr[index]\n \
    \           maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp7ugos3kr/tmp7ugos3kr.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0122ab2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01227a9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01227a9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01227a87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ugos3kr                        0x000055c4c76ba552 <unavailable> + 5458

    5    libc.so.6                          0x00002b0122c9e460 __libc_start_main +
    245

    6    tmp7ugos3kr                        0x000055c4c76ba1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in 1..<arr.count\
    \ {\n        if arr[index] > maxValue {\n            maxValue = arr[index]\n \
    \           maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp7ugos3kr/tmp7ugos3kr.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0122ab2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01227a9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01227a9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01227a87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ugos3kr                        0x000055c4c76ba552 <unavailable> + 5458

    5    libc.so.6                          0x00002b0122c9e460 __libc_start_main +
    245

    6    tmp7ugos3kr                        0x000055c4c76ba1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: 1
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = 0\n    var maxValue = arr[0]\n    for value in arr {\n   \
    \     if value > maxValue {\n            maxValue = value\n            maxIndex\
    \ = arr.index(value)\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpeq9cxdmd.swift:15:28: error: no exact matches in call to instance\
    \ method 'index'\n            maxIndex = arr.index(value)\n                  \
    \         ^\nSwift.Array:7:28: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(after:)')\n    @inlinable public func index(after i: Int) -> Int\n\
    \                           ^\nSwift.Array:9:28: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(before:)')\n    @inlinable public func index(before\
    \ i: Int) -> Int\n                           ^\nSwift.RandomAccessCollection:3:28:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(after:)')\n\
    \    @inlinable public func index(after i: Self.Index) -> Self.Index\n       \
    \                    ^\nSwift.RandomAccessCollection:4:28: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(before:)')\n    @inlinable public func\
    \ index(before i: Self.Index) -> Self.Index\n                           ^\n"
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = 0\n    for index in 0..<arr.count {\n        if arr[index]\
    \ > arr[index-1] {\n            maxIndex = index\n        }\n    }\n    return\
    \ maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b1ed19d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1ed16c9561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b1ed16c9286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b1ed16c913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b1ed16c8bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b1ed14c8e83 <unavailable> + 188035

    6    tmp5rk6fp19                        0x000055ae59635a4a <unavailable> + 6730

    7    tmp5rk6fp19                        0x000055ae596354d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b1ed1bbe460 __libc_start_main +
    245

    9    tmp5rk6fp19                        0x000055ae596351a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    for index in 0..<arr.count {\n        if arr[index] > max\
    \ {\n            max = arr[index]\n        }\n    }\n    return max\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp__7kk8zw/tmp__7kk8zw.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad628ef2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad628be9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad628be9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad628be87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__7kk8zw                        0x00005648db46d552 <unavailable> + 5458

    5    libc.so.6                          0x00002ad6290de460 __libc_start_main +
    245

    6    tmp__7kk8zw                        0x00005648db46d1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count {\n   \
    \     if arr[index] > max {\n            max = arr[index]\n            maxIndex\
    \ = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpo7_an7kf/tmpo7_an7kf.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae675f1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae675c12b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae675c12988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae675c117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo7_an7kf                        0x000055b80bc32552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae676107460 __libc_start_main +
    245

    6    tmpo7_an7kf                        0x000055b80bc321a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    for idx in 0..<arr.count {\n        if arr[idx] > max {\n\
    \            max = arr[idx]\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmppw7jso6k/tmppw7jso6k.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae57083dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae570534b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae570534988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae5705337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppw7jso6k                        0x000055ab29c42552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae570a29460 __libc_start_main +
    245

    6    tmppw7jso6k                        0x000055ab29c421a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in 1..<arr.count\
    \ {\n        if arr[index] > maxValue {\n            maxValue = arr[index]\n \
    \           maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp7ugos3kr/tmp7ugos3kr.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0122ab2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01227a9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01227a9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01227a87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ugos3kr                        0x000055c4c76ba552 <unavailable> + 5458

    5    libc.so.6                          0x00002b0122c9e460 __libc_start_main +
    245

    6    tmp7ugos3kr                        0x000055c4c76ba1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count {\n   \
    \     if arr[index] > max {\n            max = arr[index]\n            maxIndex\
    \ = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpo7_an7kf/tmpo7_an7kf.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae675f1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae675c12b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae675c12988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae675c117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo7_an7kf                        0x000055b80bc32552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae676107460 __libc_start_main +
    245

    6    tmpo7_an7kf                        0x000055b80bc321a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = -1\n    for index in 0..<arr.count {\n        if arr[index]\
    \ > arr[index-1] {\n            maxIndex = index\n        }\n    }\n    return\
    \ maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b2fb9c15c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2fb990c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2fb990c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b2fb990c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2fb990bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b2fb970be83 <unavailable> + 188035

    6    tmpjr9tvhdy                        0x0000557a232a9a4a <unavailable> + 6730

    7    tmpjr9tvhdy                        0x0000557a232a94d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b2fb9e01460 __libc_start_main +
    245

    9    tmpjr9tvhdy                        0x0000557a232a91a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in 1..<arr.count\
    \ {\n        if arr[index] > maxValue {\n            maxValue = arr[index]\n \
    \           maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp7ugos3kr/tmp7ugos3kr.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0122ab2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01227a9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01227a9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01227a87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ugos3kr                        0x000055c4c76ba552 <unavailable> + 5458

    5    libc.so.6                          0x00002b0122c9e460 __libc_start_main +
    245

    6    tmp7ugos3kr                        0x000055c4c76ba1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in 1..<arr.count\
    \ {\n        if arr[index] > maxValue {\n            maxValue = arr[index]\n \
    \           maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp7ugos3kr/tmp7ugos3kr.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0122ab2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01227a9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01227a9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01227a87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ugos3kr                        0x000055c4c76ba552 <unavailable> + 5458

    5    libc.so.6                          0x00002b0122c9e460 __libc_start_main +
    245

    6    tmp7ugos3kr                        0x000055c4c76ba1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count {\n   \
    \     if arr[index] > max {\n            max = arr[index]\n            maxIndex\
    \ = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpo7_an7kf/tmpo7_an7kf.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae675f1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae675c12b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae675c12988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae675c117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo7_an7kf                        0x000055b80bc32552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae676107460 __libc_start_main +
    245

    6    tmpo7_an7kf                        0x000055b80bc321a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count {\n   \
    \     if arr[index] > max {\n            max = arr[index]\n            maxIndex\
    \ = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpo7_an7kf/tmpo7_an7kf.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae675f1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae675c12b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae675c12988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae675c117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo7_an7kf                        0x000055b80bc32552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae676107460 __libc_start_main +
    245

    6    tmpo7_an7kf                        0x000055b80bc321a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: 1
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = 0\n    var maxValue = arr[0]\n    for value in arr {\n   \
    \     if value > maxValue {\n            maxValue = value\n            maxIndex\
    \ = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpdkijb4pd.swift:15:24: error: cannot find 'index' in scope\n   \
    \         maxIndex = index\n                       ^~~~~\n"
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = 0\n    var maxValue = arr[0]\n    for i in 1..<arr.count {\n\
    \        if arr[i] > maxValue {\n            maxValue = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpi4zw6xc8/tmpi4zw6xc8.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd919e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd916d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd916d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd916d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi4zw6xc8                        0x000055e7502b7552 <unavailable> + 5458

    5    libc.so.6                          0x00002acd91bce460 __libc_start_main +
    245

    6    tmpi4zw6xc8                        0x000055e7502b71a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count {\n   \
    \     if arr[index] > max {\n            max = arr[index]\n            maxIndex\
    \ = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpo7_an7kf/tmpo7_an7kf.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae675f1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae675c12b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae675c12988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae675c117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo7_an7kf                        0x000055b80bc32552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae676107460 __libc_start_main +
    245

    6    tmpo7_an7kf                        0x000055b80bc321a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in 1..<arr.count\
    \ {\n        if arr[index] > maxValue {\n            maxValue = arr[index]\n \
    \           maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp7ugos3kr/tmp7ugos3kr.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0122ab2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01227a9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01227a9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01227a87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ugos3kr                        0x000055c4c76ba552 <unavailable> + 5458

    5    libc.so.6                          0x00002b0122c9e460 __libc_start_main +
    245

    6    tmp7ugos3kr                        0x000055c4c76ba1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    for idx in 0..<arr.count {\n        if arr[idx] > max {\n\
    \            max = idx\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpfc4p7lma/tmpfc4p7lma.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8254ca8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b825499fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b825499f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b825499e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfc4p7lma                        0x000055e59e56c552 <unavailable> + 5458

    5    libc.so.6                          0x00002b8254e94460 __libc_start_main +
    245

    6    tmpfc4p7lma                        0x000055e59e56c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in 1..<arr.count\
    \ {\n        if arr[index] > maxValue {\n            maxValue = arr[index]\n \
    \           maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp7ugos3kr/tmp7ugos3kr.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0122ab2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01227a9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01227a9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01227a87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ugos3kr                        0x000055c4c76ba552 <unavailable> + 5458

    5    libc.so.6                          0x00002b0122c9e460 __libc_start_main +
    245

    6    tmp7ugos3kr                        0x000055c4c76ba1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = -1\n    var maxValue = arr[0]\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > maxValue {\n            maxValue = arr[i]\n         \
    \   maxIndex = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpqsopjnvc/tmpqsopjnvc.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aabedcddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aabed9d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aabed9d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aabed9d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqsopjnvc                        0x0000557bb795b552 <unavailable> + 5458

    5    libc.so.6                          0x00002aabedec9460 __libc_start_main +
    245

    6    tmpqsopjnvc                        0x0000557bb795b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: 1
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = 0\n    var maxValue = arr[0]\n    for value in arr {\n   \
    \     if value > maxValue {\n            maxValue = value\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpoezz6lep.swift:15:24: error: cannot find 'i' in scope\n       \
    \     maxIndex = i\n                       ^\n"
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    for idx in 0..<arr.count {\n        if arr[idx] > max {\n\
    \            max = arr[idx]\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmppw7jso6k/tmppw7jso6k.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae57083dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae570534b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae570534988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae5705337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppw7jso6k                        0x000055ab29c42552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae570a29460 __libc_start_main +
    245

    6    tmppw7jso6k                        0x000055ab29c421a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count {\n   \
    \     if arr[index] > max {\n            max = arr[index]\n            maxIndex\
    \ = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpo7_an7kf/tmpo7_an7kf.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae675f1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae675c12b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae675c12988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae675c117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo7_an7kf                        0x000055b80bc32552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae676107460 __libc_start_main +
    245

    6    tmpo7_an7kf                        0x000055b80bc321a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    var index = 0\n    for x in arr {\n        if x > max {\n\
    \            max = x\n            index = x\n        }\n    }\n    return index\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp4ciykbqw/tmp4ciykbqw.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b67615bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b67612b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b67612b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b67612b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4ciykbqw                        0x0000563d8ea01482 <unavailable> + 5250

    5    libc.so.6                          0x00002b67617a8460 __libc_start_main +
    245

    6    tmp4ciykbqw                        0x0000563d8ea010d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count {\n   \
    \     if arr[index] > max {\n            max = arr[index]\n            maxIndex\
    \ = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpo7_an7kf/tmpo7_an7kf.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae675f1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae675c12b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae675c12988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae675c117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo7_an7kf                        0x000055b80bc32552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae676107460 __libc_start_main +
    245

    6    tmpo7_an7kf                        0x000055b80bc321a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count {\n   \
    \     if arr[index] > max {\n            max = arr[index]\n            maxIndex\
    \ = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpo7_an7kf/tmpo7_an7kf.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae675f1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae675c12b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae675c12988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae675c117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo7_an7kf                        0x000055b80bc32552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae676107460 __libc_start_main +
    245

    6    tmpo7_an7kf                        0x000055b80bc321a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = -1\n    for index in 0..<arr.count {\n        if arr[index]\
    \ > arr[index-1] {\n            maxIndex = index\n        }\n    }\n    return\
    \ maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b2fb9c15c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2fb990c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2fb990c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b2fb990c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2fb990bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b2fb970be83 <unavailable> + 188035

    6    tmpjr9tvhdy                        0x0000557a232a9a4a <unavailable> + 6730

    7    tmpjr9tvhdy                        0x0000557a232a94d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b2fb9e01460 __libc_start_main +
    245

    9    tmpjr9tvhdy                        0x0000557a232a91a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    var maxIndex = 0\n    for idx in 0..<arr.count {\n     \
    \   if arr[idx] > max {\n            max = arr[idx]\n            maxIndex = idx\n\
    \        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmpm21du15_/tmpm21du15_.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a6bfdbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a6bcd2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a6bcd2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a6bcd17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm21du15_                        0x000055b37281e552 <unavailable> + 5458

    5    libc.so.6                          0x00002b6a6c1c7460 __libc_start_main +
    245

    6    tmpm21du15_                        0x000055b37281e1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = 0\n    for index in 0..<arr.count {\n        if arr[index]\
    \ > arr[index-1] {\n            maxIndex = index\n        }\n    }\n    return\
    \ maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b1ed19d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1ed16c9561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b1ed16c9286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b1ed16c913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b1ed16c8bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b1ed14c8e83 <unavailable> + 188035

    6    tmp5rk6fp19                        0x000055ae59635a4a <unavailable> + 6730

    7    tmp5rk6fp19                        0x000055ae596354d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b1ed1bbe460 __libc_start_main +
    245

    9    tmp5rk6fp19                        0x000055ae596351a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: 1
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = 0\n    var maxValue = arr[0]\n    for value in arr {\n   \
    \     if value > maxValue {\n            maxValue = value\n            maxIndex\
    \ = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpdkijb4pd.swift:15:24: error: cannot find 'index' in scope\n   \
    \         maxIndex = index\n                       ^~~~~\n"
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    var maxIndex = 0\n    for idx in 0..<arr.count {\n     \
    \   if arr[idx] > max {\n            max = arr[idx]\n            maxIndex = idx\n\
    \        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmpm21du15_/tmpm21du15_.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a6bfdbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a6bcd2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a6bcd2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a6bcd17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm21du15_                        0x000055b37281e552 <unavailable> + 5458

    5    libc.so.6                          0x00002b6a6c1c7460 __libc_start_main +
    245

    6    tmpm21du15_                        0x000055b37281e1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in 1..<arr.count\
    \ {\n        if arr[index] > maxValue {\n            maxValue = arr[index]\n \
    \           maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp7ugos3kr/tmp7ugos3kr.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0122ab2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01227a9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01227a9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01227a87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ugos3kr                        0x000055c4c76ba552 <unavailable> + 5458

    5    libc.so.6                          0x00002b0122c9e460 __libc_start_main +
    245

    6    tmp7ugos3kr                        0x000055c4c76ba1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = -1\n    for i in 0..<arr.count {\n        if arr[i] > arr[maxIndex]\
    \ {\n            maxIndex = i\n        }\n    }\n    return maxIndex\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab2d8969c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab2d8660561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab2d8660286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab2d866013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab2d865fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab2d845fe83 <unavailable> + 188035

    6    tmpg2vepad5                        0x0000561b7303aa28 <unavailable> + 6696

    7    tmpg2vepad5                        0x0000561b7303a4d4 <unavailable> + 5332

    8    libc.so.6                          0x00002ab2d8b55460 __libc_start_main +
    245

    9    tmpg2vepad5                        0x0000561b7303a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    for idx in 0..<arr.count {\n        if arr[idx] > max {\n\
    \            max = idx\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpfc4p7lma/tmpfc4p7lma.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8254ca8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b825499fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b825499f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b825499e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfc4p7lma                        0x000055e59e56c552 <unavailable> + 5458

    5    libc.so.6                          0x00002b8254e94460 __libc_start_main +
    245

    6    tmpfc4p7lma                        0x000055e59e56c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count {\n   \
    \     if arr[index] > max {\n            max = arr[index]\n            maxIndex\
    \ = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpo7_an7kf/tmpo7_an7kf.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae675f1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae675c12b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae675c12988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae675c117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo7_an7kf                        0x000055b80bc32552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae676107460 __libc_start_main +
    245

    6    tmpo7_an7kf                        0x000055b80bc321a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count {\n   \
    \     if arr[index] > max {\n            max = arr[index]\n            maxIndex\
    \ = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpo7_an7kf/tmpo7_an7kf.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae675f1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae675c12b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae675c12988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae675c117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo7_an7kf                        0x000055b80bc32552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae676107460 __libc_start_main +
    245

    6    tmpo7_an7kf                        0x000055b80bc321a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = -1\n    var maxVal = arr[0]\n    for val in arr {\n      \
    \  if val > maxVal {\n            maxVal = val\n            maxIndex = val\n \
    \       } else if val == maxVal {\n            maxIndex = val\n        }\n   \
    \ }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp6rvcs5tb/tmp6rvcs5tb.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ede589c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ede280b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ede280988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ede27f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6rvcs5tb                        0x000055b64d5764d2 <unavailable> + 5330

    5    libc.so.6                          0x00002b2ede775460 __libc_start_main +
    245

    6    tmp6rvcs5tb                        0x000055b64d576129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: 1
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = -1\n    var maxValue = arr[0]\n    for value in arr {\n  \
    \      if value > maxValue {\n            maxValue = value\n            maxIndex\
    \ = arr.index(value)\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpnqu9lusf.swift:15:28: error: no exact matches in call to instance\
    \ method 'index'\n            maxIndex = arr.index(value)\n                  \
    \         ^\nSwift.Array:7:28: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(after:)')\n    @inlinable public func index(after i: Int) -> Int\n\
    \                           ^\nSwift.Array:9:28: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(before:)')\n    @inlinable public func index(before\
    \ i: Int) -> Int\n                           ^\nSwift.RandomAccessCollection:3:28:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(after:)')\n\
    \    @inlinable public func index(after i: Self.Index) -> Self.Index\n       \
    \                    ^\nSwift.RandomAccessCollection:4:28: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(before:)')\n    @inlinable public func\
    \ index(before i: Self.Index) -> Self.Index\n                           ^\n"
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in 1..<arr.count\
    \ {\n        if arr[index] > maxValue {\n            maxValue = arr[index]\n \
    \           maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp7ugos3kr/tmp7ugos3kr.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0122ab2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01227a9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01227a9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01227a87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ugos3kr                        0x000055c4c76ba552 <unavailable> + 5458

    5    libc.so.6                          0x00002b0122c9e460 __libc_start_main +
    245

    6    tmp7ugos3kr                        0x000055c4c76ba1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = 0\n    var maxValue = arr[0]\n    for i in 1..<arr.count {\n\
    \        if arr[i] > maxValue {\n            maxValue = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpi4zw6xc8/tmpi4zw6xc8.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd919e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd916d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd916d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd916d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi4zw6xc8                        0x000055e7502b7552 <unavailable> + 5458

    5    libc.so.6                          0x00002acd91bce460 __libc_start_main +
    245

    6    tmpi4zw6xc8                        0x000055e7502b71a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count {\n   \
    \     if arr[index] > max {\n            max = arr[index]\n            maxIndex\
    \ = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpo7_an7kf/tmpo7_an7kf.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae675f1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae675c12b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae675c12988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae675c117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo7_an7kf                        0x000055b80bc32552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae676107460 __libc_start_main +
    245

    6    tmpo7_an7kf                        0x000055b80bc321a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    for idx in 0..<arr.count {\n        if arr[idx] > max {\n\
    \            max = arr[idx]\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmppw7jso6k/tmppw7jso6k.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae57083dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae570534b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae570534988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae5705337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppw7jso6k                        0x000055ab29c42552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae570a29460 __libc_start_main +
    245

    6    tmppw7jso6k                        0x000055ab29c421a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = 0\n    for index in 0..<arr.count {\n        if arr[index]\
    \ > arr[maxIndex] {\n            maxIndex = index\n        }\n    }\n    return\
    \ maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpjarcn6xt/tmpjarcn6xt.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1987cf2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19879e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19879e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19879e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjarcn6xt                        0x0000556f86a00552 <unavailable> + 5458

    5    libc.so.6                          0x00002b1987ede460 __libc_start_main +
    245

    6    tmpjarcn6xt                        0x0000556f86a001a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count {\n   \
    \     if arr[index] > max {\n            max = arr[index]\n            maxIndex\
    \ = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpo7_an7kf/tmpo7_an7kf.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae675f1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae675c12b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae675c12988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae675c117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo7_an7kf                        0x000055b80bc32552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae676107460 __libc_start_main +
    245

    6    tmpo7_an7kf                        0x000055b80bc321a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    for idx in 0..<arr.count {\n        if arr[idx] > max {\n\
    \            max = arr[idx]\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmppw7jso6k/tmppw7jso6k.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae57083dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae570534b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae570534988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae5705337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppw7jso6k                        0x000055ab29c42552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae570a29460 __libc_start_main +
    245

    6    tmppw7jso6k                        0x000055ab29c421a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    var index = 0\n    for element in arr {\n        if element\
    \ > max {\n            max = element\n            index = index + 1\n        }\n\
    \    }\n    if index == 0 {\n        return -1\n    }\n    return index\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp32v4ttmp/tmp32v4ttmp.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b235ece4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b235e9dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b235e9db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b235e9da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp32v4ttmp                        0x000055ab39b6a482 <unavailable> + 5250

    5    libc.so.6                          0x00002b235eed0460 __libc_start_main +
    245

    6    tmp32v4ttmp                        0x000055ab39b6a0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in 1..<arr.count\
    \ {\n        if arr[index] > maxValue {\n            maxValue = arr[index]\n \
    \           maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp7ugos3kr/tmp7ugos3kr.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0122ab2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01227a9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01227a9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01227a87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ugos3kr                        0x000055c4c76ba552 <unavailable> + 5458

    5    libc.so.6                          0x00002b0122c9e460 __libc_start_main +
    245

    6    tmp7ugos3kr                        0x000055c4c76ba1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    for idx in 0..<arr.count {\n        if arr[idx] > max {\n\
    \            max = arr[idx]\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmppw7jso6k/tmppw7jso6k.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae57083dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae570534b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae570534988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae5705337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppw7jso6k                        0x000055ab29c42552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae570a29460 __libc_start_main +
    245

    6    tmppw7jso6k                        0x000055ab29c421a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: 1
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = 0\n    var maxValue = arr[0]\n    for value in arr {\n   \
    \     if value > maxValue {\n            maxValue = value\n            maxIndex\
    \ = arr.index(value)\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpeq9cxdmd.swift:15:28: error: no exact matches in call to instance\
    \ method 'index'\n            maxIndex = arr.index(value)\n                  \
    \         ^\nSwift.Array:7:28: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(after:)')\n    @inlinable public func index(after i: Int) -> Int\n\
    \                           ^\nSwift.Array:9:28: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(before:)')\n    @inlinable public func index(before\
    \ i: Int) -> Int\n                           ^\nSwift.RandomAccessCollection:3:28:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(after:)')\n\
    \    @inlinable public func index(after i: Self.Index) -> Self.Index\n       \
    \                    ^\nSwift.RandomAccessCollection:4:28: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(before:)')\n    @inlinable public func\
    \ index(before i: Self.Index) -> Self.Index\n                           ^\n"
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = -1\n    for i in 0..<arr.count {\n        if arr[i] > arr[maxIndex]\
    \ {\n            maxIndex = i\n        }\n    }\n    return maxIndex\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab2d8969c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab2d8660561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab2d8660286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab2d866013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab2d865fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab2d845fe83 <unavailable> + 188035

    6    tmpg2vepad5                        0x0000561b7303aa28 <unavailable> + 6696

    7    tmpg2vepad5                        0x0000561b7303a4d4 <unavailable> + 5332

    8    libc.so.6                          0x00002ab2d8b55460 __libc_start_main +
    245

    9    tmpg2vepad5                        0x0000561b7303a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = -1\n    var maxValue = arr[0]\n    for index in 1..<arr.count\
    \ {\n        if arr[index] > maxValue {\n            maxValue = arr[index]\n \
    \           maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpb9q2zyam/tmpb9q2zyam.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95752c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9574fbfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9574fbf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9574fbe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb9q2zyam                        0x0000557af3409552 <unavailable> + 5458

    5    libc.so.6                          0x00002b95754b4460 __libc_start_main +
    245

    6    tmpb9q2zyam                        0x0000557af34091a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: 1
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = 0\n    var maxValue = arr[0]\n    for value in arr {\n   \
    \     if value > maxValue {\n            maxValue = value\n            maxIndex\
    \ = arr.index {\n                $0 > maxValue\n            }\n        }\n   \
    \ }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpbc_8yvh2.swift:15:28: error: value of optional type 'Array<Int>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<Int>.Index'\
    \ (aka 'Int')\n            maxIndex = arr.index {\n                          \
    \ ^\n/tmp/tmpbc_8yvh2.swift:15:28: note: coalesce using '??' to provide a default\
    \ when the optional value contains 'nil'\n            maxIndex = arr.index {\n\
    \                           ^\n/tmp/tmpbc_8yvh2.swift:15:28: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n        \
    \    maxIndex = arr.index {\n                           ^\n"
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in 1..<arr.count\
    \ {\n        if arr[index] > maxValue {\n            maxValue = arr[index]\n \
    \           maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp7ugos3kr/tmp7ugos3kr.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0122ab2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01227a9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01227a9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01227a87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ugos3kr                        0x000055c4c76ba552 <unavailable> + 5458

    5    libc.so.6                          0x00002b0122c9e460 __libc_start_main +
    245

    6    tmp7ugos3kr                        0x000055c4c76ba1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in 1..<arr.count\
    \ {\n        if arr[index] > maxValue {\n            maxValue = arr[index]\n \
    \           maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp7ugos3kr/tmp7ugos3kr.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0122ab2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01227a9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01227a9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01227a87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ugos3kr                        0x000055c4c76ba552 <unavailable> + 5458

    5    libc.so.6                          0x00002b0122c9e460 __libc_start_main +
    245

    6    tmp7ugos3kr                        0x000055c4c76ba1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count {\n   \
    \     if arr[index] > max {\n            max = arr[index]\n            maxIndex\
    \ = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpo7_an7kf/tmpo7_an7kf.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae675f1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae675c12b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae675c12988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae675c117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo7_an7kf                        0x000055b80bc32552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae676107460 __libc_start_main +
    245

    6    tmpo7_an7kf                        0x000055b80bc321a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    for idx in 0..<arr.count {\n        if arr[idx] > max {\n\
    \            max = arr[idx]\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmppw7jso6k/tmppw7jso6k.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae57083dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae570534b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae570534988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae5705337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppw7jso6k                        0x000055ab29c42552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae570a29460 __libc_start_main +
    245

    6    tmppw7jso6k                        0x000055ab29c421a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = -1\n    for index in 0..<arr.count {\n        if arr[index]\
    \ > arr[index-1] {\n            maxIndex = index\n        }\n    }\n    return\
    \ maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b2fb9c15c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2fb990c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2fb990c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b2fb990c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2fb990bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b2fb970be83 <unavailable> + 188035

    6    tmpjr9tvhdy                        0x0000557a232a9a4a <unavailable> + 6730

    7    tmpjr9tvhdy                        0x0000557a232a94d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b2fb9e01460 __libc_start_main +
    245

    9    tmpjr9tvhdy                        0x0000557a232a91a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count {\n   \
    \     if arr[index] > max {\n            max = arr[index]\n            maxIndex\
    \ = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpo7_an7kf/tmpo7_an7kf.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae675f1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae675c12b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae675c12988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae675c117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo7_an7kf                        0x000055b80bc32552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae676107460 __libc_start_main +
    245

    6    tmpo7_an7kf                        0x000055b80bc321a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    for idx in 0..<arr.count {\n        if arr[idx] > max {\n\
    \            max = idx\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpfc4p7lma/tmpfc4p7lma.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8254ca8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b825499fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b825499f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b825499e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfc4p7lma                        0x000055e59e56c552 <unavailable> + 5458

    5    libc.so.6                          0x00002b8254e94460 __libc_start_main +
    245

    6    tmpfc4p7lma                        0x000055e59e56c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in 1..<arr.count\
    \ {\n        if arr[index] > maxValue {\n            maxValue = arr[index]\n \
    \           maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp7ugos3kr/tmp7ugos3kr.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0122ab2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01227a9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01227a9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01227a87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ugos3kr                        0x000055c4c76ba552 <unavailable> + 5458

    5    libc.so.6                          0x00002b0122c9e460 __libc_start_main +
    245

    6    tmp7ugos3kr                        0x000055c4c76ba1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in 1..<arr.count\
    \ {\n        if arr[index] > maxValue {\n            maxValue = arr[index]\n \
    \           maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp7ugos3kr/tmp7ugos3kr.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0122ab2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01227a9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01227a9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01227a87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ugos3kr                        0x000055c4c76ba552 <unavailable> + 5458

    5    libc.so.6                          0x00002b0122c9e460 __libc_start_main +
    245

    6    tmp7ugos3kr                        0x000055c4c76ba1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count {\n   \
    \     if arr[index] > max {\n            max = arr[index]\n            maxIndex\
    \ = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpo7_an7kf/tmpo7_an7kf.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae675f1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae675c12b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae675c12988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae675c117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo7_an7kf                        0x000055b80bc32552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae676107460 __libc_start_main +
    245

    6    tmpo7_an7kf                        0x000055b80bc321a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in 1..<arr.count\
    \ {\n        if arr[index] > maxValue {\n            maxValue = arr[index]\n \
    \           maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp7ugos3kr/tmp7ugos3kr.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0122ab2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01227a9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01227a9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01227a87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ugos3kr                        0x000055c4c76ba552 <unavailable> + 5458

    5    libc.so.6                          0x00002b0122c9e460 __libc_start_main +
    245

    6    tmp7ugos3kr                        0x000055c4c76ba1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in 1..<arr.count\
    \ {\n        if arr[index] > maxValue {\n            maxValue = arr[index]\n \
    \           maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp7ugos3kr/tmp7ugos3kr.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0122ab2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01227a9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01227a9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01227a87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ugos3kr                        0x000055c4c76ba552 <unavailable> + 5458

    5    libc.so.6                          0x00002b0122c9e460 __libc_start_main +
    245

    6    tmp7ugos3kr                        0x000055c4c76ba1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count {\n   \
    \     if arr[index] > max {\n            max = arr[index]\n            maxIndex\
    \ = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpo7_an7kf/tmpo7_an7kf.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae675f1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae675c12b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae675c12988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae675c117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo7_an7kf                        0x000055b80bc32552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae676107460 __libc_start_main +
    245

    6    tmpo7_an7kf                        0x000055b80bc321a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = -1\n    for index in 0..<arr.count {\n        if arr[index]\
    \ > arr[maxIndex] {\n            maxIndex = index\n        }\n    }\n    return\
    \ maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002acc55f3fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acc55c36561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002acc55c36286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002acc55c3613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002acc55c35bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002acc55a35e83 <unavailable> + 188035

    6    tmp6ip4irxj                        0x000055d881151a28 <unavailable> + 6696

    7    tmp6ip4irxj                        0x000055d8811514d4 <unavailable> + 5332

    8    libc.so.6                          0x00002acc5612b460 __libc_start_main +
    245

    9    tmp6ip4irxj                        0x000055d8811511a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in 1..<arr.count\
    \ {\n        if arr[index] > maxValue {\n            maxValue = arr[index]\n \
    \           maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp7ugos3kr/tmp7ugos3kr.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0122ab2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01227a9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01227a9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01227a87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ugos3kr                        0x000055c4c76ba552 <unavailable> + 5458

    5    libc.so.6                          0x00002b0122c9e460 __libc_start_main +
    245

    6    tmp7ugos3kr                        0x000055c4c76ba1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count {\n   \
    \     if arr[index] > max {\n            max = arr[index]\n            maxIndex\
    \ = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpo7_an7kf/tmpo7_an7kf.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae675f1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae675c12b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae675c12988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae675c117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo7_an7kf                        0x000055b80bc32552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae676107460 __libc_start_main +
    245

    6    tmpo7_an7kf                        0x000055b80bc321a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in 1..<arr.count\
    \ {\n        if arr[index] > maxValue {\n            maxValue = arr[index]\n \
    \           maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp7ugos3kr/tmp7ugos3kr.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0122ab2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01227a9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01227a9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01227a87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ugos3kr                        0x000055c4c76ba552 <unavailable> + 5458

    5    libc.so.6                          0x00002b0122c9e460 __libc_start_main +
    245

    6    tmp7ugos3kr                        0x000055c4c76ba1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = -1\n    for index in 0..<arr.count {\n        if arr[index]\
    \ > arr[index-1] {\n            maxIndex = index\n        }\n    }\n    return\
    \ maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b2fb9c15c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2fb990c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2fb990c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b2fb990c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2fb990bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b2fb970be83 <unavailable> + 188035

    6    tmpjr9tvhdy                        0x0000557a232a9a4a <unavailable> + 6730

    7    tmpjr9tvhdy                        0x0000557a232a94d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b2fb9e01460 __libc_start_main +
    245

    9    tmpjr9tvhdy                        0x0000557a232a91a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: 1
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = 0\n    var maxValue = arr[0]\n    for value in arr {\n   \
    \     if value > maxValue {\n            maxValue = value\n            maxIndex\
    \ = arr.index {$0 > maxValue}\n        }\n    }\n    return maxIndex\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpwaabdvz8.swift:15:28: error: value of optional type 'Array<Int>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<Int>.Index'\
    \ (aka 'Int')\n            maxIndex = arr.index {$0 > maxValue}\n            \
    \               ^\n/tmp/tmpwaabdvz8.swift:15:28: note: coalesce using '??' to\
    \ provide a default when the optional value contains 'nil'\n            maxIndex\
    \ = arr.index {$0 > maxValue}\n                           ^\n                \
    \                                 ?? <#default value#>\n/tmp/tmpwaabdvz8.swift:15:28:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n            maxIndex = arr.index {$0 > maxValue}\n                  \
    \         ^\n                                                !\n"
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in 1..<arr.count\
    \ {\n        if arr[index] > maxValue {\n            maxValue = arr[index]\n \
    \           maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp7ugos3kr/tmp7ugos3kr.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0122ab2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01227a9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01227a9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01227a87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ugos3kr                        0x000055c4c76ba552 <unavailable> + 5458

    5    libc.so.6                          0x00002b0122c9e460 __libc_start_main +
    245

    6    tmp7ugos3kr                        0x000055c4c76ba1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = 0\n    for index in 0..<arr.count {\n        if arr[index]\
    \ > arr[maxIndex] {\n            maxIndex = index\n        }\n    }\n    return\
    \ maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpjarcn6xt/tmpjarcn6xt.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1987cf2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19879e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19879e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19879e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjarcn6xt                        0x0000556f86a00552 <unavailable> + 5458

    5    libc.so.6                          0x00002b1987ede460 __libc_start_main +
    245

    6    tmpjarcn6xt                        0x0000556f86a001a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = 0\n    var maxValue = arr[0]\n    for i in 1..<arr.count {\n\
    \        if arr[i] > maxValue {\n            maxValue = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpi4zw6xc8/tmpi4zw6xc8.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd919e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd916d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd916d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd916d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi4zw6xc8                        0x000055e7502b7552 <unavailable> + 5458

    5    libc.so.6                          0x00002acd91bce460 __libc_start_main +
    245

    6    tmpi4zw6xc8                        0x000055e7502b71a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count {\n   \
    \     if arr[index] > max {\n            max = arr[index]\n            maxIndex\
    \ = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpo7_an7kf/tmpo7_an7kf.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae675f1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae675c12b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae675c12988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae675c117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo7_an7kf                        0x000055b80bc32552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae676107460 __libc_start_main +
    245

    6    tmpo7_an7kf                        0x000055b80bc321a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: 1
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = 0\n    var maxValue = arr[0]\n    for value in arr {\n   \
    \     if value > maxValue {\n            maxValue = value\n            maxIndex\
    \ = arr.index {$0 > maxValue}\n        }\n    }\n    return maxIndex\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpwaabdvz8.swift:15:28: error: value of optional type 'Array<Int>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<Int>.Index'\
    \ (aka 'Int')\n            maxIndex = arr.index {$0 > maxValue}\n            \
    \               ^\n/tmp/tmpwaabdvz8.swift:15:28: note: coalesce using '??' to\
    \ provide a default when the optional value contains 'nil'\n            maxIndex\
    \ = arr.index {$0 > maxValue}\n                           ^\n                \
    \                                 ?? <#default value#>\n/tmp/tmpwaabdvz8.swift:15:28:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n            maxIndex = arr.index {$0 > maxValue}\n                  \
    \         ^\n                                                !\n"
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in 1..<arr.count\
    \ {\n        if arr[index] > maxValue {\n            maxValue = arr[index]\n \
    \           maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp7ugos3kr/tmp7ugos3kr.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0122ab2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01227a9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01227a9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01227a87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ugos3kr                        0x000055c4c76ba552 <unavailable> + 5458

    5    libc.so.6                          0x00002b0122c9e460 __libc_start_main +
    245

    6    tmp7ugos3kr                        0x000055c4c76ba1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = 0\n    var maxValue = arr[0]\n    for i in 1..<arr.count {\n\
    \        if arr[i] > maxValue {\n            maxValue = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpi4zw6xc8/tmpi4zw6xc8.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd919e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd916d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd916d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd916d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi4zw6xc8                        0x000055e7502b7552 <unavailable> + 5458

    5    libc.so.6                          0x00002acd91bce460 __libc_start_main +
    245

    6    tmpi4zw6xc8                        0x000055e7502b71a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count {\n   \
    \     if arr[index] > max {\n            max = arr[index]\n            maxIndex\
    \ = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpo7_an7kf/tmpo7_an7kf.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae675f1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae675c12b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae675c12988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae675c117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo7_an7kf                        0x000055b80bc32552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae676107460 __libc_start_main +
    245

    6    tmpo7_an7kf                        0x000055b80bc321a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    var maxIndex = 0\n    for idx in 0..<arr.count {\n     \
    \   if arr[idx] > max {\n            max = arr[idx]\n            maxIndex = idx\n\
    \        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmpm21du15_/tmpm21du15_.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a6bfdbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a6bcd2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a6bcd2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a6bcd17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm21du15_                        0x000055b37281e552 <unavailable> + 5458

    5    libc.so.6                          0x00002b6a6c1c7460 __libc_start_main +
    245

    6    tmpm21du15_                        0x000055b37281e1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    for idx in 0..<arr.count {\n        if arr[idx] > max {\n\
    \            max = arr[idx]\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmppw7jso6k/tmppw7jso6k.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae57083dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae570534b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae570534988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae5705337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppw7jso6k                        0x000055ab29c42552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae570a29460 __libc_start_main +
    245

    6    tmppw7jso6k                        0x000055ab29c421a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in 1..<arr.count\
    \ {\n        if arr[index] > maxValue {\n            maxValue = arr[index]\n \
    \           maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp7ugos3kr/tmp7ugos3kr.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0122ab2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01227a9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01227a9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01227a87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ugos3kr                        0x000055c4c76ba552 <unavailable> + 5458

    5    libc.so.6                          0x00002b0122c9e460 __libc_start_main +
    245

    6    tmp7ugos3kr                        0x000055c4c76ba1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count {\n   \
    \     if arr[index] > max {\n            max = arr[index]\n            maxIndex\
    \ = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpo7_an7kf/tmpo7_an7kf.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae675f1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae675c12b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae675c12988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae675c117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo7_an7kf                        0x000055b80bc32552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae676107460 __libc_start_main +
    245

    6    tmpo7_an7kf                        0x000055b80bc321a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = 0\n    var maxValue = arr[0]\n    for i in 1..<arr.count {\n\
    \        if arr[i] > maxValue {\n            maxValue = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpi4zw6xc8/tmpi4zw6xc8.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd919e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd916d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd916d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd916d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi4zw6xc8                        0x000055e7502b7552 <unavailable> + 5458

    5    libc.so.6                          0x00002acd91bce460 __libc_start_main +
    245

    6    tmpi4zw6xc8                        0x000055e7502b71a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    var maxIndex = 0\n    for idx in 0..<arr.count {\n     \
    \   if arr[idx] > max {\n            max = arr[idx]\n            maxIndex = idx\n\
    \        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmpm21du15_/tmpm21du15_.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a6bfdbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a6bcd2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a6bcd2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a6bcd17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm21du15_                        0x000055b37281e552 <unavailable> + 5458

    5    libc.so.6                          0x00002b6a6c1c7460 __libc_start_main +
    245

    6    tmpm21du15_                        0x000055b37281e1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    var maxIndex = 0\n    for idx in 0..<arr.count {\n     \
    \   if arr[idx] > max {\n            max = arr[idx]\n            maxIndex = idx\n\
    \        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmpm21du15_/tmpm21du15_.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a6bfdbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a6bcd2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a6bcd2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a6bcd17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm21du15_                        0x000055b37281e552 <unavailable> + 5458

    5    libc.so.6                          0x00002b6a6c1c7460 __libc_start_main +
    245

    6    tmpm21du15_                        0x000055b37281e1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    for idx in 0..<arr.count {\n        if arr[idx] > max {\n\
    \            max = arr[idx]\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmppw7jso6k/tmppw7jso6k.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae57083dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae570534b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae570534988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae5705337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppw7jso6k                        0x000055ab29c42552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae570a29460 __libc_start_main +
    245

    6    tmppw7jso6k                        0x000055ab29c421a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = -1\n    for index in 0..<arr.count {\n        if arr[index]\
    \ > arr[index-1] {\n            maxIndex = index\n        }\n    }\n    return\
    \ maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b2fb9c15c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2fb990c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2fb990c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b2fb990c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2fb990bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b2fb970be83 <unavailable> + 188035

    6    tmpjr9tvhdy                        0x0000557a232a9a4a <unavailable> + 6730

    7    tmpjr9tvhdy                        0x0000557a232a94d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b2fb9e01460 __libc_start_main +
    245

    9    tmpjr9tvhdy                        0x0000557a232a91a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    var index = 0\n    for x in arr {\n        if x > max {\n\
    \            max = x\n            index = x\n        }\n    }\n    return index\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp4ciykbqw/tmp4ciykbqw.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b67615bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b67612b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b67612b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b67612b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4ciykbqw                        0x0000563d8ea01482 <unavailable> + 5250

    5    libc.so.6                          0x00002b67617a8460 __libc_start_main +
    245

    6    tmp4ciykbqw                        0x0000563d8ea010d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in 1..<arr.count\
    \ {\n        if arr[index] > maxValue {\n            maxValue = arr[index]\n \
    \           maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp7ugos3kr/tmp7ugos3kr.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0122ab2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01227a9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01227a9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01227a87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ugos3kr                        0x000055c4c76ba552 <unavailable> + 5458

    5    libc.so.6                          0x00002b0122c9e460 __libc_start_main +
    245

    6    tmp7ugos3kr                        0x000055c4c76ba1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = 0\n    var maxValue = arr[0]\n    for i in 1..<arr.count {\n\
    \        if arr[i] > maxValue {\n            maxValue = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpi4zw6xc8/tmpi4zw6xc8.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd919e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd916d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd916d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd916d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi4zw6xc8                        0x000055e7502b7552 <unavailable> + 5458

    5    libc.so.6                          0x00002acd91bce460 __libc_start_main +
    245

    6    tmpi4zw6xc8                        0x000055e7502b71a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count {\n   \
    \     if arr[index] > max {\n            max = arr[index]\n            maxIndex\
    \ = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpo7_an7kf/tmpo7_an7kf.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae675f1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae675c12b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae675c12988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae675c117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo7_an7kf                        0x000055b80bc32552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae676107460 __libc_start_main +
    245

    6    tmpo7_an7kf                        0x000055b80bc321a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count {\n   \
    \     if arr[index] > max {\n            max = arr[index]\n            maxIndex\
    \ = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpo7_an7kf/tmpo7_an7kf.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae675f1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae675c12b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae675c12988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae675c117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo7_an7kf                        0x000055b80bc32552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae676107460 __libc_start_main +
    245

    6    tmpo7_an7kf                        0x000055b80bc321a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = -1\n    var maxValue = arr[0]\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > maxValue {\n            maxValue = arr[i]\n         \
    \   maxIndex = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpqsopjnvc/tmpqsopjnvc.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aabedcddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aabed9d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aabed9d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aabed9d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqsopjnvc                        0x0000557bb795b552 <unavailable> + 5458

    5    libc.so.6                          0x00002aabedec9460 __libc_start_main +
    245

    6    tmpqsopjnvc                        0x0000557bb795b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = 0\n    for index in 0..<arr.count {\n        if arr[index]\
    \ > arr[maxIndex] {\n            maxIndex = index\n        }\n    }\n    return\
    \ maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpjarcn6xt/tmpjarcn6xt.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1987cf2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19879e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19879e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19879e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjarcn6xt                        0x0000556f86a00552 <unavailable> + 5458

    5    libc.so.6                          0x00002b1987ede460 __libc_start_main +
    245

    6    tmpjarcn6xt                        0x0000556f86a001a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    for idx in 0..<arr.count {\n        if arr[idx] > max {\n\
    \            max = idx\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpfc4p7lma/tmpfc4p7lma.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8254ca8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b825499fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b825499f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b825499e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfc4p7lma                        0x000055e59e56c552 <unavailable> + 5458

    5    libc.so.6                          0x00002b8254e94460 __libc_start_main +
    245

    6    tmpfc4p7lma                        0x000055e59e56c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count {\n   \
    \     if arr[index] > max {\n            max = arr[index]\n            maxIndex\
    \ = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpo7_an7kf/tmpo7_an7kf.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae675f1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae675c12b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae675c12988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae675c117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo7_an7kf                        0x000055b80bc32552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae676107460 __libc_start_main +
    245

    6    tmpo7_an7kf                        0x000055b80bc321a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    var index = 0\n    for element in arr {\n        if element\
    \ > max {\n            max = element\n            index = index + 1\n        }\n\
    \    }\n    if index == 0 {\n        return -1\n    }\n    return index\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp32v4ttmp/tmp32v4ttmp.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b235ece4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b235e9dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b235e9db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b235e9da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp32v4ttmp                        0x000055ab39b6a482 <unavailable> + 5250

    5    libc.so.6                          0x00002b235eed0460 __libc_start_main +
    245

    6    tmp32v4ttmp                        0x000055ab39b6a0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = -1\n    var maxVal = -1\n    for idx in 0..<arr.count {\n\
    \        if arr[idx] > maxVal {\n            maxVal = arr[idx]\n            maxIndex\
    \ = idx\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp416xt0sl/tmp416xt0sl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b10121e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1011edeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1011ede988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1011edd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp416xt0sl                        0x00005629c2004552 <unavailable> + 5458

    5    libc.so.6                          0x00002b10123d3460 __libc_start_main +
    245

    6    tmp416xt0sl                        0x00005629c20041a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count {\n   \
    \     if arr[index] > max {\n            max = arr[index]\n            maxIndex\
    \ = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpo7_an7kf/tmpo7_an7kf.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae675f1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae675c12b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae675c12988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae675c117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo7_an7kf                        0x000055b80bc32552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae676107460 __libc_start_main +
    245

    6    tmpo7_an7kf                        0x000055b80bc321a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in 1..<arr.count\
    \ {\n        if arr[index] > maxValue {\n            maxValue = arr[index]\n \
    \           maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp7ugos3kr/tmp7ugos3kr.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0122ab2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01227a9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01227a9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01227a87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ugos3kr                        0x000055c4c76ba552 <unavailable> + 5458

    5    libc.so.6                          0x00002b0122c9e460 __libc_start_main +
    245

    6    tmp7ugos3kr                        0x000055c4c76ba1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    var index = 0\n    for element in arr {\n        if element\
    \ > max {\n            max = element\n            index = index + 1\n        }\n\
    \    }\n    if index == 0 {\n        return -1\n    }\n    return index\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp32v4ttmp/tmp32v4ttmp.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b235ece4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b235e9dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b235e9db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b235e9da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp32v4ttmp                        0x000055ab39b6a482 <unavailable> + 5250

    5    libc.so.6                          0x00002b235eed0460 __libc_start_main +
    245

    6    tmp32v4ttmp                        0x000055ab39b6a0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = -1\n    var maxValue = arr[0]\n    for index in 1..<arr.count\
    \ {\n        if arr[index] > maxValue {\n            maxValue = arr[index]\n \
    \           maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpb9q2zyam/tmpb9q2zyam.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95752c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9574fbfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9574fbf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9574fbe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb9q2zyam                        0x0000557af3409552 <unavailable> + 5458

    5    libc.so.6                          0x00002b95754b4460 __libc_start_main +
    245

    6    tmpb9q2zyam                        0x0000557af34091a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count {\n   \
    \     if arr[index] > max {\n            max = arr[index]\n            maxIndex\
    \ = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpo7_an7kf/tmpo7_an7kf.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae675f1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae675c12b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae675c12988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae675c117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo7_an7kf                        0x000055b80bc32552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae676107460 __libc_start_main +
    245

    6    tmpo7_an7kf                        0x000055b80bc321a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = -1\n    var maxVal = arr[0]\n    for val in arr {\n      \
    \  if val > maxVal {\n            maxIndex = val\n            maxVal = val\n \
    \       } else if val == maxVal {\n            maxIndex += 1\n        }\n    }\n\
    \    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp84gckq7n/tmp84gckq7n.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5bada31c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5bad728b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5bad728988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5bad7277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84gckq7n                        0x000055e08d6d04d2 <unavailable> + 5330

    5    libc.so.6                          0x00002b5badc1d460 __libc_start_main +
    245

    6    tmp84gckq7n                        0x000055e08d6d0129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    var maxIndex = 0\n    for idx in 0..<arr.count {\n     \
    \   if arr[idx] > max {\n            max = arr[idx]\n            maxIndex = idx\n\
    \        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmpm21du15_/tmpm21du15_.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a6bfdbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a6bcd2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a6bcd2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a6bcd17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm21du15_                        0x000055b37281e552 <unavailable> + 5458

    5    libc.so.6                          0x00002b6a6c1c7460 __libc_start_main +
    245

    6    tmpm21du15_                        0x000055b37281e1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = 0\n    for index in 0..<arr.count {\n        if arr[index]\
    \ > arr[index-1] {\n            maxIndex = index\n        }\n    }\n    return\
    \ maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b1ed19d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1ed16c9561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b1ed16c9286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b1ed16c913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b1ed16c8bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b1ed14c8e83 <unavailable> + 188035

    6    tmp5rk6fp19                        0x000055ae59635a4a <unavailable> + 6730

    7    tmp5rk6fp19                        0x000055ae596354d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b1ed1bbe460 __libc_start_main +
    245

    9    tmp5rk6fp19                        0x000055ae596351a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count {\n   \
    \     if arr[index] > max {\n            max = arr[index]\n            maxIndex\
    \ = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpo7_an7kf/tmpo7_an7kf.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae675f1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae675c12b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae675c12988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae675c117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo7_an7kf                        0x000055b80bc32552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae676107460 __libc_start_main +
    245

    6    tmpo7_an7kf                        0x000055b80bc321a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    for index in 0..<arr.count {\n        if arr[index] > max\
    \ {\n            max = arr[index]\n        }\n    }\n    return max\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp__7kk8zw/tmp__7kk8zw.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad628ef2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad628be9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad628be9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad628be87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__7kk8zw                        0x00005648db46d552 <unavailable> + 5458

    5    libc.so.6                          0x00002ad6290de460 __libc_start_main +
    245

    6    tmp__7kk8zw                        0x00005648db46d1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count {\n   \
    \     if arr[index] > max {\n            max = arr[index]\n            maxIndex\
    \ = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpo7_an7kf/tmpo7_an7kf.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae675f1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae675c12b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae675c12988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae675c117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo7_an7kf                        0x000055b80bc32552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae676107460 __libc_start_main +
    245

    6    tmpo7_an7kf                        0x000055b80bc321a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: 1
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = 0\n    var maxValue = arr[0]\n    for value in arr {\n   \
    \     if value > maxValue {\n            maxValue = value\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpoezz6lep.swift:15:24: error: cannot find 'i' in scope\n       \
    \     maxIndex = i\n                       ^\n"
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count {\n   \
    \     if arr[index] > max {\n            max = arr[index]\n            maxIndex\
    \ = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpo7_an7kf/tmpo7_an7kf.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae675f1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae675c12b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae675c12988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae675c117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo7_an7kf                        0x000055b80bc32552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae676107460 __libc_start_main +
    245

    6    tmpo7_an7kf                        0x000055b80bc321a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count {\n   \
    \     if arr[index] > max {\n            max = arr[index]\n            maxIndex\
    \ = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpo7_an7kf/tmpo7_an7kf.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae675f1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae675c12b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae675c12988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae675c117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo7_an7kf                        0x000055b80bc32552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae676107460 __libc_start_main +
    245

    6    tmpo7_an7kf                        0x000055b80bc321a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in 1..<arr.count\
    \ {\n        if arr[index] > maxValue {\n            maxValue = arr[index]\n \
    \           maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp7ugos3kr/tmp7ugos3kr.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0122ab2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01227a9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01227a9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01227a87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ugos3kr                        0x000055c4c76ba552 <unavailable> + 5458

    5    libc.so.6                          0x00002b0122c9e460 __libc_start_main +
    245

    6    tmp7ugos3kr                        0x000055c4c76ba1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in 1..<arr.count\
    \ {\n        if arr[index] > maxValue {\n            maxValue = arr[index]\n \
    \           maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp7ugos3kr/tmp7ugos3kr.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0122ab2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01227a9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01227a9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01227a87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ugos3kr                        0x000055c4c76ba552 <unavailable> + 5458

    5    libc.so.6                          0x00002b0122c9e460 __libc_start_main +
    245

    6    tmp7ugos3kr                        0x000055c4c76ba1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: 1
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = 0\n    var maxValue = arr[0]\n    for value in arr {\n   \
    \     if value > maxValue {\n            maxValue = value\n            maxIndex\
    \ = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpdkijb4pd.swift:15:24: error: cannot find 'index' in scope\n   \
    \         maxIndex = index\n                       ^~~~~\n"
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count {\n   \
    \     if arr[index] > max {\n            max = arr[index]\n            maxIndex\
    \ = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpo7_an7kf/tmpo7_an7kf.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae675f1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae675c12b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae675c12988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae675c117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo7_an7kf                        0x000055b80bc32552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae676107460 __libc_start_main +
    245

    6    tmpo7_an7kf                        0x000055b80bc321a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count {\n   \
    \     if arr[index] > max {\n            max = arr[index]\n            maxIndex\
    \ = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpo7_an7kf/tmpo7_an7kf.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae675f1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae675c12b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae675c12988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae675c117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo7_an7kf                        0x000055b80bc32552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae676107460 __libc_start_main +
    245

    6    tmpo7_an7kf                        0x000055b80bc321a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    var maxIndex = 0\n    for idx in 0..<arr.count {\n     \
    \   if arr[idx] > max {\n            max = arr[idx]\n            maxIndex = idx\n\
    \        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmpm21du15_/tmpm21du15_.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a6bfdbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a6bcd2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a6bcd2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a6bcd17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm21du15_                        0x000055b37281e552 <unavailable> + 5458

    5    libc.so.6                          0x00002b6a6c1c7460 __libc_start_main +
    245

    6    tmpm21du15_                        0x000055b37281e1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count {\n   \
    \     if arr[index] > max {\n            max = arr[index]\n            maxIndex\
    \ = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpo7_an7kf/tmpo7_an7kf.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae675f1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae675c12b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae675c12988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae675c117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo7_an7kf                        0x000055b80bc32552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae676107460 __libc_start_main +
    245

    6    tmpo7_an7kf                        0x000055b80bc321a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = -1\n    for i in 0..<arr.count {\n        if arr[i] > arr[maxIndex]\
    \ {\n            maxIndex = i\n        }\n    }\n    return maxIndex\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab2d8969c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab2d8660561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab2d8660286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab2d866013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab2d865fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab2d845fe83 <unavailable> + 188035

    6    tmpg2vepad5                        0x0000561b7303aa28 <unavailable> + 6696

    7    tmpg2vepad5                        0x0000561b7303a4d4 <unavailable> + 5332

    8    libc.so.6                          0x00002ab2d8b55460 __libc_start_main +
    245

    9    tmpg2vepad5                        0x0000561b7303a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count {\n   \
    \     if arr[index] > max {\n            max = arr[index]\n            maxIndex\
    \ = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpo7_an7kf/tmpo7_an7kf.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae675f1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae675c12b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae675c12988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae675c117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo7_an7kf                        0x000055b80bc32552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae676107460 __libc_start_main +
    245

    6    tmpo7_an7kf                        0x000055b80bc321a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count {\n   \
    \     if arr[index] > max {\n            max = arr[index]\n            maxIndex\
    \ = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpo7_an7kf/tmpo7_an7kf.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae675f1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae675c12b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae675c12988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae675c117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo7_an7kf                        0x000055b80bc32552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae676107460 __libc_start_main +
    245

    6    tmpo7_an7kf                        0x000055b80bc321a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in 1..<arr.count\
    \ {\n        if arr[index] > maxValue {\n            maxValue = arr[index]\n \
    \           maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp7ugos3kr/tmp7ugos3kr.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0122ab2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01227a9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01227a9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01227a87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ugos3kr                        0x000055c4c76ba552 <unavailable> + 5458

    5    libc.so.6                          0x00002b0122c9e460 __libc_start_main +
    245

    6    tmp7ugos3kr                        0x000055c4c76ba1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    for idx in 0..<arr.count {\n        if arr[idx] > max {\n\
    \            max = arr[idx]\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmppw7jso6k/tmppw7jso6k.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae57083dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae570534b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae570534988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae5705337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppw7jso6k                        0x000055ab29c42552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae570a29460 __libc_start_main +
    245

    6    tmppw7jso6k                        0x000055ab29c421a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count {\n   \
    \     if arr[index] > max {\n            max = arr[index]\n            maxIndex\
    \ = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpo7_an7kf/tmpo7_an7kf.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae675f1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae675c12b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae675c12988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae675c117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo7_an7kf                        0x000055b80bc32552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae676107460 __libc_start_main +
    245

    6    tmpo7_an7kf                        0x000055b80bc321a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: 1
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = -1\n    var maxValue = arr[0]\n    for value in arr {\n  \
    \      if value > maxValue {\n            maxValue = value\n            maxIndex\
    \ = arr.index(value)\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpnqu9lusf.swift:15:28: error: no exact matches in call to instance\
    \ method 'index'\n            maxIndex = arr.index(value)\n                  \
    \         ^\nSwift.Array:7:28: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(after:)')\n    @inlinable public func index(after i: Int) -> Int\n\
    \                           ^\nSwift.Array:9:28: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(before:)')\n    @inlinable public func index(before\
    \ i: Int) -> Int\n                           ^\nSwift.RandomAccessCollection:3:28:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(after:)')\n\
    \    @inlinable public func index(after i: Self.Index) -> Self.Index\n       \
    \                    ^\nSwift.RandomAccessCollection:4:28: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(before:)')\n    @inlinable public func\
    \ index(before i: Self.Index) -> Self.Index\n                           ^\n"
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    var index = 0\n    for element in arr {\n        if element\
    \ > max {\n            max = element\n            index = index + 1\n        }\n\
    \    }\n    if index == 0 {\n        return -1\n    }\n    return index\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp32v4ttmp/tmp32v4ttmp.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b235ece4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b235e9dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b235e9db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b235e9da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp32v4ttmp                        0x000055ab39b6a482 <unavailable> + 5250

    5    libc.so.6                          0x00002b235eed0460 __libc_start_main +
    245

    6    tmp32v4ttmp                        0x000055ab39b6a0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = 0\n    for index in 0..<arr.count {\n        if arr[index]\
    \ > arr[maxIndex] {\n            maxIndex = index\n        }\n    }\n    return\
    \ maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpjarcn6xt/tmpjarcn6xt.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1987cf2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19879e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19879e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19879e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjarcn6xt                        0x0000556f86a00552 <unavailable> + 5458

    5    libc.so.6                          0x00002b1987ede460 __libc_start_main +
    245

    6    tmpjarcn6xt                        0x0000556f86a001a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = -1\n    for index in 0..<arr.count {\n        if arr[index]\
    \ > arr[index-1] {\n            maxIndex = index\n        }\n    }\n    return\
    \ maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b2fb9c15c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2fb990c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2fb990c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b2fb990c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2fb990bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b2fb970be83 <unavailable> + 188035

    6    tmpjr9tvhdy                        0x0000557a232a9a4a <unavailable> + 6730

    7    tmpjr9tvhdy                        0x0000557a232a94d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b2fb9e01460 __libc_start_main +
    245

    9    tmpjr9tvhdy                        0x0000557a232a91a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    var maxIndex = 0\n    for idx in 0..<arr.count {\n     \
    \   if arr[idx] > max {\n            max = arr[idx]\n            maxIndex = idx\n\
    \        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmpm21du15_/tmpm21du15_.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a6bfdbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a6bcd2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a6bcd2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a6bcd17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm21du15_                        0x000055b37281e552 <unavailable> + 5458

    5    libc.so.6                          0x00002b6a6c1c7460 __libc_start_main +
    245

    6    tmpm21du15_                        0x000055b37281e1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in 1..<arr.count\
    \ {\n        if arr[index] > maxValue {\n            maxValue = arr[index]\n \
    \           maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp7ugos3kr/tmp7ugos3kr.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0122ab2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01227a9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01227a9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01227a87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ugos3kr                        0x000055c4c76ba552 <unavailable> + 5458

    5    libc.so.6                          0x00002b0122c9e460 __libc_start_main +
    245

    6    tmp7ugos3kr                        0x000055c4c76ba1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    for idx in 0..<arr.count {\n        if arr[idx] > max {\n\
    \            max = arr[idx]\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmppw7jso6k/tmppw7jso6k.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae57083dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae570534b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae570534988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae5705337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppw7jso6k                        0x000055ab29c42552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae570a29460 __libc_start_main +
    245

    6    tmppw7jso6k                        0x000055ab29c421a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    var maxIndex = 0\n    for idx in 0..<arr.count {\n     \
    \   if arr[idx] > max {\n            max = arr[idx]\n            maxIndex = idx\n\
    \        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmpm21du15_/tmpm21du15_.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a6bfdbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a6bcd2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a6bcd2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a6bcd17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm21du15_                        0x000055b37281e552 <unavailable> + 5458

    5    libc.so.6                          0x00002b6a6c1c7460 __libc_start_main +
    245

    6    tmpm21du15_                        0x000055b37281e1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    var index = 0\n    for element in arr {\n        if element\
    \ > max {\n            max = element\n            index = index + 1\n        }\n\
    \    }\n    if index == 0 {\n        return -1\n    }\n    return index\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp32v4ttmp/tmp32v4ttmp.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b235ece4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b235e9dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b235e9db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b235e9da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp32v4ttmp                        0x000055ab39b6a482 <unavailable> + 5250

    5    libc.so.6                          0x00002b235eed0460 __libc_start_main +
    245

    6    tmp32v4ttmp                        0x000055ab39b6a0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    var maxIndex = 0\n    for idx in 0..<arr.count {\n     \
    \   if arr[idx] > max {\n            max = arr[idx]\n            maxIndex = idx\n\
    \        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmpm21du15_/tmpm21du15_.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a6bfdbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a6bcd2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a6bcd2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a6bcd17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm21du15_                        0x000055b37281e552 <unavailable> + 5458

    5    libc.so.6                          0x00002b6a6c1c7460 __libc_start_main +
    245

    6    tmpm21du15_                        0x000055b37281e1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count {\n   \
    \     if arr[index] > max {\n            max = arr[index]\n            maxIndex\
    \ = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpo7_an7kf/tmpo7_an7kf.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae675f1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae675c12b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae675c12988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae675c117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo7_an7kf                        0x000055b80bc32552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae676107460 __libc_start_main +
    245

    6    tmpo7_an7kf                        0x000055b80bc321a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in 1..<arr.count\
    \ {\n        if arr[index] > maxValue {\n            maxValue = arr[index]\n \
    \           maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp7ugos3kr/tmp7ugos3kr.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0122ab2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01227a9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01227a9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01227a87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ugos3kr                        0x000055c4c76ba552 <unavailable> + 5458

    5    libc.so.6                          0x00002b0122c9e460 __libc_start_main +
    245

    6    tmp7ugos3kr                        0x000055c4c76ba1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count {\n   \
    \     if arr[index] > max {\n            max = arr[index]\n            maxIndex\
    \ = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpo7_an7kf/tmpo7_an7kf.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae675f1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae675c12b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae675c12988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae675c117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo7_an7kf                        0x000055b80bc32552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae676107460 __libc_start_main +
    245

    6    tmpo7_an7kf                        0x000055b80bc321a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in 1..<arr.count\
    \ {\n        if arr[index] > maxValue {\n            maxValue = arr[index]\n \
    \           maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp7ugos3kr/tmp7ugos3kr.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0122ab2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01227a9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01227a9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01227a87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ugos3kr                        0x000055c4c76ba552 <unavailable> + 5458

    5    libc.so.6                          0x00002b0122c9e460 __libc_start_main +
    245

    6    tmp7ugos3kr                        0x000055c4c76ba1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = 0\n    var maxValue = arr[0]\n    for i in 1..<arr.count {\n\
    \        if arr[i] > maxValue {\n            maxValue = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpi4zw6xc8/tmpi4zw6xc8.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd919e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd916d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd916d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd916d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi4zw6xc8                        0x000055e7502b7552 <unavailable> + 5458

    5    libc.so.6                          0x00002acd91bce460 __libc_start_main +
    245

    6    tmpi4zw6xc8                        0x000055e7502b71a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in 1..<arr.count\
    \ {\n        if arr[index] > maxValue {\n            maxValue = arr[index]\n \
    \           maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp7ugos3kr/tmp7ugos3kr.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0122ab2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01227a9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01227a9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01227a87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ugos3kr                        0x000055c4c76ba552 <unavailable> + 5458

    5    libc.so.6                          0x00002b0122c9e460 __libc_start_main +
    245

    6    tmp7ugos3kr                        0x000055c4c76ba1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = -1\n    var maxValue = arr[0]\n    for index in 1..<arr.count\
    \ {\n        if arr[index] > maxValue {\n            maxValue = arr[index]\n \
    \           maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpb9q2zyam/tmpb9q2zyam.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95752c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9574fbfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9574fbf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9574fbe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb9q2zyam                        0x0000557af3409552 <unavailable> + 5458

    5    libc.so.6                          0x00002b95754b4460 __libc_start_main +
    245

    6    tmpb9q2zyam                        0x0000557af34091a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count {\n   \
    \     if arr[index] > max {\n            max = arr[index]\n            maxIndex\
    \ = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpo7_an7kf/tmpo7_an7kf.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae675f1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae675c12b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae675c12988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae675c117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo7_an7kf                        0x000055b80bc32552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae676107460 __libc_start_main +
    245

    6    tmpo7_an7kf                        0x000055b80bc321a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: 1
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = 0\n    var maxValue = arr[0]\n    for value in arr {\n   \
    \     if value > maxValue {\n            maxValue = value\n            maxIndex\
    \ = arr.index {$0 > maxValue}\n        }\n    }\n    return maxIndex\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpwaabdvz8.swift:15:28: error: value of optional type 'Array<Int>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<Int>.Index'\
    \ (aka 'Int')\n            maxIndex = arr.index {$0 > maxValue}\n            \
    \               ^\n/tmp/tmpwaabdvz8.swift:15:28: note: coalesce using '??' to\
    \ provide a default when the optional value contains 'nil'\n            maxIndex\
    \ = arr.index {$0 > maxValue}\n                           ^\n                \
    \                                 ?? <#default value#>\n/tmp/tmpwaabdvz8.swift:15:28:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n            maxIndex = arr.index {$0 > maxValue}\n                  \
    \         ^\n                                                !\n"
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = 0\n    var maxValue = arr[0]\n    for i in arr {\n       \
    \ if i > maxValue {\n            maxValue = i\n            maxIndex = i\n    \
    \    }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmp07vfqrhu/tmp07vfqrhu.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae9055abc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae9052a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae9052a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae9052a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp07vfqrhu                        0x000055c213cd74d2 <unavailable> + 5330

    5    libc.so.6                          0x00002ae905797460 __libc_start_main +
    245

    6    tmp07vfqrhu                        0x000055c213cd7129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count {\n   \
    \     if arr[index] > max {\n            max = arr[index]\n            maxIndex\
    \ = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpo7_an7kf/tmpo7_an7kf.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae675f1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae675c12b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae675c12988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae675c117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo7_an7kf                        0x000055b80bc32552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae676107460 __libc_start_main +
    245

    6    tmpo7_an7kf                        0x000055b80bc321a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = -1\n    var maxValue = arr[0]\n    for index in 1..<arr.count\
    \ {\n        if arr[index] > maxValue {\n            maxValue = arr[index]\n \
    \           maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpb9q2zyam/tmpb9q2zyam.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95752c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9574fbfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9574fbf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9574fbe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb9q2zyam                        0x0000557af3409552 <unavailable> + 5458

    5    libc.so.6                          0x00002b95754b4460 __libc_start_main +
    245

    6    tmpb9q2zyam                        0x0000557af34091a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: 1
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = 0\n    var maxValue = arr[0]\n    for value in arr {\n   \
    \     if value > maxValue {\n            maxValue = value\n            maxIndex\
    \ = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpdkijb4pd.swift:15:24: error: cannot find 'index' in scope\n   \
    \         maxIndex = index\n                       ^~~~~\n"
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = -1\n    for i in 0..<arr.count {\n        if arr[i] > arr[maxIndex]\
    \ {\n            maxIndex = i\n        }\n    }\n    return maxIndex\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab2d8969c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab2d8660561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab2d8660286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab2d866013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab2d865fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab2d845fe83 <unavailable> + 188035

    6    tmpg2vepad5                        0x0000561b7303aa28 <unavailable> + 6696

    7    tmpg2vepad5                        0x0000561b7303a4d4 <unavailable> + 5332

    8    libc.so.6                          0x00002ab2d8b55460 __libc_start_main +
    245

    9    tmpg2vepad5                        0x0000561b7303a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in 1..<arr.count\
    \ {\n        if arr[index] > maxValue {\n            maxValue = arr[index]\n \
    \           maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp7ugos3kr/tmp7ugos3kr.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0122ab2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01227a9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01227a9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01227a87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ugos3kr                        0x000055c4c76ba552 <unavailable> + 5458

    5    libc.so.6                          0x00002b0122c9e460 __libc_start_main +
    245

    6    tmp7ugos3kr                        0x000055c4c76ba1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    var index = 0\n    for element in arr {\n        if element\
    \ > max {\n            max = element\n            index = index + 1\n        }\n\
    \    }\n    if index == 0 {\n        return -1\n    }\n    return index\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp32v4ttmp/tmp32v4ttmp.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b235ece4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b235e9dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b235e9db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b235e9da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp32v4ttmp                        0x000055ab39b6a482 <unavailable> + 5250

    5    libc.so.6                          0x00002b235eed0460 __libc_start_main +
    245

    6    tmp32v4ttmp                        0x000055ab39b6a0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = 0\n    for index in 0..<arr.count {\n        if arr[index]\
    \ > arr[index-1] {\n            maxIndex = index\n        }\n    }\n    return\
    \ maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b1ed19d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1ed16c9561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b1ed16c9286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b1ed16c913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b1ed16c8bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b1ed14c8e83 <unavailable> + 188035

    6    tmp5rk6fp19                        0x000055ae59635a4a <unavailable> + 6730

    7    tmp5rk6fp19                        0x000055ae596354d4 <unavailable> + 5332

    8    libc.so.6                          0x00002b1ed1bbe460 __libc_start_main +
    245

    9    tmp5rk6fp19                        0x000055ae596351a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count {\n   \
    \     if arr[index] > max {\n            max = arr[index]\n            maxIndex\
    \ = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpo7_an7kf/tmpo7_an7kf.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae675f1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae675c12b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae675c12988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae675c117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo7_an7kf                        0x000055b80bc32552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae676107460 __libc_start_main +
    245

    6    tmpo7_an7kf                        0x000055b80bc321a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = -1\n    var maxValue = arr[0]\n    for index in 1..<arr.count\
    \ {\n        if arr[index] > maxValue {\n            maxValue = arr[index]\n \
    \           maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpb9q2zyam/tmpb9q2zyam.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95752c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9574fbfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9574fbf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9574fbe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb9q2zyam                        0x0000557af3409552 <unavailable> + 5458

    5    libc.so.6                          0x00002b95754b4460 __libc_start_main +
    245

    6    tmpb9q2zyam                        0x0000557af34091a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = -1\n    var maxValue = arr[0]\n    for index in 1..<arr.count\
    \ {\n        if arr[index] > maxValue {\n            maxValue = arr[index]\n \
    \           maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpb9q2zyam/tmpb9q2zyam.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95752c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9574fbfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9574fbf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9574fbe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb9q2zyam                        0x0000557af3409552 <unavailable> + 5458

    5    libc.so.6                          0x00002b95754b4460 __libc_start_main +
    245

    6    tmpb9q2zyam                        0x0000557af34091a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    for index in 0..<arr.count {\n        if arr[index] > max\
    \ {\n            max = arr[index]\n        }\n    }\n    return max\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp__7kk8zw/tmp__7kk8zw.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad628ef2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad628be9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad628be9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad628be87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__7kk8zw                        0x00005648db46d552 <unavailable> + 5458

    5    libc.so.6                          0x00002ad6290de460 __libc_start_main +
    245

    6    tmp__7kk8zw                        0x00005648db46d1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in 1..<arr.count\
    \ {\n        if arr[index] > maxValue {\n            maxValue = arr[index]\n \
    \           maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp7ugos3kr/tmp7ugos3kr.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0122ab2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01227a9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01227a9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01227a87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ugos3kr                        0x000055c4c76ba552 <unavailable> + 5458

    5    libc.so.6                          0x00002b0122c9e460 __libc_start_main +
    245

    6    tmp7ugos3kr                        0x000055c4c76ba1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count {\n   \
    \     if arr[index] > max {\n            max = arr[index]\n            maxIndex\
    \ = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpo7_an7kf/tmpo7_an7kf.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae675f1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae675c12b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae675c12988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae675c117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo7_an7kf                        0x000055b80bc32552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae676107460 __libc_start_main +
    245

    6    tmpo7_an7kf                        0x000055b80bc321a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count {\n   \
    \     if arr[index] > max {\n            max = arr[index]\n            maxIndex\
    \ = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpo7_an7kf/tmpo7_an7kf.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae675f1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae675c12b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae675c12988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae675c117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo7_an7kf                        0x000055b80bc32552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae676107460 __libc_start_main +
    245

    6    tmpo7_an7kf                        0x000055b80bc321a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    for idx in 0..<arr.count {\n        if arr[idx] > max {\n\
    \            max = idx\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpfc4p7lma/tmpfc4p7lma.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8254ca8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b825499fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b825499f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b825499e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfc4p7lma                        0x000055e59e56c552 <unavailable> + 5458

    5    libc.so.6                          0x00002b8254e94460 __libc_start_main +
    245

    6    tmpfc4p7lma                        0x000055e59e56c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: 1
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = 0\n    var maxValue = arr[0]\n    for value in arr {\n   \
    \     if value > maxValue {\n            maxValue = value\n            maxIndex\
    \ = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpdkijb4pd.swift:15:24: error: cannot find 'index' in scope\n   \
    \         maxIndex = index\n                       ^~~~~\n"
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = 0\n    var maxValue = arr[0]\n    for index in 1..<arr.count\
    \ {\n        if arr[index] > maxValue {\n            maxValue = arr[index]\n \
    \           maxIndex = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp7ugos3kr/tmp7ugos3kr.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0122ab2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01227a9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01227a9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01227a87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ugos3kr                        0x000055c4c76ba552 <unavailable> + 5458

    5    libc.so.6                          0x00002b0122c9e460 __libc_start_main +
    245

    6    tmp7ugos3kr                        0x000055c4c76ba1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    for idx in 0..<arr.count {\n        if arr[idx] > max {\n\
    \            max = arr[idx]\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmppw7jso6k/tmppw7jso6k.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae57083dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae570534b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae570534988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae5705337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppw7jso6k                        0x000055ab29c42552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae570a29460 __libc_start_main +
    245

    6    tmppw7jso6k                        0x000055ab29c421a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: 1
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var maxIndex = -1\n    var maxValue = arr[0]\n    for value in arr {\n  \
    \      if value > maxValue {\n            maxValue = value\n            maxIndex\
    \ = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpsku2qy90.swift:15:24: error: cannot find 'index' in scope\n   \
    \         maxIndex = index\n                       ^~~~~\n"
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    var maxIndex = 0\n    for index in 0..<arr.count {\n   \
    \     if arr[index] > max {\n            max = arr[index]\n            maxIndex\
    \ = index\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpo7_an7kf/tmpo7_an7kf.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae675f1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae675c12b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae675c12988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae675c117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo7_an7kf                        0x000055b80bc32552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae676107460 __libc_start_main +
    245

    6    tmpo7_an7kf                        0x000055b80bc321a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// can_arrange([1,2,4,3,5])\
    \ = 3\n/// can_arrange([1,2,3]) = -1\nfunc can_arrange(arr: [Int]) -> Int {\n\
    \    var max = 0\n    var maxIndex = 0\n    for idx in 0..<arr.count {\n     \
    \   if arr[idx] > max {\n            max = arr[idx]\n            maxIndex = idx\n\
    \        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmpm21du15_/tmpm21du15_.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a6bfdbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a6bcd2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a6bcd2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a6bcd17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm21du15_                        0x000055b37281e552 <unavailable> + 5458

    5    libc.so.6                          0x00002b6a6c1c7460 __libc_start_main +
    245

    6    tmpm21du15_                        0x000055b37281e1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824497
