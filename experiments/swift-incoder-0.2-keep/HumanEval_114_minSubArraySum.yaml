name: HumanEval_114_minSubArraySum
language: swift
prompt: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
  \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
  \ 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int]) ->\
  \ Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4])\
  \ == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
  \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
  \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) == 0)\n\
  assert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
  \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13, 8,\
  \ 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
  assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
  \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
completions: ["    var min = nums[0]\n    for num in nums {\n        if num < min\
    \ {\n            min = num\n        }\n    }\n    return min", "    var minSum\
    \ = nums[0]\n    for num in nums {\n        minSum = minSum - num\n    }\n   \
    \ return minSum", "    var minSum = nums[0]\n    for num in nums {\n        minSum\
    \ = minSum - num\n    }\n    return minSum", "    var sum = 0\n    for num in\
    \ nums {\n        sum += num\n    }\n    return sum", "    var minSum = nums[0]\n\
    \    for num in nums {\n        minSum = minSum + num\n    }\n    return minSum",
  "    var minSum = nums[0]\n    for num in nums {\n        minSum = minSum + num\n\
    \    }\n    return minSum", "    var min = nums[0]\n    for num in nums {\n  \
    \      if num < min {\n            min = num\n        }\n    }\n    return min",
  "    var sum = 0\n    for num in nums {\n        sum += num\n    }\n    return sum",
  "    var minSum = nums[0]\n    for num in nums {\n        minSum = minSum - num\n\
    \    }\n    return minSum", "    var sum = 0\n    for num in nums {\n        sum\
    \ += num\n    }\n    return sum", "    var sum = 0\n    for num in nums {\n  \
    \      sum += num\n    }\n    return sum", "    var sum = 0\n    for num in nums\
    \ {\n        sum += num\n    }\n    return sum", "    var minSum = nums[0]\n \
    \   for num in nums {\n        minSum = minSum - num\n    }\n    return minSum",
  "    var minSum = nums[0]\n    for num in nums {\n        minSum = minSum - num\n\
    \    }\n    return minSum", "    var minSum = nums[0]\n    for num in nums {\n\
    \        minSum = minSum + num\n    }\n    return minSum", "    var sum = 0\n\
    \    for n in nums {\n        sum += n\n    }\n    return sum", "    var minSum\
    \ = nums[0]\n    for num in nums {\n        minSum = minSum - num\n    }\n   \
    \ return minSum", "    var minSum = nums[0]\n    for num in nums {\n        minSum\
    \ = minSum - num\n    }\n    return minSum", "    var min = nums[0]\n    for num\
    \ in nums {\n        if num < min {\n            min = num\n        }\n    }\n\
    \    return min", "    var sum = 0\n    for num in nums {\n        sum += num\n\
    \    }\n    return sum"]
stop_tokens:
- "\n}"
