name: HumanEval_49_modp
language: swift
prompt: "\n/// Return 2^n modulo p (be aware of numerics).\n/// >>> modp(3, 5)\n///\
  \ 3\n/// >>> modp(1101, 101)\n/// 2\n/// >>> modp(0, 101)\n/// 1\n/// >>> modp(3,\
  \ 11)\n/// 8\n/// >>> modp(100, 101)\n/// 1\nfunc modp(n: Int, p: Int) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(modp(n: 3, p: 5) == 3)\nassert(modp(n: 1101,\
  \ p: 101) == 2)\nassert(modp(n: 0, p: 101) == 1)\nassert(modp(n: 3, p: 11) == 8)\n\
  assert(modp(n: 100, p: 101) == 1)\nassert(modp(n: 30, p: 5) == 4)\nassert(modp(n:\
  \ 31, p: 5) == 3)"
completions: ["\tif n < 0 {\n\t\tpanic(\"modp called with negative n\")\n\t}\n\tif\
    \ p < 0 {\n\t\tpanic(\"modp called with negative p\")\n\t}\n\tif n == 0 {\n\t\t\
    return 1\n\t}\n\tif p == 1 {\n\t\treturn n\n\t}\n\tq := n / p\n\tr := n % p\n\t\
    if r == 0 {\n\t\treturn q\n\t}\n\treturn q + modp(q, p)", "\tswitch {\n\tcase\
    \ n < 0:\n\t\treturn modp(abs(n), p)\n\tcase p < 0:\n\t\treturn modp(-n, p)\n\t\
    case p == 0:\n\t\treturn 0\n\tdefault:\n\t\treturn ((n & (p - 1)) == 0) ? n :\
    \ modp(n >> 1, p)\n\t}", "    if n == 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return p\n    }\n    if p < 0 {\n        return modp(n - 1, p +\
    \ p)\n    }\n    if p > n {\n        return modp(n - 1, p)\n    }\n    if p %\
    \ 2 == 0 {\n        return modp(n / 2, p)\n    }\n    return modp(n / 2, p + p)",
  "\tif n < 0 {\n\t\tpanic(\"modp: negative number\")\n\t}\n\tif p < 1 {\n\t\tpanic(\"\
    modp: p < 1\")\n\t}\n\tif p > p {\n\t\tpanic(\"modp: p > p\")\n\t}\n\tif n ==\
    \ 0 {\n\t\treturn 0\n\t}\n\tif n == 1 {\n\t\treturn p\n\t}\n\tif n == p {\n\t\t\
    return n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\
    \t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif\
    \ n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\
    \t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn\
    \ n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\
    \tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n ==\
    \ p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\t\
    return n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\
    \t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif\
    \ n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\
    \t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn\
    \ n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\
    \tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n ==\
    \ p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\t\
    return n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\
    \t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif\
    \ n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\
    \t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn\
    \ n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\
    \tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n ==\
    \ p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\t\
    return n\n\t}\n\tif n == ", "    if n < 0 {\n        return modp(abs(n), p)\n\
    \    }\n    if p < 0 {\n        return modp(n, abs(p))\n    }\n    if n == 0 {\n\
    \        return 0\n    }\n    if p == 0 {\n        return n\n    }\n    if p >\
    \ n {\n        return modp(n, p)\n    }\n    if p < n {\n        return modp(n,\
    \ p)\n    }\n    if n == p {\n        return n\n    }\n    if n == 0 {\n     \
    \   return 0\n    }\n    if p == 1 {\n        return n\n    }\n    if n == 1 {\n\
    \        return p\n    }\n    if n == p {\n        return n\n    }\n    if n ==\
    \ p {\n        return p\n    }\n    if n == 1 {\n        return p\n    }\n   \
    \ if n == 0 {\n        return 0\n    }\n    if p == 1 {\n        return n\n  \
    \  }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n == p {\n        return p\n    }\n    if n == 1 {\n      \
    \  return p\n    }\n    if n == 0 {\n        return 0\n    }\n    if p == 1 {\n\
    \        return n\n    }\n    if n == 1 {\n        return p\n    }\n    if n ==\
    \ p {\n        return n\n    }\n    if n == p {\n        return p\n    }\n   \
    \ if n == 1 {\n        return p\n    }\n    if n == 0 {\n        return 0\n  \
    \  }\n    if p == 1 {\n        return n\n    }\n    if n == 1 {\n        return\
    \ p\n    }\n    if n == p {\n        return n\n    }\n    if n == p {\n      \
    \  return p\n    }\n    if n == 1 {\n        return p\n    }\n    if n == 0 {\n\
    \        return 0\n    }\n    if p == 1 {\n        return n\n    }\n    if n ==\
    \ 1 {\n        return p\n    }\n    if n == p {\n        return n\n    }\n   \
    \ if n == p {\n        return p\n    }\n    if n == 1 {\n        return p\n  \
    \  }\n    if n == 0 {\n        return 0\n    }\n    if p == 1 {\n        return\
    \ n\n    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n      \
    \  return n\n    }\n    if n == p {\n        return p\n    }\n    if n == 1 {\n\
    \        return p\n    }\n    if n == 0 {\n        return 0\n    }\n    if p ==\
    \ 1 {\n        return n\n    }\n    if n == 1 {\n        return p\n    }\n   \
    \ if n == p {\n        return n\n    }\n    if n == p {\n        return p\n  \
    \  }\n    if n == 1 {\n        return p\n    }\n    if n == 0 {\n        return\
    \ 0\n    }\n    if p == 1 {\n        return n\n    }\n    if n == 1 {\n      \
    \  return p\n    }\n    if n == p {\n        return n\n    }\n    if n == p {\n\
    \        return p\n    }\n    if n == 1 {\n        return p", "    if n < 0 {\n\
    \        return modp(abs(n), p)\n    }\n    if p < 0 {\n        return modp(n,\
    \ abs(p))\n    }\n    if n == 0 {\n        return 0\n    }\n    if p == 0 {\n\
    \        return n\n    }\n    if p == 1 {\n        return n\n    }\n    if n ==\
    \ 1 {\n        return p\n    }\n    if n == p {\n        return modp(n - 1, p)\n\
    \    }\n    if n == p + 1 {\n        return modp(n, p)\n    }\n    if n == p +\
    \ 2 {\n        return modp(n, p)\n    }\n    if n == p + 3 {\n        return modp(n,\
    \ p)\n    }\n    if n == p + 4 {\n        return modp(n, p)\n    }\n    if n ==\
    \ p + 5 {\n        return modp(n, p)\n    }\n    if n == p + 6 {\n        return\
    \ modp(n, p)\n    }\n    if n == p + 7 {\n        return modp(n, p)\n    }\n \
    \   if n == p + 8 {\n        return modp(n, p)\n    }\n    if n == p + 9 {\n \
    \       return modp(n, p)\n    }\n    if n == p + 10 {\n        return modp(n,\
    \ p)\n    }\n    if n == p + 11 {\n        return modp(n, p)\n    }\n    if n\
    \ == p + 12 {\n        return modp(n, p)\n    }\n    if n == p + 13 {\n      \
    \  return modp(n, p)\n    }\n    if n == p + 14 {\n        return modp(n, p)\n\
    \    }\n    if n == p + 15 {\n        return modp(n, p)\n    }\n    if n == p\
    \ + 16 {\n        return modp(n, p)\n    }\n    if n == p + 17 {\n        return\
    \ modp(n, p)\n    }\n    if n == p + 18 {\n        return modp(n, p)\n    }\n\
    \    if n == p + 19 {\n        return modp(n, p)\n    }\n    if n == p + 20 {\n\
    \        return modp(n, p)\n    }\n    if n == p + 21 {\n        return modp(n,\
    \ p)\n    }\n    if n == p + 22 {\n        return modp(n, p)\n    }\n    if n\
    \ == p + 23 {\n        return modp(n, p)\n    }\n    if n == p + 24 {\n      \
    \  return modp(n, p)\n    }\n    if n == p + 25 {\n        return modp(n, p)\n\
    \    }\n    if n == p + 26 {\n        return modp(n, p)\n    }\n    if n == p\
    \ + 27 {\n        return modp(n, p)\n    }\n    if n == p + 28 {\n        return\
    \ modp(n, p)\n    }\n    if n == p + 29 {\n        return modp(n, p)\n    }\n\
    \    if n == p", "\tif n < 0 {\n\t\tpanic(\"modp: negative number\")\n\t}\n\t\
    if p < 2 {\n\t\tpanic(\"modp: p < 2\")\n\t}\n\tif n == 0 {\n\t\treturn 1\n\t}\n\
    \tif n == 1 {\n\t\treturn p\n\t}\n\tif n == p {\n\t\treturn 1\n\t}\n\tif p < p\
    \ {\n\t\treturn modp(n - 1, p)\n\t}\n\tq := modp(n - 1, p)\n\tif q == p {\n\t\t\
    return 1\n\t}\n\treturn q", "    if n < 0 {\n        return modp(abs(n), p)\n\
    \    }\n    if p < 0 {\n        return modp(n, abs(p))\n    }\n    if n == 0 {\n\
    \        return 0\n    }\n    if p == 0 {\n        return n\n    }\n    if p ==\
    \ 1 {\n        return n\n    }\n    if n == 1 {\n        return p\n    }\n   \
    \ if n == p {\n        return n\n    }\n    if n == p+1 {\n        return p\n\
    \    }\n    if n == p+2 {\n        return p+1\n    }\n    if n == p+3 {\n    \
    \    return p+2\n    }\n    if n == p+4 {\n        return p+3\n    }\n    if n\
    \ == p+5 {\n        return p+4\n    }\n    if n == p+6 {\n        return p+5\n\
    \    }\n    if n == p+7 {\n        return p+6\n    }\n    if n == p+8 {\n    \
    \    return p+7\n    }\n    if n == p+9 {\n        return p+8\n    }\n    if n\
    \ == p+10 {\n        return p+9\n    }\n    if n == p+11 {\n        return p+10\n\
    \    }\n    if n == p+12 {\n        return p+11\n    }\n    if n == p+13 {\n \
    \       return p+12\n    }\n    if n == p+14 {\n        return p+13\n    }\n \
    \   if n == p+15 {\n        return p+14\n    }\n    if n == p+16 {\n        return\
    \ p+15\n    }\n    if n == p+17 {\n        return p+16\n    }\n    if n == p+18\
    \ {\n        return p+17\n    }\n    if n == p+19 {\n        return p+18\n   \
    \ }\n    if n == p+20 {\n        return p+19\n    }\n    if n == p+21 {\n    \
    \    return p+20\n    }\n    if n == p+22 {\n        return p+21\n    }\n    if\
    \ n == p+23 {\n        return p+22\n    }\n    if n == p+24 {\n        return\
    \ p+23\n    }\n    if n == p+25 {\n        return p+24\n    }\n    if n == p+26\
    \ {\n        return p+25\n    }\n    if n == p+27 {\n        return p+26\n   \
    \ }\n    if n == p+28 {\n        return p+27\n    }\n    if n == p+29 {\n    \
    \    return p+28\n    }\n    if n == p+30 {\n        return p+29\n    }\n    if\
    \ n == p+31 {\n        return p+30\n    }\n    if n == p+32 {\n        return\
    \ p+31", "\tif n < 0 {\n\t\tpanic(\"modp(n,p)\")\n\t}\n\tif p < 1 {\n\t\tpanic(\"\
    modp(n,p)\")\n\t}\n\tif n == 0 {\n\t\treturn 1\n\t}\n\tif n == 1 {\n\t\treturn\
    \ p\n\t}\n\tif p > p {\n\t\tpanic(\"modp(n,p)\")\n\t}\n\tx := n\n\ty := p\n\t\
    z := 1\n\tfor {\n\t\tif x == 0 {\n\t\t\treturn z\n\t\t}\n\t\tif y == 0 {\n\t\t\
    \treturn z\n\t\t}\n\t\tif x == y {\n\t\t\tbreak\n\t\t}\n\t\tx -= y\n\t\ty %= x\n\
    \t\tz <<= 1\n\t}\n\treturn z", "    if n < 0 {\n        return modp(abs(n), p)\n\
    \    }\n    if p < 0 {\n        return modp(n, abs(p))\n    }\n    if n == 0 {\n\
    \        return 0\n    }\n    if p == 0 {\n        return n\n    }\n    if p >\
    \ n {\n        return modp(n, p)\n    }\n    if p < n {\n        return modp(n,\
    \ p)\n    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n     \
    \   return n\n    }\n    if n == p {\n        return p\n    }\n    if n == p+1\
    \ {\n        return p\n    }\n    if n == p-1 {\n        return n\n    }\n   \
    \ if n == p+2 {\n        return p\n    }\n    if n == p-2 {\n        return n\n\
    \    }\n    if n == p+3 {\n        return p\n    }\n    if n == p-3 {\n      \
    \  return n\n    }\n    if n == p+4 {\n        return p\n    }\n    if n == p-4\
    \ {\n        return n\n    }\n    if n == p+5 {\n        return p\n    }\n   \
    \ if n == p-5 {\n        return n\n    }\n    if n == p+6 {\n        return p\n\
    \    }\n    if n == p-6 {\n        return n\n    }\n    if n == p+7 {\n      \
    \  return p\n    }\n    if n == p-7 {\n        return n\n    }\n    if n == p+8\
    \ {\n        return p\n    }\n    if n == p-8 {\n        return n\n    }\n   \
    \ if n == p+9 {\n        return p\n    }\n    if n == p-9 {\n        return n\n\
    \    }\n    if n == p+10 {\n        return p\n    }\n    if n == p-10 {\n    \
    \    return n\n    }\n    if n == p+11 {\n        return p\n    }\n    if n ==\
    \ p-11 {\n        return n\n    }\n    if n == p+12 {\n        return p\n    }\n\
    \    if n == p-12 {\n        return n\n    }\n    if n == p+13 {\n        return\
    \ p\n    }\n    if n == p-13 {\n        return n\n    }\n    if n == p+14 {\n\
    \        return p\n    }\n    if n == p-14 {\n        return n\n    }\n    if\
    \ n == p+15 {\n        return p\n    }\n    if n == p-15 {\n        return n\n\
    \    }\n    if n == p+16 {\n        return p\n    }\n    if n == p-16 {\n    \
    \    return n\n    }\n    if n == p+17 {\n        return p\n    }\n    if n ==\
    \ p-17 {\n        return n\n    }\n    if n == p+18 {\n        return p\n    }\n\
    \    if n == p-18 {\n        return n\n    }\n    if n == p+19", "\tif n < 0 {\n\
    \t\tpanic(\"modp: negative number\")\n\t}\n\tif p < 2 {\n\t\tpanic(\"modp: p <\
    \ 2\")\n\t}\n\tif n == 0 {\n\t\treturn 1\n\t}\n\tif n == 1 {\n\t\treturn p\n\t\
    }\n\tif p > p {\n\t\tpanic(\"modp: p > p\")\n\t}\n\tq := p / 2\n\tr := p % 2\n\
    \tx := n\n\ty := 1\n\tfor {\n\t\tif x == 0 {\n\t\t\treturn y\n\t\t}\n\t\ty *=\
    \ x\n\t\tx /= q\n\t\tif x == 0 {\n\t\t\treturn y\n\t\t}\n\t}", "    if n == 0\
    \ {\n        return 0\n    }\n    if p == 0 {\n        return n\n    }\n    if\
    \ n >= p {\n        return n - p\n    }\n    return p + modp(n - p, p)", "   \
    \ if n < 0 {\n        return modp(abs(n), p)\n    }\n    if p < 0 {\n        return\
    \ modp(n, abs(p))\n    }\n    if n == 0 {\n        return 0\n    }\n    if p ==\
    \ 0 {\n        return n\n    }\n    if p > n {\n        return modp(n, p)\n  \
    \  }\n    if p < n {\n        return modp(n, p)\n    }\n    if n == 1 {\n    \
    \    return p\n    }\n    if n == p {\n        return n\n    }\n    if n == p\
    \ {\n        return n\n    }\n    if n == p {\n        return n\n    }\n    if\
    \ n == p {\n        return n\n    }\n    if n == p {\n        return n\n    }\n\
    \    if n == p {\n        return n\n    }\n    if n == p {\n        return n\n\
    \    }\n    if n == p {\n        return n\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n == p {\n        return n\n    }\n    if n == p {\n      \
    \  return n\n    }\n    if n == p {\n        return n\n    }\n    if n == p {\n\
    \        return n\n    }\n    if n == p {\n        return n\n    }\n    if n ==\
    \ p {\n        return n\n    }\n    if n == p {\n        return n\n    }\n   \
    \ if n == p {\n        return n\n    }\n    if n == p {\n        return n\n  \
    \  }\n    if n == p {\n        return n\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n == p {\n        return n\n    }\n    if n == p {\n      \
    \  return n\n    }\n    if n == p {\n        return n\n    }\n    if n == p {\n\
    \        return n\n    }\n    if n == p {\n        return n\n    }\n    if n ==\
    \ p {\n        return n\n    }\n    if n == p {\n        return n\n    }\n   \
    \ if n == p {\n        return n\n    }\n    if n == p {\n        return n\n  \
    \  }\n    if n == p {\n        return n\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n == p {\n        return n\n    }\n    if n == p {\n      \
    \  return n\n    }\n    if n == p {\n        return n\n    }\n    if n == p {\n\
    \        return n\n    }\n    if n == p {\n        return n\n    }\n    if n ==\
    \ p {\n        return n\n    }\n    if n == p {\n        return n\n    }\n   \
    \ if n == p {\n        return n\n    }\n    if n == p {\n        return n\n  \
    \  }\n    if n == p {\n        return n\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n == p {\n        return n\n    }\n    if n == p {\n      \
    \  return n\n    }\n    if n == p {\n        return n\n    }\n    if n == p {\n\
    \        return n\n    }\n    if n == p {\n        return n\n    }\n    if n ==\
    \ p {\n        return n", "    if n < 0 {\n        return modp(-n, p)\n    }\n\
    \    if p < 1 {\n        return modp(n, p - 1)\n    }\n    if p == 1 {\n     \
    \   return n\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n\
    \        return p\n    }\n    if n == p {\n        return modp(n - 1, p)\n   \
    \ }\n    if n == p - 1 {\n        return modp(n, p)\n    }\n    if n == p - 2\
    \ {\n        return modp(n, p - 1)\n    }\n    if n == p - 3 {\n        return\
    \ modp(n, p - 2)\n    }\n    if n == p - 4 {\n        return modp(n, p - 3)\n\
    \    }\n    if n == p - 5 {\n        return modp(n, p - 4)\n    }\n    if n ==\
    \ p - 6 {\n        return modp(n, p - 5)\n    }\n    if n == p - 7 {\n       \
    \ return modp(n, p - 6)\n    }\n    if n == p - 8 {\n        return modp(n, p\
    \ - 7)\n    }\n    if n == p - 9 {\n        return modp(n, p - 8)\n    }\n   \
    \ if n == p - 10 {\n        return modp(n, p - 9)\n    }\n    if n == p - 11 {\n\
    \        return modp(n, p - 10)\n    }\n    if n == p - 12 {\n        return modp(n,\
    \ p - 11)\n    }\n    if n == p - 13 {\n        return modp(n, p - 12)\n    }\n\
    \    if n == p - 14 {\n        return modp(n, p - 13)\n    }\n    if n == p -\
    \ 15 {\n        return modp(n, p - 14)\n    }\n    if n == p - 16 {\n        return\
    \ modp(n, p - 15)\n    }\n    if n == p - 17 {\n        return modp(n, p - 16)\n\
    \    }\n    if n == p - 18 {\n        return modp(n, p - 17)\n    }\n    if n\
    \ == p - 19 {\n        return modp(n, p - 18)\n    }\n    if n == p - 20 {\n \
    \       return modp(n, p - 19)\n    }\n    if n == p - 21 {\n        return modp(n,\
    \ p - 20)\n    }\n    if n == p - 22 {\n        return modp(n, p - 21)\n    }\n\
    \    if n == p - 23 {\n        return modp(n, p - 22)\n    }\n    if n == p -\
    \ 24 {\n        return modp(n, p - 23)\n    }\n    if n == p - 25 {\n        return\
    \ modp(n, p - 24)\n    }\n    if n == p - 26 {\n        return modp(n, p - 25)\n\
    \    }\n    if n == p - 27 {\n        return modp(n, p - 26)\n    }\n    if n\
    \ == p - 28 {\n        return modp(n, p - 27)\n    }\n    if n == p - 29 {\n \
    \       return modp(n, p - 28)\n    }\n    if n == p - 30 {\n        return modp(n, ",
  "\tlet n2 = n * n\n\tlet p2 = p * p\n\tlet n3 = n2 * n2\n\tlet p3 = p2 * p\n\tlet\
    \ n4 = n3 * n3\n\tlet p4 = p3 * p3\n\tlet n5 = n4 * n4\n\tlet p5 = p4 * p4\n\t\
    let n6 = n5 * n5\n\tlet p6 = p5 * p5\n\tlet n7 = n6 * n6\n\tlet p7 = p6 * p6\n\
    \tlet n8 = (n7 * n7) + p7\n\tlet p8 = (p7 * p7) + p8\n\tlet n9 = (n8 * n8) + p8\n\
    \tlet p9 = (p8 * p8) + p9\n\tlet n10 = (n9 * n9) + p9\n\tlet p10 = (p9 * p9) +\
    \ p10\n\tlet n11 = (n10 * n10) + p10\n\tlet p11 = (p10 * p10) + p11\n\tlet n12\
    \ = (n11 * n11) + p11\n\tlet p12 = (p11 * p11) + p12\n\tlet n13 = (n12 * n12)\
    \ + p12\n\tlet p13 = (p12 * p12) + p13\n\tlet n14 = (n13 * n13) + p13\n\tlet p14\
    \ = (p13 * p13) + p14\n\tlet n15 = (n14 * n14) + p14\n\tlet p15 = (p14 * p14)\
    \ + p15\n\tlet n16 = (n15 * n15) + p15\n\tlet p16 = (p15 * p15) + p16\n\tlet n17\
    \ = (n16 * n16) + p16\n\tlet p17 = (p16 * p16) + p17\n\tlet n18 = (n17 * n17)\
    \ + p17\n\tlet p18 = (p17 * p17) + p18\n\tlet n19 = (n18 * n18) + p18\n\tlet p19\
    \ = (p18 * p18) + p19\n\tlet n20 = (n19 * n19) + p19\n\tlet p20 = (p19 * p19)\
    \ + p20\n\tlet n21 = (n20 * n20) + p20\n\tlet p21 = (p20 * p20) + p21\n\tlet n22\
    \ = (n21 * n21) + p21\n\tlet p22 = (p21", "\tif n < 0 {\n\t\tpanic(\"modp: negative\
    \ number\")\n\t}\n\tif p < 1 {\n\t\tpanic(\"modp: negative modulus\")\n\t}\n\t\
    if n == 0 {\n\t\treturn 0\n\t}\n\tif n == 1 {\n\t\treturn p\n\t}\n\tif n == p\
    \ {\n\t\treturn 1\n\t}\n\tif n == p+1 {\n\t\treturn p\n\t}\n\tif n == p+2 {\n\t\
    \treturn p + 1\n\t}\n\tif n == p+3 {\n\t\treturn p + 2\n\t}\n\tif n == p+4 {\n\
    \t\treturn p + 3\n\t}\n\tif n == p+5 {\n\t\treturn p + 4\n\t}\n\tif n == p+6 {\n\
    \t\treturn p + 5\n\t}\n\tif n == p+7 {\n\t\treturn p + 6\n\t}\n\tif n == p+8 {\n\
    \t\treturn p + 7\n\t}\n\tif n == p+9 {\n\t\treturn p + 8\n\t}\n\tif n == p+10\
    \ {\n\t\treturn p + 9\n\t}\n\tif n == p+11 {\n\t\treturn p + 10\n\t}\n\tif n ==\
    \ p+12 {\n\t\treturn p + 11\n\t}\n\tif n == p+13 {\n\t\treturn p + 12\n\t}\n\t\
    if n == p+14 {\n\t\treturn p + 13\n\t}\n\tif n == p+15 {\n\t\treturn p + 14\n\t\
    }\n\tif n == p+16 {\n\t\treturn p + 15\n\t}\n\tif n == p+17 {\n\t\treturn p +\
    \ 16\n\t}\n\tif n == p+18 {\n\t\treturn p + 17\n\t}\n\tif n == p+19 {\n\t\treturn\
    \ p + 18\n\t}\n\tif n == p+20 {\n\t\treturn p + 19\n\t}\n\tif n == p+21 {\n\t\t\
    return p + 20\n\t}\n\tif n == p+22 {\n\t\treturn p + 21\n\t}\n\tif n == p+23 {\n\
    \t\treturn p + 22\n\t}\n\tif n == p+24 {\n\t\treturn p + 23\n\t}\n\tif n == p+25\
    \ {\n\t\treturn p + 24\n\t}\n\tif n == p+26 {\n\t\treturn p + 25\n\t}\n\tif n\
    \ == p+27 {\n\t\treturn p + 26\n\t}\n\tif n == p+28 {\n\t\treturn p + 27\n\t}\n\
    \tif n == p+29 {\n\t\treturn p + 28\n\t}\n\tif n == p+30 {\n\t\treturn p + 29\n\
    \t}\n\tif n == p+31 {\n\t\treturn p + 30\n\t}\n\tif n == p+32 {\n\t\treturn p\
    \ + 31\n\t}\n\tif n == p+33 {\n\t\treturn p + ", "    if n < 0 {\n        return\
    \ modp(abs(n), p)\n    }\n    if p < 1 {\n        return modp(n, p - 1)\n    }\n\
    \    if p > p {\n        return modp(n, p - p)\n    }\n    return n % p", "\t\
    if n < 0 {\n\t\tpanic(\"modp: negative number\")\n\t}\n\tif p < 2 {\n\t\tpanic(\"\
    modp: p < 2\")\n\t}\n\tif n == 0 {\n\t\treturn 0\n\t}\n\tif n == 1 {\n\t\treturn\
    \ p\n\t}\n\tif p > p {\n\t\tpanic(\"modp: p > p\")\n\t}\n\tvar ret Int\n\tswitch\
    \ {\n\tcase n <= p:\n\t\tret = n - 1\n\tcase n >= p - 1:\n\t\tret = p\n\tdefault:\n\
    \t\tret = modp(n - p, p)\n\t}\n\treturn ret", "\tif n < 0 {\n\t\tpanic(\"modp:\
    \ negative number\")\n\t}\n\tif p < 1 {\n\t\tpanic(\"modp: negative modulus\"\
    )\n\t}\n\tif n == 0 {\n\t\treturn 0\n\t}\n\tif p == 1 {\n\t\treturn n\n\t}\n\t\
    if n == p {\n\t\treturn 1\n\t}\n\tif p > p {\n\t\tpanic(\"modp: modulus is greater\
    \ than p\")\n\t}\n\tif n == 1 {\n\t\treturn 0\n\t}\n\tif n == p {\n\t\treturn\
    \ n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\
    \tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n ==\
    \ p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\t\
    return n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\
    \t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif\
    \ n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\
    \t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn\
    \ n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\
    \tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n ==\
    \ p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\t\
    return n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\
    \t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif\
    \ n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\
    \t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn\
    \ n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\
    \tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n ==\
    \ p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\t\
    return n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\
    \t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif\
    \ n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\t\treturn n\n\t}\n\tif n == p {\n\
    \t\treturn n\n", "    if n < 0 {\n        return modp(abs(n), p)\n    }\n    if\
    \ p < 0 {\n        return modp(n, abs(p))\n    }\n    if n == 0 {\n        return\
    \ 0\n    }\n    if p == 0 {\n        return n\n    }\n    if p > n {\n       \
    \ return modp(n, p)\n    }\n    if p < n {\n        return modp(n - p, p)\n  \
    \  }\n    return n"]
stop_tokens:
- "\n}"
