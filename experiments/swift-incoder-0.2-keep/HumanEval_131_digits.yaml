name: HumanEval_131_digits
language: swift
prompt: "\n/// Given a positive integer n, return the product of the odd digits.\n\
  /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n///\
  \ digits(4)  == 0\n/// digits(235) == 15\nfunc digits(n: Int) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(digits(n: 5) == 5)\nassert(digits(n: 54)\
  \ == 5)\nassert(digits(n: 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n:\
  \ 98765) == 315)\nassert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) ==\
  \ 0)"
completions: ["    var product = 1\n    for d in n.toString.reverse() {\n        product\
    \ *= Int(d)\n    }\n    return product", "    var product = 1\n    for d in n.toString()\
    \ {\n        if d == \"0\" {\n            continue\n        }\n        product\
    \ *= Int(d)!\n    }\n    return product", "    var product = 1\n    for digit\
    \ in n.toString() {\n        if digit == \"0\" {\n            continue\n     \
    \   }\n        product *= Int(digit)!\n    }\n    return product", "    var product\
    \ = 1\n    for digit in n.toString(radix: 2) {\n        product *= Int(digit)\n\
    \    }\n    return product", "    var product = 1\n    for d in n.toString() {\n\
    \        if d == \"0\" {\n            continue\n        }\n        product *=\
    \ Int(d)!\n    }\n    return product", "    var result = 0\n    for d in n.toString()\
    \ {\n        if d % 2 == 1 {\n            result *= 10\n            result +=\
    \ Int(d)\n        }\n    }\n    return result", "    var product = 1\n    for\
    \ digit in n.toString(radix: 2) {\n        product *= Int(digit)\n    }\n    return\
    \ product", "    var product = 1\n    for digit in n.toString() {\n        product\
    \ *= Int(digit)!\n    }\n    return product", "    var product = 1\n    for digit\
    \ in String(format: \"%2d\", n).characters {\n        product *= Int(digit)\n\
    \    }\n    return product", "    var product = 1\n    for digit in n.toString()\
    \ {\n        if digit == \"0\" {\n            continue\n        }\n        product\
    \ *= Int(digit)\n    }\n    return product", "    var product = 1\n    for digit\
    \ in n.toString(radix: 2) {\n        product *= Int(digit)!\n    }\n    return\
    \ product", "    var result = 1\n    for _ in 0..<n {\n        result *= n % 10\n\
    \        n /= 10\n    }\n    return result", "    var product = 1\n    for d in\
    \ n.toString() {\n        if d == \"0\" {\n            continue\n        }\n \
    \       product *= Int(d)!\n    }\n    return product", "    var result = 1\n\
    \    for d in n.toString() {\n        if d % 2 == 1 {\n            result *= Int(d)\n\
    \        }\n    }\n    return result", "    var product = 1\n    for d in n.toString(radix:\
    \ 2) {\n        product *= Int(d)\n    }\n    return product", "    var product\
    \ = 1\n    for digit in n.toString() {\n        product *= Int(digit)\n    }\n\
    \    return product", "    var result = 1\n    for _ in 0..<n {\n        result\
    \ *= n % 10\n        n /= 10\n    }\n    return result", "    var result = 1\n\
    \    for _ in 0..<n {\n        result *= n % 10\n        n /= 10\n    }\n    return\
    \ result", "    var product = 1\n    for digit in String(format: \"%2d\", n).characters\
    \ {\n        product *= Int(digit)\n    }\n    return product", "    var product\
    \ = 1\n    for digit in String(format: \"%2d\", n).characters {\n        product\
    \ *= Int(digit)\n    }\n    return product"]
stop_tokens:
- "\n}"
