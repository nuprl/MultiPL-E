name: HumanEval_5_intersperse
language: swift
prompt: "\n/// Insert a number 'delimeter' between every two consecutive elements\
  \ of input list `numbers'\n/// >>> intersperse([], 4)\n/// []\n/// >>> intersperse([1,\
  \ 2, 3], 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int)\
  \ -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(intersperse(numbers: [] as [Int], delimeter:\
  \ 7) == [] as [Int])\nassert(intersperse(numbers: [5, 6, 3, 2], delimeter: 8) ==\
  \ [5, 8, 6, 8, 3, 8, 2])\nassert(intersperse(numbers: [2, 2, 2], delimeter: 2) ==\
  \ [2, 2, 2, 2, 2])"
completions: ["    var result = [Int]()\n    for number in numbers {\n        result.append(number)\n\
    \        result.append(delimeter)\n    }\n    return result", "    var result\
    \ = [Int]()\n    var lastNumber = 0\n    for number in numbers {\n        if number\
    \ != lastNumber {\n            result.append(number)\n            result.append(delimeter)\n\
    \        }\n        lastNumber = number\n    }\n    return result", "    var result\
    \ = [Int]()\n    for number in numbers {\n        result.append(number)\n    \
    \    result.append(delimeter)\n    }\n    return result", "    var result = [Int]()\n\
    \    var index = 0\n    for number in numbers {\n        result[index] = number\n\
    \        index++\n        if index == delimeter {\n            index = 0\n   \
    \     }\n    }\n    return result", "    return numbers.reduce(into: [Int](),\
    \ { result, number in\n        result[result.count] = number\n        result.insert(result.count,\
    \ delimeter)\n    })", "    var result = [Int]()\n    for number in numbers {\n\
    \        result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result", "    var result = [Int]()\n    for number in numbers {\n        result.append(number)\n\
    \        result.append(delimeter)\n    }\n    return result", "    var result\
    \ = [Int]()\n    for number in numbers {\n        result.append(number)\n    \
    \    result.append(delimeter)\n    }\n    return result", '    return numbers.reduce([])
    { $0.append($1).append(delimeter) }', '    return numbers.reduce([]) { $0.append($1).append(delimeter)
    }', '    return numbers.reduce([]) { $0.append($1).append(delimeter) }', '    return
    numbers.reduce(into: [Int](), { $0.append($1).append($2) })', '    return numbers.reduce(into:
    [Int](), { $0.append($1).append($2) })', "    var result = [Int]()\n    for number\
    \ in numbers {\n        result.append(number)\n        result.append(delimeter)\n\
    \    }\n    return result", "    var numbersInOrder = [Int]()\n    for number\
    \ in numbers {\n        numbersInOrder.append(number)\n    }\n    var result =\
    \ [Int]()\n    for number in numbersInOrder {\n        result.append(number)\n\
    \        result.append(delimeter)\n    }\n    return result", "    return numbers.reduce([])\
    \ { (result, number) -> [Int] in\n        var result = result\n        if number\
    \ != 0 {\n            result = result + [number]\n        }\n        if number\
    \ != 0 {\n            result = result + [delimeter]\n        }\n        return\
    \ result\n    }", "    var result = [Int]()\n    var index = 0\n    for number\
    \ in numbers {\n        result[index] = number\n        index++\n        if index\
    \ == delimeter {\n            index = 0\n            result.append(number)\n \
    \       }\n    }\n    return result", "    var result = [Int]()\n    for number\
    \ in numbers {\n        result.append(number)\n        result.append(delimeter)\n\
    \    }\n    return result", "    var result = [Int]()\n    for number in numbers\
    \ {\n        result.append(number)\n        result.append(delimeter)\n    }\n\
    \    return result", "    var result = [Int]()\n    for number in numbers {\n\
    \        result.append(number)\n        result.append(delimeter)\n    }\n    return\
    \ result"]
stop_tokens:
- "\n}"
