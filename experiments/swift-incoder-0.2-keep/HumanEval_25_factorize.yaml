name: HumanEval_25_factorize
language: swift
prompt: "\n/// Return list of prime factors of given integer in the order from smallest\
  \ to largest.\n/// Each of the factors should be listed number of times corresponding\
  \ to how many times it appeares in factorization.\n/// Input number should be equal\
  \ to the product of all factors\n/// >>> factorize(8)\n/// [2, 2, 2]\n/// >>> factorize(25)\n\
  /// [5, 5]\n/// >>> factorize(70)\n/// [2, 5, 7]\nfunc factorize(n: Int) -> [Int]\
  \ {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(factorize(n: 2) == [2])\nassert(factorize(n:\
  \ 4) == [2, 2])\nassert(factorize(n: 8) == [2, 2, 2])\nassert(factorize(n: 57) ==\
  \ [3, 19])\nassert(factorize(n: 3249) == [3, 3, 19, 19])\nassert(factorize(n: 185193)\
  \ == [3, 3, 3, 19, 19, 19])\nassert(factorize(n: 20577) == [3, 19, 19, 19])\nassert(factorize(n:\
  \ 18) == [2, 3, 3])"
completions: ["    var factorization = [Int]()\n    var primeFactorization = [Int]()\n\
    \    var primeFactorizationCount = [Int]()\n    var primeFactorizationIndex =\
    \ 0\n    var primeFactorizationIndexCount = 0\n    var primeFactorizationIndexCountMax\
    \ = Int(Int64.max) / Int(Int64.max)\n    var isPrime = [Bool]()\n    var isPrimeCount\
    \ = 0\n    var isPrimeIndex = 0\n    var isPrimeIndexCount = 0\n    var isPrimeIndexCountMax\
    \ = Int(Int64.max) / Int(Int64.max)\n    var isPrimeIndexCountMax2 = Int(Int64.max)\
    \ / Int(Int64.max)\n    var isPrimeIndexCountMax3 = Int(Int64.max) / Int(Int64.max)\n\
    \    var isPrimeIndexCountMax4 = Int(Int64.max) / Int(Int64.max)\n    var isPrimeIndexCountMax5\
    \ = Int(Int64.max) / Int(Int64.max)\n    var isPrimeIndexCountMax6 = Int(Int64.max)\
    \ / Int(Int64.max)\n    var isPrimeIndexCountMax7 = Int(Int64.max) / Int(Int64.max)\n\
    \    var isPrimeIndexCountMax8 = Int(Int64.max) / Int(Int64.max)\n    var isPrimeIndexCountMax9\
    \ = Int(Int64.max) / Int(Int64.max)\n    var isPrimeIndexCountMax10 = Int(Int64.max)\
    \ / Int(Int64.max)\n    var isPrimeIndexCountMax11 = Int(Int64.max) / Int(Int64.max)\n\
    \    var isPrimeIndexCountMax12 = Int(Int64.max) / Int(Int64.max)\n    var isPrimeIndexCountMax13\
    \ = Int(Int64.max) / Int(Int64.max)\n    var isPrimeIndexCountMax14 = Int(Int64.max)\
    \ / Int(Int64.max)\n    var isPrimeIndexCountMax15 = Int(Int64.max) / Int(Int64.max)\n\
    \    var isPrimeIndexCountMax16 = Int(Int64.max) / Int(Int64.max)\n    var isPrimeIndexCountMax17\
    \ = Int(Int64.max) / Int(Int64.max)\n    var isPrimeIndexCountMax18 = Int(Int64.max)\
    \ / Int(Int64.max)\n    var isPrimeIndexCountMax19 = Int(Int64.max) / Int(Int64.max)\n\
    \    var isPrimeIndexCountMax20 = Int(Int64.max) / Int(Int64.max)\n    var isPrimeIndexCountMax21\
    \ = Int(Int64.max) / Int(Int64.max)\n    var isPrimeIndexCountMax22 = Int(Int64.max)\
    \ / Int(Int64.max)\n    var isPrimeIndexCountMax23 = Int(Int64.max) / Int(", " \
    \   var factors = [Int]()\n    var i = 2\n    while i * i <= n {\n        if n\
    \ % i == 0 {\n            factors.append(i)\n            n /= i\n        } else\
    \ {\n            i += 1\n        }\n    }\n    if n > 1 {\n        factors.append(n)\n\
    \    }\n    return factors", "    var factors = [Int]()\n    var factorization\
    \ = factorizationOfNumber(n)\n    var factorizationCount = 1\n    for factor in\
    \ factorization {\n        if factorizationCount > 1 {\n            factors.append(factor)\n\
    \        }\n        factorizationCount *= factor\n    }\n    return factors",
  "    var factors = [Int]()\n    var i = 2\n    var j = 0\n    var k = n\n    while\
    \ i < k {\n        while j < k {\n            if n % i == 0 {\n              \
    \  factors.append(i)\n                n /= i\n                j++\n          \
    \  }\n            j++\n        }\n        i += 1\n        j = 0\n    }\n    if\
    \ n > 1 {\n        factors.append(n)\n    }\n    return factors", "    var factorization:\
    \ [Int] = []\n    var i = 2\n    var j = 1\n    var factor = 2\n    while i <=\
    \ n {\n        while n % i == 0 {\n            factorization[j] = i\n        \
    \    n /= i\n            j++\n        }\n        i += 1\n    }\n    if n > 1 {\n\
    \        factorization[j] = n\n    }\n    return factorization", "    var factorization:\
    \ [Int] = []\n    var factorizationCount = 0\n    var factorizationIndex = 0\n\
    \    var factorizationNumber = 0\n    var factorizationNumberIndex = 0\n    var\
    \ factorizationNumberCount = 0\n    var factorizationNumberCountIndex = 0\n  \
    \  var factorizationNumberCountMax = 0\n    var factorizationNumberCountMaxIndex\
    \ = 0\n    var factorizationNumberCountMin = 0\n    var factorizationNumberCountMinIndex\
    \ = 0\n    var factorizationNumberCountMaxIndex = 0\n    var factorizationNumberCountMinIndex\
    \ = 0\n    var factorizationNumberCountMaxIndex = 0\n    var factorizationNumberCountMinIndex\
    \ = 0\n    var factorizationNumberCountMaxIndex = 0\n    var factorizationNumberCountMinIndex\
    \ = 0\n    var factorizationNumberCountMaxIndex = 0\n    var factorizationNumberCountMinIndex\
    \ = 0\n    var factorizationNumberCountMaxIndex = 0\n    var factorizationNumberCountMinIndex\
    \ = 0\n    var factorizationNumberCountMaxIndex = 0\n    var factorizationNumberCountMinIndex\
    \ = 0\n    var factorizationNumberCountMaxIndex = 0\n    var factorizationNumberCountMinIndex\
    \ = 0\n    var factorizationNumberCountMaxIndex = 0\n    var factorizationNumberCountMinIndex\
    \ = 0\n    var factorizationNumberCountMaxIndex = 0\n    var factorizationNumberCountMinIndex\
    \ = 0\n    var factorizationNumberCountMaxIndex = 0\n    var factorizationNumberCountMinIndex\
    \ = 0\n    var factorizationNumberCountMaxIndex = 0\n    var factorizationNumberCountMinIndex\
    \ = 0\n    var factorizationNumberCountMaxIndex = 0\n    var factorizationNumberCountMinIndex\
    \ = 0\n    var factorizationNumberCountMaxIndex = 0\n    var factorizationNumberCountMinIndex\
    \ = 0\n    var factorizationNumberCountMaxIndex = 0\n    var factorizationNumberCountMinIndex\
    \ = 0\n    var factorizationNumberCountMaxIndex = 0\n    var factorizationNumberCountMinIndex\
    \ = 0\n    var factorizationNumberCountMaxIndex = 0\n    var factorizationNumberCountMinIndex\
    \ = 0\n    var factorizationNumberCountMaxIndex = 0\n    var factorizationNumberCountMinIndex\
    \ = 0\n    var factorizationNumberCountMaxIndex = 0\n    var factorizationNumberCountMinIndex\
    \ = 0\n    var factorizationNumberCountMaxIndex = 0\n    var factorizationNumberCountMinIndex\
    \ = 0\n    var factorizationNumberCountMaxIndex = 0\n    var factorizationNumberCountMinIndex\
    \ = 0\n    var factorizationNumberCountMaxIndex = 0\n    var factorizationNumberCountMinIndex\
    \ = 0\n    var factorizationNumberCountMaxIndex = 0\n    var factorizationNumberCountMinIndex\
    \ = 0\n    var factorizationNumberCountMaxIndex = 0\n    var factorizationNumberCountMinIndex\
    \ = 0\n    var factorizationNumberCountMaxIndex = 0\n    var factorizationNumberCountMinIndex\
    \ = 0", "    var factors: [Int] = []\n    var factorization: [Int] = [1]\n   \
    \ var factorizationIndex = 0\n    var currentFactorizationIndex = 0\n    var currentFactorization\
    \ = factorization[currentFactorizationIndex]\n    var currentFactorizationIndexInFactorization\
    \ = 0\n    var currentFactorizationIndexInFactorizationArray = 0\n    var currentFactorizationIndexInFactorizationArrayIndex\
    \ = 0\n    var currentFactorizationIndexInFactorizationArrayIndexMax = 0\n   \
    \ var currentFactorizationIndexInFactorizationArrayIndexMin = 0\n    var currentFactorizationIndexInFactorizationArrayMax\
    \ = 0\n    var currentFactorizationIndexInFactorizationArrayMin = 0\n    var currentFactorizationIndexInFactorizationArrayMinIndex\
    \ = 0\n    var currentFactorizationIndexInFactorizationArrayMaxIndex = 0\n   \
    \ var currentFactorizationIndexInFactorizationArrayMaxIndex = 0\n    var currentFactorizationIndexInFactorizationArrayMaxIndex\
    \ = 0\n    var currentFactorizationIndexInFactorizationArrayMaxIndex = 0\n   \
    \ var currentFactorizationIndexInFactorizationArrayMaxIndex = 0\n    var currentFactorizationIndexInFactorizationArrayMaxIndex\
    \ = 0\n    var currentFactorizationIndexInFactorizationArrayMaxIndex = 0\n   \
    \ var currentFactorizationIndexInFactorizationArrayMaxIndex = 0\n    var currentFactorizationIndexInFactorizationArrayMaxIndex\
    \ = 0\n    var currentFactorizationIndexInFactorizationArrayMaxIndex = 0\n   \
    \ var currentFactorizationIndexInFactorizationArrayMaxIndex = 0\n    var currentFactorizationIndexInFactorizationArrayMaxIndex\
    \ = 0\n    var currentFactorizationIndexInFactorizationArrayMaxIndex = 0\n   \
    \ var currentFactorizationIndexInFactorizationArrayMaxIndex = 0\n    var currentFactorizationIndexInFactorizationArrayMaxIndex\
    \ = 0\n    var currentFactorizationIndexInFactorizationArrayMaxIndex = 0\n   \
    \ var currentFactorizationIndexInFactorizationArrayMaxIndex = 0\n    var currentFactorizationIndexInFactorizationArrayMaxIndex\
    \ = 0\n    var currentFactorizationIndexInFactorizationArrayMaxIndex = 0\n   \
    \ var currentFactorizationIndexInFactorizationArrayMaxIndex = 0\n    var currentFactorizationIndexInFactorizationArrayMaxIndex\
    \ = 0\n    var currentFactorizationIndexInFactorizationArrayMaxIndex = 0\n   \
    \ var currentFactorizationIndexInFactorizationArrayMaxIndex = 0\n    var currentFactorizationIndexInFactorizationArrayMaxIndex\
    \ = 0\n    var currentFactorizationIndexInFactorizationArrayMaxIndex = 0\n   \
    \ var currentFactorizationIndexInFactorizationArrayMaxIndex = 0\n    var currentFactorizationIndexInFactorizationArrayMaxIndex\
    \ = 0\n    var currentFactorizationIndexInFactorizationArrayMaxIndex = 0\n   \
    \ var currentFactorizationIndexInFactorizationArrayMaxIndex = 0", "    var factors\
    \ = [Int]()\n    var factorization = factorizationOfNumber(n)\n    var primeFactorization\
    \ = factorizationOfPrimes(n)\n    var factorizationCount = 1\n    var primeFactorizationCount\
    \ = 1\n    for prime in primeFactorization {\n        if factorization[prime]\
    \ == 1 {\n            factors.append(prime)\n            factorizationCount *=\
    \ prime\n            primeFactorizationCount *= prime\n        }\n    }\n    for\
    \ factor in factorization {\n        if factor == 1 {\n            factors.append(factor)\n\
    \            factorizationCount *= factor\n        }\n    }\n    return factors",
  "    var factorization: [Int] = []\n    var factorizationCount = 0\n    var factorizationSum\
    \ = 0\n    var factorizationSum2 = 0\n    var factorizationSum3 = 0\n    var factorizationSum4\
    \ = 0\n    var factorizationSum5 = 0\n    var factorizationSum6 = 0\n    var factorizationSum7\
    \ = 0\n    var factorizationSum8 = 0\n    var factorizationSum9 = 0\n    var factorizationSum10\
    \ = 0\n    var factorizationSum11 = 0\n    var factorizationSum12 = 0\n    var\
    \ factorizationSum13 = 0\n    var factorizationSum14 = 0\n    var factorizationSum15\
    \ = 0\n    var factorizationSum16 = 0\n    var factorizationSum17 = 0\n    var\
    \ factorizationSum18 = 0\n    var factorizationSum19 = 0\n    var factorizationSum20\
    \ = 0\n    var factorizationSum21 = 0\n    var factorizationSum22 = 0\n    var\
    \ factorizationSum23 = 0\n    var factorizationSum24 = 0\n    var factorizationSum25\
    \ = 0\n    var factorizationSum26 = 0\n    var factorizationSum27 = 0\n    var\
    \ factorizationSum28 = 0\n    var factorizationSum29 = 0\n    var factorizationSum30\
    \ = 0\n    var factorizationSum31 = 0\n    var factorizationSum32 = 0\n    var\
    \ factorizationSum33 = 0\n    var factorizationSum34 = 0\n    var factorizationSum35\
    \ = 0\n    var factorizationSum36 = 0\n    var factorizationSum37 = 0\n    var\
    \ factorizationSum38 = 0\n    var factorizationSum39 = 0\n    var factorizationSum40\
    \ = 0\n    var factorizationSum41 = 0\n    var factorizationSum42 = 0\n    var\
    \ factorizationSum43 = 0\n    var factorizationSum44 = 0\n    var factorizationSum45\
    \ = 0\n    var factorizationSum46 = 0\n    var factorizationSum47 = 0\n    var\
    \ factorizationSum48 = 0\n    var factorizationSum49 = 0\n    var factorizationSum50\
    \ = 0\n    var factorizationSum51 = 0\n    var factorizationSum52 = 0\n    var\
    \ factorizationSum53 = 0\n    var factorizationSum54 = 0\n    var factorizationSum55\
    \ = 0\n    var factorizationSum56 = 0\n    var factorizationSum57 = 0\n    var\
    \ factorizationSum58 = 0\n    var factorizationSum59 = 0\n    var factorizationSum60\
    \ = 0\n    var factorizationSum61 = 0\n    var factorizationSum62 = 0\n    var\
    \ factorizationSum63 = 0\n    var factorizationSum64 = 0\n    var factorizationSum65\
    \ = 0\n    var factorizationSum66 = 0\n    var factorizationSum67 = 0\n    var\
    \ factorizationSum68 = 0\n    var factorizationSum69 = 0\n    var factorizationSum70\
    \ = 0\n    var factorizationSum71 = 0\n    var factorization", "    var factors\
    \ = [Int]()\n    var i = 2\n    while i * i <= n {\n        if n % i == 0 {\n\
    \            factors.append(i)\n            n /= i\n        } else {\n       \
    \     i += 1\n        }\n    }\n    if n > 1 {\n        factors.append(n)\n  \
    \  }\n    return factors", "    var factors: [Int] = []\n    var primes: [Int]\
    \ = []\n    var isPrime: [Bool] = []\n    var isPrimeCount: Int = 0\n    var isPrimeCountMax:\
    \ Int = 0\n    var isPrimeCountMin: Int = 0\n    var isPrimeCountMaxMin: Int =\
    \ 0\n    var isPrimeCountMinMax: Int = 0\n    var isPrimeCountMinMaxMin: Int =\
    \ 0\n    var isPrimeCountMinMaxMinMax: Int = 0\n    var isPrimeCountMinMaxMinMaxMin:\
    \ Int = 0\n    var isPrimeCountMinMaxMinMaxMinMax: Int = 0\n    var isPrimeCountMinMaxMinMaxMinMaxMin:\
    \ Int = 0\n    var isPrimeCountMinMaxMinMaxMinMaxMinMax: Int = 0\n    var isPrimeCountMinMaxMinMaxMinMaxMinMaxMin:\
    \ Int = 0\n    var isPrimeCountMinMaxMinMaxMinMaxMinMaxMin: Int = 0\n    var isPrimeCountMinMaxMinMaxMinMaxMinMaxMinMax:\
    \ Int = 0\n    var isPrimeCountMinMaxMinMaxMinMaxMinMaxMinMaxMin: Int = 0\n  \
    \  var isPrimeCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMax: Int = 0\n    var isPrimeCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMax:\
    \ Int = 0\n    var isPrimeCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMax: Int = 0\n\
    \    var isPrimeCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMin: Int = 0\n    var\
    \ isPrimeCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMin: Int = 0\n    var isPrimeCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax:\
    \ Int = 0\n    var isPrimeCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax: Int\
    \ = 0\n    var isPrimeCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMin: Int\
    \ = 0\n    var isPrimeCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMin: Int\
    \ = 0\n    var isPrimeCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax: Int\
    \ = 0\n    var isPrimeCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMin:\
    \ Int = 0\n    var isPrimeCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax:\
    \ Int = 0\n", "    var factorization = [Int]()\n    var primeFactorization = [Int]()\n\
    \    var primeFactorizationCount = [Int]()\n    var primeFactorizationIndex =\
    \ 0\n    var factorizationIndex = 0\n    var factorizationCount = 0\n    var factorizationIndex2\
    \ = 0\n    var factorizationCount2 = 0\n    var factorizationIndex3 = 0\n    var\
    \ factorizationCount3 = 0\n    var factorizationIndex4 = 0\n    var factorizationCount4\
    \ = 0\n    var factorizationIndex5 = 0\n    var factorizationCount5 = 0\n    var\
    \ factorizationIndex6 = 0\n    var factorizationCount6 = 0\n    var factorizationIndex7\
    \ = 0\n    var factorizationCount7 = 0\n    var factorizationIndex8 = 0\n    var\
    \ factorizationCount8 = 0\n    var factorizationIndex9 = 0\n    var factorizationCount9\
    \ = 0\n    var factorizationIndex10 = 0\n    var factorizationCount10 = 0\n  \
    \  var factorizationIndex11 = 0\n    var factorizationCount11 = 0\n    var factorizationIndex12\
    \ = 0\n    var factorizationCount12 = 0\n    var factorizationIndex13 = 0\n  \
    \  var factorizationCount13 = 0\n    var factorizationIndex14 = 0\n    var factorizationCount14\
    \ = 0\n    var factorizationIndex15 = 0\n    var factorizationCount15 = 0\n  \
    \  var factorizationIndex16 = 0\n    var factorizationCount16 = 0\n    var factorizationIndex17\
    \ = 0\n    var factorizationCount17 = 0\n    var factorizationIndex18 = 0\n  \
    \  var factorizationCount18 = 0\n    var factorizationIndex19 = 0\n    var factorizationCount19\
    \ = 0\n    var factorizationIndex20 = 0\n    var factorizationCount20 = 0\n  \
    \  var factorizationIndex21 = 0\n    var factorizationCount21 = 0\n    var factorizationIndex22\
    \ = 0\n    var factorizationCount22 = 0\n    var factorizationIndex23 = 0\n  \
    \  var factorizationCount23 = 0\n    var factorizationIndex24 = 0\n    var factorizationCount24\
    \ = 0\n    var factorizationIndex25 = 0\n    var factorizationCount25 = 0\n  \
    \  var factorizationIndex26 = 0\n    var factorizationCount26 = 0\n    var factorizationIndex27\
    \ = 0\n    var factorizationCount27 = 0\n    var factorizationIndex28 = 0\n  \
    \  var factorizationCount28 = 0\n    var factorizationIndex29 = 0\n    var factorizationCount29\
    \ = 0\n    var factorizationIndex30 = 0\n    var factorizationCount30 = 0\n  \
    \  var factorizationIndex31 = 0\n    var factorizationCount31 = 0\n    var factorizationIndex32\
    \ = 0\n    var factorizationCount32 = 0\n    var factorizationIndex33 = 0\n  \
    \  var factorizationCount33 = 0\n    var factorizationIndex34 = 0\n    var factorizationCount34\
    \ = 0\n    var factorizationIndex", "    var factorization: [Int] = []\n    var\
    \ factorizationCount = 0\n    var factorizationSum = 0\n    var factorizationSum2\
    \ = 0\n    var factorizationSum3 = 0\n    var factorizationSum4 = 0\n    var factorizationSum5\
    \ = 0\n    var factorizationSum6 = 0\n    var factorizationSum7 = 0\n    var factorizationSum8\
    \ = 0\n    var factorizationSum9 = 0\n    var factorizationSum10 = 0\n    var\
    \ factorizationSum11 = 0\n    var factorizationSum12 = 0\n    var factorizationSum13\
    \ = 0\n    var factorizationSum14 = 0\n    var factorizationSum15 = 0\n    var\
    \ factorizationSum16 = 0\n    var factorizationSum17 = 0\n    var factorizationSum18\
    \ = 0\n    var factorizationSum19 = 0\n    var factorizationSum20 = 0\n    var\
    \ factorizationSum21 = 0\n    var factorizationSum22 = 0\n    var factorizationSum23\
    \ = 0\n    var factorizationSum24 = 0\n    var factorizationSum25 = 0\n    var\
    \ factorizationSum26 = 0\n    var factorizationSum27 = 0\n    var factorizationSum28\
    \ = 0\n    var factorizationSum29 = 0\n    var factorizationSum30 = 0\n    var\
    \ factorizationSum31 = 0\n    var factorizationSum32 = 0\n    var factorizationSum33\
    \ = 0\n    var factorizationSum34 = 0\n    var factorizationSum35 = 0\n    var\
    \ factorizationSum36 = 0\n    var factorizationSum37 = 0\n    var factorizationSum38\
    \ = 0\n    var factorizationSum39 = 0\n    var factorizationSum40 = 0\n    var\
    \ factorizationSum41 = 0\n    var factorizationSum42 = 0\n    var factorizationSum43\
    \ = 0\n    var factorizationSum44 = 0\n    var factorizationSum45 = 0\n    var\
    \ factorizationSum46 = 0\n    var factorizationSum47 = 0\n    var factorizationSum48\
    \ = 0\n    var factorizationSum49 = 0\n    var factorizationSum50 = 0\n    var\
    \ factorizationSum51 = 0\n    var factorizationSum52 = 0\n    var factorizationSum53\
    \ = 0\n    var factorizationSum54 = 0\n    var factorizationSum55 = 0\n    var\
    \ factorizationSum56 = 0\n    var factorizationSum57 = 0\n    var factorizationSum58\
    \ = 0\n    var factorizationSum59 = 0\n    var factorizationSum60 = 0\n    var\
    \ factorizationSum61 = 0\n    var factorizationSum62 = 0\n    var factorizationSum63\
    \ = 0\n    var factorizationSum64 = 0\n    var factorizationSum65 = 0\n    var\
    \ factorizationSum66 = 0\n    var factorizationSum67 = 0\n    var factorizationSum68\
    \ = 0\n    var factorizationSum69 = 0\n    var factorizationSum70 = 0\n    var\
    \ factorizationSum71 = 0\n    var factorization", "    var factors = [Int]()\n\
    \    var i = 2\n    while i * i <= n {\n        if n % i == 0 {\n            factors.append(i)\n\
    \            n /= i\n        }\n        i += 1\n    }\n    if n > 1 {\n      \
    \  factors.append(n)\n    }\n    return factors", "    var factors: [Int] = []\n\
    \    var primeFactors: [Int] = []\n    var primeFactorsCount = 0\n    var isPrime:\
    \ Bool = false\n    var isPrimeCount = 0\n    var isPrimePrime: Bool = false\n\
    \    var isPrimePrimeCount = 0\n    var isPrimePrimePrime: Bool = false\n    var\
    \ isPrimePrimePrimeCount = 0\n    var isPrimePrimePrimePrime: Bool = false\n \
    \   var isPrimePrimePrimePrimeCount = 0\n    var isPrimePrimePrimePrimePrime:\
    \ Bool = false\n    var isPrimePrimePrimePrimePrimeCount = 0\n    var isPrimePrimePrimePrimePrime:\
    \ Bool = false\n    var isPrimePrimePrimePrimePrimeCount = 0\n    var isPrimePrimePrimePrimePrimePrime:\
    \ Bool = false\n    var isPrimePrimePrimePrimePrimePrimeCount = 0\n    var isPrimePrimePrimePrimePrimePrimePrime:\
    \ Bool = false\n    var isPrimePrimePrimePrimePrimePrimePrimeCount = 0\n    var\
    \ isPrimePrimePrimePrimePrimePrimePrime: Bool = false\n    var isPrimePrimePrimePrimePrimePrimePrimeCount\
    \ = 0\n    var isPrimePrimePrimePrimePrimePrimePrimePrime: Bool = false\n    var\
    \ isPrimePrimePrimePrimePrimePrimePrimePrimeCount = 0\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrime:\
    \ Bool = false\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimeCount =\
    \ 0\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime: Bool = false\n\
    \    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount = 0\n    var\
    \ isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime: Bool = false\n    var\
    \ isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount = 0\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount\
    \ = 0\n    var isPrimePrimePrimePrimePrimePrimePrime", "    var factorization\
    \ = [Int]()\n    var i = 2\n    var factor = 1\n    while i <= n {\n        if\
    \ n % i == 0 {\n            factor *= i\n            factorization[factorizationCount]\
    \ = i\n            factorizationCount += 1\n        }\n        i += 1\n    }\n\
    \    return factorization", "    var factorization = [Int]()\n    var factorizationCount\
    \ = [Int]()\n    var primeFactorization = [Int]()\n    var primeFactorizationCount\
    \ = [Int]()\n    var isPrime = [Bool]()\n    var isPrimeCount = [Int]()\n    var\
    \ isPrimePrime = [Bool]()\n    var isPrimePrimeCount = [Int]()\n    var isPrimePrimePrime\
    \ = [Bool]()\n    var isPrimePrimePrimeCount = [Int]()\n    var isPrimePrimePrimePrime\
    \ = [Bool]()\n    var isPrimePrimePrimePrimeCount = [Int]()\n    var isPrimePrimePrimePrimePrime\
    \ = [Bool]()\n    var isPrimePrimePrimePrimePrimeCount = [Int]()\n    var isPrimePrimePrimePrimePrimePrime\
    \ = [Bool]()\n    var isPrimePrimePrimePrimePrimePrimeCount = [Int]()\n    var\
    \ isPrimePrimePrimePrimePrimePrimePrime = [Bool]()\n    var isPrimePrimePrimePrimePrimePrimePrimeCount\
    \ = [Int]()\n    var isPrimePrimePrimePrimePrimePrimePrime = [Bool]()\n    var\
    \ isPrimePrimePrimePrimePrimePrimePrimeCount = [Int]()\n    var isPrimePrimePrimePrimePrimePrimePrimePrime\
    \ = [Bool]()\n    var isPrimePrimePrimePrimePrimePrimePrimeCount = [Int]()\n \
    \   var isPrimePrimePrimePrimePrimePrimePrimePrime = [Bool]()\n    var isPrimePrimePrimePrimePrimePrimePrimePrimeCount\
    \ = [Int]()\n    var isPrimePrimePrimePrimePrimePrimePrimePrime = [Bool]()\n \
    \   var isPrimePrimePrimePrimePrimePrimePrimePrimeCount = [Int]()\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = [Bool]()\n    var isPrimePrimePrimePrimePrimePrimePrimePrimeCount = [Int]()\n\
    \    var isPrimePrimePrimePrimePrimePrimePrimePrimePrime = [Bool]()\n    var isPri",
  "    var factors = [Int]()\n    var i = 2\n    var j = 1\n    var factor = 1\n \
    \   while i <= n {\n        if n % i == 0 {\n            factors.append(i)\n \
    \           n /= i\n        } else {\n            j += 1\n            factor =\
    \ 1\n            while j <= i {\n                if n % i == 0 {\n           \
    \         factor *= i\n                    n /= i\n                    break\n\
    \                }\n                j += 1\n            }\n            factors.append(factor)\n\
    \        }\n        i += 1\n    }\n    return factors", "    var factors: [Int]\
    \ = []\n    var i = 2\n    var factor: Int\n    while i < n {\n        factor\
    \ = 1\n        while i < n && n % i == 0 {\n            factor *= i\n        \
    \    i += 1\n        }\n        factors.append(factor)\n    }\n    return factors",
  "    var factors = [Int]()\n    var primes = [Int]()\n    var isPrime = [Bool]()\n\
    \    var isPrimeCount = [Int]()\n    var isPrimeCountMax = Int(arc4random_uniform(UInt32(UInt32.max)))\n\
    \    var isPrimeCountMin = Int(arc4random_uniform(UInt32(UInt32.min)))\n    var\
    \ isPrimeCountMin2 = Int(arc4random_uniform(UInt32(UInt32.min)))\n    var isPrimeCountMin3\
    \ = Int(arc4random_uniform(UInt32(UInt32.min)))\n    var isPrimeCountMin4 = Int(arc4random_uniform(UInt32(UInt32.min)))\n\
    \    var isPrimeCountMin5 = Int(arc4random_uniform(UInt32(UInt32.min)))\n    var\
    \ isPrimeCountMin6 = Int(arc4random_uniform(UInt32(UInt32.min)))\n    var isPrimeCountMin7\
    \ = Int(arc4random_uniform(UInt32(UInt32.min)))\n    var isPrimeCountMin8 = Int(arc4random_uniform(UInt32(UInt32.min)))\n\
    \    var isPrimeCountMin9 = Int(arc4random_uniform(UInt32(UInt32.min)))\n    var\
    \ isPrimeCountMin10 = Int(arc4random_uniform(UInt32(UInt32.min)))\n    var isPrimeCountMin11\
    \ = Int(arc4random_uniform(UInt32(UInt32.min)))\n    var isPrimeCountMin12 = Int(arc4random_uniform(UInt32(UInt32.min)))\n\
    \    var isPrimeCountMin13 = Int(arc4random_uniform(UInt32(UInt32.min)))\n   \
    \ var isPrimeCountMin14 = Int(arc4random_uniform(UInt32(UInt32.min)))\n    var\
    \ isPrimeCountMin15 = Int(arc4random_uniform(UInt32(UInt32.min)))\n    var isPrimeCountMin16\
    \ = Int(arc4random_uniform(UInt32(UInt32.min)))\n    var isPrimeCountMin17 = Int(arc4random_uniform(UInt32(UInt32.min)))\n\
    \    var isPrimeCountMin18 = Int(arc4random_uniform(UInt32(UInt32.min)))\n   \
    \ var isPrimeCountMin19 = Int(arc4random_uniform(UInt32(UInt32.min)))\n    var\
    \ isPrimeCountMin20 = Int(arc4random_uniform(UInt32(UInt32.min)))\n    var isPrimeCountMin21\
    \ = Int(arc4random_uniform(UInt32(UInt32.min)))\n    var isPrimeCountMin22 = Int(arc4random_uniform(UInt32(UInt32.min)))\n\
    \    var isPrimeCountMin23 = Int(", "    var factorization = [Int]()\n    var\
    \ primes = [Int]()\n    var primeFactorization = [Int]()\n    var isPrime = [Bool]()\n\
    \    var isPrimeFactorization = [Bool]()\n    var isPrimeFactorizationIndex =\
    \ 0\n    var isPrimeIndex = 0\n    var isPrimeFactorizationIndex2 = 0\n    var\
    \ isPrimeIndex2 = 0\n    var isPrimeFactorizationIndex3 = 0\n    var isPrimeIndex3\
    \ = 0\n    var isPrimeFactorizationIndex4 = 0\n    var isPrimeIndex4 = 0\n   \
    \ var isPrimeFactorizationIndex5 = 0\n    var isPrimeIndex5 = 0\n    var isPrimeFactorizationIndex6\
    \ = 0\n    var isPrimeIndex6 = 0\n    var isPrimeFactorizationIndex7 = 0\n   \
    \ var isPrimeIndex7 = 0\n    var isPrimeFactorizationIndex8 = 0\n    var isPrimeIndex8\
    \ = 0\n    var isPrimeFactorizationIndex9 = 0\n    var isPrimeIndex9 = 0\n   \
    \ var isPrimeFactorizationIndex10 = 0\n    var isPrimeIndex10 = 0\n    var isPrimeFactorizationIndex11\
    \ = 0\n    var isPrimeIndex11 = 0\n    var isPrimeFactorizationIndex12 = 0\n \
    \   var isPrimeIndex12 = 0\n    var isPrimeFactorizationIndex13 = 0\n    var isPrimeIndex13\
    \ = 0\n    var isPrimeFactorizationIndex14 = 0\n    var isPrimeIndex14 = 0\n \
    \   var isPrimeFactorizationIndex15 = 0\n    var isPrimeIndex15 = 0\n    var isPrimeFactorizationIndex16\
    \ = 0\n    var isPrimeIndex16 = 0\n    var isPrimeFactorizationIndex17 = 0\n \
    \   var isPrimeIndex17 = 0\n    var isPrimeFactorizationIndex18 = 0\n    var isPrimeIndex18\
    \ = 0\n    var isPrimeFactorizationIndex19 = 0\n    var isPrimeIndex19 = 0\n \
    \   var isPrimeFactorizationIndex20 = 0\n    var isPrimeIndex20 = 0\n    var isPrimeFactorizationIndex21\
    \ = 0\n    var isPrimeIndex21 = 0\n    var isPrimeFactorizationIndex22 = 0\n \
    \   var isPrimeIndex22 = 0\n    var isPrimeFactorizationIndex23 = 0\n    var isPrimeIndex23\
    \ = 0\n    var isPrimeFactorizationIndex24 = 0\n    var isPrimeIndex24 = 0\n \
    \   var isPrimeFactorizationIndex25 = 0\n    var isPrimeIndex25 = 0\n    var isPrimeFactorizationIndex26\
    \ = 0\n    var isPrimeIndex26 = 0\n    var is", "    var factors = [Int]()\n \
    \   var i = 2\n    var p = n\n    while p > 1 {\n        while p % i == 0 {\n\
    \            factors.append(i)\n            p /= i\n        }\n        i += 1\n\
    \    }\n    return factors", "    var factorization = [Int]()\n    var primeFactorization\
    \ = [Int]()\n    var factorizationCount = 0\n    var primeFactorizationCount =\
    \ 0\n    var isPrime = true\n    var isPrimeCount = 0\n    var isPrimePrime =\
    \ true\n    var isPrimePrimeCount = 0\n    var isPrimePrimePrime = true\n    var\
    \ isPrimePrimePrimeCount = 0\n    var isPrimePrimePrimePrime = true\n    var isPrimePrimePrimePrimeCount\
    \ = 0\n    var isPrimePrimePrimePrimePrime = true\n    var isPrimePrimePrimePrimePrimeCount\
    \ = 0\n    var isPrimePrimePrimePrimePrimePrime = true\n    var isPrimePrimePrimePrimePrimePrimeCount\
    \ = 0\n    var isPrimePrimePrimePrimePrimePrimePrime = true\n    var isPrimePrimePrimePrimePrimePrimePrimeCount\
    \ = 0\n    var isPrimePrimePrimePrimePrimePrimePrimePrime = true\n    var isPrimePrimePrimePrimePrimePrimePrimePrimeCount\
    \ = 0\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrime = true\n    var\
    \ isPrimePrimePrimePrimePrimePrimePrimePrimePrimeCount = 0\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount\
    \ = 0\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount\
    \ = 0\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount\
    \ = 0\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true\n    var isPrimePrimePrimePrimePrimePrimePrimePrime", "    var factorization\
    \ = [Int]()\n    var factorizationCount = 1\n    var currentFactor = 1\n    var\
    \ currentFactorCount = 0\n    var currentFactorIndex = 0\n    var currentFactorValue\
    \ = 1\n    var currentFactorValueCount = 0\n    var currentFactorValueIndex =\
    \ 0\n    var currentFactorValue = 1\n    var currentFactorValueCount = 0\n   \
    \ var currentFactorValueIndex = 0\n    var currentFactorValue = 1\n    var currentFactorValueCount\
    \ = 0\n    var currentFactorValueIndex = 0\n    var currentFactorValue = 1\n \
    \   var currentFactorValueCount = 0\n    var currentFactorValueIndex = 0\n   \
    \ var currentFactorValue = 1\n    var currentFactorValueCount = 0\n    var currentFactorValueIndex\
    \ = 0\n    var currentFactorValue = 1\n    var currentFactorValueCount = 0\n \
    \   var currentFactorValueIndex = 0\n    var currentFactorValue = 1\n    var currentFactorValueCount\
    \ = 0\n    var currentFactorValueIndex = 0\n    var currentFactorValue = 1\n \
    \   var currentFactorValueCount = 0\n    var currentFactorValueIndex = 0\n   \
    \ var currentFactorValue = 1\n    var currentFactorValueCount = 0\n    var currentFactorValueIndex\
    \ = 0\n    var currentFactorValue = 1\n    var currentFactorValueCount = 0\n \
    \   var currentFactorValueIndex = 0\n    var currentFactorValue = 1\n    var currentFactorValueCount\
    \ = 0\n    var currentFactorValueIndex = 0\n    var currentFactorValue = 1\n \
    \   var currentFactorValueCount = 0\n    var currentFactorValueIndex = 0\n   \
    \ var currentFactorValue = 1\n    var currentFactorValueCount = 0\n    var currentFactorValueIndex\
    \ = 0\n    var currentFactorValue = 1\n    var currentFactorValueCount = 0\n \
    \   var currentFactorValueIndex = 0\n    var currentFactorValue = 1\n    var currentFactorValueCount\
    \ = 0\n    var currentFactorValueIndex = 0\n    var currentFactorValue = 1\n \
    \   var currentFactorValueCount = 0\n    var currentFactorValueIndex = 0\n   \
    \ var currentFactorValue = 1\n    var currentFactorValueCount = 0\n    var currentFactorValueIndex\
    \ = 0\n    var currentFactorValue = 1\n    var currentFactorValueCount = 0\n \
    \   var currentFactorValueIndex = 0\n    var currentFactorValue = 1\n    var currentFactorValueCount\
    \ = 0\n    var currentFactorValueIndex = 0\n    var currentFactorValue = 1\n \
    \   var currentFactorValueCount = 0\n    var currentFactorValueIndex = 0\n   \
    \ var currentFactorValue = 1\n    var currentFactorValueCount = 0\n    var currentFactorValueIndex\
    \ = 0\n    var currentFactorValue = 1\n    var currentFactorValueCount = 0\n \
    \   var currentFactorValueIndex = 0\n    var currentFactorValue = 1\n    var currentFactorValueCount\
    \ = 0\n    var currentFactorValueIndex = 0\n    var currentFactorValue = 1\n \
    \   var currentFactorValueCount = 0\n    var currentFactorValueIndex = 0\n   \
    \ var ", "    var factors = [Int]()\n    var i = 2\n    var j = 1\n    var k =\
    \ 0\n    var m = 1\n    var n = n\n    var p = 2\n    var q = 1\n    var r = 1\n\
    \    var s = 2\n    var t = 1\n    var u = 1\n    var v = 1\n    var w = 1\n \
    \   var x = 1\n    var y = 1\n    var z = 1\n    var a = 1\n    var b = 1\n  \
    \  var c = 1\n    var d = 1\n    var e = 1\n    var f = 1\n    var g = 1\n   \
    \ var h = 1\n    var i = 2\n    var j = 1\n    var k = 0\n    var m = 1\n    var\
    \ n = n\n    var p = 2\n    var q = 1\n    var r = 1\n    var s = 2\n    var t\
    \ = 1\n    var u = 1\n    var v = 1\n    var w = 1\n    var x = 1\n    var y =\
    \ 1\n    var z = 1\n    var a = 1\n    var b = 1\n    var c = 1\n    var d = 1\n\
    \    var e = 1\n    var f = 1\n    var g = 1\n    var h = 1\n    var i = 2\n \
    \   var j = 1\n    var k = 0\n    var m = 1\n    var n = n\n    var p = 2\n  \
    \  var q = 1\n    var r = 1\n    var s = 2\n    var t = 1\n    var u = 1\n   \
    \ var v = 1\n    var w = 1\n    var x = 1\n    var y = 1\n    var z = 1\n    var\
    \ a = 1\n    var b = 1\n    var c = 1\n    var d = 1\n    var e = 1\n    var f\
    \ = 1\n    var g = 1\n    var h = 1\n    var i = 2\n    var j = 1\n    var k =\
    \ 0\n    var m = 1\n    var n = n\n    var p = 2\n    var q = 1\n    var r = 1\n\
    \    var s = 2\n    var t = 1\n    var u = 1\n    var v = 1\n    var w = 1\n \
    \   var x = 1\n    var y = 1\n    var z = 1\n    var a = 1\n    var b = 1\n  \
    \  var c = 1\n    var d = 1\n    var e = 1\n    var f = 1\n    var g = 1\n   \
    \ var h = 1\n    var i = 2\n    var j = 1\n    var k = 0\n    var m = 1\n    var\
    \ n = n\n    var p = 2\n    var q = 1\n    var r = 1\n    var s = 2\n    var t\
    \ = 1\n    var u = 1\n    var v = 1\n    var w = 1\n    var x = 1\n    var y =\
    \ 1\n    var z = 1\n    var a = 1\n    var b = 1\n    var c = 1\n    var d = 1\n\
    \    var e = 1\n    var f = 1\n    var g = 1\n    var h = 1\n    var i = 2\n \
    \   var j = 1\n    var k = 0\n    var m = 1\n    var n = n\n    var p = 2\n  \
    \  var ", "    var factors: [Int] = []\n    var primeFactorization: [Int] = []\n\
    \    var isPrime: [Bool] = []\n    var isPrimeCount: Int = 0\n    var isPrimePrimeCount:\
    \ Int = 0\n    var isPrimePrime: Bool = false\n    var isPrimePrime2: Bool = false\n\
    \    var isPrimePrime3: Bool = false\n    var isPrimePrime4: Bool = false\n  \
    \  var isPrimePrime5: Bool = false\n    var isPrimePrime6: Bool = false\n    var\
    \ isPrimePrime7: Bool = false\n    var isPrimePrime8: Bool = false\n    var isPrimePrime9:\
    \ Bool = false\n    var isPrimePrime10: Bool = false\n    var isPrimePrime11:\
    \ Bool = false\n    var isPrimePrime12: Bool = false\n    var isPrimePrime13:\
    \ Bool = false\n    var isPrimePrime14: Bool = false\n    var isPrimePrime15:\
    \ Bool = false\n    var isPrimePrime16: Bool = false\n    var isPrimePrime17:\
    \ Bool = false\n    var isPrimePrime18: Bool = false\n    var isPrimePrime19:\
    \ Bool = false\n    var isPrimePrime20: Bool = false\n    var isPrimePrime21:\
    \ Bool = false\n    var isPrimePrime22: Bool = false\n    var isPrimePrime23:\
    \ Bool = false\n    var isPrimePrime24: Bool = false\n    var isPrimePrime25:\
    \ Bool = false\n    var isPrimePrime26: Bool = false\n    var isPrimePrime27:\
    \ Bool = false\n    var isPrimePrime28: Bool = false\n    var isPrimePrime29:\
    \ Bool = false\n    var isPrimePrime30: Bool = false\n    var isPrimePrime31:\
    \ Bool = false\n    var isPrimePrime32: Bool = false\n    var isPrimePrime33:\
    \ Bool = false\n    var isPrimePrime34: Bool = false\n    var isPrimePrime35:\
    \ Bool = false\n    var isPrimePrime36: Bool = false\n    var isPrimePrime37:\
    \ Bool = false\n    var isPrimePrime38: Bool = false\n    var isPrimePrime39:\
    \ Bool = false\n    var isPrimePrime40: Bool = false\n    var isPrimePrime41:\
    \ Bool = false\n    var isPrimePrime42: Bool = false\n    var isPrimePrime43:\
    \ Bool = false\n    var is", "    var factors = [Int]()\n    var factorization\
    \ = [Int]()\n    var i = 2\n    var j = 1\n    var k = 0\n    var temp = 0\n \
    \   var factorizationCount = 0\n    var isPrime = true\n    var isPrime2 = true\n\
    \    var isPrime3 = true\n    var isPrime4 = true\n    var isPrime5 = true\n \
    \   var isPrime6 = true\n    var isPrime7 = true\n    var isPrime8 = true\n  \
    \  var isPrime9 = true\n    var isPrime10 = true\n    var isPrime11 = true\n \
    \   var isPrime12 = true\n    var isPrime13 = true\n    var isPrime14 = true\n\
    \    var isPrime15 = true\n    var isPrime16 = true\n    var isPrime17 = true\n\
    \    var isPrime18 = true\n    var isPrime19 = true\n    var isPrime20 = true\n\
    \    var isPrime21 = true\n    var isPrime22 = true\n    var isPrime23 = true\n\
    \    var isPrime24 = true\n    var isPrime25 = true\n    var isPrime26 = true\n\
    \    var isPrime27 = true\n    var isPrime28 = true\n    var isPrime29 = true\n\
    \    var isPrime30 = true\n    var isPrime31 = true\n    var isPrime32 = true\n\
    \    var isPrime33 = true\n    var isPrime34 = true\n    var isPrime35 = true\n\
    \    var isPrime36 = true\n    var isPrime37 = true\n    var isPrime38 = true\n\
    \    var isPrime39 = true\n    var isPrime40 = true\n    var isPrime41 = true\n\
    \    var isPrime42 = true\n    var isPrime43 = true\n    var isPrime44 = true\n\
    \    var isPrime45 = true\n    var isPrime46 = true\n    var isPrime47 = true\n\
    \    var isPrime48 = true\n    var isPrime49 = true\n    var isPrime50 = true\n\
    \    var isPrime51 = true\n    var isPrime52 = true\n    var isPrime53 = true\n\
    \    var isPrime54 = true\n    var isPrime55 = true\n    var isPrime56 = true\n\
    \    var isPrime57 = true\n    var isPrime58 = true\n    var isPrime59 = true\n\
    \    var isPrime60 = true\n    var isPrime61 = true\n    var isPrime62 = true\n\
    \    var isPrime63 = true\n    var isPrime64 = true\n    var isPrime65 = true\n\
    \    var isPrime66 = true\n    var ", "    if n < 2 {\n        return []\n   \
    \ }\n    var factors = [Int]()\n    var factorization = [Int]()\n    var i = 2\n\
    \    var j = 1\n    var k = n\n    while i <= k {\n        while k % i == 0 {\n\
    \            factors.append(i)\n            factors.append(j)\n            factors.append(k)\n\
    \            factors.append(k)\n            factors.append(k)\n            factors.append(k)\n\
    \            factors.append(k)\n            factors.append(k)\n            factors.append(k)\n\
    \            factors.append(k)\n            factors.append(k)\n            factors.append(k)\n\
    \            factors.append(k)\n            factors.append(k)\n            factors.append(k)\n\
    \            factors.append(k)\n            factors.append(k)\n            factors.append(k)\n\
    \            factors.append(k)\n            factors.append(k)\n            factors.append(k)\n\
    \            factors.append(k)\n            factors.append(k)\n            factors.append(k)\n\
    \            factors.append(k)\n            factors.append(k)\n            factors.append(k)\n\
    \            factors.append(k)\n            factors.append(k)\n            factors.append(k)\n\
    \            factors.append(k)\n            factors.append(k)\n            factors.append(k)\n\
    \            factors.append(k)\n            factors.append(k)\n            factors.append(k)\n\
    \            factors.append(k)\n            factors.append(k)\n            factors.append(k)\n\
    \            factors.append(k)\n            factors.append(k)\n            factors.append(k)\n\
    \            factors.append(k)\n            factors.append(k)\n            factors.append(k)\n\
    \            factors.append(k)\n            factors.append(k)\n            factors.append(k)\n\
    \            factors.append(k)\n            factors.append(k)\n            factors.append(k)\n\
    \            factors.append(k)\n            factors.append(k)\n            factors.append(k)\n\
    \            factors.append(k)\n            factors.append(k)\n            factors.append(k)\n\
    \            factors.append(k)\n            factors.append(k)\n            factors.append(k)\n\
    \            factors.append(k)\n            factors.append(k)\n            factors.append(k)\n\
    \            factors.append(k)\n            factors.append(k)\n            factors.append(k)\n\
    \            factors.append(k)\n            factors.append(k)\n            factors.append(k)\n\
    \            factors.append(k)\n            factors.append(k)\n            factors.append(k)\n\
    \            factors.append(k)\n            factors.append(k)\n            factors.append(k)\n\
    \            factors.append(k)\n            factors.append(k)\n            factors.append(k)\n\
    \            factors.append(k)\n            factors.append(k)\n            factors.append(k)\n\
    \            factors.append(k)\n            factors.append(k)\n            factors.append(k)\n\
    \            factors.append(k)\n            factors.append(k)\n            factors.append(k)\n\
    \            factors.append(k)\n            factors.append(k)\n            factors.append(k)\n\
    \            factors.append(k)\n            factors.append(k)\n            factors.append(k)\n\
    \            ", "    var factorization = [Int]()\n    var i = 2\n    while i *\
    \ i <= n {\n        if n % i == 0 {\n            factorization[factorization.count]\
    \ = i\n            n /= i\n        } else {\n            i += 1\n        }\n \
    \   }\n    if n > 1 {\n        factorization[factorization.count] = n\n    }\n\
    \    return factorization", "    var factors = [Int]()\n    var i = 2\n    while\
    \ i * i <= n {\n        if n % i == 0 {\n            factors.append(i)\n     \
    \       n /= i\n        } else {\n            i += 1\n        }\n    }\n    if\
    \ n > 1 {\n        factors.append(n)\n    }\n    return factors", "    var factorization:\
    \ [Int] = []\n    var primeFactorization: [Int] = []\n    var primeFactorizationCount\
    \ = 0\n    var factorizationCount = 0\n    var primeFactorizationIndex = 0\n \
    \   var factorizationIndex = 0\n    var isPrime = true\n    var isPrimeCount =\
    \ 0\n    var isPrimeIndex = 0\n    var isPrimeFactorization = false\n    var isPrimeFactorizationCount\
    \ = 0\n    var isPrimeFactorizationIndex = 0\n    var isPrimeFactorizationPrime\
    \ = false\n    var isPrimeFactorizationPrimeCount = 0\n    var isPrimeFactorizationPrimeIndex\
    \ = 0\n    var isPrimeFactorizationPrimeFactorization = false\n    var isPrimeFactorizationPrimeFactorizationCount\
    \ = 0\n    var isPrimeFactorizationPrimeFactorizationIndex = 0\n    var isPrimeFactorizationPrimeFactorizationPrime\
    \ = false\n    var isPrimeFactorizationPrimeFactorizationPrimeCount = 0\n    var\
    \ isPrimeFactorizationPrimeFactorizationPrimeIndex = 0\n    var isPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = false\n    var isPrimeFactorizationPrimeFactorizationPrimeFactorizationCount\
    \ = 0\n    var isPrimeFactorizationPrimeFactorizationPrimeFactorizationIndex =\
    \ 0\n    var isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime = false\n\
    \    var isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeCount =\
    \ 0\n    var isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeIndex\
    \ = 0\n    var isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = false\n    var isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationCount\
    \ = 0\n    var isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationIndex\
    \ = 0\n    var isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = false\n    var isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationCount\
    \ = 0\n    var isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeIndex\
    \ = 0\n    var isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = false\n    var isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationCount\
    \ = 0\n    var isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationIndex\
    \ = 0\n    var isPri", "    if n < 2 {\n        return []\n    }\n    var factorization:\
    \ [Int] = []\n    var factor = 2\n    var remainder = n\n    while remainder >\
    \ 1 {\n        if remainder % factor == 0 {\n            factorization[factor]\
    \ = factor\n            remainder /= factor\n        } else {\n            factor\
    \ += 1\n        }\n    }\n    factorization[factor] = remainder\n    return factorization",
  "    var factors = [Int]()\n    var factorization = factorizationOfNumber(n)\n \
    \   var primeFactorization = factorizationOfNumber(n)\n    var primeFactorizationIndex\
    \ = 0\n    var factorizationIndex = 0\n    var factorizationIndex2 = 0\n    var\
    \ factorizationIndex3 = 0\n    var factorizationIndex4 = 0\n    var factorizationIndex5\
    \ = 0\n    var factorizationIndex6 = 0\n    var factorizationIndex7 = 0\n    var\
    \ factorizationIndex8 = 0\n    var factorizationIndex9 = 0\n    var factorizationIndex10\
    \ = 0\n    var factorizationIndex11 = 0\n    var factorizationIndex12 = 0\n  \
    \  var factorizationIndex13 = 0\n    var factorizationIndex14 = 0\n    var factorizationIndex15\
    \ = 0\n    var factorizationIndex16 = 0\n    var factorizationIndex17 = 0\n  \
    \  var factorizationIndex18 = 0\n    var factorizationIndex19 = 0\n    var factorizationIndex20\
    \ = 0\n    var factorizationIndex21 = 0\n    var factorizationIndex22 = 0\n  \
    \  var factorizationIndex23 = 0\n    var factorizationIndex24 = 0\n    var factorizationIndex25\
    \ = 0\n    var factorizationIndex26 = 0\n    var factorizationIndex27 = 0\n  \
    \  var factorizationIndex28 = 0\n    var factorizationIndex29 = 0\n    var factorizationIndex30\
    \ = 0\n    var factorizationIndex31 = 0\n    var factorizationIndex32 = 0\n  \
    \  var factorizationIndex33 = 0\n    var factorizationIndex34 = 0\n    var factorizationIndex35\
    \ = 0\n    var factorizationIndex36 = 0\n    var factorizationIndex37 = 0\n  \
    \  var factorizationIndex38 = 0\n    var factorizationIndex39 = 0\n    var factorizationIndex40\
    \ = 0\n    var factorizationIndex41 = 0\n    var factorizationIndex42 = 0\n  \
    \  var factorizationIndex43 = 0\n    var factorizationIndex44 = 0\n    var factorizationIndex45\
    \ = 0\n    var factorizationIndex46 = 0\n    var factorizationIndex47 = 0\n  \
    \  var factorizationIndex48 = 0\n    var factorizationIndex49 = 0\n    var factorizationIndex50\
    \ = 0\n    var factorizationIndex51 = 0\n    var factorizationIndex52 = 0\n  \
    \  var factorizationIndex53 = 0\n    var factorizationIndex54 = 0\n    var factorizationIndex55\
    \ = 0\n    var factorizationIndex56 = 0\n    var factorizationIndex57 = 0\n  \
    \  var factorizationIndex58 = 0\n    var factorizationIndex59 = 0\n    var factorizationIndex60\
    \ = 0\n    var factorizationIndex61 = 0\n    var factorizationIndex62 = 0\n  \
    \  var factorizationIndex63 = 0\n    var factorizationIndex64 = 0\n    var factorizationIndex65\
    \ = 0\n    var factorizationIndex66 = 0\n    var factorizationIndex67 = 0\n  \
    \  var factorizationIndex68 = 0\n    var factor", "    var factorization = [Int]()\n\
    \    var i = 2\n    while i * i <= n {\n        if n % i == 0 {\n            factorization[factorization.count]\
    \ = i\n            n /= i\n        } else {\n            i += 1\n        }\n \
    \   }\n    if n > 1 {\n        factorization[factorization.count] = n\n    }\n\
    \    return factorization", "    var factorization = [Int]()\n    var factorizationCount\
    \ = 0\n    var factorizationIndex = 0\n    var isPrime = true\n    var isDivisibleBy2\
    \ = false\n    var isDivisibleBy3 = false\n    var isDivisibleBy5 = false\n  \
    \  var isDivisibleBy7 = false\n    var isDivisibleBy11 = false\n    var isDivisibleBy13\
    \ = false\n    var isDivisibleBy17 = false\n    var isDivisibleBy19 = false\n\
    \    var isDivisibleBy23 = false\n    var isDivisibleBy29 = false\n    var isDivisibleBy31\
    \ = false\n    var isDivisibleBy37 = false\n    var isDivisibleBy43 = false\n\
    \    var isDivisibleBy47 = false\n    var isDivisibleBy53 = false\n    var isDivisibleBy59\
    \ = false\n    var isDivisibleBy61 = false\n    var isDivisibleBy67 = false\n\
    \    var isDivisibleBy73 = false\n    var isDivisibleBy79 = false\n    var isDivisibleBy81\
    \ = false\n    var isDivisibleBy87 = false\n    var isDivisibleBy93 = false\n\
    \    var isDivisibleBy101 = false\n    var isDivisibleBy107 = false\n    var isDivisibleBy113\
    \ = false\n    var isDivisibleBy119 = false\n    var isDivisibleBy121 = false\n\
    \    var isDivisibleBy127 = false\n    var isDivisibleBy131 = false\n    var isDivisibleBy137\
    \ = false\n    var isDivisibleBy143 = false\n    var isDivisibleBy145 = false\n\
    \    var isDivisibleBy151 = false\n    var isDivisibleBy157 = false\n    var isDivisibleBy163\
    \ = false\n    var isDivisibleBy167 = false\n    var isDivisibleBy173 = false\n\
    \    var isDivisibleBy175 = false\n    var isDivisibleBy181 = false\n    var isDivisibleBy187\
    \ = false\n    var isDivisibleBy193 = false\n    var isDivisibleBy195 = false\n\
    \    var isDivisibleBy197 = false\n    var isDivisibleBy203 = false\n    var isDivisibleBy205\
    \ = false\n    var isDivisibleBy211 = false\n    var isDivisibleBy217 = false\n\
    \    var isDivisibleBy223 = false\n    var isDivisibleBy227 = false\n    var isDivisibleBy233\
    \ = false\n    var isDivisibleBy237 = false\n    var isDivisibleBy243 = false\n\
    \    var isDivisibleBy245 = false\n    var isDivisibleBy251 = false\n    var isDivisibleBy257\
    \ = false\n    var isDivisibleBy263 = false", "    var factorization = [Int]()\n\
    \    var primeFactorization = [Int]()\n    var primeFactorizationIndex = 0\n \
    \   var primeFactorizationCount = 0\n    var isPrime = true\n    var isPrimeIndex\
    \ = 0\n    var isPrimeCount = 0\n    var isPrimeFactorization = true\n    var\
    \ isPrimeFactorizationIndex = 0\n    var isPrimeFactorizationCount = 0\n    var\
    \ isPrimePrime = true\n    var isPrimePrimeIndex = 0\n    var isPrimePrimeCount\
    \ = 0\n    var isPrimePrimeFactorization = true\n    var isPrimePrimeFactorizationIndex\
    \ = 0\n    var isPrimePrimeFactorizationCount = 0\n    var isPrimePrimePrime =\
    \ true\n    var isPrimePrimePrimeIndex = 0\n    var isPrimePrimePrimeCount = 0\n\
    \    var isPrimePrimePrimeFactorization = true\n    var isPrimePrimePrimeFactorizationIndex\
    \ = 0\n    var isPrimePrimePrimeFactorizationCount = 0\n    var isPrimePrimePrimePrime\
    \ = true\n    var isPrimePrimePrimePrimeIndex = 0\n    var isPrimePrimePrimePrimeCount\
    \ = 0\n    var isPrimePrimePrimePrimeFactorization = true\n    var isPrimePrimePrimePrimeFactorizationIndex\
    \ = 0\n    var isPrimePrimePrimePrimeFactorizationCount = 0\n    var isPrimePrimePrimePrimePrime\
    \ = true\n    var isPrimePrimePrimePrimePrimeIndex = 0\n    var isPrimePrimePrimePrimePrimeCount\
    \ = 0\n    var isPrimePrimePrimePrimePrimeFactorization = true\n    var isPrimePrimePrimePrimePrimeFactorizationIndex\
    \ = 0\n    var isPrimePrimePrimePrimePrimeFactorizationCount = 0\n    var isPrimePrimePrimePrimePrimePrime\
    \ = true\n    var isPrimePrimePrimePrimePrimePrimeIndex = 0\n    var isPrimePrimePrimePrimePrimePrimeCount\
    \ = 0\n    var isPrimePrimePrimePrimePrimePrimeFactorization = true\n    var isPrimePrimePrimePrimePrimePrimeFactorizationIndex\
    \ = 0\n    var isPrimePrimePrimePrimePrimePrimeFactorizationCount = 0\n    var\
    \ isPrimePrimePrimePrimePrimePrimePrime = true\n    var isPrimePrimePri", "  \
    \  var factors: [Int] = []\n    var i = 2\n    var factor: Int\n    while i <\
    \ n {\n        factor = 0\n        while i < n && n % i == 0 {\n            factor\
    \ += 1\n            i += 1\n        }\n        factors.append(factor)\n      \
    \  i += 1\n    }\n    return factors", "    var factors = [Int]()\n    var i =\
    \ 2\n    var factor = 1\n    while i <= n {\n        while n % i == 0 {\n    \
    \        n /= i\n            factors.append(factor)\n            factor = 1\n\
    \        }\n        i += 1\n    }\n    if n > 1 {\n        factors.append(factor)\n\
    \    }\n    return factors", "    var factors: [Int] = []\n    var i = 2\n   \
    \ while i * i <= n {\n        if n % i == 0 {\n            factors.append(i)\n\
    \            n /= i\n        } else {\n            i += 1\n        }\n    }\n\
    \    if n != 1 {\n        factors.append(n)\n    }\n    return factors", "   \
    \ var factorization = [Int]()\n    var primeFactorization = [Int]()\n    var primeFactorizationIndex\
    \ = 0\n    var factorizationIndex = 0\n    var isPrime = true\n    var isPrimeIndex\
    \ = 0\n    var isPrimeFactorization = false\n    var isPrimeFactorizationIndex\
    \ = 0\n    var isPrimePrimeFactorization = false\n    var isPrimePrimeFactorizationIndex\
    \ = 0\n    var isPrimePrimeFactorizationPrimeFactorization = false\n    var isPrimePrimeFactorizationPrimeFactorizationIndex\
    \ = 0\n    var isPrimePrimeFactorizationPrimeFactorizationPrimeFactorization =\
    \ false\n    var isPrimePrimeFactorizationPrimeFactorizationPrimeFactorizationIndex\
    \ = 0\n    var isPrimePrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = false\n    var isPrimePrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationIndex\
    \ = 0\n    var isPrimePrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = false\n    var isPrimePrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationIndex\
    \ = 0\n    var isPrimePrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = false\n    var isPrimePrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = false\n    var isPrimePrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = false\n    var isPrimePrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = false\n    var isPrimePrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = false\n    var isPrimePrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = false\n    var isPrimePrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = false\n    var isPrimePrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPri",
  "    var factorization: [Int] = []\n    var primeFactorization: [Int] = []\n   \
    \ var isPrime: Bool = false\n    var isPrimeFactorization: Bool = false\n    var\
    \ isPrimePrimeFactorization: Bool = false\n    var isPrimePrimePrimeFactorization:\
    \ Bool = false\n    var isPrimePrimePrimePrimeFactorization: Bool = false\n  \
    \  var isPrimePrimePrimePrimePrimeFactorization: Bool = false\n    var isPrimePrimePrimePrimePrimePrimeFactorization:\
    \ Bool = false\n    var isPrimePrimePrimePrimePrimePrimePrimeFactorization: Bool\
    \ = false\n    var isPrimePrimePrimePrimePrimePrimePrimeFactorization: Bool =\
    \ false\n    var isPrimePrimePrimePrimePrimePrimePrimePrimeFactorization: Bool\
    \ = false\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimeFactorization:\
    \ Bool = false\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeFactorization:\
    \ Bool = false\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeFactorization:\
    \ Bool = false\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeFactorization:\
    \ Bool = false\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeFactorization:\
    \ Bool = false\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeFactorization:\
    \ Bool = false\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeFactorization:\
    \ Bool = false\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeFactorization:\
    \ Bool = false\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeFactorization:\
    \ Bool = false\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeFactorization:\
    \ Bool = false\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePri",
  "    var factorization = [Int]()\n    var i = 2\n    while i * i <= n {\n      \
    \  if n % i == 0 {\n            factorization[factorization.count] = i\n     \
    \       n /= i\n        } else {\n            i += 1\n        }\n    }\n    if\
    \ n != 1 {\n        factorization[factorization.count] = n\n    }\n    return\
    \ factorization", "    var factorization: [Int] = []\n    var factorizationCount\
    \ = 0\n    var factorizationIndex = 0\n    var isPrime = true\n    var isPrimeIndex\
    \ = 0\n    var isPrimeCount = 0\n    var isPrimeIndex2 = 0\n    var isPrimeCount2\
    \ = 0\n    var isPrimeIndex3 = 0\n    var isPrimeCount3 = 0\n    var isPrimeIndex4\
    \ = 0\n    var isPrimeCount4 = 0\n    var isPrimeIndex5 = 0\n    var isPrimeCount5\
    \ = 0\n    var isPrimeIndex6 = 0\n    var isPrimeCount6 = 0\n    var isPrimeIndex7\
    \ = 0\n    var isPrimeCount7 = 0\n    var isPrimeIndex8 = 0\n    var isPrimeCount8\
    \ = 0\n    var isPrimeIndex9 = 0\n    var isPrimeCount9 = 0\n    var isPrimeIndex10\
    \ = 0\n    var isPrimeCount10 = 0\n    var isPrimeIndex11 = 0\n    var isPrimeCount11\
    \ = 0\n    var isPrimeIndex12 = 0\n    var isPrimeCount12 = 0\n    var isPrimeIndex13\
    \ = 0\n    var isPrimeCount13 = 0\n    var isPrimeIndex14 = 0\n    var isPrimeCount14\
    \ = 0\n    var isPrimeIndex15 = 0\n    var isPrimeCount15 = 0\n    var isPrimeIndex16\
    \ = 0\n    var isPrimeCount16 = 0\n    var isPrimeIndex17 = 0\n    var isPrimeCount17\
    \ = 0\n    var isPrimeIndex18 = 0\n    var isPrimeCount18 = 0\n    var isPrimeIndex19\
    \ = 0\n    var isPrimeCount19 = 0\n    var isPrimeIndex20 = 0\n    var isPrimeCount20\
    \ = 0\n    var isPrimeIndex21 = 0\n    var isPrimeCount21 = 0\n    var isPrimeIndex22\
    \ = 0\n    var isPrimeCount22 = 0\n    var isPrimeIndex23 = 0\n    var isPrimeCount23\
    \ = 0\n    var isPrimeIndex24 = 0\n    var isPrimeCount24 = 0\n    var isPrimeIndex25\
    \ = 0\n    var isPrimeCount25 = 0\n    var isPrimeIndex26 = 0\n    var isPrimeCount26\
    \ = 0\n    var isPrimeIndex27 = 0\n    var isPrimeCount27 = 0\n    var isPrimeIndex28\
    \ = 0\n    var isPrimeCount28 = 0\n    var isPrimeIndex29 = 0\n    var isPrimeCount29\
    \ = 0\n    var isPrimeIndex30 = 0\n    var isPrimeCount30 = 0\n    var isPrimeIndex31\
    \ = 0\n    var ", "    var factorization: [Int] = []\n    var factorizationCount\
    \ = 0\n    var factorizationIndex = 0\n    var factorizationIndexMax = Int(ceil(sqrt(Double(n))))\n\
    \    var factorizationIndexMax2 = factorizationIndexMax * factorizationIndexMax\n\
    \    var factorizationIndexMax3 = factorizationIndexMax2 * factorizationIndexMax\n\
    \    var factorizationIndexMax4 = factorizationIndexMax3 * factorizationIndexMax\n\
    \    var factorizationIndexMax5 = factorizationIndexMax4 * factorizationIndexMax\n\
    \    var factorizationIndexMax6 = factorizationIndexMax5 * factorizationIndexMax\n\
    \    var factorizationIndexMax7 = factorizationIndexMax6 * factorizationIndexMax\n\
    \    var factorizationIndexMax8 = factorizationIndexMax7 * factorizationIndexMax\n\
    \    var factorizationIndexMax9 = factorizationIndexMax8 * factorizationIndexMax\n\
    \    var factorizationIndexMax10 = factorizationIndexMax9 * factorizationIndexMax\n\
    \    var factorizationIndexMax11 = factorizationIndexMax10 * factorizationIndexMax\n\
    \    var factorizationIndexMax12 = factorizationIndexMax11 * factorizationIndexMax\n\
    \    var factorizationIndexMax13 = factorizationIndexMax12 * factorizationIndexMax\n\
    \    var factorizationIndexMax14 = factorizationIndexMax13 * factorizationIndexMax\n\
    \    var factorizationIndexMax15 = factorizationIndexMax14 * factorizationIndexMax\n\
    \    var factorizationIndexMax16 = factorizationIndexMax15 * factorizationIndexMax\n\
    \    var factorizationIndexMax17 = factorizationIndexMax16 * factorizationIndexMax\n\
    \    var factorizationIndexMax18 = factorizationIndexMax17 * factorizationIndexMax\n\
    \    var factorizationIndexMax19 = factorizationIndexMax18 * factorizationIndexMax\n\
    \    var factorizationIndexMax20 = factorizationIndexMax19 * factorizationIndexMax\n\
    \    var factorizationIndexMax21 = factorizationIndexMax20 * factorizationIndexMax\n\
    \    var factorizationIndexMax22 = factorizationIndexMax21 * factorizationIndexMax\n\
    \    var factorizationIndexMax23 = factorizationIndexMax22 * factorizationIndexMax\n\
    \    var factorizationIndexMax24 = factorizationIndexMax23 * factorizationIndexMax\n\
    \    var factorizationIndexMax25 = factorizationIndexMax24 * factorizationIndexMax\n\
    \    var factorizationIndexMax26 = factorizationIndexMax25 * factorizationIndexMax\n\
    \    var factorizationIndexMax27 = factorizationIndexMax26 * factorizationIndexMax\n\
    \    var factorizationIndexMax28 = factorizationIndexMax27 * factorizationIndexMax\n\
    \    var factorizationIndexMax29 = factorizationIndexMax28", "    var factorization:\
    \ [Int] = []\n    var i = 2\n    while i <= n {\n        if n % i == 0 {\n   \
    \         factorization = factorization + [i]\n            n /= i\n        } else\
    \ {\n            i += 1\n        }\n    }\n    return factorization", "    var\
    \ factors = [Int]()\n    var factorization = factorizationOfNumber(n)\n    for\
    \ factor in factorization {\n        factors.append(factor)\n    }\n    return\
    \ factors", "    var factors = [Int]()\n    var factorization = factorizationOfNumber(n)\n\
    \    for factor in factorization {\n        factors.append(factor)\n    }\n  \
    \  return factors", "    var factorization: [Int] = []\n    var factor = 2\n \
    \   var factorizationCount = 0\n    var isPrime = true\n    var isPrimeCount =\
    \ 0\n    var isPrimeFactorization = false\n    var isPrimeFactorizationCount =\
    \ 0\n    var isPrimeFactorizationPrime = false\n    var isPrimeFactorizationPrimeCount\
    \ = 0\n    var isPrimeFactorizationPrimeFactor = false\n    var isPrimeFactorizationPrimeFactorCount\
    \ = 0\n    var isPrimeFactorizationPrimeFactorization = false\n    var isPrimeFactorizationPrimeFactorizationCount\
    \ = 0\n    var isPrimeFactorizationPrimeFactorizationPrime = false\n    var isPrimeFactorizationPrimeFactorizationPrimeCount\
    \ = 0\n    var isPrimeFactorizationPrimeFactorizationPrimeFactor = false\n   \
    \ var isPrimeFactorizationPrimeFactorizationPrimeFactorCount = 0\n    var isPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = false\n    var isPrimeFactorizationPrimeFactorizationPrimeFactorizationCount\
    \ = 0\n    var isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime =\
    \ false\n    var isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeCount\
    \ = 0\n    var isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactor\
    \ = false\n    var isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorCount\
    \ = 0\n    var isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = false\n    var isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationCount\
    \ = 0\n    var isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = false\n    var isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationCount\
    \ = 0\n    var isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = false\n    var isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationCount\
    \ = 0\n    var isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = false\n    var isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationCount\
    \ = 0\n    var isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = false\n    var isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationCount\
    \ = 0\n    var isPrimeFactorizationPrimeFactorizationPrimeFactorization", "  \
    \  var factors = [Int]()\n    var i = 2\n    var factor = 1\n    while i < n {\n\
    \        while n % i == 0 {\n            factors.append(factor)\n            n\
    \ /= i\n        }\n        i += 1\n        factor = 1\n    }\n    if n > 1 {\n\
    \        factors.append(n)\n    }\n    return factors", "    if n < 2 {\n    \
    \    return []\n    }\n    var factors = [Int]()\n    var i = 2\n    var j = 1\n\
    \    var factorization = [Int]()\n    while i < n {\n        while j < n && n\
    \ % i == 0 {\n            factors.append(i)\n            factors.append(j)\n \
    \           factors.append(n / i)\n            factors.append(n / j)\n       \
    \     factors.append(n / i / j)\n            factors.append(n / i / j / i)\n \
    \           factors.append(n / i / j / i / j)\n            factors.append(n /\
    \ i / j / i / j / i)\n            factors.append(n / i / j / i / j / i / j)\n\
    \            factors.append(n / i / j / i / j / i / j / i)\n            factors.append(n\
    \ / i / j / i / j / i / j / i / j)\n            factors.append(n / i / j / i /\
    \ j / i / j / i / j / i)\n            factors.append(n / i / j / i / j / i / j\
    \ / i / j / i / j)\n            factors.append(n / i / j / i / j / i / j / i /\
    \ j / i / j / i)\n            factors.append(n / i / j / i / j / i / j / i / j\
    \ / i / j / i / j)\n            factors.append(n / i / j / i / j / i / j / i /\
    \ j / i / j / i / j / i)\n            factors.append(n / i / j / i / j / i / j\
    \ / i / j / i / j / i / j / j)\n            factors.append(n / i / j / i / j /\
    \ i / j / i / j / i / j / i / j / j / i)\n            factors.append(n / i / j\
    \ / i / j / i / j / i / j / i / j / i / j / j / j)\n            factors.append(n\
    \ / i / j / i / j / i / j / i / j / i / j / i / j / j / j / i)\n            factors.append(n\
    \ / i / j / i / j / i / j / i / j / i / j / i / j / j / j / j)\n            factors.append(n\
    \ / i / j / i / j / i / j / i / j / i / j / i / j / j / j / j / i)\n", "    var\
    \ factorization = [Int]()\n    var factorizationCount = [Int]()\n    var primeFactorization\
    \ = [Int]()\n    var primeFactorizationCount = [Int]()\n    var isPrime = [Bool]()\n\
    \    var isPrimeCount = [Int]()\n    var isPrimePrime = [Bool]()\n    var isPrimePrimeCount\
    \ = [Int]()\n    var isPrimePrimePrime = [Bool]()\n    var isPrimePrimePrimeCount\
    \ = [Int]()\n    var isPrimePrimePrimePrime = [Bool]()\n    var isPrimePrimePrimePrimeCount\
    \ = [Int]()\n    var isPrimePrimePrimePrimePrime = [Bool]()\n    var isPrimePrimePrimePrimePrimeCount\
    \ = [Int]()\n    var isPrimePrimePrimePrimePrimePrime = [Bool]()\n    var isPrimePrimePrimePrimePrimePrimeCount\
    \ = [Int]()\n    var isPrimePrimePrimePrimePrimePrimePrime = [Bool]()\n    var\
    \ isPrimePrimePrimePrimePrimePrimePrimeCount = [Int]()\n    var isPrimePrimePrimePrimePrimePrimePrime\
    \ = [Bool]()\n    var isPrimePrimePrimePrimePrimePrimePrimeCount = [Int]()\n \
    \   var isPrimePrimePrimePrimePrimePrimePrimePrime = [Bool]()\n    var isPrimePrimePrimePrimePrimePrimePrimePrimeCount\
    \ = [Int]()\n    var isPrimePrimePrimePrimePrimePrimePrimePrime = [Bool]()\n \
    \   var isPrimePrimePrimePrimePrimePrimePrimePrimeCount = [Int]()\n    var isPrimePrimePrimePrimePrimePrimePrimePrime\
    \ = [Bool]()\n    var isPrimePrimePrimePrimePrimePrimePrimePrimeCount = [Int]()\n\
    \    var isPrimePrimePrimePrimePrimePrimePrimePrimePrime = [Bool]()\n    var isPrimePrimePrimePrimePrimePrimePrimePrimeCount\
    \ = [Int]()\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrime = [Bool]()\n\
    \    var ", "    var factorization = [Int]()\n    var factorizationCount = [Int]()\n\
    \    var primeFactorization = [Int]()\n    var primeFactorizationCount = [Int]()\n\
    \    var isPrime = [Bool]()\n    var isPrimeCount = [Bool]()\n    var isPrimeFactorization\
    \ = [Bool]()\n    var isPrimeFactorizationCount = [Bool]()\n    var isPrimePrimeFactorization\
    \ = [Bool]()\n    var isPrimePrimeFactorizationCount = [Bool]()\n    var isPrimePrimePrimeFactorization\
    \ = [Bool]()\n    var isPrimePrimePrimeFactorizationCount = [Bool]()\n    var\
    \ isPrimePrimePrimePrimeFactorization = [Bool]()\n    var isPrimePrimePrimePrimeFactorizationCount\
    \ = [Bool]()\n    var isPrimePrimePrimePrimePrimeFactorization = [Bool]()\n  \
    \  var isPrimePrimePrimePrimePrimeFactorizationCount = [Bool]()\n    var isPrimePrimePrimePrimePrimePrimeFactorization\
    \ = [Bool]()\n    var isPrimePrimePrimePrimePrimePrimeFactorizationCount = [Bool]()\n\
    \    var isPrimePrimePrimePrimePrimePrimePrimeFactorization = [Bool]()\n    var\
    \ isPrimePrimePrimePrimePrimePrimePrimeFactorizationCount = [Bool]()\n    var\
    \ isPrimePrimePrimePrimePrimePrimePrimePrimeFactorization = [Bool]()\n    var\
    \ isPrimePrimePrimePrimePrimePrimePrimePrimeFactorizationCount = [Bool]()\n  \
    \  var isPrimePrimePrimePrimePrimePrimePrimePrimePrimeFactorization = [Bool]()\n\
    \    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimeFactorizationCount = [Bool]()\n\
    \    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeFactorization = [Bool]()\n\
    \    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeFactorizationCount\
    \ = [Bool]()\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeFactorization\
    \ = [Bool]()\n    var isPrimePrimePrimePrimePrimePrimePrimePrime", "    var factorization:\
    \ [Int] = []\n    var primeFactorization: [Int] = []\n    var factorizationCount\
    \ = 0\n    var primeFactorizationCount = 0\n    var factorizationPrimeCount =\
    \ 0\n    var primeFactorizationPrimeCount = 0\n    var isPrime = true\n    var\
    \ isPrimePrime = true\n    var isPrimePrimePrime = true\n    var isPrimePrimePrimePrime\
    \ = true\n    var isPrimePrimePrimePrimePrime = true\n    var isPrimePrimePrimePrimePrimePrime\
    \ = true\n    var isPrimePrimePrimePrimePrimePrimePrime = true\n    var isPrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrime = true\n   \
    \ var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = true\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true", "    var factorization: [Int] = []\n    var factorizationCount = 0\n\
    \    var currentFactorizationCount = 0\n    var currentFactorization: Int = 0\n\
    \    var currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n\
    \    var currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n\
    \    var currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n\
    \    var currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n\
    \    var currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n\
    \    var currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n\
    \    var currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n\
    \    var currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n\
    \    var currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n\
    \    var currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n\
    \    var currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n\
    \    var currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n\
    \    var currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n\
    \    var currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n\
    \    var currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n\
    \    var currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n\
    \    var currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n\
    \    var currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n\
    \    var currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n\
    \    var currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n\
    \    var currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n\
    \    var currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n\
    \    var currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n\
    \    var currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n\
    \    var currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n\
    \    var currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n\
    \    var currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n\
    \    var currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n\
    \    var currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n\
    \    var currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n\
    \    var currentFactorization", "    if n < 2 {\n        return []\n    }\n  \
    \  var factors = [Int]()\n    var i = 2\n    var p = 2\n    while i * p <= n {\n\
    \        if n % i == 0 {\n            factors.append(i)\n            n /= i\n\
    \        }\n        i += 1\n    }\n    if n > 1 {\n        factors.append(n)\n\
    \    }\n    return factors", "    var factors = [Int]()\n    var primes = factors\n\
    \    var primeFactorization = factors\n    var isPrime = true\n    var isPrimeFactorization\
    \ = true\n    var isPrimeFactorizationPrime = true\n    var isPrimeFactorizationPrimePrime\
    \ = true\n    var isPrimeFactorizationPrimePrimePrime = true\n    var isPrimeFactorizationPrimePrimePrimePrime\
    \ = true\n    var isPrimeFactorizationPrimePrimePrimePrimePrime = true\n    var\
    \ isPrimeFactorizationPrimePrimePrimePrimePrimePrime = true\n    var isPrimeFactorizationPrimePrimePrimePrimePrimePrimePrime\
    \ = true\n    var isPrimeFactorizationPrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true\n    var isPrimeFactorizationPrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true\n    var isPrimeFactorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true\n    var isPrimeFactorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true\n    var isPrimeFactorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true\n    var isPrimeFactorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true\n    var isPrimeFactorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true\n    var isPrimeFactorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true\n    var isPrimeFactorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true\n    var isPrimeFactorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true\n    var isPrimeFactorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true\n    var isPrimeFactorizationPrimePrimePrimePri", "    var factorization:\
    \ [Int] = []\n    var i = 2\n    var j = 1\n    var k = 0\n    while i * j <=\
    \ n {\n        if n % i == 0 {\n            factorization[k] += i\n          \
    \  n /= i\n            j += 1\n            k += 1\n        }\n        i += 1\n\
    \    }\n    if n > 1 {\n        factorization[k] += n\n    }\n    return factorization",
  "    var factorization: [Int] = []\n    var factorizationCount = 0\n    var factorizationIndex\
    \ = 0\n    var factorizationMax = Int(sqrt(Double(n)))\n    var factorizationMin\
    \ = factorizationMax\n    var factorizationMaxInt = Int(factorizationMax)\n  \
    \  var factorizationMinInt = Int(factorizationMin)\n    var factorizationMaxDouble\
    \ = Double(factorizationMax)\n    var factorizationMinDouble = Double(factorizationMin)\n\
    \    var factorizationMaxDoubleInt = Int(factorizationMaxDouble)\n    var factorizationMinDoubleInt\
    \ = Int(factorizationMinDouble)\n    var factorizationMaxDoubleDouble = Double(factorizationMaxDouble)\n\
    \    var factorizationMinDoubleDouble = Double(factorizationMinDouble)\n    var\
    \ factorizationMaxDoubleDoubleInt = Int(factorizationMaxDoubleDouble)\n    var\
    \ factorizationMinDoubleDoubleInt = Int(factorizationMinDoubleDouble)\n    var\
    \ factorizationMaxDoubleDoubleDouble = Double(factorizationMaxDoubleDouble)\n\
    \    var factorizationMinDoubleDoubleDouble = Double(factorizationMinDoubleDoubleDouble)\n\
    \    var factorizationMaxDoubleDoubleDoubleInt = Int(factorizationMaxDoubleDoubleDouble)\n\
    \    var factorizationMinDoubleDoubleDoubleInt = Int(factorizationMinDoubleDoubleDouble)\n\
    \    var factorizationMaxDoubleDoubleDoubleDouble = Double(factorizationMaxDoubleDoubleDouble)\n\
    \    var factorizationMinDoubleDoubleDoubleDouble = Double(factorizationMinDoubleDoubleDoubleDouble)\n\
    \    var factorizationMaxDoubleDoubleDoubleDoubleInt = Int(factorizationMaxDoubleDoubleDoubleDouble)\n\
    \    var factorizationMinDoubleDoubleDoubleDoubleInt = Int(factorizationMinDoubleDoubleDoubleDouble)\n\
    \    var factorizationMaxDoubleDoubleDoubleDoubleDouble = Double(factorizationMaxDoubleDoubleDoubleDoubleDouble)\n\
    \    var factorizationMinDoubleDoubleDoubleDoubleDouble = Double(factorizationMinDoubleDoubleDoubleDoubleDouble)\n\
    \    var factorizationMaxDoubleDoubleDoubleDoubleDoubleInt = Int(factorizationMaxDoubleDoubleDoubleDoubleDouble)\n\
    \    var factorizationMinDoubleDoubleDoubleDoubleDoubleInt = Int(factorizationMinDoubleDoubleDoubleDoubleDouble)\n\
    \    var factorizationMaxDoubleDoubleDoubleDoubleDoubleDouble = Double(factorizationMaxDoubleDoubleDoubleDoubleDoubleDouble)\n\
    \    var factorizationMinDoubleDoubleDoubleDoubleDoubleDouble = Double(factorizationMinDoubleDoubleDoubleDoubleDoubleDouble)\n\
    \    var factorizationMaxDoubleDoubleDoubleDoubleDoubleDoubleInt = Int(factorizationMaxDoubleDoubleDoubleDoubleDoubleDouble)\n\
    \    var factorizationMinDoubleDoubleDoubleDoubleDoubleDoubleInt = Int(factorizationMinDoubleDoubleDoubleDoubleDoubleDouble)",
  "    var factorization: [Int] = []\n    var factor: Int\n    var i: Int\n    var\
    \ j: Int\n    var factorsCount: Int\n    var isPrime: Bool\n    var isPrime2:\
    \ Bool\n    var isPrime3: Bool\n    var isPrime4: Bool\n    var isPrime5: Bool\n\
    \    var isPrime6: Bool\n    var isPrime7: Bool\n    var isPrime8: Bool\n    var\
    \ isPrime9: Bool\n    var isPrime10: Bool\n    var isPrime11: Bool\n    var isPrime12:\
    \ Bool\n    var isPrime13: Bool\n    var isPrime14: Bool\n    var isPrime15: Bool\n\
    \    var isPrime16: Bool\n    var isPrime17: Bool\n    var isPrime18: Bool\n \
    \   var isPrime19: Bool\n    var isPrime20: Bool\n    var isPrime21: Bool\n  \
    \  var isPrime22: Bool\n    var isPrime23: Bool\n    var isPrime24: Bool\n   \
    \ var isPrime25: Bool\n    var isPrime26: Bool\n    var isPrime27: Bool\n    var\
    \ isPrime28: Bool\n    var isPrime29: Bool\n    var isPrime30: Bool\n    var isPrime31:\
    \ Bool\n    var isPrime32: Bool\n    var isPrime33: Bool\n    var isPrime34: Bool\n\
    \    var isPrime35: Bool\n    var isPrime36: Bool\n    var isPrime37: Bool\n \
    \   var isPrime38: Bool\n    var isPrime39: Bool\n    var isPrime40: Bool\n  \
    \  var isPrime41: Bool\n    var isPrime42: Bool\n    var isPrime43: Bool\n   \
    \ var isPrime44: Bool\n    var isPrime45: Bool\n    var isPrime46: Bool\n    var\
    \ isPrime47: Bool\n    var isPrime48: Bool\n    var isPrime49: Bool\n    var isPrime50:\
    \ Bool\n    var isPrime51: Bool\n    var isPrime52: Bool\n    var isPrime53: Bool\n\
    \    var isPrime54: Bool\n    var isPrime55: Bool\n    var isPrime56: Bool\n \
    \   var isPrime57: Bool\n    var isPrime58: Bool\n    var isPrime59: Bool\n  \
    \  var isPrime60: Bool\n    var isPrime61: Bool\n    var ", "    var factors =\
    \ [Int]()\n    var factorization = [Int]()\n    var factorizationCount = 1\n \
    \   var factorizationIndex = 0\n    var isPrime = true\n    var isPrimeIndex =\
    \ 0\n    var isPrimeFactorization = false\n    var isPrimeFactorizationIndex =\
    \ 0\n    var isPrimeFactorizationCount = 1\n    var isPrimeFactorizationPrime\
    \ = false\n    var isPrimeFactorizationPrimeIndex = 0\n    var isPrimeFactorizationPrimeCount\
    \ = 1\n    var isPrimeFactorizationPrimeFactorization = false\n    var isPrimeFactorizationPrimeFactorizationIndex\
    \ = 0\n    var isPrimeFactorizationPrimeFactorizationCount = 1\n    var isPrimeFactorizationPrimeFactorizationPrime\
    \ = false\n    var isPrimeFactorizationPrimeFactorizationPrimeIndex = 0\n    var\
    \ isPrimeFactorizationPrimeFactorizationPrimeCount = 1\n    var isPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = false\n    var isPrimeFactorizationPrimeFactorizationPrimeFactorizationIndex\
    \ = 0\n    var isPrimeFactorizationPrimeFactorizationPrimeFactorizationCount =\
    \ 1\n    var isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime = false\n\
    \    var isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeIndex =\
    \ 0\n    var isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeCount\
    \ = 1\n    var isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = false\n    var isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationIndex\
    \ = 0\n    var isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationCount\
    \ = 1\n    var isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = false\n    var isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationIndex\
    \ = 0\n    var isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationCount\
    \ = 1\n    var isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = false\n    var isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationIndex\
    \ = 0\n    var isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationCount\
    \ = 1\n    var isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = false\n    var isPrimeFactorizationPrimeFactorizationPrimeFactorization",
  "    var factors = [Int]()\n    var primeFactors = [Int]()\n    var primeFactorsCount\
    \ = 0\n    var isPrime = true\n    var isPrimeCount = 0\n    var isPrimePrime\
    \ = true\n    var isPrimePrimeCount = 0\n    var isPrimePrimePrime = true\n  \
    \  var isPrimePrimePrimeCount = 0\n    var isPrimePrimePrimePrime = true\n   \
    \ var isPrimePrimePrimePrimeCount = 0\n    var isPrimePrimePrimePrimePrime = true\n\
    \    var isPrimePrimePrimePrimePrimeCount = 0\n    var isPrimePrimePrimePrimePrimePrime\
    \ = true\n    var isPrimePrimePrimePrimePrimePrimeCount = 0\n    var isPrimePrimePrimePrimePrimePrimePrime\
    \ = true\n    var isPrimePrimePrimePrimePrimePrimePrimeCount = 0\n    var isPrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true\n    var isPrimePrimePrimePrimePrimePrimePrimePrimeCount = 0\n    var\
    \ isPrimePrimePrimePrimePrimePrimePrimePrimePrime = true\n    var isPrimePrimePrimePrimePrimePrimePrimePrimeCount\
    \ = 0\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = true\n \
    \   var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount = 0\n    var\
    \ isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = true\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount\
    \ = 0\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount\
    \ = 0\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount\
    \ = 0\n    var isPrimePrimePrimePrimePri", "    var factorization: [Int] = []\n\
    \    var factorizationCount = 0\n    var currentFactorizationCount = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization", "    var factors\
    \ = [Int]()\n    var i = 2\n    while i * i <= n {\n        if n % i == 0 {\n\
    \            factors.append(i)\n            n /= i\n        }\n        i += 1\n\
    \    }\n    if n > 1 {\n        factors.append(n)\n    }\n    return factors",
  "    if n < 2 {\n        return []\n    }\n    var factorization = [Int]()\n   \
    \ var factor = 2\n    var factorizationCount = 0\n    while factor <= n {\n  \
    \      if n % factor == 0 {\n            factorizationCount += 1\n           \
    \ factorization.append(factor)\n            n /= factor\n        } else {\n  \
    \          factor++\n        }\n    }\n    if n > 1 {\n        factorizationCount\
    \ += 1\n        factorization.append(n)\n    }\n    return factorization", " \
    \   var factors = [Int]()\n    var i = 2\n    var factor = 1\n    var factorization\
    \ = [1]\n    while i <= n {\n        if n % i == 0 {\n            factors.append(i)\n\
    \            factors.append(factor)\n            factors.append(factorization[0])\n\
    \            factorization[0]++\n            factor = 1\n        } else {\n  \
    \          factor *= i\n            factorization[0]++\n        }\n        i +=\
    \ 1\n    }\n    return factors", "    var factorization = [Int]()\n    var factorizationCount\
    \ = [Int]()\n    var isPrime = [Bool]()\n    var isPrimeCount = [Int]()\n    var\
    \ isPrimeIndex = [Int]()\n    var isPrimeIndexCount = [Int]()\n    var isPrimeIndexStart\
    \ = [Int]()\n    var isPrimeIndexEnd = [Int]()\n    var isPrimeIndexStartCount\
    \ = [Int]()\n    var isPrimeIndexEndCount = [Int]()\n    var isPrimeIndexStartPrime\
    \ = [Int]()\n    var isPrimeIndexEndPrime = [Int]()\n    var isPrimeIndexStartPrimeCount\
    \ = [Int]()\n    var isPrimeIndexEndPrimeCount = [Int]()\n    var isPrimeIndexStartPrimePrime\
    \ = [Int]()\n    var isPrimeIndexEndPrimePrime = [Int]()\n    var isPrimeIndexStartPrimePrimeCount\
    \ = [Int]()\n    var isPrimeIndexEndPrimePrimeCount = [Int]()\n    var isPrimeIndexStartPrimePrimePrimeCount\
    \ = [Int]()\n    var isPrimeIndexEndPrimePrimeCount = [Int]()\n    var isPrimeIndexStartPrimePrimePrimeCount\
    \ = [Int]()\n    var isPrimeIndexEndPrimePrimeCount = [Int]()\n    var isPrimeIndexStartPrimePrimePrimeCount\
    \ = [Int]()\n    var isPrimeIndexEndPrimePrimeCount = [Int]()\n    var isPrimeIndexStartPrimePrimePrimeCount\
    \ = [Int]()\n    var isPrimeIndexEndPrimePrimeCount = [Int]()\n    var isPrimeIndexStartPrimePrimePrimeCount\
    \ = [Int]()\n    var isPrimeIndexEndPrimePrimeCount = [Int]()\n    var isPrimeIndexStartPrimePrimePrimeCount\
    \ = [Int]()\n    var isPrimeIndexEndPrimePrimeCount = [Int]()\n    var isPrimeIndexStartPrimePrimePrimeCount\
    \ = [Int]()\n    var isPrimeIndexEndPrimePrimeCount = [Int]()\n    var isPrimeIndexStartPrimePrimePrimeCount\
    \ = [Int]()\n    var isPrimeIndexEndPrimePrimeCount = [Int]()\n    var isPrimeIndexStartPrimePrimePrimeCount\
    \ = [Int]()\n    var isPri", "    var factorization: [Int] = []\n    var primeFactorization:\
    \ [Int] = []\n    var primeFactorizationCount = 0\n    var isPrime = true\n  \
    \  var isPrimeCount = 0\n    var isPrimePrime = true\n    var isPrimePrimeCount\
    \ = 0\n    var isPrimePrimePrime = true\n    var isPrimePrimePrimeCount = 0\n\
    \    var isPrimePrimePrimePrime = true\n    var isPrimePrimePrimePrimeCount =\
    \ 0\n    var isPrimePrimePrimePrimePrime = true\n    var isPrimePrimePrimePrimePrimeCount\
    \ = 0\n    var isPrimePrimePrimePrimePrimePrime = true\n    var isPrimePrimePrimePrimePrimePrimeCount\
    \ = 0\n    var isPrimePrimePrimePrimePrimePrimePrime = true\n    var isPrimePrimePrimePrimePrimePrimePrimeCount\
    \ = 0\n    var isPrimePrimePrimePrimePrimePrimePrimePrime = true\n    var isPrimePrimePrimePrimePrimePrimePrimePrimeCount\
    \ = 0\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrime = true\n    var\
    \ isPrimePrimePrimePrimePrimePrimePrimePrimeCount = 0\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount =\
    \ 0\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = true\n\
    \    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount = 0\n\
    \    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = true\n\
    \    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount =\
    \ 0\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount\
    \ = 0\n    var isPrimePrimePrimePrimePri", "    var factors = [Int]()\n    var\
    \ i = 2\n    var j = 1\n    var k = n\n\n    while i < k {\n        if n % i ==\
    \ 0 {\n            factors.append(i)\n            n /= i\n        } else {\n \
    \           i += 1\n        }\n    }\n\n    if n != 1 {\n        factors.append(n)\n\
    \    }\n\n    return factors", "    var factorization: [Int] = []\n    var primeFactorization:\
    \ [Int] = []\n    var isPrime: [Bool] = []\n    var isPrimeCount: [Int] = []\n\
    \    var isPrimeCountMax: Int = 1\n    var isPrimeCountMaxIndex: Int = 0\n   \
    \ var isPrimeCountMaxIndex2: Int = 0\n    var isPrimeCountMaxIndex3: Int = 0\n\
    \    var isPrimeCountMaxIndex4: Int = 0\n    var isPrimeCountMaxIndex5: Int =\
    \ 0\n    var isPrimeCountMaxIndex6: Int = 0\n    var isPrimeCountMaxIndex7: Int\
    \ = 0\n    var isPrimeCountMaxIndex8: Int = 0\n    var isPrimeCountMaxIndex9:\
    \ Int = 0\n    var isPrimeCountMaxIndex10: Int = 0\n    var isPrimeCountMaxIndex11:\
    \ Int = 0\n    var isPrimeCountMaxIndex12: Int = 0\n    var isPrimeCountMaxIndex13:\
    \ Int = 0\n    var isPrimeCountMaxIndex14: Int = 0\n    var isPrimeCountMaxIndex15:\
    \ Int = 0\n    var isPrimeCountMaxIndex16: Int = 0\n    var isPrimeCountMaxIndex17:\
    \ Int = 0\n    var isPrimeCountMaxIndex18: Int = 0\n    var isPrimeCountMaxIndex19:\
    \ Int = 0\n    var isPrimeCountMaxIndex20: Int = 0\n    var isPrimeCountMaxIndex21:\
    \ Int = 0\n    var isPrimeCountMaxIndex22: Int = 0\n    var isPrimeCountMaxIndex23:\
    \ Int = 0\n    var isPrimeCountMaxIndex24: Int = 0\n    var isPrimeCountMaxIndex25:\
    \ Int = 0\n    var isPrimeCountMaxIndex26: Int = 0\n    var isPrimeCountMaxIndex27:\
    \ Int = 0\n    var isPrimeCountMaxIndex28: Int = 0\n    var isPrimeCountMaxIndex29:\
    \ Int = 0\n    var isPrimeCountMaxIndex30: Int = 0\n    var isPrimeCountMaxIndex31:\
    \ Int = 0\n    var isPrimeCountMaxIndex32: Int = 0\n    var isPrimeCountMaxIndex33:\
    \ Int = 0\n    var isPrimeCountMaxIndex34: Int = 0\n    var isPrimeCountMaxIndex35:\
    \ Int = 0\n    var isPrimeCountMaxIndex36: Int = 0\n    var isPrimeCountMaxIndex37:\
    \ Int = 0\n    var isPrimeCountMaxIndex38: Int = 0\n    var isPrimeCountMaxIndex39:\
    \ Int = 0\n    var isPrimeCountMax", "    var factorization = [Int]()\n    var\
    \ primeFactorization = [Int]()\n    var primeFactorizationCount = [Int]()\n  \
    \  var isPrime = [Bool]()\n    var isPrimeCount = [Int]()\n    var isPrimeCountMax\
    \ = Int(arc4random_uniform(UInt32(UInt32.max)))\n    var isPrimeCountMin = Int(arc4random_uniform(UInt32(UInt32.min)))\n\
    \    var isPrimeCountMin2 = Int(arc4random_uniform(UInt32(UInt32.min)))\n    var\
    \ isPrimeCountMin3 = Int(arc4random_uniform(UInt32(UInt32.min)))\n    var isPrimeCountMin4\
    \ = Int(arc4random_uniform(UInt32(UInt32.min)))\n    var isPrimeCountMin5 = Int(arc4random_uniform(UInt32(UInt32.min)))\n\
    \    var isPrimeCountMin6 = Int(arc4random_uniform(UInt32(UInt32.min)))\n    var\
    \ isPrimeCountMin7 = Int(arc4random_uniform(UInt32(UInt32.min)))\n    var isPrimeCountMin8\
    \ = Int(arc4random_uniform(UInt32(UInt32.min)))\n    var isPrimeCountMin9 = Int(arc4random_uniform(UInt32(UInt32.min)))\n\
    \    var isPrimeCountMin10 = Int(arc4random_uniform(UInt32(UInt32.min)))\n   \
    \ var isPrimeCountMin11 = Int(arc4random_uniform(UInt32(UInt32.min)))\n    var\
    \ isPrimeCountMin12 = Int(arc4random_uniform(UInt32(UInt32.min)))\n    var isPrimeCountMin13\
    \ = Int(arc4random_uniform(UInt32(UInt32.min)))\n    var isPrimeCountMin14 = Int(arc4random_uniform(UInt32(UInt32.min)))\n\
    \    var isPrimeCountMin15 = Int(arc4random_uniform(UInt32(UInt32.min)))\n   \
    \ var isPrimeCountMin16 = Int(arc4random_uniform(UInt32(UInt32.min)))\n    var\
    \ isPrimeCountMin17 = Int(arc4random_uniform(UInt32(UInt32.min)))\n    var isPrimeCountMin18\
    \ = Int(arc4random_uniform(UInt32(UInt32.min)))\n    var isPrimeCountMin19 = Int(arc4random_uniform(UInt32(UInt32.min)))\n\
    \    var isPrimeCountMin20 = Int(arc4random_uniform(UInt32(UInt32.min)))\n   \
    \ var isPrimeCountMin21 = Int(arc4random_uniform(UInt32(UInt32.min)))\n    var\
    \ isPrimeCountMin22 = Int(arc4random_uniform(UInt32(UInt", "    var factors =\
    \ [Int]()\n    var primes = [Int]()\n    var maxFactor = Int(sqrt(Double(n)))\n\
    \    var maxPrime = Int(sqrt(Double(n)))\n    var maxPrimeIndex = -1\n    var\
    \ maxPrimeFactor = Int(sqrt(Double(n)))\n    var maxPrimeFactorIndex = -1\n  \
    \  var maxPrimeFactorIndex = -1\n    var maxPrimeFactorIndex = -1\n    var maxPrimeFactorIndex\
    \ = -1\n    var maxPrimeFactorIndex = -1\n    var maxPrimeFactorIndex = -1\n \
    \   var maxPrimeFactorIndex = -1\n    var maxPrimeFactorIndex = -1\n    var maxPrimeFactorIndex\
    \ = -1\n    var maxPrimeFactorIndex = -1\n    var maxPrimeFactorIndex = -1\n \
    \   var maxPrimeFactorIndex = -1\n    var maxPrimeFactorIndex = -1\n    var maxPrimeFactorIndex\
    \ = -1\n    var maxPrimeFactorIndex = -1\n    var maxPrimeFactorIndex = -1\n \
    \   var maxPrimeFactorIndex = -1\n    var maxPrimeFactorIndex = -1\n    var maxPrimeFactorIndex\
    \ = -1\n    var maxPrimeFactorIndex = -1\n    var maxPrimeFactorIndex = -1\n \
    \   var maxPrimeFactorIndex = -1\n    var maxPrimeFactorIndex = -1\n    var maxPrimeFactorIndex\
    \ = -1\n    var maxPrimeFactorIndex = -1\n    var maxPrimeFactorIndex = -1\n \
    \   var maxPrimeFactorIndex = -1\n    var maxPrimeFactorIndex = -1\n    var maxPrimeFactorIndex\
    \ = -1\n    var maxPrimeFactorIndex = -1\n    var maxPrimeFactorIndex = -1\n \
    \   var maxPrimeFactorIndex = -1\n    var maxPrimeFactorIndex = -1\n    var maxPrimeFactorIndex\
    \ = -1\n    var maxPrimeFactorIndex = -1\n    var maxPrimeFactorIndex = -1\n \
    \   var maxPrimeFactorIndex = -1\n    var maxPrimeFactorIndex = -1\n    var maxPrimeFactorIndex\
    \ = -1\n    var maxPrimeFactorIndex = -1\n    var maxPrimeFactorIndex = -1\n \
    \   var maxPrimeFactorIndex = -1\n    var maxPrimeFactorIndex = -1\n    var maxPrimeFactorIndex\
    \ = -1\n    var maxPrimeFactorIndex = -1\n    var maxPrimeFactorIndex = -1\n \
    \   var maxPrimeFactorIndex = -1\n    var maxPrimeFactorIndex = -1\n    var maxPrimeFactorIndex\
    \ = -1\n    var maxPrimeFactorIndex = -1\n    var maxPrimeFactorIndex = -1\n \
    \   var maxPrimeFactorIndex = -1\n    var maxPrimeFactorIndex = -1\n    var maxPrimeFactorIndex\
    \ = -1\n    var maxPrimeFactorIndex = -1\n    var maxPrimeFactorIndex = -1\n \
    \   var maxPrimeFactorIndex = -1\n    var max", "    var factors = [Int]()\n \
    \   var i = 2\n    var p = 2\n    while i <= n {\n        while n % i == 0 {\n\
    \            factors.append(i)\n            n /= i\n        }\n        i += 1\n\
    \    }\n    if n > 1 {\n        factors.append(n)\n    }\n    return factors",
  "    var factors = [Int]()\n    var i = 2\n    while i * i <= n {\n        if n\
    \ % i == 0 {\n            factors.append(i)\n            n /= i\n        } else\
    \ {\n            i += 1\n        }\n    }\n    if n > 1 {\n        factors.append(n)\n\
    \    }\n    return factors", "    var factorization: [Int] = []\n    var factorizationCount\
    \ = 0\n    var isPrime = true\n    var isPrimeCount = 0\n    var isPrimeDivisor\
    \ = true\n    var isPrimeDivisorCount = 0\n    var isPrimeDivisorDivisor = true\n\
    \    var isPrimeDivisorDivisorCount = 0\n    var isPrimeDivisorDivisorDivisor\
    \ = true\n    var isPrimeDivisorDivisorDivisorCount = 0\n    var isPrimeDivisorDivisorDivisorDivisor\
    \ = true\n    var isPrimeDivisorDivisorDivisorDivisorCount = 0\n    var isPrimeDivisorDivisorDivisorDivisorDivisor\
    \ = true\n    var isPrimeDivisorDivisorDivisorDivisorDivisorCount = 0\n    var\
    \ isPrimeDivisorDivisorDivisorDivisorDivisorDivisor = true\n    var isPrimeDivisorDivisorDivisorDivisorDivisorDivisorCount\
    \ = 0\n    var isPrimeDivisorDivisorDivisorDivisorDivisorDivisorDivisor = true\n\
    \    var isPrimeDivisorDivisorDivisorDivisorDivisorDivisorDivisorCount = 0\n \
    \   var isPrimeDivisorDivisorDivisorDivisorDivisorDivisorDivisorDivisor = true\n\
    \    var isPrimeDivisorDivisorDivisorDivisorDivisorDivisorDivisorDivisorCount\
    \ = 0\n    var isPrimeDivisorDivisorDivisorDivisorDivisorDivisorDivisorDivisorDivisor\
    \ = true\n    var isPrimeDivisorDivisorDivisorDivisorDivisorDivisorDivisorDivisorDivisorCount\
    \ = 0\n    var isPrimeDivisorDivisorDivisorDivisorDivisorDivisorDivisorDivisorDivisor\
    \ = true\n    var isPrimeDivisorDivisorDivisorDivisorDivisorDivisorDivisorDivisorDivisorCount\
    \ = 0\n    var isPrimeDivisorDivisorDivisorDivisorDivisorDivisorDivisorDivisorDivisorDivisor\
    \ = true\n    var isPrimeDivisorDivisorDivisorDivisorDivisorDivisorDivisorDivisorDivisorCount\
    \ = 0\n    var isPrimeDivisorDivisorDivisorDivisorDivisorDivisorDivisorDivisorDivisorDivisor\
    \ = true\n    var isPrimeDivisorDivisorDivisorDivisorDivisorDivisorDivisorDivisorDivisorDivisorCount\
    \ = 0\n    var isPrimeDivisorDivisorDivisorDivisorDivisorDivisorDivisorDivisorDivisorDivisor\
    \ = true\n    var isPrimeDivisorDivisorDivisor", "    var factorization = [Int]()\n\
    \    var factorizationCount = [Int]()\n    var isPrime = [Bool]()\n    var isPrimeCount\
    \ = [Int]()\n    var isPrimeSum = [Int]()\n    var isPrimeSumCount = [Int]()\n\
    \    var isPrimeSumPrime = [Int]()\n    var isPrimeSumPrimeCount = [Int]()\n \
    \   var isPrimeSumPrimePrime = [Int]()\n    var isPrimeSumPrimePrimeCount = [Int]()\n\
    \    var isPrimeSumPrimePrimePrime = [Int]()\n    var isPrimeSumPrimePrimePrimeCount\
    \ = [Int]()\n    var isPrimeSumPrimePrimePrimePrime = [Int]()\n    var isPrimeSumPrimePrimePrimePrimeCount\
    \ = [Int]()\n    var isPrimeSumPrimePrimePrimePrimePrime = [Int]()\n    var isPrimeSumPrimePrimePrimePrimePrimeCount\
    \ = [Int]()\n    var isPrimeSumPrimePrimePrimePrimePrimePrime = [Int]()\n    var\
    \ isPrimeSumPrimePrimePrimePrimePrimeCount = [Int]()\n    var isPrimeSumPrimePrimePrimePrimePrimePrime\
    \ = [Int]()\n    var isPrimeSumPrimePrimePrimePrimePrimePrimeCount = [Int]()\n\
    \    var isPrimeSumPrimePrimePrimePrimePrimePrimePrime = [Int]()\n    var isPrimeSumPrimePrimePrimePrimePrimePrimeCount\
    \ = [Int]()\n    var isPrimeSumPrimePrimePrimePrimePrimePrimePrime = [Int]()\n\
    \    var isPrimeSumPrimePrimePrimePrimePrimePrimeCount = [Int]()\n    var isPrimeSumPrimePrimePrimePrimePrimePrimePrime\
    \ = [Int]()\n    var isPrimeSumPrimePrimePrimePrimePrimePrimeCount = [Int]()\n\
    \    var isPrimeSumPrimePrimePrimePrimePrimePrimePrime = [Int]()\n    var isPrimeSumPrimePrimePrimePrimePrimePrimeCount\
    \ = [Int]()\n    var isPrimeSumPrimePrimePrimePrimePri", "    var factors = [Int]()\n\
    \    var i = 2\n    var j = 1\n    var k = 0\n    var factor = 1\n    while i\
    \ <= n {\n        while n % i == 0 {\n            factors.append(i)\n        \
    \    n /= i\n        }\n        i += 1\n    }\n    while n > 1 {\n        k +=\
    \ 1\n        while n % j == 0 {\n            factors.append(j)\n            n\
    \ /= j\n        }\n        j += 1\n    }\n    return factors", "    var factorization:\
    \ [Int] = []\n    var i = 2\n    while i < n {\n        if n % i == 0 {\n    \
    \        factorization = append(factorization, i)\n            n /= i\n      \
    \  } else {\n            i += 1\n        }\n    }\n    if n != 1 {\n        factorization\
    \ = append(factorization, n)\n    }\n    return factorization", "    var factorization:\
    \ [Int] = []\n    var primeFactorization: [Int] = []\n    var primeFactorizationCount\
    \ = 0\n    var isPrime = true\n    var isPrimeCount = 0\n    var isPrimePrime\
    \ = true\n    var isPrimePrimeCount = 0\n    var isPrimePrimePrime = true\n  \
    \  var isPrimePrimePrimeCount = 0\n    var isPrimePrimePrimePrime = true\n   \
    \ var isPrimePrimePrimePrimeCount = 0\n    var isPrimePrimePrimePrimePrime = true\n\
    \    var isPrimePrimePrimePrimePrimeCount = 0\n    var isPrimePrimePrimePrimePrimePrime\
    \ = true\n    var isPrimePrimePrimePrimePrimePrimeCount = 0\n    var isPrimePrimePrimePrimePrimePrimePrime\
    \ = true\n    var isPrimePrimePrimePrimePrimePrimePrimeCount = 0\n    var isPrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true\n    var isPrimePrimePrimePrimePrimePrimePrimePrimeCount = 0\n    var\
    \ isPrimePrimePrimePrimePrimePrimePrimePrimePrime = true\n    var isPrimePrimePrimePrimePrimePrimePrimePrimeCount\
    \ = 0\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = true\n \
    \   var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount = 0\n    var\
    \ isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = true\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount\
    \ = 0\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount\
    \ = 0\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount\
    \ = 0\n    var isPrimePrimePrimePrimePri", "    var factors = [Int]()\n    var\
    \ i = 2\n    while i * i <= n {\n        if n % i == 0 {\n            factors.append(i)\n\
    \            n /= i\n        } else {\n            i += 1\n        }\n    }\n\
    \    if n > 1 {\n        factors.append(n)\n    }\n    return factors", "    var\
    \ factors = [Int]()\n    var i = 2\n    var factor = 1\n    while i <= n {\n \
    \       if n % i == 0 {\n            factor *= i\n            factors.append(factor)\n\
    \            factor = 1\n        }\n        i += 1\n    }\n    return factors",
  "    var factorization = [Int]()\n    var primeFactorization = [Int]()\n    var\
    \ primeFactorizationIndex = 0\n    var factorizationIndex = 0\n    var isPrime\
    \ = true\n    var isPrimeIndex = -1\n    var isPrimeIndex2 = -1\n    var isPrimeIndex3\
    \ = -1\n    var isPrimeIndex4 = -1\n    var isPrimeIndex5 = -1\n    var isPrimeIndex6\
    \ = -1\n    var isPrimeIndex7 = -1\n    var isPrimeIndex8 = -1\n    var isPrimeIndex9\
    \ = -1\n    var isPrimeIndex10 = -1\n    var isPrimeIndex11 = -1\n    var isPrimeIndex12\
    \ = -1\n    var isPrimeIndex13 = -1\n    var isPrimeIndex14 = -1\n    var isPrimeIndex15\
    \ = -1\n    var isPrimeIndex16 = -1\n    var isPrimeIndex17 = -1\n    var isPrimeIndex18\
    \ = -1\n    var isPrimeIndex19 = -1\n    var isPrimeIndex20 = -1\n    var isPrimeIndex21\
    \ = -1\n    var isPrimeIndex22 = -1\n    var isPrimeIndex23 = -1\n    var isPrimeIndex24\
    \ = -1\n    var isPrimeIndex25 = -1\n    var isPrimeIndex26 = -1\n    var isPrimeIndex27\
    \ = -1\n    var isPrimeIndex28 = -1\n    var isPrimeIndex29 = -1\n    var isPrimeIndex30\
    \ = -1\n    var isPrimeIndex31 = -1\n    var isPrimeIndex32 = -1\n    var isPrimeIndex33\
    \ = -1\n    var isPrimeIndex34 = -1\n    var isPrimeIndex35 = -1\n    var isPrimeIndex36\
    \ = -1\n    var isPrimeIndex37 = -1\n    var isPrimeIndex38 = -1\n    var isPrimeIndex39\
    \ = -1\n    var isPrimeIndex40 = -1\n    var isPrimeIndex41 = -1\n    var isPrimeIndex42\
    \ = -1\n    var isPrimeIndex43 = -1\n    var isPrimeIndex44 = -1\n    var isPrimeIndex45\
    \ = -1\n    var isPrimeIndex46 = -1\n    var isPrimeIndex47 = -1\n    var isPrimeIndex48\
    \ = -1\n    var isPrimeIndex49 = -1\n    var isPrimeIndex50 = -1\n    var isPrimeIndex51\
    \ = -1\n    var isPrimeIndex52 = -1\n    var isPrimeIndex53 = -1\n    var isPrimeIndex54\
    \ = -1\n    var isPrimeIndex55 = -1\n    var isPrimeIndex56 = -1\n    var isPrimeIndex57\
    \ = -1\n    var isPrimeIndex58 = -1\n    var isPri", "    var factorization =\
    \ [Int]()\n    var i = 2\n    var factor = 1\n    while i <= n {\n        if n\
    \ % i == 0 {\n            factorization[factor] = i\n            factor += 1\n\
    \            n /= i\n        } else {\n            i += 1\n        }\n    }\n\
    \    factorization[factor] = n\n    return factorization", "    if n < 2 {\n \
    \       return []\n    }\n    var factors = [Int]()\n    var primes = primeFactors(n)\n\
    \    for prime in primes {\n        if n % prime == 0 {\n            factors.append(prime)\n\
    \            n /= prime\n        }\n    }\n    if n > 1 {\n        factors.append(n)\n\
    \    }\n    return factors", "    var factors = [Int]()\n    var i = 2\n    var\
    \ j = 1\n    while i * j <= n {\n        if n % i == 0 {\n            factors.append(i)\n\
    \            n /= i\n        }\n        if n % j == 0 {\n            factors.append(j)\n\
    \            n /= j\n        }\n        i += 1\n        j += 1\n    }\n    if\
    \ n != 1 {\n        factors.append(n)\n    }\n    return factors", "    var factors\
    \ = [Int]()\n    var factorization = factorizationOfNumber(n)\n    for factor\
    \ in factorization {\n        if factors.contains(factor) {\n            factors[factor]\
    \ += 1\n        } else {\n            factors.append(factor)\n        }\n    }\n\
    \    return factors", "    var factors = [Int]()\n    var primes = [Int]()\n \
    \   var primeFactors = [Int]()\n    var factorization = [Int]()\n    var primeFactorization\
    \ = [Int]()\n    var isPrime = [Bool]()\n    var isPrimeFactorization = [Bool]()\n\
    \    var isPrimeFactorization2 = [Bool]()\n    var isPrimeFactorization3 = [Bool]()\n\
    \    var isPrimeFactorization4 = [Bool]()\n    var isPrimeFactorization5 = [Bool]()\n\
    \    var isPrimeFactorization6 = [Bool]()\n    var isPrimeFactorization7 = [Bool]()\n\
    \    var isPrimeFactorization8 = [Bool]()\n    var isPrimeFactorization9 = [Bool]()\n\
    \    var isPrimeFactorization10 = [Bool]()\n    var isPrimeFactorization11 = [Bool]()\n\
    \    var isPrimeFactorization12 = [Bool]()\n    var isPrimeFactorization13 = [Bool]()\n\
    \    var isPrimeFactorization14 = [Bool]()\n    var isPrimeFactorization15 = [Bool]()\n\
    \    var isPrimeFactorization16 = [Bool]()\n    var isPrimeFactorization17 = [Bool]()\n\
    \    var isPrimeFactorization18 = [Bool]()\n    var isPrimeFactorization19 = [Bool]()\n\
    \    var isPrimeFactorization20 = [Bool]()\n    var isPrimeFactorization21 = [Bool]()\n\
    \    var isPrimeFactorization22 = [Bool]()\n    var isPrimeFactorization23 = [Bool]()\n\
    \    var isPrimeFactorization24 = [Bool]()\n    var isPrimeFactorization25 = [Bool]()\n\
    \    var isPrimeFactorization26 = [Bool]()\n    var isPrimeFactorization27 = [Bool]()\n\
    \    var isPrimeFactorization28 = [Bool]()\n    var isPrimeFactorization29 = [Bool]()\n\
    \    var isPrimeFactorization30 = [Bool]()\n    var isPrimeFactorization31 = [Bool]()\n\
    \    var isPrimeFactorization32 = [Bool]()\n    var isPrimeFactorization33 = [Bool]()\n\
    \    var isPrimeFactorization34 = [Bool]()\n    var isPrimeFactorization35 = [Bool]()\n\
    \    var isPrimeFactorization36 = [Bool]()\n    var isPrimeFactorization37 = [Bool]()\n\
    \    var isPrimeFactorization38 = [Bool]()\n    var isPrimeFactorization39 = [",
  "    var factorization: [Int] = []\n    var factorizationCount = 0\n    var factorizationIndex\
    \ = 0\n    var factorizationNumber: Int = 0\n    var factorizationNumberIndex\
    \ = 0\n    var factorizationNumberIndex2 = 0\n    var factorizationNumberIndex3\
    \ = 0\n    var factorizationNumberIndex4 = 0\n    var factorizationNumberIndex5\
    \ = 0\n    var factorizationNumberIndex6 = 0\n    var factorizationNumberIndex7\
    \ = 0\n    var factorizationNumberIndex8 = 0\n    var factorizationNumberIndex9\
    \ = 0\n    var factorizationNumberIndex10 = 0\n    var factorizationNumberIndex11\
    \ = 0\n    var factorizationNumberIndex12 = 0\n    var factorizationNumberIndex13\
    \ = 0\n    var factorizationNumberIndex14 = 0\n    var factorizationNumberIndex15\
    \ = 0\n    var factorizationNumberIndex16 = 0\n    var factorizationNumberIndex17\
    \ = 0\n    var factorizationNumberIndex18 = 0\n    var factorizationNumberIndex19\
    \ = 0\n    var factorizationNumberIndex20 = 0\n    var factorizationNumberIndex21\
    \ = 0\n    var factorizationNumberIndex22 = 0\n    var factorizationNumberIndex23\
    \ = 0\n    var factorizationNumberIndex24 = 0\n    var factorizationNumberIndex25\
    \ = 0\n    var factorizationNumberIndex26 = 0\n    var factorizationNumberIndex27\
    \ = 0\n    var factorizationNumberIndex28 = 0\n    var factorizationNumberIndex29\
    \ = 0\n    var factorizationNumberIndex30 = 0\n    var factorizationNumberIndex31\
    \ = 0\n    var factorizationNumberIndex32 = 0\n    var factorizationNumberIndex33\
    \ = 0\n    var factorizationNumberIndex34 = 0\n    var factorizationNumberIndex35\
    \ = 0\n    var factorizationNumberIndex36 = 0\n    var factorizationNumberIndex37\
    \ = 0\n    var factorizationNumberIndex38 = 0\n    var factorizationNumberIndex39\
    \ = 0\n    var factorizationNumberIndex40 = 0\n    var factorizationNumberIndex41\
    \ = 0\n    var factorizationNumberIndex42 = 0\n    var factorizationNumberIndex43\
    \ = 0\n    var factorizationNumberIndex44 = 0\n    var factorizationNumberIndex45\
    \ = 0\n    var factorizationNumberIndex46 = 0\n    var factorizationNumberIndex47\
    \ = 0\n    var factorizationNumberIndex48 = 0\n    var factorizationNumberIndex49\
    \ = 0\n    var factorizationNumberIndex50 = 0\n    var factorizationNumberIndex51\
    \ = 0\n    var factorizationNumberIndex52 = 0\n    var factorizationNumberIndex53\
    \ = 0\n    var factorizationNumberIndex54 = 0\n    var factorizationNumberIndex55\
    \ = 0\n    var factorizationNumberIndex56 = 0\n    var factorizationNumberIndex57\
    \ = 0\n    var factorizationNumberIndex58 = 0\n    var factorizationNumberIndex59\
    \ = 0\n    var factorizationNumberIndex60 = 0\n    var factorizationNumberIndex61",
  "    var factors = [Int]()\n    var factorization = factorizationOfNumber(n)\n \
    \   for factor in factorization {\n        if factors.contains(factor) {\n   \
    \         factors[factor] += 1\n        } else {\n            factors.append(factor)\n\
    \        }\n    }\n    return factors", "    var factors = [Int]()\n    var i\
    \ = 2\n    var factor = 1\n    while i <= n {\n        while n % i == 0 {\n  \
    \          factors.append(factor)\n            n /= i\n            factor = 1\n\
    \        }\n        i += 1\n        factor *= i + 1\n    }\n    if n > 1 {\n \
    \       factors.append(factor)\n    }\n    return factors", "    var factorization:\
    \ [Int] = []\n    var primeFactorization: [Int] = []\n    var isPrime: [Bool]\
    \ = []\n    var isPrimeCount: [Int] = []\n    var isPrimeCountMax: Int = 1\n \
    \   var isPrimeCountMin: Int = 1\n    var isPrimeCountMinMax: Int = 1\n    var\
    \ isPrimeCountMinMaxMax: Int = 1\n    var isPrimeCountMinMaxMaxMax: Int = 1\n\
    \    var isPrimeCountMinMaxMaxMaxMax: Int = 1\n    var isPrimeCountMinMaxMaxMaxMaxMax:\
    \ Int = 1\n    var isPrimeCountMinMaxMaxMaxMaxMaxMax: Int = 1\n    var isPrimeCountMinMaxMaxMaxMaxMaxMaxMax:\
    \ Int = 1\n    var isPrimeCountMinMaxMaxMaxMaxMaxMaxMax: Int = 1\n    var isPrimeCountMinMaxMaxMaxMaxMaxMaxMaxMax:\
    \ Int = 1\n    var isPrimeCountMinMaxMaxMaxMaxMaxMaxMaxMaxMax: Int = 1\n    var\
    \ isPrimeCountMinMaxMaxMaxMaxMaxMaxMaxMaxMax: Int = 1\n    var isPrimeCountMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMax:\
    \ Int = 1\n    var isPrimeCountMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMax: Int = 1\n  \
    \  var isPrimeCountMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax: Int = 1\n    var isPrimeCountMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax:\
    \ Int = 1\n    var isPrimeCountMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax: Int =\
    \ 1\n    var isPrimeCountMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax: Int = 1\n  \
    \  var isPrimeCountMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax: Int = 1\n    var\
    \ isPrimeCountMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax: Int = 1\n    var\
    \ isPrimeCountMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax: Int = 1\n    var\
    \ isPrimeCountMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax: Int = 1\n    var\
    \ isPrimeCountMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax: Int = 1\n    var\
    \ isPrimeCountMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax", "    var factorization: [Int]\
    \ = []\n    var i = 2\n    var factor = 2\n    while i <= n {\n        while n\
    \ % i == 0 {\n            factorization[factor] = i\n            n /= i\n    \
    \        factor++\n        }\n        i += 1\n    }\n    if n > 1 {\n        factorization[factor]\
    \ = n\n    }\n    return factorization", "    var factors = [Int]()\n    var primes\
    \ = [Int]()\n    var isPrime = [Bool]()\n    var isPrimeCount = [Int]()\n    var\
    \ isPrimeCountMax = Int()\n    var isPrimeCountMaxIndex = Int()\n    var isPrimeCountMaxValue\
    \ = Int()\n    var isPrimeCountMaxIndexValue = Int()\n    var isPrimeCountMaxValueIndex\
    \ = Int()\n    var isPrimeCountMaxValueValue = Int()\n    var isPrimeCountMaxValueIndexValue\
    \ = Int()\n    var isPrimeCountMaxValueValueIndex = Int()\n    var isPrimeCountMaxValueValueValue\
    \ = Int()\n    var isPrimeCountMaxValueIndexValueIndex = Int()\n    var isPrimeCountMaxValueValueValue\
    \ = Int()\n    var isPrimeCountMaxValueIndexValueValue = Int()\n    var isPrimeCountMaxValueValueIndexValue\
    \ = Int()\n    var isPrimeCountMaxValueValueIndexValueIndex = Int()\n    var isPrimeCountMaxValueValueValueIndex\
    \ = Int()\n    var isPrimeCountMaxValueValueValueIndex = Int()\n    var isPrimeCountMaxValueValueValueIndex\
    \ = Int()\n    var isPrimeCountMaxValueValueValueIndex = Int()\n    var isPrimeCountMaxValueValueValueIndex\
    \ = Int()\n    var isPrimeCountMaxValueValueValueIndex = Int()\n    var isPrimeCountMaxValueValueValueIndex\
    \ = Int()\n    var isPrimeCountMaxValueValueValueIndex = Int()\n    var isPrimeCountMaxValueValueValueIndex\
    \ = Int()\n    var isPrimeCountMaxValueValueValueIndex = Int()\n    var isPrimeCountMaxValueValueValueIndex\
    \ = Int()\n    var isPrimeCountMaxValueValueValueIndex = Int()\n    var isPrimeCountMaxValueValueValueIndex\
    \ = Int()\n    var isPrimeCountMaxValueValueValueIndex = Int()\n    var isPrimeCountMaxValueValueValueIndex\
    \ = Int()\n    var isPrimeCountMaxValueValueValueIndex = Int()\n    var isPrimeCountMaxValueValueValueIndex\
    \ = Int()\n    var isPrimeCountMaxValueValueValueIndex = Int()\n    var isPrimeCountMaxValueValueValueIndex\
    \ = Int()\n    var isPrimeCountMaxValueValueValueIndex = Int()\n    var isPrimeCountMaxValueValueValueIndex\
    \ = Int()\n    var isPrimeCountMaxValueValueValueIndex = Int()\n    var isPrimeCountMaxValueValueValueIndex\
    \ = Int()\n    var isPrimeCountMaxValueValueValueIndex = Int()\n    var isPri",
  "    var factorization = [Int]()\n    var primeFactorization = [Int]()\n    var\
    \ isPrime = [Bool]()\n    var isPrimeCount = 0\n    var isPrimeSum = 0\n    var\
    \ isPrimeSumCount = 0\n    var isPrimeSumCountMax = 0\n    var isPrimeSumCountMaxCount\
    \ = 0\n    var isPrimeSumCountMaxCountMax = 0\n    var isPrimeSumCountMaxCountMax\
    \ = 0\n    var isPrimeSumCountMaxCountMaxMax = 0\n    var isPrimeSumCountMaxCountMaxMax\
    \ = 0\n    var isPrimeSumCountMaxCountMaxMaxMax = 0\n    var isPrimeSumCountMaxCountMaxMaxMax\
    \ = 0\n    var isPrimeSumCountMaxCountMaxMaxMax = 0\n    var isPrimeSumCountMaxCountMaxMaxMax\
    \ = 0\n    var isPrimeSumCountMaxCountMaxMaxMax = 0\n    var isPrimeSumCountMaxCountMaxMaxMax\
    \ = 0\n    var isPrimeSumCountMaxCountMaxMaxMax = 0\n    var isPrimeSumCountMaxCountMaxMaxMax\
    \ = 0\n    var isPrimeSumCountMaxCountMaxMaxMax = 0\n    var isPrimeSumCountMaxCountMaxMaxMax\
    \ = 0\n    var isPrimeSumCountMaxCountMaxMaxMax = 0\n    var isPrimeSumCountMaxCountMaxMaxMax\
    \ = 0\n    var isPrimeSumCountMaxCountMaxMaxMax = 0\n    var isPrimeSumCountMaxCountMaxMaxMax\
    \ = 0\n    var isPrimeSumCountMaxCountMaxMaxMax = 0\n    var isPrimeSumCountMaxCountMaxMaxMax\
    \ = 0\n    var isPrimeSumCountMaxCountMaxMaxMax = 0\n    var isPrimeSumCountMaxCountMaxMaxMax\
    \ = 0\n    var isPrimeSumCountMaxCountMaxMaxMax = 0\n    var isPrimeSumCountMaxCountMaxMaxMax\
    \ = 0\n    var isPrimeSumCountMaxCountMaxMaxMax = 0\n    var isPrimeSumCountMaxCountMaxMaxMax\
    \ = 0\n    var isPrimeSumCountMaxCountMaxMaxMax = 0\n    var isPrimeSumCountMaxCountMaxMaxMax\
    \ = 0\n    var isPrimeSumCountMaxCountMaxMaxMax = 0\n    var isPrimeSumCountMaxCountMaxMaxMax\
    \ = 0\n    var isPrimeSumCountMaxCountMaxMaxMax = 0\n    var isPrimeSumCountMaxCountMaxMaxMax\
    \ = 0\n    var isPrimeSumCountMaxCountMaxMaxMax = 0\n    var isPrimeSumCountMaxCountMaxMaxMax\
    \ = 0\n    var isPrimeSumCountMaxCountMax", "    var factorization = [Int]()\n\
    \    var primes = [Int]()\n    var primeFactorization = [Int]()\n    var isPrime\
    \ = [Bool]()\n    var isPrimeFactorization = [Bool]()\n    var isPrimeFactorizationInOrder\
    \ = [Bool]()\n    var isPrimeFactorizationInOrderInReverse = [Bool]()\n    var\
    \ isPrimeFactorizationInOrderInReverseInOrder = [Bool]()\n    var isPrimeFactorizationInOrderInReverseInOrderInReverse\
    \ = [Bool]()\n    var isPrimeFactorizationInOrderInReverseInOrderInReverseInOrder\
    \ = [Bool]()\n    var isPrimeFactorizationInOrderInReverseInOrderInReverseInOrderInReverse\
    \ = [Bool]()\n    var isPrimeFactorizationInOrderInReverseInOrderInReverseInOrderInReverseInOrder\
    \ = [Bool]()\n    var isPrimeFactorizationInOrderInReverseInOrderInReverseInOrderInReverseInOrderInReverse\
    \ = [Bool]()\n    var isPrimeFactorizationInOrderInReverseInOrderInReverseInOrderInReverseInOrderInReverseInOrder\
    \ = [Bool]()\n    var isPrimeFactorizationInOrderInReverseInOrderInReverseInOrderInReverseInOrderInReverseInOrderInReverse\
    \ = [Bool]()\n    var isPrimeFactorizationInOrderInReverseInOrderInReverseInOrderInReverseInOrderInReverseInOrderInReverseInOrder\
    \ = [Bool]()\n    var isPrimeFactorizationInOrderInReverseInOrderInReverseInOrderInReverseInOrderInReverseInOrderInReverseInOrderInReverse\
    \ = [Bool]()\n    var isPrimeFactorizationInOrderInReverseInOrderInReverseInOrderInReverseInOrderInReverseInOrderInReverseInOrderInReverseInOrder\
    \ = [Bool]()\n    var isPrimeFactorizationInOrderInReverseInOrderInReverseInOrderInReverseInOrderInReverseInOrderInReverseInOrderInReverseInOrderInReverse\
    \ = [Bool]()\n    var isPrimeFactorizationInOrderInReverseInOrderInReverseInOrderInReverseInOrderInReverseInOrderInReverseInOrderInReverseInOrderInReverseInOrder\
    \ = [Bool]()\n    var isPrimeFactorizationInOrderInReverseInOrderInReverseInOrderInReverseInOrderInReverseInOrderInReverseInOrderInReverseInOrderInReverseInOrderInReverse\
    \ = [Bool]()\n    var isPrimeFactorizationInOrderInReverseInOrderInReverseInOrderInReverseInOrder",
  "    var factorization: [Int] = []\n    var factorizationCount = 0\n    var currentFactorizationCount\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization", " \
    \   var factors = [Int]()\n    var factorization = factorizationOfNumber(n)\n\
    \    for factor in factorization {\n        if factors.contains(factor) {\n  \
    \          factors[factor] += 1\n        } else {\n            factors.append(factor)\n\
    \        }\n    }\n    return factors", "    var factorization: [Int] = []\n \
    \   var factorizationCount = 0\n    var currentFactorizationCount = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization", "    var factors\
    \ = [Int]()\n    var factorization = [Int]()\n    var isPrime = [Bool]()\n   \
    \ var isPrimeCount = 0\n    var isPrimeSum = 0\n    var isPrimeSumCount = 0\n\
    \    var isPrimeSumCountMax = 1000\n    var isPrimeSumCountMaxInt = 1000\n   \
    \ var isPrimeSumCountMaxIntInt = 1000\n    var isPrimeSumCountMaxInt64 = 1000\n\
    \    var isPrimeSumCountMaxInt64Int = 1000\n    var isPrimeSumCountMaxInt6464\
    \ = 1000\n    var isPrimeSumCountMaxInt6464Int = 1000\n    var isPrimeSumCountMaxInt646464\
    \ = 1000\n    var isPrimeSumCountMaxInt646464Int = 1000\n    var isPrimeSumCountMaxInt646464Int\
    \ = 1000\n    var isPrimeSumCountMaxInt646464Int = 1000\n    var isPrimeSumCountMaxInt646464Int\
    \ = 1000\n    var isPrimeSumCountMaxInt646464IntInt = 1000\n    var isPrimeSumCountMaxInt646464IntIntInt\
    \ = 1000\n    var isPrimeSumCountMaxInt646464IntIntIntInt = 1000\n    var isPrimeSumCountMaxInt646464IntIntIntIntInt\
    \ = 1000\n    var isPrimeSumCountMaxInt646464IntIntIntIntIntInt = 1000\n    var\
    \ isPrimeSumCountMaxInt646464IntIntIntIntIntIntInt = 1000\n    var isPrimeSumCountMaxInt646464IntIntIntIntIntIntIntInt\
    \ = 1000\n    var isPrimeSumCountMaxInt646464IntIntIntIntIntIntIntIntInt = 1000\n\
    \    var isPrimeSumCountMaxInt646464IntIntIntIntIntIntIntIntIntInt = 1000\n  \
    \  var isPrimeSumCountMaxInt646464IntIntIntIntIntIntIntIntIntIntInt = 1000\n \
    \   var isPrimeSumCountMaxInt646464IntIntIntIntIntIntIntIntIntIntIntInt = 1000\n\
    \    var isPrimeSumCountMaxInt646464IntIntIntIntIntIntIntIntIntIntIntInt = 1000\n\
    \    var isPrimeSumCountMaxInt646464IntIntIntIntIntIntIntIntIntIntIntIntInt =\
    \ 1000\n    var isPrimeSumCountMaxInt646464IntIntIntIntIntIntIntIntIntIntIntInt",
  "    var factors = [Int]()\n    var i = 2\n    var factor = 1\n    while i < n {\n\
    \        if n % i == 0 {\n            factor *= i\n            factors.append(factor)\n\
    \            n /= i\n        } else {\n            i += 1\n        }\n    }\n\
    \    if n > 1 {\n        factors.append(n)\n    }\n    return factors", "    var\
    \ factorization = [Int]()\n    var factorizationCount = [Int]()\n    var isPrime\
    \ = [Bool]()\n    var isPrimeCount = [Int]()\n    var isPrimeIndex = 0\n    var\
    \ isPrimeIndexCount = 0\n    var isPrimeIndexMax = 0\n    var isPrimeIndexMaxCount\
    \ = 0\n    var isPrimeIndexMaxValue = 0\n    var isPrimeIndexMaxValueCount = 0\n\
    \    var isPrimeIndexMaxValueIndex = 0\n    var isPrimeIndexMaxValueIndexCount\
    \ = 0\n    var isPrimeIndexMaxValueIndexMax = 0\n    var isPrimeIndexMaxValueIndexMaxCount\
    \ = 0\n    var isPrimeIndexMaxValueIndexMaxValue = 0\n    var isPrimeIndexMaxValueIndexMaxValueCount\
    \ = 0\n    var isPrimeIndexMaxValueIndexMaxValueIndex = 0\n    var isPrimeIndexMaxValueIndexMaxValueIndexCount\
    \ = 0\n    var isPrimeIndexMaxValueIndexMaxValueIndexMax = 0\n    var isPrimeIndexMaxValueIndexMaxValueIndexMaxCount\
    \ = 0\n    var isPrimeIndexMaxValueIndexMaxValueIndexMaxValue = 0\n    var isPrimeIndexMaxValueIndexMaxValueIndexMaxValueCount\
    \ = 0\n    var isPrimeIndexMaxValueIndexMaxValueIndexMaxValueIndex = 0\n    var\
    \ isPrimeIndexMaxValueIndexMaxValueIndexMaxValueIndexCount = 0\n    var isPrimeIndexMaxValueIndexMaxValueIndexMaxValueIndexMax\
    \ = 0\n    var isPrimeIndexMaxValueIndexMaxValueIndexMaxValueIndexMaxCount = 0\n\
    \    var isPrimeIndexMaxValueIndexMaxValueIndexMaxValueIndexMaxValue = 0\n   \
    \ var isPrimeIndexMaxValueIndexMaxValueIndexMaxValueIndexMaxValueCount = 0\n \
    \   var isPrimeIndexMaxValueIndexMaxValueIndexMaxValueIndexMaxValueIndex = 0\n\
    \    var isPrimeIndexMaxValueIndexMaxValueIndexMaxValueIndexMaxValueIndexCount\
    \ = 0\n    var isPrimeIndexMaxValueIndexMaxValueIndexMaxValueIndexMaxValueIndexMaxValue\
    \ = 0\n    var isPrimeIndexMaxValueIndexMaxValueIndexMaxValueIndexMaxValueIndexMaxValueCount\
    \ = 0\n    var isPrimeIndexMaxValueIndexMaxValueIndexMaxValueIndexMaxValueIndexMaxValueIndex\
    \ = 0\n    var isPrimeIndexMaxValueIndexMaxValueIndexMaxValueIndexMaxValueIndexMaxValueIndexCount\
    \ = 0\n    var isPrimeIndexMaxValueIndexMaxValueIndexMaxValueIndexMaxValueIndexMaxValueIndexMaxValue\
    \ = 0\n    var isPrimeIndexMaxValueIndexMaxValueIndexMaxValue", "    var factorization:\
    \ [Int] = []\n    var factor = 2\n    while factor <= n {\n        if n % factor\
    \ == 0 {\n            factorization = factorization + [factor]\n            n\
    \ /= factor\n        } else {\n            factor += 1\n        }\n    }\n   \
    \ if n > 1 {\n        factorization = factorization + [n]\n    }\n    return factorization",
  "    var factorization = [Int]()\n    var primeFactorization = [Int]()\n    var\
    \ primeFactorizationCount = [Int]()\n    var factorizationCount = 0\n    var primeFactorizationCount\
    \ = 0\n    var isPrime = true\n    var isPrimeCount = 0\n    var isPrimePrime\
    \ = true\n    var isPrimePrimeCount = 0\n    var isPrimePrimePrime = true\n  \
    \  var isPrimePrimePrimeCount = 0\n    var isPrimePrimePrimePrime = true\n   \
    \ var isPrimePrimePrimePrimeCount = 0\n    var isPrimePrimePrimePrimePrime = true\n\
    \    var isPrimePrimePrimePrimePrimeCount = 0\n    var isPrimePrimePrimePrimePrimePrime\
    \ = true\n    var isPrimePrimePrimePrimePrimePrimeCount = 0\n    var isPrimePrimePrimePrimePrimePrimePrime\
    \ = true\n    var isPrimePrimePrimePrimePrimePrimePrimeCount = 0\n    var isPrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true\n    var isPrimePrimePrimePrimePrimePrimePrimePrimeCount = 0\n    var\
    \ isPrimePrimePrimePrimePrimePrimePrimePrimePrime = true\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimeCount\
    \ = 0\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = true\n\
    \    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount = 0\n\
    \    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = true\n\
    \    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount =\
    \ 0\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount\
    \ = 0\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true\n    var isPrimePrimePrime", "    var factors = [Int]()\n    var factorization\
    \ = factorizationOfNumber(n)\n    var factorizationCount = 1\n    for factor in\
    \ factorization {\n        if factorizationCount == 1 {\n            factors.append(factor)\n\
    \        } else {\n            if factor != 1 {\n                factors.append(factor)\n\
    \                factorizationCount *= factor\n            }\n        }\n    }\n\
    \    return factors", "    var factorization = [Int]()\n    var factorizationCount\
    \ = [Int]()\n    var factorizationIndex = 0\n    var factorizationCount = 1\n\
    \    var factorizationIndex = 0\n    var factorizationCount = 1\n    var factorizationIndex\
    \ = 0\n    var factorizationCount = 1\n    var factorizationIndex = 0\n    var\
    \ factorizationCount = 1\n    var factorizationIndex = 0\n    var factorizationCount\
    \ = 1\n    var factorizationIndex = 0\n    var factorizationCount = 1\n    var\
    \ factorizationIndex = 0\n    var factorizationCount = 1\n    var factorizationIndex\
    \ = 0\n    var factorizationCount = 1\n    var factorizationIndex = 0\n    var\
    \ factorizationCount = 1\n    var factorizationIndex = 0\n    var factorizationCount\
    \ = 1\n    var factorizationIndex = 0\n    var factorizationCount = 1\n    var\
    \ factorizationIndex = 0\n    var factorizationCount = 1\n    var factorizationIndex\
    \ = 0\n    var factorizationCount = 1\n    var factorizationIndex = 0\n    var\
    \ factorizationCount = 1\n    var factorizationIndex = 0\n    var factorizationCount\
    \ = 1\n    var factorizationIndex = 0\n    var factorizationCount = 1\n    var\
    \ factorizationIndex = 0\n    var factorizationCount = 1\n    var factorizationIndex\
    \ = 0\n    var factorizationCount = 1\n    var factorizationIndex = 0\n    var\
    \ factorizationCount = 1\n    var factorizationIndex = 0\n    var factorizationCount\
    \ = 1\n    var factorizationIndex = 0\n    var factorizationCount = 1\n    var\
    \ factorizationIndex = 0\n    var factorizationCount = 1\n    var factorizationIndex\
    \ = 0\n    var factorizationCount = 1\n    var factorizationIndex = 0\n    var\
    \ factorizationCount = 1\n    var factorizationIndex = 0\n    var factorizationCount\
    \ = 1\n    var factorizationIndex = 0\n    var factorizationCount = 1\n    var\
    \ factorizationIndex = 0\n    var factorizationCount = 1\n    var factorizationIndex\
    \ = 0\n    var factorizationCount = 1\n    var factorizationIndex = 0\n    var\
    \ factorizationCount = 1\n    var factorizationIndex = 0\n    var factorizationCount\
    \ = 1\n    var factorizationIndex = 0\n    var factorizationCount = 1\n    var\
    \ factorizationIndex = 0\n    var factorizationCount = 1\n    var factorizationIndex\
    \ = 0\n    var factorizationCount = 1\n    var factorizationIndex = 0\n    var\
    \ factorizationCount = 1\n    var factorizationIndex = 0\n    var factorizationCount\
    \ = 1\n    var factorizationIndex = 0\n    var factorizationCount = 1\n    var\
    \ factorizationIndex = 0\n    var factorizationCount = 1\n    var factorizationIndex\
    \ = 0\n    var factorizationCount = 1\n    var factorizationIndex = 0\n    var\
    \ factorizationCount = 1\n    var factorizationIndex = 0\n    var factorizationCount\
    \ = 1\n    var factorizationIndex = 0\n    var factorizationCount = 1\n    var\
    \ factorization", "    var factorization: [Int] = []\n    var factorizationCount\
    \ = 0\n    var currentFactorizationCount = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization", "    var factorization = [Int]()\n    var\
    \ factorizationCount = [Int]()\n    var isPrime = [Bool]()\n    var isPrimeCount\
    \ = [Int]()\n    var isPrimeSum = [Int]()\n    var isPrimeSumCount = [Int]()\n\
    \    var isPrimeSumPrime = [Int]()\n    var isPrimeSumPrimeCount = [Int]()\n \
    \   var isPrimeSumPrimePrime = [Int]()\n    var isPrimeSumPrimePrimeCount = [Int]()\n\
    \    var isPrimeSumPrimePrimePrime = [Int]()\n    var isPrimeSumPrimePrimePrimeCount\
    \ = [Int]()\n    var isPrimeSumPrimePrimePrimePrime = [Int]()\n    var isPrimeSumPrimePrimePrimePrimeCount\
    \ = [Int]()\n    var isPrimeSumPrimePrimePrimePrimePrime = [Int]()\n    var isPrimeSumPrimePrimePrimePrimePrimeCount\
    \ = [Int]()\n    var isPrimeSumPrimePrimePrimePrimePrimePrime = [Int]()\n    var\
    \ isPrimeSumPrimePrimePrimePrimePrimeCount = [Int]()\n    var isPrimeSumPrimePrimePrimePrimePrimePrime\
    \ = [Int]()\n    var isPrimeSumPrimePrimePrimePrimePrimePrimeCount = [Int]()\n\
    \    var isPrimeSumPrimePrimePrimePrimePrimePrimePrime = [Int]()\n    var isPrimeSumPrimePrimePrimePrimePrimePrimeCount\
    \ = [Int]()\n    var isPrimeSumPrimePrimePrimePrimePrimePrimePrime = [Int]()\n\
    \    var isPrimeSumPrimePrimePrimePrimePrimePrimeCount = [Int]()\n    var isPrimeSumPrimePrimePrimePrimePrimePrimePrime\
    \ = [Int]()\n    var isPrimeSumPrimePrimePrimePrimePrimePrimeCount = [Int]()\n\
    \    var isPrimeSumPrimePrimePrimePrimePrimePrimePrime = [Int]()\n    var isPrimeSumPrimePrimePrimePrimePrimePrimeCount\
    \ = [Int]()\n    var isPrimeSumPrimePrimePrimePrimePri", "    var factors = [Int]()\n\
    \    var i = 2\n    while i * i <= n {\n        if n % i == 0 {\n            i\
    \ += 1\n            factors.append(i)\n        }\n    }\n    return factors",
  "    var factors = [Int]()\n    var i = 2\n    var factor = 1\n    var isPrime =\
    \ true\n    while i < n {\n        if n % i == 0 {\n            factors.append(factor)\n\
    \            n /= i\n            factor = 1\n        } else {\n            factor\
    \ *= i\n        }\n        i += 1\n    }\n    if n > 1 {\n        factors.append(factor)\n\
    \    }\n    return factors", "    var factors = [Int]()\n    var i = 2\n    var\
    \ j = 1\n    var k = 0\n    var m = 1\n    var n = n\n    var primes = [Int]()\n\
    \    var primeFactors = [Int]()\n    var primeFactorsCount = [Int]()\n    var\
    \ isPrime = [Bool]()\n    var isPrimeCount = [Int]()\n    var isPrimeFactor =\
    \ [Bool]()\n    var isPrimeFactorCount = [Int]()\n    var isPrimeFactorsCount\
    \ = [Int]()\n    var isPrimeFactorsCount2 = [Int]()\n    var isPrimeFactorsCount3\
    \ = [Int]()\n    var isPrimeFactorsCount4 = [Int]()\n    var isPrimeFactorsCount5\
    \ = [Int]()\n    var isPrimeFactorsCount6 = [Int]()\n    var isPrimeFactorsCount7\
    \ = [Int]()\n    var isPrimeFactorsCount8 = [Int]()\n    var isPrimeFactorsCount9\
    \ = [Int]()\n    var isPrimeFactorsCount10 = [Int]()\n    var isPrimeFactorsCount11\
    \ = [Int]()\n    var isPrimeFactorsCount12 = [Int]()\n    var isPrimeFactorsCount13\
    \ = [Int]()\n    var isPrimeFactorsCount14 = [Int]()\n    var isPrimeFactorsCount15\
    \ = [Int]()\n    var isPrimeFactorsCount16 = [Int]()\n    var isPrimeFactorsCount17\
    \ = [Int]()\n    var isPrimeFactorsCount18 = [Int]()\n    var isPrimeFactorsCount19\
    \ = [Int]()\n    var isPrimeFactorsCount20 = [Int]()\n    var isPrimeFactorsCount21\
    \ = [Int]()\n    var isPrimeFactorsCount22 = [Int]()\n    var isPrimeFactorsCount23\
    \ = [Int]()\n    var isPrimeFactorsCount24 = [Int]()\n    var isPrimeFactorsCount25\
    \ = [Int]()\n    var isPrimeFactorsCount26 = [Int]()\n    var isPrimeFactorsCount27\
    \ = [Int]()\n    var isPrimeFactorsCount28 = [Int]()\n    var isPrimeFactorsCount29\
    \ = [Int]()\n    var isPrimeFactorsCount30 = [Int]()\n    var isPrimeFactorsCount31\
    \ = [Int]()\n    var isPrimeFactorsCount32 = [Int]()\n    var isPrime", "    var\
    \ factorization: [Int] = []\n    var factorizationCount = 0\n    var factorizationMax\
    \ = 0\n    var factorizationMin = Int64(Int.max)\n    var factorizationSum = Int64(Int.max)\n\
    \    var factorizationSumOfSquares = 0\n    var factorizationSumOfSquaresMax =\
    \ 0\n    var factorizationSumOfSquaresMin = Int64(Int.max)\n    var factorizationSumOfSquaresSum\
    \ = Int64(Int.max)\n    var factorizationSumOfSquaresSumOfSquares = 0\n    var\
    \ factorizationSumOfSquaresSumOfSquaresMax = 0\n    var factorizationSumOfSquaresSumOfSquaresMin\
    \ = Int64(Int.max)\n    var factorizationSumOfSquaresSumOfSquaresSum = Int64(Int.max)\n\
    \    var factorizationSumOfSquaresSumOfSquaresSumOfSquares = 0\n    var factorizationSumOfSquaresSumOfSquaresSumOfSquaresMax\
    \ = 0\n    var factorizationSumOfSquaresSumOfSquaresSumOfSquaresMin = Int64(Int.max)\n\
    \    var factorizationSumOfSquaresSumOfSquaresSumOfSquaresSum = Int64(Int.max)\n\
    \    var factorizationSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquares = 0\n \
    \   var factorizationSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquaresMax = 0\n\
    \    var factorizationSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquaresMin = Int64(Int.max)\n\
    \    var factorizationSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquaresSum = Int64(Int.max)\n\
    \    var factorizationSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquares\
    \ = 0\n    var factorizationSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquaresMax\
    \ = 0\n    var factorizationSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquaresMin\
    \ = Int64(Int.max)\n    var factorizationSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquaresSum\
    \ = Int64(Int.max)\n    var factorizationSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquares\
    \ = 0\n    var factorizationSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquaresMax\
    \ = 0\n    var factorizationSumOfSquaresSumOfSquaresSumOf", "    var factorization:\
    \ [Int] = []\n    var primeFactorization: [Int] = []\n    var isPrime: [Bool]\
    \ = []\n    var isPrimeCount: [Int] = []\n    var isPrimeCountMax: Int = 1\n \
    \   var isPrimeCountMin: Int = 1\n    var isPrimeCountMinMax: Int = 1\n    var\
    \ isPrimeCountMaxMin: Int = 1\n    var isPrimeCountMaxMinMax: Int = 1\n    var\
    \ isPrimeCountMaxMinMaxMin: Int = 1\n    var isPrimeCountMaxMinMaxMinMax: Int\
    \ = 1\n    var isPrimeCountMaxMinMaxMinMaxMin: Int = 1\n    var isPrimeCountMaxMinMaxMinMaxMinMax:\
    \ Int = 1\n    var isPrimeCountMaxMinMaxMinMaxMinMaxMin: Int = 1\n    var isPrimeCountMaxMinMaxMinMaxMinMaxMinMax:\
    \ Int = 1\n    var isPrimeCountMaxMinMaxMinMaxMinMaxMinMaxMin: Int = 1\n    var\
    \ isPrimeCountMaxMinMaxMinMaxMinMaxMinMaxMinMax: Int = 1\n    var isPrimeCountMaxMinMaxMinMaxMinMaxMinMaxMinMaxMax:\
    \ Int = 1\n    var isPrimeCountMaxMinMaxMinMaxMinMaxMinMaxMinMaxMax: Int = 1\n\
    \    var isPrimeCountMaxMinMaxMinMaxMinMaxMinMaxMinMaxMax: Int = 1\n    var isPrimeCountMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMax:\
    \ Int = 1\n    var isPrimeCountMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMax: Int\
    \ = 1\n    var isPrimeCountMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMax: Int = 1\n\
    \    var isPrimeCountMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMax: Int = 1\n   \
    \ var isPrimeCountMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax: Int = 1\n   \
    \ var isPrimeCountMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMax: Int = 1\n\
    \    var isPrimeCountMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMax: Int = 1\n\
    \    var isPrimeCountMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMax: Int = 1\n\
    \    var isPrimeCountMaxMinMaxMinMaxMinMaxMinMaxMinMax", "    var factors = [Int]()\n\
    \    var i = 2\n    var p = n\n    while p > 1 {\n        while p % i == 0 {\n\
    \            factors.append(i)\n            p /= i\n        }\n        i += 1\n\
    \    }\n    return factors", "    var factorization: [Int] = []\n    var factor\
    \ = 2\n    var factorizationCount = 0\n    var isPrime = true\n    while factorizationCount\
    \ < n {\n        while factorizationCount < n && factor <= n {\n            factorizationCount\
    \ += 1\n            if isPrime {\n                if n % factor == 0 {\n     \
    \               factorizationCount += 1\n                    factorization.append(factor)\n\
    \                    n /= factor\n                } else {\n                 \
    \   isPrime = false\n                }\n            } else {\n               \
    \ if n % (factor * factor) == 0 {\n                    factorizationCount += 1\n\
    \                    factorization.append(factor)\n                    n /= (factor\
    \ * factor)\n                } else {\n                    isPrime = true\n  \
    \              }\n            }\n            factor += 1\n        }\n        if\
    \ n == 1 {\n            factorizationCount += 1\n            factorization.append(1)\n\
    \            n = 2\n        } else {\n            factorizationCount += 1\n  \
    \          factorization.append(n)\n            n = 1\n        }\n    }\n    return\
    \ factorization", "    var factorization: [Int] = []\n    var factorizationCount\
    \ = 0\n    var factorizationSum = 0\n    var factorizationSum2 = 0\n    var factorizationSum3\
    \ = 0\n    var factorizationSum4 = 0\n    var factorizationSum5 = 0\n    var factorizationSum6\
    \ = 0\n    var factorizationSum7 = 0\n    var factorizationSum8 = 0\n    var factorizationSum9\
    \ = 0\n    var factorizationSum10 = 0\n    var factorizationSum11 = 0\n    var\
    \ factorizationSum12 = 0\n    var factorizationSum13 = 0\n    var factorizationSum14\
    \ = 0\n    var factorizationSum15 = 0\n    var factorizationSum16 = 0\n    var\
    \ factorizationSum17 = 0\n    var factorizationSum18 = 0\n    var factorizationSum19\
    \ = 0\n    var factorizationSum20 = 0\n    var factorizationSum21 = 0\n    var\
    \ factorizationSum22 = 0\n    var factorizationSum23 = 0\n    var factorizationSum24\
    \ = 0\n    var factorizationSum25 = 0\n    var factorizationSum26 = 0\n    var\
    \ factorizationSum27 = 0\n    var factorizationSum28 = 0\n    var factorizationSum29\
    \ = 0\n    var factorizationSum30 = 0\n    var factorizationSum31 = 0\n    var\
    \ factorizationSum32 = 0\n    var factorizationSum33 = 0\n    var factorizationSum34\
    \ = 0\n    var factorizationSum35 = 0\n    var factorizationSum36 = 0\n    var\
    \ factorizationSum37 = 0\n    var factorizationSum38 = 0\n    var factorizationSum39\
    \ = 0\n    var factorizationSum40 = 0\n    var factorizationSum41 = 0\n    var\
    \ factorizationSum42 = 0\n    var factorizationSum43 = 0\n    var factorizationSum44\
    \ = 0\n    var factorizationSum45 = 0\n    var factorizationSum46 = 0\n    var\
    \ factorizationSum47 = 0\n    var factorizationSum48 = 0\n    var factorizationSum49\
    \ = 0\n    var factorizationSum50 = 0\n    var factorizationSum51 = 0\n    var\
    \ factorizationSum52 = 0\n    var factorizationSum53 = 0\n    var factorizationSum54\
    \ = 0\n    var factorizationSum55 = 0\n    var factorizationSum56 = 0\n    var\
    \ factorizationSum57 = 0\n    var factorizationSum58 = 0\n    var factorizationSum59\
    \ = 0\n    var factorizationSum60 = 0\n    var factorizationSum61 = 0\n    var\
    \ factorizationSum62 = 0\n    var factorizationSum63 = 0\n    var factorizationSum64\
    \ = 0\n    var factorizationSum65 = 0\n    var factorizationSum66 = 0\n    var\
    \ factorizationSum67 = 0\n    var factorizationSum68 = 0\n    var factorizationSum69\
    \ = 0\n    var factorizationSum70 = 0\n    var factorizationSum71 = 0\n    var\
    \ factorization", "    var factorization = [Int]()\n    var factorizationCount\
    \ = [Int]()\n    var primeFactorization = [Int]()\n    var primeFactorizationCount\
    \ = [Int]()\n    var isPrime = [Bool]()\n    var isPrimeCount = [Int]()\n    var\
    \ isPrimeCount2 = [Int]()\n    var isPrimeCount3 = [Int]()\n    var isPrimeCount4\
    \ = [Int]()\n    var isPrimeCount5 = [Int]()\n    var isPrimeCount6 = [Int]()\n\
    \    var isPrimeCount7 = [Int]()\n    var isPrimeCount8 = [Int]()\n    var isPrimeCount9\
    \ = [Int]()\n    var isPrimeCount10 = [Int]()\n    var isPrimeCount11 = [Int]()\n\
    \    var isPrimeCount12 = [Int]()\n    var isPrimeCount13 = [Int]()\n    var isPrimeCount14\
    \ = [Int]()\n    var isPrimeCount15 = [Int]()\n    var isPrimeCount16 = [Int]()\n\
    \    var isPrimeCount17 = [Int]()\n    var isPrimeCount18 = [Int]()\n    var isPrimeCount19\
    \ = [Int]()\n    var isPrimeCount20 = [Int]()\n    var isPrimeCount21 = [Int]()\n\
    \    var isPrimeCount22 = [Int]()\n    var isPrimeCount23 = [Int]()\n    var isPrimeCount24\
    \ = [Int]()\n    var isPrimeCount25 = [Int]()\n    var isPrimeCount26 = [Int]()\n\
    \    var isPrimeCount27 = [Int]()\n    var isPrimeCount28 = [Int]()\n    var isPrimeCount29\
    \ = [Int]()\n    var isPrimeCount30 = [Int]()\n    var isPrimeCount31 = [Int]()\n\
    \    var isPrimeCount32 = [Int]()\n    var isPrimeCount33 = [Int]()\n    var isPrimeCount34\
    \ = [Int]()\n    var isPrimeCount35 = [Int]()\n    var isPrimeCount36 = [Int]()\n\
    \    var isPrimeCount37 = [Int]()\n    var isPrimeCount38 = [Int]()\n    var isPrimeCount39\
    \ = [Int]()\n    var isPrimeCount40 = [Int]()\n    var isPrimeCount41 = [Int]()\n\
    \    var isPrimeCount42 = [Int]()\n    var isPrime", "    if n < 2 {\n       \
    \ return []\n    }\n    var factors = [Int]()\n    var primes = [Int]()\n    var\
    \ factorization = factorizationOfNumber(n)\n    for factor in factorization {\n\
    \        if factor > 1 {\n            factors.append(factor)\n        }\n    }\n\
    \    for factor in factors {\n        if factor > 1 {\n            primes.append(factor)\n\
    \        }\n    }\n    return primes", "    var factorization: [Int] = []\n  \
    \  var primeFactorization: [Int] = []\n    var isPrime: [Bool] = []\n    var isPrimeCount:\
    \ [Int] = []\n    var isPrimeCountMax: Int = 1\n    var isPrimeCountMin: Int =\
    \ 2\n    var isPrimeCountMinMax: Int = 2\n    var isPrimeCountMaxMin: Int = 2\n\
    \    var isPrimeCountMinMaxMax: Int = 2\n    var isPrimeCountMinMaxMaxMax: Int\
    \ = 2\n    var isPrimeCountMinMaxMaxMaxMax: Int = 2\n    var isPrimeCountMinMaxMaxMaxMax:\
    \ Int = 2\n    var isPrimeCountMinMaxMaxMaxMaxMax: Int = 2\n    var isPrimeCountMinMaxMaxMaxMaxMaxMax:\
    \ Int = 2\n    var isPrimeCountMinMaxMaxMaxMaxMaxMax: Int = 2\n    var isPrimeCountMinMaxMaxMaxMaxMaxMaxMax:\
    \ Int = 2\n    var isPrimeCountMinMaxMaxMaxMaxMaxMaxMaxMax: Int = 2\n    var isPrimeCountMinMaxMaxMaxMaxMaxMaxMaxMax:\
    \ Int = 2\n    var isPrimeCountMinMaxMaxMaxMaxMaxMaxMaxMaxMax: Int = 2\n    var\
    \ isPrimeCountMinMaxMaxMaxMaxMaxMaxMaxMaxMax: Int = 2\n    var isPrimeCountMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMax:\
    \ Int = 2\n    var isPrimeCountMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax: Int = 2\n\
    \    var isPrimeCountMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax: Int = 2\n    var isPrimeCountMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax:\
    \ Int = 2\n    var isPrimeCountMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax: Int = 2\n\
    \    var isPrimeCountMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax: Int = 2\n    var\
    \ isPrimeCountMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax: Int = 2\n    var isPrimeCountMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax:\
    \ Int = 2\n    var isPrimeCountMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax: Int\
    \ = 2\n    var isPrimeCountMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax: Int = 2\n\
    \    var isPrime", "    if n < 2 {\n        return []\n    }\n    var factors:\
    \ [Int] = []\n    var factorization: [Int] = [1]\n    var i = 2\n    var j = 1\n\
    \    var k = 0\n    while i < n {\n        if n % i == 0 {\n            factors.append(i)\n\
    \            factorization[k] += 1\n            n /= i\n            i += 1\n \
    \       } else {\n            j += 1\n            factors.append(j)\n        \
    \    factorization[k] += 1\n        }\n        k += 1\n    }\n    if n != 1 {\n\
    \        factors.append(n)\n        factorization[k] += 1\n    }\n    return factors",
  "    var factors = [Int]()\n    var primeFactors = [Int]()\n    var isPrime = [Bool]()\n\
    \    var isPrimeCount = 0\n    var isPrimeIndex = 0\n    var isPrimeCountMax =\
    \ Int(sqrt(Double(n)))\n    var isPrimeIndexMax = Int(sqrt(Double(n)))\n    var\
    \ isPrimeMax = Int(sqrt(Double(n)))\n    var isPrimeIndexMax = Int(sqrt(Double(n)))\n\
    \    var isPrimeMax = Int(sqrt(Double(n)))\n    var isPrimeIndexMax = Int(sqrt(Double(n)))\n\
    \    var isPrimeMax = Int(sqrt(Double(n)))\n    var isPrimeIndexMax = Int(sqrt(Double(n)))\n\
    \    var isPrimeMax = Int(sqrt(Double(n)))\n    var isPrimeIndexMax = Int(sqrt(Double(n)))\n\
    \    var isPrimeMax = Int(sqrt(Double(n)))\n    var isPrimeIndexMax = Int(sqrt(Double(n)))\n\
    \    var isPrimeMax = Int(sqrt(Double(n)))\n    var isPrimeIndexMax = Int(sqrt(Double(n)))\n\
    \    var isPrimeMax = Int(sqrt(Double(n)))\n    var isPrimeIndexMax = Int(sqrt(Double(n)))\n\
    \    var isPrimeMax = Int(sqrt(Double(n)))\n    var isPrimeIndexMax = Int(sqrt(Double(n)))\n\
    \    var isPrimeMax = Int(sqrt(Double(n)))\n    var isPrimeIndexMax = Int(sqrt(Double(n)))\n\
    \    var isPrimeMax = Int(sqrt(Double(n)))\n    var isPrimeIndexMax = Int(sqrt(Double(n)))\n\
    \    var isPrimeMax = Int(sqrt(Double(n)))\n    var isPrimeIndexMax = Int(sqrt(Double(n)))\n\
    \    var isPrimeMax = Int(sqrt(Double(n)))\n    var isPrimeIndexMax = Int(sqrt(Double(n)))\n\
    \    var isPrimeMax = Int(sqrt(Double(n)))\n    var isPrimeIndexMax = Int(sqrt(Double(n)))\n\
    \    var isPrimeMax = Int(sqrt(Double(n)))\n    var isPrimeIndexMax = Int(sqrt(Double(n)))\n\
    \    var isPrimeMax = Int(sqrt(Double(n)))\n    var isPrimeIndexMax = Int(sqrt(Double(n)))\n\
    \    var isPrimeMax = Int(sqrt(Double(n)))\n    var isPrimeIndexMax = Int(sqrt(Double(n)))\n\
    \    var isPrimeMax = Int(sqrt(Double(n)))\n    var isPrimeIndexMax = Int(sqrt(Double(n)))\n\
    \    var isPrimeMax = Int(sqrt(Double(n)))\n    var isPrimeIndexMax = Int(sqrt(Double(n",
  "    var factors = [Int]()\n    var i = 2\n    while i * i <= n {\n        if n\
    \ % i == 0 {\n            factors.append(i)\n            n /= i\n        } else\
    \ {\n            i += 1\n        }\n    }\n    if n > 1 {\n        factors.append(n)\n\
    \    }\n    return factors", "    var factorization = [Int]()\n    var primeFactorization\
    \ = [Int]()\n    var isPrime = [Bool]()\n    var isPrimeCount = 0\n    var isPrimeSum\
    \ = 0\n    var isPrimeSumCount = 0\n    var isPrimeSumPrimeCount = 0\n    var\
    \ isPrimeSumPrime = 0\n    var isPrimeSumPrimeCountPrime = 0\n    var isPrimeSumPrimePrimeCountPrime\
    \ = 0\n    var isPrimeSumPrimePrimeCountPrimePrime = 0\n    var isPrimeSumPrimePrimePrimeCountPrimePrime\
    \ = 0\n    var isPrimeSumPrimePrimePrimeCountPrimePrimePrime = 0\n    var isPrimeSumPrimePrimePrimeCountPrimePrimePrime\
    \ = 0\n    var isPrimeSumPrimePrimePrimeCountPrimePrimePrimePrime = 0\n    var\
    \ isPrimeSumPrimePrimePrimeCountPrimePrimePrimePrime = 0\n    var isPrimeSumPrimePrimePrimeCountPrimePrimePrimePrimePrime\
    \ = 0\n    var isPrimeSumPrimePrimePrimeCountPrimePrimePrimePrimePrime = 0\n \
    \   var isPrimeSumPrimePrimePrimeCountPrimePrimePrimePrimePrime = 0\n    var isPrimeSumPrimePrimePrimeCountPrimePrimePrimePrimePrimePrime\
    \ = 0\n    var isPrimeSumPrimePrimePrimeCountPrimePrimePrimePrimePrimePrime =\
    \ 0\n    var isPrimeSumPrimePrimePrimeCountPrimePrimePrimePrimePrimePrime = 0\n\
    \    var isPrimeSumPrimePrimePrimeCountPrimePrimePrimePrimePrimePrime = 0\n  \
    \  var isPrimeSumPrimePrimePrimeCountPrimePrimePrimePrimePrimePrime = 0\n    var\
    \ isPrimeSumPrimePrimePrimeCountPrimePrimePrimePrimePrimePrime = 0\n    var isPrimeSumPrimePrimePrimeCountPrimePrimePrimePrimePrimePrime\
    \ = 0\n    var isPrimeSumPrimePrimePrimeCountPrimePrimePrimePrimePrimePrime =\
    \ 0\n    var isPrimeSumPrimePrimePrimeCountPrimePrimePrimePrimePri", "    var\
    \ factorization = [Int]()\n    var i = 2\n    var factor = 2\n    var factorCount\
    \ = 0\n    while i < n {\n        while n % i == 0 {\n            factorization[factorCount]\
    \ = i\n            factorCount += 1\n            n /= i\n        }\n        i\
    \ += 1\n    }\n    if n > 1 {\n        factorization[factorCount] = n\n    }\n\
    \    return factorization", "    var factorization: [Int] = []\n    var factor\
    \ = 2\n    var primeFactorization: [Int] = []\n    var primeFactor = 2\n    var\
    \ isPrime = true\n    var isPrimeFactorization = true\n    var isPrimePrimeFactorization\
    \ = true\n    var isPrimePrimeFactorizationPrime = true\n    var isPrimePrimeFactorizationPrimePrime\
    \ = true\n    var isPrimePrimeFactorizationPrimePrimePrime = true\n    var isPrimePrimeFactorizationPrimePrimePrimePrime\
    \ = true\n    var isPrimePrimeFactorizationPrimePrimePrimePrimePrime = true\n\
    \    var isPrimePrimeFactorizationPrimePrimePrimePrimePrime = true\n    var isPrimePrimeFactorizationPrimePrimePrimePrimePrime\
    \ = true\n    var isPrimePrimeFactorizationPrimePrimePrimePrimePrimePrime = true\n\
    \    var isPrimePrimeFactorizationPrimePrimePrimePrimePrimePrime = true\n    var\
    \ isPrimePrimeFactorizationPrimePrimePrimePrimePrimePrimePrime = true\n    var\
    \ isPrimePrimeFactorizationPrimePrimePrimePrimePrimePrimePrime = true\n    var\
    \ isPrimePrimeFactorizationPrimePrimePrimePrimePrimePrimePrime = true\n    var\
    \ isPrimePrimeFactorizationPrimePrimePrimePrimePrimePrimePrimePrime = true\n \
    \   var isPrimePrimeFactorizationPrimePrimePrimePrimePrimePrimePrimePrime = true\n\
    \    var isPrimePrimeFactorizationPrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true\n    var isPrimePrimeFactorizationPrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true\n    var isPrimePrimeFactorizationPrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true\n    var isPrimePrimeFactorizationPrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true\n    var isPrimePrimeFactorizationPrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true\n    var isPrimePrimeFactorizationPrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true\n    var isPrimePrimeFactorization", "    var factors = [Int]()\n   \
    \ var primes = [Int]()\n    var primeFactors = [Int]()\n    var isPrime = [Bool]()\n\
    \    var isPrimeFactors = [Bool]()\n    var isPrimeFactorsCount = [Int]()\n  \
    \  var isPrimeFactorsCountMax = Int()\n    var isPrimeFactorsCountMaxIndex = Int()\n\
    \    var isPrimeFactorsCountMaxValue = Int()\n    var isPrimeFactorsCountMaxValueIndex\
    \ = Int()\n    var isPrimeFactorsCountMaxValueValue = Int()\n    var isPrimeFactorsCountMaxValueValueIndex\
    \ = Int()\n    var isPrimeFactorsCountMaxValueValueValue = Int()\n    var isPrimeFactorsCountMaxValueValueValueIndex\
    \ = Int()\n    var isPrimeFactorsCountMaxValueValueValueValue = Int()\n    var\
    \ isPrimeFactorsCountMaxValueValueValueValueIndex = Int()\n    var isPrimeFactorsCountMaxValueValueValueValueValue\
    \ = Int()\n    var isPrimeFactorsCountMaxValueValueValueValueIndex = Int()\n \
    \   var isPrimeFactorsCountMaxValueValueValueValueValue = Int()\n    var isPrimeFactorsCountMaxValueValueValueValueIndex\
    \ = Int()\n    var isPrimeFactorsCountMaxValueValueValueValueValue = Int()\n \
    \   var isPrimeFactorsCountMaxValueValueValueValueIndex = Int()\n    var isPrimeFactorsCountMaxValueValueValueValueValue\
    \ = Int()\n    var isPrimeFactorsCountMaxValueValueValueValueIndex = Int()\n \
    \   var isPrimeFactorsCountMaxValueValueValueValueValue = Int()\n    var isPrimeFactorsCountMaxValueValueValueValueIndex\
    \ = Int()\n    var isPrimeFactorsCountMaxValueValueValueValueValue = Int()\n \
    \   var isPrimeFactorsCountMaxValueValueValueValueIndex = Int()\n    var isPrimeFactorsCountMaxValueValueValueValueValue\
    \ = Int()\n    var isPrimeFactorsCountMaxValueValueValueValueIndex = Int()\n \
    \   var isPrimeFactorsCountMaxValueValueValueValueValue = Int()\n    var isPrimeFactorsCountMaxValueValueValueValueIndex\
    \ = Int()\n    var isPrimeFactorsCountMaxValueValueValueValueValue = Int()\n \
    \   var isPrimeFactorsCountMaxValueValueValueValueIndex = Int()\n    var isPrimeFactorsCountMaxValueValueValueValueValue\
    \ = Int()\n    var isPrimeFactorsCountMaxValueValueValueValueIndex = Int()\n \
    \   var isPri", "    var factorization = [Int]()\n    var primeFactorization =\
    \ [Int]()\n    var primeFactorizationIndex = 0\n    var isPrime = true\n    var\
    \ isPrimeIndex = 0\n    var isPrimeFactorization = false\n    var isPrimeFactorizationIndex\
    \ = 0\n    var isPrimePrimeFactorization = false\n    var isPrimePrimeFactorizationIndex\
    \ = 0\n    var isPrimePrimeFactorizationPrime = false\n    var isPrimePrimeFactorizationPrimeIndex\
    \ = 0\n    var isPrimePrimeFactorizationPrimePrime = false\n    var isPrimePrimeFactorizationPrimePrimeIndex\
    \ = 0\n    var isPrimePrimeFactorizationPrimePrimePrime = false\n    var isPrimePrimeFactorizationPrimePrimePrimeIndex\
    \ = 0\n    var isPrimePrimeFactorizationPrimePrimePrimePrime = false\n    var\
    \ isPrimePrimeFactorizationPrimePrimePrimePrimeIndex = 0\n    var isPrimePrimeFactorizationPrimePrimePrimePrimePrime\
    \ = false\n    var isPrimePrimeFactorizationPrimePrimePrimePrimePrimeIndex = 0\n\
    \    var isPrimePrimeFactorizationPrimePrimePrimePrimePrimePrime = false\n   \
    \ var isPrimePrimeFactorizationPrimePrimePrimePrimePrimePrime = false\n    var\
    \ isPrimePrimeFactorizationPrimePrimePrimePrimePrimePrimePrime = false\n    var\
    \ isPrimePrimeFactorizationPrimePrimePrimePrimePrimePrimePrime = false\n    var\
    \ isPrimePrimeFactorizationPrimePrimePrimePrimePrimePrimePrimePrime = false\n\
    \    var isPrimePrimeFactorizationPrimePrimePrimePrimePrimePrimePrimePrime = false\n\
    \    var isPrimePrimeFactorizationPrimePrimePrimePrimePrimePrimePrimePrime = false\n\
    \    var isPrimePrimeFactorizationPrimePrimePrimePrimePrimePrimePrimePrime = false\n\
    \    var isPrimePrimeFactorizationPrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = false\n    var isPrimePrimeFactorizationPrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = false\n    var isPrimePrimeFactorizationPrimePrimePrimePrimePrimePrime", " \
    \   var factorization: [Int] = []\n    var factorizationCount = 0\n    var currentFactorizationCount\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization: Int\
    \ = 0\n    var currentFactorization: Int = 0\n    var currentFactorization", " \
    \   var factorization: [Int] = []\n    var factor: Int\n    var i: Int\n    var\
    \ j: Int\n    var k: Int\n    var count: Int\n    for i = 2; i <= n / 2; i +=\
    \ 1 {\n        factorization = factorization + [Int]()\n        for j = i; j <=\
    \ n / i; j += 1 {\n            factor = j\n            count = 0\n           \
    \ for k = i + 1; k <= n / i; k += 1 {\n                if k == i {\n         \
    \           continue\n                }\n                if factor % k == 0 {\n\
    \                    count += 1\n                }\n            }\n          \
    \  if count == i {\n                factorization = factorization + [Int]()\n\
    \                factorization = factorization + [factor]\n            }\n   \
    \     }\n    }\n    return factorization", "    var factorization: [Int] = []\n\
    \    var i = 2\n    while i * i <= n {\n        if n % i == 0 {\n            factorization\
    \ = append(factorization, i)\n            n /= i\n        } else {\n         \
    \   i += 1\n        }\n    }\n    if n > 1 {\n        factorization = append(factorization,\
    \ n)\n    }\n    return factorization", "    var factors = [Int]()\n    var primes\
    \ = [Int]()\n    var i = 2\n    var isPrime = true\n    var factorization = [Int]()\n\
    \    var factorizationIndex = 0\n    var isPrimeIndex = 0\n    var isPrimeIndex2\
    \ = 0\n    var isPrimeIndex3 = 0\n    var isPrimeIndex4 = 0\n    var isPrimeIndex5\
    \ = 0\n    var isPrimeIndex6 = 0\n    var isPrimeIndex7 = 0\n    var isPrimeIndex8\
    \ = 0\n    var isPrimeIndex9 = 0\n    var isPrimeIndex10 = 0\n    var isPrimeIndex11\
    \ = 0\n    var isPrimeIndex12 = 0\n    var isPrimeIndex13 = 0\n    var isPrimeIndex14\
    \ = 0\n    var isPrimeIndex15 = 0\n    var isPrimeIndex16 = 0\n    var isPrimeIndex17\
    \ = 0\n    var isPrimeIndex18 = 0\n    var isPrimeIndex19 = 0\n    var isPrimeIndex20\
    \ = 0\n    var isPrimeIndex21 = 0\n    var isPrimeIndex22 = 0\n    var isPrimeIndex23\
    \ = 0\n    var isPrimeIndex24 = 0\n    var isPrimeIndex25 = 0\n    var isPrimeIndex26\
    \ = 0\n    var isPrimeIndex27 = 0\n    var isPrimeIndex28 = 0\n    var isPrimeIndex29\
    \ = 0\n    var isPrimeIndex30 = 0\n    var isPrimeIndex31 = 0\n    var isPrimeIndex32\
    \ = 0\n    var isPrimeIndex33 = 0\n    var isPrimeIndex34 = 0\n    var isPrimeIndex35\
    \ = 0\n    var isPrimeIndex36 = 0\n    var isPrimeIndex37 = 0\n    var isPrimeIndex38\
    \ = 0\n    var isPrimeIndex39 = 0\n    var isPrimeIndex40 = 0\n    var isPrimeIndex41\
    \ = 0\n    var isPrimeIndex42 = 0\n    var isPrimeIndex43 = 0\n    var isPrimeIndex44\
    \ = 0\n    var isPrimeIndex45 = 0\n    var isPrimeIndex46 = 0\n    var isPrimeIndex47\
    \ = 0\n    var isPrimeIndex48 = 0\n    var isPrimeIndex49 = 0\n    var isPrimeIndex50\
    \ = 0\n    var isPrimeIndex51 = 0\n    var isPrimeIndex52 = 0\n    var isPrimeIndex53\
    \ = 0\n    var isPrimeIndex54 = 0\n    var isPrimeIndex55 = 0\n    var isPrimeIndex56\
    \ = 0\n    var isPrimeIndex57 = 0\n    var isPrimeIndex58 = 0\n    var isPrimeIndex59\
    \ = 0\n    var isPri", "    if n < 2 {\n        return []\n    }\n    var factors\
    \ = [Int]()\n    var factorization = [Int]()\n    var current = 0\n    var factorizationIndex\
    \ = 0\n    var isPrime = true\n    var isFactorization = false\n    var isPrimeIndex\
    \ = 0\n    var isPrimeIndex2 = 0\n    var isPrimeIndex3 = 0\n    var isPrimeIndex4\
    \ = 0\n    var isPrimeIndex5 = 0\n    var isPrimeIndex6 = 0\n    var isPrimeIndex7\
    \ = 0\n    var isPrimeIndex8 = 0\n    var isPrimeIndex9 = 0\n    var isPrimeIndex10\
    \ = 0\n    var isPrimeIndex11 = 0\n    var isPrimeIndex12 = 0\n    var isPrimeIndex13\
    \ = 0\n    var isPrimeIndex14 = 0\n    var isPrimeIndex15 = 0\n    var isPrimeIndex16\
    \ = 0\n    var isPrimeIndex17 = 0\n    var isPrimeIndex18 = 0\n    var isPrimeIndex19\
    \ = 0\n    var isPrimeIndex20 = 0\n    var isPrimeIndex21 = 0\n    var isPrimeIndex22\
    \ = 0\n    var isPrimeIndex23 = 0\n    var isPrimeIndex24 = 0\n    var isPrimeIndex25\
    \ = 0\n    var isPrimeIndex26 = 0\n    var isPrimeIndex27 = 0\n    var isPrimeIndex28\
    \ = 0\n    var isPrimeIndex29 = 0\n    var isPrimeIndex30 = 0\n    var isPrimeIndex31\
    \ = 0\n    var isPrimeIndex32 = 0\n    var isPrimeIndex33 = 0\n    var isPrimeIndex34\
    \ = 0\n    var isPrimeIndex35 = 0\n    var isPrimeIndex36 = 0\n    var isPrimeIndex37\
    \ = 0\n    var isPrimeIndex38 = 0\n    var isPrimeIndex39 = 0\n    var isPrimeIndex40\
    \ = 0\n    var isPrimeIndex41 = 0\n    var isPrimeIndex42 = 0\n    var isPrimeIndex43\
    \ = 0\n    var isPrimeIndex44 = 0\n    var isPrimeIndex45 = 0\n    var isPrimeIndex46\
    \ = 0\n    var isPrimeIndex47 = 0\n    var isPrimeIndex48 = 0\n    var isPrimeIndex49\
    \ = 0\n    var isPrimeIndex50 = 0\n    var isPrimeIndex51 = 0\n    var isPrimeIndex52\
    \ = 0\n    var isPrimeIndex53 = 0\n    var isPrimeIndex54 = 0\n    var isPrimeIndex55\
    \ = 0\n    var isPrimeIndex56 = 0\n    var isPrimeIndex57 = 0\n    var isPrimeIndex58\
    \ = 0\n    var isPrime", "    var factorization: [Int] = []\n    var primeFactorization:\
    \ [Int] = []\n    var isPrime: [Bool] = []\n    var isPrimeCount: [Int] = []\n\
    \    var isPrimeCountMax: Int = 1\n    var isPrimeCountMin: Int = 2\n    var isPrimeCountMaxMin:\
    \ Int = 2\n    var isPrimeCountMaxMinMin: Int = 2\n    var isPrimeCountMaxMinMin2:\
    \ Int = 2\n    var isPrimeCountMaxMinMin3: Int = 2\n    var isPrimeCountMaxMinMin4:\
    \ Int = 2\n    var isPrimeCountMaxMinMin5: Int = 2\n    var isPrimeCountMaxMinMin6:\
    \ Int = 2\n    var isPrimeCountMaxMinMin7: Int = 2\n    var isPrimeCountMaxMinMin8:\
    \ Int = 2\n    var isPrimeCountMaxMinMin9: Int = 2\n    var isPrimeCountMaxMinMin10:\
    \ Int = 2\n    var isPrimeCountMaxMinMin11: Int = 2\n    var isPrimeCountMaxMinMin12:\
    \ Int = 2\n    var isPrimeCountMaxMinMin13: Int = 2\n    var isPrimeCountMaxMinMin14:\
    \ Int = 2\n    var isPrimeCountMaxMinMin15: Int = 2\n    var isPrimeCountMaxMinMin16:\
    \ Int = 2\n    var isPrimeCountMaxMinMin17: Int = 2\n    var isPrimeCountMaxMinMin18:\
    \ Int = 2\n    var isPrimeCountMaxMinMin19: Int = 2\n    var isPrimeCountMaxMinMin20:\
    \ Int = 2\n    var isPrimeCountMaxMinMin21: Int = 2\n    var isPrimeCountMaxMinMin22:\
    \ Int = 2\n    var isPrimeCountMaxMinMin23: Int = 2\n    var isPrimeCountMaxMinMin24:\
    \ Int = 2\n    var isPrimeCountMaxMinMin25: Int = 2\n    var isPrimeCountMaxMinMin26:\
    \ Int = 2\n    var isPrimeCountMaxMinMin27: Int = 2\n    var isPrimeCountMaxMinMin28:\
    \ Int = 2\n    var isPrimeCountMaxMinMin29: Int = 2\n    var isPrimeCountMaxMinMin30:\
    \ Int = 2\n    var isPrimeCountMaxMinMin31: Int = 2\n    var isPrimeCountMaxMinMin32:\
    \ Int = 2\n    var isPri", "    var factors = [Int]()\n    var i = 2\n    var\
    \ j = 1\n    var k = n\n    while i <= k {\n        while k % i == 0 {\n     \
    \       factors.append(i)\n            k /= i\n        }\n        i += 1\n   \
    \ }\n    return factors", "    var factors: [Int] = []\n    var primeFactors =\
    \ factorization(n)\n    for factor in primeFactors {\n        factors.append(factor)\n\
    \    }\n    return factors", "    var factors = [Int]()\n    var i = 2\n    var\
    \ j = 0\n    var isPrime = true\n    var isDivisor = true\n    var isFactor =\
    \ true\n    var isPrimeDivisor = true\n    var isPrimeFactor = true\n    var isPrimeDivisorFactor\
    \ = true\n    var isPrimeFactorDivisor = true\n    var isPrimeFactorDivisorDivisor\
    \ = true\n    var isPrimeFactorDivisorFactor = true\n    var isPrimeFactorDivisorDivisorFactor\
    \ = true\n    var isPrimeFactorDivisorFactorDivisor = true\n    var isPrimeFactorDivisorDivisorFactor\
    \ = true\n    var isPrimeFactorDivisorFactorDivisor = true\n    var isPrimeFactorDivisorDivisorFactor\
    \ = true\n    var isPrimeFactorDivisorFactorDivisor = true\n    var isPrimeFactorDivisorDivisorFactor\
    \ = true\n    var isPrimeFactorDivisorFactorDivisor = true\n    var isPrimeFactorDivisorDivisorFactor\
    \ = true\n    var isPrimeFactorDivisorFactorDivisor = true\n    var isPrimeFactorDivisorDivisorFactor\
    \ = true\n    var isPrimeFactorDivisorFactorDivisor = true\n    var isPrimeFactorDivisorDivisorFactor\
    \ = true\n    var isPrimeFactorDivisorFactorDivisor = true\n    var isPrimeFactorDivisorDivisorFactor\
    \ = true\n    var isPrimeFactorDivisorFactorDivisor = true\n    var isPrimeFactorDivisorDivisorFactor\
    \ = true\n    var isPrimeFactorDivisorFactorDivisor = true\n    var isPrimeFactorDivisorDivisorFactor\
    \ = true\n    var isPrimeFactorDivisorFactorDivisor = true\n    var isPrimeFactorDivisorDivisorFactor\
    \ = true\n    var isPrimeFactorDivisorFactorDivisor = true\n    var isPrimeFactorDivisorDivisorFactor\
    \ = true\n    var isPrimeFactorDivisorFactorDivisor = true\n    var isPrimeFactorDivisorDivisorFactor\
    \ = true\n    var isPrimeFactorDivisorFactorDivisor = true\n    var isPrimeFactorDivisorDivisorFactor\
    \ = true\n    var isPrimeFactorDivisorFactorDivisor = true\n    var isPrimeFactorDivisorDivisorFactor\
    \ = true\n    var isPrimeFactorDivisorFactorDivisor = true\n    var isPrimeFactorDivisorDivisorFactor\
    \ = true\n    var isPrimeFactorDivisorFactorDivisor = true\n    var isPrimeFactorDivisorDivisorFactor\
    \ = true\n    var isPrimeFactorDivisorFactorDivisor = true\n    var isPrimeFactorDivisorDivisorFactor\
    \ = true\n    var isPrimeFactorDi", "    var factorization = [Int]()\n    var\
    \ primeFactorization = [Int]()\n    var primeFactorizationCount = [Int]()\n  \
    \  var isPrime = [Bool]()\n    var isPrimeCount = [Int]()\n    var isPrimeCountMax\
    \ = Int()\n    var isPrimeCountMaxIndex = Int()\n    var isPrimeCountMin = Int()\n\
    \    var isPrimeCountMinIndex = Int()\n    var isPrimeCountSum = Int()\n    var\
    \ isPrimeCountSumIndex = Int()\n    var isPrimeCountSumMax = Int()\n    var isPrimeCountSumMaxIndex\
    \ = Int()\n    var isPrimeCountSumMin = Int()\n    var isPrimeCountSumMinIndex\
    \ = Int()\n    var isPrimeCountSumSum = Int()\n    var isPrimeCountSumSumIndex\
    \ = Int()\n    var isPrimeCountSumSumMax = Int()\n    var isPrimeCountSumSumMaxIndex\
    \ = Int()\n    var isPrimeCountSumSumMin = Int()\n    var isPrimeCountSumSumMinIndex\
    \ = Int()\n    var isPrimeCountSumSumSum = Int()\n    var isPrimeCountSumSumSumIndex\
    \ = Int()\n    var isPrimeCountSumSumSumMax = Int()\n    var isPrimeCountSumSumSumMaxIndex\
    \ = Int()\n    var isPrimeCountSumSumSumMin = Int()\n    var isPrimeCountSumSumSumMinIndex\
    \ = Int()\n    var isPrimeCountSumSumSumSum = Int()\n    var isPrimeCountSumSumSumSumIndex\
    \ = Int()\n    var isPrimeCountSumSumSumSumMax = Int()\n    var isPrimeCountSumSumSumSumMaxIndex\
    \ = Int()\n    var isPrimeCountSumSumSumSumMin = Int()\n    var isPrimeCountSumSumSumSumMinIndex\
    \ = Int()\n    var isPrimeCountSumSumSumSumSum = Int()\n    var isPrimeCountSumSumSumSumSumIndex\
    \ = Int()\n    var isPrimeCountSumSumSumSumSumMax = Int()\n    var isPrimeCountSumSumSumSumSumMaxIndex\
    \ = Int()\n    var isPrimeCountSumSumSumSumSumMin = Int()\n    var isPrimeCountSumSumSumSumSumMinIndex\
    \ = Int()\n    var isPrimeCountSumSumSumSumSumSum = Int()\n    var isPrimeCountSumSumSumSumSumSumIndex\
    \ = Int()\n    var isPrimeCountSumSumSumSumSumSumMax = Int()\n", "    var factorization\
    \ = [Int]()\n    var factorizationCount = [Int]()\n    var factorizationSum =\
    \ 0\n    var isPrime = true\n    var isPrimeSum = 0\n    var isPrimeSum2 = 0\n\
    \    var isPrimeSum3 = 0\n    var isPrimeSum4 = 0\n    var isPrimeSum5 = 0\n \
    \   var isPrimeSum6 = 0\n    var isPrimeSum7 = 0\n    var isPrimeSum8 = 0\n  \
    \  var isPrimeSum9 = 0\n    var isPrimeSum10 = 0\n    var isPrimeSum11 = 0\n \
    \   var isPrimeSum12 = 0\n    var isPrimeSum13 = 0\n    var isPrimeSum14 = 0\n\
    \    var isPrimeSum15 = 0\n    var isPrimeSum16 = 0\n    var isPrimeSum17 = 0\n\
    \    var isPrimeSum18 = 0\n    var isPrimeSum19 = 0\n    var isPrimeSum20 = 0\n\
    \    var isPrimeSum21 = 0\n    var isPrimeSum22 = 0\n    var isPrimeSum23 = 0\n\
    \    var isPrimeSum24 = 0\n    var isPrimeSum25 = 0\n    var isPrimeSum26 = 0\n\
    \    var isPrimeSum27 = 0\n    var isPrimeSum28 = 0\n    var isPrimeSum29 = 0\n\
    \    var isPrimeSum30 = 0\n    var isPrimeSum31 = 0\n    var isPrimeSum32 = 0\n\
    \    var isPrimeSum33 = 0\n    var isPrimeSum34 = 0\n    var isPrimeSum35 = 0\n\
    \    var isPrimeSum36 = 0\n    var isPrimeSum37 = 0\n    var isPrimeSum38 = 0\n\
    \    var isPrimeSum39 = 0\n    var isPrimeSum40 = 0\n    var isPrimeSum41 = 0\n\
    \    var isPrimeSum42 = 0\n    var isPrimeSum43 = 0\n    var isPrimeSum44 = 0\n\
    \    var isPrimeSum45 = 0\n    var isPrimeSum46 = 0\n    var isPrimeSum47 = 0\n\
    \    var isPrimeSum48 = 0\n    var isPrimeSum49 = 0\n    var isPrimeSum50 = 0\n\
    \    var isPrimeSum51 = 0\n    var isPrimeSum52 = 0\n    var isPrimeSum53 = 0\n\
    \    var isPrimeSum54 = 0\n    var isPrimeSum55 = 0\n    var isPrimeSum56 = 0\n\
    \    var isPrimeSum57 = 0\n    var isPrimeSum58 = 0\n    var isPrimeSum59 = 0\n\
    \    var isPrimeSum60 = 0\n    var isPrime", "    var factors = [Int]()\n    var\
    \ i = 2\n    while i * i <= n {\n        if n % i == 0 {\n            factors.append(i)\n\
    \            n /= i\n        }\n        i += 1\n    }\n    if n > 1 {\n      \
    \  factors.append(n)\n    }\n    return factors", "    var factors = [Int]()\n\
    \    var i = 2\n    var factor = 1\n    while i <= n {\n        if n % i == 0\
    \ {\n            factors.append(factor)\n            factor = 1\n        } else\
    \ {\n            factor *= i\n        }\n        i += 1\n    }\n    factors.append(factor)\n\
    \    return factors", "    var factorization = [Int]()\n    var factorizationCount\
    \ = [Int]()\n    var factorizationIndex = 0\n    var factorizationValue = 1\n\
    \    var factorizationValueCount = 0\n    var factorizationValueIndex = 0\n  \
    \  var factorizationValueCountMax = 0\n    var factorizationValueCountMaxIndex\
    \ = 0\n    var factorizationValueCountMin = 0\n    var factorizationValueCountMinIndex\
    \ = 0\n    var factorizationValueCountMaxIndex = 0\n    var factorizationValueCountMinIndex\
    \ = 0\n    var factorizationValueCountMaxIndex = 0\n    var factorizationValueCountMinIndex\
    \ = 0\n    var factorizationValueCountMaxIndex = 0\n    var factorizationValueCountMinIndex\
    \ = 0\n    var factorizationValueCountMaxIndex = 0\n    var factorizationValueCountMinIndex\
    \ = 0\n    var factorizationValueCountMaxIndex = 0\n    var factorizationValueCountMinIndex\
    \ = 0\n    var factorizationValueCountMaxIndex = 0\n    var factorizationValueCountMinIndex\
    \ = 0\n    var factorizationValueCountMaxIndex = 0\n    var factorizationValueCountMinIndex\
    \ = 0\n    var factorizationValueCountMaxIndex = 0\n    var factorizationValueCountMinIndex\
    \ = 0\n    var factorizationValueCountMaxIndex = 0\n    var factorizationValueCountMinIndex\
    \ = 0\n    var factorizationValueCountMaxIndex = 0\n    var factorizationValueCountMinIndex\
    \ = 0\n    var factorizationValueCountMaxIndex = 0\n    var factorizationValueCountMinIndex\
    \ = 0\n    var factorizationValueCountMaxIndex = 0\n    var factorizationValueCountMinIndex\
    \ = 0\n    var factorizationValueCountMaxIndex = 0\n    var factorizationValueCountMinIndex\
    \ = 0\n    var factorizationValueCountMaxIndex = 0\n    var factorizationValueCountMinIndex\
    \ = 0\n    var factorizationValueCountMaxIndex = 0\n    var factorizationValueCountMinIndex\
    \ = 0\n    var factorizationValueCountMaxIndex = 0\n    var factorizationValueCountMinIndex\
    \ = 0\n    var factorizationValueCountMaxIndex = 0\n    var factorizationValueCountMinIndex\
    \ = 0\n    var factorizationValueCountMaxIndex = 0\n    var factorizationValueCountMinIndex\
    \ = 0\n    var factorizationValueCountMaxIndex = 0\n    var factorizationValueCountMinIndex\
    \ = 0\n    var factorizationValueCountMaxIndex = 0\n    var factorizationValueCountMinIndex\
    \ = 0\n    var factorizationValueCountMaxIndex = 0\n    var factorizationValueCountMinIndex\
    \ = 0\n    var factorizationValueCountMaxIndex = 0\n    var factorizationValueCountMinIndex\
    \ = 0\n    var factorizationValueCountMaxIndex = 0\n    var factorizationValueCountMinIndex\
    \ = 0\n    var factorizationValueCountMaxIndex = 0\n    var factorizationValueCountMinIndex\
    \ = 0\n    var factorization", "    var factorization: [Int] = []\n    var primeFactorization:\
    \ [Int] = []\n    var isPrime: [Bool] = []\n    var isPrimeCount: [Int] = []\n\
    \    var isPrimeCountMax: Int = 1\n    var isPrimeCountMin: Int = 1\n    var isPrimeCountMinMax:\
    \ Int = 1\n    var isPrimeCountMaxMin: Int = 1\n    var isPrimeCountMinMaxMax:\
    \ Int = 1\n    var isPrimeCountMinMaxMaxMax: Int = 1\n    var isPrimeCountMinMaxMaxMaxMax:\
    \ Int = 1\n    var isPrimeCountMinMaxMaxMaxMax: Int = 1\n    var isPrimeCountMinMaxMaxMaxMaxMax:\
    \ Int = 1\n    var isPrimeCountMinMaxMaxMaxMaxMaxMax: Int = 1\n    var isPrimeCountMinMaxMaxMaxMaxMaxMax:\
    \ Int = 1\n    var isPrimeCountMinMaxMaxMaxMaxMaxMaxMax: Int = 1\n    var isPrimeCountMinMaxMaxMaxMaxMaxMaxMaxMax:\
    \ Int = 1\n    var isPrimeCountMinMaxMaxMaxMaxMaxMaxMaxMax: Int = 1\n    var isPrimeCountMinMaxMaxMaxMaxMaxMaxMaxMaxMax:\
    \ Int = 1\n    var isPrimeCountMinMaxMaxMaxMaxMaxMaxMaxMaxMax: Int = 1\n    var\
    \ isPrimeCountMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMax: Int = 1\n    var isPrimeCountMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax:\
    \ Int = 1\n    var isPrimeCountMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax: Int = 1\n\
    \    var isPrimeCountMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax: Int = 1\n    var isPrimeCountMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax:\
    \ Int = 1\n    var isPrimeCountMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax: Int\
    \ = 1\n    var isPrimeCountMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax: Int = 1\n\
    \    var isPrimeCountMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax: Int = 1\n\
    \    var isPrimeCountMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax: Int = 1\n\
    \    var isPrimeCountMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax: Int = ", " \
    \   if n == 1 {\n        return [1]\n    }\n    var factors = [Int]()\n    var\
    \ i = 2\n    var j = 1\n    while i * j <= n {\n        if n % i == 0 {\n    \
    \        factors.append(i)\n            n /= i\n        }\n        if n % j ==\
    \ 0 {\n            factors.append(j)\n            n /= j\n        }\n        i\
    \ += 1\n        j += 1\n    }\n    if n > 1 {\n        factors.append(n)\n   \
    \ }\n    return factors", "    var factorization = [Int]()\n    var factorizationCount\
    \ = [Int]()\n    var isPrime = [Bool]()\n    var isPrimeCount = [Int]()\n    var\
    \ isPrimeSum = 0\n    var isPrimeSumCount = 0\n    var isPrimeSum2 = 0\n    var\
    \ isPrimeSum2Count = 0\n    var isPrimeSum3 = 0\n    var isPrimeSum3Count = 0\n\
    \    var isPrimeSum4 = 0\n    var isPrimeSum4Count = 0\n    var isPrimeSum5 =\
    \ 0\n    var isPrimeSum5Count = 0\n    var isPrimeSum6 = 0\n    var isPrimeSum6Count\
    \ = 0\n    var isPrimeSum7 = 0\n    var isPrimeSum7Count = 0\n    var isPrimeSum8\
    \ = 0\n    var isPrimeSum8Count = 0\n    var isPrimeSum9 = 0\n    var isPrimeSum9Count\
    \ = 0\n    var isPrimeSum10 = 0\n    var isPrimeSum10Count = 0\n    var isPrimeSum11\
    \ = 0\n    var isPrimeSum11Count = 0\n    var isPrimeSum12 = 0\n    var isPrimeSum12Count\
    \ = 0\n    var isPrimeSum13 = 0\n    var isPrimeSum13Count = 0\n    var isPrimeSum14\
    \ = 0\n    var isPrimeSum14Count = 0\n    var isPrimeSum15 = 0\n    var isPrimeSum15Count\
    \ = 0\n    var isPrimeSum16 = 0\n    var isPrimeSum16Count = 0\n    var isPrimeSum17\
    \ = 0\n    var isPrimeSum17Count = 0\n    var isPrimeSum18 = 0\n    var isPrimeSum18Count\
    \ = 0\n    var isPrimeSum19 = 0\n    var isPrimeSum19Count = 0\n    var isPrimeSum20\
    \ = 0\n    var isPrimeSum20Count = 0\n    var isPrimeSum21 = 0\n    var isPrimeSum21Count\
    \ = 0\n    var isPrimeSum22 = 0\n    var isPrimeSum22Count = 0\n    var isPrimeSum23\
    \ = 0\n    var isPrimeSum23Count = 0\n    var isPrimeSum24 = 0\n    var isPrimeSum24Count\
    \ = 0\n    var isPrimeSum25 = 0\n    var isPrimeSum25Count = 0\n    var isPrimeSum26\
    \ = 0\n    var isPrimeSum26Count = 0\n    var isPrimeSum27 = 0\n    var isPrimeSum27Count\
    \ = 0\n    var isPrimeSum28 = 0\n    var isPrimeSum28Count = 0\n    var is", " \
    \   var factorization: [Int] = []\n    var factorizationCount = 0\n    var isPrime\
    \ = true\n    var isPrimeCount = 0\n    var isPrimeFactorization = false\n   \
    \ var isPrimeFactorizationCount = 0\n    var isPrimeFactorizationPrime = false\n\
    \    var isPrimeFactorizationPrimeCount = 0\n    var isPrimeFactorizationPrimeFactorization\
    \ = false\n    var isPrimeFactorizationPrimeFactorizationCount = 0\n    var isPrimeFactorizationPrimeFactorizationPrime\
    \ = false\n    var isPrimeFactorizationPrimeFactorizationPrimeCount = 0\n    var\
    \ isPrimeFactorizationPrimeFactorizationPrimeFactorization = false\n    var isPrimeFactorizationPrimeFactorizationPrimeFactorizationCount\
    \ = 0\n    var isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime =\
    \ false\n    var isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeCount\
    \ = 0\n    var isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = false\n    var isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationCount\
    \ = 0\n    var isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = false\n    var isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationCount\
    \ = 0\n    var isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = false\n    var isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeCount\
    \ = 0\n    var isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = false\n    var isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationCount\
    \ = 0\n    var isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = false\n    var isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationCount\
    \ = 0\n    var isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = false\n    var isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeCount\
    \ = 0\n    var isPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = false\n    var isPrimeFactorizationPrimeFactorizationPrimeFactorization",
  "    var factorization: [Int] = []\n    var i = 2\n    while i * i <= n {\n    \
    \    if n % i == 0 {\n            factorization = append(factorization, i)\n \
    \           n /= i\n        }\n        i += 1\n    }\n    if n > 1 {\n       \
    \ factorization = append(factorization, n)\n    }\n    return factorization",
  "    var factors = [Int]()\n    var factorization = factorizationOfNumber(n)\n \
    \   for factor in factorization {\n        if factors.contains(factor) {\n   \
    \         factors[factor] += 1\n        } else {\n            factors.append(factor)\n\
    \        }\n    }\n    return factors", "    var factorization = [Int]()\n   \
    \ var factorizationCount = [Int]()\n    var primeFactorization = [Int]()\n   \
    \ var primeFactorizationCount = [Int]()\n    var isPrime = [Bool]()\n    var isPrimeCount\
    \ = [Int]()\n    var isPrimePrime = [Bool]()\n    var isPrimePrimeCount = [Int]()\n\
    \    var isPrimePrimePrime = [Bool]()\n    var isPrimePrimePrimeCount = [Int]()\n\
    \    var isPrimePrimePrimePrime = [Bool]()\n    var isPrimePrimePrimePrimeCount\
    \ = [Int]()\n    var isPrimePrimePrimePrimePrime = [Bool]()\n    var isPrimePrimePrimePrimePrimeCount\
    \ = [Int]()\n    var isPrimePrimePrimePrimePrimePrime = [Bool]()\n    var isPrimePrimePrimePrimePrimePrimeCount\
    \ = [Int]()\n    var isPrimePrimePrimePrimePrimePrimePrime = [Bool]()\n    var\
    \ isPrimePrimePrimePrimePrimePrimePrimeCount = [Int]()\n    var isPrimePrimePrimePrimePrimePrimePrime\
    \ = [Bool]()\n    var isPrimePrimePrimePrimePrimePrimePrimeCount = [Int]()\n \
    \   var isPrimePrimePrimePrimePrimePrimePrimePrime = [Bool]()\n    var isPrimePrimePrimePrimePrimePrimePrimeCount\
    \ = [Int]()\n    var isPrimePrimePrimePrimePrimePrimePrimePrime = [Bool]()\n \
    \   var isPrimePrimePrimePrimePrimePrimePrimePrimeCount = [Int]()\n    var isPrimePrimePrimePrimePrimePrimePrimePrime\
    \ = [Bool]()\n    var isPrimePrimePrimePrimePrimePrimePrimePrimeCount = [Int]()\n\
    \    var isPrimePrimePrimePrimePrimePrimePrimePrimePrime = [Bool]()\n    var isPrimePrimePrimePrimePrimePrimePrimePrimeCount\
    \ = [Int]()\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrime = [Bool]()\n\
    \    var isPri", "    var factorization: [Int] = []\n    var i = 2\n    var factor\
    \ = 2\n    while i <= n {\n        if n % i == 0 {\n            factorization[factor]\
    \ = i\n            factor += 1\n        }\n        i += 1\n    }\n    return factorization",
  "    var factors = [Int]()\n    var i = 2\n    var p = 2\n    while i <= n {\n \
    \       if n % i == 0 {\n            factors.append(i)\n            n /= i\n \
    \       } else {\n            i += 1\n        }\n    }\n    if n > 1 {\n     \
    \   factors.append(n)\n    }\n    return factors", "    var factors = [Int]()\n\
    \    var i = 2\n    var j = 1\n    var k = n\n\n    while i <= k {\n        while\
    \ k % i == 0 {\n            factors.append(i)\n            k /= i\n        }\n\
    \        i += 1\n    }\n\n    return factors", "    var factors = [Int]()\n  \
    \  var primes = [Int]()\n    var primeFactorization = [Int]()\n    var primeFactorizationIndex\
    \ = 0\n    var primeFactorizationCount = 0\n    var factorizationIndex = 0\n \
    \   var factorizationCount = 0\n    var factorization = [1]\n    var factorizationIndex\
    \ = 0\n    var factorizationCount = 0\n    var factorization = [1]\n    var factorizationIndex\
    \ = 0\n    var factorizationCount = 0\n    var factorization = [1]\n    var factorizationIndex\
    \ = 0\n    var factorizationCount = 0\n    var factorization = [1]\n    var factorizationIndex\
    \ = 0\n    var factorizationCount = 0\n    var factorization = [1]\n    var factorizationIndex\
    \ = 0\n    var factorizationCount = 0\n    var factorization = [1]\n    var factorizationIndex\
    \ = 0\n    var factorizationCount = 0\n    var factorization = [1]\n    var factorizationIndex\
    \ = 0\n    var factorizationCount = 0\n    var factorization = [1]\n    var factorizationIndex\
    \ = 0\n    var factorizationCount = 0\n    var factorization = [1]\n    var factorizationIndex\
    \ = 0\n    var factorizationCount = 0\n    var factorization = [1]\n    var factorizationIndex\
    \ = 0\n    var factorizationCount = 0\n    var factorization = [1]\n    var factorizationIndex\
    \ = 0\n    var factorizationCount = 0\n    var factorization = [1]\n    var factorizationIndex\
    \ = 0\n    var factorizationCount = 0\n    var factorization = [1]\n    var factorizationIndex\
    \ = 0\n    var factorizationCount = 0\n    var factorization = [1]\n    var factorizationIndex\
    \ = 0\n    var factorizationCount = 0\n    var factorization = [1]\n    var factorizationIndex\
    \ = 0\n    var factorizationCount = 0\n    var factorization = [1]\n    var factorizationIndex\
    \ = 0\n    var factorizationCount = 0\n    var factorization = [1]\n    var factorizationIndex\
    \ = 0\n    var factorizationCount = 0\n    var factorization = [1]\n    var factorizationIndex\
    \ = 0\n    var factorizationCount = 0\n    var factorization = [1]\n    var factorizationIndex\
    \ = 0\n    var factorizationCount = 0\n    var factorization = [1]\n    var factorizationIndex\
    \ = 0\n    var factorizationCount = 0\n    var factorization = [1]\n    var factorizationIndex\
    \ = 0\n    var factorizationCount = 0\n    var factorization = [1]\n    var factorizationIndex\
    \ = 0\n    var factorizationCount = 0\n    var factorization = [1]\n    var factorizationIndex\
    \ = 0\n    var factorizationCount = 0\n    var factorization = [1]\n    var factorizationIndex\
    \ = 0\n    var factorizationCount = 0\n    var factorization = [1]\n    var factorizationIndex\
    \ = 0\n    var factorizationCount = 0\n    var factorization = [1]\n    var factorizationIndex\
    \ = 0\n    var ", "    var factors = [Int]()\n    var primeFactors = [Int]()\n\
    \    var primeFactorsCount = 0\n    var isPrime = true\n    var isPrimeCount =\
    \ 0\n    var isPrimePrime = true\n    var isPrimePrimeCount = 0\n    var isPrimePrimePrime\
    \ = true\n    var isPrimePrimePrimeCount = 0\n    var isPrimePrimePrimePrime =\
    \ true\n    var isPrimePrimePrimePrimeCount = 0\n    var isPrimePrimePrimePrimePrime\
    \ = true\n    var isPrimePrimePrimePrimePrimeCount = 0\n    var isPrimePrimePrimePrimePrimePrime\
    \ = true\n    var isPrimePrimePrimePrimePrimePrimeCount = 0\n    var isPrimePrimePrimePrimePrimePrimePrime\
    \ = true\n    var isPrimePrimePrimePrimePrimePrimePrimeCount = 0\n    var isPrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true\n    var isPrimePrimePrimePrimePrimePrimePrimePrimeCount = 0\n    var\
    \ isPrimePrimePrimePrimePrimePrimePrimePrimePrime = true\n    var isPrimePrimePrimePrimePrimePrimePrimePrimeCount\
    \ = 0\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = true\n \
    \   var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount = 0\n    var\
    \ isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = true\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount\
    \ = 0\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount\
    \ = 0\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount\
    \ = 0\n    var isPrimePrimePrimePrimePri", "    var factorization: [Int] = []\n\
    \    var factorizationCount = 0\n    var factorizationIndex = 0\n    var factorizationMax\
    \ = Int(sqrt(Double(n)))\n    var factorizationMin = factorizationMax\n    var\
    \ factorizationMaxIndex = 0\n    var factorizationMinIndex = 0\n    var factorizationMaxCount\
    \ = 0\n    var factorizationMinCount = 0\n    var factorizationMaxSum = 0\n  \
    \  var factorizationMinSum = 0\n    var factorizationSum = 0\n    var factorizationSumCount\
    \ = 0\n    var factorizationSumIndex = 0\n    var factorizationSumMax = 0\n  \
    \  var factorizationSumMin = 0\n    var factorizationSumMaxIndex = 0\n    var\
    \ factorizationSumMinIndex = 0\n    var factorizationSumMaxCount = 0\n    var\
    \ factorizationSumMinCount = 0\n    var factorizationSumMaxSum = 0\n    var factorizationSumMinSum\
    \ = 0\n    var factorizationSumSum = 0\n    var factorizationSumSumCount = 0\n\
    \    var factorizationSumSumIndex = 0\n    var factorizationSumSumMax = 0\n  \
    \  var factorizationSumSumMin = 0\n    var factorizationSumSumMaxIndex = 0\n \
    \   var factorizationSumSumMinIndex = 0\n    var factorizationSumSumMaxCount =\
    \ 0\n    var factorizationSumSumMinCount = 0\n    var factorizationSumSumMaxSum\
    \ = 0\n    var factorizationSumSumMinSum = 0\n    var factorizationSumSumSum =\
    \ 0\n    var factorizationSumSumSumCount = 0\n    var factorizationSumSumSumIndex\
    \ = 0\n    var factorizationSumSumSumMax = 0\n    var factorizationSumSumSumMin\
    \ = 0\n    var factorizationSumSumSumMaxIndex = 0\n    var factorizationSumSumSumMinIndex\
    \ = 0\n    var factorizationSumSumSumMaxCount = 0\n    var factorizationSumSumSumMinCount\
    \ = 0\n    var factorizationSumSumSumMaxSum = 0\n    var factorizationSumSumSumMinSum\
    \ = 0\n    var factorizationSumSumSumSum = 0\n    var factorizationSumSumSumSumCount\
    \ = 0\n    var factorizationSumSumSumSumIndex = 0\n    var factorizationSumSumSumSumMax\
    \ = 0\n    var factorizationSumSumSumSumMin = 0\n    var factorizationSumSumSumSumMaxIndex\
    \ = 0\n    var factorizationSumSumSumSumMinIndex = 0\n    var factorizationSumSumSumMaxCount\
    \ = 0\n    var factorizationSumSumSumMinCount = 0\n    var factorizationSumSumSumMaxSum\
    \ = 0\n    var factorizationSumSumSumMinSum = 0\n    var factorizationSumSumSumSum\
    \ = 0\n    var factorizationSumSumSumSumCount = 0\n    var factorizationSumSumSumSumIndex\
    \ = 0\n    var factorizationSumSumSumSumMax = 0\n    var factor", "    var factorization\
    \ = [Int]()\n    var i = 2\n    var j = 1\n    var factor = 1\n    while i <=\
    \ n {\n        while n % i == 0 {\n            factorization[j] = i\n        \
    \    n /= i\n            j++\n        }\n        i += 1\n    }\n    if n > 1 {\n\
    \        factorization[j] = n\n    }\n    return factorization", "    var factorization\
    \ = [Int]()\n    var factors = [1]\n    var i = 2\n    while i * i <= n {\n  \
    \      if n % i == 0 {\n            factors.append(i)\n            factors.append(n\
    \ / i)\n            factorization = factorization[..<factorization.count]\n  \
    \          factorization[factorization.count - 1] = factorization[factorization.count\
    \ - 1] * factors[factors.count - 1]\n            factors = factors[..<factors.count]\n\
    \            factors.append(1)\n            factors.append(n / i)\n          \
    \  factorization = factorization[..<factorization.count]\n            factorization[factorization.count\
    \ - 1] = factorization[factorization.count - 1] * factors[factors.count - 1]\n\
    \            factors = factors[..<factors.count]\n            factors.append(1)\n\
    \            factors.append(1)\n            factorization = factorization[..<factorization.count]\n\
    \            factorization[factorization.count - 1] = factorization[factorization.count\
    \ - 1] * factors[factors.count - 1]\n            factors = factors[..<factors.count]\n\
    \            factors.append(1)\n            factors.append(1)\n            factorization\
    \ = factorization[..<factorization.count]\n            factorization[factorization.count\
    \ - 1] = factorization[factorization.count - 1] * factors[factors.count - 1]\n\
    \            factors = factors[..<factors.count]\n            factors.append(1)\n\
    \            factors.append(1)\n            factorization = factorization[..<factorization.count]\n\
    \            factorization[factorization.count - 1] = factorization[factorization.count\
    \ - 1] * factors[factors.count - 1]\n            factors = factors[..<factors.count]\n\
    \            factors.append(1)\n            factors.append(1)\n            factorization\
    \ = factorization[..<factorization.count]\n            factorization[factorization.count\
    \ - 1] = factorization[factorization.count - 1] * factors[factors.count - 1]\n\
    \            factors = factors[..<factors.count]\n            factors.append(1)\n\
    \            factors.append(1)\n            factorization = factorization[..<factorization.count]\n\
    \            factorization[factorization.count - 1] = factorization[factorization.count\
    \ - 1] * factors[factors.count - 1]\n            factors = factors[..<factors.count]\n\
    \            factors.append(1)\n            factors.append(1)\n            factorization\
    \ = factorization[..<factorization.count]\n            factorization[factorization.count\
    \ - 1] = factorization[factorization.count - 1] * factors[factors.", "    var\
    \ factors = [Int]()\n    var i = 2\n    var j = 1\n    while i * j <= n {\n  \
    \      if n % i == 0 {\n            factors.append(i)\n            n /= i\n  \
    \      }\n        if n % j == 0 {\n            factors.append(j)\n           \
    \ n /= j\n        }\n        i += 1\n        j += 1\n    }\n    if n > 1 {\n \
    \       factors.append(n)\n    }\n    return factors", "    var factorization\
    \ = [Int]()\n    var primes = [Int]()\n    var primeFactorization = [Int]()\n\
    \    var isPrime = [Bool]()\n    var isPrimeFactorization = [Bool]()\n    var\
    \ isPrimeFactorizationInOrder = [Bool]()\n    var isPrimeFactorizationInOrderInOrder\
    \ = [Bool]()\n    var isPrimeFactorizationInOrderInOrderInOrder = [Bool]()\n \
    \   var isPrimeFactorizationInOrderInOrderInOrderInOrder = [Bool]()\n    var isPrimeFactorizationInOrderInOrderInOrderInOrderInOrder\
    \ = [Bool]()\n    var isPrimeFactorizationInOrderInOrderInOrderInOrderInOrderInOrder\
    \ = [Bool]()\n    var isPrimeFactorizationInOrderInOrderInOrderInOrderInOrderInOrderInOrder\
    \ = [Bool]()\n    var isPrimeFactorizationInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder\
    \ = [Bool]()\n    var isPrimeFactorizationInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder\
    \ = [Bool]()\n    var isPrimeFactorizationInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder\
    \ = [Bool]()\n    var isPrimeFactorizationInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder\
    \ = [Bool]()\n    var isPrimeFactorizationInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder\
    \ = [Bool]()\n    var isPrimeFactorizationInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder\
    \ = [Bool]()\n    var isPrimeFactorizationInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder\
    \ = [Bool]()\n    var isPrimeFactorizationInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder\
    \ = [Bool]()\n    var isPrimeFactorizationInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder\
    \ = [Bool]()\n    var isPrimeFactorizationInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder\
    \ = [Bool]()\n    var isPrimeFactorizationInOrderInOrderInOrderIn", "    var factorization:\
    \ [Int] = []\n    var i = 2\n    var factor = 1\n    while i < n {\n        while\
    \ n % i == 0 {\n            factor *= i\n            factorization.append(factor)\n\
    \            n /= i\n        }\n        i += 1\n    }\n    if n != 1 {\n     \
    \   factorization.append(n)\n    }\n    return factorization", "    var factors\
    \ = [Int]()\n    var i = 2\n    while i * i <= n {\n        if n % i == 0 {\n\
    \            factors.append(i)\n            n /= i\n        }\n        i += 1\n\
    \    }\n    if n != 1 {\n        factors.append(n)\n    }\n    return factors",
  "    var factorization = [Int]()\n    var factorizationCount = 1\n    var isPrime\
    \ = true\n    var isPrimeCount = 0\n    var isPrimePrime = true\n    var isPrimePrimeCount\
    \ = 0\n    var isPrimePrimePrime = true\n    var isPrimePrimePrimeCount = 0\n\
    \    var isPrimePrimePrimePrime = true\n    var isPrimePrimePrimePrimeCount =\
    \ 0\n    var isPrimePrimePrimePrimePrime = true\n    var isPrimePrimePrimePrimePrimeCount\
    \ = 0\n    var isPrimePrimePrimePrimePrimePrime = true\n    var isPrimePrimePrimePrimePrimePrimeCount\
    \ = 0\n    var isPrimePrimePrimePrimePrimePrimePrime = true\n    var isPrimePrimePrimePrimePrimePrimePrimeCount\
    \ = 0\n    var isPrimePrimePrimePrimePrimePrimePrimePrime = true\n    var isPrimePrimePrimePrimePrimePrimePrimePrimeCount\
    \ = 0\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrime = true\n    var\
    \ isPrimePrimePrimePrimePrimePrimePrimePrimeCount = 0\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimeCount = 0\n \
    \   var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = true\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount\
    \ = 0\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = true\n\
    \    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount = 0\n\
    \    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = true\n\
    \    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount =\
    \ 0\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true\n    var isPrimePri", "    var factorization: [Int] = []\n    var factorizationCount\
    \ = 0\n    var factorizationIndex = 0\n    var factorizationMax = 0\n    var factorizationMin\
    \ = 0\n    var factorizationSum = 0\n    var factorizationProduct = 1\n    var\
    \ factorizationProductMax = 0\n    var factorizationProductMin = 0\n    var factorizationProductSum\
    \ = 0\n    var factorizationProductProduct = 1\n    var factorizationProductProductMax\
    \ = 0\n    var factorizationProductProductMin = 0\n    var factorizationProductProductSum\
    \ = 0\n    var factorizationProductProductProduct = 1\n    var factorizationProductProductProductMax\
    \ = 0\n    var factorizationProductProductProductMin = 0\n    var factorizationProductProductProductSum\
    \ = 0\n    var factorizationProductProductProductProduct = 1\n    var factorizationProductProductProductProductMax\
    \ = 0\n    var factorizationProductProductProductProductMin = 0\n    var factorizationProductProductProductProductSum\
    \ = 0\n    var factorizationProductProductProductProduct = 1\n    var factorizationProductProductProductProductMax\
    \ = 0\n    var factorizationProductProductProductProductMin = 0\n    var factorizationProductProductProductProductSum\
    \ = 0\n    var factorizationProductProductProductProductProduct = 1\n    var factorizationProductProductProductProductProductMax\
    \ = 0\n    var factorizationProductProductProductProductProductMin = 0\n    var\
    \ factorizationProductProductProductProductProductSum = 0\n    var factorizationProductProductProductProductProductProduct\
    \ = 1\n    var factorizationProductProductProductProductProductMax = 0\n    var\
    \ factorizationProductProductProductProductProductMin = 0\n    var factorizationProductProductProductProductProductSum\
    \ = 0\n    var factorizationProductProductProductProductProductProduct = 1\n \
    \   var factorizationProductProductProductProductProductMax = 0\n    var factorizationProductProductProductProductProductMin\
    \ = 0\n    var factorizationProductProductProductProductProductSum = 0\n    var\
    \ factorizationProductProductProductProductProductProduct = 1\n    var factorizationProductProductProductProductProductMax\
    \ = 0\n    var factorizationProductProductProductProductProductMin = 0\n    var\
    \ factorizationProductProductProductProductProductSum = 0\n    var factorizationProductProductProductProductProductProduct\
    \ = 1\n    var factorizationProductProductProductProductProductMax = 0\n    var\
    \ factorizationProductProductProductProductProductMin = 0\n    var factorizationProductProductProductProductProductSum\
    \ = 0\n    var factorizationProductProductProductProductProductProduct = 1\n \
    \   var factorizationProductProductProductProductProductMax = 0\n    var factorizationProductProductProductProductProductMin\
    \ = 0\n    var factorizationProductProductProductProductProductSum = 0\n    var\
    \ factorizationProductProductProductProductProductProduct = 1\n    var factorizationProductProductProductProductProductMax\
    \ = 0\n    var factorizationProductProductProductProductProductMin = 0\n    var\
    \ factorizationProductProductProductProductProduct", "    var factorization: [Int]\
    \ = []\n    var factorizationCount = 0\n    var factorizationIndex = 0\n    var\
    \ factorizationMax = 0\n    var factorizationMin = Int64(Int.max)\n    var factorizationSum\
    \ = Int64(Int.max)\n    var factorizationProduct = Int64(Int.max)\n    var factorizationProductMin\
    \ = Int64(Int.max)\n    var factorizationProductMax = Int64(Int.max)\n    var\
    \ factorizationProductSum = Int64(Int.max)\n    var factorizationProductSumMin\
    \ = Int64(Int.max)\n    var factorizationProductSumMax = Int64(Int.max)\n    var\
    \ factorizationProductSumMinMax = Int64(Int.max)\n    var factorizationProductSumMinMaxSum\
    \ = Int64(Int.max)\n    var factorizationProductSumMinMaxSumMin = Int64(Int.max)\n\
    \    var factorizationProductSumMinMaxSumMinMax = Int64(Int.max)\n    var factorizationProductSumMinMaxSumMinMaxSum\
    \ = Int64(Int.max)\n    var factorizationProductSumMinMaxSumMinMaxSumMin = Int64(Int.max)\n\
    \    var factorizationProductSumMinMaxSumMinMaxSumMinMax = Int64(Int.max)\n  \
    \  var factorizationProductSumMinMaxSumMinMaxSumMinMaxSum = Int64(Int.max)\n \
    \   var factorizationProductSumMinMaxSumMinMaxSumMinMaxSumMin = Int64(Int.max)\n\
    \    var factorizationProductSumMinMaxSumMinMaxSumMinMaxSumMinMax = Int64(Int.max)\n\
    \    var factorizationProductSumMinMaxSumMinMaxSumMinMaxSumMinMaxSum = Int64(Int.max)\n\
    \    var factorizationProductSumMinMaxSumMinMaxSumMinMaxSumMinMaxSumMin = Int64(Int.max)\n\
    \    var factorizationProductSumMinMaxSumMinMaxSumMinMaxSumMinMaxSumMinMax = Int64(Int.max)\n\
    \    var factorizationProductSumMinMaxSumMinMaxSumMinMaxSumMinMaxSumMinMaxSum\
    \ = Int64(Int.max)\n    var factorizationProductSumMinMaxSumMinMaxSumMinMaxSumMinMaxSumMinMaxSumMin\
    \ = Int64(Int.max)\n    var factorizationProductSumMinMaxSumMinMaxSumMinMaxSumMinMaxSumMinMaxSumMinMax\
    \ = Int64(Int.max)\n    var factorizationProductSumMinMaxSumMinMaxSumMinMaxSumMinMaxSumMinMaxSumMinMaxSum\
    \ = Int64(Int.max)\n    var factorizationProductSumMinMaxSumMinMaxSumMinMaxSumMinMaxSumMin",
  "    var factorization = [Int]()\n    var primeFactorization = [Int]()\n    var\
    \ primeFactorizationCount = [Int]()\n    var isPrime = [Bool]()\n    var isPrimeCount\
    \ = [Int]()\n    var isPrimeCountMax = Int()\n    var isPrimeCountMaxIndex = Int()\n\
    \    var isPrimeCountMin = Int()\n    var isPrimeCountMinIndex = Int()\n    var\
    \ isPrimeCountMaxIndex = Int()\n    var isPrimeCountMinIndex = Int()\n    var\
    \ isPrimeCountMaxIndex = Int()\n    var isPrimeCountMinIndex = Int()\n    var\
    \ isPrimeCountMaxIndex = Int()\n    var isPrimeCountMinIndex = Int()\n    var\
    \ isPrimeCountMaxIndex = Int()\n    var isPrimeCountMinIndex = Int()\n    var\
    \ isPrimeCountMaxIndex = Int()\n    var isPrimeCountMinIndex = Int()\n    var\
    \ isPrimeCountMaxIndex = Int()\n    var isPrimeCountMinIndex = Int()\n    var\
    \ isPrimeCountMaxIndex = Int()\n    var isPrimeCountMinIndex = Int()\n    var\
    \ isPrimeCountMaxIndex = Int()\n    var isPrimeCountMinIndex = Int()\n    var\
    \ isPrimeCountMaxIndex = Int()\n    var isPrimeCountMinIndex = Int()\n    var\
    \ isPrimeCountMaxIndex = Int()\n    var isPrimeCountMinIndex = Int()\n    var\
    \ isPrimeCountMaxIndex = Int()\n    var isPrimeCountMinIndex = Int()\n    var\
    \ isPrimeCountMaxIndex = Int()\n    var isPrimeCountMinIndex = Int()\n    var\
    \ isPrimeCountMaxIndex = Int()\n    var isPrimeCountMinIndex = Int()\n    var\
    \ isPrimeCountMaxIndex = Int()\n    var isPrimeCountMinIndex = Int()\n    var\
    \ isPrimeCountMaxIndex = Int()\n    var isPrimeCountMinIndex = Int()\n    var\
    \ isPrimeCountMaxIndex = Int()\n    var isPrimeCountMinIndex = Int()\n    var\
    \ isPrimeCountMaxIndex = Int()\n    var isPrimeCountMinIndex = Int()\n    var\
    \ isPrimeCountMaxIndex = Int()\n    var isPrimeCountMinIndex = Int()\n    var\
    \ isPrimeCountMaxIndex = Int()\n    var isPrimeCountMinIndex = Int()\n    var\
    \ isPrimeCountMaxIndex = Int()\n    var isPrimeCountMinIndex = Int()\n    var\
    \ isPrimeCountMaxIndex = Int()\n    var isPrimeCountMinIndex = Int()\n    var\
    \ isPrimeCountMax", "    var factors = [Int]()\n    var primes = [Int]()\n   \
    \ var primeFactorization = [Int]()\n    var factorization = [Int]()\n    var primeFactorizationIndex\
    \ = 0\n    var factorizationIndex = 0\n    var isPrime = true\n    var isPrimeIndex\
    \ = 0\n    var isPrimeFactorization = false\n    var isPrimeFactorizationIndex\
    \ = 0\n    var isPrimeFactorizationPrime = false\n    var isPrimeFactorizationPrimeIndex\
    \ = 0\n    var isPrimeFactorizationFactorization = false\n    var isPrimeFactorizationFactorizationIndex\
    \ = 0\n    var isPrimeFactorizationFactorizationPrime = false\n    var isPrimeFactorizationFactorizationPrimeIndex\
    \ = 0\n    var isPrimeFactorizationFactorizationFactorization = false\n    var\
    \ isPrimeFactorizationFactorizationFactorizationIndex = 0\n    var isPrimeFactorizationFactorizationFactorizationPrime\
    \ = false\n    var isPrimeFactorizationFactorizationFactorizationPrimeIndex =\
    \ 0\n    var isPrimeFactorizationFactorizationFactorizationFactorization = false\n\
    \    var isPrimeFactorizationFactorizationFactorizationFactorizationIndex = 0\n\
    \    var isPrimeFactorizationFactorizationFactorizationFactorizationPrime = false\n\
    \    var isPrimeFactorizationFactorizationFactorizationFactorizationPrimeIndex\
    \ = 0\n    var isPrimeFactorizationFactorizationFactorizationFactorizationFactorization\
    \ = false\n    var isPrimeFactorizationFactorizationFactorizationFactorizationFactorizationIndex\
    \ = 0\n    var isPrimeFactorizationFactorizationFactorizationFactorizationFactorizationPrime\
    \ = false\n    var isPrimeFactorizationFactorizationFactorizationFactorizationFactorizationPrimeIndex\
    \ = 0\n    var isPrimeFactorizationFactorizationFactorizationFactorizationFactorizationFactorization\
    \ = false\n    var isPrimeFactorizationFactorizationFactorizationFactorizationFactorizationFactorizationIndex\
    \ = 0\n    var isPrimeFactorizationFactorizationFactorizationFactorizationFactorizationFactorizationPrime\
    \ = false\n    var isPrimeFactorizationFactorizationFactorizationFactorizationFactorizationFactorizationPrimeIndex\
    \ = 0\n    var isPrimeFactorizationFactorizationFactorizationFactorizationFactorizationFactorizationFactorization\
    \ = false\n    var isPrimeFactorizationFactorizationFactorizationFactorizationFactorizationFactorizationFactorizationIndex\
    \ = 0\n    var isPrimeFactorizationFactorizationFactorizationFactorizationFactorizationFactorizationFactorizationPrime\
    \ = false\n    var isPrimeFactorizationFactorizationFactorizationFactorizationFactorizationFactorizationFactorizationPrimeIndex\
    \ = 0\n    var isPrimeFactorizationFactorizationFactorizationFactorizationFactorizationFactorizationFactorizationFactorization\
    \ = false", "    var factors = [Int]()\n    var i = 2\n    while i * i <= n {\n\
    \        if n % i == 0 {\n            factors.append(i)\n            n /= i\n\
    \        }\n        i += 1\n    }\n    if n != 1 {\n        factors.append(n)\n\
    \    }\n    return factors", "    var factors = [Int]()\n    var primes = [Int]()\n\
    \    var primeFactors = [Int]()\n    var isPrime = [Bool]()\n    var isPrimeFactors\
    \ = [Bool]()\n    var isPrimeFactorsCount = [Int]()\n    var isPrimeFactorsCountMax\
    \ = Int()\n    var isPrimeFactorsCountMaxIndex = Int()\n    var isPrimeFactorsCountMaxValue\
    \ = Int()\n    var isPrimeFactorsCountMaxIndexValue = Int()\n    var isPrimeFactorsCountMaxValueIndex\
    \ = Int()\n    var isPrimeFactorsCountMaxValueValue = Int()\n    var isPrimeFactorsCountMaxValueIndexValue\
    \ = Int()\n    var isPrimeFactorsCountMaxValueValueIndex = Int()\n    var isPrimeFactorsCountMaxValueValueValue\
    \ = Int()\n    var isPrimeFactorsCountMaxValueIndexValueValue = Int()\n    var\
    \ isPrimeFactorsCountMaxValueValueIndexValue = Int()\n    var isPrimeFactorsCountMaxValueValueIndexValueIndex\
    \ = Int()\n    var isPrimeFactorsCountMaxValueValueValueIndexValue = Int()\n \
    \   var isPrimeFactorsCountMaxValueValueIndexValueIndex = Int()\n    var isPrimeFactorsCountMaxValueValueValueIndexValueIndex\
    \ = Int()\n    var isPrimeFactorsCountMaxValueValueValueIndexValueIndexValue =\
    \ Int()\n    var isPrimeFactorsCountMaxValueValueValueIndexValueIndexValue = Int()\n\
    \    var isPrimeFactorsCountMaxValueValueValueIndexValueIndexValueIndex = Int()\n\
    \    var isPrimeFactorsCountMaxValueValueValueIndexValueIndexValueIndex = Int()\n\
    \    var isPrimeFactorsCountMaxValueValueValueIndexValueIndexValueIndexValue =\
    \ Int()\n    var isPrimeFactorsCountMaxValueValueValueIndexValueIndexValueIndexValue\
    \ = Int()\n    var isPrimeFactorsCountMaxValueValueValueIndexValueIndexValueIndexValueIndex\
    \ = Int()\n    var isPrimeFactorsCountMaxValueValueValueIndexValueIndexValueIndexValueIndex\
    \ = Int()\n    var isPrimeFactorsCountMaxValueValueValueIndexValueIndexValueIndexValueIndex\
    \ = Int()\n    var isPrimeFactorsCountMaxValueValueValueIndexValueIndexValueIndexValueIndexValue\
    \ = Int()\n    var isPrimeFactorsCountMaxValueValueValueIndexValueIndexValueIndexValueIndexValue\
    \ = Int()\n    var isPrimeFactorsCountMaxValueValueValueIndexValueIndexValueIndexValueIndexValueIndex\
    \ = Int()\n    var isPri", "    var factors = [Int]()\n    var i = 2\n    var\
    \ j = 1\n    while i * j <= n {\n        if n % i == 0 {\n            factors.append(i)\n\
    \            n /= i\n        } else {\n            j += 1\n        }\n       \
    \ i += 1\n    }\n    if n > 1 {\n        factors.append(n)\n    }\n    return\
    \ factors", "    var factors = [Int]()\n    var factorization = [Int]()\n    var\
    \ product = n * n\n    var divisor = 2\n    var divisorCount = 0\n    var factorCount\
    \ = 0\n    var isPrime = true\n    while divisor <= product {\n        if product\
    \ % divisor == 0 {\n            factors.append(divisor)\n            factorCount\
    \ += 1\n            divisorCount += 1\n            product /= divisor\n      \
    \  } else {\n            divisorCount += 1\n            divisor *= 2\n       \
    \ }\n    }\n    if product != 1 {\n        factors.append(product)\n        factorCount\
    \ += 1\n    }\n    if factorCount > 1 {\n        factorization = factors.reverse()\n\
    \    } else {\n        factorization = factors\n    }\n    if divisorCount > 1\
    \ {\n        factorization = factorization.reverse()\n    }\n    return factorization",
  "    var factorization: [Int] = []\n    var primeFactorization: [Int] = []\n   \
    \ var primeFactorizationCount = 0\n    var isPrime = true\n    var isPrimeCount\
    \ = 0\n    var isPrimePrime = true\n    var isPrimePrimeCount = 0\n    var isPrimePrimePrime\
    \ = true\n    var isPrimePrimePrimeCount = 0\n    var isPrimePrimePrimePrime =\
    \ true\n    var isPrimePrimePrimePrimeCount = 0\n    var isPrimePrimePrimePrimePrime\
    \ = true\n    var isPrimePrimePrimePrimePrimeCount = 0\n    var isPrimePrimePrimePrimePrimePrime\
    \ = true\n    var isPrimePrimePrimePrimePrimePrimeCount = 0\n    var isPrimePrimePrimePrimePrimePrimePrime\
    \ = true\n    var isPrimePrimePrimePrimePrimePrimePrimeCount = 0\n    var isPrimePrimePrimePrimePrimePrimePrimePrime\
    \ = true\n    var isPrimePrimePrimePrimePrimePrimePrimePrimeCount = 0\n    var\
    \ isPrimePrimePrimePrimePrimePrimePrimePrimePrime = true\n    var isPrimePrimePrimePrimePrimePrimePrimePrimeCount\
    \ = 0\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = true\n \
    \   var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount = 0\n    var\
    \ isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = true\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount\
    \ = 0\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = true\n\
    \    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount = 0\n\
    \    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = true\n\
    \    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount =\
    \ 0\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePri", "    var factorization:\
    \ [Int] = []\n    var factorizationCount = 0\n    var factorizationIndex = 0\n\
    \    var isPrime = true\n    var isPrimeIndex = 0\n    var isPrimeCount = 0\n\
    \    var isPrimeFactorizationCount = 0\n    var isPrimeFactorizationIndex = 0\n\
    \    var isPrimeFactorization = true\n    var isPrimeFactorizationIndex = 0\n\
    \    var isPrimeFactorization = true\n    var isPrimeFactorizationIndex = 0\n\
    \    var isPrimeFactorization = true\n    var isPrimeFactorizationIndex = 0\n\
    \    var isPrimeFactorization = true\n    var isPrimeFactorizationIndex = 0\n\
    \    var isPrimeFactorization = true\n    var isPrimeFactorizationIndex = 0\n\
    \    var isPrimeFactorization = true\n    var isPrimeFactorizationIndex = 0\n\
    \    var isPrimeFactorization = true\n    var isPrimeFactorizationIndex = 0\n\
    \    var isPrimeFactorization = true\n    var isPrimeFactorizationIndex = 0\n\
    \    var isPrimeFactorization = true\n    var isPrimeFactorizationIndex = 0\n\
    \    var isPrimeFactorization = true\n    var isPrimeFactorizationIndex = 0\n\
    \    var isPrimeFactorization = true\n    var isPrimeFactorizationIndex = 0\n\
    \    var isPrimeFactorization = true\n    var isPrimeFactorizationIndex = 0\n\
    \    var isPrimeFactorization = true\n    var isPrimeFactorizationIndex = 0\n\
    \    var isPrimeFactorization = true\n    var isPrimeFactorizationIndex = 0\n\
    \    var isPrimeFactorization = true\n    var isPrimeFactorizationIndex = 0\n\
    \    var isPrimeFactorization = true\n    var isPrimeFactorizationIndex = 0\n\
    \    var isPrimeFactorization = true\n    var isPrimeFactorizationIndex = 0\n\
    \    var isPrimeFactorization = true\n    var isPrimeFactorizationIndex = 0\n\
    \    var isPrimeFactorization = true\n    var isPrimeFactorizationIndex = 0\n\
    \    var isPrimeFactorization = true\n    var isPrimeFactorizationIndex = 0\n\
    \    var isPrimeFactorization = true\n    var isPrimeFactorizationIndex = 0\n\
    \    var isPrimeFactorization = true\n    var isPrimeFactorizationIndex = 0\n\
    \    var isPrimeFactorization = true\n    var isPrimeFactorizationIndex = 0\n\
    \    var isPrimeFactorization = true\n    var isPrimeFactorizationIndex = 0\n\
    \    var isPrimeFactorization = true\n    var isPrimeFactorizationIndex = 0\n\
    \    var isPrimeFactorization = true\n    var isPrimeFactorizationIndex = 0\n\
    \    var isPrimeFactorization = true\n    var isPrimeFactor", "    var factors\
    \ = [Int]()\n    var i = 2\n    var factor = 1\n    while i <= n {\n        if\
    \ n % i == 0 {\n            factors.append(factor)\n            factor = 1\n \
    \       } else {\n            factor *= i\n        }\n        i += 1\n    }\n\
    \    factors.append(factor)\n    return factors", "    if n < 2 {\n        return\
    \ []\n    }\n    var factors = [Int]()\n    var primes = [Int]()\n    var primeFactors\
    \ = [Int]()\n    var isPrime = [Bool]()\n    var isPrimeFactors = [Bool]()\n \
    \   var isPrimeFactorsCount = [Int]()\n    var isPrimeFactorsCountMax = Int()\n\
    \    var isPrimeFactorsCountMaxIndex = Int()\n    var isPrimeFactorsCountMaxIndex\
    \ = Int()\n    var isPrimeFactorsCountMaxIndex = Int()\n    var isPrimeFactorsCountMaxIndex\
    \ = Int()\n    var isPrimeFactorsCountMaxIndex = Int()\n    var isPrimeFactorsCountMaxIndex\
    \ = Int()\n    var isPrimeFactorsCountMaxIndex = Int()\n    var isPrimeFactorsCountMaxIndex\
    \ = Int()\n    var isPrimeFactorsCountMaxIndex = Int()\n    var isPrimeFactorsCountMaxIndex\
    \ = Int()\n    var isPrimeFactorsCountMaxIndex = Int()\n    var isPrimeFactorsCountMaxIndex\
    \ = Int()\n    var isPrimeFactorsCountMaxIndex = Int()\n    var isPrimeFactorsCountMaxIndex\
    \ = Int()\n    var isPrimeFactorsCountMaxIndex = Int()\n    var isPrimeFactorsCountMaxIndex\
    \ = Int()\n    var isPrimeFactorsCountMaxIndex = Int()\n    var isPrimeFactorsCountMaxIndex\
    \ = Int()\n    var isPrimeFactorsCountMaxIndex = Int()\n    var isPrimeFactorsCountMaxIndex\
    \ = Int()\n    var isPrimeFactorsCountMaxIndex = Int()\n    var isPrimeFactorsCountMaxIndex\
    \ = Int()\n    var isPrimeFactorsCountMaxIndex = Int()\n    var isPrimeFactorsCountMaxIndex\
    \ = Int()\n    var isPrimeFactorsCountMaxIndex = Int()\n    var isPrimeFactorsCountMaxIndex\
    \ = Int()\n    var isPrimeFactorsCountMaxIndex = Int()\n    var isPrimeFactorsCountMaxIndex\
    \ = Int()\n    var isPrimeFactorsCountMaxIndex = Int()\n    var isPrimeFactorsCountMaxIndex\
    \ = Int()\n    var isPrimeFactorsCountMaxIndex = Int()\n    var isPrimeFactorsCountMaxIndex\
    \ = Int()\n    var isPrimeFactorsCountMaxIndex = Int()\n    var isPrimeFactorsCountMaxIndex\
    \ = Int()\n    var isPrimeFactorsCountMaxIndex = Int()\n    var isPrimeFactorsCountMaxIndex\
    \ = Int()\n    var isPrimeFactorsCount", "    var factorization: [Int] = []\n\
    \    var factorizationCount = 0\n    var currentFactorizationCount = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization: Int = 0\n    var\
    \ currentFactorization: Int = 0\n    var currentFactorization", "    var factorization\
    \ = [Int]()\n    var factorizationCount = 0\n    var factorizationSum = 0\n  \
    \  var factorizationSum2 = 0\n    var factorizationSum3 = 0\n    var factorizationSum4\
    \ = 0\n    var factorizationSum5 = 0\n    var factorizationSum6 = 0\n    var factorizationSum7\
    \ = 0\n    var factorizationSum8 = 0\n    var factorizationSum9 = 0\n    var factorizationSum10\
    \ = 0\n    var factorizationSum11 = 0\n    var factorizationSum12 = 0\n    var\
    \ factorizationSum13 = 0\n    var factorizationSum14 = 0\n    var factorizationSum15\
    \ = 0\n    var factorizationSum16 = 0\n    var factorizationSum17 = 0\n    var\
    \ factorizationSum18 = 0\n    var factorizationSum19 = 0\n    var factorizationSum20\
    \ = 0\n    var factorizationSum21 = 0\n    var factorizationSum22 = 0\n    var\
    \ factorizationSum23 = 0\n    var factorizationSum24 = 0\n    var factorizationSum25\
    \ = 0\n    var factorizationSum26 = 0\n    var factorizationSum27 = 0\n    var\
    \ factorizationSum28 = 0\n    var factorizationSum29 = 0\n    var factorizationSum30\
    \ = 0\n    var factorizationSum31 = 0\n    var factorizationSum32 = 0\n    var\
    \ factorizationSum33 = 0\n    var factorizationSum34 = 0\n    var factorizationSum35\
    \ = 0\n    var factorizationSum36 = 0\n    var factorizationSum37 = 0\n    var\
    \ factorizationSum38 = 0\n    var factorizationSum39 = 0\n    var factorizationSum40\
    \ = 0\n    var factorizationSum41 = 0\n    var factorizationSum42 = 0\n    var\
    \ factorizationSum43 = 0\n    var factorizationSum44 = 0\n    var factorizationSum45\
    \ = 0\n    var factorizationSum46 = 0\n    var factorizationSum47 = 0\n    var\
    \ factorizationSum48 = 0\n    var factorizationSum49 = 0\n    var factorizationSum50\
    \ = 0\n    var factorizationSum51 = 0\n    var factorizationSum52 = 0\n    var\
    \ factorizationSum53 = 0\n    var factorizationSum54 = 0\n    var factorizationSum55\
    \ = 0\n    var factorizationSum56 = 0\n    var factorizationSum57 = 0\n    var\
    \ factorizationSum58 = 0\n    var factorizationSum59 = 0\n    var factorizationSum60\
    \ = 0\n    var factorizationSum61 = 0\n    var factorizationSum62 = 0\n    var\
    \ factorizationSum63 = 0\n    var factorizationSum64 = 0\n    var factorizationSum65\
    \ = 0\n    var factorizationSum66 = 0\n    var factorizationSum67 = 0\n    var\
    \ factorizationSum68 = 0\n    var factorizationSum69 = 0\n    var factorizationSum70\
    \ = 0\n    var factorizationSum71 = 0\n    var factor", "    var factors: [Int]\
    \ = []\n    var primeFactors = 2\n    var factorization = [Int]()\n    var factorizationCount\
    \ = 0\n    var isPrime = true\n    var isFactorization = false\n    var isPrimeFactorization\
    \ = false\n    var isPrimeFactorizationCount = 0\n    var isPrimeFactorizationPrime\
    \ = true\n    var isPrimeFactorizationFactorization = false\n    var isPrimeFactorizationFactorizationCount\
    \ = 0\n    var isPrimeFactorizationFactorizationPrime = true\n    var isPrimeFactorizationFactorizationFactorization\
    \ = false\n    var isPrimeFactorizationFactorizationFactorizationCount = 0\n \
    \   var isPrimeFactorizationFactorizationFactorizationPrime = true\n    var isPrimeFactorizationFactorizationFactorizationFactorization\
    \ = false\n    var isPrimeFactorizationFactorizationFactorizationFactorizationCount\
    \ = 0\n    var isPrimeFactorizationFactorizationFactorizationFactorizationPrime\
    \ = true\n    var isPrimeFactorizationFactorizationFactorizationFactorizationFactorization\
    \ = false\n    var isPrimeFactorizationFactorizationFactorizationFactorizationFactorizationCount\
    \ = 0\n    var isPrimeFactorizationFactorizationFactorizationFactorizationFactorizationPrime\
    \ = true\n    var isPrimeFactorizationFactorizationFactorizationFactorizationFactorizationFactorization\
    \ = false\n    var isPrimeFactorizationFactorizationFactorizationFactorizationFactorizationFactorizationCount\
    \ = 0\n    var isPrimeFactorizationFactorizationFactorizationFactorizationFactorizationFactorizationPrime\
    \ = true\n    var isPrimeFactorizationFactorizationFactorizationFactorizationFactorizationFactorizationFactorization\
    \ = false\n    var isPrimeFactorizationFactorizationFactorizationFactorizationFactorizationFactorizationFactorizationCount\
    \ = 0\n    var isPrimeFactorizationFactorizationFactorizationFactorizationFactorizationFactorizationFactorizationPrime\
    \ = true\n    var isPrimeFactorizationFactorizationFactorizationFactorizationFactorizationFactorizationFactorizationFactorization\
    \ = false\n    var isPrimeFactorizationFactorizationFactorizationFactorizationFactorizationFactorizationFactorizationCount\
    \ = 0\n    var isPrimeFactorizationFactorizationFactorizationFactorizationFactorizationFactorizationFactorizationPrime\
    \ = true\n    var isPrimeFactorizationFactorizationFactorizationFactorizationFactorizationFactorizationFactorizationFactorization\
    \ = false\n    var isPrimeFactorizationFactorizationFactorizationFactorizationFactorizationFactorizationFactorizationCount\
    \ = 0\n    var isPrimeFactorizationFactorizationFactorizationFactorizationFactorizationFactorizationFactorizationPrime\
    \ = true\n    var isPrimeFactorizationFactorizationFactorizationFactorizationFactorizationFactorizationFactorizationFactorization\
    \ = false\n    var isPrimeFactorizationFactor", "    var factors = [Int]()\n \
    \   var factorization = factorizationOfNumber(n)\n    var factorizationCount =\
    \ 1\n    for factor in factorization {\n        if factorizationCount > factors.count\
    \ {\n            factors.append(factor)\n        } else {\n            factors[factors.count]\
    \ = factor\n        }\n        factorizationCount *= factor\n    }\n    return\
    \ factors", "    var factors = [Int]()\n    var i = 2\n    var factor = 1\n  \
    \  var isPrime = true\n    while i <= n {\n        if n % i == 0 {\n         \
    \   isPrime = false\n            factors.append(i)\n            n /= i\n     \
    \   } else {\n            i += 1\n        }\n    }\n    if n > 1 {\n        factors.append(n)\n\
    \    }\n    if isPrime {\n        factors.append(n)\n    }\n    return factors",
  "    var factors = [Int]()\n    var primeFactors = factorize(n: n)\n    var factorsCount\
    \ = 1\n    for prime in primeFactors {\n        if factorsCount > prime {\n  \
    \          factorsCount *= prime\n        } else {\n            factors.append(factorsCount)\n\
    \            factorsCount = prime\n        }\n    }\n    factors.append(factorsCount)\n\
    \    return factors", "    var factorization = [Int]()\n    var primeFactorization\
    \ = [Int]()\n    var isPrime = [Bool]()\n    var isPrimeFactorization = [Bool]()\n\
    \    var isPrimePrimeFactorization = [Bool]()\n    var isPrimePrimePrimeFactorization\
    \ = [Bool]()\n    var isPrimePrimePrimePrimeFactorization = [Bool]()\n    var\
    \ isPrimePrimePrimePrimePrimeFactorization = [Bool]()\n    var isPrimePrimePrimePrimePrimePrimeFactorization\
    \ = [Bool]()\n    var isPrimePrimePrimePrimePrimePrimePrimeFactorization = [Bool]()\n\
    \    var isPrimePrimePrimePrimePrimePrimePrimeFactorization = [Bool]()\n    var\
    \ isPrimePrimePrimePrimePrimePrimePrimePrimeFactorization = [Bool]()\n    var\
    \ isPrimePrimePrimePrimePrimePrimePrimePrimePrimeFactorization = [Bool]()\n  \
    \  var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeFactorization = [Bool]()\n\
    \    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeFactorization = [Bool]()\n\
    \    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeFactorization\
    \ = [Bool]()\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeFactorization\
    \ = [Bool]()\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeFactorization\
    \ = [Bool]()\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeFactorization\
    \ = [Bool]()\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeFactorization\
    \ = [Bool]()\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeFactorization\
    \ = [Bool]()\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime", " \
    \   var factors = [Int]()\n    var factorization = factorizationOfNumber(n)\n\
    \    var factorizationCount = 1\n    for factor in factorization {\n        factors.append(factor)\n\
    \        factorizationCount *= factor\n    }\n    var factorizationCount2 = 1\n\
    \    for factor in factorization {\n        factors.append(factor)\n        factorizationCount2\
    \ *= factor\n    }\n    if factorizationCount != factorizationCount2 {\n     \
    \   factors.append(factorizationCount)\n    }\n    return factors", "    var factors\
    \ = [Int]()\n    var primes = primeFactors(n)\n    for prime in primes {\n   \
    \     factors.append(prime)\n    }\n    return factors", "    var factors = [Int]()\n\
    \    var i = 2\n    var p = n\n    while p > 1 {\n        while p % i == 0 {\n\
    \            factors.append(i)\n            p /= i\n        }\n        i += 1\n\
    \    }\n    return factors", "    var factors = [Int]()\n    var factorization\
    \ = factorizationOfNumber(n)\n    for factor in factorization {\n        factors.append(factor)\n\
    \    }\n    return factors", "    var factorization: [Int] = []\n    var factor\
    \ = 2\n    var remainder: Int = 0\n    while n > 1 {\n        remainder = n %\
    \ factor\n        factorization[factor] = factorization[factor] + 1\n        n\
    \ = remainder\n        factor++\n    }\n    return factorization", "    var factorization:\
    \ [Int] = []\n    var factorizationCount = 0\n    var factorizationIndex = 0\n\
    \    var factorizationNumber = 0\n    var factorizationNumberIndex = 0\n    var\
    \ factorizationNumberIndex2 = 0\n    var factorizationNumberIndex3 = 0\n    var\
    \ factorizationNumberIndex4 = 0\n    var factorizationNumberIndex5 = 0\n    var\
    \ factorizationNumberIndex6 = 0\n    var factorizationNumberIndex7 = 0\n    var\
    \ factorizationNumberIndex8 = 0\n    var factorizationNumberIndex9 = 0\n    var\
    \ factorizationNumberIndex10 = 0\n    var factorizationNumberIndex11 = 0\n   \
    \ var factorizationNumberIndex12 = 0\n    var factorizationNumberIndex13 = 0\n\
    \    var factorizationNumberIndex14 = 0\n    var factorizationNumberIndex15 =\
    \ 0\n    var factorizationNumberIndex16 = 0\n    var factorizationNumberIndex17\
    \ = 0\n    var factorizationNumberIndex18 = 0\n    var factorizationNumberIndex19\
    \ = 0\n    var factorizationNumberIndex20 = 0\n    var factorizationNumberIndex21\
    \ = 0\n    var factorizationNumberIndex22 = 0\n    var factorizationNumberIndex23\
    \ = 0\n    var factorizationNumberIndex24 = 0\n    var factorizationNumberIndex25\
    \ = 0\n    var factorizationNumberIndex26 = 0\n    var factorizationNumberIndex27\
    \ = 0\n    var factorizationNumberIndex28 = 0\n    var factorizationNumberIndex29\
    \ = 0\n    var factorizationNumberIndex30 = 0\n    var factorizationNumberIndex31\
    \ = 0\n    var factorizationNumberIndex32 = 0\n    var factorizationNumberIndex33\
    \ = 0\n    var factorizationNumberIndex34 = 0\n    var factorizationNumberIndex35\
    \ = 0\n    var factorizationNumberIndex36 = 0\n    var factorizationNumberIndex37\
    \ = 0\n    var factorizationNumberIndex38 = 0\n    var factorizationNumberIndex39\
    \ = 0\n    var factorizationNumberIndex40 = 0\n    var factorizationNumberIndex41\
    \ = 0\n    var factorizationNumberIndex42 = 0\n    var factorizationNumberIndex43\
    \ = 0\n    var factorizationNumberIndex44 = 0\n    var factorizationNumberIndex45\
    \ = 0\n    var factorizationNumberIndex46 = 0\n    var factorizationNumberIndex47\
    \ = 0\n    var factorizationNumberIndex48 = 0\n    var factorizationNumberIndex49\
    \ = 0\n    var factorizationNumberIndex50 = 0\n    var factorizationNumberIndex51\
    \ = 0\n    var factorizationNumberIndex52 = 0\n    var factorizationNumberIndex53\
    \ = 0\n    var factorizationNumberIndex54 = 0\n    var factorizationNumberIndex55\
    \ = 0\n    var factorizationNumberIndex56 = 0\n    var factorizationNumberIndex57\
    \ = 0\n    var factorizationNumberIndex58 = 0\n    var factorizationNumberIndex59\
    \ = 0\n    var factorizationNumberIndex60 = 0\n    var factorizationNumberIndex61\
    \ = 0\n", "    var factors = [Int]()\n    var i = 2\n    while i * i <= n {\n\
    \        if n % i == 0 {\n            i += 1\n            factors.append(i)\n\
    \        }\n        i += 1\n    }\n    return factors", "    var factors = [Int]()\n\
    \    var i = 2\n    while i * i <= n {\n        if n % i == 0 {\n            factors.append(i)\n\
    \            n /= i\n        }\n        i += 1\n    }\n    if n != 1 {\n     \
    \   factors.append(n)\n    }\n    return factors", "    var factors = [Int]()\n\
    \    var primes = [Int]()\n    var primeFactors = [1]\n    var isPrime = true\n\
    \    var isFactor = true\n    var factor = 2\n    var factorCount = 0\n    var\
    \ primeFactorCount = 0\n    var primeFactorsCount = 0\n    var isPrimeCount =\
    \ 0\n    var isFactorCount = 0\n    var isPrimeFactorCount = 0\n    var isPrimePrimeCount\
    \ = 0\n    var isPrimePrimeFactorCount = 0\n    var isPrimePrimePrimeCount = 0\n\
    \    var isPrimePrimePrimeFactorCount = 0\n    var isPrimePrimePrimePrimeCount\
    \ = 0\n    var isPrimePrimePrimePrimeFactorCount = 0\n    var isPrimePrimePrimePrimePrimeCount\
    \ = 0\n    var isPrimePrimePrimePrimePrimeFactorCount = 0\n    var isPrimePrimePrimePrimePrimePrimeCount\
    \ = 0\n    var isPrimePrimePrimePrimePrimePrimeFactorCount = 0\n    var isPrimePrimePrimePrimePrimePrimePrimeCount\
    \ = 0\n    var isPrimePrimePrimePrimePrimePrimePrimeFactorCount = 0\n    var isPrimePrimePrimePrimePrimePrimePrimeCount\
    \ = 0\n    var isPrimePrimePrimePrimePrimePrimePrimeFactorCount = 0\n    var isPrimePrimePrimePrimePrimePrimePrimePrimeCount\
    \ = 0\n    var isPrimePrimePrimePrimePrimePrimePrimePrimeFactorCount = 0\n   \
    \ var isPrimePrimePrimePrimePrimePrimePrimePrimePrimeCount = 0\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimeFactorCount\
    \ = 0\n    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount = 0\n\
    \    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeFactorCount = 0\n\
    \    var isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount = 0\n    var\
    \ isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeFactorCount = 0\n    var\
    \ isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount = 0\n    var isPrimePrimePrime",
  "    var factors = [Int]()\n    var i = 2\n    var p = 2\n    while i <= n {\n \
    \       if n % i == 0 {\n            factors.append(i)\n            n /= i\n \
    \       } else {\n            i += 1\n        }\n    }\n    if n != 1 {\n    \
    \    factors.append(n)\n    }\n    return factors", "    var factors = [Int]()\n\
    \    var primes = [Int]()\n    var primeFactors = [Int]()\n    var isPrime = [Bool]()\n\
    \    var isPrimeFactors = [Bool]()\n    var isPrimeFactorsCount = [Int]()\n  \
    \  var isPrimeFactorsCountMax = Int()\n    var isPrimeFactorsCountMaxIndex = Int()\n\
    \    var isPrimeFactorsCountMaxValue = Int()\n    var isPrimeFactorsCountMaxIndex\
    \ = Int()\n    var isPrimeFactorsCountMaxValue = Int()\n    var isPrimeFactorsCountMaxIndex\
    \ = Int()\n    var isPrimeFactorsCountMaxValue = Int()\n    var isPrimeFactorsCountMaxIndex\
    \ = Int()\n    var isPrimeFactorsCountMaxValue = Int()\n    var isPrimeFactorsCountMaxIndex\
    \ = Int()\n    var isPrimeFactorsCountMaxValue = Int()\n    var isPrimeFactorsCountMaxIndex\
    \ = Int()\n    var isPrimeFactorsCountMaxValue = Int()\n    var isPrimeFactorsCountMaxIndex\
    \ = Int()\n    var isPrimeFactorsCountMaxValue = Int()\n    var isPrimeFactorsCountMaxIndex\
    \ = Int()\n    var isPrimeFactorsCountMaxValue = Int()\n    var isPrimeFactorsCountMaxIndex\
    \ = Int()\n    var isPrimeFactorsCountMaxValue = Int()\n    var isPrimeFactorsCountMaxIndex\
    \ = Int()\n    var isPrimeFactorsCountMaxValue = Int()\n    var isPrimeFactorsCountMaxIndex\
    \ = Int()\n    var isPrimeFactorsCountMaxValue = Int()\n    var isPrimeFactorsCountMaxIndex\
    \ = Int()\n    var isPrimeFactorsCountMaxValue = Int()\n    var isPrimeFactorsCountMaxIndex\
    \ = Int()\n    var isPrimeFactorsCountMaxValue = Int()\n    var isPrimeFactorsCountMaxIndex\
    \ = Int()\n    var isPrimeFactorsCountMaxValue = Int()\n    var isPrimeFactorsCountMaxIndex\
    \ = Int()\n    var isPrimeFactorsCountMaxValue = Int()\n    var isPrimeFactorsCountMaxIndex\
    \ = Int()\n    var isPrimeFactorsCountMaxValue = Int()\n    var isPrimeFactorsCountMaxIndex\
    \ = Int()\n    var isPrimeFactorsCountMaxValue = Int()\n    var isPrimeFactorsCountMaxIndex\
    \ = Int()\n    var isPrimeFactorsCountMaxValue = Int()\n    var isPrimeFactorsCountMaxIndex\
    \ = Int()\n    var isPri", "    var factorization: [Int] = []\n    var i = 2\n\
    \    var j = 1\n    var k = 0\n    while i * j <= n {\n        if n % i == 0 {\n\
    \            factorization[k] += 1\n            n /= i\n            j = 1\n  \
    \      } else {\n            j += 1\n        }\n        k += 1\n    }\n    if\
    \ n > 1 {\n        factorization[k] += 1\n    }\n    return factorization", " \
    \   var factorization: [Int] = []\n    var factor = 2\n    var remainder: Int\n\
    \    while factor <= n {\n        remainder = n % factor\n        if remainder\
    \ == 0 {\n            factorization.append(factor)\n            n /= factor\n\
    \        } else {\n            factor *= remainder\n        }\n    }\n    if n\
    \ > 1 {\n        factorization.append(n)\n    }\n    return factorization", " \
    \   var factors = [Int]()\n    var i = 2\n    while i * i <= n {\n        if n\
    \ % i == 0 {\n            factors.append(i)\n            n /= i\n        }\n \
    \       i += 1\n    }\n    if n > 1 {\n        factors.append(n)\n    }\n    return\
    \ factors", "    var factorization: [Int] = []\n    var primeFactorization: [Int]\
    \ = []\n    var isPrime: [Bool] = []\n    var isPrimeCount: Int = 0\n    var isPrimeIndex:\
    \ Int = 0\n    var isPrimeCountIndex: Int = 0\n    var isPrimeCountMax: Int =\
    \ 0\n    var isPrimeCountMaxIndex: Int = 0\n    var isPrimeMax: Int = 0\n    var\
    \ isPrimeMaxIndex: Int = 0\n    var isPrimeMaxCount: Int = 0\n    var isPrimeMaxCountIndex:\
    \ Int = 0\n    var isPrimeMaxCountMax: Int = 0\n    var isPrimeMaxCountMaxIndex:\
    \ Int = 0\n    var isPrimeMaxCountMaxIndex2: Int = 0\n    var isPrimeMaxCountMaxIndex3:\
    \ Int = 0\n    var isPrimeMaxCountMaxIndex4: Int = 0\n    var isPrimeMaxCountMaxIndex5:\
    \ Int = 0\n    var isPrimeMaxCountMaxIndex6: Int = 0\n    var isPrimeMaxCountMaxIndex7:\
    \ Int = 0\n    var isPrimeMaxCountMaxIndex8: Int = 0\n    var isPrimeMaxCountMaxIndex9:\
    \ Int = 0\n    var isPrimeMaxCountMaxIndex10: Int = 0\n    var isPrimeMaxCountMaxIndex11:\
    \ Int = 0\n    var isPrimeMaxCountMaxIndex12: Int = 0\n    var isPrimeMaxCountMaxIndex13:\
    \ Int = 0\n    var isPrimeMaxCountMaxIndex14: Int = 0\n    var isPrimeMaxCountMaxIndex15:\
    \ Int = 0\n    var isPrimeMaxCountMaxIndex16: Int = 0\n    var isPrimeMaxCountMaxIndex17:\
    \ Int = 0\n    var isPrimeMaxCountMaxIndex18: Int = 0\n    var isPrimeMaxCountMaxIndex19:\
    \ Int = 0\n    var isPrimeMaxCountMaxIndex20: Int = 0\n    var isPrimeMaxCountMaxIndex21:\
    \ Int = 0\n    var isPrimeMaxCountMaxIndex22: Int = 0\n    var isPrimeMaxCountMaxIndex23:\
    \ Int = 0\n    var isPrimeMaxCountMaxIndex24: Int = 0\n    var isPrimeMaxCountMaxIndex25:\
    \ Int = 0\n    var isPrimeMaxCountMaxIndex26: Int = 0\n    var isPrimeMaxCountMaxIndex27:\
    \ Int = 0\n    var isPrimeMaxCountMaxIndex28: Int = 0\n    var isPrimeMaxCountMaxIndex29:\
    \ Int = 0\n    var isPrimeMaxCountMaxIndex30: Int = 0\n    var isPrime", "   \
    \ var factors = [Int]()\n    var i = 2\n    var factor = 1\n    while i <= n {\n\
    \        while n % i == 0 {\n            factors.append(factor)\n            n\
    \ /= i\n            factor = 1\n        }\n        i += 1\n        factor *= i\n\
    \    }\n    if n > 1 {\n        factors.append(factor)\n    }\n    return factors",
  "    var factorization = [Int]()\n    var primeFactorization = [Int]()\n    var\
    \ primeFactorizationCount = [Int]()\n    var primeFactorizationIndex = [Int]()\n\
    \    var isPrime = [Bool]()\n    var isPrimeCount = [Bool]()\n    var isPrimeIndex\
    \ = [Bool]()\n    var isPrimeCountIndex = [Bool]()\n    var isPrimeIndexCount\
    \ = [Bool]()\n    var isPrimeCountIndexCount = [Bool]()\n    var isPrimeIndexCountIndex\
    \ = [Bool]()\n    var isPrimeCountIndexCountIndex = [Bool]()\n    var isPrimeIndexCountIndexCountIndex\
    \ = [Bool]()\n    var isPrimeCountIndexCountIndexCountIndex = [Bool]()\n    var\
    \ isPrimeIndexCountIndexCountIndexCountIndex = [Bool]()\n    var isPrimeCountIndexCountIndexCountIndexCountIndex\
    \ = [Bool]()\n    var isPrimeIndexCountIndexCountIndexCountIndexCountIndex = [Bool]()\n\
    \    var isPrimeCountIndexCountIndexCountIndexCountIndexCountIndex = [Bool]()\n\
    \    var isPrimeIndexCountIndexCountIndexCountIndexCountIndexCountIndex = [Bool]()\n\
    \    var isPrimeCountIndexCountIndexCountIndexCountIndexCountIndexCountIndex =\
    \ [Bool]()\n    var isPrimeIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndex\
    \ = [Bool]()\n    var isPrimeCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndex\
    \ = [Bool]()\n    var isPrimeIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndex\
    \ = [Bool]()\n    var isPrimeCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndex\
    \ = [Bool]()\n    var isPrimeIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndex\
    \ = [Bool]()\n    var isPrimeCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndex\
    \ = [Bool]()\n    var isPrimeIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndex\
    \ = [Bool]()\n    var isPrimeCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndex\
    \ = [Bool]()\n    var isPrimeIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndex\
    \ = [Bool]()\n    var isPrimeCountIndexCountIndexCountIndexCountIndexCount", " \
    \   var factorization = [Int]()\n    var primes = [Int]()\n    var primeFactorization\
    \ = [Int]()\n    var primeFactors = [Int]()\n    var primeFactorsCount = [Int]()\n\
    \    var primeFactorsSum = [Int]()\n    var primeFactorsSumCount = [Int]()\n \
    \   var primeFactorsSumCount2 = [Int]()\n    var primeFactorsSumCount3 = [Int]()\n\
    \    var primeFactorsSumCount4 = [Int]()\n    var primeFactorsSumCount5 = [Int]()\n\
    \    var primeFactorsSumCount6 = [Int]()\n    var primeFactorsSumCount7 = [Int]()\n\
    \    var primeFactorsSumCount8 = [Int]()\n    var primeFactorsSumCount9 = [Int]()\n\
    \    var primeFactorsSumCount10 = [Int]()\n    var primeFactorsSumCount11 = [Int]()\n\
    \    var primeFactorsSumCount12 = [Int]()\n    var primeFactorsSumCount13 = [Int]()\n\
    \    var primeFactorsSumCount14 = [Int]()\n    var primeFactorsSumCount15 = [Int]()\n\
    \    var primeFactorsSumCount16 = [Int]()\n    var primeFactorsSumCount17 = [Int]()\n\
    \    var primeFactorsSumCount18 = [Int]()\n    var primeFactorsSumCount19 = [Int]()\n\
    \    var primeFactorsSumCount20 = [Int]()\n    var primeFactorsSumCount21 = [Int]()\n\
    \    var primeFactorsSumCount22 = [Int]()\n    var primeFactorsSumCount23 = [Int]()\n\
    \    var primeFactorsSumCount24 = [Int]()\n    var primeFactorsSumCount25 = [Int]()\n\
    \    var primeFactorsSumCount26 = [Int]()\n    var primeFactorsSumCount27 = [Int]()\n\
    \    var primeFactorsSumCount28 = [Int]()\n    var primeFactorsSumCount29 = [Int]()\n\
    \    var primeFactorsSumCount30 = [Int]()\n    var primeFactorsSumCount31 = [Int]()\n\
    \    var primeFactorsSumCount32 = [Int]()\n    var primeFactorsSumCount33 = [Int]()\n\
    \    var primeFactorsSumCount34 = [Int]()\n    var primeFactorsSumCount35 = [Int]()\n\
    \    var primeFactorsSumCount36 = [Int]()\n    var primeFactorsSumCount37 = [Int]()\n\
    \    var primeFactorsSumCount38 = [Int]()\n    var primeFactors", "    var factorization:\
    \ [Int] = []\n    var primeFactorization: [Int] = []\n    var isPrime: [Bool]\
    \ = []\n    var isPrimeCount: [Int] = []\n    var isPrimeCountMax: Int = 1\n \
    \   var isPrimeCountMin: Int = 1\n    var isPrimeCountMinMax: Int = 1\n    var\
    \ isPrimeCountMaxMin: Int = 1\n    var isPrimeCountMaxMinMax: Int = 1\n    var\
    \ isPrimeCountMaxMinMaxMax: Int = 1\n    var isPrimeCountMaxMinMaxMaxMax: Int\
    \ = 1\n    var isPrimeCountMaxMinMaxMaxMax: Int = 1\n    var isPrimeCountMaxMinMaxMaxMaxMax:\
    \ Int = 1\n    var isPrimeCountMaxMinMaxMaxMaxMaxMax: Int = 1\n    var isPrimeCountMaxMinMaxMaxMaxMaxMax:\
    \ Int = 1\n    var isPrimeCountMaxMinMaxMaxMaxMaxMaxMax: Int = 1\n    var isPrimeCountMaxMinMaxMaxMaxMaxMaxMax:\
    \ Int = 1\n    var isPrimeCountMaxMinMaxMaxMaxMaxMaxMax: Int = 1\n    var isPrimeCountMaxMinMaxMaxMaxMaxMaxMaxMax:\
    \ Int = 1\n    var isPrimeCountMaxMinMaxMaxMaxMaxMaxMaxMax: Int = 1\n    var isPrimeCountMaxMinMaxMaxMaxMaxMaxMaxMaxMax:\
    \ Int = 1\n    var isPrimeCountMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMax: Int = 1\n  \
    \  var isPrimeCountMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMax: Int = 1\n    var isPrimeCountMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMax:\
    \ Int = 1\n    var isPrimeCountMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMax: Int = 1\n\
    \    var isPrimeCountMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax: Int = 1\n    var\
    \ isPrimeCountMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax: Int = 1\n    var isPrimeCountMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax:\
    \ Int = 1\n    var isPrimeCountMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax: Int\
    \ = 1\n    var isPrimeCountMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax: Int = 1\n\
    \    var isPrimeCountMaxMinMaxMaxMaxMaxMaxMax", "    var factors = [Int]()\n \
    \   var factorization = factorizationOf(n)\n    for factor in factorization {\n\
    \        factors.append(factor)\n    }\n    return factors", "    var factors\
    \ = [Int]()\n    var factorization = factorizationOfNumber(n)\n    for i in 0..<factorization.count\
    \ {\n        factors.append(factorization[i])\n    }\n    return factors", " \
    \   var factorization = [Int]()\n    var factorizationCount = 1\n    var factorizationIndex\
    \ = 0\n    var factorizationFactor = 1\n    var factorizationFactorIndex = 0\n\
    \    var factorizationFactorIndexMax = Int(sqrt(Double(n)))\n    var factorizationFactorIndexMaxMinus1\
    \ = factorizationFactorIndexMax - 1\n    var factorizationFactorIndexMaxMinus2\
    \ = factorizationFactorIndexMaxMinus1 - 1\n    var factorizationFactorIndexMaxMinus3\
    \ = factorizationFactorIndexMaxMinus2 - 1\n    var factorizationFactorIndexMaxMinus4\
    \ = factorizationFactorIndexMaxMinus3 - 1\n    var factorizationFactorIndexMaxMinus5\
    \ = factorizationFactorIndexMaxMinus4 - 1\n    var factorizationFactorIndexMaxMinus6\
    \ = factorizationFactorIndexMaxMinus5 - 1\n    var factorizationFactorIndexMaxMinus7\
    \ = factorizationFactorIndexMaxMinus6 - 1\n    var factorizationFactorIndexMaxMinus8\
    \ = factorizationFactorIndexMaxMinus7 - 1\n    var factorizationFactorIndexMaxMinus9\
    \ = factorizationFactorIndexMaxMinus8 - 1\n    var factorizationFactorIndexMaxMinus10\
    \ = factorizationFactorIndexMaxMinus9 - 1\n    var factorizationFactorIndexMaxMinus11\
    \ = factorizationFactorIndexMaxMinus10 - 1\n    var factorizationFactorIndexMaxMinus12\
    \ = factorizationFactorIndexMaxMinus11 - 1\n    var factorizationFactorIndexMaxMinus13\
    \ = factorizationFactorIndexMaxMinus12 - 1\n    var factorizationFactorIndexMaxMinus14\
    \ = factorizationFactorIndexMaxMinus13 - 1\n    var factorizationFactorIndexMaxMinus15\
    \ = factorizationFactorIndexMaxMinus14 - 1\n    var factorizationFactorIndexMaxMinus16\
    \ = factorizationFactorIndexMaxMinus15 - 1\n    var factorizationFactorIndexMaxMinus17\
    \ = factorizationFactorIndexMaxMinus16 - 1\n    var factorizationFactorIndexMaxMinus18\
    \ = factorizationFactorIndexMaxMinus17 - 1\n    var factorizationFactorIndexMaxMinus19\
    \ = factorizationFactorIndexMaxMinus18 - 1\n    var factorizationFactorIndexMaxMinus20\
    \ = factorizationFactorIndexMaxMinus19 - 1\n    var factorizationFactorIndexMaxMinus21\
    \ = factorizationFactorIndexMaxMinus20 - 1\n    var factorizationFactorIndexMaxMinus22\
    \ = factorizationFactorIndexMaxMinus21 - 1\n    var factorizationFactorIndexMaxMinus23\
    \ = factorizationFactorIndexMaxMinus22 - 1\n    var factorizationFactorIndexMaxMinus24\
    \ = factorizationFactorIndexMaxMinus23 - 1"]
stop_tokens:
- "\n}"
