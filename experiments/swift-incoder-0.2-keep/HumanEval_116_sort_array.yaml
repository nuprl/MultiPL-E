name: HumanEval_116_sort_array
language: swift
prompt: "\n/// In this Kata, you have to sort an array of non-negative integers according\
  \ to\n/// number of ones in their binary representation in ascending order.\n///\
  \ For similar number of ones, sort based on decimal value.\n/// It must be implemented\
  \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>> sort_array([-2,\
  \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1, 0, 2, 3, 4])\
  \ [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int]) -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1,\
  \ 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5,\
  \ -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
  \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7,\
  \ 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6,\
  \ 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16,\
  \ 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4,\
  \ 8, 16, 32])"
completions: ["    var sorted = [Int]()\n    var oneCount = 0\n    for num in arr\
    \ {\n        if num == 1 {\n            oneCount++\n        } else {\n       \
    \     sorted.append(num)\n        }\n    }\n    if oneCount > 0 {\n        sorted.sort()\n\
    \    } else {\n        sorted = arr\n    }\n    return sorted", "    var result\
    \ = arr\n    for i in 0..<arr.count {\n        if arr[i] == 0 {\n            swap(&result[i],\
    \ &result[i+1])\n        }\n    }\n    return result", "    var result = [Int]()\n\
    \    var oneCount = 0\n    for element in arr {\n        if element == 1 {\n \
    \           oneCount++\n        } else {\n            if oneCount > 0 {\n    \
    \            result.append((oneCount - 1) * 10 + element)\n                oneCount\
    \ = 0\n            } else {\n                result.insert(element, at: 0)\n \
    \           }\n        }\n    }\n    return result", "    var result = [Int]()\n\
    \    for x in arr {\n        let binary = binary(x)\n        let decimal = decimal(binary)\n\
    \        result.insert(decimal, at: 0)\n    }\n    return result", '    return
    arr.sorted()', "    let ones = arr.filter{ $0 == 1 }\n    let decimals = arr.filter{\
    \ $0 != 1 }\n    let sortedOnes = ones.sorted()\n    let sortedDecimals = decimals.sorted()\n\
    \    return sortedOnes + sortedDecimals", "    var result = [Int]()\n    var i\
    \ = 0\n    for num in arr {\n        if num == 1 {\n            result.append(i)\n\
    \        }\n        i += 1\n    }\n    for num in arr {\n        if num != 1 {\n\
    \            result.append(num)\n        }\n    }\n    return result", "    var\
    \ sorted = [Int]()\n    var oneCount = 0\n    var decimalCount = 0\n    for num\
    \ in arr {\n        if num == 1 {\n            oneCount++\n        } else {\n\
    \            decimalCount += num\n        }\n    }\n    if oneCount > decimalCount\
    \ {\n        sorted = arr.sorted()\n    } else {\n        sorted = arr.sorted().reversed()\n\
    \    }\n    return sorted", "    var result = Array(repeating: 0, count: arr.count)\n\
    \    for i in 0..<arr.count {\n        if arr[i] == 1 {\n            result[i]\
    \ = i\n        }\n    }\n    result.sort { $0 < $1 }\n    return result", "  \
    \  var result = [Int]()\n    var index = 0\n    for num in arr {\n        if num\
    \ == 1 {\n            result.append(index)\n        }\n        index++\n    }\n\
    \    result.sort()\n    return result", '    return arr.sorted()', "    var result\
    \ = [Int]()\n    var oneCount = 0\n    var decimalCount = 0\n    for num in arr\
    \ {\n        if num == 1 {\n            oneCount++\n        } else {\n       \
    \     decimalCount += num\n        }\n    }\n    if oneCount > decimalCount {\n\
    \        for num in arr {\n            if num == 1 {\n                result.append(num)\n\
    \            }\n        }\n    } else {\n        for num in arr {\n          \
    \  if num == 1 {\n                result.append(decimalCount)\n            }\n\
    \            decimalCount -= num\n        }\n    }\n    return result", "    var\
    \ sorted = [Int]()\n    var ones = 0\n    var decimal = 0\n    for num in arr\
    \ {\n        if num == 1 {\n            ones += 1\n        } else {\n        \
    \    decimal += num\n        }\n    }\n    if ones > 0 {\n        sorted = sorted.sorted()\n\
    \    }\n    if ones == 0 && decimal > 0 {\n        sorted = sorted.sorted()\n\
    \    }\n    if ones == 0 && decimal == 0 {\n        sorted = sorted.sorted()\n\
    \    }\n    return sorted", "    var result = [Int]()\n    var ones = 0\n    var\
    \ decimal = 0\n    for i in arr {\n        if i == 1 {\n            ones += 1\n\
    \        } else {\n            decimal += pow(2, ones)\n        }\n        result.append(i)\n\
    \    }\n    if ones > 0 {\n        decimal += pow(2, ones)\n    }\n    result.sort(by:\
    \ {\n        decimal - $0\n    })\n    return result", "    var sorted = [Int]()\n\
    \    var oneCount = 0\n    var decimalCount = 0\n    for num in arr {\n      \
    \  if num == 1 {\n            oneCount++\n        } else {\n            decimalCount\
    \ += num\n        }\n    }\n    if oneCount > decimalCount {\n        sorted =\
    \ arr.sorted()\n    } else {\n        sorted = arr.sorted().reversed()\n    }\n\
    \    return sorted", '    return arr.sorted()', "    var sorted: [Int] = []\n\
    \    var ones: [Int] = []\n    var zeros: [Int] = []\n    for x in arr {\n   \
    \     if x == 1 {\n            ones.append(x)\n        } else {\n            zeros.append(x)\n\
    \        }\n    }\n    sorted = append(sorted, append(ones, zeros))\n    sorted\
    \ = append(sorted, append(zeros, ones))\n    sorted = append(sorted, append(ones,\
    \ zeros))\n    sorted = append(sorted, append(zeros, ones))\n    sorted = append(sorted,\
    \ append(ones, zeros))\n    sorted = append(sorted, append(zeros, ones))\n   \
    \ sorted = append(sorted, append(ones, zeros))\n    sorted = append(sorted, append(zeros,\
    \ ones))\n    sorted = append(sorted, append(ones, zeros))\n    sorted = append(sorted,\
    \ append(zeros, ones))\n    sorted = append(sorted, append(ones, zeros))\n   \
    \ sorted = append(sorted, append(zeros, ones))\n    sorted = append(sorted, append(ones,\
    \ zeros))\n    sorted = append(sorted, append(zeros, ones))\n    sorted = append(sorted,\
    \ append(ones, zeros))\n    sorted = append(sorted, append(zeros, ones))\n   \
    \ sorted = append(sorted, append(ones, zeros))\n    sorted = append(sorted, append(zeros,\
    \ ones))\n    sorted = append(sorted, append(ones, zeros))\n    sorted = append(sorted,\
    \ append(zeros, ones))\n    sorted = append(sorted, append(ones, zeros))\n   \
    \ sorted = append(sorted, append(zeros, ones))\n    sorted = append(sorted, append(ones,\
    \ zeros))\n    sorted = append(sorted, append(zeros, ones))\n    sorted = append(sorted,\
    \ append(ones, zeros))\n    sorted = append(sorted, append(zeros, ones))\n   \
    \ sorted = append(sorted, append(ones, zeros))\n    sorted = append(sorted, append(zeros,\
    \ ones))\n    sorted = append(sorted, append(ones, zeros))\n    sorted = append(sorted,\
    \ append(zeros, ones))\n    sorted = append(sorted, append(ones, zeros))\n   \
    \ sorted = append(sorted, append(zeros, ones))\n    sorted = append(sorted, append(ones,\
    \ zeros))\n    sorted = append(sorted, append(zeros, ones))\n    sorted = append(sorted,\
    \ append(ones, zeros))\n    sorted = append(sorted, append(zeros, ones))\n   \
    \ sorted = append(sorted, append(ones, zeros))\n    sorted = append(sorted, append(zeros,\
    \ ones))\n    sorted = append(sorted, append(ones, zeros))\n", '    return arr.sorted()',
  "    var result = [Int]()\n    var count = 0\n    for element in arr {\n       \
    \ if element == 1 {\n            count += 1\n        } else {\n            count\
    \ = 0\n        }\n        if count == 0 {\n            result.append(element)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    var oneCount\
    \ = 0\n    var decimalCount = 0\n    for num in arr {\n        if num == 1 {\n\
    \            oneCount++\n        } else {\n            decimalCount += num\n \
    \       }\n    }\n    if oneCount > decimalCount {\n        for num in arr {\n\
    \            if num == 1 {\n                result.insert(result.count-1, num)\n\
    \            }\n        }\n    } else {\n        for num in arr {\n          \
    \  if num == 1 {\n                result.append(num)\n            }\n        }\n\
    \    }\n    return result"]
stop_tokens:
- "\n}"
