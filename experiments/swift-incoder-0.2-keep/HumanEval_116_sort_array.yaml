name: HumanEval_116_sort_array
language: swift
prompt: "\n/// In this Kata, you have to sort an array of non-negative integers according\
  \ to\n/// number of ones in their binary representation in ascending order.\n///\
  \ For similar number of ones, sort based on decimal value.\n/// It must be implemented\
  \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>> sort_array([-2,\
  \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1, 0, 2, 3, 4])\
  \ [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int]) -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1,\
  \ 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5,\
  \ -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
  \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7,\
  \ 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6,\
  \ 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16,\
  \ 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4,\
  \ 8, 16, 32])"
completions: ["    var sorted = [Int]()\n    var oneCount = 0\n    for num in arr\
    \ {\n        if num == 1 {\n            oneCount++\n        } else {\n       \
    \     sorted.append(num)\n        }\n    }\n    if oneCount > 0 {\n        sorted.sort()\n\
    \    } else {\n        sorted = arr\n    }\n    return sorted", "    var result\
    \ = arr\n    for i in 0..<arr.count {\n        if arr[i] == 0 {\n            swap(&result[i],\
    \ &result[i+1])\n        }\n    }\n    return result", "    var result = [Int]()\n\
    \    var oneCount = 0\n    for element in arr {\n        if element == 1 {\n \
    \           oneCount++\n        } else {\n            if oneCount > 0 {\n    \
    \            result.append((oneCount - 1) * 10 + element)\n                oneCount\
    \ = 0\n            } else {\n                result.insert(element, at: 0)\n \
    \           }\n        }\n    }\n    return result", "    var result = [Int]()\n\
    \    for x in arr {\n        let binary = binary(x)\n        let decimal = decimal(binary)\n\
    \        result.insert(decimal, at: 0)\n    }\n    return result", '    return
    arr.sorted()', "    let ones = arr.filter{ $0 == 1 }\n    let decimals = arr.filter{\
    \ $0 != 1 }\n    let sortedOnes = ones.sorted()\n    let sortedDecimals = decimals.sorted()\n\
    \    return sortedOnes + sortedDecimals", "    var result = [Int]()\n    var i\
    \ = 0\n    for num in arr {\n        if num == 1 {\n            result.append(i)\n\
    \        }\n        i += 1\n    }\n    for num in arr {\n        if num != 1 {\n\
    \            result.append(num)\n        }\n    }\n    return result", "    var\
    \ sorted = [Int]()\n    var oneCount = 0\n    var decimalCount = 0\n    for num\
    \ in arr {\n        if num == 1 {\n            oneCount++\n        } else {\n\
    \            decimalCount += num\n        }\n    }\n    if oneCount > decimalCount\
    \ {\n        sorted = arr.sorted()\n    } else {\n        sorted = arr.sorted().reversed()\n\
    \    }\n    return sorted", "    var result = Array(repeating: 0, count: arr.count)\n\
    \    for i in 0..<arr.count {\n        if arr[i] == 1 {\n            result[i]\
    \ = i\n        }\n    }\n    result.sort { $0 < $1 }\n    return result", "  \
    \  var result = [Int]()\n    var index = 0\n    for num in arr {\n        if num\
    \ == 1 {\n            result.append(index)\n        }\n        index++\n    }\n\
    \    result.sort()\n    return result", '    return arr.sorted()', "    var result\
    \ = [Int]()\n    var oneCount = 0\n    var decimalCount = 0\n    for num in arr\
    \ {\n        if num == 1 {\n            oneCount++\n        } else {\n       \
    \     decimalCount += num\n        }\n    }\n    if oneCount > decimalCount {\n\
    \        for num in arr {\n            if num == 1 {\n                result.append(num)\n\
    \            }\n        }\n    } else {\n        for num in arr {\n          \
    \  if num == 1 {\n                result.append(decimalCount)\n            }\n\
    \            decimalCount -= num\n        }\n    }\n    return result", "    var\
    \ sorted = [Int]()\n    var ones = 0\n    var decimal = 0\n    for num in arr\
    \ {\n        if num == 1 {\n            ones += 1\n        } else {\n        \
    \    decimal += num\n        }\n    }\n    if ones > 0 {\n        sorted = sorted.sorted()\n\
    \    }\n    if ones == 0 && decimal > 0 {\n        sorted = sorted.sorted()\n\
    \    }\n    if ones == 0 && decimal == 0 {\n        sorted = sorted.sorted()\n\
    \    }\n    return sorted", "    var result = [Int]()\n    var ones = 0\n    var\
    \ decimal = 0\n    for i in arr {\n        if i == 1 {\n            ones += 1\n\
    \        } else {\n            decimal += pow(2, ones)\n        }\n        result.append(i)\n\
    \    }\n    if ones > 0 {\n        decimal += pow(2, ones)\n    }\n    result.sort(by:\
    \ {\n        decimal - $0\n    })\n    return result", "    var sorted = [Int]()\n\
    \    var oneCount = 0\n    var decimalCount = 0\n    for num in arr {\n      \
    \  if num == 1 {\n            oneCount++\n        } else {\n            decimalCount\
    \ += num\n        }\n    }\n    if oneCount > decimalCount {\n        sorted =\
    \ arr.sorted()\n    } else {\n        sorted = arr.sorted().reversed()\n    }\n\
    \    return sorted", '    return arr.sorted()', "    var sorted: [Int] = []\n\
    \    var ones: [Int] = []\n    var zeros: [Int] = []\n    for x in arr {\n   \
    \     if x == 1 {\n            ones.append(x)\n        } else {\n            zeros.append(x)\n\
    \        }\n    }\n    sorted = append(sorted, append(ones, zeros))\n    sorted\
    \ = append(sorted, append(zeros, ones))\n    sorted = append(sorted, append(ones,\
    \ zeros))\n    sorted = append(sorted, append(zeros, ones))\n    sorted = append(sorted,\
    \ append(ones, zeros))\n    sorted = append(sorted, append(zeros, ones))\n   \
    \ sorted = append(sorted, append(ones, zeros))\n    sorted = append(sorted, append(zeros,\
    \ ones))\n    sorted = append(sorted, append(ones, zeros))\n    sorted = append(sorted,\
    \ append(zeros, ones))\n    sorted = append(sorted, append(ones, zeros))\n   \
    \ sorted = append(sorted, append(zeros, ones))\n    sorted = append(sorted, append(ones,\
    \ zeros))\n    sorted = append(sorted, append(zeros, ones))\n    sorted = append(sorted,\
    \ append(ones, zeros))\n    sorted = append(sorted, append(zeros, ones))\n   \
    \ sorted = append(sorted, append(ones, zeros))\n    sorted = append(sorted, append(zeros,\
    \ ones))\n    sorted = append(sorted, append(ones, zeros))\n    sorted = append(sorted,\
    \ append(zeros, ones))\n    sorted = append(sorted, append(ones, zeros))\n   \
    \ sorted = append(sorted, append(zeros, ones))\n    sorted = append(sorted, append(ones,\
    \ zeros))\n    sorted = append(sorted, append(zeros, ones))\n    sorted = append(sorted,\
    \ append(ones, zeros))\n    sorted = append(sorted, append(zeros, ones))\n   \
    \ sorted = append(sorted, append(ones, zeros))\n    sorted = append(sorted, append(zeros,\
    \ ones))\n    sorted = append(sorted, append(ones, zeros))\n    sorted = append(sorted,\
    \ append(zeros, ones))\n    sorted = append(sorted, append(ones, zeros))\n   \
    \ sorted = append(sorted, append(zeros, ones))\n    sorted = append(sorted, append(ones,\
    \ zeros))\n    sorted = append(sorted, append(zeros, ones))\n    sorted = append(sorted,\
    \ append(ones, zeros))\n    sorted = append(sorted, append(zeros, ones))\n   \
    \ sorted = append(sorted, append(ones, zeros))\n    sorted = append(sorted, append(zeros,\
    \ ones))\n    sorted = append(sorted, append(ones, zeros))\n", '    return arr.sorted()',
  "    var result = [Int]()\n    var count = 0\n    for element in arr {\n       \
    \ if element == 1 {\n            count += 1\n        } else {\n            count\
    \ = 0\n        }\n        if count == 0 {\n            result.append(element)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    var oneCount\
    \ = 0\n    var decimalCount = 0\n    for num in arr {\n        if num == 1 {\n\
    \            oneCount++\n        } else {\n            decimalCount += num\n \
    \       }\n    }\n    if oneCount > decimalCount {\n        for num in arr {\n\
    \            if num == 1 {\n                result.insert(result.count-1, num)\n\
    \            }\n        }\n    } else {\n        for num in arr {\n          \
    \  if num == 1 {\n                result.append(num)\n            }\n        }\n\
    \    }\n    return result", "    var result = [Int]()\n    var i = 0\n    for\
    \ num in arr {\n        if num == 1 {\n            result.append(i)\n        }\n\
    \        i += 1\n    }\n    result.sort()\n    return result", "    var sorted\
    \ = [Int]()\n    var oneCount = [Int]()\n    for num in arr {\n        oneCount[num]\
    \ = oneCount[num] + 1\n    }\n    for num in oneCount {\n        if num == 1 {\n\
    \            sorted = sorted + [num]\n        }\n    }\n    for num in arr {\n\
    \        if oneCount[num] == 1 {\n            sorted = sorted + [num]\n      \
    \  }\n    }\n    return sorted", "    let ones = arr.filter{$0 == 1}\n    let\
    \ decimal = arr.filter{$0 != 1}\n    let sortedOnes = ones.sorted()\n    let sortedDecimal\
    \ = decimal.sorted()\n    return sortedOnes + sortedDecimal", "    var sorted\
    \ = [Int]()\n    var oneCount = 0\n    var decimalCount = 0\n    for num in arr\
    \ {\n        if num == 1 {\n            oneCount += 1\n        } else {\n    \
    \        decimalCount += num\n        }\n    }\n    if oneCount > decimalCount\
    \ {\n        sorted = arr\n    } else {\n        sorted = arr.sorted()\n    }\n\
    \    return sorted", "    var sorted = [Int]()\n    var oneCount = 0\n    for\
    \ num in arr {\n        if num == 1 {\n            oneCount++\n        } else\
    \ {\n            sorted.append(num)\n        }\n    }\n    if oneCount > 0 {\n\
    \        sorted.sort()\n    } else {\n        sorted = arr\n    }\n    return\
    \ sorted", "    var result = [Int]()\n    var ones = 0\n    var decimal = 0\n\
    \    for n in arr {\n        ones = n % 2\n        decimal = n / 2\n        if\
    \ ones == 0 {\n            result.insert(decimal, ones)\n        } else {\n  \
    \          result.insert(decimal, ones)\n            result.insert(decimal, decimal)\n\
    \        }\n    }\n    return result", '    return arr.sorted()', "    let ones\
    \ = arr.filter{ $0 > 0 }.count\n    let decimal = arr.filter{ $0 > 0 }.sorted{\
    \ $0 < $1 }.first!\n    return arr.sorted{ $0 < $1 }.map{ $0 > 0 ? ones : decimal\
    \ }", "    var sorted = [Int]()\n    var oneCount = 0\n    for num in arr {\n\
    \        if num == 1 {\n            oneCount++\n        } else {\n           \
    \ sorted.append(num)\n        }\n    }\n    if oneCount > 0 {\n        sorted.sort()\n\
    \    } else {\n        sorted = arr.sorted()\n    }\n    return sorted", "   \
    \ var result = [Int]()\n    var oneCount = 0\n    var decimalCount = 0\n    for\
    \ num in arr {\n        if num == 1 {\n            oneCount++\n        } else\
    \ {\n            decimalCount += num\n        }\n    }\n    if oneCount > decimalCount\
    \ {\n        for num in arr {\n            if num == 1 {\n                result.insert(result.count,\
    \ num)\n                oneCount--\n            }\n        }\n    } else {\n \
    \       for num in arr {\n            if num == 1 {\n                result.insert(result.count,\
    \ num)\n                decimalCount--\n            }\n        }\n    }\n    return\
    \ result", "    var result = [Int]()\n    var ones = 0\n    for num in arr {\n\
    \        if num == 1 {\n            ones += 1\n        } else {\n            if\
    \ ones > 0 {\n                result.append((ones - 1) * 10)\n            }\n\
    \            ones = 1\n            result.append(num)\n        }\n    }\n    if\
    \ ones > 0 {\n        result.append((ones - 1) * 10)\n    }\n    return result",
  "    var result = Array(repeating: 0, count: arr.count)\n    for idx in 0..<arr.count\
    \ {\n        if arr[idx] == 1 {\n            result[idx] = idx\n        }\n  \
    \  }\n    result.sort { $0 < $1 }\n    return result", "    var result = Array(repeating:\
    \ 0, count: arr.count)\n    for i in 0..<arr.count {\n        let bin = arr[i].bin()\n\
    \        let index = bin.index(of: \"1\")\n        if index < bin.endIndex {\n\
    \            result[i] = Int(bin[index])\n        } else {\n            result[i]\
    \ = Int(bin.prefix(upTo: index).reversed().joined())\n        }\n    }\n    return\
    \ result.sorted()", "    let len = arr.count\n    var result = [Int](repeating:\
    \ 0, count: len)\n    var ones = 0\n    for i in 0..<len {\n        if arr[i]\
    \ == 1 {\n            ones += 1\n        } else {\n            result[ones] =\
    \ arr[i]\n            ones += 1\n        }\n    }\n    if ones > 0 {\n       \
    \ result[ones] = arr[len - 1]\n    }\n    return result", "    var sorted = [Int]()\n\
    \    var oneCount = 0\n    for num in arr {\n        if num == 1 {\n         \
    \   oneCount++\n        } else {\n            sorted.append(num)\n        }\n\
    \    }\n    if oneCount > 0 {\n        sorted.sort()\n    } else {\n        sorted\
    \ = arr.sorted()\n    }\n    return sorted", "    arr.sort()\n    return arr",
  "    var result = [Int]()\n    var ones = 0\n    var decimal = 0\n    for n in arr\
    \ {\n        if n == 1 {\n            ones += 1\n        } else {\n          \
    \  decimal += pow(2, -ones)\n        }\n        result.append(n)\n    }\n    if\
    \ ones > 0 {\n        decimal += pow(2, -ones)\n    }\n    result.sort(by: { (a,\
    \ b) -> Bool in\n        let aDecimal = pow(2, -a)\n        let bDecimal = pow(2,\
    \ -b)\n        return aDecimal < bDecimal\n    })\n    if ones > 0 {\n       \
    \ result.sort(by: { (a, b) -> Bool in\n            let aDecimal = pow(2, -a)\n\
    \            let bDecimal = pow(2, -b)\n            return aDecimal > bDecimal\n\
    \        })\n    }\n    if decimal > 0 {\n        result.sort(by: { (a, b) ->\
    \ Bool in\n            let aDecimal = pow(2, -a)\n            let bDecimal = pow(2,\
    \ -b)\n            return aDecimal > bDecimal\n        })\n    }\n    return result",
  "    var result = [Int]()\n    var ones = [0]\n    var zeros = [0]\n    for num\
    \ in arr {\n        if num == 1 {\n            ones.append(0)\n        } else\
    \ {\n            ones.append(1)\n        }\n        if num == 0 {\n          \
    \  zeros.append(0)\n        } else {\n            zeros.append(1)\n        }\n\
    \    }\n    for num in ones {\n        if num == 1 {\n            ones.remove(num)\n\
    \        } else {\n            ones.remove(num)\n            zeros.remove(num)\n\
    \        }\n    }\n    for num in zeros {\n        if num == 1 {\n           \
    \ zeros.remove(num)\n        } else {\n            zeros.remove(num)\n       \
    \     ones.remove(num)\n        }\n    }\n    for num in ones {\n        if num\
    \ == 0 {\n            ones.remove(num)\n        } else {\n            ones.remove(num)\n\
    \            zeros.remove(num)\n        }\n    }\n    for num in zeros {\n   \
    \     if num == 0 {\n            zeros.remove(num)\n        } else {\n       \
    \     zeros.remove(num)\n            ones.remove(num)\n        }\n    }\n    for\
    \ num in ones {\n        if num == 0 {\n            ones.remove(num)\n       \
    \ } else {\n            ones.remove(num)\n            zeros.remove(num)\n    \
    \    }\n    }\n    for num in zeros {\n        if num == 0 {\n            zeros.remove(num)\n\
    \        } else {\n            zeros.remove(num)\n            ones.remove(num)\n\
    \        }\n    }\n    for num in ones {\n        if num == 0 {\n            ones.remove(num)\n\
    \        } else {\n            ones.remove(num)\n            zeros.remove(num)\n\
    \        }\n    }\n    for num in zeros {\n        if num == 0 {\n           \
    \ zeros.remove(num)\n        } else {\n            zeros.remove(num)\n       \
    \     ones.remove(num)\n        }\n    }\n    for num in ones {\n        if num\
    \ == 0 {\n            ones.remove(num)\n        } else {\n            ones.remove(num)\n\
    \            zeros.remove(num)\n        }\n    }\n    for num in zeros {\n   \
    \     if num == 0 {\n            zeros.remove(num)\n        } else {\n       \
    \     zeros.remove(num)\n            ones.remove(num)\n        }\n    }\n    for\
    \ num in ones {\n        if num == 0 {\n            ones.remove(num)\n       \
    \ } else {\n            ones.remove(num)\n            zeros.remove(num)\n    \
    \    }\n    }\n    for num in zeros {\n        if num == 0 {\n            zeros.remove(num)\n\
    \        } else {\n            zeros.remove(num)\n            ones.remove(num)\n\
    \        }\n    }\n    for num in ones {\n        if num == 0 {\n            ones.remove(num)\n\
    \        } else {\n            ones.remove(num)\n            zeros.remove(num)\n\
    \        }\n    }\n    for num in zeros {\n        if num == 0 {\n            ",
  "    var result = [Int]()\n    var i = 0\n    for num in arr {\n        if num ==\
    \ 1 {\n            result.append(i)\n        }\n        i += 1\n    }\n    for\
    \ num in arr {\n        if num != 1 {\n            result.append(num)\n      \
    \  }\n    }\n    return result", "    var result = [Int]()\n    var oneCount =\
    \ 0\n    var decimalCount = 0\n    for num in arr {\n        if num == 1 {\n \
    \           oneCount++\n        } else {\n            decimalCount += num\n  \
    \      }\n    }\n    if oneCount > decimalCount {\n        for num in arr {\n\
    \            if num == 1 {\n                result.append(num)\n            }\n\
    \        }\n    } else {\n        for num in arr {\n            if num == 1 {\n\
    \                result.append(decimalCount)\n            }\n            decimalCount\
    \ -= num\n        }\n    }\n    return result", "    let ones = arr.filter{$0}.count\n\
    \    let decimal = arr.filter{$0 > 0}.count\n    return arr.sorted { $0 < $1 }",
  "    var sorted = [Int]()\n    var ones = 0\n    var decimal = 0\n    for num in\
    \ arr {\n        ones += (num & 1)\n        decimal += num\n    }\n    if ones\
    \ == 0 {\n        sorted = arr\n    } else {\n        sorted = [Int](repeating:\
    \ decimal, count: arr.count)\n        var i = 0\n        for num in arr {\n  \
    \          if num == 0 {\n                sorted[i] = 0\n            } else {\n\
    \                sorted[i] = (num & 1) + decimal\n            }\n            i\
    \ += 1\n        }\n    }\n    return sorted", "    var sorted = [Int]()\n    var\
    \ ones = 0\n    for num in arr {\n        if num == 1 {\n            ones += 1\n\
    \        } else {\n            sorted.append(num)\n        }\n    }\n    if ones\
    \ > 0 {\n        sorted.sort()\n    }\n    return sorted", "    var result = [Int]()\n\
    \    var oneCount = 0\n    var decimalCount = 0\n    for num in arr {\n      \
    \  if num == 1 {\n            oneCount++\n        } else {\n            decimalCount\
    \ += num\n        }\n    }\n    if oneCount > decimalCount {\n        for num\
    \ in arr {\n            if num == 1 {\n                result.append(num)\n  \
    \          }\n        }\n    } else {\n        for num in arr {\n            if\
    \ num == 1 {\n                result.append(decimalCount)\n            }\n   \
    \         decimalCount -= num\n        }\n    }\n    return result", "    var\
    \ result = [Int]()\n    var oneCount = 0\n    for num in arr {\n        if num\
    \ == 1 {\n            oneCount++\n        } else {\n            if oneCount >\
    \ 0 {\n                result.append((oneCount - 1) * 10 + num)\n            \
    \    oneCount = 0\n            } else {\n                result.append(num)\n\
    \            }\n        }\n    }\n    return result", "    var result = [Int]()\n\
    \    var i = 0\n    for num in arr {\n        if num == 0 {\n            result.append(i)\n\
    \        }\n        i += 1\n    }\n    result.sort()\n    return result", "  \
    \  var result = [Int]()\n    var oneCount = 0\n    for num in arr {\n        if\
    \ num == 1 {\n            oneCount++\n        } else {\n            if oneCount\
    \ > 0 {\n                result.append((oneCount - 1) * 10 + num)\n          \
    \      oneCount = 0\n            } else {\n                result.insert(result.count,\
    \ num)\n            }\n        }\n    }\n    return result", "    var sorted =\
    \ [Int]()\n    var oneCount = 0\n    for num in arr {\n        if num == 1 {\n\
    \            oneCount++\n        } else {\n            sorted.append(num)\n  \
    \      }\n    }\n    if oneCount > 0 {\n        sorted.sort()\n    } else {\n\
    \        sorted = arr.sorted()\n    }\n    return sorted", "    var result = [Int]()\n\
    \    var i = 0\n    for num in arr {\n        if num == 1 {\n            result.append(i)\n\
    \        }\n        i += 1\n    }\n    result.sort()\n    return result", '    return
    arr.sorted()', "    var result = [Int]()\n    var i = 0\n    var j = 0\n    var\
    \ k = 0\n    for k in 0..<arr.count {\n        if arr[k] == 1 {\n            result.append(k)\n\
    \            i += 1\n        } else {\n            if j == i {\n             \
    \   result.append(k)\n                j += 1\n            } else {\n         \
    \       if arr[j] > arr[k] {\n                    result.append(k)\n         \
    \           j += 1\n                } else {\n                    result.append(j)\n\
    \                    i += 1\n                }\n            }\n        }\n   \
    \ }\n    if i == arr.count {\n        result.append(j)\n    }\n    return result",
  "    var result = [Int]()\n    var ones = 0\n    for num in arr {\n        if num\
    \ == 1 {\n            ones += 1\n        } else {\n            if ones == 0 {\n\
    \                result.append(num)\n            } else {\n                result.insert(result.count\
    \ - ones, num)\n            }\n            ones = 0\n        }\n    }\n    return\
    \ result", "    var result = Array(repeating: 0, count: arr.count)\n    for i\
    \ in 0..<arr.count {\n        let bin = String(format: \"%b\", arr[i])\n     \
    \   let index = bin.index(of: \"1\")!\n        result[i] = Int(bin[index..<bin.endIndex])\n\
    \    }\n    return result.sorted()", "    var sorted = [Int]()\n    var oneCount\
    \ = 0\n    for num in arr {\n        if num == 1 {\n            oneCount++\n \
    \       } else {\n            sorted.append(num)\n        }\n    }\n    if oneCount\
    \ > 0 {\n        sorted.sort()\n    } else {\n        sorted = arr.sorted()\n\
    \    }\n    return sorted", "    arr.sort()\n    return arr", "    var result\
    \ = [Int]()\n    var oneCount = 0\n    for num in arr {\n        if num == 1 {\n\
    \            oneCount++\n        } else {\n            if oneCount > 0 {\n   \
    \             result.sort()\n                oneCount = 0\n            }\n   \
    \         result.append(num)\n        }\n    }\n    if oneCount > 0 {\n      \
    \  result.sort()\n    }\n    return result", "    var sorted = [Int]()\n    var\
    \ oneCount = 0\n    var decimalCount = 0\n    for num in arr {\n        if num\
    \ == 1 {\n            oneCount++\n        } else {\n            decimalCount +=\
    \ num\n        }\n    }\n    if oneCount > decimalCount {\n        sorted = arr.sorted()\n\
    \    } else {\n        sorted = arr.sorted(by: {\n            ($0 - ($1 as! Int))\n\
    \        })\n    }\n    return sorted", "    var result = [Int]()\n    var oneCount\
    \ = 0\n    var decimalCount = 0\n    for num in arr {\n        if num == 1 {\n\
    \            oneCount++\n        } else {\n            decimalCount += num\n \
    \       }\n    }\n    if oneCount > decimalCount {\n        for num in arr {\n\
    \            if num == 1 {\n                result.append(num)\n            }\n\
    \        }\n    } else {\n        for num in arr {\n            if num == 1 {\n\
    \                result.append(decimalCount)\n            }\n            decimalCount\
    \ -= num\n        }\n    }\n    return result", "    var result = [Int]()\n  \
    \  var oneCount = 0\n    var decimalCount = 0\n    for element in arr {\n    \
    \    if element == 1 {\n            oneCount++\n        } else {\n           \
    \ decimalCount += element - Int(element)\n        }\n    }\n    if oneCount >\
    \ decimalCount {\n        for element in arr {\n            if element == 1 {\n\
    \                result.append(element)\n            }\n        }\n    } else\
    \ {\n        for element in arr {\n            if element == 1 {\n           \
    \     result.append(decimalCount)\n            }\n            decimalCount -=\
    \ element - Int(element)\n        }\n    }\n    return result", '    return arr.sorted()',
  "    \n    var result = Array(repeating: 0, count: arr.count)\n    \n    for i in\
    \ 0..<arr.count {\n        let bin = String(format: \"%0*b\", 0, arr[i])\n   \
    \     let count = bin.count\n        let index = bin.index(bin.startIndex, offsetBy:\
    \ 1)\n        result[i] = Int(bin[index])\n    }\n    \n    return result.sorted()",
  "    var result = Array(repeating: 0, count: arr.count)\n    for i in 0..<arr.count\
    \ {\n        let bin = String(format: \"%0*b%0*b\", 0, arr[i], 0, arr[i])\n  \
    \      result[i] = Int(bin, radix: 2)\n    }\n    result.sort { $0 < $1 }\n  \
    \  return result", "    var result = [Int]()\n    var oneCount = 0\n    for num\
    \ in arr {\n        if num == 1 {\n            oneCount++\n        } else {\n\
    \            if oneCount > 0 {\n                result.sort()\n              \
    \  oneCount = 0\n            }\n            result.append(num)\n        }\n  \
    \  }\n    if oneCount > 0 {\n        result.sort()\n    }\n    return result",
  "    var result = [Int]()\n    for num in arr {\n        if num == 0 {\n       \
    \     continue\n        }\n        var count = 0\n        for bit in num.bits()\
    \ {\n            if bit == 1 {\n                count += 1\n            }\n  \
    \      }\n        if count > result.count {\n            result = result\n   \
    \     }\n        result.append(num)\n    }\n    return result", "    \n    var\
    \ result = [Int]()\n    \n    for i in 0..<arr.count {\n        let ones = arr[i]\
    \ & 1\n        \n        if ones == 0 {\n            result.append(arr[i])\n \
    \       } else {\n            let index = result.index(of: ones)\n           \
    \ \n            if index == 0 {\n                result.append(arr[i])\n     \
    \       } else {\n                result.insert(arr[i], at: index)\n         \
    \   }\n        }\n    }\n    \n    return result", "    var sortedArr = arr\n\
    \    var oneCount = 0\n    for elem in arr {\n        if elem == 1 {\n       \
    \     oneCount++\n        } else {\n            sortedArr = sortedArr.sorted()\n\
    \        }\n    }\n    if oneCount > 0 {\n        sortedArr = sortedArr.sorted()\n\
    \    }\n    return sortedArr", "    var result = Array(repeating: 0, count: arr.count)\n\
    \    for i in 0..<arr.count {\n        let bin = String(format: \"%b\", arr[i])\n\
    \        let index = bin.index(of: \"1\")!\n        result[i] = arr[i]\n     \
    \   result[index] = arr[i]\n    }\n    return result.sorted(by: { $0 < $1 })",
  "    var result = [Int]()\n    var i = 0\n    for num in arr {\n        if num ==\
    \ 1 {\n            result.append(i)\n        }\n        i += 1\n    }\n    result.sort()\n\
    \    return result", '    return arr.sorted()', "    var result = Array(repeating:\
    \ 0, count: arr.count)\n    for i in 0..<arr.count {\n        let bin = binary(from:\
    \ arr[i])\n        let index = bin.index(of: \"1\")!\n        result[i] = arr[i]\n\
    \        result[index] = arr[i]\n    }\n    return result.sorted(by: { $0 < $1\
    \ })", "    var result = [Int]()\n    var index = 0\n    for num in arr {\n  \
    \      if num == 1 {\n            result.append(index)\n        }\n        index++\n\
    \    }\n    result.sort()\n    return result", "    var result = [Int]()\n   \
    \ var oneCount = 0\n    var decimalCount = 0\n    for element in arr {\n     \
    \   if element == 1 {\n            oneCount++\n        } else {\n            decimalCount\
    \ += element - oneCount\n            oneCount = 0\n        }\n    }\n    for element\
    \ in arr {\n        if element == 1 {\n            result.append(element)\n  \
    \      } else {\n            result.append(decimalCount)\n            decimalCount\
    \ = 0\n        }\n    }\n    return result", "    let ones = arr.filter{ $0 ==\
    \ 1 }\n    let decimals = arr.filter{ $0 > 1 }\n    let sortedOnes = ones.sorted()\n\
    \    let sortedDecimals = decimals.sorted()\n    return sortedOnes + sortedDecimals",
  '    return arr.sorted()', "    var result = [Int]()\n    var ones = [0]\n    var\
    \ zeros = [0]\n    for n in arr {\n        if n != 0 {\n            ones = append(ones,\
    \ 1)\n        } else {\n            zeros = append(zeros, 0)\n        }\n    }\n\
    \    for n in ones {\n        result = append(result, n)\n    }\n    for n in\
    \ zeros {\n        result = append(result, -n)\n    }\n    return result", " \
    \   var result = [Int]()\n    var ones = 0\n    var decimal = 0\n    for element\
    \ in arr {\n        if element == 1 {\n            ones += 1\n        } else {\n\
    \            decimal += element / 2\n        }\n    }\n    for element in arr\
    \ {\n        if element == 1 {\n            ones += 1\n        } else {\n    \
    \        decimal += element / 2\n        }\n        if ones > 0 {\n          \
    \  result.append(decimal)\n            decimal = 0\n            ones = 0\n   \
    \     }\n    }\n    return result", "    var sorted = [Int]()\n    var oneCount\
    \ = 0\n    for num in arr {\n        if num == 1 {\n            oneCount++\n \
    \       } else {\n            sorted.append(num)\n        }\n    }\n    if oneCount\
    \ > 0 {\n        sorted.sort()\n    } else {\n        sorted = arr.sorted()\n\
    \    }\n    return sorted", "    var result = [Int]()\n    var ones = 0\n    var\
    \ decimal = 0\n    for num in arr {\n        if num == 1 {\n            ones +=\
    \ 1\n        } else {\n            decimal = decimal * 10 + num\n        }\n \
    \   }\n    if ones > 0 {\n        result.sortInPlace()\n    } else {\n       \
    \ result.sortInPlaceByDecreasingOrder(decimal)\n    }\n    return result", '    return
    arr.sorted()', "    var result = [Int]()\n    for val in arr {\n        if val\
    \ == 0 {\n            continue\n        }\n        let bin = String(format: \"\
    %0*b\", UInt(val.bitWidth), val)\n        let binCount = bin.unicodeScalars.filter({\
    \ $0.isOnSurrogate() }).count\n        let decVal = Int(bin, radix: 2)\n     \
    \   if binCount == 1 {\n            result.insert(decVal, at: result.endIndex)\n\
    \        } else {\n            let index = result.index(of: decVal)\n        \
    \    if index != nil {\n                result[index!] = decVal\n            }\
    \ else {\n                result.insert(decVal, at: result.endIndex)\n       \
    \     }\n        }\n    }\n    return result", "    var result = [Int]()\n   \
    \ var ones = 0\n    var decimal = 0\n    for x in arr {\n        if x == 1 {\n\
    \            ones += 1\n        } else {\n            decimal += pow(x, 2)\n \
    \       }\n    }\n    for x in arr {\n        if x == 1 {\n            ones +=\
    \ 1\n        } else {\n            decimal += pow(x, 2)\n        }\n    }\n  \
    \  for x in arr {\n        if x == 1 {\n            ones += 1\n        } else\
    \ {\n            decimal += pow(x, 2)\n        }\n    }\n    for x in arr {\n\
    \        if x == 1 {\n            ones += 1\n        } else {\n            decimal\
    \ += pow(x, 2)\n        }\n    }\n    for x in arr {\n        if x == 1 {\n  \
    \          ones += 1\n        } else {\n            decimal += pow(x, 2)\n   \
    \     }\n    }\n    for x in arr {\n        if x == 1 {\n            ones += 1\n\
    \        } else {\n            decimal += pow(x, 2)\n        }\n    }\n    for\
    \ x in arr {\n        if x == 1 {\n            ones += 1\n        } else {\n \
    \           decimal += pow(x, 2)\n        }\n    }\n    for x in arr {\n     \
    \   if x == 1 {\n            ones += 1\n        } else {\n            decimal\
    \ += pow(x, 2)\n        }\n    }\n    for x in arr {\n        if x == 1 {\n  \
    \          ones += 1\n        } else {\n            decimal += pow(x, 2)\n   \
    \     }\n    }\n    for x in arr {\n        if x == 1 {\n            ones += 1\n\
    \        } else {\n            decimal += pow(x, 2)\n        }\n    }\n    for\
    \ x in arr {\n        if x == 1 {\n            ones += 1\n        } else {\n \
    \           decimal += pow(x, 2)\n        }\n    }\n    for x in arr {\n     \
    \   if x == 1 {\n            ones += 1\n        } else {\n            decimal\
    \ += pow(x, 2)\n        }\n    }\n    for x in arr {\n        if x == 1 {\n  \
    \          ones += 1\n        } else {\n            decimal += pow(x, 2)\n   \
    \     }\n    }\n    for x in arr {\n        if x == 1 {\n            ones += 1\n\
    \        } else {\n            decimal += pow(x, 2)\n        }\n    }\n    for\
    \ x in arr {\n        if x == 1 {\n            ones += 1\n        } else {\n \
    \           decimal += pow(x, 2)\n        }\n    }\n    for x in arr {\n     \
    \   if x == 1 {\n            ones += 1\n        } else {\n            decimal\
    \ += pow(x, 2)\n        }\n    }\n    for x in arr {\n        if x == 1 {\n  \
    \          ones += 1\n        } else {\n            decimal += pow(x, 2)\n   \
    \     }\n    }\n    for x in arr {\n        if x == 1 {\n            ones += 1\n\
    \        } else {\n            decimal += pow(x, 2)\n        }\n    }\n    for\
    \ x in arr {\n        if x == 1 {\n            ones += 1\n        } else {\n \
    \           decimal += pow(x, 2)\n        }\n    }\n    for x in arr", "    var\
    \ result = [Int]()\n    var index = 0\n    for element in arr {\n        if element\
    \ == 1 {\n            result.append(index)\n        }\n        index++\n    }\n\
    \    result.sort()\n    return result", '    return arr.sorted()', "    var result\
    \ = Array(repeating: 0, count: arr.count)\n    for i in 0..<arr.count {\n    \
    \    let ones = arr[i].trailingZeroBitCount\n        if ones > 0 {\n         \
    \   result[i] = arr[i]\n        } else {\n            result[i] = arr[i].decimalValue\n\
    \        }\n    }\n    return result", "    var sorted = [Int]()\n    for value\
    \ in arr {\n        sorted.append(value)\n    }\n    sorted.sort()\n    return\
    \ sorted", "    var result = [Int]()\n    var ones = 0\n    for x in arr {\n \
    \       if x == 1 {\n            ones += 1\n        } else {\n            result.insert(ones,\
    \ x)\n            ones = 0\n        }\n    }\n    if ones > 0 {\n        result.insert(ones,\
    \ 0)\n    }\n    return result", '    return arr.sorted()', "    var result =\
    \ [Int]()\n    var oneCount = 0\n    for element in arr {\n        if element\
    \ == 1 {\n            oneCount++\n        } else {\n            if oneCount >\
    \ 0 {\n                result.sort()\n                oneCount = 0\n         \
    \   }\n            result.append(element)\n        }\n    }\n    if oneCount >\
    \ 0 {\n        result.sort()\n    }\n    return result", "    let ones = arr.filter{\
    \ $0 > 0 }\n    let decimals = arr.filter{ $0 == 0 }\n    let sortedOnes = ones.sorted()\n\
    \    let sortedDecimals = decimals.sorted()\n    return sortedOnes + sortedDecimals",
  '    return arr.sorted()', "    var result = Array(repeating: 0, count: arr.count)\n\
    \    for i in 0..<arr.count {\n        let ones = arr[i].trailingZeroBitCount\n\
    \        if ones > 0 {\n            result[i] = arr[i]\n        } else {\n   \
    \         result[i] = arr[i].decimalValue\n        }\n    }\n    return result",
  "    var result = Array(repeating: 0, count: arr.count)\n    for i in 0..<arr.count\
    \ {\n        let ones = arr[i] & 1\n        if ones == 0 {\n            result[i]\
    \ = arr[i]\n        } else {\n            result[i] = arr[i] >> 1\n        }\n\
    \    }\n    return result", "    var result = [Int]()\n    var oneCount = 0\n\
    \    var dec = 0\n    for num in arr {\n        if num == 1 {\n            oneCount++\n\
    \        } else {\n            if oneCount > 0 {\n                dec += oneCount\
    \ - 1\n            }\n            oneCount = 0\n        }\n        result.append(num)\n\
    \    }\n    if oneCount > 0 {\n        dec += oneCount - 1\n    }\n    if dec\
    \ > 0 {\n        result.sort()\n    }\n    return result", "    arr.sort()\n \
    \   return arr", '    return arr.sorted()', "    var result = Array(repeating:\
    \ 0, count: arr.count)\n    for i in 0..<arr.count {\n        let bin = String(format:\
    \ \"%b\", (arr[i] & 1) == 0 ? 0 : 1)\n        result[i] = Int(bin, radix: 2)\n\
    \    }\n    result.sort { $0 < $1 }\n    return result", "    var result = [Int]()\n\
    \    var ones = 0\n    for n in arr {\n        if n == 1 {\n            ones +=\
    \ 1\n        } else {\n            if ones > 0 {\n                result.append((ones\
    \ - 1) * 10)\n            }\n            ones = 1\n            result.append(n)\n\
    \        }\n    }\n    if ones > 0 {\n        result.append((ones - 1) * 10)\n\
    \    }\n    return result", "    var result = [Int]()\n    var index = 0\n   \
    \ for num in arr {\n        if num == 1 {\n            result.append(index)\n\
    \        }\n        index++\n    }\n    return result", "    var result = Array(repeating:\
    \ 0, count: arr.count)\n    var ones = Array(repeating: 0, count: arr.count)\n\
    \    for i in 0..<arr.count {\n        ones[i] = 1\n        if arr[i] == 0 {\n\
    \            result[i] = 0\n        } else {\n            result[i] = arr[i]\n\
    \        }\n    }\n    for i in 0..<arr.count {\n        if ones[i] != 0 {\n \
    \           switch result[i] {\n            case 0:\n                result[i]\
    \ = 1\n            case 1:\n                result[i] = 2\n            case 2:\n\
    \                result[i] = 3\n            case 3:\n                result[i]\
    \ = 4\n            case 4:\n                result[i] = 5\n            case 5:\n\
    \                result[i] = 6\n            case 6:\n                result[i]\
    \ = 7\n            case 7:\n                result[i] = 8\n            case 8:\n\
    \                result[i] = 9\n            case 9:\n                result[i]\
    \ = 10\n            case 10:\n                result[i] = 11\n            case\
    \ 11:\n                result[i] = 12\n            case 12:\n                result[i]\
    \ = 13\n            case 13:\n                result[i] = 14\n            case\
    \ 14:\n                result[i] = 15\n            case 15:\n                result[i]\
    \ = 16\n            case 16:\n                result[i] = 17\n            case\
    \ 17:\n                result[i] = 18\n            case 18:\n                result[i]\
    \ = 19\n            case 19:\n                result[i] = 20\n            case\
    \ 20:\n                result[i] = 21\n            case 21:\n                result[i]\
    \ = 22\n            case 22:\n                result[i] = 23\n            case\
    \ 23:\n                result[i] = 24\n            case 24:\n                result[i]\
    \ = 25\n            case 25:\n                result[i] = 26\n            case\
    \ 26:\n                result[i] = 27\n            case 27:\n                result[i]\
    \ = 28\n            case 28:\n                result[i] = 29\n            case\
    \ 29:\n                result[i] = 30\n            case 30:\n                result[i]\
    \ = 31\n            case 31:\n                result[i] = 32\n            case\
    \ 32:\n                result[i] = 33\n            case 33:\n                result[i]\
    \ = 34\n            case 34:\n                result[i] = 35\n            case\
    \ 35:\n                result[i] = 36\n            case 36:\n                result[i]\
    \ = 37\n            case 37:\n                result[i] = 38\n            case\
    \ 38:\n                result[i] = 39\n            case 39:\n                result[i]\
    \ = 40\n            case 40:\n                result[i] = 41\n            case\
    \ 41:\n                result[i] = 42\n            case 42:\n                result[i]\
    \ = 43\n            case 43:\n                result[i] = 44\n            case\
    \ 44:\n                result[i] = 45\n            case 45:\n                result[i]\
    \ = 46\n            case 46:\n                result[i] = 47\n            case\
    \ 47:\n                result[i] = 48\n            case 48:\n                result[i]\
    \ = 49\n            case 49:\n                result[i] = 50\n            case\
    \ 50:\n                result[i] = 51\n            case 51:\n                result[i]\
    \ = 52\n            case 52:\n                result[i] = 53\n            case\
    \ 53:\n                result[i] = 54\n            case 54:\n                result[i]\
    \ = 55\n            case 55:\n                result[i] = 56\n            case\
    \ 56:\n                result[i] = 57\n            case 57:\n                result",
  "    var sorted = [Int]()\n    var count = 0\n    for x in arr {\n        if x !=\
    \ 0 {\n            sorted = append(sorted, x)\n            count += 1\n      \
    \  }\n    }\n    if count == 0 {\n        return arr\n    }\n    sorted = append(sorted,\
    \ 0)\n    sorted = append(sorted, count)\n    sorted = append(sorted, 0)\n   \
    \ sorted = append(sorted, 0)\n    sorted = append(sorted, 0)\n    sorted = append(sorted,\
    \ 0)\n    sorted = append(sorted, 0)\n    sorted = append(sorted, 0)\n    sorted\
    \ = append(sorted, 0)\n    sorted = append(sorted, 0)\n    sorted = append(sorted,\
    \ 0)\n    sorted = append(sorted, 0)\n    sorted = append(sorted, 0)\n    sorted\
    \ = append(sorted, 0)\n    sorted = append(sorted, 0)\n    sorted = append(sorted,\
    \ 0)\n    sorted = append(sorted, 0)\n    sorted = append(sorted, 0)\n    sorted\
    \ = append(sorted, 0)\n    sorted = append(sorted, 0)\n    sorted = append(sorted,\
    \ 0)\n    sorted = append(sorted, 0)\n    sorted = append(sorted, 0)\n    sorted\
    \ = append(sorted, 0)\n    sorted = append(sorted, 0)\n    sorted = append(sorted,\
    \ 0)\n    sorted = append(sorted, 0)\n    sorted = append(sorted, 0)\n    sorted\
    \ = append(sorted, 0)\n    sorted = append(sorted, 0)\n    sorted = append(sorted,\
    \ 0)\n    sorted = append(sorted, 0)\n    sorted = append(sorted, 0)\n    sorted\
    \ = append(sorted, 0)\n    sorted = append(sorted, 0)\n    sorted = append(sorted,\
    \ 0)\n    sorted = append(sorted, 0)\n    sorted = append(sorted, 0)\n    sorted\
    \ = append(sorted, 0)\n    sorted = append(sorted, 0)\n    sorted = append(sorted,\
    \ 0)\n    sorted = append(sorted, 0)\n    sorted = append(sorted, 0)\n    sorted\
    \ = append(sorted, 0)\n    sorted = append(sorted, 0)\n    sorted = append(sorted,\
    \ 0)\n    sorted = append(sorted, 0)\n    sorted = append(sorted, 0)\n    sorted\
    \ = append(sorted, 0)\n    sorted = append(sorted, 0)\n    sorted = append(sorted,\
    \ 0)\n    sorted = append(sorted, 0)\n    sorted = append(sorted, 0)\n    sorted\
    \ = append(sorted, 0)\n    sorted = append(sorted, 0)\n    sorted = append(sorted,\
    \ 0)\n    sorted = append(sorted, 0)\n    sorted = append(sorted, 0)\n    sorted\
    \ = ", "    var result = [Int]()\n    var oneCount = 0\n    for element in arr\
    \ {\n        if element == 1 {\n            oneCount++\n        } else {\n   \
    \         if oneCount > 0 {\n                result.append((oneCount - 1) * 10\
    \ + element)\n                oneCount = 0\n            } else {\n           \
    \     result.append(element)\n            }\n        }\n    }\n    if oneCount\
    \ > 0 {\n        result.append((oneCount - 1) * 10 + arr[arr.count])\n    }\n\
    \    return result", "    var result = [Int]()\n    var ones = 0\n    var dec\
    \ = 0\n    for x in arr {\n        if x == 1 {\n            ones += 1\n      \
    \  } else {\n            dec += x\n        }\n    }\n    for x in arr {\n    \
    \    if x == 1 {\n            dec -= x\n        } else {\n            dec += x\n\
    \        }\n        if dec > 0 {\n            dec -= 1\n        }\n        if\
    \ dec > 0 {\n            dec += 1\n        }\n        if dec > 0 {\n         \
    \   dec -= 1\n        }\n        if dec > 0 {\n            dec += 1\n        }\n\
    \        if dec > 0 {\n            dec -= 1\n        }\n        if dec > 0 {\n\
    \            dec += 1\n        }\n        if dec > 0 {\n            dec -= 1\n\
    \        }\n        if dec > 0 {\n            dec += 1\n        }\n        if\
    \ dec > 0 {\n            dec -= 1\n        }\n        if dec > 0 {\n         \
    \   dec += 1\n        }\n        if dec > 0 {\n            dec -= 1\n        }\n\
    \        if dec > 0 {\n            dec += 1\n        }\n        if dec > 0 {\n\
    \            dec -= 1\n        }\n        if dec > 0 {\n            dec += 1\n\
    \        }\n        if dec > 0 {\n            dec -= 1\n        }\n        if\
    \ dec > 0 {\n            dec += 1\n        }\n        if dec > 0 {\n         \
    \   dec -= 1\n        }\n        if dec > 0 {\n            dec += 1\n        }\n\
    \        if dec > 0 {\n            dec -= 1\n        }\n        if dec > 0 {\n\
    \            dec += 1\n        }\n        if dec > 0 {\n            dec -= 1\n\
    \        }\n        if dec > 0 {\n            dec += 1\n        }\n        if\
    \ dec > 0 {\n            dec -= 1\n        }\n        if dec > 0 {\n         \
    \   dec += 1\n        }\n        if dec > 0 {\n            dec -= 1\n        }\n\
    \        if dec > 0 {\n            dec += 1\n        }\n        if dec > 0 {\n\
    \            dec -= 1\n        }\n        if dec > 0 {\n            dec += 1\n\
    \        }\n        if dec > 0 {\n            dec -= 1\n        }\n        if\
    \ dec > 0 {\n            dec += 1\n        }\n        if dec > 0 {\n         \
    \   dec -= 1\n        }\n        if dec > 0 {\n            dec += 1\n        }\n\
    \        if dec > 0 {\n            dec -= 1\n        }\n        if dec > 0 {\n\
    \            dec += 1\n        }\n        if dec > 0 {", "    var result = [Int]()\n\
    \    var oneCount = 0\n    for num in arr {\n        if num == 1 {\n         \
    \   oneCount++\n        } else {\n            if oneCount > 0 {\n            \
    \    result.append((oneCount - 1) * 10 + num)\n                oneCount = 0\n\
    \            } else {\n                result.insert(result.count, num)\n    \
    \        }\n        }\n    }\n    return result", "    let ones = arr.filter{$0\
    \ == 1}\n    let decimals = arr.filter{$0 > 0}\n    let sortedOnes = ones.sorted()\n\
    \    let sortedDecimals = decimals.sorted()\n    return sortedOnes + sortedDecimals",
  "    var result = arr\n    for i in 0..<arr.count {\n        if arr[i] == 0 {\n\
    \            result.remove(at: i)\n        }\n    }\n    return result.sorted(by:\
    \ >)", "    var result = [Int]()\n    var i = 0\n    for num in arr {\n      \
    \  if num == 1 {\n            result.append(i)\n        }\n        i += 1\n  \
    \  }\n    result.sort()\n    return result", "    var result = [Int]()\n    var\
    \ ones = 0\n    var dec = 0\n    for num in arr {\n        if num == 1 {\n   \
    \         ones += 1\n        } else {\n            dec += num\n        }\n   \
    \ }\n    if ones > dec {\n        for num in arr {\n            if num == 1 {\n\
    \                ones--\n            } else {\n                dec -= num\n  \
    \          }\n        }\n    }\n    for num in arr {\n        if num == 1 {\n\
    \            result.append(num)\n        }\n    }\n    for num in arr {\n    \
    \    if num == 1 {\n            ones++\n        } else {\n            dec += num\n\
    \        }\n    }\n    for num in arr {\n        if num == 1 {\n            ones--\n\
    \        } else {\n            dec -= num\n        }\n    }\n    for num in arr\
    \ {\n        if num == 1 {\n            result.append(num)\n        }\n    }\n\
    \    return result", "    var result = Array(repeating: 0, count: arr.count)\n\
    \    for i in 0..<arr.count {\n        let ones = arr.filter { $0 & 1 == 1 }\n\
    \        let decimal = arr.filter { $0 & 1 == 0 }\n        if ones.count > decimal.count\
    \ {\n            result[i] = decimal.first!\n        } else {\n            result[i]\
    \ = ones.first!\n        }\n    }\n    return result", "    var result = [Int]()\n\
    \    var ones = 0\n    var decimal = 0\n    for num in arr {\n        if num ==\
    \ 1 {\n            ones += 1\n        } else {\n            decimal += num\n \
    \       }\n    }\n    if ones > 0 {\n        result = sort_array(arr)\n      \
    \  result.append(decimal)\n    } else {\n        result = arr\n    }\n    return\
    \ result", "    var result = [Int]()\n    var i = 0\n    var j = 0\n    var k\
    \ = 0\n    while i < arr.count {\n        if arr[i] > 0 {\n            result[k]\
    \ = arr[i]\n            i += 1\n        } else {\n            j += 1\n       \
    \ }\n        if j == arr.count {\n            k += 1\n            j = 0\n    \
    \    }\n    }\n    result.reverse()\n    return result", "    var result = [Int]()\n\
    \    var ones = 0\n    var decimal = 0\n    for num in arr {\n        ones = num.trailingZeroBitCount()\n\
    \        decimal = num.decimalValue()\n        if ones > 0 {\n            result.insert(decimal,\
    \ ones)\n        } else {\n            result.insert(decimal, decimal)\n     \
    \   }\n    }\n    return result", "    let ones = arr.filter{ $0 == 1 }\n    let\
    \ decimal = arr.filter{ $0 > 1 }\n    let sortedArray = ones.sorted + decimal.sorted\n\
    \    return sortedArray", '    return arr.sorted()', "    var result = [Int]()\n\
    \    var i = 0\n    for num in arr {\n        if num == 1 {\n            result.append(i)\n\
    \        }\n        i += 1\n    }\n    result.sort()\n    return result", "  \
    \  var sortedArr = arr\n    var oneCount = 0\n    var decimalCount = 0\n    for\
    \ num in arr {\n        if num == 1 {\n            oneCount++\n        } else\
    \ {\n            decimalCount += num\n        }\n    }\n    if oneCount > decimalCount\
    \ {\n        sortedArr = arr.sorted()\n    }\n    return sortedArr", "    var\
    \ result = [Int]()\n    var ones = [Int]()\n    var zeros = [Int]()\n    var i\
    \ = 0\n    for x in arr {\n        if x == 1 {\n            ones.append(i)\n \
    \       } else {\n            zeros.append(i)\n        }\n        i += 1\n   \
    \ }\n    for x in ones {\n        result.append(x)\n    }\n    for x in zeros\
    \ {\n        result.append(x)\n    }\n    for x in result {\n        if x < result.last\
    \ {\n            result.removeLast()\n        }\n    }\n    return result", '    return
    arr.sorted()', "    var result = [Int]()\n    for num in arr {\n        let bin\
    \ = String(num, radix: 2)\n        let count = bin.count(\"1\")\n        if count\
    \ == 0 {\n            result.insert(num, at: 0)\n        } else {\n          \
    \  let decimal = Int(bin, radix: 10)\n            result.insert(decimal, at: 0)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    var ones\
    \ = 0\n    for num in arr {\n        if num == 1 {\n            ones += 1\n  \
    \      } else {\n            if ones == 0 {\n                result.append(num)\n\
    \            } else {\n                ones = num\n            }\n        }\n\
    \    }\n    if ones > 0 {\n        result.append(ones)\n    }\n    return result",
  "    var result = [Int]()\n    var ones = 0\n    var decimal = 0\n    for num in\
    \ arr {\n        if num == 1 {\n            ones += 1\n        } else {\n    \
    \        decimal += num\n        }\n    }\n    if ones > 0 {\n        result.sort()\n\
    \    } else {\n        result.sort(by: { (a, b) -> Bool in\n            return\
    \ a < b\n        })\n    }\n    for num in arr {\n        if num == 1 {\n    \
    \        ones += 1\n        } else {\n            decimal -= num\n        }\n\
    \    }\n    for _ in 0..<(ones * 2) {\n        result.append(decimal)\n    }\n\
    \    return result", "    guard arr.count > 0 else { return arr }\n    var sortedArray\
    \ = [Int]()\n    var oneCount = 0\n    var decimalCount = 0\n    for i in arr\
    \ {\n        if i == 1 {\n            oneCount += 1\n        } else {\n      \
    \      decimalCount += pow(2, oneCount)\n            oneCount = 0\n        }\n\
    \        sortedArray.append(i)\n    }\n    decimalCount += pow(2, oneCount)\n\
    \    sortedArray.append(decimalCount)\n    return sortedArray", "    var result\
    \ = [Int]()\n    var count = 0\n    for num in arr {\n        if num == 1 {\n\
    \            count += 1\n        } else {\n            if count > 0 {\n      \
    \          result.append((count - 1) * 10 + num)\n                count = 0\n\
    \            } else {\n                result.insert(result.end(), num)\n    \
    \        }\n        }\n    }\n    return result", "    var result = [Int]()\n\
    \    var ones = 0\n    var decimal = 0\n    for x in arr {\n        if x == 1\
    \ {\n            ones += 1\n        } else {\n            decimal += pow(x, 2)\n\
    \        }\n    }\n    for x in arr {\n        if x == 1 {\n            ones +=\
    \ 1\n        } else {\n            decimal += pow(x, 2)\n        }\n    }\n  \
    \  for x in arr {\n        if ones == 0 {\n            result.insert(decimal,\
    \ x)\n        } else {\n            result.insert(x, decimal)\n        }\n   \
    \ }\n    return result", "    \n    var sortedArr = arr\n    \n    if arr.count\
    \ < 2 {\n        return sortedArr\n    }\n    \n    var oneCount = 0\n    var\
    \ tenCount = 0\n    var hundredCount = 0\n    var thousandCount = 0\n    var tenThousandCount\
    \ = 0\n    \n    for i in 0..<arr.count {\n        let one = arr[i] & 1\n    \
    \    if one == 1 {\n            oneCount += 1\n        }\n        \n        let\
    \ ten = arr[i] >> 1\n        if ten == 1 {\n            tenCount += 1\n      \
    \  }\n        \n        let hundred = arr[i] >> 10\n        if hundred == 1 {\n\
    \            hundredCount += 1\n        }\n        \n        let thousand = arr[i]\
    \ >> 100\n        if thousand == 1 {\n            thousandCount += 1\n       \
    \ }\n        \n        let tenThousand = arr[i] >> 1000\n        if tenThousand\
    \ == 1 {\n            tenThousandCount += 1\n        }\n    }\n    \n    if oneCount\
    \ > 0 {\n        sortedArr = sortedArr.sorted()\n    }\n    \n    if tenCount\
    \ > 0 {\n        sortedArr = sortedArr.sorted()\n    }\n    \n    if hundredCount\
    \ > 0 {\n        sortedArr = sortedArr.sorted()\n    }\n    \n    if thousandCount\
    \ > 0 {\n        sortedArr = sortedArr.sorted()\n    }\n    \n    if tenThousandCount\
    \ > 0 {\n        sortedArr = sortedArr.sorted()\n    }\n    \n    return sortedArr",
  "    var result = [Int]()\n    for v in arr {\n        if v == 0 {\n           \
    \ continue\n        }\n        var i = 0\n        var j = 0\n        while i <\
    \ len(result) && j < len(arr) {\n            if result[i] == arr[j] {\n      \
    \          i += 1\n                j += 1\n            } else {\n            \
    \    if result[i] > arr[j] {\n                    result.insert(i, arr[j])\n \
    \                   i += 1\n                } else {\n                    j +=\
    \ 1\n                }\n            }\n        }\n        if i < len(result) {\n\
    \            result.insert(i, v)\n        } else {\n            result.append(v)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    var ones\
    \ = [0]\n    var zeros = [0]\n    for num in arr {\n        if num == 0 {\n  \
    \          zeros.append(num)\n        } else {\n            ones.append(num)\n\
    \        }\n    }\n    for num in ones {\n        if zeros.contains(num) {\n \
    \           zeros.remove(num)\n        } else {\n            result.append(num)\n\
    \        }\n    }\n    for num in zeros {\n        if ones.contains(num) {\n \
    \           ones.remove(num)\n        } else {\n            result.append(num)\n\
    \        }\n    }\n    return result", '    return arr.sorted()', "    \n    var\
    \ result = [Int]()\n    var count = [Int]()\n    for num in arr {\n        if\
    \ num == 0 {\n            continue\n        }\n        if let index = count.index(of:\
    \ num) {\n            result[index] = num\n            count[index] += 1\n   \
    \     } else {\n            result.append(num)\n            count.append(1)\n\
    \        }\n    }\n    \n    return result.sorted(by: { $0 < $1 })", '    return
    arr.sorted()', "    let ones = arr.filter{ $0 != 0 }\n    let decimals = arr.filter{\
    \ $0 == 0 }\n    let sortedOnes = ones.sorted()\n    let sortedDecimals = decimals.sorted()\n\
    \    return sortedOnes + sortedDecimals", "    let ones = arr.filter{$0}.count\n\
    \    let decimal = arr.filter{$0 > 0}.count\n    if ones == decimal == 0 {\n \
    \       return arr\n    }\n    if ones > decimal {\n        return arr.sorted{$0\
    \ > $1}\n    }\n    return arr.sorted{$0 < $1}", "    var result = [Int]()\n \
    \   var oneCount = 0\n    for x in arr {\n        if x == 1 {\n            oneCount++\n\
    \        } else {\n            if oneCount > 0 {\n                result.sort()\n\
    \                oneCount = 0\n            }\n            result.append(x)\n \
    \       }\n    }\n    if oneCount > 0 {\n        result.sort()\n    }\n    return\
    \ result", "    \n    var sorted = [Int]()\n    \n    for element in arr {\n \
    \       let ones = Int(log2(element))\n        \n        if ones < 0 {\n     \
    \       ones = -ones\n        }\n        \n        sorted.append(element >> ones)\n\
    \    }\n    \n    return sorted", "    var result = [Int]()\n    var ones = [0]\n\
    \    var decimal = [0]\n    for i in arr {\n        ones = append(ones, 0)\n \
    \       decimal = append(decimal, 0)\n        for _ in 0..<8 {\n            if\
    \ i & 1 == 1 {\n                ones = append(ones, 1)\n                decimal\
    \ = append(decimal, ones)\n            } else {\n                ones = append(ones,\
    \ 0)\n                decimal = append(decimal, 0)\n            }\n          \
    \  i >>= 1\n        }\n    }\n    for i in 0..<8 {\n        if ones[i] == 0 {\n\
    \            result.append(i)\n        }\n    }\n    for i in 0..<8 {\n      \
    \  if decimal[i] != 0 {\n            result.append(i)\n        }\n    }\n    return\
    \ result", "    let ones = arr.filter{ $0 > 0 }\n    let decimals = arr.filter{\
    \ $0 == 0 }\n    let sorted = ones\n        .sorted(by: { $0.compare(ones[$0.index($0)])\
    \ == .orderedAscending })\n        .sorted(by: { $0.compare(decimals[$0.index($0)])\
    \ == .orderedAscending })\n    return sorted", "    var sorted = [Int]()\n   \
    \ var ones = 0\n    for num in arr {\n        if num == 1 {\n            ones\
    \ += 1\n        } else {\n            sorted.append(num)\n        }\n    }\n \
    \   if ones == 0 {\n        return sorted\n    }\n    var decimal = ones\n   \
    \ var decimalIndex = 0\n    var decimalValue = 0\n    var decimalValueIndex =\
    \ 0\n    var decimalValueIndex2 = 0\n    for num in arr {\n        if num == 1\
    \ {\n            ones += 1\n        } else {\n            decimalValue += num\n\
    \        }\n    }\n    for num in arr {\n        if num == 1 {\n            ones\
    \ += 1\n        } else {\n            decimalValueIndex += num\n        }\n  \
    \  }\n    for num in arr {\n        if num == 1 {\n            ones += 1\n   \
    \     } else {\n            decimalValueIndex2 += num\n        }\n    }\n    for\
    \ num in arr {\n        if num == 1 {\n            ones += 1\n        } else {\n\
    \            decimalValue -= num\n        }\n    }\n    for num in arr {\n   \
    \     if num == 1 {\n            ones += 1\n        } else {\n            decimalValueIndex\
    \ -= num\n        }\n    }\n    for num in arr {\n        if num == 1 {\n    \
    \        ones += 1\n        } else {\n            decimalValueIndex2 -= num\n\
    \        }\n    }\n    for num in arr {\n        if num == 1 {\n            ones\
    \ += 1\n        } else {\n            decimalValue *= num\n        }\n    }\n\
    \    for num in arr {\n        if num == 1 {\n            ones += 1\n        }\
    \ else {\n            decimalValueIndex *= num\n        }\n    }\n    for num\
    \ in arr {\n        if num == 1 {\n            ones += 1\n        } else {\n \
    \           decimalValueIndex2 *= num\n        }\n    }\n    for num in arr {\n\
    \        if num == 1 {\n            ones += 1\n        } else {\n            decimalValue\
    \ /= num\n        }\n    }\n    for num in arr {\n        if num == 1 {\n    \
    \        ones += 1\n        } else {\n            decimalValueIndex /= num\n \
    \       }\n    }\n    for num in arr {\n        if num == 1 {\n            ones\
    \ += 1\n        } else {\n            decimalValueIndex2 /= num\n        }\n \
    \   }\n    for num in arr {\n        if num == 1 {\n            ones += 1\n  \
    \      } else {\n            decimalValue %= num\n        }\n    }\n    for num\
    \ in arr {\n        if num == 1 {\n            ones += 1\n        } else {\n \
    \           decimalValueIndex %= num\n        }\n    }\n    for num in arr {\n\
    \        if num == 1 {\n            ones += 1\n        } else {\n            decimalValueIndex2\
    \ %= num\n        }\n    }\n    for num in arr {\n        if num == 1 {\n    \
    \        ones += 1", "    var sorted: [Int] = []\n    var ones: [Int] = []\n \
    \   var dec: [Int] = []\n    for i in arr {\n        if i == 1 {\n           \
    \ ones.append(i)\n        } else {\n            dec.append(i)\n        }\n   \
    \ }\n    sorted = dec.sorted()\n    sorted = sorted.append(ones).sorted()\n  \
    \  return sorted", '    return arr.sorted()', "    var result = [Int]()\n    var\
    \ i = 0\n    for num in arr {\n        if num == 1 {\n            result.append(i)\n\
    \        }\n        i += 1\n    }\n    for num in arr {\n        if num != 1 {\n\
    \            result.insert(i, num)\n        }\n        i += 1\n    }\n    return\
    \ result", "    var result = [Int]()\n    var ones = 0\n    for el in arr {\n\
    \        if el == 1 {\n            ones += 1\n        } else {\n            result\
    \ += [ones]\n            ones = 1\n        }\n    }\n    result += [ones]\n  \
    \  return result", "    let ones = arr.filter{$0 != 0}\n    let zeros = arr.filter{$0\
    \ == 0}\n    let onesCount = ones.count\n    let zerosCount = zeros.count\n  \
    \  if onesCount == zerosCount {\n        return arr\n    }\n    if onesCount >\
    \ zerosCount {\n        let sortedArray = zeros\n        sortedArray.sortInPlace()\n\
    \        return sortedArray\n    }\n    let sortedArray = ones\n    sortedArray.sortInPlace()\n\
    \    return sortedArray", "    var result = [Int]()\n    var oneCount = 0\n  \
    \  var decimalCount = 0\n    for num in arr {\n        if num == 1 {\n       \
    \     oneCount++\n        } else {\n            decimalCount += num\n        }\n\
    \    }\n    if oneCount > decimalCount {\n        for num in arr {\n         \
    \   if num == 1 {\n                result.append(num)\n            }\n       \
    \ }\n    } else {\n        for num in arr {\n            if num == 1 {\n     \
    \           result.append(decimalCount)\n            }\n            decimalCount\
    \ -= num\n        }\n    }\n    return result", "    var result = [Int]()\n  \
    \  var ones = 0\n    var decimal = 0\n    for i in arr {\n        if i == 1 {\n\
    \            ones += 1\n        } else {\n            decimal += pow(2, ones)\n\
    \        }\n        result.append(i)\n    }\n    if ones > 0 {\n        decimal\
    \ += pow(2, ones)\n    }\n    result.sort(by: {\n        decimal.compare($0, $1.decimal)\
    \ == .orderedAscending\n    })\n    return result", "    var sorted = [Int]()\n\
    \    var oneCount = 0\n    for num in arr {\n        if num == 1 {\n         \
    \   oneCount++\n        } else {\n            sorted.append(num)\n        }\n\
    \    }\n    if oneCount > 0 {\n        sorted.sort()\n    } else {\n        sorted\
    \ = arr\n    }\n    return sorted", "    var result = [Int]()\n    var oneCount\
    \ = 0\n    for num in arr {\n        if num == 1 {\n            oneCount++\n \
    \       } else {\n            if oneCount > 0 {\n                result.insert(result.count\
    \ - oneCount, num)\n                oneCount = 0\n            } else {\n     \
    \           result.insert(result.count, num)\n            }\n        }\n    }\n\
    \    return result", "    var result = arr\n    for i in 0..<arr.count {\n   \
    \     if arr[i] == 0 {\n            swap(&result[i], &result[i+1])\n        }\n\
    \    }\n    return result", "    var result = [Int]()\n    var ones = 0\n    var\
    \ decimal = 0\n    for num in arr {\n        if num == 1 {\n            ones +=\
    \ 1\n        } else {\n            decimal += num\n        }\n    }\n    if ones\
    \ > 0 {\n        result = sort_array(arr)\n    }\n    if ones == 0 {\n       \
    \ result.sort()\n    } else {\n        result.sort({ $0.decimalValue > $1.decimalValue\
    \ })\n    }\n    return result", "    var result = [Int]()\n    var ones = 0\n\
    \    var decimal = 0\n    for element in arr {\n        if element == 1 {\n  \
    \          ones += 1\n        } else {\n            decimal += element * 2\n \
    \       }\n    }\n    if ones > 0 {\n        result.sort()\n    } else {\n   \
    \     result.sort(by: {$0.decimalValue < $1.decimalValue})\n    }\n    return\
    \ result", "    let ones = arr.filter{$0 > 0}\n    let decimals = arr.filter{$0\
    \ == 0}\n    let sorted = ones\n        .sorted()\n        .reversed()\n     \
    \   .map {\n            let index = Int($0) / Int(ones.count)\n            return\
    \ decimals[index] * ones.count + $0 - index * ones.count\n        }\n    return\
    \ sorted", "    var result = [Int]()\n    var i = 0\n    for num in arr {\n  \
    \      if num == 1 {\n            result.append(i)\n        }\n        i += 1\n\
    \    }\n    result.sort()\n    return result", "    var result = Array(repeating:\
    \ 0, count: arr.count)\n    for i in 0..<arr.count {\n        let ones = arr[i].trailingZeroBitCount\n\
    \        if ones == 0 {\n            result[i] = arr[i]\n        } else {\n  \
    \          result[i] = arr[i].trailingZeroBitCount > 0 ? arr[i].trailingZeroBitCount\
    \ : arr[i].trailingZeroBitCount.trailingZeroBitCount\n        }\n    }\n    return\
    \ result.sorted()", "    var result = [Int]()\n    var i = 0\n    var j = 0\n\
    \    var k = arr.count\n    while i < k {\n        if arr[i] > arr[j] {\n    \
    \        result.append(arr[j])\n            j += 1\n        } else {\n       \
    \     result.append(arr[i])\n            i += 1\n        }\n    }\n    result.append(arr[j])\n\
    \    return result", "    var result = [Int]()\n    var ones = 0\n    var decimal\
    \ = 0\n    for element in arr {\n        if element == 1 {\n            ones +=\
    \ 1\n        } else {\n            decimal += element / 2\n        }\n    }\n\
    \    for element in arr {\n        if element == 1 {\n            result += [element]\n\
    \        } else {\n            result += [element - decimal]\n        }\n    }\n\
    \    return result", "    var sorted = [Int]()\n    var oneCount = 0\n    var\
    \ dec = 0\n    for num in arr {\n        oneCount += num != 0\n        dec +=\
    \ num\n    }\n    if oneCount > 0 {\n        sorted = sorted.sorted { $0 < $1\
    \ }\n    }\n    if oneCount == 0 {\n        sorted = sorted.sorted { $0 > $1 }\n\
    \    }\n    if dec > 0 {\n        sorted = sorted.sorted { $0 < $1 }\n    }\n\
    \    if dec == 0 {\n        sorted = sorted.sorted { $0 > $1 }\n    }\n    return\
    \ sorted", "    var result = Array(repeating: 0, count: arr.count)\n    for i\
    \ in 0..<arr.count {\n        let bin = binary(arr[i])\n        let index = bin.index(of:\
    \ \"1\")!\n        result[i] = arr[i]\n        result[index] = arr[i]\n    }\n\
    \    return result.sorted()", "    var result = arr\n    var ones = 0\n    for\
    \ x in arr {\n        if x == 1 {\n            ones += 1\n        } else {\n \
    \           if ones > 0 {\n                ones = 0\n                let tmp =\
    \ result\n                result = tmp\n                result.append(x)\n   \
    \         }\n        }\n    }\n    return result", "    var result = [Int]()\n\
    \    var ones = 0\n    var decimal = 0\n    for num in arr {\n        ones +=\
    \ (num & 1)\n        decimal += num\n    }\n    if ones == 0 {\n        result\
    \ = arr\n    } else {\n        result = arr.sorted()\n    }\n    if decimal >\
    \ 0 {\n        result = result.sorted()\n    }\n    return result", "    var result\
    \ = [Int]()\n    var ones = [Int]()\n    var zeros = [Int]()\n    for x in arr\
    \ {\n        if x == 1 {\n            ones.append(x)\n        } else {\n     \
    \       zeros.append(x)\n        }\n    }\n    ones = sort_array(ones)\n    zeros\
    \ = sort_array(zeros)\n    for x in ones {\n        result.append(x)\n    }\n\
    \    for x in zeros {\n        result.append(x)\n    }\n    return result", " \
    \   guard arr.count > 0 else { return arr }\n    let ones = arr.filter { $0 ==\
    \ 1 }\n    let decimals = arr.filter { $0 > 1 }\n    return decimals.sorted {\
    \ $0 < $1 }\n        .sorted { $0.compare($1) == .orderedAscending }\n       \
    \ .sorted { $0.compare($1) == .orderedAscending }", '    return arr.sorted()',
  '    return arr.sorted { $0.isOne($1) }', "    var sortedArr = arr\n    var oneCount\
    \ = 0\n    var decimalCount = 0\n    for num in arr {\n        if num == 1 {\n\
    \            oneCount++\n        } else {\n            decimalCount += num\n \
    \       }\n    }\n    if oneCount > decimalCount {\n        sortedArr = arr.sorted()\n\
    \    }\n    return sortedArr", '    return arr.sorted()', "    var sorted = [Int]()\n\
    \    var ones = 0\n    for v in arr {\n        if v == 1 {\n            ones +=\
    \ 1\n        } else {\n            sorted.append(v)\n        }\n    }\n    if\
    \ ones == 0 {\n        return sorted\n    }\n    var decimal = ones\n    var decimalIndex\
    \ = 0\n    var decimalValue = 0\n    var decimalValueIndex = 0\n    for v in arr\
    \ {\n        if v == 1 {\n            decimalValue += v\n            decimalValueIndex\
    \ += 1\n        } else {\n            decimalValue -= v\n            decimalValueIndex\
    \ += 1\n        }\n        if decimalValue == 0 {\n            decimalIndex +=\
    \ 1\n            decimalValue = 0\n        }\n    }\n    var decimalValue = decimalValue\
    \ / decimalIndex\n    var decimalValueIndex = decimalValueIndex / decimalIndex\n\
    \    var decimalIndex = 0\n    for v in arr {\n        if v == 1 {\n         \
    \   decimalValue += v\n            decimalValueIndex += 1\n        } else {\n\
    \            decimalValue -= v\n            decimalValueIndex += 1\n        }\n\
    \        if decimalValue == 0 {\n            decimalIndex += 1\n            decimalValue\
    \ = 0\n        }\n    }\n    var decimalValue = decimalValue / decimalIndex\n\
    \    var decimalValueIndex = decimalValueIndex / decimalIndex\n    for v in arr\
    \ {\n        if v == 1 {\n            sorted.append(v)\n        } else {\n   \
    \         sorted.append(decimalValue)\n        }\n    }\n    return sorted", '    return
    arr.sorted { $0.isOdd && !$1.isOdd }', "    var sorted = [Int]()\n    var oneCount\
    \ = 0\n    var decimalCount = 0\n    for num in arr {\n        oneCount += Int(num)\
    \ == 1\n        decimalCount += Int(num) * Int(num)\n    }\n    if oneCount >\
    \ decimalCount {\n        sorted = arr\n    } else {\n        sorted = arr.sorted()\n\
    \    }\n    return sorted", "    var result = [Int]()\n    var ones = [0]\n  \
    \  var zeros = [0]\n    for x in arr {\n        if x == 1 {\n            ones\
    \ = append(ones, 1)\n        } else {\n            zeros = append(zeros, 0)\n\
    \        }\n    }\n    ones = append(ones, 0)\n    zeros = append(zeros, 0)\n\
    \    for x in ones {\n        for y in zeros {\n            if x == y {\n    \
    \            result.append(x)\n            }\n        }\n    }\n    return result",
  "    var result = [Int]()\n    var index = 0\n    for num in arr {\n        if num\
    \ == 1 {\n            result.append(index)\n        }\n        index++\n    }\n\
    \    result.sort()\n    return result", "    var result = [Int]()\n    var i =\
    \ 0\n    var j = 0\n    var k = 0\n    var count = 0\n    for k in arr {\n   \
    \     if k == 1 {\n            result.append(k)\n            count += 1\n    \
    \    } else {\n            if count > 0 {\n                result.append(count)\n\
    \                count = 0\n            }\n            result.append(k)\n    \
    \    }\n    }\n    if count > 0 {\n        result.append(count)\n    }\n    return\
    \ result", "    var result = Array(repeating: 0, count: arr.count)\n    for i\
    \ in 0..<arr.count {\n        let ones = arr[i].binCount()\n        if ones >\
    \ 0 {\n            result[i] = arr[i]\n        }\n    }\n    return result.sorted()",
  '    return arr.sorted()', "    var sorted = [Int]()\n    var ones = [Int]()\n \
    \   var decimals = [Int]()\n    var decimalsSorted = [Int]()\n    var decimalsSortedIndex\
    \ = [Int]()\n    var decimalsSortedIndexIndex = [Int]()\n    var decimalsSortedIndexIndexIndex\
    \ = [Int]()\n    var decimalsSortedIndexIndexIndexIndex = [Int]()\n    var decimalsSortedIndexIndexIndexIndexIndex\
    \ = [Int]()\n    var decimalsSortedIndexIndexIndexIndexIndexIndex = [Int]()\n\
    \    var decimalsSortedIndexIndexIndexIndexIndexIndexIndex = [Int]()\n    var\
    \ decimalsSortedIndexIndexIndexIndexIndexIndexIndexIndex = [Int]()\n    var decimalsSortedIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = [Int]()\n    var decimalsSortedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = [Int]()\n    var decimalsSortedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = [Int]()\n    var decimalsSortedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = [Int]()\n    var decimalsSortedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = [Int]()\n    var decimalsSortedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = [Int]()\n    var decimalsSortedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = [Int]()\n    var decimalsSortedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = [Int]()\n    var decimalsSortedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = [Int]()\n    var decimalsSortedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = [Int]()\n    var decimalsSortedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = [Int]()\n    var decimalsSortedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = [Int]()\n    var decimalsSortedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = [Int]()\n    var decimalsSortedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = [Int]()\n    var decimalsSortedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = [Int]()\n    var decimalsSortedIndexIndexIndexIndexIndexIndexIndexIndexIndex",
  "    var result = [Int]()\n    var ones = 0\n    for num in arr {\n        if num\
    \ == 1 {\n            ones += 1\n        } else {\n            if ones > 0 {\n\
    \                result.append((ones - 1) * 10 + num)\n                ones =\
    \ 0\n            } else {\n                result.insert(result.count, num)\n\
    \            }\n        }\n    }\n    return result", "    var result = [Int]()\n\
    \    var oneCount = 0\n    for num in arr {\n        if num == 1 {\n         \
    \   oneCount++\n        } else {\n            if oneCount > 0 {\n            \
    \    result.insert(result.count - oneCount, num)\n                oneCount = 0\n\
    \            } else {\n                result.insert(result.count, num)\n    \
    \        }\n        }\n    }\n    return result", "    var result = [Int]()\n\
    \    for x in arr {\n        var count = 0\n        for y in x {\n           \
    \ if y == 1 {\n                count += 1\n            }\n        }\n        if\
    \ count == 0 {\n            result.append(x)\n        } else {\n            var\
    \ decimal = count / 2\n            var remainder = count % 2\n            if remainder\
    \ == 0 {\n                result.append(decimal)\n            } else {\n     \
    \           result.append(decimal * 10 + remainder)\n            }\n        }\n\
    \    }\n    return result", "    let ones = arr.filter{ $0 != 0 }\n    let decimals\
    \ = arr.filter{ $0 == 0 }\n    \n    let sortedOnes = ones.sorted()\n    let sortedDecimals\
    \ = decimals.sorted()\n    \n    return sortedOnes + sortedDecimals", "    var\
    \ result = [Int]()\n    var oneCount = 0\n    for element in arr {\n        if\
    \ element == 1 {\n            oneCount++\n        } else {\n            result.insert(element,\
    \ oneCount)\n            oneCount = 0\n        }\n    }\n    if oneCount > 0 {\n\
    \        result.insert(element, oneCount)\n    }\n    return result", "    var\
    \ sorted = [Int]()\n    var ones = 0\n    var decimal = 0\n    for num in arr\
    \ {\n        ones = num.trailingZeroBitCount()\n        decimal = num.decimalValue()\n\
    \        if ones > 0 {\n            sorted = sorted + [decimal]\n        } else\
    \ {\n            sorted = sorted + [ones]\n        }\n    }\n    return sorted",
  "    var result = [Int]()\n    var oneCount = 0\n    for element in arr {\n    \
    \    if element == 1 {\n            oneCount++\n        } else {\n           \
    \ if oneCount > 0 {\n                result.append((oneCount - 1) * 10 + element)\n\
    \                oneCount = 0\n            } else {\n                result.insert(element,\
    \ at: 0)\n            }\n        }\n    }\n    return result", "    var result\
    \ = [Int]()\n    var i = 0\n    for num in arr {\n        if num == 1 {\n    \
    \        result.append(i)\n        }\n        i += 1\n    }\n    result.sort()\n\
    \    return result", "    var result = [Int]()\n    var oneCount = 0\n    for\
    \ num in arr {\n        if num == 1 {\n            oneCount++\n        } else\
    \ {\n            if oneCount > 0 {\n                result.append((oneCount -\
    \ 1) * 10 + num)\n                oneCount = 0\n            } else {\n       \
    \         result.insert(result.end(), num)\n            }\n        }\n    }\n\
    \    return result", '    return arr.sorted()', "    var sortedArr = arr\n   \
    \ \n    for i in 0..<arr.count {\n        let ones = arr[i].trailingZeroBitCount\n\
    \        \n        if ones > 0 {\n            sortedArr = sortedArr.sorted(by:\
    \ {$0.trailingZeroBitCount > $1.trailingZeroBitCount})\n        }\n        \n\
    \        if ones < 0 {\n            sortedArr = sortedArr.sorted(by: {$0.trailingZeroBitCount\
    \ < $1.trailingZeroBitCount})\n        }\n    }\n    \n    return sortedArr",
  "    let len = arr.count\n    var result = [Int]()\n    var i = 0\n    var j = 0\n\
    \    var k = 0\n    var temp = 0\n    var count = 0\n    while i < len {\n   \
    \     j = i\n        while j < len {\n            k = j\n            while k <\
    \ len {\n                if arr[k] == 1 {\n                    count += 1\n  \
    \              } else {\n                    count = 0\n                }\n  \
    \              temp = arr[k]\n                arr[k] = arr[j]\n              \
    \  arr[j] = temp\n                k += 1\n            }\n            j += 1\n\
    \        }\n        result.insert(arr[i], at: i)\n        i += 1\n    }\n    if\
    \ count > 0 {\n        result.insert(arr[i], at: i)\n    }\n    return result",
  "    var result = [Int]()\n    var i = 0\n    for num in arr {\n        if num ==\
    \ 1 {\n            result.append(i)\n        }\n        i += 1\n    }\n    for\
    \ num in arr {\n        if num == 0 {\n            result.append(i)\n        }\n\
    \        i += 1\n    }\n    return result", '    return arr.sorted()', "    var\
    \ sorted = [Int]()\n    var count = 0\n    for num in arr {\n        if num ==\
    \ 1 {\n            sorted.append(num)\n            count += 1\n        } else\
    \ {\n            if count > 0 {\n                sorted.append(count)\n      \
    \          count = 0\n            }\n            sorted.append(num)\n        }\n\
    \    }\n    if count > 0 {\n        sorted.append(count)\n    }\n    return sorted",
  "    \n    var result = Array(repeating: 0, count: arr.count)\n    \n    for i in\
    \ 0..<arr.count {\n        let bin = String(format: \"%b\", arr[i])\n        let\
    \ count = bin.characters.filter({ $0 == \"1\" }).count\n        result[i] = Int(bin.characters.filter({\
    \ $0 == \"1\" }).count) / Int(bin.characters.count)\n    }\n    \n    return result.sorted()",
  "    var result = [Int]()\n    var oneCount = 0\n    var decimalCount = 0\n    for\
    \ num in arr {\n        if num == 1 {\n            oneCount++\n        } else\
    \ {\n            decimalCount += num\n        }\n    }\n    if oneCount > decimalCount\
    \ {\n        for num in arr {\n            if num == 1 {\n                result.insert(result.count-1,\
    \ num)\n            }\n        }\n    } else {\n        for num in arr {\n   \
    \         if num == 1 {\n                result.insert(result.count, num)\n  \
    \          }\n        }\n    }\n    return result", "    var result = [Int]()\n\
    \    var oneCount = 0\n    for num in arr {\n        if num == 1 {\n         \
    \   oneCount++\n        } else {\n            if oneCount > 0 {\n            \
    \    result.append((oneCount - 1) * 10 + num)\n                oneCount = 0\n\
    \            } else {\n                result.insert(result.count, num)\n    \
    \        }\n        }\n    }\n    return result", "    var result = [Int]()\n\
    \    var ones = 0\n    for num in arr {\n        if num == 1 {\n            ones\
    \ += 1\n        } else {\n            if ones > 0 {\n                result.append((ones\
    \ - 1) * 10)\n            }\n            ones = 1\n            result.append(num)\n\
    \        }\n    }\n    if ones > 0 {\n        result.append((ones - 1) * 10)\n\
    \    }\n    return result", "    var result = [Int]()\n    var i = 0\n    for\
    \ num in arr {\n        if num == 1 {\n            result.append(i)\n        }\n\
    \        i += 1\n    }\n    result.sort()\n    return result", '    return arr.sorted()',
  "    var result = [Int]()\n    var oneCount = 0\n    for num in arr {\n        if\
    \ num == 1 {\n            oneCount++\n        } else {\n            if oneCount\
    \ > 0 {\n                result.append((oneCount - 1) * 10 + num)\n          \
    \      oneCount = 0\n            } else {\n                result.insert(result.end(),\
    \ num)\n            }\n        }\n    }\n    return result", "    var result =\
    \ Array(repeating: 0, count: arr.count)\n    for i in 0..<arr.count {\n      \
    \  let ones = arr[i].trailingZeroBitCount\n        if ones > 0 {\n           \
    \ result[i] = arr[i]\n        } else {\n            result[i] = arr[i] * 10 +\
    \ arr[i].trailingZeroBitCount\n        }\n    }\n    return result.sorted()",
  '    return arr.sorted()', "    let ones = arr.filter{$0 > 0}\n    let decimals\
    \ = arr.filter{$0 == 0}\n    let sortedOnes = ones.sorted()\n    let sortedDecimals\
    \ = decimals.sorted()\n    return sortedOnes + sortedDecimals", "    var result\
    \ = [Int]()\n    var oneCount = 0\n    for num in arr {\n        if num == 1 {\n\
    \            oneCount++\n        } else {\n            if oneCount > 0 {\n   \
    \             result.sort()\n                oneCount = 0\n            }\n   \
    \         result.append(num)\n        }\n    }\n    if oneCount > 0 {\n      \
    \  result.sort()\n    }\n    return result", "    guard arr.count > 0 else { return\
    \ arr }\n    var result = [Int]()\n    var oneCount = 0\n    var decimalCount\
    \ = 0\n    for i in arr {\n        if i == 1 {\n            oneCount++\n     \
    \   } else {\n            decimalCount += Int(pow(2.0, Double(decimalCount)))\n\
    \        }\n    }\n    if oneCount > decimalCount {\n        for i in arr {\n\
    \            if i == 1 {\n                result.append(i)\n            }\n  \
    \      }\n    } else {\n        for i in arr {\n            if i == 1 {\n    \
    \            result.append(decimalCount)\n            }\n            decimalCount\
    \ += Int(pow(2.0, Double(decimalCount)))\n        }\n    }\n    return result",
  "    var sorted = [Int]()\n    var oneCount = 0\n    for num in arr {\n        if\
    \ num == 1 {\n            oneCount++\n        } else {\n            if oneCount\
    \ > 0 {\n                sorted = append(sorted, oneCount)\n                oneCount\
    \ = 0\n            }\n            sorted = append(sorted, num)\n        }\n  \
    \  }\n    if oneCount > 0 {\n        sorted = append(sorted, oneCount)\n    }\n\
    \    return sorted"]
stop_tokens:
- "\n}"
