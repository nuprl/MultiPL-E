language: swift
name: HumanEval_147_get_max_triples
results:
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    return a.maxElement()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp_1p35cag.swift:17:14: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    return a.maxElement()\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var triples = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i < j < k {\n          \
    \          if a[i] + a[j] + a[k] == 3 {\n                        triples += 1\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return triples\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp4f2d2v_0.swift:21:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmp4f2d2v_0.swift:21:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i < j < k {\n          \
    \          if a[i] < a[j] + a[k] {\n                        count += 1\n     \
    \               }\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5) ==\
    \ 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) == 36)\n\
    assert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpp5re900j.swift:21:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpp5re900j.swift:21:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i < j < k {\n          \
    \          if a[i] < a[j] && a[i] < a[k] {\n                        count += 1\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpqm33t6k_.swift:21:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpqm33t6k_.swift:21:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    return a.filter{ $0 % 3 == 0 }.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmppu5d0xwf/tmppu5d0xwf.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac362796c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac36248db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac36248d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac36248c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppu5d0xwf                        0x0000563e381e3555 <unavailable> + 5461

    5    libc.so.6                          0x00002ac362982460 __libc_start_main +
    245

    6    tmppu5d0xwf                        0x0000563e381e3209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i < j < k {\n          \
    \          if a[i] < a[j] && a[i] < a[k] {\n                        count += 1\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpqm33t6k_.swift:21:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpqm33t6k_.swift:21:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var triples = 0\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            for k in 1...n {\n                if i < j < k {\n          \
    \          if a[i] < a[j] < a[k] {\n                        triples += 1\n   \
    \                 }\n                }\n            }\n        }\n    }\n    return\
    \ triples\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5)\
    \ == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) ==\
    \ 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpd4yc60_l.swift:21:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpd4yc60_l.swift:21:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n/tmp/tmpd4yc60_l.swift:22:29: error: adjacent\
    \ operators are in non-associative precedence group 'ComparisonPrecedence'\n \
    \                   if a[i] < a[j] < a[k] {\n                            ^   \
    \   ~\n/tmp/tmpd4yc60_l.swift:22:29: error: cannot convert value of type 'Bool'\
    \ to expected argument type 'Int'\n                    if a[i] < a[j] < a[k] {\n\
    \                            ^\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp10a6mo88/tmp10a6mo88.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42d9bb0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42d98a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42d98a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42d98a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp10a6mo88                        0x000055f0a492b495 <unavailable> + 5269

    5    libc.so.6                          0x00002b42d9d9c460 __libc_start_main +
    245

    6    tmp10a6mo88                        0x000055f0a492b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var count = 0\n    for i in 0..(n-1) {\n        for j in\
    \ (i+1)..(n) {\n            for k in (i+1)..(n) {\n                if i != j &&\
    \ i != k && j != k {\n                    if a[i] < a[j] && a[i] < a[k] {\n  \
    \                      count += 1\n                    }\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp7nt7n8m6.swift:18:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 0..(n-1) {\n              ^~\n           \
    \   ...\n/tmp/tmp7nt7n8m6.swift:19:23: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n        for j in (i+1)..(n) {\n                      ^~\n\
    \                      ...\n/tmp/tmp7nt7n8m6.swift:20:27: error: cannot find operator\
    \ '..' in scope; did you mean '...'?\n            for k in (i+1)..(n) {\n    \
    \                      ^~\n                          ...\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i < j < k {\n          \
    \          if a[i] < a[j] + a[k] {\n                        count += 1\n     \
    \               }\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5) ==\
    \ 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) == 36)\n\
    assert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpp5re900j.swift:21:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpp5re900j.swift:21:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    return a.filter{ $0 % 3 == 0 }.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmppu5d0xwf/tmppu5d0xwf.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac362796c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac36248db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac36248d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac36248c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppu5d0xwf                        0x0000563e381e3555 <unavailable> + 5461

    5    libc.so.6                          0x00002ac362982460 __libc_start_main +
    245

    6    tmppu5d0xwf                        0x0000563e381e3209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a: [Int] = []\n    for i in 1...n {\n        a[i] = i * i - i + 1\n\
    \    }\n    var count = 0\n    for i in 0..(n-1) {\n        for j in (i+1)..(n)\
    \ {\n            for k in (j+1)..(n) {\n                if a[i] < a[j] && a[i]\
    \ < a[k] && a[j] < a[k] {\n                    count += 1\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp8073cn31.swift:18:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 0..(n-1) {\n              ^~\n           \
    \   ...\n/tmp/tmp8073cn31.swift:19:23: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n        for j in (i+1)..(n) {\n                      ^~\n\
    \                      ...\n/tmp/tmp8073cn31.swift:20:27: error: cannot find operator\
    \ '..' in scope; did you mean '...'?\n            for k in (j+1)..(n) {\n    \
    \                      ^~\n                          ...\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] < a[j] && a[i] < a[k] {\n                 \
    \       count += 1\n                    }\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpk5n6crrz/tmpk5n6crrz.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6bb51b2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6bb4ea9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6bb4ea9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6bb4ea87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk5n6crrz                        0x0000558fd55f1535 <unavailable> + 5429

    5    libc.so.6                          0x00002b6bb539e460 __libc_start_main +
    245

    6    tmpk5n6crrz                        0x0000558fd55f11e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824912
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var triples = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] < a[j] && a[i] < a[k] {\n                 \
    \       triples += 1\n                    }\n                }\n            }\n\
    \        }\n    }\n    return triples\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp41kph_je/tmp41kph_je.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2b90d5bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2b90a52b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2b90a52988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2b90a517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp41kph_je                        0x0000558c12dbc535 <unavailable> + 5429

    5    libc.so.6                          0x00002b2b90f47460 __libc_start_main +
    245

    6    tmp41kph_je                        0x0000558c12dbc1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i < j < k {\n          \
    \          let sum = Int(a[i]) + Int(a[j]) + Int(a[k])\n                    if\
    \ sum % 3 == 0 {\n                        count += 1\n                    }\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpqb4hls5s.swift:21:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpqb4hls5s.swift:21:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i*i - i\
    \ + 1)\n    }\n    var triples = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] < a[j] && a[i] < a[k] {\n                 \
    \       triples += 1\n                    }\n                }\n            }\n\
    \        }\n    }\n    return triples\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpy7_upa_j/tmpy7_upa_j.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed3095dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed30654b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed30654988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed306537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy7_upa_j                        0x00005653bc64d535 <unavailable> + 5429

    5    libc.so.6                          0x00002aed30b49460 __libc_start_main +
    245

    6    tmpy7_upa_j                        0x00005653bc64d1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i < j < k {\n          \
    \          let sum = Int(a[i]) + Int(a[j]) + Int(a[k])\n                    if\
    \ sum % 3 == 0 {\n                        count += 1\n                    }\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpqb4hls5s.swift:21:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpqb4hls5s.swift:21:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i*i - i\
    \ + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] < a[j] && a[i] < a[k] {\n                 \
    \       count += 1\n                    }\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpa6kuirz3/tmpa6kuirz3.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af317bcdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af3178c4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af3178c4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3178c37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa6kuirz3                        0x000055a3ca638535 <unavailable> + 5429

    5    libc.so.6                          0x00002af317db9460 __libc_start_main +
    245

    6    tmpa6kuirz3                        0x000055a3ca6381e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    return a.filter{$0 % 3 == 0}.length\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp91lidk6k.swift:17:34: error: value of type '[Int]' has no member\
    \ 'length'\n    return a.filter{$0 % 3 == 0}.length\n           ~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i < j < k {\n          \
    \          let sum = Int(a[i]) + Int(a[j]) + Int(a[k])\n                    if\
    \ sum % 3 == 0 {\n                        count += 1\n                    }\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpqb4hls5s.swift:21:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpqb4hls5s.swift:21:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i < j < k {\n          \
    \          if a[i] < a[j] + a[k] {\n                        count += 1\n     \
    \               }\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5) ==\
    \ 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) == 36)\n\
    assert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpp5re900j.swift:21:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpp5re900j.swift:21:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var triples = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] < a[j] + a[k] {\n                        triples\
    \ += 1\n                    }\n                }\n            }\n        }\n \
    \   }\n    return triples\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpz7xvqrpi/tmpz7xvqrpi.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b54af99dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b54af694b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b54af694988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b54af6937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz7xvqrpi                        0x000055bc79dfc535 <unavailable> + 5429

    5    libc.so.6                          0x00002b54afb89460 __libc_start_main +
    245

    6    tmpz7xvqrpi                        0x000055bc79dfc1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824912
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a: [Int] = []\n    for i in 1...n {\n        a[i] = i * i - i + 1\n\
    \    }\n    var triples = 0\n    for i in 1...n {\n        for j in 1...n {\n\
    \            for k in 1...n {\n                if i != j && i != k && j != k {\n\
    \                    if a[i] < a[j] && a[i] < a[k] {\n                       \
    \ triples += 1\n                    }\n                }\n            }\n    \
    \    }\n    }\n    return triples\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ba968d95c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba968a8c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba968a8c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba968a8c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba968a8bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ba96888b7ec <unavailable> + 186348

    6    tmpn5k_w_5y                        0x000055d2e2be782c <unavailable> + 6188

    7    tmpn5k_w_5y                        0x000055d2e2be73e8 <unavailable> + 5096

    8    libc.so.6                          0x00002ba968f81460 __libc_start_main +
    245

    9    tmpn5k_w_5y                        0x000055d2e2be7109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1659824912
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var triples = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] < a[j] && a[i] < a[k] {\n                 \
    \       triples += 1\n                    }\n                }\n            }\n\
    \        }\n    }\n    return triples\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp41kph_je/tmp41kph_je.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2b90d5bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2b90a52b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2b90a52988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2b90a517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp41kph_je                        0x0000558c12dbc535 <unavailable> + 5429

    5    libc.so.6                          0x00002b2b90f47460 __libc_start_main +
    245

    6    tmp41kph_je                        0x0000558c12dbc1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    return a.maxElement()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp_1p35cag.swift:17:14: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    return a.maxElement()\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] < a[j] && a[i] < a[k] {\n                 \
    \       count += 1\n                    }\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpk5n6crrz/tmpk5n6crrz.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6bb51b2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6bb4ea9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6bb4ea9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6bb4ea87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk5n6crrz                        0x0000558fd55f1535 <unavailable> + 5429

    5    libc.so.6                          0x00002b6bb539e460 __libc_start_main +
    245

    6    tmpk5n6crrz                        0x0000558fd55f11e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824912
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp10a6mo88/tmp10a6mo88.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42d9bb0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42d98a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42d98a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42d98a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp10a6mo88                        0x000055f0a492b495 <unavailable> + 5269

    5    libc.so.6                          0x00002b42d9d9c460 __libc_start_main +
    245

    6    tmp10a6mo88                        0x000055f0a492b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824912
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var triples = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] < a[j] && a[i] < a[k] {\n                 \
    \       if a[j] < a[k] {\n                            triples += 1\n         \
    \               }\n                    }\n                }\n            }\n \
    \       }\n    }\n    return triples\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpghi2stv9/tmpghi2stv9.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af7641acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af763ea3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af763ea3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af763ea27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpghi2stv9                        0x0000561be81dc535 <unavailable> + 5429

    5    libc.so.6                          0x00002af764398460 __libc_start_main +
    245

    6    tmpghi2stv9                        0x0000561be81dc1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i < j < k {\n          \
    \          if a[i] < a[j] || a[i] < a[k] || a[j] < a[k] {\n                  \
    \      count += 1\n                    }\n                }\n            }\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpbdx1c957.swift:21:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpbdx1c957.swift:21:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    return a.maxElement()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp_1p35cag.swift:17:14: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    return a.maxElement()\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i*i - i\
    \ + 1)\n    }\n    return a.maxElement()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmprf0rjhuw.swift:17:14: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    return a.maxElement()\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var triples = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] < a[j] && a[i] < a[k] {\n                 \
    \       triples++\n                    }\n                }\n            }\n \
    \       }\n    }\n    return triples\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpra33y8do.swift:23:32: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n                        triples++\n                  \
    \             ^~\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var triples = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] < a[j] && a[i] < a[k] {\n                 \
    \       if a[j] < a[k] {\n                            triples += 1\n         \
    \               }\n                    }\n                }\n            }\n \
    \       }\n    }\n    return triples\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpghi2stv9/tmpghi2stv9.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af7641acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af763ea3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af763ea3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af763ea27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpghi2stv9                        0x0000561be81dc535 <unavailable> + 5429

    5    libc.so.6                          0x00002af764398460 __libc_start_main +
    245

    6    tmpghi2stv9                        0x0000561be81dc1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824912
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp10a6mo88/tmp10a6mo88.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42d9bb0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42d98a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42d98a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42d98a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp10a6mo88                        0x000055f0a492b495 <unavailable> + 5269

    5    libc.so.6                          0x00002b42d9d9c460 __libc_start_main +
    245

    6    tmp10a6mo88                        0x000055f0a492b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    return a.maxElement()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp_1p35cag.swift:17:14: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    return a.maxElement()\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    return a.maxElement()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp_1p35cag.swift:17:14: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    return a.maxElement()\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp10a6mo88/tmp10a6mo88.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42d9bb0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42d98a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42d98a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42d98a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp10a6mo88                        0x000055f0a492b495 <unavailable> + 5269

    5    libc.so.6                          0x00002b42d9d9c460 __libc_start_main +
    245

    6    tmp10a6mo88                        0x000055f0a492b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var triples = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] < a[j] && a[i] < a[k] {\n                 \
    \       triples++\n                    }\n                }\n            }\n \
    \       }\n    }\n    return triples\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpra33y8do.swift:23:32: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n                        triples++\n                  \
    \             ^~\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    return a.filter { ($0 % 3) == 0 }.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmppp82be_5/tmppp82be_5.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5af84d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5af81c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5af81c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5af81c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppp82be_5                        0x000056310455c555 <unavailable> + 5461

    5    libc.so.6                          0x00002b5af86bc460 __libc_start_main +
    245

    6    tmppp82be_5                        0x000056310455c209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i < j < k {\n          \
    \          if a[i] < a[j] + a[k] {\n                        count += 1\n     \
    \               }\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5) ==\
    \ 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) == 36)\n\
    assert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpp5re900j.swift:21:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpp5re900j.swift:21:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp10a6mo88/tmp10a6mo88.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42d9bb0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42d98a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42d98a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42d98a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp10a6mo88                        0x000055f0a492b495 <unavailable> + 5269

    5    libc.so.6                          0x00002b42d9d9c460 __libc_start_main +
    245

    6    tmp10a6mo88                        0x000055f0a492b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var triples = 0\n    for i in 0..(n-1) { \n        for j\
    \ in (i+1)..(n) {\n            if a[i] < a[j] {\n                triples += 1\n\
    \            }\n        }\n    }\n    return triples\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp7con2uxv.swift:18:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 0..(n-1) { \n              ^~\n          \
    \    ...\n/tmp/tmp7con2uxv.swift:19:23: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n        for j in (i+1)..(n) {\n                      ^~\n\
    \                      ...\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var triples = 0\n    for i in 0..(n-1) {\n        for j in\
    \ (i+1)..(n-1) {\n            for k in (i+1)..(n-1) {\n                if a[i]\
    \ < a[j] && a[i] < a[k] && a[j] < a[k] {\n                    triples += 1\n \
    \               }\n            }\n        }\n    }\n    return triples\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp8_g0h67l.swift:18:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 0..(n-1) {\n              ^~\n           \
    \   ...\n/tmp/tmp8_g0h67l.swift:19:23: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n        for j in (i+1)..(n-1) {\n                     \
    \ ^~\n                      ...\n/tmp/tmp8_g0h67l.swift:20:27: error: cannot find\
    \ operator '..' in scope; did you mean '...'?\n            for k in (i+1)..(n-1)\
    \ {\n                          ^~\n                          ...\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i < j < k {\n          \
    \          if a[i] < a[j] + a[k] {\n                        count += 1\n     \
    \               }\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5) ==\
    \ 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) == 36)\n\
    assert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpp5re900j.swift:21:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpp5re900j.swift:21:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var triples = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] < a[j] && a[i] < a[k] {\n                 \
    \       triples++\n                    }\n                }\n            }\n \
    \       }\n    }\n    return triples\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpra33y8do.swift:23:32: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n                        triples++\n                  \
    \             ^~\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i < j < k {\n          \
    \          if a[i] < a[j] + a[k] {\n                        count += 1\n     \
    \               }\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5) ==\
    \ 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) == 36)\n\
    assert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpp5re900j.swift:21:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpp5re900j.swift:21:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i < j < k {\n          \
    \          let sum = Int(a[i]) + Int(a[j]) + Int(a[k])\n                    if\
    \ sum % 3 == 0 {\n                        count += 1\n                    }\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpqb4hls5s.swift:21:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpqb4hls5s.swift:21:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i < j < k {\n          \
    \          if a[i] < a[j] + a[k] {\n                        count += 1\n     \
    \               }\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5) ==\
    \ 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) == 36)\n\
    assert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpp5re900j.swift:21:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpp5re900j.swift:21:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var triples = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] < a[j] + a[k] {\n                        triples\
    \ += 1\n                    }\n                }\n            }\n        }\n \
    \   }\n    return triples\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpz7xvqrpi/tmpz7xvqrpi.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b54af99dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b54af694b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b54af694988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b54af6937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz7xvqrpi                        0x000055bc79dfc535 <unavailable> + 5429

    5    libc.so.6                          0x00002b54afb89460 __libc_start_main +
    245

    6    tmpz7xvqrpi                        0x000055bc79dfc1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    return a.maxElement()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp_1p35cag.swift:17:14: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    return a.maxElement()\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a: [Int] = []\n    for i in 1...n {\n        a[i] = i * i - i + 1\n\
    \    }\n    var triples = 0\n    for i in 0..<n {\n        for j in 0..<n {\n\
    \            for k in 0..<n {\n                if i != j && i != k && j != k {\n\
    \                    if a[i] < a[j] && a[i] < a[k] {\n                       \
    \ triples += 1\n                    }\n                }\n            }\n    \
    \    }\n    }\n    return triples\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ba62c5a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba62c29a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba62c29a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba62c29a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba62c299bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ba62c0997ec <unavailable> + 186348

    6    tmpl8tqrt1r                        0x00005585b374791c <unavailable> + 6428

    7    tmpl8tqrt1r                        0x00005585b37474d8 <unavailable> + 5336

    8    libc.so.6                          0x00002ba62c78f460 __libc_start_main +
    245

    9    tmpl8tqrt1r                        0x00005585b37471f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824912
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var triples = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] < a[j] && a[i] < a[k] {\n                 \
    \       if a[j] < a[k] {\n                            triples += 1\n         \
    \               }\n                    }\n                }\n            }\n \
    \       }\n    }\n    return triples\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpghi2stv9/tmpghi2stv9.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af7641acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af763ea3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af763ea3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af763ea27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpghi2stv9                        0x0000561be81dc535 <unavailable> + 5429

    5    libc.so.6                          0x00002af764398460 __libc_start_main +
    245

    6    tmpghi2stv9                        0x0000561be81dc1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i < j < k {\n          \
    \          if a[i] < a[j] + a[k] {\n                        count += 1\n     \
    \               }\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5) ==\
    \ 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) == 36)\n\
    assert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpp5re900j.swift:21:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpp5re900j.swift:21:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i < j < k {\n          \
    \          if a[i] < a[j] + a[k] {\n                        count += 1\n     \
    \               }\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5) ==\
    \ 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) == 36)\n\
    assert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpp5re900j.swift:21:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpp5re900j.swift:21:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i < j < k {\n          \
    \          if a[i] < a[j] + a[k] {\n                        count += 1\n     \
    \               }\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5) ==\
    \ 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) == 36)\n\
    assert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpp5re900j.swift:21:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpp5re900j.swift:21:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i < j < k {\n          \
    \          if a[i] < a[j] + a[k] {\n                        count += 1\n     \
    \               }\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5) ==\
    \ 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) == 36)\n\
    assert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpp5re900j.swift:21:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpp5re900j.swift:21:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i < j < k {\n          \
    \          if a[i] + a[j] + a[k] == 3 {\n                        count += 1\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpg4dzeiwj.swift:21:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpg4dzeiwj.swift:21:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    return a.maxElement()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp_1p35cag.swift:17:14: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    return a.maxElement()\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i < j < k {\n          \
    \          if a[i] < a[j] || a[i] < a[k] || a[j] < a[k] {\n                  \
    \      count += 1\n                    }\n                }\n            }\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpbdx1c957.swift:21:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpbdx1c957.swift:21:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var triples = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] < a[j] && a[i] < a[k] {\n                 \
    \       triples++\n                    }\n                }\n            }\n \
    \       }\n    }\n    return triples\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpra33y8do.swift:23:32: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n                        triples++\n                  \
    \             ^~\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = [Int]()\n    for i in 1...n {\n        a[i] = i * i - i + 1\n\
    \    }\n    var count = 0\n    for i in 1...n {\n        for j in 1...n {\n  \
    \          for k in 1...n {\n                if a[i] < a[j] && a[i] < a[k] &&\
    \ a[j] < a[k] {\n                    count += 1\n                }\n         \
    \   }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b55a6174c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b55a5e6b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b55a5e6b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b55a5e6b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b55a5e6abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b55a5c6a7ec <unavailable> + 186348

    6    tmpu0pg1udk                        0x0000559275767801 <unavailable> + 6145

    7    tmpu0pg1udk                        0x00005592757673c8 <unavailable> + 5064

    8    libc.so.6                          0x00002b55a6360460 __libc_start_main +
    245

    9    tmpu0pg1udk                        0x00005592757670e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1659824912
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp10a6mo88/tmp10a6mo88.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42d9bb0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42d98a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42d98a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42d98a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp10a6mo88                        0x000055f0a492b495 <unavailable> + 5269

    5    libc.so.6                          0x00002b42d9d9c460 __libc_start_main +
    245

    6    tmp10a6mo88                        0x000055f0a492b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    return a.maxElement()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp_1p35cag.swift:17:14: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    return a.maxElement()\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i < j < k {\n          \
    \          if a[i] < a[j] && a[i] < a[k] {\n                        count += 1\n\
    \                    }\n                    if a[j] < a[i] && a[j] < a[k] {\n\
    \                        count += 1\n                    }\n                 \
    \   if a[k] < a[i] && a[k] < a[j] {\n                        count += 1\n    \
    \                }\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5) ==\
    \ 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) == 36)\n\
    assert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp3fbfahc4.swift:21:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmp3fbfahc4.swift:21:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i < j < k {\n          \
    \          if a[i] < a[j] && a[i] < a[k] {\n                        count += 1\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpqm33t6k_.swift:21:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpqm33t6k_.swift:21:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var triples = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] < a[j] && a[i] < a[k] {\n                 \
    \       triples += 1\n                    }\n                }\n            }\n\
    \        }\n    }\n    return triples\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp41kph_je/tmp41kph_je.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2b90d5bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2b90a52b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2b90a52988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2b90a517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp41kph_je                        0x0000558c12dbc535 <unavailable> + 5429

    5    libc.so.6                          0x00002b2b90f47460 __libc_start_main +
    245

    6    tmp41kph_je                        0x0000558c12dbc1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i < j < k {\n          \
    \          if a[i] < a[j] + a[k] {\n                        count += 1\n     \
    \               }\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5) ==\
    \ 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) == 36)\n\
    assert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpp5re900j.swift:21:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpp5re900j.swift:21:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i < j < k {\n          \
    \          if a[i] < a[j] + a[k] {\n                        count += 1\n     \
    \               }\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5) ==\
    \ 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) == 36)\n\
    assert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpp5re900j.swift:21:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpp5re900j.swift:21:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = [Int]()\n    for i in 1...n {\n        a[i] = i * i - i + 1\n\
    \    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b573486dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5734564561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5734564286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b573456413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5734563bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b57343637ec <unavailable> + 186348

    6    tmp_2pek9ri                        0x000055f8c818b7c9 <unavailable> + 6089

    7    tmp_2pek9ri                        0x000055f8c818b418 <unavailable> + 5144

    8    libc.so.6                          0x00002b5734a59460 __libc_start_main +
    245

    9    tmp_2pek9ri                        0x000055f8c818b139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i < j < k {\n          \
    \          if a[i] < a[j] + a[k] {\n                        count += 1\n     \
    \               }\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5) ==\
    \ 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) == 36)\n\
    assert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpp5re900j.swift:21:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpp5re900j.swift:21:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i < j < k {\n          \
    \          if a[i] < a[j] < a[k] {\n                        count += 1\n     \
    \               }\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5) ==\
    \ 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) == 36)\n\
    assert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmphwtnshvc.swift:21:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmphwtnshvc.swift:21:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n/tmp/tmphwtnshvc.swift:22:29: error: adjacent\
    \ operators are in non-associative precedence group 'ComparisonPrecedence'\n \
    \                   if a[i] < a[j] < a[k] {\n                            ^   \
    \   ~\n/tmp/tmphwtnshvc.swift:22:29: error: cannot convert value of type 'Bool'\
    \ to expected argument type 'Int'\n                    if a[i] < a[j] < a[k] {\n\
    \                            ^\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i*i - i\
    \ + 1)\n    }\n    var triples = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i < j < k {\n          \
    \          if a[i] < a[j] + a[k] {\n                        triples += 1\n   \
    \                 }\n                }\n            }\n        }\n    }\n    return\
    \ triples\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5)\
    \ == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) ==\
    \ 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpghy9tm0k.swift:21:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpghy9tm0k.swift:21:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var triples = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] + a[j] + a[k] == 3 {\n                    \
    \    triples += 1\n                    }\n                }\n            }\n \
    \       }\n    }\n    return triples\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp_d48cx95/tmp_d48cx95.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adaa6d9fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adaa6a96b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adaa6a96988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adaa6a957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_d48cx95                        0x00005652998f0535 <unavailable> + 5429

    5    libc.so.6                          0x00002adaa6f8b460 __libc_start_main +
    245

    6    tmp_d48cx95                        0x00005652998f01e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    return a.maxElement()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp_1p35cag.swift:17:14: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    return a.maxElement()\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i < j < k {\n          \
    \          if a[i] < a[j] + a[k] {\n                        count += 1\n     \
    \               }\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5) ==\
    \ 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) == 36)\n\
    assert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpp5re900j.swift:21:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpp5re900j.swift:21:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var count = 0\n    for i in 0..(n-1) { \n        for j in\
    \ (i+1)..(n) {\n            for k in (j+1)..(n) {\n                if a[i] < a[j]\
    \ && a[i] < a[k] && a[j] < a[k] {\n                    count += 1\n          \
    \      }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpxh4fdc8x.swift:18:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 0..(n-1) { \n              ^~\n          \
    \    ...\n/tmp/tmpxh4fdc8x.swift:19:23: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n        for j in (i+1)..(n) {\n                      ^~\n\
    \                      ...\n/tmp/tmpxh4fdc8x.swift:20:27: error: cannot find operator\
    \ '..' in scope; did you mean '...'?\n            for k in (j+1)..(n) {\n    \
    \                      ^~\n                          ...\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var triples = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] < a[j] && a[i] < a[k] {\n                 \
    \       if a[j] < a[k] {\n                            triples += 1\n         \
    \               }\n                    }\n                }\n            }\n \
    \       }\n    }\n    return triples\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpghi2stv9/tmpghi2stv9.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af7641acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af763ea3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af763ea3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af763ea27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpghi2stv9                        0x0000561be81dc535 <unavailable> + 5429

    5    libc.so.6                          0x00002af764398460 __libc_start_main +
    245

    6    tmpghi2stv9                        0x0000561be81dc1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i < j < k {\n          \
    \          if a[i] < a[j] + a[k] {\n                        count += 1\n     \
    \               }\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5) ==\
    \ 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) == 36)\n\
    assert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpp5re900j.swift:21:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpp5re900j.swift:21:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var triples = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i < j < k {\n          \
    \          if a[i] + a[j] + a[k] == 3 {\n                        triples += 1\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return triples\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp4f2d2v_0.swift:21:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmp4f2d2v_0.swift:21:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i < j < k {\n          \
    \          if a[i] < a[j] + a[k] {\n                        count += 1\n     \
    \               }\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5) ==\
    \ 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) == 36)\n\
    assert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpp5re900j.swift:21:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpp5re900j.swift:21:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i < j < k {\n          \
    \          if a[i] < a[j] + a[k] {\n                        count += 1\n     \
    \               }\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5) ==\
    \ 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) == 36)\n\
    assert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpp5re900j.swift:21:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpp5re900j.swift:21:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp10a6mo88/tmp10a6mo88.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42d9bb0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42d98a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42d98a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42d98a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp10a6mo88                        0x000055f0a492b495 <unavailable> + 5269

    5    libc.so.6                          0x00002b42d9d9c460 __libc_start_main +
    245

    6    tmp10a6mo88                        0x000055f0a492b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824912
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] < a[j] && a[i] < a[k] {\n                 \
    \       count += 1\n                    }\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpk5n6crrz/tmpk5n6crrz.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6bb51b2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6bb4ea9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6bb4ea9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6bb4ea87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk5n6crrz                        0x0000558fd55f1535 <unavailable> + 5429

    5    libc.so.6                          0x00002b6bb539e460 __libc_start_main +
    245

    6    tmpk5n6crrz                        0x0000558fd55f11e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824912
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp10a6mo88/tmp10a6mo88.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42d9bb0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42d98a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42d98a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42d98a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp10a6mo88                        0x000055f0a492b495 <unavailable> + 5269

    5    libc.so.6                          0x00002b42d9d9c460 __libc_start_main +
    245

    6    tmp10a6mo88                        0x000055f0a492b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var triples = 0\n    for i in 0..(n-1) { \n        for j\
    \ in (i+1)..(n) {\n            for k in (i+1)..(n) {\n                if a[i]\
    \ < a[j] && a[i] < a[k] && a[j] < a[k] {\n                    triples += 1\n \
    \               }\n            }\n        }\n    }\n    return triples\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpdilmccly.swift:18:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 0..(n-1) { \n              ^~\n          \
    \    ...\n/tmp/tmpdilmccly.swift:19:23: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n        for j in (i+1)..(n) {\n                      ^~\n\
    \                      ...\n/tmp/tmpdilmccly.swift:20:27: error: cannot find operator\
    \ '..' in scope; did you mean '...'?\n            for k in (i+1)..(n) {\n    \
    \                      ^~\n                          ...\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i*i - i\
    \ + 1)\n    }\n    var count = 0\n    for i in 0..(n-1){\n        for j in (i+1)..(n-1){\n\
    \            for k in (i+1)..(n-1){\n                if a[i] < a[j] && a[i] <\
    \ a[k] && a[j] < a[k] {\n                    count += 1\n                }\n \
    \           }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpb75zssoi.swift:18:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 0..(n-1){\n              ^~\n            \
    \  ...\n/tmp/tmpb75zssoi.swift:19:23: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n        for j in (i+1)..(n-1){\n                      ^~\n\
    \                      ...\n/tmp/tmpb75zssoi.swift:20:27: error: cannot find operator\
    \ '..' in scope; did you mean '...'?\n            for k in (i+1)..(n-1){\n   \
    \                       ^~\n                          ...\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = [Int]()\n    for _ in 1...n {\n        a.append(0)\n    }\n \
    \   var triples = 0\n    for i in 1...n {\n        for j in 1...n {\n        \
    \    for k in 1...n {\n                if i != j && i != k && j != k {\n     \
    \               if a[i] < a[j] + a[k] {\n                        a[i] = a[j] +\
    \ a[k]\n                        triples++\n                    }\n           \
    \     }\n            }\n        }\n    }\n    return triples\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmplq63zba8.swift:24:32: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n                        triples++\n                  \
    \             ^~\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i*i - i\
    \ + 1)\n    }\n    return a.filter({$0 % 3 == 0}).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmplbakjlwa/tmplbakjlwa.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b84a0051c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b849fd48b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b849fd48988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b849fd477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplbakjlwa                        0x000055f73051d555 <unavailable> + 5461

    5    libc.so.6                          0x00002b84a023d460 __libc_start_main +
    245

    6    tmplbakjlwa                        0x000055f73051d209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824912
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a: [Int] = []\n    for i in 1...n {\n        a.append(i * i - i +\
    \ 1)\n    }\n    var triples = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] < a[j] && a[i] < a[k] {\n                 \
    \       if a[j] < a[k] {\n                            triples += 1\n         \
    \               }\n                    }\n                }\n            }\n \
    \       }\n    }\n    return triples\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp0m22wu6s/tmp0m22wu6s.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b55230d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5522dceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5522dce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5522dcd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0m22wu6s                        0x0000558dfedcf545 <unavailable> + 5445

    5    libc.so.6                          0x00002b55232c3460 __libc_start_main +
    245

    6    tmp0m22wu6s                        0x0000558dfedcf1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i < j < k {\n          \
    \          if a[i] < a[j] < a[k] {\n                        count += 1\n     \
    \               }\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5) ==\
    \ 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) == 36)\n\
    assert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmphwtnshvc.swift:21:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmphwtnshvc.swift:21:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n/tmp/tmphwtnshvc.swift:22:29: error: adjacent\
    \ operators are in non-associative precedence group 'ComparisonPrecedence'\n \
    \                   if a[i] < a[j] < a[k] {\n                            ^   \
    \   ~\n/tmp/tmphwtnshvc.swift:22:29: error: cannot convert value of type 'Bool'\
    \ to expected argument type 'Int'\n                    if a[i] < a[j] < a[k] {\n\
    \                            ^\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] < a[j] && a[i] < a[k] {\n                 \
    \       if a[j] < a[k] {\n                            count += 1\n           \
    \             }\n                    }\n                }\n            }\n   \
    \     }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpdlpzszk_/tmpdlpzszk_.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b423011cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b422fe13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b422fe13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b422fe127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdlpzszk_                        0x000055fa9f6f4535 <unavailable> + 5429

    5    libc.so.6                          0x00002b4230308460 __libc_start_main +
    245

    6    tmpdlpzszk_                        0x000055fa9f6f41e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i < j < k {\n          \
    \          if a[i] < a[j] + a[k] {\n                        count += 1\n     \
    \               }\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5) ==\
    \ 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) == 36)\n\
    assert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpp5re900j.swift:21:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpp5re900j.swift:21:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    return a.maxElement()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp_1p35cag.swift:17:14: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    return a.maxElement()\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var triples = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] < a[j] && a[i] < a[k] {\n                 \
    \       triples += 1\n                    }\n                }\n            }\n\
    \        }\n    }\n    return triples\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp41kph_je/tmp41kph_je.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2b90d5bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2b90a52b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2b90a52988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2b90a517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp41kph_je                        0x0000558c12dbc535 <unavailable> + 5429

    5    libc.so.6                          0x00002b2b90f47460 __libc_start_main +
    245

    6    tmp41kph_je                        0x0000558c12dbc1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var triples = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] < a[j] && a[i] < a[k] {\n                 \
    \       triples++\n                    }\n                }\n            }\n \
    \       }\n    }\n    return triples\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpra33y8do.swift:23:32: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n                        triples++\n                  \
    \             ^~\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var triples = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] < a[j] && a[i] < a[k] {\n                 \
    \       triples += 1\n                    }\n                }\n            }\n\
    \        }\n    }\n    return triples\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp41kph_je/tmp41kph_je.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2b90d5bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2b90a52b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2b90a52988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2b90a517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp41kph_je                        0x0000558c12dbc535 <unavailable> + 5429

    5    libc.so.6                          0x00002b2b90f47460 __libc_start_main +
    245

    6    tmp41kph_je                        0x0000558c12dbc1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var triples = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] < a[j] && a[i] < a[k] {\n                 \
    \       triples++\n                    }\n                }\n            }\n \
    \       }\n    }\n    return triples\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpra33y8do.swift:23:32: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n                        triples++\n                  \
    \             ^~\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i < j < k {\n          \
    \          if a[i] < a[j] + a[k] {\n                        count += 1\n     \
    \               }\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5) ==\
    \ 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) == 36)\n\
    assert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpp5re900j.swift:21:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpp5re900j.swift:21:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] < a[j] && a[i] < a[k] {\n                 \
    \       count += 1\n                    }\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpk5n6crrz/tmpk5n6crrz.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6bb51b2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6bb4ea9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6bb4ea9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6bb4ea87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk5n6crrz                        0x0000558fd55f1535 <unavailable> + 5429

    5    libc.so.6                          0x00002b6bb539e460 __libc_start_main +
    245

    6    tmpk5n6crrz                        0x0000558fd55f11e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i < j < k {\n          \
    \          if a[i] < a[j] + a[k] {\n                        count += 1\n     \
    \               }\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5) ==\
    \ 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) == 36)\n\
    assert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpp5re900j.swift:21:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpp5re900j.swift:21:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a: [Int] = []\n    for i in 1...n {\n        for j in 1...n {\n \
    \           for k in 1...n {\n                if i < j < k {\n               \
    \     a[i] = a[i] + a[j] + a[k]\n                }\n            }\n        }\n\
    \    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp7rnue4is.swift:17:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmp7rnue4is.swift:17:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i*i - i\
    \ + 1)\n    }\n    var count = 0\n    for i in 0..(n-1) {\n        for j in (i+1)..(n)\
    \ {\n            for k in (i+1)..(n) {\n                if a[i] < a[j] && a[i]\
    \ < a[k] && a[j] < a[k] {\n                    count += 1\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpuu7owlnk.swift:18:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 0..(n-1) {\n              ^~\n           \
    \   ...\n/tmp/tmpuu7owlnk.swift:19:23: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n        for j in (i+1)..(n) {\n                      ^~\n\
    \                      ...\n/tmp/tmpuu7owlnk.swift:20:27: error: cannot find operator\
    \ '..' in scope; did you mean '...'?\n            for k in (i+1)..(n) {\n    \
    \                      ^~\n                          ...\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] < a[j] && a[i] < a[k] {\n                 \
    \       count += 1\n                    }\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpk5n6crrz/tmpk5n6crrz.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6bb51b2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6bb4ea9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6bb4ea9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6bb4ea87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk5n6crrz                        0x0000558fd55f1535 <unavailable> + 5429

    5    libc.so.6                          0x00002b6bb539e460 __libc_start_main +
    245

    6    tmpk5n6crrz                        0x0000558fd55f11e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i < j < k {\n          \
    \          let sum = Int(a[i]) + Int(a[j]) + Int(a[k])\n                    if\
    \ sum % 3 == 0 {\n                        count += 1\n                    }\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpqb4hls5s.swift:21:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpqb4hls5s.swift:21:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var triples = 0\n    for i in 0..(n-2) {\n        for j in\
    \ (i+1)..(n-1) {\n            for k in (i+1)..(n-1) {\n                if a[i]\
    \ < a[j] && a[j] < a[k] {\n                    triples += 1\n                }\n\
    \            }\n        }\n    }\n    return triples\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp31ogxohi.swift:18:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 0..(n-2) {\n              ^~\n           \
    \   ...\n/tmp/tmp31ogxohi.swift:19:23: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n        for j in (i+1)..(n-1) {\n                     \
    \ ^~\n                      ...\n/tmp/tmp31ogxohi.swift:20:27: error: cannot find\
    \ operator '..' in scope; did you mean '...'?\n            for k in (i+1)..(n-1)\
    \ {\n                          ^~\n                          ...\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    return a.maxElement()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp_1p35cag.swift:17:14: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    return a.maxElement()\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n\
    \    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n  \
    \          for k in 0..<n {\n                if i < j < k {\n                \
    \    let sum = Int(a[i]) + Int(a[j]) + Int(a[k])\n                    if sum %\
    \ 3 == 0 {\n                        count += 1\n                    }\n      \
    \          }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpmxkcrd4n.swift:21:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpmxkcrd4n.swift:21:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var triples = 0\n    for i in 0..(n-1) { \n        for j\
    \ in (i+1)..(n) { \n            for k in (i+1)..(n) { \n                if a[i]\
    \ < a[j] && a[j] < a[k] && a[i] < a[j] + a[k] {\n                    triples +=\
    \ 1\n                }\n            }\n        }\n    }\n    return triples\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpy486cdry.swift:18:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 0..(n-1) { \n              ^~\n          \
    \    ...\n/tmp/tmpy486cdry.swift:19:23: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n        for j in (i+1)..(n) { \n                      ^~\n\
    \                      ...\n/tmp/tmpy486cdry.swift:20:27: error: cannot find operator\
    \ '..' in scope; did you mean '...'?\n            for k in (i+1)..(n) { \n   \
    \                       ^~\n                          ...\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i < j < k {\n          \
    \          if a[i] < a[j] + a[k] {\n                        count += 1\n     \
    \               }\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5) ==\
    \ 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) == 36)\n\
    assert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpp5re900j.swift:21:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpp5re900j.swift:21:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] < a[j] && a[i] < a[k] {\n                 \
    \       count += 1\n                    }\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpk5n6crrz/tmpk5n6crrz.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6bb51b2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6bb4ea9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6bb4ea9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6bb4ea87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk5n6crrz                        0x0000558fd55f1535 <unavailable> + 5429

    5    libc.so.6                          0x00002b6bb539e460 __libc_start_main +
    245

    6    tmpk5n6crrz                        0x0000558fd55f11e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824912
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] < a[j] && a[i] < a[k] {\n                 \
    \       count += 1\n                    }\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpk5n6crrz/tmpk5n6crrz.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6bb51b2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6bb4ea9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6bb4ea9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6bb4ea87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk5n6crrz                        0x0000558fd55f1535 <unavailable> + 5429

    5    libc.so.6                          0x00002b6bb539e460 __libc_start_main +
    245

    6    tmpk5n6crrz                        0x0000558fd55f11e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824912
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] < a[j] && a[i] < a[k] {\n                 \
    \       count += 1\n                    }\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpk5n6crrz/tmpk5n6crrz.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6bb51b2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6bb4ea9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6bb4ea9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6bb4ea87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk5n6crrz                        0x0000558fd55f1535 <unavailable> + 5429

    5    libc.so.6                          0x00002b6bb539e460 __libc_start_main +
    245

    6    tmpk5n6crrz                        0x0000558fd55f11e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824912
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var triples = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] < a[j] && a[i] < a[k] {\n                 \
    \       if a[j] < a[k] {\n                            triples += 1\n         \
    \               }\n                    }\n                }\n            }\n \
    \       }\n    }\n    return triples\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpghi2stv9/tmpghi2stv9.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af7641acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af763ea3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af763ea3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af763ea27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpghi2stv9                        0x0000561be81dc535 <unavailable> + 5429

    5    libc.so.6                          0x00002af764398460 __libc_start_main +
    245

    6    tmpghi2stv9                        0x0000561be81dc1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824912
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] < a[j] && a[i] < a[k] {\n                 \
    \       count += 1\n                    }\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpk5n6crrz/tmpk5n6crrz.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6bb51b2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6bb4ea9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6bb4ea9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6bb4ea87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk5n6crrz                        0x0000558fd55f1535 <unavailable> + 5429

    5    libc.so.6                          0x00002b6bb539e460 __libc_start_main +
    245

    6    tmpk5n6crrz                        0x0000558fd55f11e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i < j < k {\n          \
    \          if a[i] + a[j] + a[k] % 3 == 0 {\n                        count +=\
    \ 1\n                    }\n                }\n            }\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmptw70o6iy.swift:21:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmptw70o6iy.swift:21:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    return a.maxElement()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp_1p35cag.swift:17:14: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    return a.maxElement()\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp10a6mo88/tmp10a6mo88.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42d9bb0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42d98a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42d98a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42d98a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp10a6mo88                        0x000055f0a492b495 <unavailable> + 5269

    5    libc.so.6                          0x00002b42d9d9c460 __libc_start_main +
    245

    6    tmp10a6mo88                        0x000055f0a492b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    return a.filter({ (i, j, k) -> Bool in\n        i < j < k\n\
    \    }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpq6i5rv__.swift:18:11: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n        i < j < k\n          ^   ~\n\
    /tmp/tmpq6i5rv__.swift:17:23: error: contextual closure type '(Int) throws ->\
    \ Bool' expects 1 argument, but 3 were used in closure body\n    return a.filter({\
    \ (i, j, k) -> Bool in\n                      ^\n/tmp/tmpq6i5rv__.swift:18:15:\
    \ error: binary operator '<' cannot be applied to operands of type 'Bool' and\
    \ '()'\n        i < j < k\n        ~~~~~ ^ ~\n/tmp/tmpq6i5rv__.swift:18:15: note:\
    \ overloads for '<' exist with these partially matching parameter lists: ((),\
    \ ()), (AnyIndex, AnyIndex), (Character, Character), (ContinuousClock.Instant,\
    \ ContinuousClock.Instant), (Duration, Duration), (Int, Int), (Int16, Int16),\
    \ (Int32, Int32), (Int64, Int64), (Int8, Int8), (Never, Never), (ObjectIdentifier,\
    \ ObjectIdentifier), (String, String), (String.Index, String.Index), (SuspendingClock.Instant,\
    \ SuspendingClock.Instant), (TaskPriority, TaskPriority), (UInt, UInt), (UInt16,\
    \ UInt16), (UInt32, UInt32), (UInt64, UInt64), (UInt8, UInt8), (Unicode.CanonicalCombiningClass,\
    \ Unicode.CanonicalCombiningClass), (Unicode.Scalar, Unicode.Scalar), (_ValidUTF8Buffer.Index,\
    \ _ValidUTF8Buffer.Index)\n        i < j < k\n              ^\n"
  stdout: ''
  timestamp: 1659824913
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i < j < k {\n          \
    \          if a[i] < a[j] + a[k] {\n                        count += 1\n     \
    \               }\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5) ==\
    \ 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) == 36)\n\
    assert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpp5re900j.swift:21:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpp5re900j.swift:21:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a: [Int] = []\n    for i in 1...n {\n        for j in 1...n {\n \
    \           for k in 1...n {\n                if i != j && i != k && j != k {\n\
    \                    a[i] = a[i] + a[j] + a[k]\n                }\n          \
    \  }\n        }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b45f7d74c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b45f7a6b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b45f7a6b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b45f7a6b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b45f7a6abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b45f786ae83 <unavailable> + 188035

    6    tmpb1hhhp_t                        0x0000561ef9e8dadb <unavailable> + 6875

    7    tmpb1hhhp_t                        0x0000561ef9e8d488 <unavailable> + 5256

    8    libc.so.6                          0x00002b45f7f60460 __libc_start_main +
    245

    9    tmpb1hhhp_t                        0x0000561ef9e8d1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i < j < k {\n          \
    \          let sum = Int(a[i]) + Int(a[j]) + Int(a[k])\n                    if\
    \ sum % 3 == 0 {\n                        count += 1\n                    }\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpqb4hls5s.swift:21:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpqb4hls5s.swift:21:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var triples = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] < a[j] && a[i] < a[k] {\n                 \
    \       triples += 1\n                    }\n                }\n            }\n\
    \        }\n    }\n    return triples\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp41kph_je/tmp41kph_je.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2b90d5bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2b90a52b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2b90a52988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2b90a517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp41kph_je                        0x0000558c12dbc535 <unavailable> + 5429

    5    libc.so.6                          0x00002b2b90f47460 __libc_start_main +
    245

    6    tmp41kph_je                        0x0000558c12dbc1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824912
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = [Int]()\n    for _ in 1...n {\n        a.append(0)\n    }\n \
    \   var count = 0\n    for index in 1...n {\n        for j in 1...n {\n      \
    \      for k in 1...n {\n                if a[index] + a[j] + a[k] == 3 {\n  \
    \                  count += 1\n                }\n            }\n        }\n \
    \   }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ad2e37dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad2e34d2561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad2e34d2286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad2e34d213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad2e34d1bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ad2e32d1e83 <unavailable> + 188035

    6    tmpvvuobu5y                        0x000056170eb41b33 <unavailable> + 6963

    7    tmpvvuobu5y                        0x000056170eb413d8 <unavailable> + 5080

    8    libc.so.6                          0x00002ad2e39c7460 __libc_start_main +
    245

    9    tmpvvuobu5y                        0x000056170eb410f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    return a.maxElement()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp_1p35cag.swift:17:14: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    return a.maxElement()\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = [Int]()\n    for _ in 1...n {\n        a.append(0)\n    }\n \
    \   var count = 0\n    for i in 1...n {\n        for j in 1...n {\n          \
    \  for k in 1...n {\n                if i != j && i != k && j != k {\n       \
    \             a[i] += a[j] + a[k]\n                    if a[i] % 3 == 0 {\n  \
    \                      count += 1\n                    }\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b73a99a9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b73a96a0561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b73a96a0286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b73a96a013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b73a969fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b73a949fe83 <unavailable> + 188035

    6    tmp3hiiunfy                        0x0000563e60eb0bd0 <unavailable> + 7120

    7    tmp3hiiunfy                        0x0000563e60eb0428 <unavailable> + 5160

    8    libc.so.6                          0x00002b73a9b95460 __libc_start_main +
    245

    9    tmp3hiiunfy                        0x0000563e60eb0149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    return a.maxElement()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp_1p35cag.swift:17:14: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    return a.maxElement()\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var result = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i < j < k {\n          \
    \          result += a[i] + a[j] + a[k]\n                }\n            }\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpqtirqn4_.swift:21:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpqtirqn4_.swift:21:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i < j < k {\n          \
    \          if a[i] < a[j] + a[k] {\n                        count += 1\n     \
    \               }\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5) ==\
    \ 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) == 36)\n\
    assert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpp5re900j.swift:21:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpp5re900j.swift:21:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var triples = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] < a[j] && a[i] < a[k] {\n                 \
    \       triples += 1\n                    }\n                }\n            }\n\
    \        }\n    }\n    return triples\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp41kph_je/tmp41kph_je.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2b90d5bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2b90a52b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2b90a52988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2b90a517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp41kph_je                        0x0000558c12dbc535 <unavailable> + 5429

    5    libc.so.6                          0x00002b2b90f47460 __libc_start_main +
    245

    6    tmp41kph_je                        0x0000558c12dbc1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824912
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var triples = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] < a[j] && a[i] < a[k] {\n                 \
    \       triples += 1\n                    }\n                }\n            }\n\
    \        }\n    }\n    return triples\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp41kph_je/tmp41kph_je.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2b90d5bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2b90a52b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2b90a52988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2b90a517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp41kph_je                        0x0000558c12dbc535 <unavailable> + 5429

    5    libc.so.6                          0x00002b2b90f47460 __libc_start_main +
    245

    6    tmp41kph_je                        0x0000558c12dbc1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i < j < k {\n          \
    \          if a[i] < a[j] && a[i] < a[k] {\n                        count += 1\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpqm33t6k_.swift:21:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpqm33t6k_.swift:21:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var triples = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i < j < k {\n          \
    \          if a[i] < a[j] || a[i] < a[k] || a[j] < a[k] {\n                  \
    \      triples++\n                    }\n                }\n            }\n  \
    \      }\n    }\n    return triples\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp9kgm203f.swift:21:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmp9kgm203f.swift:21:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n/tmp/tmp9kgm203f.swift:23:32: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n                        triples++\n\
    \                               ^~\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp10a6mo88/tmp10a6mo88.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42d9bb0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42d98a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42d98a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42d98a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp10a6mo88                        0x000055f0a492b495 <unavailable> + 5269

    5    libc.so.6                          0x00002b42d9d9c460 __libc_start_main +
    245

    6    tmp10a6mo88                        0x000055f0a492b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824912
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] < a[j] && a[i] < a[k] {\n                 \
    \       if a[j] < a[k] {\n                            count += 1\n           \
    \             }\n                    }\n                }\n            }\n   \
    \     }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpdlpzszk_/tmpdlpzszk_.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b423011cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b422fe13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b422fe13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b422fe127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdlpzszk_                        0x000055fa9f6f4535 <unavailable> + 5429

    5    libc.so.6                          0x00002b4230308460 __libc_start_main +
    245

    6    tmpdlpzszk_                        0x000055fa9f6f41e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i < j < k {\n          \
    \          if a[i] < a[j] < a[k] {\n                        count += 1\n     \
    \               }\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5) ==\
    \ 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) == 36)\n\
    assert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmphwtnshvc.swift:21:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmphwtnshvc.swift:21:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n/tmp/tmphwtnshvc.swift:22:29: error: adjacent\
    \ operators are in non-associative precedence group 'ComparisonPrecedence'\n \
    \                   if a[i] < a[j] < a[k] {\n                            ^   \
    \   ~\n/tmp/tmphwtnshvc.swift:22:29: error: cannot convert value of type 'Bool'\
    \ to expected argument type 'Int'\n                    if a[i] < a[j] < a[k] {\n\
    \                            ^\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i < j < k {\n          \
    \          if a[i] + a[j] + a[k] == 3 {\n                        count += 1\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpg4dzeiwj.swift:21:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpg4dzeiwj.swift:21:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var count = 0\n    for i in 0..(n-1) { \n        for j in\
    \ (i+1)..(n) {\n            for k in (j+1)..(n) {\n                if a[i] < a[j]\
    \ && a[i] < a[k] && a[j] < a[k] {\n                    count += 1\n          \
    \      }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpxh4fdc8x.swift:18:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 0..(n-1) { \n              ^~\n          \
    \    ...\n/tmp/tmpxh4fdc8x.swift:19:23: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n        for j in (i+1)..(n) {\n                      ^~\n\
    \                      ...\n/tmp/tmpxh4fdc8x.swift:20:27: error: cannot find operator\
    \ '..' in scope; did you mean '...'?\n            for k in (j+1)..(n) {\n    \
    \                      ^~\n                          ...\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var triples = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] < a[j] && a[i] < a[k] {\n                 \
    \       if a[j] < a[k] {\n                            triples += 1\n         \
    \               }\n                    }\n                }\n            }\n \
    \       }\n    }\n    return triples\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpghi2stv9/tmpghi2stv9.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af7641acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af763ea3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af763ea3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af763ea27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpghi2stv9                        0x0000561be81dc535 <unavailable> + 5429

    5    libc.so.6                          0x00002af764398460 __libc_start_main +
    245

    6    tmpghi2stv9                        0x0000561be81dc1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i < j < k {\n          \
    \          if a[i] < a[j] + a[k] {\n                        count += 1\n     \
    \               }\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5) ==\
    \ 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) == 36)\n\
    assert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpp5re900j.swift:21:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpp5re900j.swift:21:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i < j < k {\n          \
    \          if a[i] < a[j] && a[i] < a[k] {\n                        count += 1\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpqm33t6k_.swift:21:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpqm33t6k_.swift:21:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a: [Int] = []\n    for i in 1...n {\n        a[i] = i * i - i + 1\n\
    \    }\n    var triples = 0\n    for i in 1...n {\n        for j in 1...n {\n\
    \            for k in 1...n {\n                if i != j && i != k && j != k {\n\
    \                    if a[i] < a[j] && a[i] < a[k] {\n                       \
    \ triples++\n                    }\n                }\n            }\n       \
    \ }\n    }\n    return triples\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp043qn7p5.swift:23:32: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n                        triples++\n                  \
    \             ^~\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i < j < k {\n          \
    \          if a[i] < a[j] + a[k] {\n                        count += 1\n     \
    \               }\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5) ==\
    \ 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) == 36)\n\
    assert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpp5re900j.swift:21:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpp5re900j.swift:21:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i < j < k {\n          \
    \          if a[i] < a[j] + a[k] {\n                        count += 1\n     \
    \               }\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5) ==\
    \ 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) == 36)\n\
    assert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpp5re900j.swift:21:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpp5re900j.swift:21:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var triples = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] < a[j] && a[i] < a[k] {\n                 \
    \       if a[j] < a[k] {\n                            triples += 1\n         \
    \               }\n                    }\n                }\n            }\n \
    \       }\n    }\n    return triples\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpghi2stv9/tmpghi2stv9.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af7641acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af763ea3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af763ea3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af763ea27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpghi2stv9                        0x0000561be81dc535 <unavailable> + 5429

    5    libc.so.6                          0x00002af764398460 __libc_start_main +
    245

    6    tmpghi2stv9                        0x0000561be81dc1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824912
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp10a6mo88/tmp10a6mo88.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42d9bb0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42d98a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42d98a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42d98a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp10a6mo88                        0x000055f0a492b495 <unavailable> + 5269

    5    libc.so.6                          0x00002b42d9d9c460 __libc_start_main +
    245

    6    tmp10a6mo88                        0x000055f0a492b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824912
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] < a[j] + a[k] {\n                        count\
    \ += 1\n                    }\n                }\n            }\n        }\n \
    \   }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpvkgfnh5s/tmpvkgfnh5s.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9f5d321c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9f5d018b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9f5d018988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9f5d0177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvkgfnh5s                        0x000055e7ea2d4535 <unavailable> + 5429

    5    libc.so.6                          0x00002b9f5d50d460 __libc_start_main +
    245

    6    tmpvkgfnh5s                        0x000055e7ea2d41e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    return a.maxElement()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp_1p35cag.swift:17:14: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    return a.maxElement()\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i < j < k {\n          \
    \          if a[i] < a[j] + a[k] {\n                        count += 1\n     \
    \               }\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5) ==\
    \ 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) == 36)\n\
    assert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpp5re900j.swift:21:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpp5re900j.swift:21:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var triples = 0\n    for i in 0..(n-1) { \n        for j\
    \ in (i+1)..(n) {\n            for k in (i+1)..(n) {\n                if a[i]\
    \ < a[j] && a[j] < a[k] {\n                    triples += 1\n                }\n\
    \            }\n        }\n    }\n    return triples\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpm04oc_5e.swift:18:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 0..(n-1) { \n              ^~\n          \
    \    ...\n/tmp/tmpm04oc_5e.swift:19:23: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n        for j in (i+1)..(n) {\n                      ^~\n\
    \                      ...\n/tmp/tmpm04oc_5e.swift:20:27: error: cannot find operator\
    \ '..' in scope; did you mean '...'?\n            for k in (i+1)..(n) {\n    \
    \                      ^~\n                          ...\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var triples = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i < j < k {\n          \
    \          if a[i] < a[j] + a[k] {\n                        triples += 1\n   \
    \                 }\n                }\n            }\n        }\n    }\n    return\
    \ triples\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5)\
    \ == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) ==\
    \ 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp8_8swegh.swift:21:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmp8_8swegh.swift:21:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = [Int]()\n    for i in 1...n {\n        for j in 1...n {\n   \
    \         for k in 1...n {\n                if i != j && j != k && i != k {\n\
    \                    a[i] = a[i] + a[j] + a[k]\n                }\n          \
    \  }\n        }\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b26547eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26544e5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b26544e5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b26544e513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b26544e4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b26542e4e83 <unavailable> + 188035

    6    tmp_6mvx6k7                        0x0000561824773ab0 <unavailable> + 6832

    7    tmp_6mvx6k7                        0x0000561824773468 <unavailable> + 5224

    8    libc.so.6                          0x00002b26549da460 __libc_start_main +
    245

    9    tmp_6mvx6k7                        0x0000561824773189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var triples = 0\n    for i in 0..(n-1) {\n        for j in\
    \ (i+1)..(n-1) {\n            for k in (i+1)..(n-1) {\n                if a[i]\
    \ < a[j] && a[i] < a[k] && a[j] < a[k] {\n                    triples += 1\n \
    \               }\n            }\n        }\n    }\n    return triples\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp8_g0h67l.swift:18:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 0..(n-1) {\n              ^~\n           \
    \   ...\n/tmp/tmp8_g0h67l.swift:19:23: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n        for j in (i+1)..(n-1) {\n                     \
    \ ^~\n                      ...\n/tmp/tmp8_g0h67l.swift:20:27: error: cannot find\
    \ operator '..' in scope; did you mean '...'?\n            for k in (i+1)..(n-1)\
    \ {\n                          ^~\n                          ...\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i < j < k {\n          \
    \          let sum = Int(a[i]) + Int(a[j]) + Int(a[k])\n                    if\
    \ sum % 3 == 0 {\n                        count += 1\n                    }\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpqb4hls5s.swift:21:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpqb4hls5s.swift:21:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var triples = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] < a[j] + a[k] {\n                        triples\
    \ += 1\n                    }\n                }\n            }\n        }\n \
    \   }\n    return triples\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpz7xvqrpi/tmpz7xvqrpi.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b54af99dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b54af694b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b54af694988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b54af6937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz7xvqrpi                        0x000055bc79dfc535 <unavailable> + 5429

    5    libc.so.6                          0x00002b54afb89460 __libc_start_main +
    245

    6    tmpz7xvqrpi                        0x000055bc79dfc1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824912
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var triples = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] < a[j] && a[i] < a[k] {\n                 \
    \       if a[j] < a[k] {\n                            triples += 1\n         \
    \               }\n                    }\n                }\n            }\n \
    \       }\n    }\n    return triples\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpghi2stv9/tmpghi2stv9.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af7641acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af763ea3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af763ea3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af763ea27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpghi2stv9                        0x0000561be81dc535 <unavailable> + 5429

    5    libc.so.6                          0x00002af764398460 __libc_start_main +
    245

    6    tmpghi2stv9                        0x0000561be81dc1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824912
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp10a6mo88/tmp10a6mo88.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42d9bb0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42d98a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42d98a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42d98a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp10a6mo88                        0x000055f0a492b495 <unavailable> + 5269

    5    libc.so.6                          0x00002b42d9d9c460 __libc_start_main +
    245

    6    tmp10a6mo88                        0x000055f0a492b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824912
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var triples = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] < a[j] && a[i] < a[k] {\n                 \
    \       if a[j] < a[k] {\n                            triples += 1\n         \
    \               }\n                    }\n                }\n            }\n \
    \       }\n    }\n    return triples\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpghi2stv9/tmpghi2stv9.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af7641acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af763ea3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af763ea3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af763ea27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpghi2stv9                        0x0000561be81dc535 <unavailable> + 5429

    5    libc.so.6                          0x00002af764398460 __libc_start_main +
    245

    6    tmpghi2stv9                        0x0000561be81dc1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i < j < k {\n          \
    \          let sum = Int(a[i]) + Int(a[j]) + Int(a[k])\n                    if\
    \ sum % 3 == 0 {\n                        count += 1\n                    }\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpqb4hls5s.swift:21:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpqb4hls5s.swift:21:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var triples = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i < j < k {\n          \
    \          triples += (a[i] + a[j] + a[k]) % 3 == 0\n                }\n     \
    \       }\n        }\n    }\n    return triples\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmppn3i567s.swift:21:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmppn3i567s.swift:21:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n/tmp/tmppn3i567s.swift:22:57: error: cannot\
    \ convert value of type 'Bool' to expected argument type 'Int'\n             \
    \       triples += (a[i] + a[j] + a[k]) % 3 == 0\n                           \
    \                             ^\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] < a[j] && a[i] < a[k] {\n                 \
    \       if a[j] < a[k] {\n                            count += 1\n           \
    \             }\n                    }\n                }\n            }\n   \
    \     }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpdlpzszk_/tmpdlpzszk_.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b423011cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b422fe13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b422fe13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b422fe127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdlpzszk_                        0x000055fa9f6f4535 <unavailable> + 5429

    5    libc.so.6                          0x00002b4230308460 __libc_start_main +
    245

    6    tmpdlpzszk_                        0x000055fa9f6f41e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    return a.maxElement()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp_1p35cag.swift:17:14: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    return a.maxElement()\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i*i - i\
    \ + 1)\n    }\n    var triples = 0\n    for i in 0..(n-2) {\n        for j in\
    \ (i+1)..(n-1) {\n            for k in (i+1)..(n-1) {\n                if a[i]\
    \ < a[j] && a[i] < a[k] && a[j] < a[k] {\n                    triples += 1\n \
    \               }\n            }\n        }\n    }\n    return triples\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpljypd5jz.swift:18:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 0..(n-2) {\n              ^~\n           \
    \   ...\n/tmp/tmpljypd5jz.swift:19:23: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n        for j in (i+1)..(n-1) {\n                     \
    \ ^~\n                      ...\n/tmp/tmpljypd5jz.swift:20:27: error: cannot find\
    \ operator '..' in scope; did you mean '...'?\n            for k in (i+1)..(n-1)\
    \ {\n                          ^~\n                          ...\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] < a[j] + a[k] {\n                        count\
    \ += 1\n                    }\n                }\n            }\n        }\n \
    \   }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpvkgfnh5s/tmpvkgfnh5s.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9f5d321c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9f5d018b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9f5d018988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9f5d0177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvkgfnh5s                        0x000055e7ea2d4535 <unavailable> + 5429

    5    libc.so.6                          0x00002b9f5d50d460 __libc_start_main +
    245

    6    tmpvkgfnh5s                        0x000055e7ea2d41e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824912
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = [Int]()\n    for i in 1...n {\n        a[i] = i * i - i + 1\n\
    \    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b573486dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5734564561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5734564286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b573456413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5734563bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b57343637ec <unavailable> + 186348

    6    tmp_2pek9ri                        0x000055f8c818b7c9 <unavailable> + 6089

    7    tmp_2pek9ri                        0x000055f8c818b418 <unavailable> + 5144

    8    libc.so.6                          0x00002b5734a59460 __libc_start_main +
    245

    9    tmp_2pek9ri                        0x000055f8c818b139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1659824912
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] < a[j] && a[i] < a[k] {\n                 \
    \       count += 1\n                    }\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpk5n6crrz/tmpk5n6crrz.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6bb51b2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6bb4ea9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6bb4ea9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6bb4ea87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk5n6crrz                        0x0000558fd55f1535 <unavailable> + 5429

    5    libc.so.6                          0x00002b6bb539e460 __libc_start_main +
    245

    6    tmpk5n6crrz                        0x0000558fd55f11e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824912
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] < a[j] && a[i] < a[k] {\n                 \
    \       count += 1\n                    }\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpk5n6crrz/tmpk5n6crrz.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6bb51b2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6bb4ea9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6bb4ea9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6bb4ea87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk5n6crrz                        0x0000558fd55f1535 <unavailable> + 5429

    5    libc.so.6                          0x00002b6bb539e460 __libc_start_main +
    245

    6    tmpk5n6crrz                        0x0000558fd55f11e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824912
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = [Int]()\n    for i in 1...n {\n        a[i] = i * i - i + 1\n\
    \    }\n    var count = 0\n    for i in 1...n {\n        for j in 1...n {\n  \
    \          for k in 1...n {\n                if a[i] < a[j] && a[i] < a[k] &&\
    \ a[j] < a[k] {\n                    count += 1\n                }\n         \
    \   }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b55a6174c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b55a5e6b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b55a5e6b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b55a5e6b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b55a5e6abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b55a5c6a7ec <unavailable> + 186348

    6    tmpu0pg1udk                        0x0000559275767801 <unavailable> + 6145

    7    tmpu0pg1udk                        0x00005592757673c8 <unavailable> + 5064

    8    libc.so.6                          0x00002b55a6360460 __libc_start_main +
    245

    9    tmpu0pg1udk                        0x00005592757670e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var triples = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i < j < k {\n          \
    \          triples += (a[i] + a[j] + a[k]) % 3 == 0 ? 1 : 0\n                }\n\
    \            }\n        }\n    }\n    return triples\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpbnjd3pl5.swift:21:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpbnjd3pl5.swift:21:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a: [Int] = []\n    for i in 1...n {\n        a[i] = i * i - i + 1\n\
    \    }\n    var triples = 0\n    for i in 0..(n-2) {\n        for j in (i+1)..(n-1)\
    \ {\n            for k in (i+1)..(n-1) {\n                if a[i] < a[j] && a[j]\
    \ < a[k] {\n                    triples += 1\n                }\n            }\n\
    \        }\n    }\n    return triples\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpivmbm057.swift:18:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 0..(n-2) {\n              ^~\n           \
    \   ...\n/tmp/tmpivmbm057.swift:19:23: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n        for j in (i+1)..(n-1) {\n                     \
    \ ^~\n                      ...\n/tmp/tmpivmbm057.swift:20:27: error: cannot find\
    \ operator '..' in scope; did you mean '...'?\n            for k in (i+1)..(n-1)\
    \ {\n                          ^~\n                          ...\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var triples = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] < a[j] && a[i] < a[k] {\n                 \
    \       triples += 1\n                    }\n                }\n            }\n\
    \        }\n    }\n    return triples\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp41kph_je/tmp41kph_je.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2b90d5bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2b90a52b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2b90a52988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2b90a517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp41kph_je                        0x0000558c12dbc535 <unavailable> + 5429

    5    libc.so.6                          0x00002b2b90f47460 __libc_start_main +
    245

    6    tmp41kph_je                        0x0000558c12dbc1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824912
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp10a6mo88/tmp10a6mo88.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42d9bb0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42d98a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42d98a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42d98a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp10a6mo88                        0x000055f0a492b495 <unavailable> + 5269

    5    libc.so.6                          0x00002b42d9d9c460 __libc_start_main +
    245

    6    tmp10a6mo88                        0x000055f0a492b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i < j < k {\n          \
    \          if a[i] < a[j] + a[k] {\n                        count += 1\n     \
    \               }\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5) ==\
    \ 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) == 36)\n\
    assert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpp5re900j.swift:21:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpp5re900j.swift:21:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i < j < k {\n          \
    \          if a[i] < a[j] && a[i] < a[k] {\n                        count += 1\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpqm33t6k_.swift:21:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpqm33t6k_.swift:21:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var result = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i != j && i != k && j !=\
    \ k {\n                    let sum = Int(a[i]) + Int(a[j]) + Int(a[k])\n     \
    \               if sum % 3 == 0 {\n                        result = result + 1\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpc8fqwqyr/tmpc8fqwqyr.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0bbf80dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0bbf504b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0bbf504988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0bbf5037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc8fqwqyr                        0x00005560ccf53665 <unavailable> + 5733

    5    libc.so.6                          0x00002b0bbf9f9460 __libc_start_main +
    245

    6    tmpc8fqwqyr                        0x00005560ccf53319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824913
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n\
    \    }\n    var count = 0\n    for i in 1...n {\n        for j in 1...n {\n  \
    \          for k in 1...n {\n                if i < j < k {\n                \
    \    if a[i] < a[j] && a[j] < a[k] {\n                        count += 1\n   \
    \                 }\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5) ==\
    \ 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) == 36)\n\
    assert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp1ssyuguz.swift:21:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmp1ssyuguz.swift:21:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    return a.maxElement()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp_1p35cag.swift:17:14: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    return a.maxElement()\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i < j < k {\n          \
    \          if a[i] < a[j] + a[k] {\n                        count += 1\n     \
    \               }\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5) ==\
    \ 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) == 36)\n\
    assert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpp5re900j.swift:21:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpp5re900j.swift:21:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp10a6mo88/tmp10a6mo88.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42d9bb0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42d98a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42d98a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42d98a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp10a6mo88                        0x000055f0a492b495 <unavailable> + 5269

    5    libc.so.6                          0x00002b42d9d9c460 __libc_start_main +
    245

    6    tmp10a6mo88                        0x000055f0a492b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824912
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] < a[j] && a[i] < a[k] {\n                 \
    \       count += 1\n                    }\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpk5n6crrz/tmpk5n6crrz.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6bb51b2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6bb4ea9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6bb4ea9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6bb4ea87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk5n6crrz                        0x0000558fd55f1535 <unavailable> + 5429

    5    libc.so.6                          0x00002b6bb539e460 __libc_start_main +
    245

    6    tmpk5n6crrz                        0x0000558fd55f11e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824912
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = [Int]()\n    for i in 1...n {\n        a[i] = i * i - i + 1\n\
    \    }\n    var count = 0\n    for i in 1...n {\n        for j in 1...n {\n  \
    \          for k in 1...n {\n                if i != j && i != k && j != k {\n\
    \                    if a[i] < a[j] && a[i] < a[k] {\n                       \
    \ count += 1\n                    }\n                }\n            }\n      \
    \  }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b048d7dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b048d4d5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b048d4d5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b048d4d513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b048d4d4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b048d2d47ec <unavailable> + 186348

    6    tmpc5r1vnlv                        0x000055b6c0133801 <unavailable> + 6145

    7    tmpc5r1vnlv                        0x000055b6c01333c8 <unavailable> + 5064

    8    libc.so.6                          0x00002b048d9ca460 __libc_start_main +
    245

    9    tmpc5r1vnlv                        0x000055b6c01330e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1659824913
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var triples = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] + a[j] + a[k] == 3 {\n                    \
    \    triples += 1\n                    }\n                }\n            }\n \
    \       }\n    }\n    return triples\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp_d48cx95/tmp_d48cx95.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adaa6d9fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adaa6a96b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adaa6a96988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adaa6a957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_d48cx95                        0x00005652998f0535 <unavailable> + 5429

    5    libc.so.6                          0x00002adaa6f8b460 __libc_start_main +
    245

    6    tmp_d48cx95                        0x00005652998f01e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824912
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] < a[j] && a[i] < a[k] {\n                 \
    \       count += 1\n                    }\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpk5n6crrz/tmpk5n6crrz.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6bb51b2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6bb4ea9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6bb4ea9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6bb4ea87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk5n6crrz                        0x0000558fd55f1535 <unavailable> + 5429

    5    libc.so.6                          0x00002b6bb539e460 __libc_start_main +
    245

    6    tmpk5n6crrz                        0x0000558fd55f11e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824912
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] < a[j] && a[i] < a[k] {\n                 \
    \       count += 1\n                    }\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpk5n6crrz/tmpk5n6crrz.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6bb51b2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6bb4ea9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6bb4ea9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6bb4ea87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk5n6crrz                        0x0000558fd55f1535 <unavailable> + 5429

    5    libc.so.6                          0x00002b6bb539e460 __libc_start_main +
    245

    6    tmpk5n6crrz                        0x0000558fd55f11e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824912
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    return a.filter({ ($0 % 3) == 0 }).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmprlwtd4iy/tmprlwtd4iy.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05dff46c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05dfc3db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05dfc3d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05dfc3c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprlwtd4iy                        0x000055d8352cd555 <unavailable> + 5461

    5    libc.so.6                          0x00002b05e0132460 __libc_start_main +
    245

    6    tmprlwtd4iy                        0x000055d8352cd209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824913
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i < j < k {\n          \
    \          if a[i] < a[j] + a[k] {\n                        count += 1\n     \
    \               }\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5) ==\
    \ 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) == 36)\n\
    assert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpp5re900j.swift:21:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpp5re900j.swift:21:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = [Int]()\n    for i in 1...n {\n        a[i] = i * i - i + 1\n\
    \    }\n    var triples = 0\n    for i in 1...n {\n        for j in 1...n {\n\
    \            for k in 1...n {\n                if i != j && i != k && j != k {\n\
    \                    if a[i] < a[j] && a[i] < a[k] {\n                       \
    \ if a[j] < a[k] {\n                            triples += 1\n               \
    \         }\n                    }\n                }\n            }\n       \
    \ }\n    }\n    return triples\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b5f6a526c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5f6a21d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5f6a21d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b5f6a21d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5f6a21cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b5f6a01c7ec <unavailable> + 186348

    6    tmpri3_emxd                        0x000055669ba8c801 <unavailable> + 6145

    7    tmpri3_emxd                        0x000055669ba8c3c8 <unavailable> + 5064

    8    libc.so.6                          0x00002b5f6a712460 __libc_start_main +
    245

    9    tmpri3_emxd                        0x000055669ba8c0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1659824913
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    return a.maxElement()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp_1p35cag.swift:17:14: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    return a.maxElement()\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    return a.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmp10a6mo88/tmp10a6mo88.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42d9bb0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42d98a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42d98a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42d98a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp10a6mo88                        0x000055f0a492b495 <unavailable> + 5269

    5    libc.so.6                          0x00002b42d9d9c460 __libc_start_main +
    245

    6    tmp10a6mo88                        0x000055f0a492b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    return a.maxElement()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp_1p35cag.swift:17:14: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    return a.maxElement()\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var result = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] < a[j] && a[i] < a[k] {\n                 \
    \       result++\n                    }\n                }\n            }\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpedo5i8gu.swift:23:31: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n                        result++\n                   \
    \           ^~\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var triples = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] < a[j] && a[i] < a[k] {\n                 \
    \       triples++\n                    }\n                }\n            }\n \
    \       }\n    }\n    return triples\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpra33y8do.swift:23:32: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n                        triples++\n                  \
    \             ^~\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i < j < k {\n          \
    \          let sum = Int(a[i]) + Int(a[j]) + Int(a[k])\n                    if\
    \ sum % 3 == 0 {\n                        count += 1\n                    }\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpqb4hls5s.swift:21:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpqb4hls5s.swift:21:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] < a[j] && a[i] < a[k] {\n                 \
    \       if a[j] < a[k] {\n                            count += 1\n           \
    \             }\n                    }\n                }\n            }\n   \
    \     }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpdlpzszk_/tmpdlpzszk_.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b423011cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b422fe13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b422fe13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b422fe127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdlpzszk_                        0x000055fa9f6f4535 <unavailable> + 5429

    5    libc.so.6                          0x00002b4230308460 __libc_start_main +
    245

    6    tmpdlpzszk_                        0x000055fa9f6f41e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i < j < k {\n          \
    \          if a[i] + a[j] + a[k] % 3 == 0 {\n                        count +=\
    \ 1\n                    }\n                }\n            }\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmptw70o6iy.swift:21:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmptw70o6iy.swift:21:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var result = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i < j < k {\n          \
    \          if a[i] < a[j] + a[k] {\n                        result += a[i] < a[j]\
    \ + a[k]\n                    }\n                }\n            }\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp79tf6gxu.swift:21:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmp79tf6gxu.swift:21:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n/tmp/tmp79tf6gxu.swift:23:40: error: cannot\
    \ convert value of type 'Bool' to expected argument type 'Int'\n             \
    \           result += a[i] < a[j] + a[k]\n                                   \
    \    ^\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var triples = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i < j < k {\n          \
    \          if a[i] < a[j] + a[k] {\n                        triples += 1\n   \
    \                 }\n                }\n            }\n        }\n    }\n    return\
    \ triples\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5)\
    \ == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) ==\
    \ 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp8_8swegh.swift:21:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmp8_8swegh.swift:21:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    return a.filter({ (i, j, k) -> Bool in\n        return i\
    \ < j < k\n    }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp58ozo9op.swift:18:18: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n        return i < j < k\n        \
    \         ^   ~\n/tmp/tmp58ozo9op.swift:17:23: error: contextual closure type\
    \ '(Int) throws -> Bool' expects 1 argument, but 3 were used in closure body\n\
    \    return a.filter({ (i, j, k) -> Bool in\n                      ^\n/tmp/tmp58ozo9op.swift:18:22:\
    \ error: binary operator '<' cannot be applied to operands of type 'Bool' and\
    \ '()'\n        return i < j < k\n               ~~~~~ ^ ~\n/tmp/tmp58ozo9op.swift:18:22:\
    \ note: overloads for '<' exist with these partially matching parameter lists:\
    \ ((), ()), (AnyIndex, AnyIndex), (Character, Character), (ContinuousClock.Instant,\
    \ ContinuousClock.Instant), (Duration, Duration), (Int, Int), (Int16, Int16),\
    \ (Int32, Int32), (Int64, Int64), (Int8, Int8), (Never, Never), (ObjectIdentifier,\
    \ ObjectIdentifier), (String, String), (String.Index, String.Index), (SuspendingClock.Instant,\
    \ SuspendingClock.Instant), (TaskPriority, TaskPriority), (UInt, UInt), (UInt16,\
    \ UInt16), (UInt32, UInt32), (UInt64, UInt64), (UInt8, UInt8), (Unicode.CanonicalCombiningClass,\
    \ Unicode.CanonicalCombiningClass), (Unicode.Scalar, Unicode.Scalar), (_ValidUTF8Buffer.Index,\
    \ _ValidUTF8Buffer.Index)\n        return i < j < k\n                     ^\n"
  stdout: ''
  timestamp: 1659824913
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    return a.filter{$0 % 3 == 0}.length\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmp91lidk6k.swift:17:34: error: value of type '[Int]' has no member\
    \ 'length'\n    return a.filter{$0 % 3 == 0}.length\n           ~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            for k in 0..<n {\n                if i < j < k {\n          \
    \          if a[i] < a[j] + a[k] {\n                        count += 1\n     \
    \               }\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_max_triples(n: 5) ==\
    \ 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10) == 36)\n\
    assert(get_max_triples(n: 100) == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpp5re900j.swift:21:22: error: adjacent operators are in non-associative\
    \ precedence group 'ComparisonPrecedence'\n                if i < j < k {\n  \
    \                   ^   ~\n/tmp/tmpp5re900j.swift:21:22: error: cannot convert\
    \ value of type 'Bool' to expected argument type 'Int'\n                if i <\
    \ j < k {\n                     ^\n"
  stdout: ''
  timestamp: 1659824912
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array<Int>()\n    for i in 1...n {\n        a.append(i * i -\
    \ i + 1)\n    }\n    var triples = 0\n    for i in 0..(n-1) {\n        for j in\
    \ (i+1)..(n) {\n            for k in (j+1)..(n) {\n                if a[i] < a[j]\
    \ && a[i] < a[k] && a[j] < a[k] {\n                    triples += 1\n        \
    \        }\n            }\n        }\n    }\n    return triples\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpwfo5v6bt.swift:18:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 0..(n-1) {\n              ^~\n           \
    \   ...\n/tmp/tmpwfo5v6bt.swift:19:23: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n        for j in (i+1)..(n) {\n                      ^~\n\
    \                      ...\n/tmp/tmpwfo5v6bt.swift:20:27: error: cannot find operator\
    \ '..' in scope; did you mean '...'?\n            for k in (j+1)..(n) {\n    \
    \                      ^~\n                          ...\n"
  stdout: ''
  timestamp: 1659824912
