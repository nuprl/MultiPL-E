language: swift
name: HumanEval_152_compare
results:
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var index = 0\n    while index < game.count {\n      \
    \  if game[index] == guess[index] {\n            result.append(0)\n        } else\
    \ {\n            result.append(abs(game[index] - guess[index]))\n        }\n \
    \       index += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) ==\
    \ [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess:\
    \ [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1,\
    \ 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824943
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: guess.count)\n    \n    for i in 0..<guess.count\
    \ {\n        if game[i] == guess[i] {\n            result[i] = 0\n        } else\
    \ {\n            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824943
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var index = 0\n    while index < game.count {\n      \
    \  if game[index] == guess[index] {\n            result.append(0)\n        } else\
    \ {\n            result.append(abs(game[index] - guess[index]))\n        }\n \
    \       index += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) ==\
    \ [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess:\
    \ [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1,\
    \ 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824943
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var scores = [Int]()\n    var guesses = [Int]()\n    \n\
    \    for i in 0..<game.count {\n        guesses.append(guess[i])\n        scores.append(game[i])\n\
    \    }\n    \n    for i in 0..<guesses.count {\n        if guesses[i] == scores[i]\
    \ {\n            result.append(0)\n        } else {\n            result.append(abs(guesses[i]\
    \ - scores[i]))\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4,\
    \ 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824943
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: game.count)\n    var i = 0\n    while i\
    \ < game.count {\n        if guess[i] == game[i] {\n            result[i] = 0\n\
    \        } else {\n            result[i] = abs(guess[i] - game[i])\n        }\n\
    \        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) ==\
    \ [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess:\
    \ [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1,\
    \ 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824943
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: game.count)\n    for i in 0..<game.count\
    \ {\n        result[i] = abs(game[i] - guess[i])\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824943
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: game.count)\n    for i in 0..<game.count\
    \ {\n        result[i] = abs(game[i] - guess[i])\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824943
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var scores = [Int]()\n    var guesses = [Int]()\n    var\
    \ i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n\
    \ = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s =\
    \ 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n\
    \    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n \
    \   var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n  \
    \  var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n   \
    \ var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var\
    \ s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x\
    \ = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c =\
    \ 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n\
    \    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n \
    \   var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n  \
    \  var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n   \
    \ var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var\
    \ c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h\
    \ = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m =\
    \ 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n\
    \    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n \
    \   var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n  \
    \  var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n   \
    \ var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var\
    \ m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r\
    \ = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w =\
    \ 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n\
    \    var c = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp9xihw3q3.swift:42:9: error: invalid redeclaration of 'i'\n    var\
    \ i = 0\n        ^\n/tmp/tmp9xihw3q3.swift:16:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmp9xihw3q3.swift:43:9: error: invalid\
    \ redeclaration of 'j'\n    var j = 0\n        ^\n/tmp/tmp9xihw3q3.swift:17:9:\
    \ note: 'j' previously declared here\n    var j = 0\n        ^\n/tmp/tmp9xihw3q3.swift:44:9:\
    \ error: invalid redeclaration of 'k'\n    var k = 0\n        ^\n/tmp/tmp9xihw3q3.swift:18:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmp9xihw3q3.swift:45:9:\
    \ error: invalid redeclaration of 'l'\n    var l = 0\n        ^\n/tmp/tmp9xihw3q3.swift:19:9:\
    \ note: 'l' previously declared here\n    var l = 0\n        ^\n/tmp/tmp9xihw3q3.swift:46:9:\
    \ error: invalid redeclaration of 'm'\n    var m = 0\n        ^\n/tmp/tmp9xihw3q3.swift:20:9:\
    \ note: 'm' previously declared here\n    var m = 0\n        ^\n/tmp/tmp9xihw3q3.swift:47:9:\
    \ error: invalid redeclaration of 'n'\n    var n = 0\n        ^\n/tmp/tmp9xihw3q3.swift:21:9:\
    \ note: 'n' previously declared here\n    var n = 0\n        ^\n/tmp/tmp9xihw3q3.swift:48:9:\
    \ error: invalid redeclaration of 'o'\n    var o = 0\n        ^\n/tmp/tmp9xihw3q3.swift:22:9:\
    \ note: 'o' previously declared here\n    var o = 0\n        ^\n/tmp/tmp9xihw3q3.swift:49:9:\
    \ error: invalid redeclaration of 'p'\n    var p = 0\n        ^\n/tmp/tmp9xihw3q3.swift:23:9:\
    \ note: 'p' previously declared here\n    var p = 0\n        ^\n/tmp/tmp9xihw3q3.swift:50:9:\
    \ error: invalid redeclaration of 'q'\n    var q = 0\n        ^\n/tmp/tmp9xihw3q3.swift:24:9:\
    \ note: 'q' previously declared here\n    var q = 0\n        ^\n/tmp/tmp9xihw3q3.swift:51:9:\
    \ error: invalid redeclaration of 'r'\n    var r = 0\n        ^\n/tmp/tmp9xihw3q3.swift:25:9:\
    \ note: 'r' previously declared here\n    var r = 0\n        ^\n/tmp/tmp9xihw3q3.swift:52:9:\
    \ error: invalid redeclaration of 's'\n    var s = 0\n        ^\n/tmp/tmp9xihw3q3.swift:26:9:\
    \ note: 's' previously declared here\n    var s = 0\n        ^\n/tmp/tmp9xihw3q3.swift:53:9:\
    \ error: invalid redeclaration of 't'\n    var t = 0\n        ^\n/tmp/tmp9xih"
  stdout: ''
  timestamp: 1659824943
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var score = 0\n    var guess = 0\n    var game = 0\n \
    \   var gameScore = 0\n    var guessScore = 0\n    var gameGuess = 0\n    var\
    \ guessGuess = 0\n    var gameGuessScore = 0\n    var guessGuessScore = 0\n  \
    \  var gameGuessGuess = 0\n    var guessGuessGuess = 0\n    var gameGuessGuessScore\
    \ = 0\n    var guessGuessGuessScore = 0\n    var gameGuessGuessGuess = 0\n   \
    \ var guessGuessGuessGuess = 0\n    var gameGuessGuessGuessScore = 0\n    var\
    \ guessGuessGuessGuessScore = 0\n    var gameGuessGuessGuessGuess = 0\n    var\
    \ guessGuessGuessGuessGuess = 0\n    var gameGuessGuessGuessGuessScore = 0\n \
    \   var guessGuessGuessGuessGuessScore = 0\n    var gameGuessGuessGuessGuessGuess\
    \ = 0\n    var guessGuessGuessGuessGuessGuess = 0\n    var gameGuessGuessGuessGuessGuessScore\
    \ = 0\n    var guessGuessGuessGuessGuessGuessScore = 0\n    var gameGuessGuessGuessGuessGuessGuess\
    \ = 0\n    var guessGuessGuessGuessGuessGuessGuess = 0\n    var gameGuessGuessGuessGuessGuessGuessScore\
    \ = 0\n    var guessGuessGuessGuessGuessGuessGuessScore = 0\n    var gameGuessGuessGuessGuessGuessGuessGuess\
    \ = 0\n    var guessGuessGuessGuessGuessGuessGuessGuess = 0\n    var gameGuessGuessGuessGuessGuessGuessGuessScore\
    \ = 0\n    var guessGuessGuessGuessGuessGuessGuessGuessScore = 0\n    var gameGuessGuessGuessGuessGuessGuessGuessGuessGuess\
    \ = 0\n    var guessGuessGuessGuessGuessGuessGuessGuessGuessGuess = 0\n    var\
    \ gameGuessGuessGuessGuessGuessGuessGuessGuessGuessScore = 0\n    var guessGuessGuessGuessGuessGuessGuessGuessGuessScore\
    \ = 0\n    var gameGuessGuessGuessGuessGuessGuessGuessGuessGuessGuess = 0\n  \
    \  var guessGuessGuessGuessGuessGuessGuessGuessGuessGuessG\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4,\
    \ 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpoo365b26.swift:52:9: error: type annotation missing in pattern\n\
    \    var guessGuessGuessGuessGuessGuessGuessGuessGuessGuessG\n        ^\n"
  stdout: ''
  timestamp: 1659824943
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var i = 0\n    var j = 0\n    while i < game.count &&\
    \ j < guess.count {\n        if game[i] == guess[j] {\n            result.append(0)\n\
    \            i += 1\n            j += 1\n        } else if game[i] > guess[j]\
    \ {\n            result.append(abs(game[i] - guess[j]))\n            i += 1\n\
    \        } else {\n            result.append(abs(guess[j] - game[i]))\n      \
    \      j += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpnl9k3rrk/tmpnl9k3rrk.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e2e500c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e2e1f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e2e1f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e2e1f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnl9k3rrk                        0x00005590f87db6a4 <unavailable> + 5796

    5    libc.so.6                          0x00002b7e2e6ec460 __libc_start_main +
    245

    6    tmpnl9k3rrk                        0x00005590f87db219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659824943
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: game.count)\n    for i in 0..<game.count\
    \ {\n        if game[i] == guess[i] {\n            result[i] = 0\n        } else\
    \ {\n            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824943
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: guess.count)\n    for i in 0..<guess.count\
    \ {\n        result[i] = abs(game[i] - guess[i])\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824943
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: game.count)\n    for i in 0..<game.count\
    \ {\n        if game[i] == guess[i] {\n            result[i] = 0\n        } else\
    \ {\n            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824943
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: game.count)\n    for i in 0..<game.count\
    \ {\n        result[i] = abs(game[i] - guess[i])\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824943
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: game.count)\n    for i in 0..<game.count\
    \ {\n        result[i] = abs(game[i] - guess[i])\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824943
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: game.count)\n    var scores = [Int](repeating:\
    \ 0, count: game.count)\n    for i in 0..<game.count {\n        scores[i] = abs(game[i]\
    \ - guess[i])\n    }\n    for i in 0..<game.count {\n        if scores[i] == 0\
    \ {\n            result[i] = 0\n        } else {\n            result[i] = abs(scores[i]\
    \ - guess[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpm04kem43/tmpm04kem43.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbfc73ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbfc431b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbfc431988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbfc4307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm04kem43                        0x000055ba96206834 <unavailable> + 6196

    5    libc.so.6                          0x00002adbfc926460 __libc_start_main +
    245

    6    tmpm04kem43                        0x000055ba962063a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659824943
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: game.count)\n    for i in 0..<game.count\
    \ {\n        if game[i] == guess[i] {\n            result[i] = 0\n        } else\
    \ {\n            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824943
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var score = 0\n    var guess = 0\n    var i = 0\n    var\
    \ j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o\
    \ = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t =\
    \ 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n\
    \    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n \
    \   var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n  \
    \  var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n   \
    \ var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var\
    \ t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y\
    \ = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d =\
    \ 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n\
    \    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n \
    \   var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n  \
    \  var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n   \
    \ var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var\
    \ d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i\
    \ = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n =\
    \ 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n\
    \    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n \
    \   var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n  \
    \  var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n   \
    \ var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var\
    \ n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s\
    \ = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x =\
    \ 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n\
    \    var d = 0\n    var e = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpxhhnb_s2.swift:42:9: error: invalid redeclaration of 'i'\n    var\
    \ i = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:16:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:43:9: error: invalid\
    \ redeclaration of 'j'\n    var j = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:17:9:\
    \ note: 'j' previously declared here\n    var j = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:44:9:\
    \ error: invalid redeclaration of 'k'\n    var k = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:18:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:45:9:\
    \ error: invalid redeclaration of 'l'\n    var l = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:19:9:\
    \ note: 'l' previously declared here\n    var l = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:46:9:\
    \ error: invalid redeclaration of 'm'\n    var m = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:20:9:\
    \ note: 'm' previously declared here\n    var m = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:47:9:\
    \ error: invalid redeclaration of 'n'\n    var n = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:21:9:\
    \ note: 'n' previously declared here\n    var n = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:48:9:\
    \ error: invalid redeclaration of 'o'\n    var o = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:22:9:\
    \ note: 'o' previously declared here\n    var o = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:49:9:\
    \ error: invalid redeclaration of 'p'\n    var p = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:23:9:\
    \ note: 'p' previously declared here\n    var p = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:50:9:\
    \ error: invalid redeclaration of 'q'\n    var q = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:24:9:\
    \ note: 'q' previously declared here\n    var q = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:51:9:\
    \ error: invalid redeclaration of 'r'\n    var r = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:25:9:\
    \ note: 'r' previously declared here\n    var r = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:52:9:\
    \ error: invalid redeclaration of 's'\n    var s = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:26:9:\
    \ note: 's' previously declared here\n    var s = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:53:9:\
    \ error: invalid redeclaration of 't'\n    var t = 0\n        ^\n/tmp/tmpxhhn"
  stdout: ''
  timestamp: 1659824943
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: game.count)\n    var i = 0\n    while i\
    \ < game.count {\n        if game[i] == guess[i] {\n            result[i] = 0\n\
    \        } else {\n            result[i] = abs(game[i] - guess[i])\n        }\n\
    \        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) ==\
    \ [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess:\
    \ [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1,\
    \ 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824943
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var score = 0\n    var guess = 0\n    var i = 0\n    var\
    \ j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o\
    \ = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t =\
    \ 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n\
    \    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n \
    \   var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n  \
    \  var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n   \
    \ var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var\
    \ t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y\
    \ = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d =\
    \ 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n\
    \    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n \
    \   var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n  \
    \  var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n   \
    \ var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var\
    \ d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i\
    \ = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n =\
    \ 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n\
    \    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n \
    \   var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n  \
    \  var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n   \
    \ var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var\
    \ n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s\
    \ = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x =\
    \ 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n\
    \    var d = 0\n    var e = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpxhhnb_s2.swift:42:9: error: invalid redeclaration of 'i'\n    var\
    \ i = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:16:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:43:9: error: invalid\
    \ redeclaration of 'j'\n    var j = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:17:9:\
    \ note: 'j' previously declared here\n    var j = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:44:9:\
    \ error: invalid redeclaration of 'k'\n    var k = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:18:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:45:9:\
    \ error: invalid redeclaration of 'l'\n    var l = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:19:9:\
    \ note: 'l' previously declared here\n    var l = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:46:9:\
    \ error: invalid redeclaration of 'm'\n    var m = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:20:9:\
    \ note: 'm' previously declared here\n    var m = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:47:9:\
    \ error: invalid redeclaration of 'n'\n    var n = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:21:9:\
    \ note: 'n' previously declared here\n    var n = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:48:9:\
    \ error: invalid redeclaration of 'o'\n    var o = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:22:9:\
    \ note: 'o' previously declared here\n    var o = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:49:9:\
    \ error: invalid redeclaration of 'p'\n    var p = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:23:9:\
    \ note: 'p' previously declared here\n    var p = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:50:9:\
    \ error: invalid redeclaration of 'q'\n    var q = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:24:9:\
    \ note: 'q' previously declared here\n    var q = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:51:9:\
    \ error: invalid redeclaration of 'r'\n    var r = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:25:9:\
    \ note: 'r' previously declared here\n    var r = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:52:9:\
    \ error: invalid redeclaration of 's'\n    var s = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:26:9:\
    \ note: 's' previously declared here\n    var s = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:53:9:\
    \ error: invalid redeclaration of 't'\n    var t = 0\n        ^\n/tmp/tmpxhhn"
  stdout: ''
  timestamp: 1659824943
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: game.count)\n    var scores = [Int](repeating:\
    \ 0, count: game.count)\n    var guesses = [Int](repeating: 0, count: game.count)\n\
    \    \n    for i in 0..<game.count {\n        scores[i] = game[i]\n        guesses[i]\
    \ = guess[i]\n    }\n    \n    for i in 0..<game.count {\n        if guesses[i]\
    \ == scores[i] {\n            result[i] = 0\n        } else {\n            result[i]\
    \ = abs(guesses[i] - scores[i])\n        }\n    }\n    \n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824943
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var scores = [Int]()\n    var guesses = [Int]()\n    var\
    \ i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n\
    \ = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s =\
    \ 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n\
    \    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n \
    \   var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n  \
    \  var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n   \
    \ var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var\
    \ s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x\
    \ = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c =\
    \ 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n\
    \    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n \
    \   var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n  \
    \  var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n   \
    \ var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var\
    \ c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h\
    \ = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m =\
    \ 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n\
    \    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n \
    \   var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n  \
    \  var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n   \
    \ var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var\
    \ m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r\
    \ = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w =\
    \ 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n\
    \    var c = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp9xihw3q3.swift:42:9: error: invalid redeclaration of 'i'\n    var\
    \ i = 0\n        ^\n/tmp/tmp9xihw3q3.swift:16:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmp9xihw3q3.swift:43:9: error: invalid\
    \ redeclaration of 'j'\n    var j = 0\n        ^\n/tmp/tmp9xihw3q3.swift:17:9:\
    \ note: 'j' previously declared here\n    var j = 0\n        ^\n/tmp/tmp9xihw3q3.swift:44:9:\
    \ error: invalid redeclaration of 'k'\n    var k = 0\n        ^\n/tmp/tmp9xihw3q3.swift:18:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmp9xihw3q3.swift:45:9:\
    \ error: invalid redeclaration of 'l'\n    var l = 0\n        ^\n/tmp/tmp9xihw3q3.swift:19:9:\
    \ note: 'l' previously declared here\n    var l = 0\n        ^\n/tmp/tmp9xihw3q3.swift:46:9:\
    \ error: invalid redeclaration of 'm'\n    var m = 0\n        ^\n/tmp/tmp9xihw3q3.swift:20:9:\
    \ note: 'm' previously declared here\n    var m = 0\n        ^\n/tmp/tmp9xihw3q3.swift:47:9:\
    \ error: invalid redeclaration of 'n'\n    var n = 0\n        ^\n/tmp/tmp9xihw3q3.swift:21:9:\
    \ note: 'n' previously declared here\n    var n = 0\n        ^\n/tmp/tmp9xihw3q3.swift:48:9:\
    \ error: invalid redeclaration of 'o'\n    var o = 0\n        ^\n/tmp/tmp9xihw3q3.swift:22:9:\
    \ note: 'o' previously declared here\n    var o = 0\n        ^\n/tmp/tmp9xihw3q3.swift:49:9:\
    \ error: invalid redeclaration of 'p'\n    var p = 0\n        ^\n/tmp/tmp9xihw3q3.swift:23:9:\
    \ note: 'p' previously declared here\n    var p = 0\n        ^\n/tmp/tmp9xihw3q3.swift:50:9:\
    \ error: invalid redeclaration of 'q'\n    var q = 0\n        ^\n/tmp/tmp9xihw3q3.swift:24:9:\
    \ note: 'q' previously declared here\n    var q = 0\n        ^\n/tmp/tmp9xihw3q3.swift:51:9:\
    \ error: invalid redeclaration of 'r'\n    var r = 0\n        ^\n/tmp/tmp9xihw3q3.swift:25:9:\
    \ note: 'r' previously declared here\n    var r = 0\n        ^\n/tmp/tmp9xihw3q3.swift:52:9:\
    \ error: invalid redeclaration of 's'\n    var s = 0\n        ^\n/tmp/tmp9xihw3q3.swift:26:9:\
    \ note: 's' previously declared here\n    var s = 0\n        ^\n/tmp/tmp9xihw3q3.swift:53:9:\
    \ error: invalid redeclaration of 't'\n    var t = 0\n        ^\n/tmp/tmp9xih"
  stdout: ''
  timestamp: 1659824943
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](count: guess.count, repeatedValue: 0)\n    for i in 0..<guess.count\
    \ {\n        if game[i] == guess[i] {\n            result[i] = 0\n        } else\
    \ {\n            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpb8h9hx4t.swift:13:18: error: no exact matches in call to initializer\
    \ \n    var result = [Int](count: guess.count, repeatedValue: 0)\n           \
    \      ^\n/tmp/tmpb8h9hx4t.swift:13:18: note: candidate has partially matching\
    \ parameter list (repeating: Int, count: Int)\n    var result = [Int](count: guess.count,\
    \ repeatedValue: 0)\n                 ^\n/tmp/tmpb8h9hx4t.swift:13:18: note: candidate\
    \ has partially matching parameter list (repeating: Int, count: Int)\n    var\
    \ result = [Int](count: guess.count, repeatedValue: 0)\n                 ^\n"
  stdout: ''
  timestamp: 1659824943
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](count: guess.length, repeatedValue: 0)\n    for i in 0..<guess.length\
    \ {\n        result[i] = abs(guess[i] - game[i])\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmppnyoyh0k.swift:13:60: error: extra argument 'repeatedValue' in\
    \ call\n    var result = [Int](count: guess.length, repeatedValue: 0)\n      \
    \                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~\n/tmp/tmppnyoyh0k.swift:13:37:\
    \ error: value of type '[Int]' has no member 'length'\n    var result = [Int](count:\
    \ guess.length, repeatedValue: 0)\n                              ~~~~~ ^~~~~~\n\
    /tmp/tmppnyoyh0k.swift:14:24: error: value of type '[Int]' has no member 'length'\n\
    \    for i in 0..<guess.length {\n                 ~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824943
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: game.count)\n    var scores = [Int](repeating:\
    \ 0, count: game.count)\n    var guesses = [Int](repeating: 0, count: game.count)\n\
    \    var i = 0\n    for _ in 0..<game.count {\n        scores[i] = game[i]\n \
    \       guesses[i] = guess[i]\n        i += 1\n    }\n    for _ in 0..<game.count\
    \ {\n        if guesses[i] != scores[i] {\n            result[i] = abs(guesses[i]\
    \ - scores[i])\n        } else {\n            result[i] = 0\n        }\n     \
    \   i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0,\
    \ 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0,\
    \ 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess: [-1, -2,\
    \ -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1, 2, 3, 4])\
    \ == [2, 0, 0, 1])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ccf534c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ccf22b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2ccf22b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b2ccf22b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2ccf22abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b2ccf02ae83 <unavailable> + 188035

    6    tmps5w0ot3x                        0x0000564e9a191141 <unavailable> + 8513

    7    tmps5w0ot3x                        0x0000564e9a190733 <unavailable> + 5939

    8    libc.so.6                          0x00002b2ccf720460 __libc_start_main +
    245

    9    tmps5w0ot3x                        0x0000564e9a1903a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659824943
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: game.count)\n    var index = 0\n    while\
    \ index < game.count {\n        if game[index] == guess[index] {\n           \
    \ result[index] = 0\n        } else {\n            result[index] = abs(game[index]\
    \ - guess[index])\n        }\n        index += 1\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824943
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var scores = [Int]()\n    var guesses = [Int]()\n    \n\
    \    for i in 0..<game.count {\n        scores[i] = game[i]\n        guesses[i]\
    \ = guess[i]\n    }\n    \n    for i in 0..<game.count {\n        if guesses[i]\
    \ == scores[i] {\n            result.append(0)\n        } else {\n           \
    \ result.append(abs(guesses[i] - scores[i]))\n        }\n    }\n    \n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002acffad42c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acffaa39561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002acffaa39286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002acffaa3913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002acffaa38bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002acffa8387ec <unavailable> + 186348

    6    tmpc5n_wh2s                        0x00005586393ddfc0 <unavailable> + 8128

    7    tmpc5n_wh2s                        0x00005586393dd783 <unavailable> + 6019

    8    libc.so.6                          0x00002acffaf2e460 __libc_start_main +
    245

    9    tmpc5n_wh2s                        0x00005586393dd3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824943
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var scores = [Int]()\n    var guesses = [Int]()\n    var\
    \ i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n\
    \ = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s =\
    \ 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n\
    \    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n \
    \   var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n  \
    \  var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n   \
    \ var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var\
    \ s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x\
    \ = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c =\
    \ 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n\
    \    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n \
    \   var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n  \
    \  var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n   \
    \ var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var\
    \ c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h\
    \ = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m =\
    \ 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n\
    \    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n \
    \   var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n  \
    \  var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n   \
    \ var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var\
    \ m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r\
    \ = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w =\
    \ 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n\
    \    var c = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp9xihw3q3.swift:42:9: error: invalid redeclaration of 'i'\n    var\
    \ i = 0\n        ^\n/tmp/tmp9xihw3q3.swift:16:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmp9xihw3q3.swift:43:9: error: invalid\
    \ redeclaration of 'j'\n    var j = 0\n        ^\n/tmp/tmp9xihw3q3.swift:17:9:\
    \ note: 'j' previously declared here\n    var j = 0\n        ^\n/tmp/tmp9xihw3q3.swift:44:9:\
    \ error: invalid redeclaration of 'k'\n    var k = 0\n        ^\n/tmp/tmp9xihw3q3.swift:18:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmp9xihw3q3.swift:45:9:\
    \ error: invalid redeclaration of 'l'\n    var l = 0\n        ^\n/tmp/tmp9xihw3q3.swift:19:9:\
    \ note: 'l' previously declared here\n    var l = 0\n        ^\n/tmp/tmp9xihw3q3.swift:46:9:\
    \ error: invalid redeclaration of 'm'\n    var m = 0\n        ^\n/tmp/tmp9xihw3q3.swift:20:9:\
    \ note: 'm' previously declared here\n    var m = 0\n        ^\n/tmp/tmp9xihw3q3.swift:47:9:\
    \ error: invalid redeclaration of 'n'\n    var n = 0\n        ^\n/tmp/tmp9xihw3q3.swift:21:9:\
    \ note: 'n' previously declared here\n    var n = 0\n        ^\n/tmp/tmp9xihw3q3.swift:48:9:\
    \ error: invalid redeclaration of 'o'\n    var o = 0\n        ^\n/tmp/tmp9xihw3q3.swift:22:9:\
    \ note: 'o' previously declared here\n    var o = 0\n        ^\n/tmp/tmp9xihw3q3.swift:49:9:\
    \ error: invalid redeclaration of 'p'\n    var p = 0\n        ^\n/tmp/tmp9xihw3q3.swift:23:9:\
    \ note: 'p' previously declared here\n    var p = 0\n        ^\n/tmp/tmp9xihw3q3.swift:50:9:\
    \ error: invalid redeclaration of 'q'\n    var q = 0\n        ^\n/tmp/tmp9xihw3q3.swift:24:9:\
    \ note: 'q' previously declared here\n    var q = 0\n        ^\n/tmp/tmp9xihw3q3.swift:51:9:\
    \ error: invalid redeclaration of 'r'\n    var r = 0\n        ^\n/tmp/tmp9xihw3q3.swift:25:9:\
    \ note: 'r' previously declared here\n    var r = 0\n        ^\n/tmp/tmp9xihw3q3.swift:52:9:\
    \ error: invalid redeclaration of 's'\n    var s = 0\n        ^\n/tmp/tmp9xihw3q3.swift:26:9:\
    \ note: 's' previously declared here\n    var s = 0\n        ^\n/tmp/tmp9xihw3q3.swift:53:9:\
    \ error: invalid redeclaration of 't'\n    var t = 0\n        ^\n/tmp/tmp9xih"
  stdout: ''
  timestamp: 1659824943
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var i = 0\n    var j = 0\n    while i < game.count &&\
    \ j < guess.count {\n        if game[i] == guess[j] {\n            result.append(0)\n\
    \            i += 1\n            j += 1\n        } else if game[i] > guess[j]\
    \ {\n            result.append(abs(game[i] - guess[j]))\n            i += 1\n\
    \        } else {\n            result.append(abs(guess[j] - game[i]))\n      \
    \      j += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpnl9k3rrk/tmpnl9k3rrk.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e2e500c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e2e1f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e2e1f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e2e1f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnl9k3rrk                        0x00005590f87db6a4 <unavailable> + 5796

    5    libc.so.6                          0x00002b7e2e6ec460 __libc_start_main +
    245

    6    tmpnl9k3rrk                        0x00005590f87db219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659824943
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var i = 0\n    var j = 0\n    while i < game.count &&\
    \ j < guess.count {\n        if game[i] == guess[j] {\n            result.append(0)\n\
    \            i += 1\n            j += 1\n        } else if game[i] > guess[j]\
    \ {\n            result.append(abs(game[i] - guess[j]))\n            i += 1\n\
    \        } else {\n            result.append(abs(guess[j] - game[i]))\n      \
    \      j += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpnl9k3rrk/tmpnl9k3rrk.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e2e500c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e2e1f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e2e1f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e2e1f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnl9k3rrk                        0x00005590f87db6a4 <unavailable> + 5796

    5    libc.so.6                          0x00002b7e2e6ec460 __libc_start_main +
    245

    6    tmpnl9k3rrk                        0x00005590f87db219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659824943
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: game.count)\n    for i in 0..<game.count\
    \ {\n        result[i] = abs(game[i] - guess[i])\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824943
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var scores = [Int]()\n    var guesses = [Int]()\n    var\
    \ score = 0\n    var guess = 0\n    var i = 0\n    var j = 0\n    for _ in 0..<game.count\
    \ {\n        guesses.append(guess[i])\n        scores.append(game[i])\n      \
    \  i += 1\n    }\n    for _ in 0..<guess.count {\n        guesses.append(guess[j])\n\
    \        scores.append(0)\n        j += 1\n    }\n    for _ in 0..<guess.count\
    \ {\n        if guesses.contains(guess[j]) {\n            score += abs(guess[j]\
    \ - scores[j])\n        }\n        guesses.remove(guess[j])\n        scores.remove(scores[j])\n\
    \        j += 1\n    }\n    for _ in 0..<guess.count {\n        if guesses.contains(guess[i])\
    \ {\n            score += abs(guess[i] - scores[i])\n        }\n        guesses.remove(guess[i])\n\
    \        scores.remove(scores[i])\n        i += 1\n    }\n    for _ in 0..<guess.count\
    \ {\n        if guesses.contains(guess[i]) {\n            score += abs(guess[i]\
    \ - scores[i])\n        }\n        guesses.remove(guess[i])\n        scores.remove(scores[i])\n\
    \        i += 1\n    }\n    for _ in 0..<guess.count {\n        if guesses.contains(guess[j])\
    \ {\n            score += abs(guess[j] - scores[j])\n        }\n        guesses.remove(guess[j])\n\
    \        scores.remove(scores[j])\n        j += 1\n    }\n    for _ in 0..<guess.count\
    \ {\n        if guesses.contains(guess[j]) {\n            score += abs(guess[j]\
    \ - scores[j])\n        }\n        guesses.remove(guess[j])\n        scores.remove(scores[j])\n\
    \        j += 1\n    }\n    for _ in 0..<guess.count {\n        if guesses.contains(guess[j])\
    \ {\n            score += abs(guess[j] - scores[j])\n        }\n        guesses.remove(guess[j])\n\
    \        scores.remove(scores[j])\n        j += 1\n    }\n    for _ in 0..<guess.count\
    \ {\n        if guesses.contains(guess[j]) {\n            score += abs(guess[j]\
    \ - scores[j])\n        }\n        guesses.remove(guess[j])\n        scores.remove(scores[j])\n\
    \        j += 1\n    }\n    for _ in 0..<guess.count {\n        if guesses.contains(guess[j])\
    \ {\n            score += abs(guess[j] - scores[j])\n        }\n        guesses.remove(guess[j])\n\
    \        scores.remove(scores[j])\n        j += 1\n    }\n    for _ in 0..<guess.count\
    \ {\n        if guesses.contains(guess[j]) {\n            score += abs(guess[j\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmprmdgf_q3.swift:97:1: error: expected ']' in expression list\n}\n\
    ^\n/tmp/tmprmdgf_q3.swift:96:31: note: to match this opening '['\n           \
    \ score += abs(guess[j\n                              ^\n/tmp/tmprmdgf_q3.swift:115:74:\
    \ error: expected '}' at end of brace statement\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])\n                               \
    \                                          ^\n/tmp/tmprmdgf_q3.swift:94:30: note:\
    \ to match this opening '{'\n    for _ in 0..<guess.count {\n                \
    \             ^\n/tmp/tmprmdgf_q3.swift:115:74: error: expected '}' at end of\
    \ brace statement\nassert(compare(game: [1, 2, 3, 5], guess: [-1, 2, 3, 4]) ==\
    \ [2, 0, 0, 1])\n                                                            \
    \             ^\n/tmp/tmprmdgf_q3.swift:12:50: note: to match this opening '{'\n\
    func compare(game: [Int], guess: [Int]) -> [Int] {\n                         \
    \                        ^\n/tmp/tmprmdgf_q3.swift:21:29: error: value of type\
    \ 'Int' has no subscripts\n        guesses.append(guess[i])\n                \
    \       ~~~~~^\n/tmp/tmprmdgf_q3.swift:25:24: error: value of type 'Int' has no\
    \ member 'count'\n    for _ in 0..<guess.count {\n                 ~~~~~ ^~~~~\n\
    /tmp/tmprmdgf_q3.swift:30:24: error: value of type 'Int' has no member 'count'\n\
    \    for _ in 0..<guess.count {\n                 ~~~~~ ^~~~~\n/tmp/tmprmdgf_q3.swift:38:24:\
    \ error: value of type 'Int' has no member 'count'\n    for _ in 0..<guess.count\
    \ {\n                 ~~~~~ ^~~~~\n/tmp/tmprmdgf_q3.swift:46:24: error: value\
    \ of type 'Int' has no member 'count'\n    for _ in 0..<guess.count {\n      \
    \           ~~~~~ ^~~~~\n/tmp/tmprmdgf_q3.swift:54:24: error: value of type 'Int'\
    \ has no member 'count'\n    for _ in 0..<guess.count {\n                 ~~~~~\
    \ ^~~~~\n/tmp/tmprmdgf_q3.swift:62:24: error: value of type 'Int' has no member\
    \ 'count'\n    for _ in 0..<guess.count {\n                 ~~~~~ ^~~~~\n/tmp/tmprmdgf_q3.swift:70:24:\
    \ error: value of type 'Int' has no member 'count'\n    for _ in 0..<guess.count\
    \ {\n                 ~~~~~ ^~~~"
  stdout: ''
  timestamp: 1659824943
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var i = 0\n    var j = 0\n    var k = 0\n    while i <\
    \ game.count && j < guess.count {\n        if game[i] == guess[j] {\n        \
    \    result[k] = 0\n            i += 1\n            j += 1\n            k += 1\n\
    \        } else if game[i] > guess[j] {\n            result[k] = abs(game[i] -\
    \ guess[j])\n            i += 1\n        } else {\n            result[k] = abs(guess[j]\
    \ - game[i])\n            j += 1\n        }\n    }\n    while i < game.count {\n\
    \        result[k] = abs(game[i] - guess[j])\n        i += 1\n        j += 1\n\
    \        k += 1\n    }\n    while j < guess.count {\n        result[k] = abs(guess[j]\
    \ - game[i])\n        i += 1\n        j += 1\n        k += 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c05eafc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c05ba6561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6c05ba6286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6c05ba613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6c05ba5bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b6c059a57ec <unavailable> + 186348

    6    tmp9dggyi1r                        0x00005628edd61d70 <unavailable> + 7536

    7    tmp9dggyi1r                        0x00005628edd61593 <unavailable> + 5523

    8    libc.so.6                          0x00002b6c0609b460 __libc_start_main +
    245

    9    tmp9dggyi1r                        0x00005628edd61209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824943
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: game.count)\n    for i in 0..<game.count\
    \ {\n        if game[i] == guess[i] {\n            result[i] = 0\n        } else\
    \ {\n            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824943
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: game.count)\n    for i in 0..<game.count\
    \ {\n        if game[i] == guess[i] {\n            result[i] = 0\n        } else\
    \ {\n            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824943
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: game.count)\n    for i in 0..<game.count\
    \ {\n        result[i] = abs(game[i] - guess[i])\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824943
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var scores = [Int]()\n    var guesses = [Int]()\n    var\
    \ score = 0\n    var guess = 0\n    var index = 0\n    var gameIndex = 0\n   \
    \ var guessIndex = 0\n    var gameScore = 0\n    var guessScore = 0\n    var gameGuess\
    \ = 0\n    var guessGuess = 0\n    var gameScoreDiff = 0\n    var guessScoreDiff\
    \ = 0\n    var gameGuessDiff = 0\n    var gameScoreDiffIndex = 0\n    var guessScoreDiffIndex\
    \ = 0\n    var gameGuessDiffIndex = 0\n    var gameScoreDiffIndex2 = 0\n    var\
    \ guessScoreDiffIndex2 = 0\n    var gameGuessDiffIndex2 = 0\n    \n    for index\
    \ in 0..<game.count {\n        gameScore = game[index]\n        guess = guess[index]\n\
    \        \n        if gameScore > guess {\n            gameScoreDiff = abs(gameScore\
    \ - guess)\n            gameScoreDiffIndex = index\n        }\n        \n    \
    \    if guess > gameScore {\n            guessScoreDiff = abs(guess - gameScore)\n\
    \            guessScoreDiffIndex = index\n        }\n        \n        if gameScore\
    \ == guess {\n            result.append(0)\n            scores.append(0)\n   \
    \         guesses.append(0)\n            score = 0\n            guess = 0\n  \
    \          gameScore = 0\n            gameGuess = 0\n            gameScoreDiff\
    \ = 0\n            gameScoreDiffIndex = 0\n            gameScoreDiffIndex2 = 0\n\
    \            gameScoreDiffIndex3 = 0\n            guessScoreDiff = 0\n       \
    \     guessScoreDiffIndex = 0\n            guessScoreDiffIndex2 = 0\n        \
    \    guessScoreDiffIndex3 = 0\n            guessScoreDiffIndex4 = 0\n        \
    \    guessScoreDiffIndex5 = 0\n            guessScoreDiffIndex6 = 0\n        \
    \    guessScoreDiffIndex7 = 0\n            guessScoreDiffIndex8 = 0\n        \
    \    guessScoreDiffIndex9 = 0\n            guessScoreDiffIndex10 = 0\n       \
    \     guessScoreDiffIndex11 = 0\n            guessScoreDiffIndex12 = 0\n     \
    \       guessScoreDiffIndex13 = 0\n            guessScoreDiffIndex14 = 0\n   \
    \         guessScoreDiffIndex15 = 0\n            guessScoreDiffIndex16 = 0\n \
    \           guessScoreDiffIndex17 = 0\n            guessScoreDiffIndex18 = 0\n\
    \            guessScoreDiffIndex19 = 0\n            guessScoreDiffIndex20 = 0\n\
    \            guessScoreDiffIndex21 = 0\n            guessScoreDiffIndex22 = 0\n\
    \            guessScoreDiffIndex23 = 0\n            guessScoreDiffIndex24 = 0\n\
    \            guessScoreDiffIndex25 = 0\n            guessScoreDiffIndex26 = 0\n\
    \            guessScoreDiffIndex27 = 0\n            guessScore\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4,\
    \ 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpbr72dcxa.swift:108:74: error: expected '}' at end of brace statement\n\
    assert(compare(game: [1, 2, 3, 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])\n  \
    \                                                                       ^\n/tmp/tmpbr72dcxa.swift:35:33:\
    \ note: to match this opening '{'\n    for index in 0..<game.count {\n       \
    \                         ^\n/tmp/tmpbr72dcxa.swift:108:74: error: expected '}'\
    \ at end of brace statement\nassert(compare(game: [1, 2, 3, 5], guess: [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1])\n                                                  \
    \                       ^\n/tmp/tmpbr72dcxa.swift:12:50: note: to match this opening\
    \ '{'\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n                  \
    \                               ^\n/tmp/tmpbr72dcxa.swift:37:22: error: value\
    \ of type 'Int' has no subscripts\n        guess = guess[index]\n            \
    \    ~~~~~^\n/tmp/tmpbr72dcxa.swift:60:13: error: cannot find 'gameScoreDiffIndex3'\
    \ in scope\n            gameScoreDiffIndex3 = 0\n            ^~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpbr72dcxa.swift:64:13: error: cannot find 'guessScoreDiffIndex3' in scope\n\
    \            guessScoreDiffIndex3 = 0\n            ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpbr72dcxa.swift:65:13:\
    \ error: cannot find 'guessScoreDiffIndex4' in scope\n            guessScoreDiffIndex4\
    \ = 0\n            ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpbr72dcxa.swift:66:13: error:\
    \ cannot find 'guessScoreDiffIndex5' in scope\n            guessScoreDiffIndex5\
    \ = 0\n            ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpbr72dcxa.swift:67:13: error:\
    \ cannot find 'guessScoreDiffIndex6' in scope\n            guessScoreDiffIndex6\
    \ = 0\n            ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpbr72dcxa.swift:68:13: error:\
    \ cannot find 'guessScoreDiffIndex7' in scope\n            guessScoreDiffIndex7\
    \ = 0\n            ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpbr72dcxa.swift:69:13: error:\
    \ cannot find 'guessScoreDiffIndex8' in scope\n            guessScoreDiffIndex8\
    \ = 0\n            ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpbr72dcxa.swift:70:13: error:\
    \ cannot find 'guessScoreDiffIndex9' in scope\n            guessScoreDiffIndex9\
    \ = 0\n   "
  stdout: ''
  timestamp: 1659824943
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](count: guess.count, repeatedValue: 0)\n    for index in 0..<guess.count\
    \ {\n        if game[index] == guess[index] {\n            result[index] = 0\n\
    \        } else {\n            result[index] = abs(game[index] - guess[index])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0,\
    \ 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0,\
    \ 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess: [-1, -2,\
    \ -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1, 2, 3, 4])\
    \ == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpbzzsdxwd.swift:13:18: error: no exact matches in call to initializer\
    \ \n    var result = [Int](count: guess.count, repeatedValue: 0)\n           \
    \      ^\n/tmp/tmpbzzsdxwd.swift:13:18: note: candidate has partially matching\
    \ parameter list (repeating: Int, count: Int)\n    var result = [Int](count: guess.count,\
    \ repeatedValue: 0)\n                 ^\n/tmp/tmpbzzsdxwd.swift:13:18: note: candidate\
    \ has partially matching parameter list (repeating: Int, count: Int)\n    var\
    \ result = [Int](count: guess.count, repeatedValue: 0)\n                 ^\n"
  stdout: ''
  timestamp: 1659824943
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: game.count)\n    var scores = [Int](repeating:\
    \ 0, count: game.count)\n    for i in 0..<game.count {\n        scores[i] = abs(game[i]\
    \ - guess[i])\n    }\n    for i in 0..<game.count {\n        if scores[i] == 0\
    \ {\n            result[i] = 0\n        } else {\n            result[i] = abs(scores[i]\
    \ - scores[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpxi39qa55/tmpxi39qa55.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ee88a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ee8597b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ee8597988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ee85967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxi39qa55                        0x000055b713618834 <unavailable> + 6196

    5    libc.so.6                          0x00002b4ee8a8c460 __libc_start_main +
    245

    6    tmpxi39qa55                        0x000055b7136183a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659824943
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var index = 0\n    var score = 0\n    while index < game.count\
    \ {\n        if game[index] == guess[index] {\n            score += game[index]\n\
    \            result.append(score)\n            index += 1\n        } else {\n\
    \            score += abs(game[index] - guess[index])\n            result.append(score)\n\
    \            index += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4,\
    \ 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpv2y43vv9/tmpv2y43vv9.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0182629c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0182320b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0182320988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b018231f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv2y43vv9                        0x00005650165fc6a4 <unavailable> + 5796

    5    libc.so.6                          0x00002b0182815460 __libc_start_main +
    245

    6    tmpv2y43vv9                        0x00005650165fc219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659824943
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var scores = [Int]()\n    var guesses = [Int]()\n    \n\
    \    for i in 0..<game.count {\n        guesses.append(guess[i])\n        scores.append(game[i])\n\
    \    }\n    \n    for i in 0..<guesses.count {\n        var difference = guesses[i]\
    \ - scores[i]\n        if difference < 0 {\n            difference = -difference\n\
    \        }\n        result.append(difference)\n    }\n    \n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824943
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var scores = [Int]()\n    var guesses = [Int]()\n    var\
    \ score = 0\n    var guess = 0\n    var i = 0\n    var j = 0\n    var k = 0\n\
    \    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n \
    \   var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n  \
    \  var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n   \
    \ var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var\
    \ f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k\
    \ = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p =\
    \ 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n\
    \    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n \
    \   var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n  \
    \  var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n   \
    \ var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var\
    \ p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u\
    \ = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z =\
    \ 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n\
    \    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n \
    \   var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n  \
    \  var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n   \
    \ var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var\
    \ z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e\
    \ = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j =\
    \ 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n\
    \    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n \
    \   var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n  \
    \  var z = 0\n    var a = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp94dxol2c.swift:44:9: error: invalid redeclaration of 'i'\n    var\
    \ i = 0\n        ^\n/tmp/tmp94dxol2c.swift:18:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmp94dxol2c.swift:45:9: error: invalid\
    \ redeclaration of 'j'\n    var j = 0\n        ^\n/tmp/tmp94dxol2c.swift:19:9:\
    \ note: 'j' previously declared here\n    var j = 0\n        ^\n/tmp/tmp94dxol2c.swift:46:9:\
    \ error: invalid redeclaration of 'k'\n    var k = 0\n        ^\n/tmp/tmp94dxol2c.swift:20:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmp94dxol2c.swift:47:9:\
    \ error: invalid redeclaration of 'l'\n    var l = 0\n        ^\n/tmp/tmp94dxol2c.swift:21:9:\
    \ note: 'l' previously declared here\n    var l = 0\n        ^\n/tmp/tmp94dxol2c.swift:48:9:\
    \ error: invalid redeclaration of 'm'\n    var m = 0\n        ^\n/tmp/tmp94dxol2c.swift:22:9:\
    \ note: 'm' previously declared here\n    var m = 0\n        ^\n/tmp/tmp94dxol2c.swift:49:9:\
    \ error: invalid redeclaration of 'n'\n    var n = 0\n        ^\n/tmp/tmp94dxol2c.swift:23:9:\
    \ note: 'n' previously declared here\n    var n = 0\n        ^\n/tmp/tmp94dxol2c.swift:50:9:\
    \ error: invalid redeclaration of 'o'\n    var o = 0\n        ^\n/tmp/tmp94dxol2c.swift:24:9:\
    \ note: 'o' previously declared here\n    var o = 0\n        ^\n/tmp/tmp94dxol2c.swift:51:9:\
    \ error: invalid redeclaration of 'p'\n    var p = 0\n        ^\n/tmp/tmp94dxol2c.swift:25:9:\
    \ note: 'p' previously declared here\n    var p = 0\n        ^\n/tmp/tmp94dxol2c.swift:52:9:\
    \ error: invalid redeclaration of 'q'\n    var q = 0\n        ^\n/tmp/tmp94dxol2c.swift:26:9:\
    \ note: 'q' previously declared here\n    var q = 0\n        ^\n/tmp/tmp94dxol2c.swift:53:9:\
    \ error: invalid redeclaration of 'r'\n    var r = 0\n        ^\n/tmp/tmp94dxol2c.swift:27:9:\
    \ note: 'r' previously declared here\n    var r = 0\n        ^\n/tmp/tmp94dxol2c.swift:54:9:\
    \ error: invalid redeclaration of 's'\n    var s = 0\n        ^\n/tmp/tmp94dxol2c.swift:28:9:\
    \ note: 's' previously declared here\n    var s = 0\n        ^\n/tmp/tmp94dxol2c.swift:55:9:\
    \ error: invalid redeclaration of 't'\n    var t = 0\n        ^\n/tmp/tmp94dx"
  stdout: ''
  timestamp: 1659824943
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: game.count)\n    for i in 0..<game.count\
    \ {\n        result[i] = abs(game[i] - guess[i])\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824943
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var scores = [Int]()\n    var guesses = [Int]()\n    var\
    \ score = 0\n    var guess = 0\n    var index = 0\n    \n    for _ in 0..<guess.count\
    \ {\n        guesses.append(guess[index])\n    }\n    \n    for _ in 0..<game.count\
    \ {\n        scores.append(score[index])\n    }\n    \n    for _ in 0..<guess.count\
    \ {\n        guess = guesses[index]\n        \n        if guess == game[index]\
    \ {\n            result.append(0)\n        } else {\n            result.append(abs(guess\
    \ - game[index]))\n        }\n        \n        index += 1\n    }\n    \n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmppkvymc8t.swift:20:24: error: value of type 'Int' has no member\
    \ 'count'\n    for _ in 0..<guess.count {\n                 ~~~~~ ^~~~~\n/tmp/tmppkvymc8t.swift:25:28:\
    \ error: value of type 'Int' has no subscripts\n        scores.append(score[index])\n\
    \                      ~~~~~^\n/tmp/tmppkvymc8t.swift:28:24: error: value of type\
    \ 'Int' has no member 'count'\n    for _ in 0..<guess.count {\n              \
    \   ~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824943
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var i = 0\n    var j = 0\n    while i < game.count &&\
    \ j < guess.count {\n        if game[i] == guess[j] {\n            result.append(0)\n\
    \            i += 1\n            j += 1\n        } else if game[i] > guess[j]\
    \ {\n            result.append(game[i] - guess[j])\n            i += 1\n     \
    \   } else {\n            result.append(abs(game[i] - guess[j]))\n           \
    \ j += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) ==\
    \ [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess:\
    \ [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1,\
    \ 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpnbcnvliy/tmpnbcnvliy.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b963443ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9634131b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9634131988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b96341307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnbcnvliy                        0x00005580761786a4 <unavailable> + 5796

    5    libc.so.6                          0x00002b9634626460 __libc_start_main +
    245

    6    tmpnbcnvliy                        0x0000558076178219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659824943
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    \n    for i in 0..<guess.count {\n        let difference\
    \ = abs(game[i] - guess[i])\n        result.append(difference)\n    }\n    \n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824943
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var scores = [Int]()\n    var guesses = [Int]()\n    var\
    \ score = 0\n    var guess = 0\n    var i = 0\n    var j = 0\n    var k = 0\n\
    \    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n \
    \   var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n  \
    \  var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n   \
    \ var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var\
    \ f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k\
    \ = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p =\
    \ 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n\
    \    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n \
    \   var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n  \
    \  var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n   \
    \ var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var\
    \ p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u\
    \ = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z =\
    \ 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n\
    \    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n \
    \   var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n  \
    \  var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n   \
    \ var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var\
    \ z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e\
    \ = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j =\
    \ 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n\
    \    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n \
    \   var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n  \
    \  var z = 0\n    var a = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp94dxol2c.swift:44:9: error: invalid redeclaration of 'i'\n    var\
    \ i = 0\n        ^\n/tmp/tmp94dxol2c.swift:18:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmp94dxol2c.swift:45:9: error: invalid\
    \ redeclaration of 'j'\n    var j = 0\n        ^\n/tmp/tmp94dxol2c.swift:19:9:\
    \ note: 'j' previously declared here\n    var j = 0\n        ^\n/tmp/tmp94dxol2c.swift:46:9:\
    \ error: invalid redeclaration of 'k'\n    var k = 0\n        ^\n/tmp/tmp94dxol2c.swift:20:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmp94dxol2c.swift:47:9:\
    \ error: invalid redeclaration of 'l'\n    var l = 0\n        ^\n/tmp/tmp94dxol2c.swift:21:9:\
    \ note: 'l' previously declared here\n    var l = 0\n        ^\n/tmp/tmp94dxol2c.swift:48:9:\
    \ error: invalid redeclaration of 'm'\n    var m = 0\n        ^\n/tmp/tmp94dxol2c.swift:22:9:\
    \ note: 'm' previously declared here\n    var m = 0\n        ^\n/tmp/tmp94dxol2c.swift:49:9:\
    \ error: invalid redeclaration of 'n'\n    var n = 0\n        ^\n/tmp/tmp94dxol2c.swift:23:9:\
    \ note: 'n' previously declared here\n    var n = 0\n        ^\n/tmp/tmp94dxol2c.swift:50:9:\
    \ error: invalid redeclaration of 'o'\n    var o = 0\n        ^\n/tmp/tmp94dxol2c.swift:24:9:\
    \ note: 'o' previously declared here\n    var o = 0\n        ^\n/tmp/tmp94dxol2c.swift:51:9:\
    \ error: invalid redeclaration of 'p'\n    var p = 0\n        ^\n/tmp/tmp94dxol2c.swift:25:9:\
    \ note: 'p' previously declared here\n    var p = 0\n        ^\n/tmp/tmp94dxol2c.swift:52:9:\
    \ error: invalid redeclaration of 'q'\n    var q = 0\n        ^\n/tmp/tmp94dxol2c.swift:26:9:\
    \ note: 'q' previously declared here\n    var q = 0\n        ^\n/tmp/tmp94dxol2c.swift:53:9:\
    \ error: invalid redeclaration of 'r'\n    var r = 0\n        ^\n/tmp/tmp94dxol2c.swift:27:9:\
    \ note: 'r' previously declared here\n    var r = 0\n        ^\n/tmp/tmp94dxol2c.swift:54:9:\
    \ error: invalid redeclaration of 's'\n    var s = 0\n        ^\n/tmp/tmp94dxol2c.swift:28:9:\
    \ note: 's' previously declared here\n    var s = 0\n        ^\n/tmp/tmp94dxol2c.swift:55:9:\
    \ error: invalid redeclaration of 't'\n    var t = 0\n        ^\n/tmp/tmp94dx"
  stdout: ''
  timestamp: 1659824943
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](count: guess.length, repeatedValue: 0)\n    for i in 0..<guess.length\
    \ {\n        result[i] = abs(game[i] - guess[i])\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp_juo4l97.swift:13:60: error: extra argument 'repeatedValue' in\
    \ call\n    var result = [Int](count: guess.length, repeatedValue: 0)\n      \
    \                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~\n/tmp/tmp_juo4l97.swift:13:37:\
    \ error: value of type '[Int]' has no member 'length'\n    var result = [Int](count:\
    \ guess.length, repeatedValue: 0)\n                              ~~~~~ ^~~~~~\n\
    /tmp/tmp_juo4l97.swift:14:24: error: value of type '[Int]' has no member 'length'\n\
    \    for i in 0..<guess.length {\n                 ~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824943
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var score = 0\n    var guess = 0\n    var game = 0\n \
    \   var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n  \
    \  var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n   \
    \ var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var\
    \ x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c\
    \ = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h =\
    \ 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n\
    \    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n \
    \   var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n  \
    \  var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n   \
    \ var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var\
    \ h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m\
    \ = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r =\
    \ 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n\
    \    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n \
    \   var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n  \
    \  var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n   \
    \ var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var\
    \ r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w\
    \ = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b =\
    \ 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n\
    \    var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n \
    \   var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n  \
    \  var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n   \
    \ var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var\
    \ b = 0\n    var c = 0\n    var d = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0,\
    \ 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0,\
    \ 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess: [-1, -2,\
    \ -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1, 2, 3, 4])\
    \ == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp49u4rb6c.swift:43:9: error: invalid redeclaration of 'i'\n    var\
    \ i = 0\n        ^\n/tmp/tmp49u4rb6c.swift:17:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmp49u4rb6c.swift:44:9: error: invalid\
    \ redeclaration of 'j'\n    var j = 0\n        ^\n/tmp/tmp49u4rb6c.swift:18:9:\
    \ note: 'j' previously declared here\n    var j = 0\n        ^\n/tmp/tmp49u4rb6c.swift:45:9:\
    \ error: invalid redeclaration of 'k'\n    var k = 0\n        ^\n/tmp/tmp49u4rb6c.swift:19:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmp49u4rb6c.swift:46:9:\
    \ error: invalid redeclaration of 'l'\n    var l = 0\n        ^\n/tmp/tmp49u4rb6c.swift:20:9:\
    \ note: 'l' previously declared here\n    var l = 0\n        ^\n/tmp/tmp49u4rb6c.swift:47:9:\
    \ error: invalid redeclaration of 'm'\n    var m = 0\n        ^\n/tmp/tmp49u4rb6c.swift:21:9:\
    \ note: 'm' previously declared here\n    var m = 0\n        ^\n/tmp/tmp49u4rb6c.swift:48:9:\
    \ error: invalid redeclaration of 'n'\n    var n = 0\n        ^\n/tmp/tmp49u4rb6c.swift:22:9:\
    \ note: 'n' previously declared here\n    var n = 0\n        ^\n/tmp/tmp49u4rb6c.swift:49:9:\
    \ error: invalid redeclaration of 'o'\n    var o = 0\n        ^\n/tmp/tmp49u4rb6c.swift:23:9:\
    \ note: 'o' previously declared here\n    var o = 0\n        ^\n/tmp/tmp49u4rb6c.swift:50:9:\
    \ error: invalid redeclaration of 'p'\n    var p = 0\n        ^\n/tmp/tmp49u4rb6c.swift:24:9:\
    \ note: 'p' previously declared here\n    var p = 0\n        ^\n/tmp/tmp49u4rb6c.swift:51:9:\
    \ error: invalid redeclaration of 'q'\n    var q = 0\n        ^\n/tmp/tmp49u4rb6c.swift:25:9:\
    \ note: 'q' previously declared here\n    var q = 0\n        ^\n/tmp/tmp49u4rb6c.swift:52:9:\
    \ error: invalid redeclaration of 'r'\n    var r = 0\n        ^\n/tmp/tmp49u4rb6c.swift:26:9:\
    \ note: 'r' previously declared here\n    var r = 0\n        ^\n/tmp/tmp49u4rb6c.swift:53:9:\
    \ error: invalid redeclaration of 's'\n    var s = 0\n        ^\n/tmp/tmp49u4rb6c.swift:27:9:\
    \ note: 's' previously declared here\n    var s = 0\n        ^\n/tmp/tmp49u4rb6c.swift:54:9:\
    \ error: invalid redeclaration of 't'\n    var t = 0\n        ^\n/tmp/tmp49u4"
  stdout: ''
  timestamp: 1659824943
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var scores = [Int]()\n    var guesses = [Int]()\n    var\
    \ score = 0\n    var guess = 0\n    var i = 0\n    var j = 0\n    var k = 0\n\
    \    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n \
    \   var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n  \
    \  var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n   \
    \ var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var\
    \ f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k\
    \ = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p =\
    \ 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n\
    \    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n \
    \   var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n  \
    \  var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n   \
    \ var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var\
    \ p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u\
    \ = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z =\
    \ 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n\
    \    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n \
    \   var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n  \
    \  var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n   \
    \ var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var\
    \ z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e\
    \ = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j =\
    \ 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n\
    \    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n \
    \   var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n  \
    \  var z = 0\n    var a = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp94dxol2c.swift:44:9: error: invalid redeclaration of 'i'\n    var\
    \ i = 0\n        ^\n/tmp/tmp94dxol2c.swift:18:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmp94dxol2c.swift:45:9: error: invalid\
    \ redeclaration of 'j'\n    var j = 0\n        ^\n/tmp/tmp94dxol2c.swift:19:9:\
    \ note: 'j' previously declared here\n    var j = 0\n        ^\n/tmp/tmp94dxol2c.swift:46:9:\
    \ error: invalid redeclaration of 'k'\n    var k = 0\n        ^\n/tmp/tmp94dxol2c.swift:20:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmp94dxol2c.swift:47:9:\
    \ error: invalid redeclaration of 'l'\n    var l = 0\n        ^\n/tmp/tmp94dxol2c.swift:21:9:\
    \ note: 'l' previously declared here\n    var l = 0\n        ^\n/tmp/tmp94dxol2c.swift:48:9:\
    \ error: invalid redeclaration of 'm'\n    var m = 0\n        ^\n/tmp/tmp94dxol2c.swift:22:9:\
    \ note: 'm' previously declared here\n    var m = 0\n        ^\n/tmp/tmp94dxol2c.swift:49:9:\
    \ error: invalid redeclaration of 'n'\n    var n = 0\n        ^\n/tmp/tmp94dxol2c.swift:23:9:\
    \ note: 'n' previously declared here\n    var n = 0\n        ^\n/tmp/tmp94dxol2c.swift:50:9:\
    \ error: invalid redeclaration of 'o'\n    var o = 0\n        ^\n/tmp/tmp94dxol2c.swift:24:9:\
    \ note: 'o' previously declared here\n    var o = 0\n        ^\n/tmp/tmp94dxol2c.swift:51:9:\
    \ error: invalid redeclaration of 'p'\n    var p = 0\n        ^\n/tmp/tmp94dxol2c.swift:25:9:\
    \ note: 'p' previously declared here\n    var p = 0\n        ^\n/tmp/tmp94dxol2c.swift:52:9:\
    \ error: invalid redeclaration of 'q'\n    var q = 0\n        ^\n/tmp/tmp94dxol2c.swift:26:9:\
    \ note: 'q' previously declared here\n    var q = 0\n        ^\n/tmp/tmp94dxol2c.swift:53:9:\
    \ error: invalid redeclaration of 'r'\n    var r = 0\n        ^\n/tmp/tmp94dxol2c.swift:27:9:\
    \ note: 'r' previously declared here\n    var r = 0\n        ^\n/tmp/tmp94dxol2c.swift:54:9:\
    \ error: invalid redeclaration of 's'\n    var s = 0\n        ^\n/tmp/tmp94dxol2c.swift:28:9:\
    \ note: 's' previously declared here\n    var s = 0\n        ^\n/tmp/tmp94dxol2c.swift:55:9:\
    \ error: invalid redeclaration of 't'\n    var t = 0\n        ^\n/tmp/tmp94dx"
  stdout: ''
  timestamp: 1659824943
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var i = 0\n    while i < game.count {\n        if game[i]\
    \ == guess[i] {\n            result.append(0)\n        } else {\n            result.append(abs(game[i]\
    \ - guess[i]))\n        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824943
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: game.count)\n    var correct = 0\n    var\
    \ wrong = 0\n    for index in 0..<game.count {\n        if game[index] == guess[index]\
    \ {\n            result[index] = 0\n            correct += 1\n        } else {\n\
    \            result[index] = abs(game[index] - guess[index])\n            wrong\
    \ += 1\n        }\n    }\n    return [correct, wrong]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpyq4mq2a8/tmpyq4mq2a8.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6c051ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6c0215b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6c0215988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6c02147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyq4mq2a8                        0x000056234a9eb834 <unavailable> + 6196

    5    libc.so.6                          0x00002ad6c070a460 __libc_start_main +
    245

    6    tmpyq4mq2a8                        0x000056234a9eb3a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659824943
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](count: guess.count, repeatedValue: 0)\n    for i in 0..<guess.count\
    \ {\n        if game[i] == guess[i] {\n            result[i] = 0\n        } else\
    \ {\n            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpb8h9hx4t.swift:13:18: error: no exact matches in call to initializer\
    \ \n    var result = [Int](count: guess.count, repeatedValue: 0)\n           \
    \      ^\n/tmp/tmpb8h9hx4t.swift:13:18: note: candidate has partially matching\
    \ parameter list (repeating: Int, count: Int)\n    var result = [Int](count: guess.count,\
    \ repeatedValue: 0)\n                 ^\n/tmp/tmpb8h9hx4t.swift:13:18: note: candidate\
    \ has partially matching parameter list (repeating: Int, count: Int)\n    var\
    \ result = [Int](count: guess.count, repeatedValue: 0)\n                 ^\n"
  stdout: ''
  timestamp: 1659824943
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var scores = [Int]()\n    var guesses = [Int]()\n    var\
    \ score = 0\n    var guess = 0\n    var i = 0\n    var j = 0\n    var k = 0\n\
    \    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n \
    \   var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n  \
    \  var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n   \
    \ var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var\
    \ f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k\
    \ = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p =\
    \ 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n\
    \    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n \
    \   var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n  \
    \  var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n   \
    \ var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var\
    \ p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u\
    \ = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z =\
    \ 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n\
    \    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n \
    \   var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n  \
    \  var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n   \
    \ var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var\
    \ z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e\
    \ = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j =\
    \ 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n\
    \    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n \
    \   var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n  \
    \  var z = 0\n    var a = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp94dxol2c.swift:44:9: error: invalid redeclaration of 'i'\n    var\
    \ i = 0\n        ^\n/tmp/tmp94dxol2c.swift:18:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmp94dxol2c.swift:45:9: error: invalid\
    \ redeclaration of 'j'\n    var j = 0\n        ^\n/tmp/tmp94dxol2c.swift:19:9:\
    \ note: 'j' previously declared here\n    var j = 0\n        ^\n/tmp/tmp94dxol2c.swift:46:9:\
    \ error: invalid redeclaration of 'k'\n    var k = 0\n        ^\n/tmp/tmp94dxol2c.swift:20:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmp94dxol2c.swift:47:9:\
    \ error: invalid redeclaration of 'l'\n    var l = 0\n        ^\n/tmp/tmp94dxol2c.swift:21:9:\
    \ note: 'l' previously declared here\n    var l = 0\n        ^\n/tmp/tmp94dxol2c.swift:48:9:\
    \ error: invalid redeclaration of 'm'\n    var m = 0\n        ^\n/tmp/tmp94dxol2c.swift:22:9:\
    \ note: 'm' previously declared here\n    var m = 0\n        ^\n/tmp/tmp94dxol2c.swift:49:9:\
    \ error: invalid redeclaration of 'n'\n    var n = 0\n        ^\n/tmp/tmp94dxol2c.swift:23:9:\
    \ note: 'n' previously declared here\n    var n = 0\n        ^\n/tmp/tmp94dxol2c.swift:50:9:\
    \ error: invalid redeclaration of 'o'\n    var o = 0\n        ^\n/tmp/tmp94dxol2c.swift:24:9:\
    \ note: 'o' previously declared here\n    var o = 0\n        ^\n/tmp/tmp94dxol2c.swift:51:9:\
    \ error: invalid redeclaration of 'p'\n    var p = 0\n        ^\n/tmp/tmp94dxol2c.swift:25:9:\
    \ note: 'p' previously declared here\n    var p = 0\n        ^\n/tmp/tmp94dxol2c.swift:52:9:\
    \ error: invalid redeclaration of 'q'\n    var q = 0\n        ^\n/tmp/tmp94dxol2c.swift:26:9:\
    \ note: 'q' previously declared here\n    var q = 0\n        ^\n/tmp/tmp94dxol2c.swift:53:9:\
    \ error: invalid redeclaration of 'r'\n    var r = 0\n        ^\n/tmp/tmp94dxol2c.swift:27:9:\
    \ note: 'r' previously declared here\n    var r = 0\n        ^\n/tmp/tmp94dxol2c.swift:54:9:\
    \ error: invalid redeclaration of 's'\n    var s = 0\n        ^\n/tmp/tmp94dxol2c.swift:28:9:\
    \ note: 's' previously declared here\n    var s = 0\n        ^\n/tmp/tmp94dxol2c.swift:55:9:\
    \ error: invalid redeclaration of 't'\n    var t = 0\n        ^\n/tmp/tmp94dx"
  stdout: ''
  timestamp: 1659824943
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: game.count)\n    for i in 0..<game.count\
    \ {\n        if game[i] == guess[i] {\n            result[i] = 0\n        } else\
    \ {\n            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824943
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var scores = [Int]()\n    var guesses = [Int]()\n    \n\
    \    for i in 0..<game.count {\n        guesses.append(guess[i])\n        scores.append(game[i])\n\
    \    }\n    \n    for i in 0..<guesses.count {\n        let difference = abs(guesses[i]\
    \ - scores[i])\n        result.append(difference)\n    }\n    \n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824943
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: game.count)\n    for i in 0..<game.count\
    \ {\n        result[i] = abs(game[i] - guess[i])\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824943
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: game.count)\n    for i in 0..<game.count\
    \ {\n        if game[i] == guess[i] {\n            result[i] = 0\n        } else\
    \ {\n            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824943
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var i = 0\n    var j = 0\n    var k = 0\n    while i <\
    \ game.count && j < guess.count {\n        if game[i] == guess[j] {\n        \
    \    result[k] = 0\n            i += 1\n            j += 1\n            k += 1\n\
    \        } else if game[i] > guess[j] {\n            result[k] = game[i] - guess[j]\n\
    \            i += 1\n            k += 1\n        } else {\n            result[k]\
    \ = guess[j] - game[i]\n            j += 1\n            k += 1\n        }\n  \
    \  }\n    while i < game.count {\n        result[k] = game[i] - guess[j]\n   \
    \     i += 1\n        k += 1\n        j += 1\n    }\n    while j < guess.count\
    \ {\n        result[k] = guess[j] - game[i]\n        j += 1\n        k += 1\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aafe4327c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafe401e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aafe401e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aafe401e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aafe401dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aafe3e1d7ec <unavailable> + 186348

    6    tmpvi1jgk2o                        0x000055db1b440c90 <unavailable> + 7312

    7    tmpvi1jgk2o                        0x000055db1b4404b3 <unavailable> + 5299

    8    libc.so.6                          0x00002aafe4513460 __libc_start_main +
    245

    9    tmpvi1jgk2o                        0x000055db1b440129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824943
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var scores = [Int]()\n    var guesses = [Int]()\n    var\
    \ i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n\
    \ = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s =\
    \ 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n\
    \    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n \
    \   var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n  \
    \  var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n   \
    \ var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var\
    \ s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x\
    \ = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c =\
    \ 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n\
    \    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n \
    \   var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n  \
    \  var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n   \
    \ var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var\
    \ c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h\
    \ = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m =\
    \ 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n\
    \    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n \
    \   var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n  \
    \  var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n   \
    \ var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var\
    \ m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r\
    \ = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w =\
    \ 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n\
    \    var c = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp9xihw3q3.swift:42:9: error: invalid redeclaration of 'i'\n    var\
    \ i = 0\n        ^\n/tmp/tmp9xihw3q3.swift:16:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmp9xihw3q3.swift:43:9: error: invalid\
    \ redeclaration of 'j'\n    var j = 0\n        ^\n/tmp/tmp9xihw3q3.swift:17:9:\
    \ note: 'j' previously declared here\n    var j = 0\n        ^\n/tmp/tmp9xihw3q3.swift:44:9:\
    \ error: invalid redeclaration of 'k'\n    var k = 0\n        ^\n/tmp/tmp9xihw3q3.swift:18:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmp9xihw3q3.swift:45:9:\
    \ error: invalid redeclaration of 'l'\n    var l = 0\n        ^\n/tmp/tmp9xihw3q3.swift:19:9:\
    \ note: 'l' previously declared here\n    var l = 0\n        ^\n/tmp/tmp9xihw3q3.swift:46:9:\
    \ error: invalid redeclaration of 'm'\n    var m = 0\n        ^\n/tmp/tmp9xihw3q3.swift:20:9:\
    \ note: 'm' previously declared here\n    var m = 0\n        ^\n/tmp/tmp9xihw3q3.swift:47:9:\
    \ error: invalid redeclaration of 'n'\n    var n = 0\n        ^\n/tmp/tmp9xihw3q3.swift:21:9:\
    \ note: 'n' previously declared here\n    var n = 0\n        ^\n/tmp/tmp9xihw3q3.swift:48:9:\
    \ error: invalid redeclaration of 'o'\n    var o = 0\n        ^\n/tmp/tmp9xihw3q3.swift:22:9:\
    \ note: 'o' previously declared here\n    var o = 0\n        ^\n/tmp/tmp9xihw3q3.swift:49:9:\
    \ error: invalid redeclaration of 'p'\n    var p = 0\n        ^\n/tmp/tmp9xihw3q3.swift:23:9:\
    \ note: 'p' previously declared here\n    var p = 0\n        ^\n/tmp/tmp9xihw3q3.swift:50:9:\
    \ error: invalid redeclaration of 'q'\n    var q = 0\n        ^\n/tmp/tmp9xihw3q3.swift:24:9:\
    \ note: 'q' previously declared here\n    var q = 0\n        ^\n/tmp/tmp9xihw3q3.swift:51:9:\
    \ error: invalid redeclaration of 'r'\n    var r = 0\n        ^\n/tmp/tmp9xihw3q3.swift:25:9:\
    \ note: 'r' previously declared here\n    var r = 0\n        ^\n/tmp/tmp9xihw3q3.swift:52:9:\
    \ error: invalid redeclaration of 's'\n    var s = 0\n        ^\n/tmp/tmp9xihw3q3.swift:26:9:\
    \ note: 's' previously declared here\n    var s = 0\n        ^\n/tmp/tmp9xihw3q3.swift:53:9:\
    \ error: invalid redeclaration of 't'\n    var t = 0\n        ^\n/tmp/tmp9xih"
  stdout: ''
  timestamp: 1659824943
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: guess.count)\n    \n    for i in 0..<guess.count\
    \ {\n        result[i] = abs(game[i] - guess[i])\n    }\n    \n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824943
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](count: guess.count, repeatedValue: 0)\n    var i = 0\n    while\
    \ i < guess.count {\n        if game[i] == guess[i] {\n            result[i] =\
    \ 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n     \
    \   }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) ==\
    \ [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess:\
    \ [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1,\
    \ 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmprdw57a0c.swift:13:18: error: no exact matches in call to initializer\
    \ \n    var result = [Int](count: guess.count, repeatedValue: 0)\n           \
    \      ^\n/tmp/tmprdw57a0c.swift:13:18: note: candidate has partially matching\
    \ parameter list (repeating: Int, count: Int)\n    var result = [Int](count: guess.count,\
    \ repeatedValue: 0)\n                 ^\n/tmp/tmprdw57a0c.swift:13:18: note: candidate\
    \ has partially matching parameter list (repeating: Int, count: Int)\n    var\
    \ result = [Int](count: guess.count, repeatedValue: 0)\n                 ^\n"
  stdout: ''
  timestamp: 1659824943
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: game.count)\n    var i = 0\n    while i\
    \ < game.count {\n        if game[i] == guess[i] {\n            result[i] = 0\n\
    \        } else {\n            result[i] = abs(game[i] - guess[i])\n        }\n\
    \        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) ==\
    \ [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess:\
    \ [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1,\
    \ 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824943
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var scores = [Int]()\n    var guesses = [Int]()\n    var\
    \ score = 0\n    var guess = 0\n    var i = 0\n    var j = 0\n    var k = 0\n\
    \    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n \
    \   var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n  \
    \  var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n   \
    \ var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var\
    \ f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k\
    \ = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p =\
    \ 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n\
    \    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n \
    \   var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n  \
    \  var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n   \
    \ var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var\
    \ p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u\
    \ = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z =\
    \ 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n\
    \    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n \
    \   var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n  \
    \  var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n   \
    \ var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var\
    \ z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e\
    \ = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j =\
    \ 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n\
    \    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n \
    \   var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n  \
    \  var z = 0\n    var a = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp94dxol2c.swift:44:9: error: invalid redeclaration of 'i'\n    var\
    \ i = 0\n        ^\n/tmp/tmp94dxol2c.swift:18:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmp94dxol2c.swift:45:9: error: invalid\
    \ redeclaration of 'j'\n    var j = 0\n        ^\n/tmp/tmp94dxol2c.swift:19:9:\
    \ note: 'j' previously declared here\n    var j = 0\n        ^\n/tmp/tmp94dxol2c.swift:46:9:\
    \ error: invalid redeclaration of 'k'\n    var k = 0\n        ^\n/tmp/tmp94dxol2c.swift:20:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmp94dxol2c.swift:47:9:\
    \ error: invalid redeclaration of 'l'\n    var l = 0\n        ^\n/tmp/tmp94dxol2c.swift:21:9:\
    \ note: 'l' previously declared here\n    var l = 0\n        ^\n/tmp/tmp94dxol2c.swift:48:9:\
    \ error: invalid redeclaration of 'm'\n    var m = 0\n        ^\n/tmp/tmp94dxol2c.swift:22:9:\
    \ note: 'm' previously declared here\n    var m = 0\n        ^\n/tmp/tmp94dxol2c.swift:49:9:\
    \ error: invalid redeclaration of 'n'\n    var n = 0\n        ^\n/tmp/tmp94dxol2c.swift:23:9:\
    \ note: 'n' previously declared here\n    var n = 0\n        ^\n/tmp/tmp94dxol2c.swift:50:9:\
    \ error: invalid redeclaration of 'o'\n    var o = 0\n        ^\n/tmp/tmp94dxol2c.swift:24:9:\
    \ note: 'o' previously declared here\n    var o = 0\n        ^\n/tmp/tmp94dxol2c.swift:51:9:\
    \ error: invalid redeclaration of 'p'\n    var p = 0\n        ^\n/tmp/tmp94dxol2c.swift:25:9:\
    \ note: 'p' previously declared here\n    var p = 0\n        ^\n/tmp/tmp94dxol2c.swift:52:9:\
    \ error: invalid redeclaration of 'q'\n    var q = 0\n        ^\n/tmp/tmp94dxol2c.swift:26:9:\
    \ note: 'q' previously declared here\n    var q = 0\n        ^\n/tmp/tmp94dxol2c.swift:53:9:\
    \ error: invalid redeclaration of 'r'\n    var r = 0\n        ^\n/tmp/tmp94dxol2c.swift:27:9:\
    \ note: 'r' previously declared here\n    var r = 0\n        ^\n/tmp/tmp94dxol2c.swift:54:9:\
    \ error: invalid redeclaration of 's'\n    var s = 0\n        ^\n/tmp/tmp94dxol2c.swift:28:9:\
    \ note: 's' previously declared here\n    var s = 0\n        ^\n/tmp/tmp94dxol2c.swift:55:9:\
    \ error: invalid redeclaration of 't'\n    var t = 0\n        ^\n/tmp/tmp94dx"
  stdout: ''
  timestamp: 1659824943
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var scores = [Int]()\n    var guesses = [Int]()\n    \n\
    \    for i in 0..<game.count {\n        guesses.append(guess[i])\n        scores.append(game[i])\n\
    \    }\n    \n    for i in 0..<guesses.count {\n        let guess = guesses[i]\n\
    \        let score = scores[i]\n        \n        if guess == score {\n      \
    \      result.append(0)\n        } else {\n            result.append(abs(guess\
    \ - score))\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824943
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: game.count)\n    \n    for i in 0..<game.count\
    \ {\n        if game[i] == guess[i] {\n            result[i] = 0\n        } else\
    \ {\n            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    \n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824943
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var score = 0\n    var guess = 0\n    var i = 0\n    var\
    \ j = 0\n    while i < game.count && j < guess.count {\n        if game[i] ==\
    \ guess[j] {\n            score += game[i]\n            i += 1\n            j\
    \ += 1\n        } else if game[i] > guess[j] {\n            score += game[i] -\
    \ guess[j]\n            i += 1\n        } else {\n            score += guess[j]\
    \ - game[i]\n            j += 1\n        }\n    }\n    if i == game.count {\n\
    \        result.append(0)\n    } else {\n        result.append(abs(score - guess[i]))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp452zj3up.swift:18:39: error: value of type 'Int' has no member\
    \ 'count'\n    while i < game.count && j < guess.count {\n                   \
    \             ~~~~~ ^~~~~\n/tmp/tmp452zj3up.swift:19:28: error: value of type\
    \ 'Int' has no subscripts\n        if game[i] == guess[j] {\n                \
    \      ~~~~~^\n/tmp/tmp452zj3up.swift:23:34: error: value of type 'Int' has no\
    \ subscripts\n        } else if game[i] > guess[j] {\n                       \
    \     ~~~~~^\n/tmp/tmp452zj3up.swift:24:37: error: value of type 'Int' has no\
    \ subscripts\n            score += game[i] - guess[j]\n                      \
    \         ~~~~~^\n/tmp/tmp452zj3up.swift:27:27: error: value of type 'Int' has\
    \ no subscripts\n            score += guess[j] - game[i]\n                   \
    \  ~~~~~^\n/tmp/tmp452zj3up.swift:34:40: error: value of type 'Int' has no subscripts\n\
    \        result.append(abs(score - guess[i]))\n                              \
    \    ~~~~~^\n"
  stdout: ''
  timestamp: 1659824943
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](count: guess.count, repeatedValue: 0)\n    for i in 0..<guess.count\
    \ {\n        result[i] = abs(game[i] - guess[i])\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpc99hbpk0.swift:13:18: error: no exact matches in call to initializer\
    \ \n    var result = [Int](count: guess.count, repeatedValue: 0)\n           \
    \      ^\n/tmp/tmpc99hbpk0.swift:13:18: note: candidate has partially matching\
    \ parameter list (repeating: Int, count: Int)\n    var result = [Int](count: guess.count,\
    \ repeatedValue: 0)\n                 ^\n/tmp/tmpc99hbpk0.swift:13:18: note: candidate\
    \ has partially matching parameter list (repeating: Int, count: Int)\n    var\
    \ result = [Int](count: guess.count, repeatedValue: 0)\n                 ^\n"
  stdout: ''
  timestamp: 1659824943
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: game.count)\n    for i in 0..<game.count\
    \ {\n        result[i] = abs(game[i] - guess[i])\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824943
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for i in 0..<guess.count {\n        let difference = abs(guess[i]\
    \ - game[i])\n        if difference > result[i] {\n            result[i] = difference\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0,\
    \ 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0,\
    \ 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess: [-1, -2,\
    \ -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1, 2, 3, 4])\
    \ == [2, 0, 0, 1])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b6781d4ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6781a45561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6781a45286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6781a4513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6781a44bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b6781844e83 <unavailable> + 188035

    6    tmpman2no51                        0x000055a5ca8b8f7a <unavailable> + 8058

    7    tmpman2no51                        0x000055a5ca8b8723 <unavailable> + 5923

    8    libc.so.6                          0x00002b6781f3a460 __libc_start_main +
    245

    9    tmpman2no51                        0x000055a5ca8b8399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824943
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: game.count)\n    var scores = [Int](repeating:\
    \ 0, count: game.count)\n    var guesses = [Int](repeating: 0, count: game.count)\n\
    \    var score = 0\n    var guess = 0\n    var i = 0\n    var j = 0\n    var k\
    \ = 0\n    for _ in 0..<game.count {\n        guesses[i] = guess\n        scores[i]\
    \ = score\n        i += 1\n    }\n    for _ in 0..<game.count {\n        if game[k]\
    \ == guesses[j] {\n            score += 1\n            j += 1\n            k +=\
    \ 1\n        } else {\n            score -= 1\n            k += 1\n        }\n\
    \    }\n    for _ in 0..<game.count {\n        result[game[k]] = abs(guesses[j]\
    \ - score)\n        j += 1\n        k += 1\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b3e43643c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3e4333a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3e4333a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b3e4333a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3e43339bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b3e43139e83 <unavailable> + 188035

    6    tmp3z8rtni4                        0x000055f094600369 <unavailable> + 9065

    7    tmp3z8rtni4                        0x000055f0945ff733 <unavailable> + 5939

    8    libc.so.6                          0x00002b3e4382f460 __libc_start_main +
    245

    9    tmp3z8rtni4                        0x000055f0945ff3a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659824943
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](count: guess.count, repeatedValue: 0)\n    for i in 0..<guess.count\
    \ {\n        result[i] = abs(game[i] - guess[i])\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpc99hbpk0.swift:13:18: error: no exact matches in call to initializer\
    \ \n    var result = [Int](count: guess.count, repeatedValue: 0)\n           \
    \      ^\n/tmp/tmpc99hbpk0.swift:13:18: note: candidate has partially matching\
    \ parameter list (repeating: Int, count: Int)\n    var result = [Int](count: guess.count,\
    \ repeatedValue: 0)\n                 ^\n/tmp/tmpc99hbpk0.swift:13:18: note: candidate\
    \ has partially matching parameter list (repeating: Int, count: Int)\n    var\
    \ result = [Int](count: guess.count, repeatedValue: 0)\n                 ^\n"
  stdout: ''
  timestamp: 1659824943
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var score = 0\n    var guess = 0\n    var i = 0\n    var\
    \ j = 0\n    while i < game.count && j < guess.count {\n        if game[i] ==\
    \ guess[j] {\n            score += game[i]\n            i += 1\n            j\
    \ += 1\n        } else if game[i] > guess[j] {\n            score += abs(game[i]\
    \ - guess[j])\n            i += 1\n        } else {\n            score += abs(guess[j]\
    \ - game[i])\n            j += 1\n        }\n    }\n    while i < game.count {\n\
    \        score += abs(game[i] - guess[j])\n        i += 1\n        j += 1\n  \
    \  }\n    while j < guess.count {\n        score += abs(guess[j] - game[i])\n\
    \        j += 1\n    }\n    result.append(score)\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp15nayfpb.swift:18:39: error: value of type 'Int' has no member\
    \ 'count'\n    while i < game.count && j < guess.count {\n                   \
    \             ~~~~~ ^~~~~\n/tmp/tmp15nayfpb.swift:19:28: error: value of type\
    \ 'Int' has no subscripts\n        if game[i] == guess[j] {\n                \
    \      ~~~~~^\n/tmp/tmp15nayfpb.swift:23:34: error: value of type 'Int' has no\
    \ subscripts\n        } else if game[i] > guess[j] {\n                       \
    \     ~~~~~^\n/tmp/tmp15nayfpb.swift:24:41: error: value of type 'Int' has no\
    \ subscripts\n            score += abs(game[i] - guess[j])\n                 \
    \                  ~~~~~^\n/tmp/tmp15nayfpb.swift:27:31: error: value of type\
    \ 'Int' has no subscripts\n            score += abs(guess[j] - game[i])\n    \
    \                     ~~~~~^\n/tmp/tmp15nayfpb.swift:32:37: error: value of type\
    \ 'Int' has no subscripts\n        score += abs(game[i] - guess[j])\n        \
    \                       ~~~~~^\n/tmp/tmp15nayfpb.swift:36:21: error: value of\
    \ type 'Int' has no member 'count'\n    while j < guess.count {\n            \
    \  ~~~~~ ^~~~~\n/tmp/tmp15nayfpb.swift:37:27: error: value of type 'Int' has no\
    \ subscripts\n        score += abs(guess[j] - game[i])\n                     ~~~~~^\n"
  stdout: ''
  timestamp: 1659824943
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var scores = [Int]()\n    var guesses = [Int]()\n    var\
    \ i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n\
    \ = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s =\
    \ 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n\
    \    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n \
    \   var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n  \
    \  var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n   \
    \ var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var\
    \ s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x\
    \ = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c =\
    \ 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n\
    \    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n \
    \   var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n  \
    \  var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n   \
    \ var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var\
    \ c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h\
    \ = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m =\
    \ 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n\
    \    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n \
    \   var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n  \
    \  var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n   \
    \ var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var\
    \ m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r\
    \ = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w =\
    \ 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n\
    \    var c = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp9xihw3q3.swift:42:9: error: invalid redeclaration of 'i'\n    var\
    \ i = 0\n        ^\n/tmp/tmp9xihw3q3.swift:16:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmp9xihw3q3.swift:43:9: error: invalid\
    \ redeclaration of 'j'\n    var j = 0\n        ^\n/tmp/tmp9xihw3q3.swift:17:9:\
    \ note: 'j' previously declared here\n    var j = 0\n        ^\n/tmp/tmp9xihw3q3.swift:44:9:\
    \ error: invalid redeclaration of 'k'\n    var k = 0\n        ^\n/tmp/tmp9xihw3q3.swift:18:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmp9xihw3q3.swift:45:9:\
    \ error: invalid redeclaration of 'l'\n    var l = 0\n        ^\n/tmp/tmp9xihw3q3.swift:19:9:\
    \ note: 'l' previously declared here\n    var l = 0\n        ^\n/tmp/tmp9xihw3q3.swift:46:9:\
    \ error: invalid redeclaration of 'm'\n    var m = 0\n        ^\n/tmp/tmp9xihw3q3.swift:20:9:\
    \ note: 'm' previously declared here\n    var m = 0\n        ^\n/tmp/tmp9xihw3q3.swift:47:9:\
    \ error: invalid redeclaration of 'n'\n    var n = 0\n        ^\n/tmp/tmp9xihw3q3.swift:21:9:\
    \ note: 'n' previously declared here\n    var n = 0\n        ^\n/tmp/tmp9xihw3q3.swift:48:9:\
    \ error: invalid redeclaration of 'o'\n    var o = 0\n        ^\n/tmp/tmp9xihw3q3.swift:22:9:\
    \ note: 'o' previously declared here\n    var o = 0\n        ^\n/tmp/tmp9xihw3q3.swift:49:9:\
    \ error: invalid redeclaration of 'p'\n    var p = 0\n        ^\n/tmp/tmp9xihw3q3.swift:23:9:\
    \ note: 'p' previously declared here\n    var p = 0\n        ^\n/tmp/tmp9xihw3q3.swift:50:9:\
    \ error: invalid redeclaration of 'q'\n    var q = 0\n        ^\n/tmp/tmp9xihw3q3.swift:24:9:\
    \ note: 'q' previously declared here\n    var q = 0\n        ^\n/tmp/tmp9xihw3q3.swift:51:9:\
    \ error: invalid redeclaration of 'r'\n    var r = 0\n        ^\n/tmp/tmp9xihw3q3.swift:25:9:\
    \ note: 'r' previously declared here\n    var r = 0\n        ^\n/tmp/tmp9xihw3q3.swift:52:9:\
    \ error: invalid redeclaration of 's'\n    var s = 0\n        ^\n/tmp/tmp9xihw3q3.swift:26:9:\
    \ note: 's' previously declared here\n    var s = 0\n        ^\n/tmp/tmp9xihw3q3.swift:53:9:\
    \ error: invalid redeclaration of 't'\n    var t = 0\n        ^\n/tmp/tmp9xih"
  stdout: ''
  timestamp: 1659824943
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: game.count)\n    var i = 0\n    for j in\
    \ 0..<game.count {\n        if game[j] == guess[i] {\n            result[j] =\
    \ game[j] - guess[i]\n        }\n        i += 1\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmppqlsse2r/tmppqlsse2r.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad83499bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad834692b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad834692988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad8346917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppqlsse2r                        0x000055888945a754 <unavailable> + 5972

    5    libc.so.6                          0x00002ad834b87460 __libc_start_main +
    245

    6    tmppqlsse2r                        0x000055888945a2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659824943
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var i = 0\n    while i < game.count {\n        if game[i]\
    \ == guess[i] {\n            result.append(0)\n        } else {\n            result.append(abs(game[i]\
    \ - guess[i]))\n        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824943
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var score = 0\n    var guess = 0\n    var i = 0\n    var\
    \ j = 0\n    while i < game.count && j < guess.count {\n        if game[i] ==\
    \ guess[j] {\n            score += game[i]\n            i += 1\n            j\
    \ += 1\n        } else {\n            if game[i] > guess[j] {\n              \
    \  score += abs(game[i] - guess[j])\n                i += 1\n            } else\
    \ {\n                score += abs(guess[j] - game[i])\n                j += 1\n\
    \            }\n        }\n    }\n    while i < game.count {\n        score +=\
    \ abs(game[i] - guess[j])\n        i += 1\n        j += 1\n    }\n    while j\
    \ < guess.count {\n        score += abs(guess[j] - game[i])\n        j += 1\n\
    \    }\n    result.append(score)\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp4pca6kxq.swift:18:39: error: value of type 'Int' has no member\
    \ 'count'\n    while i < game.count && j < guess.count {\n                   \
    \             ~~~~~ ^~~~~\n/tmp/tmp4pca6kxq.swift:19:28: error: value of type\
    \ 'Int' has no subscripts\n        if game[i] == guess[j] {\n                \
    \      ~~~~~^\n/tmp/tmp4pca6kxq.swift:24:31: error: value of type 'Int' has no\
    \ subscripts\n            if game[i] > guess[j] {\n                         ~~~~~^\n\
    /tmp/tmp4pca6kxq.swift:25:45: error: value of type 'Int' has no subscripts\n \
    \               score += abs(game[i] - guess[j])\n                           \
    \            ~~~~~^\n/tmp/tmp4pca6kxq.swift:28:35: error: value of type 'Int'\
    \ has no subscripts\n                score += abs(guess[j] - game[i])\n      \
    \                       ~~~~~^\n/tmp/tmp4pca6kxq.swift:34:37: error: value of\
    \ type 'Int' has no subscripts\n        score += abs(game[i] - guess[j])\n   \
    \                            ~~~~~^\n/tmp/tmp4pca6kxq.swift:38:21: error: value\
    \ of type 'Int' has no member 'count'\n    while j < guess.count {\n         \
    \     ~~~~~ ^~~~~\n/tmp/tmp4pca6kxq.swift:39:27: error: value of type 'Int' has\
    \ no subscripts\n        score += abs(guess[j] - game[i])\n                  \
    \   ~~~~~^\n"
  stdout: ''
  timestamp: 1659824943
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var score = 0\n    var guess = 0\n    var i = 0\n    var\
    \ j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o\
    \ = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t =\
    \ 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n\
    \    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n \
    \   var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n  \
    \  var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n   \
    \ var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var\
    \ t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y\
    \ = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d =\
    \ 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n\
    \    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n \
    \   var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n  \
    \  var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n   \
    \ var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var\
    \ d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i\
    \ = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n =\
    \ 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n\
    \    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n \
    \   var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n  \
    \  var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n   \
    \ var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var\
    \ n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s\
    \ = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x =\
    \ 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n\
    \    var d = 0\n    var e = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpxhhnb_s2.swift:42:9: error: invalid redeclaration of 'i'\n    var\
    \ i = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:16:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:43:9: error: invalid\
    \ redeclaration of 'j'\n    var j = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:17:9:\
    \ note: 'j' previously declared here\n    var j = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:44:9:\
    \ error: invalid redeclaration of 'k'\n    var k = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:18:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:45:9:\
    \ error: invalid redeclaration of 'l'\n    var l = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:19:9:\
    \ note: 'l' previously declared here\n    var l = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:46:9:\
    \ error: invalid redeclaration of 'm'\n    var m = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:20:9:\
    \ note: 'm' previously declared here\n    var m = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:47:9:\
    \ error: invalid redeclaration of 'n'\n    var n = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:21:9:\
    \ note: 'n' previously declared here\n    var n = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:48:9:\
    \ error: invalid redeclaration of 'o'\n    var o = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:22:9:\
    \ note: 'o' previously declared here\n    var o = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:49:9:\
    \ error: invalid redeclaration of 'p'\n    var p = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:23:9:\
    \ note: 'p' previously declared here\n    var p = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:50:9:\
    \ error: invalid redeclaration of 'q'\n    var q = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:24:9:\
    \ note: 'q' previously declared here\n    var q = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:51:9:\
    \ error: invalid redeclaration of 'r'\n    var r = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:25:9:\
    \ note: 'r' previously declared here\n    var r = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:52:9:\
    \ error: invalid redeclaration of 's'\n    var s = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:26:9:\
    \ note: 's' previously declared here\n    var s = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:53:9:\
    \ error: invalid redeclaration of 't'\n    var t = 0\n        ^\n/tmp/tmpxhhn"
  stdout: ''
  timestamp: 1659824943
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: guess.count)\n    for i in 0..<guess.count\
    \ {\n        result[i] = abs(game[i] - guess[i])\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824943
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: game.count)\n    for i in 0..<game.count\
    \ {\n        result[i] = abs(game[i] - guess[i])\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824943
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var scores = [Int]()\n    var guesses = [Int]()\n    \n\
    \    for _ in 0..<guess.count {\n        result.append(0)\n        scores.append(0)\n\
    \        guesses.append(0)\n    }\n    \n    for _ in 0..<game.count {\n     \
    \   if game[_] == guess[_] {\n            scores[_] += 1\n            result[_]\
    \ = 0\n        } else {\n            guesses[_] += 1\n            result[_] =\
    \ abs(game[_] - guess[_])\n        }\n    }\n    \n    for _ in 0..<guess.count\
    \ {\n        if guesses[_] == 0 {\n            result[_] = 0\n        } else {\n\
    \            result[_] = result[_] / guesses[_]\n        }\n    }\n    \n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpmkbucyb0.swift:24:17: error: '_' can only appear in a pattern or\
    \ on the left side of an assignment\n        if game[_] == guess[_] {\n      \
    \          ^\n/tmp/tmpmkbucyb0.swift:25:20: error: '_' can only appear in a pattern\
    \ or on the left side of an assignment\n            scores[_] += 1\n         \
    \          ^\n/tmp/tmpmkbucyb0.swift:26:20: error: '_' can only appear in a pattern\
    \ or on the left side of an assignment\n            result[_] = 0\n          \
    \         ^\n/tmp/tmpmkbucyb0.swift:28:21: error: '_' can only appear in a pattern\
    \ or on the left side of an assignment\n            guesses[_] += 1\n        \
    \            ^\n/tmp/tmpmkbucyb0.swift:29:20: error: '_' can only appear in a\
    \ pattern or on the left side of an assignment\n            result[_] = abs(game[_]\
    \ - guess[_])\n                   ^\n/tmp/tmpmkbucyb0.swift:34:20: error: '_'\
    \ can only appear in a pattern or on the left side of an assignment\n        if\
    \ guesses[_] == 0 {\n                   ^\n/tmp/tmpmkbucyb0.swift:35:20: error:\
    \ '_' can only appear in a pattern or on the left side of an assignment\n    \
    \        result[_] = 0\n                   ^\n/tmp/tmpmkbucyb0.swift:37:20: error:\
    \ '_' can only appear in a pattern or on the left side of an assignment\n    \
    \        result[_] = result[_] / guesses[_]\n                   ^\n"
  stdout: ''
  timestamp: 1659824943
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var i = 0\n    var j = 0\n    while i < game.count &&\
    \ j < guess.count {\n        if game[i] == guess[j] {\n            result.append(0)\n\
    \            i += 1\n            j += 1\n        } else if game[i] > guess[j]\
    \ {\n            result.append(abs(game[i] - guess[j]))\n            i += 1\n\
    \        } else {\n            result.append(abs(guess[j] - game[i]))\n      \
    \      j += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpnl9k3rrk/tmpnl9k3rrk.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e2e500c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e2e1f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e2e1f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e2e1f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnl9k3rrk                        0x00005590f87db6a4 <unavailable> + 5796

    5    libc.so.6                          0x00002b7e2e6ec460 __libc_start_main +
    245

    6    tmpnl9k3rrk                        0x00005590f87db219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659824943
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var i = 0\n    while i < game.count {\n        if guess[i]\
    \ == game[i] {\n            result.append(0)\n        } else {\n            result.append(abs(guess[i]\
    \ - game[i]))\n        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824943
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var scores = [Int]()\n    var guesses = [Int]()\n    var\
    \ score = 0\n    var guess = 0\n    var index = 0\n    var maxScore = game[0]\n\
    \    var maxGuess = guess[0]\n    for _ in 0..<game.count {\n        score +=\
    \ game[index]\n        guesses.append(guess[index])\n        scores.append(score)\n\
    \        index += 1\n    }\n    for _ in 0..<guess.count {\n        guess += guesses[_]\n\
    \    }\n    for _ in 0..<guess.count {\n        if guess == maxGuess {\n     \
    \       result.append(0)\n        } else {\n            result.append(abs(guess\
    \ - maxGuess))\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp_ws6ndvc.swift:20:25: error: value of type 'Int' has no subscripts\n\
    \    var maxGuess = guess[0]\n                   ~~~~~^\n/tmp/tmp_ws6ndvc.swift:23:29:\
    \ error: value of type 'Int' has no subscripts\n        guesses.append(guess[index])\n\
    \                       ~~~~~^\n/tmp/tmp_ws6ndvc.swift:27:24: error: value of\
    \ type 'Int' has no member 'count'\n    for _ in 0..<guess.count {\n         \
    \        ~~~~~ ^~~~~\n/tmp/tmp_ws6ndvc.swift:30:24: error: value of type 'Int'\
    \ has no member 'count'\n    for _ in 0..<guess.count {\n                 ~~~~~\
    \ ^~~~~\n"
  stdout: ''
  timestamp: 1659824943
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: game.count)\n    for i in 0..<game.count\
    \ {\n        if game[i] == guess[i] {\n            result[i] = 0\n        } else\
    \ {\n            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824943
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var scores = [Int]()\n    var guesses = [Int]()\n    \n\
    \    for i in 0..<game.count {\n        scores[i] = game[i]\n        guesses[i]\
    \ = guess[i]\n    }\n    \n    for i in 0..<game.count {\n        if guesses[i]\
    \ == scores[i] {\n            result.append(0)\n        } else {\n           \
    \ result.append(abs(guesses[i] - scores[i]))\n        }\n    }\n    \n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002acffad42c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acffaa39561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002acffaa39286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002acffaa3913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002acffaa38bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002acffa8387ec <unavailable> + 186348

    6    tmpc5n_wh2s                        0x00005586393ddfc0 <unavailable> + 8128

    7    tmpc5n_wh2s                        0x00005586393dd783 <unavailable> + 6019

    8    libc.so.6                          0x00002acffaf2e460 __libc_start_main +
    245

    9    tmpc5n_wh2s                        0x00005586393dd3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824943
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var scores = [Int]()\n    var guesses = [Int]()\n    \n\
    \    for i in 0..<game.count {\n        scores[i] = game[i]\n        guesses[i]\
    \ = guess[i]\n    }\n    \n    for i in 0..<guesses.count {\n        let difference\
    \ = abs(guesses[i] - scores[i])\n        result.append(difference)\n    }\n  \
    \  \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab71b9f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab71b6e9561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab71b6e9286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab71b6e913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab71b6e8bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab71b4e87ec <unavailable> + 186348

    6    tmpjy5nljv1                        0x0000560d4993efd3 <unavailable> + 8147

    7    tmpjy5nljv1                        0x0000560d4993e783 <unavailable> + 6019

    8    libc.so.6                          0x00002ab71bbde460 __libc_start_main +
    245

    9    tmpjy5nljv1                        0x0000560d4993e3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824944
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var scores = [Int]()\n    var guesses = [Int]()\n    var\
    \ score = 0\n    var guess = 0\n    var i = 0\n    var j = 0\n    var k = 0\n\
    \    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n \
    \   var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n  \
    \  var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n   \
    \ var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var\
    \ g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var m\
    \ = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r =\
    \ 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n\
    \    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n \
    \   var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n  \
    \  var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var m = 0\n   \
    \ var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var\
    \ s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x\
    \ = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c =\
    \ 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n\
    \    var i = 0\n    var j = 0\n    var k = 0\n    var m = 0\n    var n = 0\n \
    \   var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n  \
    \  var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n   \
    \ var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var\
    \ d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i\
    \ = 0\n    var j = 0\n    var k = 0\n    var m = 0\n    var n = 0\n    var o =\
    \ 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n\
    \    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n \
    \   var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n  \
    \  var e = 0\n    var f = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp8fhbd6f7.swift:43:9: error: invalid redeclaration of 'i'\n    var\
    \ i = 0\n        ^\n/tmp/tmp8fhbd6f7.swift:18:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmp8fhbd6f7.swift:44:9: error: invalid\
    \ redeclaration of 'j'\n    var j = 0\n        ^\n/tmp/tmp8fhbd6f7.swift:19:9:\
    \ note: 'j' previously declared here\n    var j = 0\n        ^\n/tmp/tmp8fhbd6f7.swift:45:9:\
    \ error: invalid redeclaration of 'k'\n    var k = 0\n        ^\n/tmp/tmp8fhbd6f7.swift:20:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmp8fhbd6f7.swift:46:9:\
    \ error: invalid redeclaration of 'm'\n    var m = 0\n        ^\n/tmp/tmp8fhbd6f7.swift:21:9:\
    \ note: 'm' previously declared here\n    var m = 0\n        ^\n/tmp/tmp8fhbd6f7.swift:47:9:\
    \ error: invalid redeclaration of 'n'\n    var n = 0\n        ^\n/tmp/tmp8fhbd6f7.swift:22:9:\
    \ note: 'n' previously declared here\n    var n = 0\n        ^\n/tmp/tmp8fhbd6f7.swift:48:9:\
    \ error: invalid redeclaration of 'o'\n    var o = 0\n        ^\n/tmp/tmp8fhbd6f7.swift:23:9:\
    \ note: 'o' previously declared here\n    var o = 0\n        ^\n/tmp/tmp8fhbd6f7.swift:49:9:\
    \ error: invalid redeclaration of 'p'\n    var p = 0\n        ^\n/tmp/tmp8fhbd6f7.swift:24:9:\
    \ note: 'p' previously declared here\n    var p = 0\n        ^\n/tmp/tmp8fhbd6f7.swift:50:9:\
    \ error: invalid redeclaration of 'q'\n    var q = 0\n        ^\n/tmp/tmp8fhbd6f7.swift:25:9:\
    \ note: 'q' previously declared here\n    var q = 0\n        ^\n/tmp/tmp8fhbd6f7.swift:51:9:\
    \ error: invalid redeclaration of 'r'\n    var r = 0\n        ^\n/tmp/tmp8fhbd6f7.swift:26:9:\
    \ note: 'r' previously declared here\n    var r = 0\n        ^\n/tmp/tmp8fhbd6f7.swift:52:9:\
    \ error: invalid redeclaration of 's'\n    var s = 0\n        ^\n/tmp/tmp8fhbd6f7.swift:27:9:\
    \ note: 's' previously declared here\n    var s = 0\n        ^\n/tmp/tmp8fhbd6f7.swift:53:9:\
    \ error: invalid redeclaration of 't'\n    var t = 0\n        ^\n/tmp/tmp8fhbd6f7.swift:28:9:\
    \ note: 't' previously declared here\n    var t = 0\n        ^\n/tmp/tmp8fhbd6f7.swift:54:9:\
    \ error: invalid redeclaration of 'u'\n    var u = 0\n        ^\n/tmp/tmp8fhb"
  stdout: ''
  timestamp: 1659824943
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var scores = [Int]()\n    var guesses = [Int]()\n    var\
    \ score = 0\n    var guess = 0\n    var i = 0\n    var j = 0\n    var k = 0\n\
    \    var l = 0\n    for _ in 0..<game.count {\n        guesses.append(guess[k])\n\
    \        scores.append(game[k])\n        score += game[k]\n        k += 1\n  \
    \  }\n    for _ in 0..<guess.count {\n        result.append(guess[k])\n      \
    \  guesses.append(guess[k])\n        score += guess[k]\n        k += 1\n    }\n\
    \    for _ in 0..<guess.count {\n        guesses.append(guess[k])\n        guesses.append(guess[k])\n\
    \        score += guess[k]\n        k += 1\n    }\n    for _ in 0..<guess.count\
    \ {\n        guesses.append(guess[k])\n        guesses.append(guess[k])\n    \
    \    score += guess[k]\n        k += 1\n    }\n    for _ in 0..<guess.count {\n\
    \        guesses.append(guess[k])\n        guesses.append(guess[k])\n        score\
    \ += guess[k]\n        k += 1\n    }\n    for _ in 0..<guess.count {\n       \
    \ guesses.append(guess[k])\n        guesses.append(guess[k])\n        score +=\
    \ guess[k]\n        k += 1\n    }\n    for _ in 0..<guess.count {\n        guesses.append(guess[k])\n\
    \        guesses.append(guess[k])\n        score += guess[k]\n        k += 1\n\
    \    }\n    for _ in 0..<guess.count {\n        guesses.append(guess[k])\n   \
    \     guesses.append(guess[k])\n        score += guess[k]\n        k += 1\n  \
    \  }\n    for _ in 0..<guess.count {\n        guesses.append(guess[k])\n     \
    \   guesses.append(guess[k])\n        score += guess[k]\n        k += 1\n    }\n\
    \    for _ in 0..<guess.count {\n        guesses.append(guess[k])\n        guesses.append(guess[k])\n\
    \        score += guess[k]\n        k += 1\n    }\n    for _ in 0..<guess.count\
    \ {\n        guesses.append(guess[k])\n        guesses.append(guess[k])\n    \
    \    score += guess[k]\n        k += 1\n    }\n    for _ in 0..<guess.count {\n\
    \        guesses.append(guess[k])\n        guesses.append(guess[k])\n        score\
    \ += guess[k]\n        k += 1\n    }\n    for _ in 0..<\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4,\
    \ 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmphb92ntrm.swift:94:18: error: expected '{' to start the body of\
    \ for-each loop\n    for _ in 0..<\n                 ^\n/tmp/tmphb92ntrm.swift:23:29:\
    \ error: value of type 'Int' has no subscripts\n        guesses.append(guess[k])\n\
    \                       ~~~~~^\n/tmp/tmphb92ntrm.swift:28:24: error: value of\
    \ type 'Int' has no member 'count'\n    for _ in 0..<guess.count {\n         \
    \        ~~~~~ ^~~~~\n/tmp/tmphb92ntrm.swift:34:24: error: value of type 'Int'\
    \ has no member 'count'\n    for _ in 0..<guess.count {\n                 ~~~~~\
    \ ^~~~~\n/tmp/tmphb92ntrm.swift:40:24: error: value of type 'Int' has no member\
    \ 'count'\n    for _ in 0..<guess.count {\n                 ~~~~~ ^~~~~\n/tmp/tmphb92ntrm.swift:46:24:\
    \ error: value of type 'Int' has no member 'count'\n    for _ in 0..<guess.count\
    \ {\n                 ~~~~~ ^~~~~\n/tmp/tmphb92ntrm.swift:52:24: error: value\
    \ of type 'Int' has no member 'count'\n    for _ in 0..<guess.count {\n      \
    \           ~~~~~ ^~~~~\n/tmp/tmphb92ntrm.swift:58:24: error: value of type 'Int'\
    \ has no member 'count'\n    for _ in 0..<guess.count {\n                 ~~~~~\
    \ ^~~~~\n/tmp/tmphb92ntrm.swift:64:24: error: value of type 'Int' has no member\
    \ 'count'\n    for _ in 0..<guess.count {\n                 ~~~~~ ^~~~~\n/tmp/tmphb92ntrm.swift:70:24:\
    \ error: value of type 'Int' has no member 'count'\n    for _ in 0..<guess.count\
    \ {\n                 ~~~~~ ^~~~~\n/tmp/tmphb92ntrm.swift:76:24: error: value\
    \ of type 'Int' has no member 'count'\n    for _ in 0..<guess.count {\n      \
    \           ~~~~~ ^~~~~\n/tmp/tmphb92ntrm.swift:82:24: error: value of type 'Int'\
    \ has no member 'count'\n    for _ in 0..<guess.count {\n                 ~~~~~\
    \ ^~~~~\n/tmp/tmphb92ntrm.swift:88:24: error: value of type 'Int' has no member\
    \ 'count'\n    for _ in 0..<guess.count {\n                 ~~~~~ ^~~~~\n/tmp/tmphb92ntrm.swift:94:15:\
    \ error: '..<' is not a postfix unary operator\n    for _ in 0..<\n          \
    \    ^\n"
  stdout: ''
  timestamp: 1659824943
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var scores = [Int]()\n    var guesses = [Int]()\n    var\
    \ score = 0\n    var guess = 0\n    var i = 0\n    var j = 0\n    var k = 0\n\
    \    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n \
    \   var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n  \
    \  var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n   \
    \ var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var\
    \ f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k\
    \ = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p =\
    \ 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n\
    \    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n \
    \   var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n  \
    \  var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n   \
    \ var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var\
    \ p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u\
    \ = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z =\
    \ 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n\
    \    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n \
    \   var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n  \
    \  var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n   \
    \ var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var\
    \ z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e\
    \ = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j =\
    \ 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n\
    \    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n \
    \   var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n  \
    \  var z = 0\n    var a = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp94dxol2c.swift:44:9: error: invalid redeclaration of 'i'\n    var\
    \ i = 0\n        ^\n/tmp/tmp94dxol2c.swift:18:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmp94dxol2c.swift:45:9: error: invalid\
    \ redeclaration of 'j'\n    var j = 0\n        ^\n/tmp/tmp94dxol2c.swift:19:9:\
    \ note: 'j' previously declared here\n    var j = 0\n        ^\n/tmp/tmp94dxol2c.swift:46:9:\
    \ error: invalid redeclaration of 'k'\n    var k = 0\n        ^\n/tmp/tmp94dxol2c.swift:20:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmp94dxol2c.swift:47:9:\
    \ error: invalid redeclaration of 'l'\n    var l = 0\n        ^\n/tmp/tmp94dxol2c.swift:21:9:\
    \ note: 'l' previously declared here\n    var l = 0\n        ^\n/tmp/tmp94dxol2c.swift:48:9:\
    \ error: invalid redeclaration of 'm'\n    var m = 0\n        ^\n/tmp/tmp94dxol2c.swift:22:9:\
    \ note: 'm' previously declared here\n    var m = 0\n        ^\n/tmp/tmp94dxol2c.swift:49:9:\
    \ error: invalid redeclaration of 'n'\n    var n = 0\n        ^\n/tmp/tmp94dxol2c.swift:23:9:\
    \ note: 'n' previously declared here\n    var n = 0\n        ^\n/tmp/tmp94dxol2c.swift:50:9:\
    \ error: invalid redeclaration of 'o'\n    var o = 0\n        ^\n/tmp/tmp94dxol2c.swift:24:9:\
    \ note: 'o' previously declared here\n    var o = 0\n        ^\n/tmp/tmp94dxol2c.swift:51:9:\
    \ error: invalid redeclaration of 'p'\n    var p = 0\n        ^\n/tmp/tmp94dxol2c.swift:25:9:\
    \ note: 'p' previously declared here\n    var p = 0\n        ^\n/tmp/tmp94dxol2c.swift:52:9:\
    \ error: invalid redeclaration of 'q'\n    var q = 0\n        ^\n/tmp/tmp94dxol2c.swift:26:9:\
    \ note: 'q' previously declared here\n    var q = 0\n        ^\n/tmp/tmp94dxol2c.swift:53:9:\
    \ error: invalid redeclaration of 'r'\n    var r = 0\n        ^\n/tmp/tmp94dxol2c.swift:27:9:\
    \ note: 'r' previously declared here\n    var r = 0\n        ^\n/tmp/tmp94dxol2c.swift:54:9:\
    \ error: invalid redeclaration of 's'\n    var s = 0\n        ^\n/tmp/tmp94dxol2c.swift:28:9:\
    \ note: 's' previously declared here\n    var s = 0\n        ^\n/tmp/tmp94dxol2c.swift:55:9:\
    \ error: invalid redeclaration of 't'\n    var t = 0\n        ^\n/tmp/tmp94dx"
  stdout: ''
  timestamp: 1659824943
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](count: guess.count, repeatedValue: 0)\n    for i in 0..<guess.count\
    \ {\n        result[i] = abs(game[i] - guess[i])\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpc99hbpk0.swift:13:18: error: no exact matches in call to initializer\
    \ \n    var result = [Int](count: guess.count, repeatedValue: 0)\n           \
    \      ^\n/tmp/tmpc99hbpk0.swift:13:18: note: candidate has partially matching\
    \ parameter list (repeating: Int, count: Int)\n    var result = [Int](count: guess.count,\
    \ repeatedValue: 0)\n                 ^\n/tmp/tmpc99hbpk0.swift:13:18: note: candidate\
    \ has partially matching parameter list (repeating: Int, count: Int)\n    var\
    \ result = [Int](count: guess.count, repeatedValue: 0)\n                 ^\n"
  stdout: ''
  timestamp: 1659824943
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](count: guess.count, repeatedValue: 0)\n    for i in 0..<guess.count\
    \ {\n        if game[i] == guess[i] {\n            result[i] = 0\n        } else\
    \ {\n            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpb8h9hx4t.swift:13:18: error: no exact matches in call to initializer\
    \ \n    var result = [Int](count: guess.count, repeatedValue: 0)\n           \
    \      ^\n/tmp/tmpb8h9hx4t.swift:13:18: note: candidate has partially matching\
    \ parameter list (repeating: Int, count: Int)\n    var result = [Int](count: guess.count,\
    \ repeatedValue: 0)\n                 ^\n/tmp/tmpb8h9hx4t.swift:13:18: note: candidate\
    \ has partially matching parameter list (repeating: Int, count: Int)\n    var\
    \ result = [Int](count: guess.count, repeatedValue: 0)\n                 ^\n"
  stdout: ''
  timestamp: 1659824943
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var scores = [Int]()\n    var guesses = [Int]()\n    var\
    \ score = 0\n    var guess = 0\n    var i = 0\n    var j = 0\n    for _ in 0..<guess.count\
    \ {\n        guesses.append(guess[i])\n        score += game[i]\n        i +=\
    \ 1\n    }\n    for _ in 0..<guess.count {\n        guesses.append(guess[j])\n\
    \        score += game[j]\n        j += 1\n    }\n    for _ in 0..<guess.count\
    \ {\n        if guesses.contains(guess[i]) {\n            result.append(0)\n \
    \       } else {\n            result.append(abs(guess - score))\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpgepkizch.swift:20:24: error: value of type 'Int' has no member\
    \ 'count'\n    for _ in 0..<guess.count {\n                 ~~~~~ ^~~~~\n/tmp/tmpgepkizch.swift:25:24:\
    \ error: value of type 'Int' has no member 'count'\n    for _ in 0..<guess.count\
    \ {\n                 ~~~~~ ^~~~~\n/tmp/tmpgepkizch.swift:30:24: error: value\
    \ of type 'Int' has no member 'count'\n    for _ in 0..<guess.count {\n      \
    \           ~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824943
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: guess.count)\n    var scores = [Int](repeating:\
    \ 0, count: game.count)\n    for i in 0..<guess.count {\n        scores[i] = game[i]\n\
    \    }\n    for i in 0..<game.count {\n        result[i] = guess[i]\n    }\n \
    \   for i in 0..<guess.count {\n        if result[i] == scores[i] {\n        \
    \    result[i] = 0\n        } else {\n            result[i] = abs(result[i] -\
    \ scores[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824944
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: game.count)\n    for i in 0..<game.count\
    \ {\n        if game[i] == guess[i] {\n            result[i] = 0\n        } else\
    \ {\n            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824943
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var score = 0\n    var guess = 0\n    var i = 0\n    var\
    \ j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o\
    \ = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t =\
    \ 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n\
    \    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n \
    \   var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n  \
    \  var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n   \
    \ var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var\
    \ t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y\
    \ = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d =\
    \ 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n\
    \    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n \
    \   var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n  \
    \  var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n   \
    \ var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var\
    \ d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i\
    \ = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n =\
    \ 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n\
    \    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n \
    \   var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n  \
    \  var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n   \
    \ var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var\
    \ n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s\
    \ = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x =\
    \ 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n\
    \    var d = 0\n    var e = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpxhhnb_s2.swift:42:9: error: invalid redeclaration of 'i'\n    var\
    \ i = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:16:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:43:9: error: invalid\
    \ redeclaration of 'j'\n    var j = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:17:9:\
    \ note: 'j' previously declared here\n    var j = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:44:9:\
    \ error: invalid redeclaration of 'k'\n    var k = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:18:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:45:9:\
    \ error: invalid redeclaration of 'l'\n    var l = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:19:9:\
    \ note: 'l' previously declared here\n    var l = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:46:9:\
    \ error: invalid redeclaration of 'm'\n    var m = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:20:9:\
    \ note: 'm' previously declared here\n    var m = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:47:9:\
    \ error: invalid redeclaration of 'n'\n    var n = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:21:9:\
    \ note: 'n' previously declared here\n    var n = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:48:9:\
    \ error: invalid redeclaration of 'o'\n    var o = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:22:9:\
    \ note: 'o' previously declared here\n    var o = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:49:9:\
    \ error: invalid redeclaration of 'p'\n    var p = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:23:9:\
    \ note: 'p' previously declared here\n    var p = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:50:9:\
    \ error: invalid redeclaration of 'q'\n    var q = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:24:9:\
    \ note: 'q' previously declared here\n    var q = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:51:9:\
    \ error: invalid redeclaration of 'r'\n    var r = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:25:9:\
    \ note: 'r' previously declared here\n    var r = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:52:9:\
    \ error: invalid redeclaration of 's'\n    var s = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:26:9:\
    \ note: 's' previously declared here\n    var s = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:53:9:\
    \ error: invalid redeclaration of 't'\n    var t = 0\n        ^\n/tmp/tmpxhhn"
  stdout: ''
  timestamp: 1659824943
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: game.count)\n    for i in 0..<game.count\
    \ {\n        if game[i] == guess[i] {\n            result[i] = 0\n        } else\
    \ {\n            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824943
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: game.count)\n    for i in 0..<game.count\
    \ {\n        if game[i] == guess[i] {\n            result[i] = 0\n        } else\
    \ {\n            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824943
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: game.count)\n    for i in 0..<game.count\
    \ {\n        if game[i] == guess[i] {\n            result[i] = 0\n        } else\
    \ {\n            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824943
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var i = 0\n    var j = 0\n    while i < game.count &&\
    \ j < guess.count {\n        if game[i] == guess[j] {\n            result.append(0)\n\
    \            i += 1\n            j += 1\n        } else if game[i] > guess[j]\
    \ {\n            result.append(abs(game[i] - guess[j]))\n            i += 1\n\
    \        } else {\n            result.append(abs(guess[j] - game[i]))\n      \
    \      j += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpnl9k3rrk/tmpnl9k3rrk.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e2e500c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e2e1f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e2e1f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e2e1f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnl9k3rrk                        0x00005590f87db6a4 <unavailable> + 5796

    5    libc.so.6                          0x00002b7e2e6ec460 __libc_start_main +
    245

    6    tmpnl9k3rrk                        0x00005590f87db219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659824943
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: game.count)\n    for i in 0..<game.count\
    \ {\n        result[i] = abs(game[i] - guess[i])\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824943
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: game.count)\n    var i = 0\n    for _ in\
    \ 0..<game.count {\n        result[i] = abs(game[i] - guess[i])\n        i +=\
    \ 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824944
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: game.count)\n    for i in 0..<game.count\
    \ {\n        result[i] = abs(game[i] - guess[i])\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824943
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var score = 0\n    var guess = 0\n    for _ in 0..<guess.count\
    \ {\n        guess = guess[guess]\n        score += game[guess]\n    }\n    for\
    \ _ in 0..<guess.count {\n        guess = guess[guess]\n        result.append(abs(guess\
    \ - score))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0,\
    \ 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0,\
    \ 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess: [-1, -2,\
    \ -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1, 2, 3, 4])\
    \ == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpvk5tjcfw.swift:16:24: error: value of type 'Int' has no member\
    \ 'count'\n    for _ in 0..<guess.count {\n                 ~~~~~ ^~~~~\n/tmp/tmpvk5tjcfw.swift:20:24:\
    \ error: value of type 'Int' has no member 'count'\n    for _ in 0..<guess.count\
    \ {\n                 ~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824943
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: guess.count)\n    var scores = [Int](repeating:\
    \ 0, count: game.count)\n    for i in 0..<guess.count {\n        scores[i] = game[i]\n\
    \    }\n    for i in 0..<game.count {\n        result[i] = guess[i]\n    }\n \
    \   for i in 0..<guess.count {\n        if result[i] == scores[i] {\n        \
    \    result[i] = 0\n        } else {\n            result[i] = abs(result[i] -\
    \ scores[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824944
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    \n    for index in 0..<guess.count {\n        let score\
    \ = game[index]\n        let guess = guess[index]\n        \n        if guess\
    \ == score {\n            result.append(0)\n        } else {\n            result.append(abs(score\
    \ - guess))\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824944
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: game.count)\n    var i = 0\n    var j =\
    \ 0\n    while i < game.count && j < guess.count {\n        if game[i] == guess[j]\
    \ {\n            result[i] = 0\n            i += 1\n            j += 1\n     \
    \   } else if game[i] > guess[j] {\n            result[i] = game[i] - guess[j]\n\
    \            i += 1\n        } else {\n            result[i] = guess[j] - game[i]\n\
    \            j += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4,\
    \ 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpovcj0oow/tmpovcj0oow.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afaef6a6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afaef39db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afaef39d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afaef39c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpovcj0oow                        0x000055c5eafd9914 <unavailable> + 6420

    5    libc.so.6                          0x00002afaef892460 __libc_start_main +
    245

    6    tmpovcj0oow                        0x000055c5eafd9139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1659824944
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: game.count)\n    for i in 0..<game.count\
    \ {\n        if game[i] == guess[i] {\n            result[i] = 0\n        } else\
    \ {\n            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824943
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var index = 0\n    while index < game.count {\n      \
    \  if game[index] == guess[index] {\n            result[index] = 0\n        }\
    \ else {\n            result[index] = abs(game[index] - guess[index])\n      \
    \  }\n        index += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b9036e9dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9036b94561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b9036b94286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b9036b9413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b9036b93bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b90369937ec <unavailable> + 186348

    6    tmpn4k8irvk                        0x000056000d159cbd <unavailable> + 7357

    7    tmpn4k8irvk                        0x000056000d159593 <unavailable> + 5523

    8    libc.so.6                          0x00002b9037089460 __libc_start_main +
    245

    9    tmpn4k8irvk                        0x000056000d159209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824944
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: game.count)\n    var i = 0\n    for j in\
    \ 0..<game.count {\n        if game[j] == guess[i] {\n            result[j] =\
    \ game[j] // correct guess\n        } else {\n            result[j] = abs(game[j]\
    \ - guess[i]) // wrong guess\n        }\n        i += 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmptfj2e47c/tmptfj2e47c.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f4b461c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f4b158b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0f4b158988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0f4b1577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptfj2e47c                        0x000055bd00d77834 <unavailable> + 6196

    5    libc.so.6                          0x00002b0f4b64d460 __libc_start_main +
    245

    6    tmptfj2e47c                        0x000055bd00d773a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659824944
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var i = 0\n    var j = 0\n    while i < game.count &&\
    \ j < guess.count {\n        if game[i] == guess[j] {\n            result.append(0)\n\
    \            i += 1\n            j += 1\n        } else if game[i] > guess[j]\
    \ {\n            result.append(abs(game[i] - guess[j]))\n            i += 1\n\
    \        } else {\n            result.append(abs(guess[j] - game[i]))\n      \
    \      j += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpnl9k3rrk/tmpnl9k3rrk.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e2e500c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e2e1f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e2e1f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e2e1f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnl9k3rrk                        0x00005590f87db6a4 <unavailable> + 5796

    5    libc.so.6                          0x00002b7e2e6ec460 __libc_start_main +
    245

    6    tmpnl9k3rrk                        0x00005590f87db219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659824943
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var scores = [Int]()\n    var guesses = [Int]()\n    var\
    \ score = 0\n    var guess = 0\n    var i = 0\n    var j = 0\n    for _ in 0..<game.count\
    \ {\n        guesses.append(guess[i])\n        scores.append(game[i])\n      \
    \  i += 1\n    }\n    for _ in 0..<guess.count {\n        guesses.append(guess[j])\n\
    \        scores.append(0)\n        j += 1\n    }\n    for _ in 0..<guess.count\
    \ {\n        if guesses.contains(game[i]) {\n            score += abs(guess[i]\
    \ - game[i])\n        } else {\n            score += abs(guess[i] - scores[j])\n\
    \        }\n        i += 1\n        j += 1\n    }\n    for _ in 0..<game.count\
    \ {\n        if guesses.contains(scores[j]) {\n            score += abs(scores[j]\
    \ - game[i])\n        } else {\n            score += abs(scores[j] - guesses[j])\n\
    \        }\n        i += 1\n        j += 1\n    }\n    for _ in 0..<game.count\
    \ {\n        if guesses.contains(scores[i]) {\n            score += abs(scores[i]\
    \ - guesses[j])\n        } else {\n            score += abs(scores[i] - scores[j])\n\
    \        }\n        i += 1\n        j += 1\n    }\n    for _ in 0..<game.count\
    \ {\n        if guesses.contains(scores[i]) {\n            score += abs(guess[i]\
    \ - guesses[j])\n        } else {\n            score += abs(guess[i] - scores[j])\n\
    \        }\n        i += 1\n        j += 1\n    }\n    for _ in 0..<game.count\
    \ {\n        if guesses.contains(scores[i]) {\n            score += abs(guess[i]\
    \ - scores[j])\n        } else {\n            score += abs(guess[i] - guesses[j])\n\
    \        }\n        i += 1\n        j += 1\n    }\n    for _ in 0..<game.count\
    \ {\n        if guesses.contains(scores[i]) {\n            score += abs(guess[i]\
    \ - guesses[j])\n        } else {\n            score += abs(guess[i] - scores[j])\n\
    \        }\n        i += 1\n        j += 1\n    }\n    for _ in 0..<game.count\
    \ {\n        if guesses.contains(scores[i]) {\n            score += abs(guess[i]\
    \ - guesses[j])\n        } else {\n            score += abs(guess[i] - scores[j])\n\
    \        }\n        i += 1\n        j += 1\n    }\n    for _ in 0..<game.count\
    \ {\n        if guesses.contains(scores[i]) {\n            score += abs(guess[i]\
    \ - guesses[j])\n        } else {\n            score += abs(guess[i] - scores[j])\n\
    \        }\n        i += 1\n        j += 1\n    }\n    for _ in 0..<\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpxrih05s4.swift:102:18: error: expected '{' to start the body of\
    \ for-each loop\n    for _ in 0..<\n                 ^\n/tmp/tmpxrih05s4.swift:21:29:\
    \ error: value of type 'Int' has no subscripts\n        guesses.append(guess[i])\n\
    \                       ~~~~~^\n/tmp/tmpxrih05s4.swift:25:24: error: value of\
    \ type 'Int' has no member 'count'\n    for _ in 0..<guess.count {\n         \
    \        ~~~~~ ^~~~~\n/tmp/tmpxrih05s4.swift:30:24: error: value of type 'Int'\
    \ has no member 'count'\n    for _ in 0..<guess.count {\n                 ~~~~~\
    \ ^~~~~\n/tmp/tmpxrih05s4.swift:59:31: error: value of type 'Int' has no subscripts\n\
    \            score += abs(guess[i] - guesses[j])\n                         ~~~~~^\n\
    /tmp/tmpxrih05s4.swift:61:31: error: value of type 'Int' has no subscripts\n \
    \           score += abs(guess[i] - scores[j])\n                         ~~~~~^\n\
    /tmp/tmpxrih05s4.swift:68:31: error: value of type 'Int' has no subscripts\n \
    \           score += abs(guess[i] - scores[j])\n                         ~~~~~^\n\
    /tmp/tmpxrih05s4.swift:70:31: error: value of type 'Int' has no subscripts\n \
    \           score += abs(guess[i] - guesses[j])\n                         ~~~~~^\n\
    /tmp/tmpxrih05s4.swift:77:31: error: value of type 'Int' has no subscripts\n \
    \           score += abs(guess[i] - guesses[j])\n                         ~~~~~^\n\
    /tmp/tmpxrih05s4.swift:79:31: error: value of type 'Int' has no subscripts\n \
    \           score += abs(guess[i] - scores[j])\n                         ~~~~~^\n\
    /tmp/tmpxrih05s4.swift:86:31: error: value of type 'Int' has no subscripts\n \
    \           score += abs(guess[i] - guesses[j])\n                         ~~~~~^\n\
    /tmp/tmpxrih05s4.swift:88:31: error: value of type 'Int' has no subscripts\n \
    \           score += abs(guess[i] - scores[j])\n                         ~~~~~^\n\
    /tmp/tmpxrih05s4.swift:95:31: error: value of type 'Int' has no subscripts\n \
    \           score += abs(guess[i] - guesses[j])\n                         ~~~~~^\n\
    /tmp/tmpxrih05s4.swift:97:31: error: value of type 'Int' has no subscripts\n \
    \           score += abs(guess[i] - scores["
  stdout: ''
  timestamp: 1659824944
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: guess.count)\n    \n    for i in 0..<guess.count\
    \ {\n        if guess[i] == game[i] {\n            result[i] = 0\n        } else\
    \ {\n            result[i] = abs(guess[i] - game[i])\n        }\n    }\n    \n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824944
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: game.count)\n    for i in 0..<game.count\
    \ {\n        result[i] = abs(game[i] - guess[i])\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824943
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var i = 0\n    var j = 0\n    while i < game.count &&\
    \ j < guess.count {\n        if game[i] == guess[j] {\n            result.append(0)\n\
    \            i += 1\n            j += 1\n        } else if game[i] > guess[j]\
    \ {\n            result.append(abs(game[i] - guess[j]))\n            i += 1\n\
    \        } else {\n            result.append(abs(guess[j] - game[i]))\n      \
    \      j += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpnl9k3rrk/tmpnl9k3rrk.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e2e500c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e2e1f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e2e1f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e2e1f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnl9k3rrk                        0x00005590f87db6a4 <unavailable> + 5796

    5    libc.so.6                          0x00002b7e2e6ec460 __libc_start_main +
    245

    6    tmpnl9k3rrk                        0x00005590f87db219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659824943
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: game.count)\n    var i = 0\n    for j in\
    \ 0..<game.count {\n        if game[j] == guess[j] {\n            result[i] =\
    \ 0\n        } else {\n            result[i] = abs(game[j] - guess[j])\n     \
    \   }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) ==\
    \ [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess:\
    \ [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1,\
    \ 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824944
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: game.count)\n    for i in 0..<game.count\
    \ {\n        result[i] = abs(game[i] - guess[i])\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824943
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: game.count)\n    for i in 0..<game.count\
    \ {\n        result[i] = abs(game[i] - guess[i])\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824943
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: game.count)\n    var i = 0\n    while i\
    \ < game.count {\n        if game[i] == guess[i] {\n            result[i] = 0\n\
    \        } else {\n            result[i] = abs(game[i] - guess[i])\n        }\n\
    \        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) ==\
    \ [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess:\
    \ [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1,\
    \ 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824943
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: game.count)\n    for i in 0..<game.count\
    \ {\n        if game[i] == guess[i] {\n            result[i] = 0\n        } else\
    \ {\n            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824943
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var score = 0\n    var guess = 0\n    var game = 0\n \
    \   var guess = 0\n    var game = 0\n    var game = 0\n    var game = 0\n    var\
    \ game = 0\n    var game = 0\n    var game = 0\n    var game = 0\n    var game\
    \ = 0\n    var game = 0\n    var game = 0\n    var game = 0\n    var game = 0\n\
    \    var game = 0\n    var game = 0\n    var game = 0\n    var game = 0\n    var\
    \ game = 0\n    var game = 0\n    var game = 0\n    var game = 0\n    var game\
    \ = 0\n    var game = 0\n    var game = 0\n    var game = 0\n    var game = 0\n\
    \    var game = 0\n    var game = 0\n    var game = 0\n    var game = 0\n    var\
    \ game = 0\n    var game = 0\n    var game = 0\n    var game = 0\n    var game\
    \ = 0\n    var game = 0\n    var game = 0\n    var game = 0\n    var game = 0\n\
    \    var game = 0\n    var game = 0\n    var game = 0\n    var game = 0\n    var\
    \ game = 0\n    var game = 0\n    var game = 0\n    var game = 0\n    var game\
    \ = 0\n    var game = 0\n    var game = 0\n    var game = 0\n    var game = 0\n\
    \    var game = 0\n    var game = 0\n    var game = 0\n    var game = 0\n    var\
    \ game = 0\n    var game = 0\n    var game = 0\n    var game = 0\n    var game\
    \ = 0\n    var game = 0\n    var game = 0\n    var game = 0\n    var game = 0\n\
    \    var game = 0\n    var game = 0\n    var game = 0\n    var game = 0\n    var\
    \ game = 0\n    var game = 0\n    var game = 0\n    var game = 0\n    var game\
    \ = 0\n    var game = 0\n    var game = 0\n    var game = 0\n    var game = 0\n\
    \    var game = 0\n    var game = 0\n    var game = 0\n    var game = 0\n    var\
    \ game = 0\n    var game = 0\n    var game = 0\n    var game = 0\n    var game\
    \ = 0\n    var game = 0\n    var game = 0\n    var game = 0\n    var game = 0\n\
    \    var game = 0\n    var game = 0\n    var game = 0\n    var game = 0\n    var\
    \ game = 0\n    var game = 0\n    var game = 0\n    var game = 0\n    var game\
    \ = 0\n    var game = 0\n    var game = 0\n    var game = 0\n    var game = 0\n\
    \    var game = 0\n    var game = 0\n    var game = 0\n    var game = 0\n    var\
    \ game = 0\n    var game = 0\n    var game = 0\n    var game = 0\n    var game\
    \ = 0\n    var game = 0\n    var game = 0\n    var game = 0\n    var game = 0\n\
    \    var game = 0\n    var game = 0\n    var game = 0\n    var game = 0\n    var\
    \ game = 0\n    var game = 0\n    var \n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0,\
    \ 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0,\
    \ 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess: [-1, -2,\
    \ -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1, 2, 3, 4])\
    \ == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpq6_etxw8.swift:140:8: error: expected pattern\n    var \n     \
    \  ^\n/tmp/tmpq6_etxw8.swift:17:9: error: invalid redeclaration of 'guess'\n \
    \   var guess = 0\n        ^\n/tmp/tmpq6_etxw8.swift:15:9: note: 'guess' previously\
    \ declared here\n    var guess = 0\n        ^\n/tmp/tmpq6_etxw8.swift:18:9: error:\
    \ invalid redeclaration of 'game'\n    var game = 0\n        ^\n/tmp/tmpq6_etxw8.swift:16:9:\
    \ note: 'game' previously declared here\n    var game = 0\n        ^\n/tmp/tmpq6_etxw8.swift:19:9:\
    \ error: invalid redeclaration of 'game'\n    var game = 0\n        ^\n/tmp/tmpq6_etxw8.swift:16:9:\
    \ note: 'game' previously declared here\n    var game = 0\n        ^\n/tmp/tmpq6_etxw8.swift:20:9:\
    \ error: invalid redeclaration of 'game'\n    var game = 0\n        ^\n/tmp/tmpq6_etxw8.swift:16:9:\
    \ note: 'game' previously declared here\n    var game = 0\n        ^\n/tmp/tmpq6_etxw8.swift:21:9:\
    \ error: invalid redeclaration of 'game'\n    var game = 0\n        ^\n/tmp/tmpq6_etxw8.swift:16:9:\
    \ note: 'game' previously declared here\n    var game = 0\n        ^\n/tmp/tmpq6_etxw8.swift:22:9:\
    \ error: invalid redeclaration of 'game'\n    var game = 0\n        ^\n/tmp/tmpq6_etxw8.swift:16:9:\
    \ note: 'game' previously declared here\n    var game = 0\n        ^\n/tmp/tmpq6_etxw8.swift:23:9:\
    \ error: invalid redeclaration of 'game'\n    var game = 0\n        ^\n/tmp/tmpq6_etxw8.swift:16:9:\
    \ note: 'game' previously declared here\n    var game = 0\n        ^\n/tmp/tmpq6_etxw8.swift:24:9:\
    \ error: invalid redeclaration of 'game'\n    var game = 0\n        ^\n/tmp/tmpq6_etxw8.swift:16:9:\
    \ note: 'game' previously declared here\n    var game = 0\n        ^\n/tmp/tmpq6_etxw8.swift:25:9:\
    \ error: invalid redeclaration of 'game'\n    var game = 0\n        ^\n/tmp/tmpq6_etxw8.swift:16:9:\
    \ note: 'game' previously declared here\n    var game = 0\n        ^\n/tmp/tmpq6_etxw8.swift:26:9:\
    \ error: invalid redeclaration of 'game'\n    var game = 0\n        ^\n/tmp/tmpq6_etxw8.swift:16:9:\
    \ note: 'game' previously declared here\n    var game = 0\n        ^\n/tmp/tmpq6_etxw8.swift:27:9:\
    \ error: invalid redeclaration of 'game'\n    var game ="
  stdout: ''
  timestamp: 1659824943
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: game.count)\n    for i in 0..<game.count\
    \ {\n        result[i] = abs(game[i] - guess[i])\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824943
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var score = 0\n    var guess = 0\n    var i = 0\n    var\
    \ j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o\
    \ = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t =\
    \ 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n\
    \    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n \
    \   var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n  \
    \  var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n   \
    \ var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var\
    \ t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y\
    \ = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d =\
    \ 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n\
    \    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n \
    \   var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n  \
    \  var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n   \
    \ var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var\
    \ d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i\
    \ = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n =\
    \ 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n\
    \    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n \
    \   var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n  \
    \  var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n   \
    \ var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var\
    \ n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s\
    \ = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x =\
    \ 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n\
    \    var d = 0\n    var e = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpxhhnb_s2.swift:42:9: error: invalid redeclaration of 'i'\n    var\
    \ i = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:16:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:43:9: error: invalid\
    \ redeclaration of 'j'\n    var j = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:17:9:\
    \ note: 'j' previously declared here\n    var j = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:44:9:\
    \ error: invalid redeclaration of 'k'\n    var k = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:18:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:45:9:\
    \ error: invalid redeclaration of 'l'\n    var l = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:19:9:\
    \ note: 'l' previously declared here\n    var l = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:46:9:\
    \ error: invalid redeclaration of 'm'\n    var m = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:20:9:\
    \ note: 'm' previously declared here\n    var m = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:47:9:\
    \ error: invalid redeclaration of 'n'\n    var n = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:21:9:\
    \ note: 'n' previously declared here\n    var n = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:48:9:\
    \ error: invalid redeclaration of 'o'\n    var o = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:22:9:\
    \ note: 'o' previously declared here\n    var o = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:49:9:\
    \ error: invalid redeclaration of 'p'\n    var p = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:23:9:\
    \ note: 'p' previously declared here\n    var p = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:50:9:\
    \ error: invalid redeclaration of 'q'\n    var q = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:24:9:\
    \ note: 'q' previously declared here\n    var q = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:51:9:\
    \ error: invalid redeclaration of 'r'\n    var r = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:25:9:\
    \ note: 'r' previously declared here\n    var r = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:52:9:\
    \ error: invalid redeclaration of 's'\n    var s = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:26:9:\
    \ note: 's' previously declared here\n    var s = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:53:9:\
    \ error: invalid redeclaration of 't'\n    var t = 0\n        ^\n/tmp/tmpxhhn"
  stdout: ''
  timestamp: 1659824943
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var i = 0\n    while i < game.count {\n        if game[i]\
    \ == guess[i] {\n            result.append(0)\n        } else {\n            result.append(abs(game[i]\
    \ - guess[i]))\n        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824943
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: game.count)\n    for i in 0..<game.count\
    \ {\n        if game[i] == guess[i] {\n            result[i] = 0\n        } else\
    \ {\n            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824943
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: game.count)\n    for i in 0..<game.count\
    \ {\n        if game[i] == guess[i] {\n            result[i] = 0\n        } else\
    \ {\n            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824943
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var scores = [Int]()\n    var guesses = [Int]()\n    var\
    \ score = 0\n    var guess = 0\n    var i = 0\n    var j = 0\n    var k = 0\n\
    \    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n \
    \   var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n  \
    \  var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n   \
    \ var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var\
    \ g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var m\
    \ = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r =\
    \ 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n\
    \    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n \
    \   var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n  \
    \  var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var m = 0\n   \
    \ var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var\
    \ s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x\
    \ = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c =\
    \ 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n\
    \    var i = 0\n    var j = 0\n    var k = 0\n    var m = 0\n    var n = 0\n \
    \   var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n  \
    \  var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n   \
    \ var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var\
    \ d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i\
    \ = 0\n    var j = 0\n    var k = 0\n    var m = 0\n    var n = 0\n    var o =\
    \ 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n\
    \    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n \
    \   var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n  \
    \  var e = 0\n    var f = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp8fhbd6f7.swift:43:9: error: invalid redeclaration of 'i'\n    var\
    \ i = 0\n        ^\n/tmp/tmp8fhbd6f7.swift:18:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmp8fhbd6f7.swift:44:9: error: invalid\
    \ redeclaration of 'j'\n    var j = 0\n        ^\n/tmp/tmp8fhbd6f7.swift:19:9:\
    \ note: 'j' previously declared here\n    var j = 0\n        ^\n/tmp/tmp8fhbd6f7.swift:45:9:\
    \ error: invalid redeclaration of 'k'\n    var k = 0\n        ^\n/tmp/tmp8fhbd6f7.swift:20:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmp8fhbd6f7.swift:46:9:\
    \ error: invalid redeclaration of 'm'\n    var m = 0\n        ^\n/tmp/tmp8fhbd6f7.swift:21:9:\
    \ note: 'm' previously declared here\n    var m = 0\n        ^\n/tmp/tmp8fhbd6f7.swift:47:9:\
    \ error: invalid redeclaration of 'n'\n    var n = 0\n        ^\n/tmp/tmp8fhbd6f7.swift:22:9:\
    \ note: 'n' previously declared here\n    var n = 0\n        ^\n/tmp/tmp8fhbd6f7.swift:48:9:\
    \ error: invalid redeclaration of 'o'\n    var o = 0\n        ^\n/tmp/tmp8fhbd6f7.swift:23:9:\
    \ note: 'o' previously declared here\n    var o = 0\n        ^\n/tmp/tmp8fhbd6f7.swift:49:9:\
    \ error: invalid redeclaration of 'p'\n    var p = 0\n        ^\n/tmp/tmp8fhbd6f7.swift:24:9:\
    \ note: 'p' previously declared here\n    var p = 0\n        ^\n/tmp/tmp8fhbd6f7.swift:50:9:\
    \ error: invalid redeclaration of 'q'\n    var q = 0\n        ^\n/tmp/tmp8fhbd6f7.swift:25:9:\
    \ note: 'q' previously declared here\n    var q = 0\n        ^\n/tmp/tmp8fhbd6f7.swift:51:9:\
    \ error: invalid redeclaration of 'r'\n    var r = 0\n        ^\n/tmp/tmp8fhbd6f7.swift:26:9:\
    \ note: 'r' previously declared here\n    var r = 0\n        ^\n/tmp/tmp8fhbd6f7.swift:52:9:\
    \ error: invalid redeclaration of 's'\n    var s = 0\n        ^\n/tmp/tmp8fhbd6f7.swift:27:9:\
    \ note: 's' previously declared here\n    var s = 0\n        ^\n/tmp/tmp8fhbd6f7.swift:53:9:\
    \ error: invalid redeclaration of 't'\n    var t = 0\n        ^\n/tmp/tmp8fhbd6f7.swift:28:9:\
    \ note: 't' previously declared here\n    var t = 0\n        ^\n/tmp/tmp8fhbd6f7.swift:54:9:\
    \ error: invalid redeclaration of 'u'\n    var u = 0\n        ^\n/tmp/tmp8fhb"
  stdout: ''
  timestamp: 1659824943
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: game.count)\n    for i in 0..<game.count\
    \ {\n        if game[i] == guess[i] {\n            result[i] = 0\n        } else\
    \ {\n            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824943
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var scores = [Int]()\n    var guesses = [Int]()\n    var\
    \ i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n\
    \ = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s =\
    \ 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n\
    \    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n \
    \   var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n  \
    \  var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n   \
    \ var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var\
    \ s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x\
    \ = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c =\
    \ 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n\
    \    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n \
    \   var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n  \
    \  var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n   \
    \ var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var\
    \ c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h\
    \ = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m =\
    \ 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n\
    \    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n \
    \   var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n  \
    \  var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n   \
    \ var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var\
    \ m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r\
    \ = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w =\
    \ 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n\
    \    var c = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp9xihw3q3.swift:42:9: error: invalid redeclaration of 'i'\n    var\
    \ i = 0\n        ^\n/tmp/tmp9xihw3q3.swift:16:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmp9xihw3q3.swift:43:9: error: invalid\
    \ redeclaration of 'j'\n    var j = 0\n        ^\n/tmp/tmp9xihw3q3.swift:17:9:\
    \ note: 'j' previously declared here\n    var j = 0\n        ^\n/tmp/tmp9xihw3q3.swift:44:9:\
    \ error: invalid redeclaration of 'k'\n    var k = 0\n        ^\n/tmp/tmp9xihw3q3.swift:18:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmp9xihw3q3.swift:45:9:\
    \ error: invalid redeclaration of 'l'\n    var l = 0\n        ^\n/tmp/tmp9xihw3q3.swift:19:9:\
    \ note: 'l' previously declared here\n    var l = 0\n        ^\n/tmp/tmp9xihw3q3.swift:46:9:\
    \ error: invalid redeclaration of 'm'\n    var m = 0\n        ^\n/tmp/tmp9xihw3q3.swift:20:9:\
    \ note: 'm' previously declared here\n    var m = 0\n        ^\n/tmp/tmp9xihw3q3.swift:47:9:\
    \ error: invalid redeclaration of 'n'\n    var n = 0\n        ^\n/tmp/tmp9xihw3q3.swift:21:9:\
    \ note: 'n' previously declared here\n    var n = 0\n        ^\n/tmp/tmp9xihw3q3.swift:48:9:\
    \ error: invalid redeclaration of 'o'\n    var o = 0\n        ^\n/tmp/tmp9xihw3q3.swift:22:9:\
    \ note: 'o' previously declared here\n    var o = 0\n        ^\n/tmp/tmp9xihw3q3.swift:49:9:\
    \ error: invalid redeclaration of 'p'\n    var p = 0\n        ^\n/tmp/tmp9xihw3q3.swift:23:9:\
    \ note: 'p' previously declared here\n    var p = 0\n        ^\n/tmp/tmp9xihw3q3.swift:50:9:\
    \ error: invalid redeclaration of 'q'\n    var q = 0\n        ^\n/tmp/tmp9xihw3q3.swift:24:9:\
    \ note: 'q' previously declared here\n    var q = 0\n        ^\n/tmp/tmp9xihw3q3.swift:51:9:\
    \ error: invalid redeclaration of 'r'\n    var r = 0\n        ^\n/tmp/tmp9xihw3q3.swift:25:9:\
    \ note: 'r' previously declared here\n    var r = 0\n        ^\n/tmp/tmp9xihw3q3.swift:52:9:\
    \ error: invalid redeclaration of 's'\n    var s = 0\n        ^\n/tmp/tmp9xihw3q3.swift:26:9:\
    \ note: 's' previously declared here\n    var s = 0\n        ^\n/tmp/tmp9xihw3q3.swift:53:9:\
    \ error: invalid redeclaration of 't'\n    var t = 0\n        ^\n/tmp/tmp9xih"
  stdout: ''
  timestamp: 1659824943
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var score = 0\n    var guess = 0\n    var i = 0\n    var\
    \ j = 0\n    var k = 0\n    while i < game.count && j < guess.count {\n      \
    \  if game[i] == guess[j] {\n            score += game[i]\n            i += 1\n\
    \            j += 1\n        } else if game[i] > guess[j] {\n            score\
    \ += abs(game[i] - guess[j])\n            i += 1\n        } else {\n         \
    \   score += abs(guess[j] - game[i])\n            j += 1\n        }\n    }\n \
    \   while i < game.count {\n        score += abs(game[i] - guess[k])\n       \
    \ i += 1\n        k += 1\n    }\n    while j < guess.count {\n        score +=\
    \ abs(guess[j] - game[k])\n        j += 1\n        k += 1\n    }\n    result.append(score)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp90i96vss.swift:19:39: error: value of type 'Int' has no member\
    \ 'count'\n    while i < game.count && j < guess.count {\n                   \
    \             ~~~~~ ^~~~~\n/tmp/tmp90i96vss.swift:20:28: error: value of type\
    \ 'Int' has no subscripts\n        if game[i] == guess[j] {\n                \
    \      ~~~~~^\n/tmp/tmp90i96vss.swift:24:34: error: value of type 'Int' has no\
    \ subscripts\n        } else if game[i] > guess[j] {\n                       \
    \     ~~~~~^\n/tmp/tmp90i96vss.swift:25:41: error: value of type 'Int' has no\
    \ subscripts\n            score += abs(game[i] - guess[j])\n                 \
    \                  ~~~~~^\n/tmp/tmp90i96vss.swift:28:31: error: value of type\
    \ 'Int' has no subscripts\n            score += abs(guess[j] - game[i])\n    \
    \                     ~~~~~^\n/tmp/tmp90i96vss.swift:33:37: error: value of type\
    \ 'Int' has no subscripts\n        score += abs(game[i] - guess[k])\n        \
    \                       ~~~~~^\n/tmp/tmp90i96vss.swift:37:21: error: value of\
    \ type 'Int' has no member 'count'\n    while j < guess.count {\n            \
    \  ~~~~~ ^~~~~\n/tmp/tmp90i96vss.swift:38:27: error: value of type 'Int' has no\
    \ subscripts\n        score += abs(guess[j] - game[k])\n                     ~~~~~^\n"
  stdout: ''
  timestamp: 1659824944
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: game.count)\n    for i in 0..<game.count\
    \ {\n        if game[i] == guess[i] {\n            result[i] = 0\n        } else\
    \ {\n            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824943
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: game.count)\n    var i = 0\n    while i\
    \ < game.count {\n        if game[i] == guess[i] {\n            result[i] = 0\n\
    \        } else {\n            result[i] = abs(game[i] - guess[i])\n        }\n\
    \        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) ==\
    \ [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess:\
    \ [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1,\
    \ 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824943
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: guess.count)\n    for i in 0..<guess.count\
    \ {\n        result[i] = abs(game[i] - guess[i])\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824943
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var i = 0\n    var j = 0\n    while i < game.count &&\
    \ j < guess.count {\n        if game[i] == guess[j] {\n            result.append(0)\n\
    \            i += 1\n            j += 1\n        } else if game[i] > guess[j]\
    \ {\n            result.append(abs(game[i] - guess[j]))\n            i += 1\n\
    \        } else {\n            result.append(abs(guess[j] - game[i]))\n      \
    \      j += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpnl9k3rrk/tmpnl9k3rrk.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e2e500c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e2e1f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e2e1f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e2e1f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnl9k3rrk                        0x00005590f87db6a4 <unavailable> + 5796

    5    libc.so.6                          0x00002b7e2e6ec460 __libc_start_main +
    245

    6    tmpnl9k3rrk                        0x00005590f87db219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659824943
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var scores = [Int]()\n    for i in 0..<guess.count {\n\
    \        scores[i] = game[i]\n    }\n    for i in 0..<guess.count {\n        if\
    \ guess[i] == scores[i] {\n            result.append(0)\n        } else {\n  \
    \          result.append(abs(guess[i] - scores[i]))\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2b2d85c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2b2a7c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba2b2a7c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba2b2a7c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba2b2a7bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ba2b287b7ec <unavailable> + 186348

    6    tmp9huggwxz                        0x000055eb5d3b3fa3 <unavailable> + 8099

    7    tmp9huggwxz                        0x000055eb5d3b3783 <unavailable> + 6019

    8    libc.so.6                          0x00002ba2b2f71460 __libc_start_main +
    245

    9    tmp9huggwxz                        0x000055eb5d3b33f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824944
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](count: guess.count, repeatedValue: 0)\n    for i in 0..<guess.count\
    \ {\n        if game[i] == guess[i] {\n            result[i] = 0\n        } else\
    \ {\n            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpb8h9hx4t.swift:13:18: error: no exact matches in call to initializer\
    \ \n    var result = [Int](count: guess.count, repeatedValue: 0)\n           \
    \      ^\n/tmp/tmpb8h9hx4t.swift:13:18: note: candidate has partially matching\
    \ parameter list (repeating: Int, count: Int)\n    var result = [Int](count: guess.count,\
    \ repeatedValue: 0)\n                 ^\n/tmp/tmpb8h9hx4t.swift:13:18: note: candidate\
    \ has partially matching parameter list (repeating: Int, count: Int)\n    var\
    \ result = [Int](count: guess.count, repeatedValue: 0)\n                 ^\n"
  stdout: ''
  timestamp: 1659824943
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var scores = [Int]()\n    var guesses = [Int]()\n    var\
    \ i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n\
    \ = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s =\
    \ 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n\
    \    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n \
    \   var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n  \
    \  var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n   \
    \ var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var\
    \ s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x\
    \ = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c =\
    \ 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n\
    \    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n \
    \   var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n  \
    \  var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n   \
    \ var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var\
    \ c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h\
    \ = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m =\
    \ 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n\
    \    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n \
    \   var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n  \
    \  var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n   \
    \ var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var\
    \ m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r\
    \ = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w =\
    \ 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n\
    \    var c = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp9xihw3q3.swift:42:9: error: invalid redeclaration of 'i'\n    var\
    \ i = 0\n        ^\n/tmp/tmp9xihw3q3.swift:16:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmp9xihw3q3.swift:43:9: error: invalid\
    \ redeclaration of 'j'\n    var j = 0\n        ^\n/tmp/tmp9xihw3q3.swift:17:9:\
    \ note: 'j' previously declared here\n    var j = 0\n        ^\n/tmp/tmp9xihw3q3.swift:44:9:\
    \ error: invalid redeclaration of 'k'\n    var k = 0\n        ^\n/tmp/tmp9xihw3q3.swift:18:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmp9xihw3q3.swift:45:9:\
    \ error: invalid redeclaration of 'l'\n    var l = 0\n        ^\n/tmp/tmp9xihw3q3.swift:19:9:\
    \ note: 'l' previously declared here\n    var l = 0\n        ^\n/tmp/tmp9xihw3q3.swift:46:9:\
    \ error: invalid redeclaration of 'm'\n    var m = 0\n        ^\n/tmp/tmp9xihw3q3.swift:20:9:\
    \ note: 'm' previously declared here\n    var m = 0\n        ^\n/tmp/tmp9xihw3q3.swift:47:9:\
    \ error: invalid redeclaration of 'n'\n    var n = 0\n        ^\n/tmp/tmp9xihw3q3.swift:21:9:\
    \ note: 'n' previously declared here\n    var n = 0\n        ^\n/tmp/tmp9xihw3q3.swift:48:9:\
    \ error: invalid redeclaration of 'o'\n    var o = 0\n        ^\n/tmp/tmp9xihw3q3.swift:22:9:\
    \ note: 'o' previously declared here\n    var o = 0\n        ^\n/tmp/tmp9xihw3q3.swift:49:9:\
    \ error: invalid redeclaration of 'p'\n    var p = 0\n        ^\n/tmp/tmp9xihw3q3.swift:23:9:\
    \ note: 'p' previously declared here\n    var p = 0\n        ^\n/tmp/tmp9xihw3q3.swift:50:9:\
    \ error: invalid redeclaration of 'q'\n    var q = 0\n        ^\n/tmp/tmp9xihw3q3.swift:24:9:\
    \ note: 'q' previously declared here\n    var q = 0\n        ^\n/tmp/tmp9xihw3q3.swift:51:9:\
    \ error: invalid redeclaration of 'r'\n    var r = 0\n        ^\n/tmp/tmp9xihw3q3.swift:25:9:\
    \ note: 'r' previously declared here\n    var r = 0\n        ^\n/tmp/tmp9xihw3q3.swift:52:9:\
    \ error: invalid redeclaration of 's'\n    var s = 0\n        ^\n/tmp/tmp9xihw3q3.swift:26:9:\
    \ note: 's' previously declared here\n    var s = 0\n        ^\n/tmp/tmp9xihw3q3.swift:53:9:\
    \ error: invalid redeclaration of 't'\n    var t = 0\n        ^\n/tmp/tmp9xih"
  stdout: ''
  timestamp: 1659824943
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var scores = [Int]()\n    var guesses = [Int]()\n    var\
    \ gameScore = 0\n    var guessesScore = 0\n    var gameGuess = 0\n    var guessesGuess\
    \ = 0\n    var gameScoreDiff = 0\n    var guessesScoreDiff = 0\n    var gameGuessDiff\
    \ = 0\n    var guessesGuessDiff = 0\n    var gameScoreDiff2 = 0\n    var guessesScoreDiff2\
    \ = 0\n    var gameGuessDiff2 = 0\n    var guessesGuessDiff2 = 0\n    var gameScoreDiff3\
    \ = 0\n    var guessesScoreDiff3 = 0\n    var gameGuessDiff3 = 0\n    var guessesGuessDiff3\
    \ = 0\n    var gameScoreDiff4 = 0\n    var guessesScoreDiff4 = 0\n    var gameGuessDiff4\
    \ = 0\n    var guessesGuessDiff4 = 0\n    var gameScoreDiff5 = 0\n    var guessesScoreDiff5\
    \ = 0\n    var gameGuessDiff5 = 0\n    var guessesGuessDiff5 = 0\n    var gameScoreDiff6\
    \ = 0\n    var guessesScoreDiff6 = 0\n    var gameGuessDiff6 = 0\n    var guessesGuessDiff6\
    \ = 0\n    var gameScoreDiff7 = 0\n    var guessesScoreDiff7 = 0\n    var gameGuessDiff7\
    \ = 0\n    var guessesGuessDiff7 = 0\n    var gameScoreDiff8 = 0\n    var guessesScoreDiff8\
    \ = 0\n    var gameGuessDiff8 = 0\n    var guessesGuessDiff8 = 0\n    var gameScoreDiff9\
    \ = 0\n    var guessesScoreDiff9 = 0\n    var gameGuessDiff9 = 0\n    var guessesGuessDiff9\
    \ = 0\n    var gameScoreDiff10 = 0\n    var guessesScoreDiff10 = 0\n    var gameGuessDiff10\
    \ = 0\n    var guessesGuessDiff10 = 0\n    var gameScoreDiff11 = 0\n    var guessesScoreDiff11\
    \ = 0\n    var gameGuessDiff11 = 0\n    var guessesGuessDiff11 = 0\n    var gameScoreDiff12\
    \ = 0\n    var guessesScoreDiff12 = 0\n    var gameGuessDiff12 = 0\n    var guessesGuessDiff12\
    \ = 0\n    var gameScoreDiff13 = 0\n    var guessesScoreDiff13 = 0\n    var gameGuessDiff13\
    \ = 0\n    var guessesGuessDiff13 = 0\n    var gameScoreDiff14 = 0\n    var guessesScoreDiff14\
    \ = 0\n    var gameGuessDiff14 = 0\n    var guessesGuessDiff14 = 0\n    var gameScoreDiff15\
    \ = 0\n    var guessesScoreDiff15 = 0\n    var gameGuessDiff15 = 0\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp_a3ymvwj.swift:13:9: warning: initialization of variable 'result'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var result = [Int]()\n    ~~~~^~~~~~\n    _\n/tmp/tmp_a3ymvwj.swift:14:9:\
    \ warning: initialization of variable 'scores' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var scores = [Int]()\n    ~~~~^~~~~~\n\
    \    _\n/tmp/tmp_a3ymvwj.swift:15:9: warning: initialization of variable 'guesses'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var guesses = [Int]()\n    ~~~~^~~~~~~\n    _\n/tmp/tmp_a3ymvwj.swift:16:9:\
    \ warning: initialization of variable 'gameScore' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var gameScore = 0\n    ~~~~^~~~~~~~~\n\
    \    _\n/tmp/tmp_a3ymvwj.swift:17:9: warning: initialization of variable 'guessesScore'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var guessesScore = 0\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmp_a3ymvwj.swift:18:9:\
    \ warning: initialization of variable 'gameGuess' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var gameGuess = 0\n    ~~~~^~~~~~~~~\n\
    \    _\n/tmp/tmp_a3ymvwj.swift:19:9: warning: initialization of variable 'guessesGuess'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var guessesGuess = 0\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmp_a3ymvwj.swift:20:9:\
    \ warning: initialization of variable 'gameScoreDiff' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var gameScoreDiff = 0\n\
    \    ~~~~^~~~~~~~~~~~~\n    _\n/tmp/tmp_a3ymvwj.swift:21:9: warning: initialization\
    \ of variable 'guessesScoreDiff' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var guessesScoreDiff = 0\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp_a3ymvwj.swift:22:9: warning: initialization of variable 'gameGuessDiff'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var gameGuessDiff = 0\n    ~~~~^~~~~~~~~~~~~\n    _\n/tmp/tmp_a3ymvwj.swift:23:9:\
    \ wa"
  stdout: ''
  timestamp: 1659824944
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var scores = [Int]()\n    var guesses = [Int]()\n    \n\
    \    for i in 0..<game.count {\n        guesses.append(guess[i])\n        scores.append(game[i])\n\
    \    }\n    \n    for i in 0..<guesses.count {\n        if guesses[i] == scores[i]\
    \ {\n            result.append(0)\n        } else {\n            result.append(abs(guesses[i]\
    \ - scores[i]))\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4,\
    \ 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824943
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: game.count)\n    for i in 0..<game.count\
    \ {\n        result[i] = abs(game[i] - guess[i])\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824943
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: game.count)\n    for i in 0..<game.count\
    \ {\n        result[i] = abs(game[i] - guess[i])\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824943
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var scores = [Int]()\n    var guesses = [Int]()\n    var\
    \ i = 0\n    var j = 0\n    while i < game.count && j < guess.count {\n      \
    \  if game[i] == guess[j] {\n            scores.append(game[i])\n            guesses.append(guess[j])\n\
    \            i += 1\n            j += 1\n        } else if game[i] > guess[j]\
    \ {\n            scores.append(abs(game[i] - guess[j]))\n            i += 1\n\
    \        } else {\n            scores.append(abs(guess[j] - game[i]))\n      \
    \      j += 1\n        }\n    }\n    for _ in 0..<game.count {\n        result.append(0)\n\
    \    }\n    for _ in 0..<guess.count {\n        result.append(0)\n    }\n    for\
    \ _ in 0..<scores.count {\n        result.append(0)\n    }\n    for _ in 0..<guesses.count\
    \ {\n        result.append(0)\n    }\n    for _ in 0..<scores.count {\n      \
    \  result.append(0)\n    }\n    for _ in 0..<guesses.count {\n        result.append(0)\n\
    \    }\n    for _ in 0..<scores.count {\n        result.append(0)\n    }\n   \
    \ for _ in 0..<guesses.count {\n        result.append(0)\n    }\n    for _ in\
    \ 0..<scores.count {\n        result.append(0)\n    }\n    for _ in 0..<guesses.count\
    \ {\n        result.append(0)\n    }\n    for _ in 0..<scores.count {\n      \
    \  result.append(0)\n    }\n    for _ in 0..<guesses.count {\n        result.append(0)\n\
    \    }\n    for _ in 0..<scores.count {\n        result.append(0)\n    }\n   \
    \ for _ in 0..<guesses.count {\n        result.append(0)\n    }\n    for _ in\
    \ 0..<scores.count {\n        result.append(0)\n    }\n    for _ in 0..<guesses.count\
    \ {\n        result.append(0)\n    }\n    for _ in 0..<scores.count {\n      \
    \  result.append(0)\n    }\n    for _ in 0..<guesses.count {\n        result.append(0)\n\
    \    }\n    for _ in 0..<scores.count {\n        result.append(0)\n    }\n   \
    \ for _ in 0..<guesses.count {\n        result.append(0)\n    }\n    for _ in\
    \ 0..<scores.count {\n        result.append(0)\n    }\n    for _ in 0..<guesses.count\
    \ {\n        result.append(0)\n    }\n    for _ in 0..<scores.count {\n      \
    \  result.append(0)\n    }\n    for _ in 0..<guesses.count {\n        result.append(0)\n\
    \    }\n    for _ in 0..<scores.count {\n        result.append(0)\n    }\n   \
    \ for _ in \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp7m5c6fs4.swift:107:13: error: expected Sequence expression for\
    \ for-each loop\n    for _ in \n            ^\n/tmp/tmp7m5c6fs4.swift:107:13:\
    \ error: expected '{' to start the body of for-each loop\n    for _ in \n    \
    \        ^\n"
  stdout: ''
  timestamp: 1659824944
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: game.count)\n    for i in 0..<game.count\
    \ {\n        result[i] = abs(game[i] - guess[i])\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824943
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: game.count)\n    for i in 0..<game.count\
    \ {\n        result[i] = abs(game[i] - guess[i])\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824943
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var i = 0\n    var j = 0\n    while i < game.count &&\
    \ j < guess.count {\n        if game[i] == guess[j] {\n            result.append(0)\n\
    \            i += 1\n            j += 1\n        } else if game[i] > guess[j]\
    \ {\n            result.append(abs(game[i] - guess[j]))\n            i += 1\n\
    \        } else {\n            result.append(abs(guess[j] - game[i]))\n      \
    \      j += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpnl9k3rrk/tmpnl9k3rrk.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e2e500c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e2e1f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e2e1f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e2e1f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnl9k3rrk                        0x00005590f87db6a4 <unavailable> + 5796

    5    libc.so.6                          0x00002b7e2e6ec460 __libc_start_main +
    245

    6    tmpnl9k3rrk                        0x00005590f87db219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659824943
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n\
    \    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n \
    \   var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n  \
    \  var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n   \
    \ var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var\
    \ g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l\
    \ = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q =\
    \ 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n\
    \    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n \
    \   var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n  \
    \  var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n   \
    \ var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var\
    \ q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v\
    \ = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a =\
    \ 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n\
    \    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n \
    \   var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n  \
    \  var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n   \
    \ var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var\
    \ a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f\
    \ = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k =\
    \ 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n\
    \    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n \
    \   var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n  \
    \  var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n   \
    \ var f = 0\n    var g = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmphu0sf898.swift:40:9: error: invalid redeclaration of 'i'\n    var\
    \ i = 0\n        ^\n/tmp/tmphu0sf898.swift:14:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmphu0sf898.swift:41:9: error: invalid\
    \ redeclaration of 'j'\n    var j = 0\n        ^\n/tmp/tmphu0sf898.swift:15:9:\
    \ note: 'j' previously declared here\n    var j = 0\n        ^\n/tmp/tmphu0sf898.swift:42:9:\
    \ error: invalid redeclaration of 'k'\n    var k = 0\n        ^\n/tmp/tmphu0sf898.swift:16:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmphu0sf898.swift:43:9:\
    \ error: invalid redeclaration of 'l'\n    var l = 0\n        ^\n/tmp/tmphu0sf898.swift:17:9:\
    \ note: 'l' previously declared here\n    var l = 0\n        ^\n/tmp/tmphu0sf898.swift:44:9:\
    \ error: invalid redeclaration of 'm'\n    var m = 0\n        ^\n/tmp/tmphu0sf898.swift:18:9:\
    \ note: 'm' previously declared here\n    var m = 0\n        ^\n/tmp/tmphu0sf898.swift:45:9:\
    \ error: invalid redeclaration of 'n'\n    var n = 0\n        ^\n/tmp/tmphu0sf898.swift:19:9:\
    \ note: 'n' previously declared here\n    var n = 0\n        ^\n/tmp/tmphu0sf898.swift:46:9:\
    \ error: invalid redeclaration of 'o'\n    var o = 0\n        ^\n/tmp/tmphu0sf898.swift:20:9:\
    \ note: 'o' previously declared here\n    var o = 0\n        ^\n/tmp/tmphu0sf898.swift:47:9:\
    \ error: invalid redeclaration of 'p'\n    var p = 0\n        ^\n/tmp/tmphu0sf898.swift:21:9:\
    \ note: 'p' previously declared here\n    var p = 0\n        ^\n/tmp/tmphu0sf898.swift:48:9:\
    \ error: invalid redeclaration of 'q'\n    var q = 0\n        ^\n/tmp/tmphu0sf898.swift:22:9:\
    \ note: 'q' previously declared here\n    var q = 0\n        ^\n/tmp/tmphu0sf898.swift:49:9:\
    \ error: invalid redeclaration of 'r'\n    var r = 0\n        ^\n/tmp/tmphu0sf898.swift:23:9:\
    \ note: 'r' previously declared here\n    var r = 0\n        ^\n/tmp/tmphu0sf898.swift:50:9:\
    \ error: invalid redeclaration of 's'\n    var s = 0\n        ^\n/tmp/tmphu0sf898.swift:24:9:\
    \ note: 's' previously declared here\n    var s = 0\n        ^\n/tmp/tmphu0sf898.swift:51:9:\
    \ error: invalid redeclaration of 't'\n    var t = 0\n        ^\n/tmp/tmphu0s"
  stdout: ''
  timestamp: 1659824944
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: guess.count)\n    var i = 0\n    var j =\
    \ 0\n    while i < game.count && j < guess.count {\n        if game[i] == guess[j]\
    \ {\n            result[i] = 0\n            i += 1\n            j += 1\n     \
    \   } else if game[i] > guess[j] {\n            result[i] = game[i] - guess[j]\n\
    \            i += 1\n        } else {\n            result[i] = guess[j] - game[i]\n\
    \            j += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4,\
    \ 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpswkls8pt/tmpswkls8pt.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2c176bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2c1462b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2c1462988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2c14617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpswkls8pt                        0x00005621b544d914 <unavailable> + 6420

    5    libc.so.6                          0x00002ba2c1957460 __libc_start_main +
    245

    6    tmpswkls8pt                        0x00005621b544d139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1659824944
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for i in 0..<guess.count {\n        if game[i] == guess[i]\
    \ {\n            result.append(0)\n        } else {\n            result.append(abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824944
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: game.count)\n    \n    for i in 0..<game.count\
    \ {\n        if game[i] == guess[i] {\n            result[i] = 0\n        } else\
    \ {\n            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    \n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824943
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: game.count)\n    for i in 0..<game.count\
    \ {\n        if game[i] == guess[i] {\n            result[i] = 0\n        } else\
    \ {\n            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824943
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var scores = [Int]()\n    var guesses = [Int]()\n    var\
    \ i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n\
    \ = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s =\
    \ 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n\
    \    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n \
    \   var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n  \
    \  var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n   \
    \ var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var\
    \ s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x\
    \ = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c =\
    \ 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n\
    \    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n \
    \   var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n  \
    \  var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n   \
    \ var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var\
    \ c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h\
    \ = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m =\
    \ 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n\
    \    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n \
    \   var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n  \
    \  var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n   \
    \ var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var\
    \ m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r\
    \ = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w =\
    \ 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n\
    \    var c = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp9xihw3q3.swift:42:9: error: invalid redeclaration of 'i'\n    var\
    \ i = 0\n        ^\n/tmp/tmp9xihw3q3.swift:16:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmp9xihw3q3.swift:43:9: error: invalid\
    \ redeclaration of 'j'\n    var j = 0\n        ^\n/tmp/tmp9xihw3q3.swift:17:9:\
    \ note: 'j' previously declared here\n    var j = 0\n        ^\n/tmp/tmp9xihw3q3.swift:44:9:\
    \ error: invalid redeclaration of 'k'\n    var k = 0\n        ^\n/tmp/tmp9xihw3q3.swift:18:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmp9xihw3q3.swift:45:9:\
    \ error: invalid redeclaration of 'l'\n    var l = 0\n        ^\n/tmp/tmp9xihw3q3.swift:19:9:\
    \ note: 'l' previously declared here\n    var l = 0\n        ^\n/tmp/tmp9xihw3q3.swift:46:9:\
    \ error: invalid redeclaration of 'm'\n    var m = 0\n        ^\n/tmp/tmp9xihw3q3.swift:20:9:\
    \ note: 'm' previously declared here\n    var m = 0\n        ^\n/tmp/tmp9xihw3q3.swift:47:9:\
    \ error: invalid redeclaration of 'n'\n    var n = 0\n        ^\n/tmp/tmp9xihw3q3.swift:21:9:\
    \ note: 'n' previously declared here\n    var n = 0\n        ^\n/tmp/tmp9xihw3q3.swift:48:9:\
    \ error: invalid redeclaration of 'o'\n    var o = 0\n        ^\n/tmp/tmp9xihw3q3.swift:22:9:\
    \ note: 'o' previously declared here\n    var o = 0\n        ^\n/tmp/tmp9xihw3q3.swift:49:9:\
    \ error: invalid redeclaration of 'p'\n    var p = 0\n        ^\n/tmp/tmp9xihw3q3.swift:23:9:\
    \ note: 'p' previously declared here\n    var p = 0\n        ^\n/tmp/tmp9xihw3q3.swift:50:9:\
    \ error: invalid redeclaration of 'q'\n    var q = 0\n        ^\n/tmp/tmp9xihw3q3.swift:24:9:\
    \ note: 'q' previously declared here\n    var q = 0\n        ^\n/tmp/tmp9xihw3q3.swift:51:9:\
    \ error: invalid redeclaration of 'r'\n    var r = 0\n        ^\n/tmp/tmp9xihw3q3.swift:25:9:\
    \ note: 'r' previously declared here\n    var r = 0\n        ^\n/tmp/tmp9xihw3q3.swift:52:9:\
    \ error: invalid redeclaration of 's'\n    var s = 0\n        ^\n/tmp/tmp9xihw3q3.swift:26:9:\
    \ note: 's' previously declared here\n    var s = 0\n        ^\n/tmp/tmp9xihw3q3.swift:53:9:\
    \ error: invalid redeclaration of 't'\n    var t = 0\n        ^\n/tmp/tmp9xih"
  stdout: ''
  timestamp: 1659824943
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var i = 0\n    while i < game.count {\n        if game[i]\
    \ == guess[i] {\n            result.append(0)\n        } else {\n            result.append(abs(game[i]\
    \ - guess[i]))\n        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824943
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: game.count)\n    for i in 0..<game.count\
    \ {\n        result[i] = abs(game[i] - guess[i])\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824943
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var scores = [Int]()\n    var guesses = [Int]()\n    \n\
    \    for i in 0..<game.count {\n        guesses.append(guess[i])\n        scores.append(game[i])\n\
    \    }\n    \n    for i in 0..<guesses.count {\n        var score = 0\n      \
    \  var guess = 0\n        \n        for j in 0..<scores.count {\n            if\
    \ guesses[i] == scores[j] {\n                score += j\n            }\n     \
    \   }\n        \n        if score == 0 {\n            result.append(0)\n     \
    \   } else {\n            result.append(abs(score - guesses[i]))\n        }\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmppr9lej3j/tmppr9lej3j.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b71b9b9cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b71b9893b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b71b9893988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71b98927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppr9lej3j                        0x0000564c9e574824 <unavailable> + 6180

    5    libc.so.6                          0x00002b71b9d88460 __libc_start_main +
    245

    6    tmppr9lej3j                        0x0000564c9e574399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824944
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for i in 0..<guess.count {\n        let diff = abs(game[i]\
    \ - guess[i])\n        result.append(diff)\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824944
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var i = 0\n    var j = 0\n    while i < game.count &&\
    \ j < guess.count {\n        if game[i] == guess[j] {\n            result.append(0)\n\
    \            i += 1\n            j += 1\n        } else if game[i] > guess[j]\
    \ {\n            result.append(abs(game[i] - guess[j]))\n            i += 1\n\
    \        } else {\n            result.append(abs(guess[j] - game[i]))\n      \
    \      j += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpnl9k3rrk/tmpnl9k3rrk.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e2e500c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e2e1f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e2e1f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e2e1f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnl9k3rrk                        0x00005590f87db6a4 <unavailable> + 5796

    5    libc.so.6                          0x00002b7e2e6ec460 __libc_start_main +
    245

    6    tmpnl9k3rrk                        0x00005590f87db219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659824943
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n\
    \    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n \
    \   var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n  \
    \  var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n   \
    \ var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var\
    \ g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l\
    \ = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q =\
    \ 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n\
    \    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n \
    \   var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n  \
    \  var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n   \
    \ var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var\
    \ q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v\
    \ = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a =\
    \ 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n\
    \    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n \
    \   var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n  \
    \  var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n   \
    \ var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var\
    \ a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f\
    \ = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k =\
    \ 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n\
    \    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n \
    \   var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n  \
    \  var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n   \
    \ var f = 0\n    var g = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmphu0sf898.swift:40:9: error: invalid redeclaration of 'i'\n    var\
    \ i = 0\n        ^\n/tmp/tmphu0sf898.swift:14:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmphu0sf898.swift:41:9: error: invalid\
    \ redeclaration of 'j'\n    var j = 0\n        ^\n/tmp/tmphu0sf898.swift:15:9:\
    \ note: 'j' previously declared here\n    var j = 0\n        ^\n/tmp/tmphu0sf898.swift:42:9:\
    \ error: invalid redeclaration of 'k'\n    var k = 0\n        ^\n/tmp/tmphu0sf898.swift:16:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmphu0sf898.swift:43:9:\
    \ error: invalid redeclaration of 'l'\n    var l = 0\n        ^\n/tmp/tmphu0sf898.swift:17:9:\
    \ note: 'l' previously declared here\n    var l = 0\n        ^\n/tmp/tmphu0sf898.swift:44:9:\
    \ error: invalid redeclaration of 'm'\n    var m = 0\n        ^\n/tmp/tmphu0sf898.swift:18:9:\
    \ note: 'm' previously declared here\n    var m = 0\n        ^\n/tmp/tmphu0sf898.swift:45:9:\
    \ error: invalid redeclaration of 'n'\n    var n = 0\n        ^\n/tmp/tmphu0sf898.swift:19:9:\
    \ note: 'n' previously declared here\n    var n = 0\n        ^\n/tmp/tmphu0sf898.swift:46:9:\
    \ error: invalid redeclaration of 'o'\n    var o = 0\n        ^\n/tmp/tmphu0sf898.swift:20:9:\
    \ note: 'o' previously declared here\n    var o = 0\n        ^\n/tmp/tmphu0sf898.swift:47:9:\
    \ error: invalid redeclaration of 'p'\n    var p = 0\n        ^\n/tmp/tmphu0sf898.swift:21:9:\
    \ note: 'p' previously declared here\n    var p = 0\n        ^\n/tmp/tmphu0sf898.swift:48:9:\
    \ error: invalid redeclaration of 'q'\n    var q = 0\n        ^\n/tmp/tmphu0sf898.swift:22:9:\
    \ note: 'q' previously declared here\n    var q = 0\n        ^\n/tmp/tmphu0sf898.swift:49:9:\
    \ error: invalid redeclaration of 'r'\n    var r = 0\n        ^\n/tmp/tmphu0sf898.swift:23:9:\
    \ note: 'r' previously declared here\n    var r = 0\n        ^\n/tmp/tmphu0sf898.swift:50:9:\
    \ error: invalid redeclaration of 's'\n    var s = 0\n        ^\n/tmp/tmphu0sf898.swift:24:9:\
    \ note: 's' previously declared here\n    var s = 0\n        ^\n/tmp/tmphu0sf898.swift:51:9:\
    \ error: invalid redeclaration of 't'\n    var t = 0\n        ^\n/tmp/tmphu0s"
  stdout: ''
  timestamp: 1659824944
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: game.count)\n    for i in 0..<game.count\
    \ {\n        result[i] = abs(game[i] - guess[i])\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824943
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var score = 0\n    var guess = 0\n    var i = 0\n    var\
    \ j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o\
    \ = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t =\
    \ 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n\
    \    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n \
    \   var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n  \
    \  var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n   \
    \ var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var\
    \ t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y\
    \ = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d =\
    \ 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n\
    \    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n \
    \   var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n  \
    \  var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n   \
    \ var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var\
    \ d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i\
    \ = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n =\
    \ 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n\
    \    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n \
    \   var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n  \
    \  var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n   \
    \ var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var\
    \ n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s\
    \ = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x =\
    \ 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n\
    \    var d = 0\n    var e = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpxhhnb_s2.swift:42:9: error: invalid redeclaration of 'i'\n    var\
    \ i = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:16:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:43:9: error: invalid\
    \ redeclaration of 'j'\n    var j = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:17:9:\
    \ note: 'j' previously declared here\n    var j = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:44:9:\
    \ error: invalid redeclaration of 'k'\n    var k = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:18:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:45:9:\
    \ error: invalid redeclaration of 'l'\n    var l = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:19:9:\
    \ note: 'l' previously declared here\n    var l = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:46:9:\
    \ error: invalid redeclaration of 'm'\n    var m = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:20:9:\
    \ note: 'm' previously declared here\n    var m = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:47:9:\
    \ error: invalid redeclaration of 'n'\n    var n = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:21:9:\
    \ note: 'n' previously declared here\n    var n = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:48:9:\
    \ error: invalid redeclaration of 'o'\n    var o = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:22:9:\
    \ note: 'o' previously declared here\n    var o = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:49:9:\
    \ error: invalid redeclaration of 'p'\n    var p = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:23:9:\
    \ note: 'p' previously declared here\n    var p = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:50:9:\
    \ error: invalid redeclaration of 'q'\n    var q = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:24:9:\
    \ note: 'q' previously declared here\n    var q = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:51:9:\
    \ error: invalid redeclaration of 'r'\n    var r = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:25:9:\
    \ note: 'r' previously declared here\n    var r = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:52:9:\
    \ error: invalid redeclaration of 's'\n    var s = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:26:9:\
    \ note: 's' previously declared here\n    var s = 0\n        ^\n/tmp/tmpxhhnb_s2.swift:53:9:\
    \ error: invalid redeclaration of 't'\n    var t = 0\n        ^\n/tmp/tmpxhhn"
  stdout: ''
  timestamp: 1659824943
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var scores = [Int]()\n    var guesses = [Int]()\n    \n\
    \    for i in 0..<game.count {\n        guesses.append(guess[i])\n        scores.append(game[i])\n\
    \    }\n    \n    for i in 0..<guesses.count {\n        let score = scores[i]\n\
    \        let guess = guesses[i]\n        if score == guess {\n            result.append(0)\n\
    \        } else {\n            result.append(abs(score - guess))\n        }\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824944
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](count: guess.count, repeatedValue: 0)\n    for i in 0..<guess.count\
    \ {\n        result[i] = abs(game[i] - guess[i])\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpc99hbpk0.swift:13:18: error: no exact matches in call to initializer\
    \ \n    var result = [Int](count: guess.count, repeatedValue: 0)\n           \
    \      ^\n/tmp/tmpc99hbpk0.swift:13:18: note: candidate has partially matching\
    \ parameter list (repeating: Int, count: Int)\n    var result = [Int](count: guess.count,\
    \ repeatedValue: 0)\n                 ^\n/tmp/tmpc99hbpk0.swift:13:18: note: candidate\
    \ has partially matching parameter list (repeating: Int, count: Int)\n    var\
    \ result = [Int](count: guess.count, repeatedValue: 0)\n                 ^\n"
  stdout: ''
  timestamp: 1659824943
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: guess.count)\n    var i = 0\n    for _ in\
    \ 0..<guess.count {\n        if game[i] == guess[i] {\n            result[i] =\
    \ 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n     \
    \   }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) ==\
    \ [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess:\
    \ [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1,\
    \ 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824944
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: game.count)\n    var scores = [Int](repeating:\
    \ 0, count: game.count)\n    var guesses = [Int](repeating: 0, count: game.count)\n\
    \    \n    for i in 0..<game.count {\n        scores[i] = game[i]\n        guesses[i]\
    \ = guess[i]\n    }\n    \n    for i in 0..<game.count {\n        if guesses[i]\
    \ == scores[i] {\n            result[i] = 0\n        } else {\n            result[i]\
    \ = abs(guesses[i] - scores[i])\n        }\n    }\n    \n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824943
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var i = 0\n    var j = 0\n    while i < game.count &&\
    \ j < guess.count {\n        if game[i] == guess[j] {\n            result.append(0)\n\
    \            i += 1\n            j += 1\n        } else if game[i] > guess[j]\
    \ {\n            result.append(abs(game[i] - guess[j]))\n            i += 1\n\
    \        } else {\n            result.append(abs(guess[j] - game[i]))\n      \
    \      j += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpnl9k3rrk/tmpnl9k3rrk.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e2e500c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e2e1f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e2e1f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e2e1f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnl9k3rrk                        0x00005590f87db6a4 <unavailable> + 5796

    5    libc.so.6                          0x00002b7e2e6ec460 __libc_start_main +
    245

    6    tmpnl9k3rrk                        0x00005590f87db219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659824943
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var score = 0\n    var guess = 0\n    for _ in 0..<guess.count\
    \ {\n        guess = guess[guess]\n        score += game[guess]\n        result.append(abs(score\
    \ - guess))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0,\
    \ 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0,\
    \ 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess: [-1, -2,\
    \ -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1, 2, 3, 4])\
    \ == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp868sp2f5.swift:16:24: error: value of type 'Int' has no member\
    \ 'count'\n    for _ in 0..<guess.count {\n                 ~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824944
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var scores = [Int]()\n    var guesses = [Int]()\n    var\
    \ gameScore = 0\n    var guessesScore = 0\n    var gameGuess = 0\n    var guessesGuess\
    \ = 0\n    var gameDiff = 0\n    var guessesDiff = 0\n    var gameDiffIndex =\
    \ 0\n    var guessesDiffIndex = 0\n    var gameDiffIndex2 = 0\n    var guessesDiffIndex2\
    \ = 0\n    var gameDiffIndex3 = 0\n    var guessesDiffIndex3 = 0\n    var gameDiffIndex4\
    \ = 0\n    var guessesDiffIndex4 = 0\n    var gameDiffIndex5 = 0\n    var guessesDiffIndex5\
    \ = 0\n    var gameDiffIndex6 = 0\n    var guessesDiffIndex6 = 0\n    var gameDiffIndex7\
    \ = 0\n    var guessesDiffIndex7 = 0\n    var gameDiffIndex8 = 0\n    var guessesDiffIndex8\
    \ = 0\n    var gameDiffIndex9 = 0\n    var guessesDiffIndex9 = 0\n    var gameDiffIndex10\
    \ = 0\n    var guessesDiffIndex10 = 0\n    var gameDiffIndex11 = 0\n    var guessesDiffIndex11\
    \ = 0\n    var gameDiffIndex12 = 0\n    var guessesDiffIndex12 = 0\n    var gameDiffIndex13\
    \ = 0\n    var guessesDiffIndex13 = 0\n    var gameDiffIndex14 = 0\n    var guessesDiffIndex14\
    \ = 0\n    var gameDiffIndex15 = 0\n    var guessesDiffIndex15 = 0\n    var gameDiffIndex16\
    \ = 0\n    var guessesDiffIndex16 = 0\n    var gameDiffIndex17 = 0\n    var guessesDiffIndex17\
    \ = 0\n    var gameDiffIndex18 = 0\n    var guessesDiffIndex18 = 0\n    var gameDiffIndex19\
    \ = 0\n    var guessesDiffIndex19 = 0\n    var gameDiffIndex20 = 0\n    var guessesDiffIndex20\
    \ = 0\n    var gameDiffIndex21 = 0\n    var guessesDiffIndex21 = 0\n    var gameDiffIndex22\
    \ = 0\n    var guessesDiffIndex22 = 0\n    var gameDiffIndex23 = 0\n    var guessesDiffIndex23\
    \ = 0\n    var gameDiffIndex24 = 0\n    var guessesDiffIndex24 = 0\n    var gameDiffIndex25\
    \ = 0\n    var guessesDiffIndex25 = 0\n    var gameDiffIndex26 = 0\n    var guessesDiffIndex26\
    \ = 0\n    var gameDiffIndex27 = 0\n    var guessesDiffIndex27 = 0\n    var gameDiffIndex28\
    \ = 0\n    var guessesDiffIndex28 = 0\n    var gameDiffIndex29 = 0\n    var guessesDiffIndex29\
    \ = 0\n    var gameDiffIndex30 = 0\n    var guessesDiffIndex30 = 0\n    var gameDiffIndex31\
    \ = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2, 3,\
    \ 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpcxeouqnb.swift:13:9: warning: initialization of variable 'result'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var result = [Int]()\n    ~~~~^~~~~~\n    _\n/tmp/tmpcxeouqnb.swift:14:9:\
    \ warning: initialization of variable 'scores' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var scores = [Int]()\n    ~~~~^~~~~~\n\
    \    _\n/tmp/tmpcxeouqnb.swift:15:9: warning: initialization of variable 'guesses'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var guesses = [Int]()\n    ~~~~^~~~~~~\n    _\n/tmp/tmpcxeouqnb.swift:16:9:\
    \ warning: initialization of variable 'gameScore' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var gameScore = 0\n    ~~~~^~~~~~~~~\n\
    \    _\n/tmp/tmpcxeouqnb.swift:17:9: warning: initialization of variable 'guessesScore'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var guessesScore = 0\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpcxeouqnb.swift:18:9:\
    \ warning: initialization of variable 'gameGuess' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var gameGuess = 0\n    ~~~~^~~~~~~~~\n\
    \    _\n/tmp/tmpcxeouqnb.swift:19:9: warning: initialization of variable 'guessesGuess'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var guessesGuess = 0\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpcxeouqnb.swift:20:9:\
    \ warning: initialization of variable 'gameDiff' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var gameDiff = 0\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmpcxeouqnb.swift:21:9: warning: initialization of variable 'guessesDiff'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var guessesDiff = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpcxeouqnb.swift:22:9:\
    \ warning: initialization of variable 'gameDiffIndex' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var gameDiffIndex = 0\n\
    \    ~~~~^~~~~~~~~~~~~\n    _\n/tmp/tmpcxeouqnb.swift:23:9: warning: initialization\
    \ of varia"
  stdout: ''
  timestamp: 1659824944
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: guess.count)\n    for i in 0..<guess.count\
    \ {\n        result[i] = abs(game[i] - guess[i])\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824943
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var i = 0\n    var j = 0\n    while i < game.count &&\
    \ j < guess.count {\n        if game[i] == guess[j] {\n            result.append(0)\n\
    \            i += 1\n            j += 1\n        } else if game[i] > guess[j]\
    \ {\n            result.append(abs(game[i] - guess[j]))\n            i += 1\n\
    \        } else {\n            result.append(abs(guess[j] - game[i]))\n      \
    \      j += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpnl9k3rrk/tmpnl9k3rrk.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e2e500c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e2e1f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e2e1f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e2e1f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnl9k3rrk                        0x00005590f87db6a4 <unavailable> + 5796

    5    libc.so.6                          0x00002b7e2e6ec460 __libc_start_main +
    245

    6    tmpnl9k3rrk                        0x00005590f87db219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659824943
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var i = 0\n    var j = 0\n    var score = 0\n    var guess\
    \ = 0\n    var correct = 0\n    var wrong = 0\n    \n    while i < game.count\
    \ && j < guess.count {\n        if game[i] == guess[j] {\n            score +=\
    \ game[i]\n            i += 1\n            j += 1\n        } else {\n        \
    \    if game[i] > guess[j] {\n                score += game[i] - guess[j]\n  \
    \              i += 1\n            } else {\n                score += guess[j]\
    \ - game[i]\n                j += 1\n            }\n        }\n    }\n    \n \
    \   if i == game.count {\n        correct = j - i\n    } else {\n        wrong\
    \ = j - i\n    }\n    \n    if correct == 0 {\n        result = [Int]()\n    }\
    \ else {\n        result = [Int](repeating: score, count: game.count)\n    }\n\
    \    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(compare(game:\
    \ [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpn99wzkk8.swift:21:39: error: value of type 'Int' has no member\
    \ 'count'\n    while i < game.count && j < guess.count {\n                   \
    \             ~~~~~ ^~~~~\n/tmp/tmpn99wzkk8.swift:22:28: error: value of type\
    \ 'Int' has no subscripts\n        if game[i] == guess[j] {\n                \
    \      ~~~~~^\n/tmp/tmpn99wzkk8.swift:27:31: error: value of type 'Int' has no\
    \ subscripts\n            if game[i] > guess[j] {\n                         ~~~~~^\n\
    /tmp/tmpn99wzkk8.swift:28:41: error: value of type 'Int' has no subscripts\n \
    \               score += game[i] - guess[j]\n                                \
    \   ~~~~~^\n/tmp/tmpn99wzkk8.swift:31:31: error: value of type 'Int' has no subscripts\n\
    \                score += guess[j] - game[i]\n                         ~~~~~^\n"
  stdout: ''
  timestamp: 1659824944
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](count: guess.count, repeatedValue: 0)\n    for i in 0..<guess.count\
    \ {\n        result[i] = abs(game[i] - guess[i])\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpc99hbpk0.swift:13:18: error: no exact matches in call to initializer\
    \ \n    var result = [Int](count: guess.count, repeatedValue: 0)\n           \
    \      ^\n/tmp/tmpc99hbpk0.swift:13:18: note: candidate has partially matching\
    \ parameter list (repeating: Int, count: Int)\n    var result = [Int](count: guess.count,\
    \ repeatedValue: 0)\n                 ^\n/tmp/tmpc99hbpk0.swift:13:18: note: candidate\
    \ has partially matching parameter list (repeating: Int, count: Int)\n    var\
    \ result = [Int](count: guess.count, repeatedValue: 0)\n                 ^\n"
  stdout: ''
  timestamp: 1659824943
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var scores = [Int]()\n    for i in 0..<game.count {\n\
    \        scores[i] = game[i]\n    }\n    for i in 0..<guess.count {\n        result[i]\
    \ = guess[i] - scores[i]\n    }\n    for i in 0..<guess.count {\n        if result[i]\
    \ < 0 {\n            result[i] = 0\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002afcc8d7fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afcc8a76561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002afcc8a76286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002afcc8a7613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002afcc8a75bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002afcc88757ec <unavailable> + 186348

    6    tmpckz68uzy                        0x000055f34e01fe79 <unavailable> + 7801

    7    tmpckz68uzy                        0x000055f34e01f633 <unavailable> + 5683

    8    libc.so.6                          0x00002afcc8f6b460 __libc_start_main +
    245

    9    tmpckz68uzy                        0x000055f34e01f2a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1659824944
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: game.count)\n    for i in 0..<game.count\
    \ {\n        if game[i] == guess[i] {\n            result[i] = 0\n        } else\
    \ {\n            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824943
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: guess.count)\n    \n    for i in 0..<guess.count\
    \ {\n        if game[i] == guess[i] {\n            result[i] = 0\n        } else\
    \ {\n            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824943
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var i = 0\n    var j = 0\n    while i < game.count &&\
    \ j < guess.count {\n        if game[i] == guess[j] {\n            result.append(0)\n\
    \            i += 1\n            j += 1\n        } else if game[i] > guess[j]\
    \ {\n            result.append(abs(game[i] - guess[j]))\n            i += 1\n\
    \        } else {\n            result.append(abs(guess[j] - game[i]))\n      \
    \      j += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpnl9k3rrk/tmpnl9k3rrk.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e2e500c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e2e1f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e2e1f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e2e1f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnl9k3rrk                        0x00005590f87db6a4 <unavailable> + 5796

    5    libc.so.6                          0x00002b7e2e6ec460 __libc_start_main +
    245

    6    tmpnl9k3rrk                        0x00005590f87db219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659824943
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: game.count)\n    var i = 0\n    for j in\
    \ 0..<game.count {\n        if game[j] == guess[j] {\n            result[i] =\
    \ 0\n        } else {\n            result[i] = abs(game[j] - guess[j])\n     \
    \   }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) ==\
    \ [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess:\
    \ [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1,\
    \ 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824944
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: game.count)\n    for i in 0..<game.count\
    \ {\n        result[i] = abs(game[i] - guess[i])\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824943
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var scores = [Int]()\n    var guesses = [Int]()\n    \n\
    \    for i in 0..<game.count {\n        guesses.append(guess[i])\n        scores.append(game[i])\n\
    \    }\n    \n    for i in 0..<guesses.count {\n        let guess = guesses[i]\n\
    \        let score = scores[i]\n        let diff = abs(guess - score)\n      \
    \  if diff == 0 {\n            result.append(0)\n        } else {\n          \
    \  result.append(diff)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4,\
    \ 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824944
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var score = 0\n    for i in 0..<guess.count {\n      \
    \  if game[i] == guess[i] {\n            score += game[i]\n        } else {\n\
    \            result.append(abs(game[i] - guess[i]))\n        }\n    }\n    if\
    \ score == 0 {\n        result.append(0)\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpdkiy0afo/tmpdkiy0afo.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0e50bb8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0e508afb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0e508af988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0e508ae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdkiy0afo                        0x000055deef188824 <unavailable> + 6180

    5    libc.so.6                          0x00002b0e50da4460 __libc_start_main +
    245

    6    tmpdkiy0afo                        0x000055deef188399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824944
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var scores = [Int]()\n    var guesses = [Int]()\n    var\
    \ i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n\
    \ = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s =\
    \ 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n\
    \    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n \
    \   var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n  \
    \  var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n   \
    \ var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var\
    \ s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x\
    \ = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c =\
    \ 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n\
    \    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n \
    \   var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n  \
    \  var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n   \
    \ var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var\
    \ c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h\
    \ = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m =\
    \ 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n\
    \    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n \
    \   var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n  \
    \  var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n   \
    \ var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var\
    \ m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r\
    \ = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w =\
    \ 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n\
    \    var c = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp9xihw3q3.swift:42:9: error: invalid redeclaration of 'i'\n    var\
    \ i = 0\n        ^\n/tmp/tmp9xihw3q3.swift:16:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmp9xihw3q3.swift:43:9: error: invalid\
    \ redeclaration of 'j'\n    var j = 0\n        ^\n/tmp/tmp9xihw3q3.swift:17:9:\
    \ note: 'j' previously declared here\n    var j = 0\n        ^\n/tmp/tmp9xihw3q3.swift:44:9:\
    \ error: invalid redeclaration of 'k'\n    var k = 0\n        ^\n/tmp/tmp9xihw3q3.swift:18:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmp9xihw3q3.swift:45:9:\
    \ error: invalid redeclaration of 'l'\n    var l = 0\n        ^\n/tmp/tmp9xihw3q3.swift:19:9:\
    \ note: 'l' previously declared here\n    var l = 0\n        ^\n/tmp/tmp9xihw3q3.swift:46:9:\
    \ error: invalid redeclaration of 'm'\n    var m = 0\n        ^\n/tmp/tmp9xihw3q3.swift:20:9:\
    \ note: 'm' previously declared here\n    var m = 0\n        ^\n/tmp/tmp9xihw3q3.swift:47:9:\
    \ error: invalid redeclaration of 'n'\n    var n = 0\n        ^\n/tmp/tmp9xihw3q3.swift:21:9:\
    \ note: 'n' previously declared here\n    var n = 0\n        ^\n/tmp/tmp9xihw3q3.swift:48:9:\
    \ error: invalid redeclaration of 'o'\n    var o = 0\n        ^\n/tmp/tmp9xihw3q3.swift:22:9:\
    \ note: 'o' previously declared here\n    var o = 0\n        ^\n/tmp/tmp9xihw3q3.swift:49:9:\
    \ error: invalid redeclaration of 'p'\n    var p = 0\n        ^\n/tmp/tmp9xihw3q3.swift:23:9:\
    \ note: 'p' previously declared here\n    var p = 0\n        ^\n/tmp/tmp9xihw3q3.swift:50:9:\
    \ error: invalid redeclaration of 'q'\n    var q = 0\n        ^\n/tmp/tmp9xihw3q3.swift:24:9:\
    \ note: 'q' previously declared here\n    var q = 0\n        ^\n/tmp/tmp9xihw3q3.swift:51:9:\
    \ error: invalid redeclaration of 'r'\n    var r = 0\n        ^\n/tmp/tmp9xihw3q3.swift:25:9:\
    \ note: 'r' previously declared here\n    var r = 0\n        ^\n/tmp/tmp9xihw3q3.swift:52:9:\
    \ error: invalid redeclaration of 's'\n    var s = 0\n        ^\n/tmp/tmp9xihw3q3.swift:26:9:\
    \ note: 's' previously declared here\n    var s = 0\n        ^\n/tmp/tmp9xihw3q3.swift:53:9:\
    \ error: invalid redeclaration of 't'\n    var t = 0\n        ^\n/tmp/tmp9xih"
  stdout: ''
  timestamp: 1659824943
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: game.count)\n    for i in 0..<game.count\
    \ {\n        if game[i] == guess[i] {\n            result[i] = 0\n        } else\
    \ {\n            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824943
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var i = 0\n    var j = 0\n    while i < game.count &&\
    \ j < guess.count {\n        if game[i] == guess[j] {\n            result.append(0)\n\
    \            i += 1\n            j += 1\n        } else if game[i] > guess[j]\
    \ {\n            result.append(abs(game[i] - guess[j]))\n            i += 1\n\
    \        } else {\n            result.append(abs(guess[j] - game[i]))\n      \
    \      j += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpnl9k3rrk/tmpnl9k3rrk.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e2e500c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e2e1f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e2e1f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e2e1f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnl9k3rrk                        0x00005590f87db6a4 <unavailable> + 5796

    5    libc.so.6                          0x00002b7e2e6ec460 __libc_start_main +
    245

    6    tmpnl9k3rrk                        0x00005590f87db219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659824943
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: game.count)\n    for i in 0..<game.count\
    \ {\n        result[i] = abs(game[i] - guess[i])\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824943
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var i = 0\n    var j = 0\n    while i < game.count &&\
    \ j < guess.count {\n        if game[i] == guess[j] {\n            result.append(0)\n\
    \            i += 1\n            j += 1\n        } else if game[i] > guess[j]\
    \ {\n            result.append(abs(game[i] - guess[j]))\n            i += 1\n\
    \        } else {\n            result.append(abs(guess[j] - game[i]))\n      \
    \      j += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpnl9k3rrk/tmpnl9k3rrk.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e2e500c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e2e1f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e2e1f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e2e1f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnl9k3rrk                        0x00005590f87db6a4 <unavailable> + 5796

    5    libc.so.6                          0x00002b7e2e6ec460 __libc_start_main +
    245

    6    tmpnl9k3rrk                        0x00005590f87db219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659824943
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: guess.count)\n    var scores = [Int](repeating:\
    \ 0, count: game.count)\n    \n    for i in 0..<guess.count {\n        scores[i]\
    \ = game[i]\n    }\n    \n    for i in 0..<game.count {\n        result[i] = guess[i]\n\
    \    }\n    \n    for i in 0..<guess.count {\n        if result[i] == scores[i]\
    \ {\n            result[i] = 0\n        } else {\n            result[i] = abs(result[i]\
    \ - scores[i])\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4,\
    \ 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824944
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: game.count)\n    for i in 0..<game.count\
    \ {\n        if game[i] == guess[i] {\n            result[i] = 0\n        } else\
    \ {\n            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824943
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: game.count)\n    for i in 0..<game.count\
    \ {\n        result[i] = abs(game[i] - guess[i])\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824943
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: game.count)\n    var index = 0\n    while\
    \ index < game.count {\n        if game[index] == guess[index] {\n           \
    \ result[index] = 0\n        } else {\n            result[index] = abs(game[index]\
    \ - guess[index])\n        }\n        index += 1\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824943
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var scores = [Int]()\n    var guesses = [Int]()\n    var\
    \ i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n\
    \ = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s =\
    \ 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n\
    \    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n \
    \   var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n  \
    \  var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n   \
    \ var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var\
    \ s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x\
    \ = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c =\
    \ 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n\
    \    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n \
    \   var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n  \
    \  var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n   \
    \ var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var\
    \ c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h\
    \ = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m =\
    \ 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n\
    \    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n \
    \   var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n  \
    \  var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n   \
    \ var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var\
    \ m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r\
    \ = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w =\
    \ 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n\
    \    var c = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp9xihw3q3.swift:42:9: error: invalid redeclaration of 'i'\n    var\
    \ i = 0\n        ^\n/tmp/tmp9xihw3q3.swift:16:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmp9xihw3q3.swift:43:9: error: invalid\
    \ redeclaration of 'j'\n    var j = 0\n        ^\n/tmp/tmp9xihw3q3.swift:17:9:\
    \ note: 'j' previously declared here\n    var j = 0\n        ^\n/tmp/tmp9xihw3q3.swift:44:9:\
    \ error: invalid redeclaration of 'k'\n    var k = 0\n        ^\n/tmp/tmp9xihw3q3.swift:18:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmp9xihw3q3.swift:45:9:\
    \ error: invalid redeclaration of 'l'\n    var l = 0\n        ^\n/tmp/tmp9xihw3q3.swift:19:9:\
    \ note: 'l' previously declared here\n    var l = 0\n        ^\n/tmp/tmp9xihw3q3.swift:46:9:\
    \ error: invalid redeclaration of 'm'\n    var m = 0\n        ^\n/tmp/tmp9xihw3q3.swift:20:9:\
    \ note: 'm' previously declared here\n    var m = 0\n        ^\n/tmp/tmp9xihw3q3.swift:47:9:\
    \ error: invalid redeclaration of 'n'\n    var n = 0\n        ^\n/tmp/tmp9xihw3q3.swift:21:9:\
    \ note: 'n' previously declared here\n    var n = 0\n        ^\n/tmp/tmp9xihw3q3.swift:48:9:\
    \ error: invalid redeclaration of 'o'\n    var o = 0\n        ^\n/tmp/tmp9xihw3q3.swift:22:9:\
    \ note: 'o' previously declared here\n    var o = 0\n        ^\n/tmp/tmp9xihw3q3.swift:49:9:\
    \ error: invalid redeclaration of 'p'\n    var p = 0\n        ^\n/tmp/tmp9xihw3q3.swift:23:9:\
    \ note: 'p' previously declared here\n    var p = 0\n        ^\n/tmp/tmp9xihw3q3.swift:50:9:\
    \ error: invalid redeclaration of 'q'\n    var q = 0\n        ^\n/tmp/tmp9xihw3q3.swift:24:9:\
    \ note: 'q' previously declared here\n    var q = 0\n        ^\n/tmp/tmp9xihw3q3.swift:51:9:\
    \ error: invalid redeclaration of 'r'\n    var r = 0\n        ^\n/tmp/tmp9xihw3q3.swift:25:9:\
    \ note: 'r' previously declared here\n    var r = 0\n        ^\n/tmp/tmp9xihw3q3.swift:52:9:\
    \ error: invalid redeclaration of 's'\n    var s = 0\n        ^\n/tmp/tmp9xihw3q3.swift:26:9:\
    \ note: 's' previously declared here\n    var s = 0\n        ^\n/tmp/tmp9xihw3q3.swift:53:9:\
    \ error: invalid redeclaration of 't'\n    var t = 0\n        ^\n/tmp/tmp9xih"
  stdout: ''
  timestamp: 1659824943
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var i = 0\n    var j = 0\n    var k = 0\n    while i <\
    \ game.count && j < guess.count {\n        if game[i] == guess[j] {\n        \
    \    result[k] = game[i] - guess[j]\n            i += 1\n            j += 1\n\
    \            k += 1\n        } else if game[i] > guess[j] {\n            result[k]\
    \ = guess[j] - game[i]\n            i += 1\n            j += 1\n            k\
    \ += 1\n        } else {\n            result[k] = game[i] - guess[j]\n       \
    \     i += 1\n            j += 1\n            k += 1\n        }\n    }\n    while\
    \ i < game.count {\n        result[k] = game[i] - guess[j]\n        i += 1\n \
    \       j += 1\n        k += 1\n    }\n    while j < guess.count {\n        result[k]\
    \ = guess[j] - game[i]\n        i += 1\n        j += 1\n        k += 1\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b10a32a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b10a2f97561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b10a2f97286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b10a2f9713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b10a2f96bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b10a2d967ec <unavailable> + 186348

    6    tmpftphwhkl                        0x000055e77d663cfd <unavailable> + 7421

    7    tmpftphwhkl                        0x000055e77d6634b3 <unavailable> + 5299

    8    libc.so.6                          0x00002b10a348c460 __libc_start_main +
    245

    9    tmpftphwhkl                        0x000055e77d663129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824944
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: game.count)\n    var i = 0\n    for j in\
    \ 0..<game.count {\n        if game[j] == guess[j] {\n            result[i] =\
    \ 0\n        } else {\n            result[i] = abs(game[j] - guess[j])\n     \
    \   }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) ==\
    \ [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess: [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3], guess:\
    \ [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess: [-1,\
    \ 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824944
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: game.count)\n    for i in 0..<game.count\
    \ {\n        if game[i] == guess[i] {\n            result[i] = 0\n        } else\
    \ {\n            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824943
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: game.count)\n    var scores = [Int](repeating:\
    \ 0, count: game.count)\n    for i in 0..<game.count {\n        scores[i] = abs(game[i]\
    \ - guess[i])\n    }\n    for i in 0..<game.count {\n        if scores[i] == 0\
    \ {\n            result[i] = 0\n        } else {\n            result[i] = abs(scores[i]\
    \ - guess[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'tmpm04kem43/tmpm04kem43.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbfc73ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbfc431b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbfc431988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbfc4307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm04kem43                        0x000055ba96206834 <unavailable> + 6196

    5    libc.so.6                          0x00002adbfc926460 __libc_start_main +
    245

    6    tmpm04kem43                        0x000055ba962063a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659824943
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: game.count)\n    for i in 0..<game.count\
    \ {\n        if game[i] == guess[i] {\n            result[i] = 0\n        } else\
    \ {\n            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824943
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var scores = [Int]()\n    var guesses = [Int]()\n    var\
    \ i = 0\n    var j = 0\n    var k = 0\n    var m = 0\n    var n = 0\n    var o\
    \ = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t =\
    \ 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n\
    \    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n \
    \   var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n  \
    \  var j = 0\n    var k = 0\n    var m = 0\n    var n = 0\n    var o = 0\n   \
    \ var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var\
    \ u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z\
    \ = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e =\
    \ 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n\
    \    var k = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n \
    \   var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n  \
    \  var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n   \
    \ var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var\
    \ f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k\
    \ = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q =\
    \ 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n\
    \    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n \
    \   var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n  \
    \  var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n   \
    \ var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var\
    \ r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w\
    \ = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b =\
    \ 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n\
    \    var h = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpm8naid9_.swift:41:9: error: invalid redeclaration of 'i'\n    var\
    \ i = 0\n        ^\n/tmp/tmpm8naid9_.swift:16:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmpm8naid9_.swift:42:9: error: invalid\
    \ redeclaration of 'j'\n    var j = 0\n        ^\n/tmp/tmpm8naid9_.swift:17:9:\
    \ note: 'j' previously declared here\n    var j = 0\n        ^\n/tmp/tmpm8naid9_.swift:43:9:\
    \ error: invalid redeclaration of 'k'\n    var k = 0\n        ^\n/tmp/tmpm8naid9_.swift:18:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmpm8naid9_.swift:44:9:\
    \ error: invalid redeclaration of 'm'\n    var m = 0\n        ^\n/tmp/tmpm8naid9_.swift:19:9:\
    \ note: 'm' previously declared here\n    var m = 0\n        ^\n/tmp/tmpm8naid9_.swift:45:9:\
    \ error: invalid redeclaration of 'n'\n    var n = 0\n        ^\n/tmp/tmpm8naid9_.swift:20:9:\
    \ note: 'n' previously declared here\n    var n = 0\n        ^\n/tmp/tmpm8naid9_.swift:46:9:\
    \ error: invalid redeclaration of 'o'\n    var o = 0\n        ^\n/tmp/tmpm8naid9_.swift:21:9:\
    \ note: 'o' previously declared here\n    var o = 0\n        ^\n/tmp/tmpm8naid9_.swift:47:9:\
    \ error: invalid redeclaration of 'p'\n    var p = 0\n        ^\n/tmp/tmpm8naid9_.swift:22:9:\
    \ note: 'p' previously declared here\n    var p = 0\n        ^\n/tmp/tmpm8naid9_.swift:48:9:\
    \ error: invalid redeclaration of 'q'\n    var q = 0\n        ^\n/tmp/tmpm8naid9_.swift:23:9:\
    \ note: 'q' previously declared here\n    var q = 0\n        ^\n/tmp/tmpm8naid9_.swift:49:9:\
    \ error: invalid redeclaration of 'r'\n    var r = 0\n        ^\n/tmp/tmpm8naid9_.swift:24:9:\
    \ note: 'r' previously declared here\n    var r = 0\n        ^\n/tmp/tmpm8naid9_.swift:50:9:\
    \ error: invalid redeclaration of 's'\n    var s = 0\n        ^\n/tmp/tmpm8naid9_.swift:25:9:\
    \ note: 's' previously declared here\n    var s = 0\n        ^\n/tmp/tmpm8naid9_.swift:51:9:\
    \ error: invalid redeclaration of 't'\n    var t = 0\n        ^\n/tmp/tmpm8naid9_.swift:26:9:\
    \ note: 't' previously declared here\n    var t = 0\n        ^\n/tmp/tmpm8naid9_.swift:52:9:\
    \ error: invalid redeclaration of 'u'\n    var u = 0\n        ^\n/tmp/tmpm8na"
  stdout: ''
  timestamp: 1659824944
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: game.count)\n    for i in 0..<game.count\
    \ {\n        result[i] = abs(game[i] - guess[i])\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824943
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var scores = [Int]()\n    var guesses = [Int]()\n    var\
    \ i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n\
    \ = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s =\
    \ 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n\
    \    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n \
    \   var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n  \
    \  var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n   \
    \ var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var\
    \ s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x\
    \ = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c =\
    \ 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n\
    \    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n \
    \   var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n  \
    \  var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n   \
    \ var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var\
    \ c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h\
    \ = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m =\
    \ 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n\
    \    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n \
    \   var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n  \
    \  var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n   \
    \ var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var\
    \ m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r\
    \ = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w =\
    \ 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n\
    \    var c = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp9xihw3q3.swift:42:9: error: invalid redeclaration of 'i'\n    var\
    \ i = 0\n        ^\n/tmp/tmp9xihw3q3.swift:16:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmp9xihw3q3.swift:43:9: error: invalid\
    \ redeclaration of 'j'\n    var j = 0\n        ^\n/tmp/tmp9xihw3q3.swift:17:9:\
    \ note: 'j' previously declared here\n    var j = 0\n        ^\n/tmp/tmp9xihw3q3.swift:44:9:\
    \ error: invalid redeclaration of 'k'\n    var k = 0\n        ^\n/tmp/tmp9xihw3q3.swift:18:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmp9xihw3q3.swift:45:9:\
    \ error: invalid redeclaration of 'l'\n    var l = 0\n        ^\n/tmp/tmp9xihw3q3.swift:19:9:\
    \ note: 'l' previously declared here\n    var l = 0\n        ^\n/tmp/tmp9xihw3q3.swift:46:9:\
    \ error: invalid redeclaration of 'm'\n    var m = 0\n        ^\n/tmp/tmp9xihw3q3.swift:20:9:\
    \ note: 'm' previously declared here\n    var m = 0\n        ^\n/tmp/tmp9xihw3q3.swift:47:9:\
    \ error: invalid redeclaration of 'n'\n    var n = 0\n        ^\n/tmp/tmp9xihw3q3.swift:21:9:\
    \ note: 'n' previously declared here\n    var n = 0\n        ^\n/tmp/tmp9xihw3q3.swift:48:9:\
    \ error: invalid redeclaration of 'o'\n    var o = 0\n        ^\n/tmp/tmp9xihw3q3.swift:22:9:\
    \ note: 'o' previously declared here\n    var o = 0\n        ^\n/tmp/tmp9xihw3q3.swift:49:9:\
    \ error: invalid redeclaration of 'p'\n    var p = 0\n        ^\n/tmp/tmp9xihw3q3.swift:23:9:\
    \ note: 'p' previously declared here\n    var p = 0\n        ^\n/tmp/tmp9xihw3q3.swift:50:9:\
    \ error: invalid redeclaration of 'q'\n    var q = 0\n        ^\n/tmp/tmp9xihw3q3.swift:24:9:\
    \ note: 'q' previously declared here\n    var q = 0\n        ^\n/tmp/tmp9xihw3q3.swift:51:9:\
    \ error: invalid redeclaration of 'r'\n    var r = 0\n        ^\n/tmp/tmp9xihw3q3.swift:25:9:\
    \ note: 'r' previously declared here\n    var r = 0\n        ^\n/tmp/tmp9xihw3q3.swift:52:9:\
    \ error: invalid redeclaration of 's'\n    var s = 0\n        ^\n/tmp/tmp9xihw3q3.swift:26:9:\
    \ note: 's' previously declared here\n    var s = 0\n        ^\n/tmp/tmp9xihw3q3.swift:53:9:\
    \ error: invalid redeclaration of 't'\n    var t = 0\n        ^\n/tmp/tmp9xih"
  stdout: ''
  timestamp: 1659824943
- exit_code: -4
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var index = 0\n    while index < game.count {\n      \
    \  if game[index] == guess[index] {\n            result[index] = 0\n        }\
    \ else {\n            result[index] = abs(game[index] - guess[index])\n      \
    \  }\n        index += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0], guess:\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1, 2, 3],\
    \ guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5], guess:\
    \ [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b9036e9dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9036b94561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b9036b94286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b9036b9413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b9036b93bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b90369937ec <unavailable> + 186348

    6    tmpn4k8irvk                        0x000056000d159cbd <unavailable> + 7357

    7    tmpn4k8irvk                        0x000056000d159593 <unavailable> + 5523

    8    libc.so.6                          0x00002b9037089460 __libc_start_main +
    245

    9    tmpn4k8irvk                        0x000056000d159209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824944
- exit_code: 1
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var scores = [Int]()\n    var guesses = [Int]()\n    var\
    \ i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n\
    \ = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s =\
    \ 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n\
    \    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n \
    \   var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n  \
    \  var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n   \
    \ var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var\
    \ s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x\
    \ = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c =\
    \ 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n\
    \    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n \
    \   var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n  \
    \  var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n   \
    \ var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var\
    \ c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h\
    \ = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m =\
    \ 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n\
    \    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n \
    \   var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n  \
    \  var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n   \
    \ var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var\
    \ m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r\
    \ = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w =\
    \ 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n\
    \    var c = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(compare(game: [1,\
    \ 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp9xihw3q3.swift:42:9: error: invalid redeclaration of 'i'\n    var\
    \ i = 0\n        ^\n/tmp/tmp9xihw3q3.swift:16:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmp9xihw3q3.swift:43:9: error: invalid\
    \ redeclaration of 'j'\n    var j = 0\n        ^\n/tmp/tmp9xihw3q3.swift:17:9:\
    \ note: 'j' previously declared here\n    var j = 0\n        ^\n/tmp/tmp9xihw3q3.swift:44:9:\
    \ error: invalid redeclaration of 'k'\n    var k = 0\n        ^\n/tmp/tmp9xihw3q3.swift:18:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmp9xihw3q3.swift:45:9:\
    \ error: invalid redeclaration of 'l'\n    var l = 0\n        ^\n/tmp/tmp9xihw3q3.swift:19:9:\
    \ note: 'l' previously declared here\n    var l = 0\n        ^\n/tmp/tmp9xihw3q3.swift:46:9:\
    \ error: invalid redeclaration of 'm'\n    var m = 0\n        ^\n/tmp/tmp9xihw3q3.swift:20:9:\
    \ note: 'm' previously declared here\n    var m = 0\n        ^\n/tmp/tmp9xihw3q3.swift:47:9:\
    \ error: invalid redeclaration of 'n'\n    var n = 0\n        ^\n/tmp/tmp9xihw3q3.swift:21:9:\
    \ note: 'n' previously declared here\n    var n = 0\n        ^\n/tmp/tmp9xihw3q3.swift:48:9:\
    \ error: invalid redeclaration of 'o'\n    var o = 0\n        ^\n/tmp/tmp9xihw3q3.swift:22:9:\
    \ note: 'o' previously declared here\n    var o = 0\n        ^\n/tmp/tmp9xihw3q3.swift:49:9:\
    \ error: invalid redeclaration of 'p'\n    var p = 0\n        ^\n/tmp/tmp9xihw3q3.swift:23:9:\
    \ note: 'p' previously declared here\n    var p = 0\n        ^\n/tmp/tmp9xihw3q3.swift:50:9:\
    \ error: invalid redeclaration of 'q'\n    var q = 0\n        ^\n/tmp/tmp9xihw3q3.swift:24:9:\
    \ note: 'q' previously declared here\n    var q = 0\n        ^\n/tmp/tmp9xihw3q3.swift:51:9:\
    \ error: invalid redeclaration of 'r'\n    var r = 0\n        ^\n/tmp/tmp9xihw3q3.swift:25:9:\
    \ note: 'r' previously declared here\n    var r = 0\n        ^\n/tmp/tmp9xihw3q3.swift:52:9:\
    \ error: invalid redeclaration of 's'\n    var s = 0\n        ^\n/tmp/tmp9xihw3q3.swift:26:9:\
    \ note: 's' previously declared here\n    var s = 0\n        ^\n/tmp/tmp9xihw3q3.swift:53:9:\
    \ error: invalid redeclaration of 't'\n    var t = 0\n        ^\n/tmp/tmp9xih"
  stdout: ''
  timestamp: 1659824943
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: game.count)\n    for i in 0..<game.count\
    \ {\n        if game[i] == guess[i] {\n            result[i] = 0\n        } else\
    \ {\n            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(compare(game: [1, 2,\
    \ 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game:\
    \ [0, 0, 0, 0, 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
    \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
    \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824943
- exit_code: 0
  program: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
    /// event is finally known. The feelings and thoughts you have at that moment\
    \ are\n/// definitely worth noting down and comparing.\n/// Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n/// You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n/// Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n/// the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n/// example:\n\
    /// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var\
    \ result = [Int](repeating: 0, count: game.count)\n    for i in 0..<game.count\
    \ {\n        result[i] = abs(game[i] - guess[i])\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0, 0, 0],\
    \ guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game: [1,\
    \ 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3, 5],\
    \ guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824943
