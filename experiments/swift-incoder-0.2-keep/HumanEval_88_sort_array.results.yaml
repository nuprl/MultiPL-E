language: swift
name: HumanEval_88_sort_array
results:
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var sum = 0\n    for element in\
    \ array {\n        sum += element\n    }\n    if sum % 2 == 1 {\n        array.sort()\n\
    \    } else {\n        array.reverse()\n    }\n    return array\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpd305jr_9.swift:18:15: error: cannot use mutating member on immutable\
    \ value: 'array' is a 'let' constant\n        array.sort()\n        ~~~~~ ^\n\
    /tmp/tmpd305jr_9.swift:20:15: error: cannot use mutating member on immutable value:\
    \ 'array' is a 'let' constant\n        array.reverse()\n        ~~~~~ ^\n"
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var sum = 0\n    for value in array\
    \ {\n        sum += value\n    }\n    if sum % 2 == 1 {\n        array.sortInPlace()\n\
    \    } else {\n        array.sortInPlace()\n        array.reverse()\n    }\n \
    \   return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpudnv0ug6.swift:18:15: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n        array.sortInPlace()\n        ~~~~~ ^~~~~~~~~~~\n/tmp/tmpudnv0ug6.swift:20:15:\
    \ error: value of type '[Int]' has no member 'sortInPlace'\n        array.sortInPlace()\n\
    \        ~~~~~ ^~~~~~~~~~~\n/tmp/tmpudnv0ug6.swift:21:15: error: cannot use mutating\
    \ member on immutable value: 'array' is a 'let' constant\n        array.reverse()\n\
    \        ~~~~~ ^\n"
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for element in array {\n        sum += element\n    }\n    if sum %\
    \ 2 == 1 {\n        for element in array {\n            result.append(element)\n\
    \        }\n    } else {\n        for element in array {\n            result.append(element)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpvraxfsjd/tmpvraxfsjd.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adaeb00ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adaead05b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adaead05988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adaead047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvraxfsjd                        0x000055f982441896 <unavailable> + 6294

    5    libc.so.6                          0x00002adaeb1fa460 __libc_start_main +
    245

    6    tmpvraxfsjd                        0x000055f982441279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var sum = 0\n    for element in\
    \ array {\n        sum += element\n    }\n    if sum % 2 == 1 {\n        array.sort()\n\
    \    } else {\n        array.reverse()\n    }\n    return array\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpd305jr_9.swift:18:15: error: cannot use mutating member on immutable\
    \ value: 'array' is a 'let' constant\n        array.sort()\n        ~~~~~ ^\n\
    /tmp/tmpd305jr_9.swift:20:15: error: cannot use mutating member on immutable value:\
    \ 'array' is a 'let' constant\n        array.reverse()\n        ~~~~~ ^\n"
  stdout: ''
  timestamp: 1660014403
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var sum = 0\n    for element in\
    \ array {\n        sum += element\n    }\n    if sum % 2 == 1 {\n        array.sortInPlace()\n\
    \    } else {\n        array.sortInPlace()\n        array.reverse()\n    }\n \
    \   return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmptg6naigl.swift:18:15: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n        array.sortInPlace()\n        ~~~~~ ^~~~~~~~~~~\n/tmp/tmptg6naigl.swift:20:15:\
    \ error: value of type '[Int]' has no member 'sortInPlace'\n        array.sortInPlace()\n\
    \        ~~~~~ ^~~~~~~~~~~\n/tmp/tmptg6naigl.swift:21:15: error: cannot use mutating\
    \ member on immutable value: 'array' is a 'let' constant\n        array.reverse()\n\
    \        ~~~~~ ^\n"
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ < 2 {\n        return result\n    }\n    var sum = 0\n    for i in 0..<array.count\
    \ {\n        sum += array[i]\n    }\n    if sum % 2 == 1 {\n        result = result.sorted()\n\
    \    } else {\n        result = result.sorted().reversed()\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(array: []\
    \ as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp0e46956o/tmp0e46956o.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b970ee9bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b970eb92b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b970eb92988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b970eb917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0e46956o                        0x000055d62f149ab4 <unavailable> + 6836

    5    libc.so.6                          0x00002b970f087460 __libc_start_main +
    245

    6    tmp0e46956o                        0x000055d62f149309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ < 2 {\n        return result\n    }\n    var sum = 0\n    for i in 0..<array.count\
    \ {\n        sum += array[i]\n    }\n    if sum % 2 == 1 {\n        result = result.sorted()\n\
    \    } else {\n        result = result.sorted().reversed()\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(array: []\
    \ as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp0e46956o/tmp0e46956o.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b970ee9bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b970eb92b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b970eb92988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b970eb917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0e46956o                        0x000055d62f149ab4 <unavailable> + 6836

    5    libc.so.6                          0x00002b970f087460 __libc_start_main +
    245

    6    tmp0e46956o                        0x000055d62f149309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ < 2 {\n        return result\n    }\n    if array.count > 2 {\n        let sum\
    \ = (array[0] + array[array.count - 1]) / 2\n        if sum % 2 == 1 {\n     \
    \       result = array.reversed()\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpfwa23re2/tmpfwa23re2.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2aaa8eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2aaa5e5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2aaa5e5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2aaa5e47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfwa23re2                        0x000055d4badfe786 <unavailable> + 6022

    5    libc.so.6                          0x00002b2aaaada460 __libc_start_main +
    245

    6    tmpfwa23re2                        0x000055d4badfe169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    if array.count < 2 {\n        return\
    \ array\n    }\n    var sum = 0\n    for i in 0..<array.count {\n        sum +=\
    \ array[i]\n    }\n    if sum % 2 == 1 {\n        return array.sorted()\n    }\
    \ else {\n        return array.sorted().reversed()\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpt3kj3m5i/tmpt3kj3m5i.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2d1379ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2d13495b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2d13495988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2d134947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt3kj3m5i                        0x0000562b28f96ab4 <unavailable> + 6836

    5    libc.so.6                          0x00002b2d1398a460 __libc_start_main +
    245

    6    tmpt3kj3m5i                        0x0000562b28f96309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var sum = 0\n    for x in array\
    \ {\n        sum += x\n    }\n    if sum % 2 == 1 {\n        array.sortInPlace()\n\
    \    } else {\n        array.sortInPlace()\n        array.reverse()\n    }\n \
    \   return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpvavoi5c5.swift:18:15: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n        array.sortInPlace()\n        ~~~~~ ^~~~~~~~~~~\n/tmp/tmpvavoi5c5.swift:20:15:\
    \ error: value of type '[Int]' has no member 'sortInPlace'\n        array.sortInPlace()\n\
    \        ~~~~~ ^~~~~~~~~~~\n/tmp/tmpvavoi5c5.swift:21:15: error: cannot use mutating\
    \ member on immutable value: 'array' is a 'let' constant\n        array.reverse()\n\
    \        ~~~~~ ^\n"
  stdout: ''
  timestamp: 1660014403
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for element in array {\n        sum += element\n    }\n    if sum %\
    \ 2 == 1 {\n        result.sortInPlace()\n    } else {\n        result.sortInPlaceInReverse()\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpxtsts9g2.swift:19:16: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n        result.sortInPlace()\n        ~~~~~~ ^~~~~~~~~~~\n/tmp/tmpxtsts9g2.swift:21:16:\
    \ error: value of type '[Int]' has no member 'sortInPlaceInReverse'\n        result.sortInPlaceInReverse()\n\
    \        ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    if array.count < 2 {\n        return\
    \ array\n    }\n    var sum = 0\n    var last = 0\n    for index in 0..<array.count\
    \ {\n        sum += array[index]\n        if sum%2 == 1 {\n            last =\
    \ index\n        }\n    }\n    return sort_array(array[0..<last])\n        + [array[last]]\n\
    \        + sort_array(array[last+1..<array.count])\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpv34f4jke.swift:24:23: error: missing argument label 'array:' in\
    \ call\n    return sort_array(array[0..<last])\n                      ^\n    \
    \                  array: \n/tmp/tmpv34f4jke.swift:24:28: error: cannot convert\
    \ value of type 'ArraySlice<Int>' to expected argument type '[Int]'\n    return\
    \ sort_array(array[0..<last])\n                           ^\n/tmp/tmpv34f4jke.swift:26:22:\
    \ error: missing argument label 'array:' in call\n        + sort_array(array[last+1..<array.count])\n\
    \                     ^\n                     array: \n/tmp/tmpv34f4jke.swift:26:27:\
    \ error: cannot convert value of type 'ArraySlice<Int>' to expected argument type\
    \ '[Int]'\n        + sort_array(array[last+1..<array.count])\n               \
    \           ^\n"
  stdout: ''
  timestamp: 1660014403
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    if array.count < 2 {\n        return\
    \ array\n    }\n    var sum = 0\n    var temp = 0\n    var result = [Int]()\n\
    \    for index in 0..<array.count {\n        sum += array[index]\n        if sum%2\
    \ == 0 {\n            temp += array[index]\n        }\n    }\n    result.sortInPlace()\n\
    \    for index in 0..<array.count {\n        if sum%2 == 0 {\n            result.append(temp+array[index])\n\
    \        } else {\n            result.append(array[index])\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpl4a8vcmt.swift:25:12: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n    result.sortInPlace()\n    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014403
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    if array.count < 2 {\n        return\
    \ array\n    }\n    var sum = 0\n    for index in 0..<array.count {\n        sum\
    \ += array[index]\n    }\n    if sum % 2 == 1 {\n        array.sort { $0 > $1\
    \ }\n    } else {\n        array.sort { $0 < $1 }\n    }\n    return array\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpgbv8nogs.swift:21:15: error: cannot use mutating member on immutable\
    \ value: 'array' is a 'let' constant\n        array.sort { $0 > $1 }\n       \
    \ ~~~~~ ^\n/tmp/tmpgbv8nogs.swift:23:15: error: cannot use mutating member on\
    \ immutable value: 'array' is a 'let' constant\n        array.sort { $0 < $1 }\n\
    \        ~~~~~ ^\n"
  stdout: ''
  timestamp: 1660014403
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var sum = 0\n    for element in\
    \ array {\n        sum += element\n    }\n    if sum % 2 == 1 {\n        array.sort()\n\
    \    } else {\n        array.reverse()\n    }\n    return array\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpd305jr_9.swift:18:15: error: cannot use mutating member on immutable\
    \ value: 'array' is a 'let' constant\n        array.sort()\n        ~~~~~ ^\n\
    /tmp/tmpd305jr_9.swift:20:15: error: cannot use mutating member on immutable value:\
    \ 'array' is a 'let' constant\n        array.reverse()\n        ~~~~~ ^\n"
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for value in array {\n        sum += value\n    }\n    if sum % 2 ==\
    \ 0 {\n        for value in array {\n            result.append(value)\n      \
    \  }\n    } else {\n        for value in array {\n            result.append(value\
    \ - 1)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp_lazyvus/tmp_lazyvus.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af69aaa2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af69a799b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af69a799988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af69a7987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_lazyvus                        0x00005558b46b572d <unavailable> + 5933

    5    libc.so.6                          0x00002af69ac8e460 __libc_start_main +
    245

    6    tmp_lazyvus                        0x00005558b46b5279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    if array.count < 2 {\n        return\
    \ array\n    }\n    var sum = 0\n    var last = 0\n    for index in 0..<array.count\
    \ {\n        sum += array[index]\n        if sum%2 == 0 {\n            last =\
    \ index\n        }\n    }\n    return sort_array(array[0..<last])\n        + [array[index]\
    \ for index in 0..<last]\n        + sort_array(array[last..<array.count])\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmp5sc0vof3.swift:25:25: error: expected ',' separator\n        +\
    \ [array[index] for index in 0..<last]\n                        ^\n          \
    \             ,\n/tmp/tmp5sc0vof3.swift:25:25: error: expected expression in container\
    \ literal\n        + [array[index] for index in 0..<last]\n                  \
    \      ^\n/tmp/tmp5sc0vof3.swift:25:18: error: cannot find 'index' in scope\n\
    \        + [array[index] for index in 0..<last]\n                 ^~~~~\n/tmp/tmp5sc0vof3.swift:24:23:\
    \ error: missing argument label 'array:' in call\n    return sort_array(array[0..<last])\n\
    \                      ^\n                      array: \n/tmp/tmp5sc0vof3.swift:24:28:\
    \ error: cannot convert value of type 'ArraySlice<Int>' to expected argument type\
    \ '[Int]'\n    return sort_array(array[0..<last])\n                          \
    \ ^\n"
  stdout: ''
  timestamp: 1660014403
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    if array.count < 2 {\n        return\
    \ array\n    }\n    var sum = 0\n    for value in array {\n        sum += value\n\
    \    }\n    if sum % 2 == 1 {\n        array.sort { $0 < $1 }\n    } else {\n\
    \        array.sort { $0 > $1 }\n    }\n    return array\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpjddkhz3d.swift:21:15: error: cannot use mutating member on immutable\
    \ value: 'array' is a 'let' constant\n        array.sort { $0 < $1 }\n       \
    \ ~~~~~ ^\n/tmp/tmpjddkhz3d.swift:23:15: error: cannot use mutating member on\
    \ immutable value: 'array' is a 'let' constant\n        array.sort { $0 > $1 }\n\
    \        ~~~~~ ^\n"
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    if array.count < 2 {\n        return\
    \ array\n    }\n    var sum = 0\n    var temp = 0\n    var result = [Int]()\n\
    \    for index in 0..<array.count {\n        sum += array[index]\n        if sum\
    \ % 2 == 1 {\n            temp += array[index]\n        }\n    }\n    for index\
    \ in 0..<array.count {\n        if sum % 2 == 0 {\n            temp -= array[index]\n\
    \        }\n        result.append(array[index])\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpylh0i64_/tmpylh0i64_.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80e114dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80e0e44b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80e0e44988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80e0e437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpylh0i64_                        0x0000560cf68d98d6 <unavailable> + 6358

    5    libc.so.6                          0x00002b80e1339460 __libc_start_main +
    245

    6    tmpylh0i64_                        0x0000560cf68d92b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ < 2 {\n        return result\n    }\n    var sum = 0\n    for i in 0..<array.count\
    \ {\n        sum += array[i]\n    }\n    if sum % 2 == 1 {\n        result = result.sorted()\n\
    \    } else {\n        result = result.sorted().reversed()\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(array: []\
    \ as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp0e46956o/tmp0e46956o.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b970ee9bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b970eb92b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b970eb92988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b970eb917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0e46956o                        0x000055d62f149ab4 <unavailable> + 6836

    5    libc.so.6                          0x00002b970f087460 __libc_start_main +
    245

    6    tmp0e46956o                        0x000055d62f149309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    if array.count < 2 {\n        return\
    \ array\n    }\n    var sum = 0\n    var index = 0\n    var temp = 0\n    var\
    \ result = [Int]()\n    for element in array {\n        sum += element\n     \
    \   if sum > 0 {\n            temp += element\n        }\n        if sum % 2 ==\
    \ 0 {\n            result.append(element)\n        }\n        if sum % 2 == 1\
    \ {\n            result.append(element)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp1vu70yd4/tmp1vu70yd4.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab2f6633c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab2f632ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab2f632a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab2f63297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1vu70yd4                        0x000055a5bf48f8f6 <unavailable> + 6390

    5    libc.so.6                          0x00002ab2f681f460 __libc_start_main +
    245

    6    tmp1vu70yd4                        0x000055a5bf48f2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ > 0 {\n        let sum = array[0] + array[array.count - 1]\n        if sum %\
    \ 2 == 1 {\n            result = result.sorted()\n        } else {\n         \
    \   result = result.sorted().reversed()\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014403
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ > 1 {\n        let sum = (array[0] + array[array.count - 1]) / 2\n        if\
    \ sum % 2 == 1 {\n            result = result.sorted()\n        } else {\n   \
    \         result = result.sorted().reversed()\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014403
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ > 0 {\n        let sum = array[0]\n        for index in 1..<array.count {\n\
    \            sum += array[index]\n            if sum % 2 == 1 {\n            \
    \    result = result.sorted()\n            } else {\n                result =\
    \ result.sorted().reversed()\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpgahjq8ev.swift:17:17: error: left side of mutating operator isn't\
    \ mutable: 'sum' is a 'let' constant\n            sum += array[index]\n      \
    \      ~~~ ^\n/tmp/tmpgahjq8ev.swift:15:9: note: change 'let' to 'var' to make\
    \ it mutable\n        let sum = array[0]\n        ^~~\n        var\n"
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    if array.count < 2 {\n        return\
    \ array\n    }\n    var sum = 0\n    var result = [Int]()\n    for element in\
    \ array {\n        sum += element\n    }\n    if sum % 2 == 1 {\n        result.sortInPlace()\n\
    \    } else {\n        result.sortInPlace{ $0 < $1 }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmp68pts99h.swift:22:16: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n        result.sortInPlace()\n        ~~~~~~ ^~~~~~~~~~~\n/tmp/tmp68pts99h.swift:24:16:\
    \ error: value of type '[Int]' has no member 'sortInPlace'\n        result.sortInPlace{\
    \ $0 < $1 }\n        ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ > 1 {\n        let sum = (array[0] + array[array.count - 1]) / 2\n        if\
    \ sum % 2 == 1 {\n            result = result.sorted()\n        } else {\n   \
    \         result = result.sorted().reversed()\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ > 0 {\n        let sum = array.sum\n        if sum % 2 == 1 {\n            result\
    \ = result.sorted()\n        } else {\n            result = result.sorted().reversed()\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmp_v4cduw7.swift:15:25: error: value of type '[Int]' has no member\
    \ 'sum'\n        let sum = array.sum\n                  ~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660014403
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ < 2 {\n        return result\n    }\n    var sum = 0\n    for i in 0..<array.count\
    \ {\n        sum += array[i]\n    }\n    if sum % 2 == 0 {\n        result.sortInPlace()\n\
    \    } else {\n        result.sortInPlace{ $0 < $1 }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpzcybgzg5.swift:22:16: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n        result.sortInPlace()\n        ~~~~~~ ^~~~~~~~~~~\n/tmp/tmpzcybgzg5.swift:24:16:\
    \ error: value of type '[Int]' has no member 'sortInPlace'\n        result.sortInPlace{\
    \ $0 < $1 }\n        ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014403
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var sum = 0\n    for x in array\
    \ {\n        sum += x\n    }\n    if sum % 2 == 1 {\n        array.sort()\n  \
    \  } else {\n        array.reverse()\n    }\n    return array\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpa8_o63d1.swift:18:15: error: cannot use mutating member on immutable\
    \ value: 'array' is a 'let' constant\n        array.sort()\n        ~~~~~ ^\n\
    /tmp/tmpa8_o63d1.swift:20:15: error: cannot use mutating member on immutable value:\
    \ 'array' is a 'let' constant\n        array.reverse()\n        ~~~~~ ^\n"
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for element in array {\n        sum += element\n    }\n    if sum %\
    \ 2 == 1 {\n        result.sortInPlace()\n    } else {\n        result.sortInPlace()\n\
    \        result.reverse()\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpk36f16_b.swift:19:16: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n        result.sortInPlace()\n        ~~~~~~ ^~~~~~~~~~~\n/tmp/tmpk36f16_b.swift:21:16:\
    \ error: value of type '[Int]' has no member 'sortInPlace'\n        result.sortInPlace()\n\
    \        ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    if array.count < 2 {\n        return\
    \ array\n    }\n    var sum = 0\n    for index in 0..<array.count {\n        sum\
    \ += array[index]\n    }\n    if sum % 2 == 1 {\n        array.sortInPlace()\n\
    \    } else {\n        array.sortInPlace()\n        array.reverse()\n    }\n \
    \   return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmp0f7y4cv1.swift:21:15: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n        array.sortInPlace()\n        ~~~~~ ^~~~~~~~~~~\n/tmp/tmp0f7y4cv1.swift:23:15:\
    \ error: value of type '[Int]' has no member 'sortInPlace'\n        array.sortInPlace()\n\
    \        ~~~~~ ^~~~~~~~~~~\n/tmp/tmp0f7y4cv1.swift:24:15: error: cannot use mutating\
    \ member on immutable value: 'array' is a 'let' constant\n        array.reverse()\n\
    \        ~~~~~ ^\n"
  stdout: ''
  timestamp: 1660014403
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ < 2 {\n        return result\n    }\n    var sum = 0\n    for index in 0..<array.count\
    \ {\n        sum += array[index]\n    }\n    if sum % 2 == 0 {\n        array.sortInPlace()\n\
    \    } else {\n        array.sortInPlace{ $0 < $1 }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpvfkx0nxq.swift:22:15: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n        array.sortInPlace()\n        ~~~~~ ^~~~~~~~~~~\n/tmp/tmpvfkx0nxq.swift:24:15:\
    \ error: value of type '[Int]' has no member 'sortInPlace'\n        array.sortInPlace{\
    \ $0 < $1 }\n        ~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    if array.count < 2 {\n        return\
    \ array\n    }\n\n    var sum = 0\n    var temp = 0\n    var result = [Int]()\n\
    \    for element in array {\n        sum += element\n    }\n\n    for element\
    \ in array {\n        if sum%2 == 0 {\n            temp += element\n        }\
    \ else {\n            temp -= element\n        }\n        result.append(temp)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmphljy0uv3/tmphljy0uv3.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c060b3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c05daab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c05daa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c05da97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphljy0uv3                        0x00005562667d88f6 <unavailable> + 6390

    5    libc.so.6                          0x00002b8c0629f460 __libc_start_main +
    245

    6    tmphljy0uv3                        0x00005562667d82d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for element in array {\n        sum += element\n    }\n    if sum %\
    \ 2 == 1 {\n        for element in array {\n            result.append(element)\n\
    \        }\n    } else {\n        for element in array {\n            result.append(element)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpvraxfsjd/tmpvraxfsjd.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adaeb00ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adaead05b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adaead05988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adaead047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvraxfsjd                        0x000055f982441896 <unavailable> + 6294

    5    libc.so.6                          0x00002adaeb1fa460 __libc_start_main +
    245

    6    tmpvraxfsjd                        0x000055f982441279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for value in array {\n        sum += value\n    }\n    if sum % 2 ==\
    \ 1 {\n        result = array.sorted()\n    } else {\n        result = array.sorted(by:\
    \ >)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpiynme191/tmpiynme191.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf03fc2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf03cb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf03cb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf03cb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiynme191                        0x0000564aa659eae4 <unavailable> + 6884

    5    libc.so.6                          0x00002acf041ae460 __libc_start_main +
    245

    6    tmpiynme191                        0x0000564aa659e339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var sum = 0\n    for element in\
    \ array {\n        sum += element\n    }\n    if sum % 2 == 1 {\n        array.sortInPlace()\n\
    \    } else {\n        array.sortInPlace{ $0 < $1 }\n    }\n    return array\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpq9jek346.swift:18:15: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n        array.sortInPlace()\n        ~~~~~ ^~~~~~~~~~~\n/tmp/tmpq9jek346.swift:20:15:\
    \ error: value of type '[Int]' has no member 'sortInPlace'\n        array.sortInPlace{\
    \ $0 < $1 }\n        ~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014403
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    let sum\
    \ = array.reduce(0, combine: +)\n    if sum % 2 == 1 {\n        result = result.sorted()\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpfo8_u7t7.swift:14:27: error: extraneous argument label 'combine:'\
    \ in call\n    let sum = array.reduce(0, combine: +)\n                       \
    \   ^   ~~~~~~~~~\n                              \n"
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ < 2 {\n        return result\n    }\n    var sum = 0\n    for i in 0..<array.count\
    \ {\n        sum += array[i]\n    }\n    if sum % 2 == 1 {\n        result = result.sorted()\n\
    \    } else {\n        result = result.sorted().reversed()\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(array: []\
    \ as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp0e46956o/tmp0e46956o.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b970ee9bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b970eb92b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b970eb92988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b970eb917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0e46956o                        0x000055d62f149ab4 <unavailable> + 6836

    5    libc.so.6                          0x00002b970f087460 __libc_start_main +
    245

    6    tmp0e46956o                        0x000055d62f149309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ < 2 {\n        return result\n    }\n    var sum = 0\n    for i in 0..<array.count\
    \ {\n        sum += array[i]\n    }\n    if sum % 2 == 1 {\n        result = result.sorted()\n\
    \    } else {\n        result = result.sorted().reversed()\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(array: []\
    \ as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp0e46956o/tmp0e46956o.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b970ee9bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b970eb92b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b970eb92988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b970eb917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0e46956o                        0x000055d62f149ab4 <unavailable> + 6836

    5    libc.so.6                          0x00002b970f087460 __libc_start_main +
    245

    6    tmp0e46956o                        0x000055d62f149309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    if array.count < 2 {\n        return\
    \ array\n    }\n    var sum = 0\n    var index = 0\n    var lastIndex = array.count\
    \ - 1\n    var result = [Int]()\n    while index < lastIndex {\n        sum +=\
    \ array[index]\n        if sum % 2 == 0 {\n            result.append(array[index])\n\
    \        } else {\n            result.append(array[index])\n        }\n      \
    \  index++\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmppgv1krf1.swift:27:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        index++\n             ^~\n"
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for value in array {\n        sum += value\n    }\n    if sum % 2 ==\
    \ 1 {\n        result = array.sorted()\n    } else {\n        result = array.sorted().reversed()\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpkkao1ntf/tmpkkao1ntf.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5ad0ae6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5ad07ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5ad07dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5ad07dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkkao1ntf                        0x0000557a103e6ad4 <unavailable> + 6868

    5    libc.so.6                          0x00002b5ad0cd2460 __libc_start_main +
    245

    6    tmpkkao1ntf                        0x0000557a103e6329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ > 0 {\n        let sum = array[0] + array[array.count - 1]\n        if sum %\
    \ 2 == 1 {\n            result = result.sorted()\n        } else {\n         \
    \   result = result.sorted().reversed()\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    if array.count < 2 {\n        return\
    \ array\n    }\n    var sum = 0\n    for i in 0..<array.count {\n        sum +=\
    \ array[i]\n    }\n    if sum % 2 == 1 {\n        return array.sorted()\n    }\
    \ else {\n        return array.sorted().reversed()\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpt3kj3m5i/tmpt3kj3m5i.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2d1379ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2d13495b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2d13495988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2d134947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt3kj3m5i                        0x0000562b28f96ab4 <unavailable> + 6836

    5    libc.so.6                          0x00002b2d1398a460 __libc_start_main +
    245

    6    tmpt3kj3m5i                        0x0000562b28f96309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for value in array {\n        sum += value\n    }\n    if sum % 2 ==\
    \ 1 {\n        result = array.sorted()\n    } else {\n        result = array.sorted(by:\
    \ {$0 < $1})\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp3j7vjnif/tmp3j7vjnif.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac0c6616c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac0c630db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac0c630d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac0c630c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3j7vjnif                        0x0000556f105bbae4 <unavailable> + 6884

    5    libc.so.6                          0x00002ac0c6802460 __libc_start_main +
    245

    6    tmp3j7vjnif                        0x0000556f105bb339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ > 0 {\n        let sum = (array[0] + array[array.count - 1]) / 2\n        if\
    \ sum % 2 == 1 {\n            result = array.reversed()\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpali5kyrp/tmpali5kyrp.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0eaf571c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0eaf268b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0eaf268988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0eaf2677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpali5kyrp                        0x00005637f33e4786 <unavailable> + 6022

    5    libc.so.6                          0x00002b0eaf75d460 __libc_start_main +
    245

    6    tmpali5kyrp                        0x00005637f33e4169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var sum = 0\n    for element in\
    \ array {\n        sum += element\n    }\n    if sum%2 == 1 {\n        array.sortInPlace()\n\
    \    } else {\n        array.sortInPlace()\n        array.reverse()\n    }\n \
    \   return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpqtpc2ooy.swift:18:15: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n        array.sortInPlace()\n        ~~~~~ ^~~~~~~~~~~\n/tmp/tmpqtpc2ooy.swift:20:15:\
    \ error: value of type '[Int]' has no member 'sortInPlace'\n        array.sortInPlace()\n\
    \        ~~~~~ ^~~~~~~~~~~\n/tmp/tmpqtpc2ooy.swift:21:15: error: cannot use mutating\
    \ member on immutable value: 'array' is a 'let' constant\n        array.reverse()\n\
    \        ~~~~~ ^\n"
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ < 2 {\n        return result\n    }\n    var sum = 0\n    for i in 0..<array.count\
    \ {\n        sum += array[i]\n    }\n    if sum % 2 == 1 {\n        result = result.sorted()\n\
    \    } else {\n        result = result.sorted().reversed()\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(array: []\
    \ as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp0e46956o/tmp0e46956o.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b970ee9bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b970eb92b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b970eb92988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b970eb917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0e46956o                        0x000055d62f149ab4 <unavailable> + 6836

    5    libc.so.6                          0x00002b970f087460 __libc_start_main +
    245

    6    tmp0e46956o                        0x000055d62f149309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ < 2 {\n        return result\n    }\n    var sum = 0\n    for i in 0..<array.count\
    \ {\n        sum += array[i]\n    }\n    if sum % 2 == 0 {\n        result = result.sorted()\n\
    \    } else {\n        result = result.sorted().reversed()\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(array: []\
    \ as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp1ivxh7cv/tmp1ivxh7cv.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad45f0d8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad45edcfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad45edcf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad45edce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1ivxh7cv                        0x000055eafc45e926 <unavailable> + 6438

    5    libc.so.6                          0x00002ad45f2c4460 __libc_start_main +
    245

    6    tmp1ivxh7cv                        0x000055eafc45e309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for element in array {\n        sum += element\n    }\n    if sum %\
    \ 2 == 1 {\n        result.sort(by: {$0 > $1})\n    } else {\n        result.sort(by:\
    \ {$0 < $1})\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpdloowfb9/tmpdloowfb9.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac2d247dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac2d2174b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac2d2174988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac2d21737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdloowfb9                        0x000055e2a215d74d <unavailable> + 5965

    5    libc.so.6                          0x00002ac2d2669460 __libc_start_main +
    245

    6    tmpdloowfb9                        0x000055e2a215d299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ < 2 {\n        return result\n    }\n    var sum = 0\n    for i in 0..<array.count\
    \ {\n        sum += array[i]\n    }\n    if sum % 2 == 1 {\n        result = result.sorted()\n\
    \    } else {\n        result = result.sorted().reversed()\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(array: []\
    \ as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp0e46956o/tmp0e46956o.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b970ee9bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b970eb92b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b970eb92988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b970eb917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0e46956o                        0x000055d62f149ab4 <unavailable> + 6836

    5    libc.so.6                          0x00002b970f087460 __libc_start_main +
    245

    6    tmp0e46956o                        0x000055d62f149309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var sum = 0\n    for value in array\
    \ {\n        sum += value\n    }\n    if sum % 2 == 1 {\n        array.sortInPlace()\n\
    \    } else {\n        array.sortInPlace()\n        array.reverse()\n    }\n \
    \   return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpudnv0ug6.swift:18:15: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n        array.sortInPlace()\n        ~~~~~ ^~~~~~~~~~~\n/tmp/tmpudnv0ug6.swift:20:15:\
    \ error: value of type '[Int]' has no member 'sortInPlace'\n        array.sortInPlace()\n\
    \        ~~~~~ ^~~~~~~~~~~\n/tmp/tmpudnv0ug6.swift:21:15: error: cannot use mutating\
    \ member on immutable value: 'array' is a 'let' constant\n        array.reverse()\n\
    \        ~~~~~ ^\n"
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ > 0 {\n        let sum = array[0] + array[array.count - 1]\n        if sum %\
    \ 2 == 1 {\n            result = result.sorted()\n        } else {\n         \
    \   result = result.sorted().reversed()\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014403
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    if array.count < 2 {\n        return\
    \ array\n    }\n    var sum = 0\n    var index = 0\n    var lastIndex = array.count\
    \ - 1\n    while index < lastIndex {\n        sum += array[index]\n        if\
    \ sum % 2 == 1 {\n            array.remove(at: index)\n        } else {\n    \
    \        index += 1\n        }\n    }\n    return array\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpjptepcvs.swift:22:19: error: cannot use mutating member on immutable\
    \ value: 'array' is a 'let' constant\n            array.remove(at: index)\n  \
    \          ~~~~~ ^\n"
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ < 2 {\n        return result\n    }\n    if array.count > 2 {\n        let sum\
    \ = array[0] + array[array.count - 1]\n        if sum % 2 == 1 {\n           \
    \ result = result.sorted()\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpajfrlr8i/tmpajfrlr8i.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6c0550c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6c0247b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6c0247988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6c02467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpajfrlr8i                        0x00005567197a5954 <unavailable> + 6484

    5    libc.so.6                          0x00002ae6c073c460 __libc_start_main +
    245

    6    tmpajfrlr8i                        0x00005567197a51a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ < 2 {\n        return result\n    }\n    if array.count > 2 {\n        let sum\
    \ = array[0] + array[array.count - 1]\n        if sum % 2 == 1 {\n           \
    \ result = result.sorted()\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpajfrlr8i/tmpajfrlr8i.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6c0550c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6c0247b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6c0247988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6c02467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpajfrlr8i                        0x00005567197a5954 <unavailable> + 6484

    5    libc.so.6                          0x00002ae6c073c460 __libc_start_main +
    245

    6    tmpajfrlr8i                        0x00005567197a51a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ < 2 {\n        return result\n    }\n    if array.count > 2 {\n        let sum\
    \ = array[0] + array[array.count - 1]\n        if sum % 2 == 0 {\n           \
    \ result.sort(by: {$0 < $1})\n        } else {\n            result.sort(by: {$0\
    \ > $1})\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpnf_ki2gt/tmpnf_ki2gt.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8b8c6b2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8b8c3a9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8b8c3a9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8b8c3a87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnf_ki2gt                        0x00005608d570d7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b8b8c89e460 __libc_start_main +
    245

    6    tmpnf_ki2gt                        0x00005608d570d189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ > 0 {\n        let sum = array.sum\n        if sum % 2 == 1 {\n            result\
    \ = result.sorted()\n        } else {\n            result = result.sorted().reversed()\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmp_v4cduw7.swift:15:25: error: value of type '[Int]' has no member\
    \ 'sum'\n        let sum = array.sum\n                  ~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660014403
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var sum = 0\n    for value in array\
    \ {\n        sum += value\n    }\n    if sum % 2 == 1 {\n        array.sortInPlace()\n\
    \    } else {\n        array.sortInPlace()\n        array.reverse()\n    }\n \
    \   return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpudnv0ug6.swift:18:15: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n        array.sortInPlace()\n        ~~~~~ ^~~~~~~~~~~\n/tmp/tmpudnv0ug6.swift:20:15:\
    \ error: value of type '[Int]' has no member 'sortInPlace'\n        array.sortInPlace()\n\
    \        ~~~~~ ^~~~~~~~~~~\n/tmp/tmpudnv0ug6.swift:21:15: error: cannot use mutating\
    \ member on immutable value: 'array' is a 'let' constant\n        array.reverse()\n\
    \        ~~~~~ ^\n"
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    if array.count < 2 {\n        return\
    \ array\n    }\n    var sum = 0\n    for i in 0..<array.count {\n        sum +=\
    \ array[i]\n    }\n    if sum%2 == 0 {\n        array.sortInPlace()\n    } else\
    \ {\n        array.sortInPlace()\n        array.reverse()\n    }\n    return array\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpx6uv1oys.swift:21:15: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n        array.sortInPlace()\n        ~~~~~ ^~~~~~~~~~~\n/tmp/tmpx6uv1oys.swift:23:15:\
    \ error: value of type '[Int]' has no member 'sortInPlace'\n        array.sortInPlace()\n\
    \        ~~~~~ ^~~~~~~~~~~\n/tmp/tmpx6uv1oys.swift:24:15: error: cannot use mutating\
    \ member on immutable value: 'array' is a 'let' constant\n        array.reverse()\n\
    \        ~~~~~ ^\n"
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for element in array {\n        sum += element\n    }\n    if sum %\
    \ 2 == 0 {\n        result.sortInPlace()\n    } else {\n        result.sortInPlace()\n\
    \        result.reverse()\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpqx6z5m3o.swift:19:16: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n        result.sortInPlace()\n        ~~~~~~ ^~~~~~~~~~~\n/tmp/tmpqx6z5m3o.swift:21:16:\
    \ error: value of type '[Int]' has no member 'sortInPlace'\n        result.sortInPlace()\n\
    \        ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var sum = 0\n    for value in array\
    \ {\n        sum += value\n    }\n    if sum % 2 == 1 {\n        array.sortInPlace()\n\
    \    } else {\n        array.sortInPlaceInReverse()\n    }\n    return array\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpfvahhsyp.swift:18:15: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n        array.sortInPlace()\n        ~~~~~ ^~~~~~~~~~~\n/tmp/tmpfvahhsyp.swift:20:15:\
    \ error: value of type '[Int]' has no member 'sortInPlaceInReverse'\n        array.sortInPlaceInReverse()\n\
    \        ~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014403
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ > 0 {\n        let sum = array[0]\n        for index in 1..<array.count {\n\
    \            sum += array[index]\n            if sum % 2 == 1 {\n            \
    \    result.swapAt(index, 0)\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpg5128_pr.swift:17:17: error: left side of mutating operator isn't\
    \ mutable: 'sum' is a 'let' constant\n            sum += array[index]\n      \
    \      ~~~ ^\n/tmp/tmpg5128_pr.swift:15:9: note: change 'let' to 'var' to make\
    \ it mutable\n        let sum = array[0]\n        ^~~\n        var\n"
  stdout: ''
  timestamp: 1660014403
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    if array.count < 2 {\n        return\
    \ array\n    }\n    var sum = 0\n    var index = 0\n    var lastIndex = array.count\
    \ - 1\n    for index in 0..<array.count {\n        sum += array[index]\n     \
    \   if sum % 2 == 0 {\n            array[index], array[lastIndex] = array[lastIndex],\
    \ array[index]\n            lastIndex--\n        }\n    }\n    return array\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpi_z3fr8h.swift:22:25: error: consecutive statements on a line must\
    \ be separated by ';'\n            array[index], array[lastIndex] = array[lastIndex],\
    \ array[index]\n                        ^\n                        ;\n/tmp/tmpi_z3fr8h.swift:22:25:\
    \ error: expected expression\n            array[index], array[lastIndex] = array[lastIndex],\
    \ array[index]\n                        ^\n/tmp/tmpi_z3fr8h.swift:22:18: warning:\
    \ expression of type 'Int' is unused\n            array[index], array[lastIndex]\
    \ = array[lastIndex], array[index]\n            ~~~~~^~~~~~~\n/tmp/tmpi_z3fr8h.swift:17:9:\
    \ warning: initialization of variable 'index' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var index = 0\n    ~~~~^~~~~\n  \
    \  _\n/tmp/tmpi_z3fr8h.swift:18:9: warning: initialization of variable 'lastIndex'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var lastIndex = array.count - 1\n    ~~~~^~~~~~~~~\n    _\n"
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for element in array {\n        sum += element\n    }\n    if sum %\
    \ 2 == 0 {\n        result.sort()\n    } else {\n        result.reverse()\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpn8co_49a/tmpn8co_49a.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0d8b77dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0d8b474b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0d8b474988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0d8b4737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn8co_49a                        0x0000561fab35988d <unavailable> + 6285

    5    libc.so.6                          0x00002b0d8b969460 __libc_start_main +
    245

    6    tmpn8co_49a                        0x0000561fab3593d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ > 1 {\n        let sum = (array[0] + array[array.count - 1]) / 2\n        if\
    \ sum % 2 == 1 {\n            result = result.sorted()\n        } else {\n   \
    \         result = result.sorted().reversed()\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014403
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ < 2 {\n        return result\n    }\n    var sum = 0\n    for i in 0..<array.count\
    \ {\n        sum += array[i]\n    }\n    if sum % 2 == 1 {\n        result.sort(<)\n\
    \    } else {\n        result.sort(>)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpj75zz0w1.swift:22:21: error: missing argument label 'by:' in call\n\
    \        result.sort(<)\n                    ^\n                    by: \n/tmp/tmpj75zz0w1.swift:24:21:\
    \ error: missing argument label 'by:' in call\n        result.sort(>)\n      \
    \              ^\n                    by: \n"
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    if array.count < 2 {\n        return\
    \ array\n    }\n    var sum = 0\n    for element in array {\n        sum += element\n\
    \    }\n    if sum % 2 == 1 {\n        array.sort { $0 < $1 }\n    } else {\n\
    \        array.sort { $0 > $1 }\n    }\n    return array\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpriof9wct.swift:21:15: error: cannot use mutating member on immutable\
    \ value: 'array' is a 'let' constant\n        array.sort { $0 < $1 }\n       \
    \ ~~~~~ ^\n/tmp/tmpriof9wct.swift:23:15: error: cannot use mutating member on\
    \ immutable value: 'array' is a 'let' constant\n        array.sort { $0 > $1 }\n\
    \        ~~~~~ ^\n"
  stdout: ''
  timestamp: 1660014403
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    if array.count < 2 {\n        return\
    \ array\n    }\n    var sum = 0\n    var index = 0\n    var last = 0\n    var\
    \ result = [Int]()\n    for element in array {\n        sum += element\n     \
    \   if sum > 0 {\n            result.append(element)\n        }\n    }\n    if\
    \ sum % 2 == 1 {\n        result.sort()\n    } else {\n        result.reverse()\n\
    \    }\n    for element in result {\n        array[index] = element\n        index\
    \ += 1\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpx5v_nbb6.swift:32:14: error: cannot assign through subscript: 'array'\
    \ is a 'let' constant\n        array[index] = element\n        ~~~~~^\n"
  stdout: ''
  timestamp: 1660014403
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var sum = 0\n    for value in array\
    \ {\n        sum += value\n    }\n    if sum % 2 == 1 {\n        array.sort()\n\
    \    } else {\n        array.reverse()\n    }\n    return array\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpixks0lnj.swift:18:15: error: cannot use mutating member on immutable\
    \ value: 'array' is a 'let' constant\n        array.sort()\n        ~~~~~ ^\n\
    /tmp/tmpixks0lnj.swift:20:15: error: cannot use mutating member on immutable value:\
    \ 'array' is a 'let' constant\n        array.reverse()\n        ~~~~~ ^\n"
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var sum = 0\n    for value in array\
    \ {\n        sum += value\n    }\n    if sum % 2 == 1 {\n        array.sort()\n\
    \    } else {\n        array.reverse()\n    }\n    return array\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpixks0lnj.swift:18:15: error: cannot use mutating member on immutable\
    \ value: 'array' is a 'let' constant\n        array.sort()\n        ~~~~~ ^\n\
    /tmp/tmpixks0lnj.swift:20:15: error: cannot use mutating member on immutable value:\
    \ 'array' is a 'let' constant\n        array.reverse()\n        ~~~~~ ^\n"
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = [Int]()\n    for index\
    \ in 0..<array.count {\n        let sum = array[index]\n        if sum%2 == 1\
    \ {\n            result.insert(sum, at: index)\n        } else {\n           \
    \ result.append(sum)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp8s2taww0/tmp8s2taww0.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2bafafbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2baf7f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2baf7f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2baf7f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8s2taww0                        0x000055a95a969926 <unavailable> + 6438

    5    libc.so.6                          0x00002b2bafce7460 __libc_start_main +
    245

    6    tmp8s2taww0                        0x000055a95a969309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var sum = 0\n    var result = [Int]()\n\
    \    for value in array {\n        sum += value\n        result.append(value)\n\
    \    }\n    if sum % 2 == 1 {\n        result.sort()\n    } else {\n        result.reverse()\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d7s285u/tmp7d7s285u.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca1e2d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca1dfc9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca1dfc9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca1dfc87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d7s285u                        0x000056393ddb7be4 <unavailable> + 7140

    5    libc.so.6                          0x00002aca1e4be460 __libc_start_main +
    245

    6    tmp7d7s285u                        0x000056393ddb7439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var sum = 0\n    for element in\
    \ array {\n        sum += element\n    }\n    if sum % 2 == 1 {\n        array.sort()\n\
    \    } else {\n        array.reverse()\n    }\n    return array\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpd305jr_9.swift:18:15: error: cannot use mutating member on immutable\
    \ value: 'array' is a 'let' constant\n        array.sort()\n        ~~~~~ ^\n\
    /tmp/tmpd305jr_9.swift:20:15: error: cannot use mutating member on immutable value:\
    \ 'array' is a 'let' constant\n        array.reverse()\n        ~~~~~ ^\n"
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for value in array {\n        sum += value\n    }\n    if sum % 2 ==\
    \ 1 {\n        result.sortInPlace()\n    } else {\n        result.sortInPlace()\n\
    \        result.reverse()\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmp172wucnf.swift:19:16: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n        result.sortInPlace()\n        ~~~~~~ ^~~~~~~~~~~\n/tmp/tmp172wucnf.swift:21:16:\
    \ error: value of type '[Int]' has no member 'sortInPlace'\n        result.sortInPlace()\n\
    \        ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var sum = 0\n    var result = [Int]()\n\
    \    for value in array {\n        sum += value\n        result.append(value)\n\
    \    }\n    if sum % 2 == 1 {\n        result.sort()\n    } else {\n        result.reverse()\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d7s285u/tmp7d7s285u.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca1e2d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca1dfc9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca1dfc9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca1dfc87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d7s285u                        0x000056393ddb7be4 <unavailable> + 7140

    5    libc.so.6                          0x00002aca1e4be460 __libc_start_main +
    245

    6    tmp7d7s285u                        0x000056393ddb7439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ < 2 {\n        return result\n    }\n    var sum = 0\n    for i in 0..<array.count\
    \ {\n        sum += array[i]\n    }\n    if sum % 2 == 1 {\n        result = result.sorted()\n\
    \    } else {\n        result = result.sorted().reversed()\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(array: []\
    \ as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp0e46956o/tmp0e46956o.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b970ee9bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b970eb92b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b970eb92988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b970eb917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0e46956o                        0x000055d62f149ab4 <unavailable> + 6836

    5    libc.so.6                          0x00002b970f087460 __libc_start_main +
    245

    6    tmp0e46956o                        0x000055d62f149309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ > 0 {\n        let sum = array.sum\n        if sum % 2 == 1 {\n            result\
    \ = result.sorted()\n        } else {\n            result = result.sorted().reversed()\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmp_v4cduw7.swift:15:25: error: value of type '[Int]' has no member\
    \ 'sum'\n        let sum = array.sum\n                  ~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660014403
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ > 0 {\n        let sum = array[0]\n        for index in 1..<array.count {\n\
    \            sum += array[index]\n            if sum % 2 == 1 {\n            \
    \    result = result.sorted()\n            } else {\n                result =\
    \ result.sorted().reversed()\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpgahjq8ev.swift:17:17: error: left side of mutating operator isn't\
    \ mutable: 'sum' is a 'let' constant\n            sum += array[index]\n      \
    \      ~~~ ^\n/tmp/tmpgahjq8ev.swift:15:9: note: change 'let' to 'var' to make\
    \ it mutable\n        let sum = array[0]\n        ^~~\n        var\n"
  stdout: ''
  timestamp: 1660014403
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var sum = 0\n    for x in array\
    \ {\n        sum += x\n    }\n    if sum % 2 == 1 {\n        array.sort()\n  \
    \  } else {\n        array.reverse()\n    }\n    return array\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpa8_o63d1.swift:18:15: error: cannot use mutating member on immutable\
    \ value: 'array' is a 'let' constant\n        array.sort()\n        ~~~~~ ^\n\
    /tmp/tmpa8_o63d1.swift:20:15: error: cannot use mutating member on immutable value:\
    \ 'array' is a 'let' constant\n        array.reverse()\n        ~~~~~ ^\n"
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var sum = 0\n    for element in\
    \ array {\n        sum += element\n    }\n    if sum % 2 == 1 {\n        return\
    \ array.sorted()\n    } else {\n        return array.sorted().reversed()\n   \
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sort_array(array: [] as [Int])\
    \ == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp07reqin3/tmp07reqin3.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4bf290dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4bf2604b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4bf2604988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4bf26037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp07reqin3                        0x000055be50e7da84 <unavailable> + 6788

    5    libc.so.6                          0x00002b4bf2af9460 __libc_start_main +
    245

    6    tmp07reqin3                        0x000055be50e7d2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for element in array {\n        sum += element\n    }\n    if sum %\
    \ 2 == 1 {\n        result.sortInPlace()\n    } else {\n        result.sortInPlaceInReverse()\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpxtsts9g2.swift:19:16: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n        result.sortInPlace()\n        ~~~~~~ ^~~~~~~~~~~\n/tmp/tmpxtsts9g2.swift:21:16:\
    \ error: value of type '[Int]' has no member 'sortInPlaceInReverse'\n        result.sortInPlaceInReverse()\n\
    \        ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = [Int]()\n    for index\
    \ in 0..<array.count {\n        let sum = array[index]\n        if sum % 2 ==\
    \ 1 {\n            result.insert(sum, at: index)\n        } else {\n         \
    \   result.append(sum)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpm946gxtg/tmpm946gxtg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b293de99c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b293db90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b293db90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b293db8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm946gxtg                        0x00005636d963c926 <unavailable> + 6438

    5    libc.so.6                          0x00002b293e085460 __libc_start_main +
    245

    6    tmpm946gxtg                        0x00005636d963c309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for element in array {\n        sum += element\n    }\n    if sum %\
    \ 2 == 1 {\n        result = array.sorted()\n    } else {\n        result = array.sorted(by:\
    \ >)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpzwnwcjap/tmpzwnwcjap.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac3066abc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac3063a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac3063a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac3063a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzwnwcjap                        0x00005626bec9fae4 <unavailable> + 6884

    5    libc.so.6                          0x00002ac306897460 __libc_start_main +
    245

    6    tmpzwnwcjap                        0x00005626bec9f339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var sum = 0\n    for value in array\
    \ {\n        sum += value\n    }\n    if sum % 2 == 1 {\n        array.sort()\n\
    \    } else {\n        array.reverse()\n    }\n    return array\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpixks0lnj.swift:18:15: error: cannot use mutating member on immutable\
    \ value: 'array' is a 'let' constant\n        array.sort()\n        ~~~~~ ^\n\
    /tmp/tmpixks0lnj.swift:20:15: error: cannot use mutating member on immutable value:\
    \ 'array' is a 'let' constant\n        array.reverse()\n        ~~~~~ ^\n"
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    if array.count < 2 {\n        return\
    \ array\n    }\n\n    var sum = 0\n    var last = 0\n    var result = [Int]()\n\
    \n    for index in 0..<array.count {\n        sum += array[index]\n        if\
    \ sum%2 == 1 {\n            last = index\n        }\n    }\n\n    for index in\
    \ 0..<array.count {\n        if index == last {\n            continue\n      \
    \  }\n        result.append(array[index])\n    }\n\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpnmnif08s/tmpnmnif08s.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab7aa73bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab7aa432b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab7aa432988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab7aa4317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnmnif08s                        0x00005556e53498d6 <unavailable> + 6358

    5    libc.so.6                          0x00002ab7aa927460 __libc_start_main +
    245

    6    tmpnmnif08s                        0x00005556e53492b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ < 2 {\n        return result\n    }\n    var sum = 0\n    for i in 0..<array.count\
    \ {\n        sum += array[i]\n    }\n    if sum % 2 == 1 {\n        result = result.sorted()\n\
    \    } else {\n        result = result.sorted().reversed()\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(array: []\
    \ as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp0e46956o/tmp0e46956o.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b970ee9bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b970eb92b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b970eb92988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b970eb917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0e46956o                        0x000055d62f149ab4 <unavailable> + 6836

    5    libc.so.6                          0x00002b970f087460 __libc_start_main +
    245

    6    tmp0e46956o                        0x000055d62f149309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    if array.count < 2 {\n        return\
    \ array\n    }\n    var sum = 0\n    for i in 0..<array.count {\n        sum +=\
    \ array[i]\n    }\n    if sum % 2 == 1 {\n        return array.sorted()\n    }\
    \ else {\n        return array.sorted().reversed()\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpt3kj3m5i/tmpt3kj3m5i.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2d1379ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2d13495b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2d13495988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2d134947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt3kj3m5i                        0x0000562b28f96ab4 <unavailable> + 6836

    5    libc.so.6                          0x00002b2d1398a460 __libc_start_main +
    245

    6    tmpt3kj3m5i                        0x0000562b28f96309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    if array.count < 2 {\n        return\
    \ array\n    }\n    var sum = 0\n    var temp = 0\n    var result = [Int]()\n\
    \    for element in array {\n        sum += element\n    }\n    if sum % 2 ==\
    \ 0 {\n        for element in array {\n            temp += element\n        }\n\
    \        for element in array {\n            if temp < element {\n           \
    \     result.append(element)\n            }\n        }\n    } else {\n       \
    \ for element in array {\n            temp -= element\n        }\n        for\
    \ element in array {\n            if temp > element {\n                result.append(element)\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp_gilez3m/tmp_gilez3m.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c36d6bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c36a62b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c36a62988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c36a617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_gilez3m                        0x0000560a3f99a8f6 <unavailable> + 6390

    5    libc.so.6                          0x00002b0c36f57460 __libc_start_main +
    245

    6    tmp_gilez3m                        0x0000560a3f99a2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    if array.count < 2 {\n        return\
    \ array\n    }\n    var sum = 0\n    var last = 0\n    for index in 0..<array.count\
    \ {\n        sum += array[index]\n        if sum > 0 {\n            last = index\n\
    \        }\n    }\n    if sum % 2 == 1 {\n        array.sortInPlace()\n    } else\
    \ {\n        array.sortInPlace{ $0 < $1 }\n    }\n    return array\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpq7puf9_7.swift:25:15: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n        array.sortInPlace()\n        ~~~~~ ^~~~~~~~~~~\n/tmp/tmpq7puf9_7.swift:27:15:\
    \ error: value of type '[Int]' has no member 'sortInPlace'\n        array.sortInPlace{\
    \ $0 < $1 }\n        ~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var sum = 0\n    for element in\
    \ array {\n        sum += element\n    }\n    if sum % 2 == 1 {\n        array.sortInPlace()\n\
    \    } else {\n        array.sortInPlace()\n        array.reverse()\n    }\n \
    \   return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmptg6naigl.swift:18:15: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n        array.sortInPlace()\n        ~~~~~ ^~~~~~~~~~~\n/tmp/tmptg6naigl.swift:20:15:\
    \ error: value of type '[Int]' has no member 'sortInPlace'\n        array.sortInPlace()\n\
    \        ~~~~~ ^~~~~~~~~~~\n/tmp/tmptg6naigl.swift:21:15: error: cannot use mutating\
    \ member on immutable value: 'array' is a 'let' constant\n        array.reverse()\n\
    \        ~~~~~ ^\n"
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ < 2 {\n        return result\n    }\n    if array.count > 2 {\n        let mid\
    \ = array.count / 2\n        let left = sort_array(array[0..<mid])\n        let\
    \ right = sort_array(array[mid..<array.count])\n        if left[mid] + right[mid]\
    \ % 2 == 1 {\n            result = right\n        } else {\n            result\
    \ = left\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpele5m0_d.swift:19:31: error: missing argument label 'array:' in\
    \ call\n        let left = sort_array(array[0..<mid])\n                      \
    \        ^\n                              array: \n/tmp/tmpele5m0_d.swift:19:36:\
    \ error: cannot convert value of type 'ArraySlice<Int>' to expected argument type\
    \ '[Int]'\n        let left = sort_array(array[0..<mid])\n                   \
    \                ^\n/tmp/tmpele5m0_d.swift:20:32: error: missing argument label\
    \ 'array:' in call\n        let right = sort_array(array[mid..<array.count])\n\
    \                               ^\n                               array: \n/tmp/tmpele5m0_d.swift:20:37:\
    \ error: cannot convert value of type 'ArraySlice<Int>' to expected argument type\
    \ '[Int]'\n        let right = sort_array(array[mid..<array.count])\n        \
    \                            ^\n"
  stdout: ''
  timestamp: 1660014403
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ > 0 {\n        let sum = array.sum\n        if sum % 2 == 1 {\n            result\
    \ = result.sorted()\n        }\n        else {\n            result = result.sorted(by:\
    \ {$0 < $1})\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpzr7xwdqb.swift:15:25: error: value of type '[Int]' has no member\
    \ 'sum'\n        let sum = array.sum\n                  ~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var sum = 0\n    for value in array\
    \ {\n        sum += value\n    }\n    if sum % 2 == 1 {\n        array.sortInPlace()\n\
    \    } else {\n        array.sortInPlace()\n        array.reverse()\n    }\n \
    \   return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpudnv0ug6.swift:18:15: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n        array.sortInPlace()\n        ~~~~~ ^~~~~~~~~~~\n/tmp/tmpudnv0ug6.swift:20:15:\
    \ error: value of type '[Int]' has no member 'sortInPlace'\n        array.sortInPlace()\n\
    \        ~~~~~ ^~~~~~~~~~~\n/tmp/tmpudnv0ug6.swift:21:15: error: cannot use mutating\
    \ member on immutable value: 'array' is a 'let' constant\n        array.reverse()\n\
    \        ~~~~~ ^\n"
  stdout: ''
  timestamp: 1660014403
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ > 0 {\n        let sum = array[0] + array[array.count - 1]\n        if sum %\
    \ 2 == 1 {\n            result = result.sorted()\n        } else {\n         \
    \   result = result.sorted().reversed()\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014403
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var sum = 0\n    for value in array\
    \ {\n        sum += value\n    }\n    if sum % 2 == 1 {\n        array.sortInPlace()\n\
    \    } else {\n        array.sortInPlace{ $0 < $1 }\n    }\n    return array\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmp14iegbfr.swift:18:15: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n        array.sortInPlace()\n        ~~~~~ ^~~~~~~~~~~\n/tmp/tmp14iegbfr.swift:20:15:\
    \ error: value of type '[Int]' has no member 'sortInPlace'\n        array.sortInPlace{\
    \ $0 < $1 }\n        ~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    let sum\
    \ = array.sum() % 2 == 0 ? array.sum() : array.sum() - 1\n    if sum < 0 {\n \
    \       result = result.sorted()\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmp1e_jzrd4.swift:14:21: error: value of type '[Int]' has no member\
    \ 'sum'\n    let sum = array.sum() % 2 == 0 ? array.sum() : array.sum() - 1\n\
    \              ~~~~~ ^~~\n/tmp/tmp1e_jzrd4.swift:14:44: error: value of type '[Int]'\
    \ has no member 'sum'\n    let sum = array.sum() % 2 == 0 ? array.sum() : array.sum()\
    \ - 1\n                                     ~~~~~ ^~~\n/tmp/tmp1e_jzrd4.swift:14:58:\
    \ error: value of type '[Int]' has no member 'sum'\n    let sum = array.sum()\
    \ % 2 == 0 ? array.sum() : array.sum() - 1\n                                 \
    \                  ~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660014403
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ > 0 {\n        let sum = (array[0] + array[array.count - 1]) / 2\n        if\
    \ sum % 2 == 1 {\n            result = result.sorted()\n        } else {\n   \
    \         result = result.sorted().reversed()\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014403
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    if array.count < 2 {\n        return\
    \ array\n    }\n    var sum = 0\n    for element in array {\n        sum += element\n\
    \    }\n    if sum % 2 == 1 {\n        array.sort { $0 < $1 }\n    } else {\n\
    \        array.sort { $0 > $1 }\n    }\n    return array\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpriof9wct.swift:21:15: error: cannot use mutating member on immutable\
    \ value: 'array' is a 'let' constant\n        array.sort { $0 < $1 }\n       \
    \ ~~~~~ ^\n/tmp/tmpriof9wct.swift:23:15: error: cannot use mutating member on\
    \ immutable value: 'array' is a 'let' constant\n        array.sort { $0 > $1 }\n\
    \        ~~~~~ ^\n"
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for value in array {\n        sum += value\n    }\n    if sum % 2 ==\
    \ 1 {\n        result.sort(by: {$0 < $1})\n    } else {\n        result.sort(by:\
    \ {$0 > $1})\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmph35xmzhc/tmph35xmzhc.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac612858c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac61254fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac61254f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac61254e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph35xmzhc                        0x0000556566ce874d <unavailable> + 5965

    5    libc.so.6                          0x00002ac612a44460 __libc_start_main +
    245

    6    tmph35xmzhc                        0x0000556566ce8299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var sum = 0\n    for element in\
    \ array {\n        sum += element\n    }\n    if sum % 2 == 1 {\n        array.sort()\n\
    \    } else {\n        array.reverse()\n    }\n    return array\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpd305jr_9.swift:18:15: error: cannot use mutating member on immutable\
    \ value: 'array' is a 'let' constant\n        array.sort()\n        ~~~~~ ^\n\
    /tmp/tmpd305jr_9.swift:20:15: error: cannot use mutating member on immutable value:\
    \ 'array' is a 'let' constant\n        array.reverse()\n        ~~~~~ ^\n"
  stdout: ''
  timestamp: 1660014403
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    if array.count < 2 {\n        return\
    \ array\n    }\n    var sum = 0\n    var last = 0\n    for index in 0..<array.count\
    \ {\n        sum += array[index]\n        if sum%2 == 0 {\n            last =\
    \ index\n        }\n    }\n    return sort_array(array[0..<last])\n        + [array[index]\
    \ for index in 0..<last]\n        + sort_array(array[last..<array.count])\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmp5sc0vof3.swift:25:25: error: expected ',' separator\n        +\
    \ [array[index] for index in 0..<last]\n                        ^\n          \
    \             ,\n/tmp/tmp5sc0vof3.swift:25:25: error: expected expression in container\
    \ literal\n        + [array[index] for index in 0..<last]\n                  \
    \      ^\n/tmp/tmp5sc0vof3.swift:25:18: error: cannot find 'index' in scope\n\
    \        + [array[index] for index in 0..<last]\n                 ^~~~~\n/tmp/tmp5sc0vof3.swift:24:23:\
    \ error: missing argument label 'array:' in call\n    return sort_array(array[0..<last])\n\
    \                      ^\n                      array: \n/tmp/tmp5sc0vof3.swift:24:28:\
    \ error: cannot convert value of type 'ArraySlice<Int>' to expected argument type\
    \ '[Int]'\n    return sort_array(array[0..<last])\n                          \
    \ ^\n"
  stdout: ''
  timestamp: 1660014403
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var sum = 0\n    for element in\
    \ array {\n        sum += element\n    }\n    if sum % 2 == 1 {\n        array.sortInPlace()\n\
    \    } else {\n        array.sortInPlace{ $0 < $1 }\n    }\n    return array\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpq9jek346.swift:18:15: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n        array.sortInPlace()\n        ~~~~~ ^~~~~~~~~~~\n/tmp/tmpq9jek346.swift:20:15:\
    \ error: value of type '[Int]' has no member 'sortInPlace'\n        array.sortInPlace{\
    \ $0 < $1 }\n        ~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014403
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var sum = 0\n    for x in array\
    \ {\n        sum += x\n    }\n    if sum % 2 == 1 {\n        array.sortInPlace()\n\
    \    } else {\n        array.sortInPlace{ $0 < $1 }\n    }\n    return array\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmp86p_nsfa.swift:18:15: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n        array.sortInPlace()\n        ~~~~~ ^~~~~~~~~~~\n/tmp/tmp86p_nsfa.swift:20:15:\
    \ error: value of type '[Int]' has no member 'sortInPlace'\n        array.sortInPlace{\
    \ $0 < $1 }\n        ~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var sum = 0\n    var result = [Int]()\n\
    \    for value in array {\n        sum += value\n        result.append(value)\n\
    \    }\n    if sum % 2 == 1 {\n        result.sortInPlace()\n    } else {\n  \
    \      result.sortInPlaceInReverse()\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmptxfq4k6w.swift:20:16: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n        result.sortInPlace()\n        ~~~~~~ ^~~~~~~~~~~\n/tmp/tmptxfq4k6w.swift:22:16:\
    \ error: value of type '[Int]' has no member 'sortInPlaceInReverse'\n        result.sortInPlaceInReverse()\n\
    \        ~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014403
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7d_t6i2q/tmp7d_t6i2q.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefec96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefe98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefe98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefe98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d_t6i2q                        0x00005609adaa6824 <unavailable> + 6180

    5    libc.so.6                          0x00002aeefee82460 __libc_start_main +
    245

    6    tmp7d_t6i2q                        0x00005609adaa6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014403
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var sum = 0\n    for value in array\
    \ {\n        sum += value\n    }\n    if sum % 2 == 1 {\n        array.sortInPlace()\n\
    \    } else {\n        array.sortInPlaceInReverse()\n    }\n    return array\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpfvahhsyp.swift:18:15: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n        array.sortInPlace()\n        ~~~~~ ^~~~~~~~~~~\n/tmp/tmpfvahhsyp.swift:20:15:\
    \ error: value of type '[Int]' has no member 'sortInPlaceInReverse'\n        array.sortInPlaceInReverse()\n\
    \        ~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014403
