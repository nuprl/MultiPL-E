name: HumanEval_65_circular_shift
language: swift
prompt: "\n/// Circular shift the digits of the integer x, shift the digits right\
  \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
  \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>> circular_shift(12,\
  \ 2)\n/// \"12\"\nfunc circular_shift(x: Int, shift: Int) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(circular_shift(x: 100, shift: 2) == \"001\"\
  )\nassert(circular_shift(x: 12, shift: 2) == \"12\")\nassert(circular_shift(x: 97,\
  \ shift: 8) == \"79\")\nassert(circular_shift(x: 12, shift: 1) == \"21\")\nassert(circular_shift(x:\
  \ 11, shift: 101) == \"11\")"
completions: ["    var s = String(x)\n    if shift > s.count {\n        s = s[s.count\
    \ - shift - 1 ..< s.count].reversed()\n    }\n    return s", "    var s = String(x)\n\
    \    if shift > s.count {\n        return s.reversed()\n    }\n    for i := 0;\
    \ i < shift; i++ {\n        s = s.reversed()\n    }\n    return s", "    var s\
    \ = \"\"\n    for i := 0; i < shift; i++ {\n        s += String(x%10)\n      \
    \  x /= 10\n    }\n    for i := 0; i < shift; i++ {\n        x /= 10\n    }\n\
    \    return s + String(x)", "    var s = \"\"\n    for i := 0; i < shift; i++\
    \ {\n        s = String(x >> uint(i)) + (s + String(x))\n    }\n    return s",
  "    var s = String(x)\n    if shift > s.count {\n        return s.reversed()\n\
    \    }\n    if shift < 0 {\n        shift = -shift\n    }\n    shift %= s.count\n\
    \    for i := 0; i < shift; i++ {\n        s = s.reversed()\n    }\n    return\
    \ s", "    var s = \"\"\n    for i := 0; i < shift; i++ {\n        s += String(x%10)\n\
    \        x = x/10\n    }\n    for i := shift - 1; i >= 0; i-- {\n        s +=\
    \ String(x%10)\n        x = x/10\n    }\n    return s", "    var s = String(x)\n\
    \    if shift > s.count {\n        return s.reversed()\n    }\n    var carry =\
    \ 0\n    for i := 0; i < shift; i++ {\n        carry += Int(s[i]) - Int(s[s.count\
    \ - 1 - i])\n        s[i] = Int(s[s.count - 1 - i])\n        s[s.count - 1 - i]\
    \ = carry\n    }\n    return s", "    if shift > x.digits.count {\n        return\
    \ x.digits.reversed()\n    }\n    var result = \"\"\n    for digit in x.digits\
    \ {\n        result = String(digit) + result\n    }\n    if shift < x.digits.count\
    \ {\n        for _ in 0..<shift {\n            result = String(x.digits[x.digits.count\
    \ - 1]) + result\n        }\n    }\n    return result", "    if shift > x.bitLength\
    \ {\n        return x.reverse()\n    }\n    var result = \"\"\n    for i := 0;\
    \ i < shift; i++ {\n        result = String(x.bytes[i]) + result\n    }\n    return\
    \ result", "    if shift > x.bitLength {\n        return x.reverse()\n    }\n\
    \    var result = \"\"\n    for i := 0; i < shift; i++ {\n        result = x.digits[i]+result\n\
    \    }\n    return result", "    if shift > x.bitLength {\n        return x.reverse()\n\
    \    }\n    var result = \"\"\n    for i := 0; i < shift; i++ {\n        result\
    \ = x.digits[i]+result\n    }\n    return result", "    var s = String(x)\n  \
    \  for i := 0; i < shift; i++ {\n        s = String(Int(s[i]) - Int(s[i - shift])\
    \ + Int(s[i - shift]))\n    }\n    return s", "    var s = String(x)\n    for\
    \ i := 0; i < shift; i++ {\n        s = String(Int(s[i])) + s\n    }\n    return\
    \ s", "    var s = \"\"\n    var i = shift\n    for digit := 0; digit < len(x);\
    \ digit++ {\n        s += String(x[digit])\n        i -= 1\n        if i == 0\
    \ {\n            i = 0\n            digit += 1\n        }\n    }\n    return s",
  "    var s = \"\"\n    for i := 0; i < shift; i++ {\n        s += String(x%10)\n\
    \        x = x/10\n    }\n    for i := shift; i < x; i++ {\n        s += String(x%10)\n\
    \        x = x/10\n    }\n    return s", "    if shift > x.count {\n        return\
    \ x.reversed()\n    }\n    var result = \"\"\n    for i := 0; i < shift; i++ {\n\
    \        result = String(x.digits[i]) + result\n    }\n    for i := shift - 1;\
    \ i >= 0; i-- {\n        result = String(x.digits[i]) + result\n    }\n    return\
    \ result", "    if shift > x.bitLength {\n        return x.reversed()\n    }\n\
    \    var result = \"\"\n    for i := 0; i < shift; i++ {\n        result += \"\
    0\"\n    }\n    for i := x.bitLength - 1; i >= shift; i-- {\n        result +=\
    \ \"1\"\n    }\n    return result", "    var result = \"\"\n    for digit := 0;\
    \ shift > 0; shift /= 10 {\n        digit = x % 10\n        x /= 10\n        result\
    \ = String(digit) + result\n    }\n    if shift > 0 {\n        result = String(digit)\
    \ + result\n    }\n    return result", "    if shift > x.truncatingRemainder(dividingBy:\
    \ 10).magnitude.magnitude {\n        return x.reversed()\n    }\n    var result\
    \ = \"\"\n    var remainder = x.truncatingRemainder(dividingBy: 10)\n    for _\
    \ in 0..<shift {\n        result = String(remainder) + result\n        remainder\
    \ = remainder.quotientModulo(10)\n    }\n    return String(remainder) + result",
  "    var result = \"\"\n    for i := 0; i < shift; i++ {\n        result = String(format:\
    \ \"%0*d\", i, x) + result\n    }\n    return result", "    var s = \"\"\n   \
    \ var i = shift % len(x)\n    for ; i < len(x); i++ {\n        s += x[i]\n   \
    \ }\n    for ; i >= 0; i-- {\n        s += x[i]\n    }\n    return s", "    var\
    \ s = \"\"\n    var i = shift % len(x)\n    for ; i < len(x); i++ {\n        s\
    \ += x[i]\n    }\n    for ; i > 0; i-- {\n        s += x[i]\n    }\n    return\
    \ s", "    var s = \"\"\n    for i := 0; i < shift; i++ {\n        s += x%10\n\
    \        x = x/10\n    }\n    for i := shift - 1; i >= 0; i-- {\n        s +=\
    \ x%10\n        x = x/10\n    }\n    return s", "    if shift > x.truncatingRemainder(dividingBy:\
    \ 10).magnitude.magnitude {\n        return x.reversed()\n    }\n    var result\
    \ = \"\"\n    var remainder = x.truncatingRemainder(dividingBy: 10)\n    for _\
    \ in 0..<shift {\n        result += String(remainder)\n        remainder = remainder.quotientModulo(10)\n\
    \    }\n    result += String(remainder)\n    return result", "    if shift > x.count\
    \ {\n        return x.reverse()\n    }\n    var result = \"\"\n    for i := 0;\
    \ i < shift; i++ {\n        result = x.digits[i] + result\n    }\n    return result",
  "    if shift > x.bitLength {\n        return x.reverse()\n    }\n    var result\
    \ = \"\"\n    var carry = 0\n    for i := 0; i < x.bitLength; i++ {\n        var\
    \ digit = x.uint(i)\n        var newDigit = digit.shl(shift)\n        var newCarry\
    \ = digit.shl(carry)\n        result += String(newDigit) + String(newCarry)\n\
    \        carry = newCarry\n    }\n    if carry != 0 {\n        result += \"1\"\
    \n    }\n    return result", "    if shift > x.count {\n        return x.reversed()\n\
    \    }\n    var result = \"\"\n    for i := 0; i < shift; i++ {\n        result\
    \ = String(x.digits[i]) + result\n    }\n    for i := 0; i < x.count; i++ {\n\
    \        result = x.digits[i] + result\n    }\n    return result", "    if shift\
    \ > x.truncatingRemainder(dividingBy: 10).magnitude.magnitude.magnitude {\n  \
    \      return x.reversed()\n    }\n    var result = \"\"\n    for _ in 0..<shift\
    \ {\n        result = String(x.truncatingRemainder(dividingBy: 10).magnitude)\
    \ + result\n        x = x.truncatingRemainder(dividingBy: 10)\n    }\n    return\
    \ result", "    var s = String(x)\n    if shift > s.count {\n        s = s[s.count\
    \ - shift - 1 ..< s.count].reversed()\n    }\n    return s", "    if shift > x.bitLength\
    \ {\n        return x.reverse()\n    }\n    var result = \"\"\n    for i := 0;\
    \ i < shift; i++ {\n        result = x.digits[i] + result\n    }\n    return result",
  "    if shift > x.truncatingRemainder(dividingBy: 10).magnitude.magnitude {\n  \
    \      return x.reversed()\n    }\n    var result = \"\"\n    for _ in 0..<shift\
    \ {\n        result = String(x.truncatingRemainder(dividingBy: 10).magnitude)\
    \ + result\n        x = x.truncatingRemainder(dividingBy: 10)\n    }\n    return\
    \ result", "    var s = \"\"\n    for i := 0; i < shift; i++ {\n        s = string(x.digits[i])\
    \ + s\n    }\n    return s", "    var s = String(x)\n    for i := 0; i < shift;\
    \ i++ {\n        s = String(s.characters[s.startIndex.advancedBy(i)])\n    }\n\
    \    return s", "    let digits = x.toString()\n    let result = \"\"\n    for\
    \ index in 0..<digits.count {\n        let digit = digits[index]\n        let\
    \ digitShifted = digit + shift\n        let digitShiftedString = digitShifted.toString()\n\
    \        if digitShiftedString.count > 0 {\n            result += digitShiftedString\n\
    \        }\n    }\n    return result.reversed()", "    var s = \"\"\n    for i\
    \ := 0; i < shift; i++ {\n        s += String(x)\n        x = x >> 1\n    }\n\
    \    if shift < 0 {\n        for i := 0; i < -shift; i++ {\n            s += String(x)\n\
    \            x = x << 1\n        }\n    }\n    return s", "    var result = \"\
    \"\n    for i := 0; i < shift; i++ {\n        result = String(Int(x%10) + Int(result)\
    \ + Int(result))\n        x = x / 10\n    }\n    if shift > len(result) {\n  \
    \      return String(result[len(result)-shift:])\n    }\n    return String(result[:shift])",
  "    var s = \"\"\n    for i := 0; i < shift; i++ {\n        s += x%10\n       \
    \ x /= 10\n    }\n    for i := shift; i < x; i++ {\n        s += x%10\n      \
    \  x /= 10\n    }\n    return s", "    if shift > x.bitLength {\n        return\
    \ x.reverse()\n    }\n    var result = \"\"\n    for i := 0; i < shift; i++ {\n\
    \        result = String(x.bytes[i]) + result\n    }\n    return result", "  \
    \  if shift > x.digits.count {\n        return x.digits.reversed()\n    }\n  \
    \  var result = String()\n    var carry = 0\n    for digit in x.digits {\n   \
    \     var digit = digit * 10 + carry\n        carry = digit / 10\n        digit\
    \ = digit % 10\n        result += String(digit)\n    }\n    if carry > 0 {\n \
    \       result += \"1\"\n    }\n    if shift > result.count {\n        return\
    \ result.reversed()\n    }\n    return result", "    if shift > x.bitLength {\n\
    \        return x.reverse()\n    }\n    var result = \"\"\n    var carry = 0\n\
    \    for i := 0; i < x.bitLength; i++ {\n        var digit = x.uint(i)\n     \
    \   digit = digit.shl(shift)\n        digit = digit.or(carry)\n        digit =\
    \ digit.and(1<<(x.bitLength - i - 1))\n        carry = (digit >> 1) | (digit &\
    \ 1)\n        result += String(digit)\n    }\n    if carry != 0 {\n        result\
    \ += \"1\"\n    }\n    return result", "    var result = \"\"\n    for i := 0;\
    \ i < shift; i++ {\n        result = String(format: \"%0*d\", i, x) + result\n\
    \    }\n    return result", "    var s = \"\"\n    var i = 0\n    for ; i < shift\
    \ && i < len(x); i++ {\n        s = s + String(x[i])\n    }\n    for ; i < len(x);\
    \ i++ {\n        s = s + String(x[len(x) - i - 1])\n    }\n    return s", "  \
    \  if shift > x.bitLength {\n        return x.reversed()\n    }\n    var result\
    \ = \"\"\n    for i := 0; i < shift; i++ {\n        result = String(x.toInt())\
    \ + result\n        x = x >> 1\n    }\n    return result", "    var s = \"\"\n\
    \    for i := 0; i < shift; i++ {\n        s += String(x%10)\n        x /= 10\n\
    \    }\n    for i := 0; i < shift; i++ {\n        x /= 10\n    }\n    return s\
    \ + String(x)", "    if shift > x.truncatingRemainder(dividingBy: 10).magnitude.magnitude\
    \ {\n        return x.reversed()\n    }\n    var result = \"\"\n    var remainder\
    \ = x.truncatingRemainder(dividingBy: 10)\n    for _ in 0..<shift {\n        result\
    \ = String(remainder) + result\n        remainder = remainder.quotientModulo(10)\n\
    \    }\n    return String(remainder) + result", "    if shift > x.bitLength {\n\
    \        return x.reverse()\n    }\n    var result = \"\"\n    for i := 0; i <\
    \ shift; i++ {\n        result = x.digits[i%x.digits.length] + result\n    }\n\
    \    return result", "    var s = String(x)\n    for i := 0; i < shift; i++ {\n\
    \        s = String(x%10) + s\n        x = x / 10\n    }\n    return s", "   \
    \ var result = \"\"\n    for i := 0; i < shift; i++ {\n        result = String(format:\
    \ \"%0*d\", i, x) + result\n    }\n    return result", "    if shift > x.digits\
    \ {\n        return x.digits.reverse()\n    }\n    var result = String()\n   \
    \ for i := 0; i < shift; i++ {\n        result = x.digits[i]+result\n    }\n \
    \   return result", "    if shift > x.bitLength {\n        return x.reverse()\n\
    \    }\n    var result = \"\"\n    for i := 0; i < shift; i++ {\n        result\
    \ = String(x.bytes[i]) + result\n    }\n    return result", "    var s = String(x)\n\
    \    for i := 0; i < shift; i++ {\n        s = String(Int(s[i])) + s\n    }\n\
    \    return s", "    var s = String(x)\n    if shift > s.count {\n        s =\
    \ s.reversed()\n    }\n    return String(s.characters.prefix(shift))", "    var\
    \ s = \"\"\n    var carry = 0\n    for i := 0; i < shift; i++ {\n        s +=\
    \ String(x&1)\n        x >>= 1\n        if x == 0 {\n            carry++\n   \
    \         x = 0\n        }\n    }\n    if carry > 0 {\n        s += String(carry)\n\
    \    }\n    return s", "    var s = String(x)\n    for i := 0; i < shift; i++\
    \ {\n        s = String(s.characters[s.startIndex.advancedBy(i)])\n    }\n   \
    \ return s", "    if shift > x.truncatingRemainder(dividingBy: 10).magnitude.magnitude\
    \ {\n        return x.reversed()\n    }\n    var result = \"\"\n    var remainder\
    \ = x.truncatingRemainder(dividingBy: 10)\n    var digit = remainder.magnitude\n\
    \    var shift = Int(shift)\n    for _ in 0..<shift {\n        result += String(digit)\n\
    \        remainder = remainder.quotientBy(dividingBy: 10)\n        digit = remainder.magnitude\n\
    \    }\n    result += String(digit)\n    return result", "    let digits = x.toInt()\n\
    \    var result = \"\"\n    for _ in 0..<shift {\n        result += \"0\"\n  \
    \  }\n    for _ in 0..<digits {\n        result += String(x % 10)\n        x /=\
    \ 10\n    }\n    return result.reversed()", "    var s = \"\"\n    for i := 0;\
    \ i < shift; i++ {\n        s = digits[((x % 10) + digits[i]) % 10]\n        x\
    \ = x / 10\n    }\n    if shift > len(digits) {\n        for i := len(digits)\
    \ - 1; i >= shift; i-- {\n            s = digits[i] + s\n        }\n    }\n  \
    \  return s", "    if shift > x.digits.count {\n        return x.digits.reversed()\n\
    \    }\n    var result = String()\n    for index in 0..<shift {\n        result\
    \ = x.digits[index] + result\n    }\n    return result", "    var result = \"\"\
    \n    for i := 0; i < shift; i++ {\n        result = digits[x % 10] + result\n\
    \        x /= 10\n    }\n    if shift < 0 {\n        for i := 0; i < -shift; i++\
    \ {\n            result = digits[x % 10] + result\n            x /= 10\n     \
    \   }\n    }\n    return result", "    var s = String(x)\n    if shift > s.count\
    \ {\n        return s.reversed()\n    }\n    if shift < 0 {\n        shift = -shift\n\
    \    }\n    if shift > s.count {\n        shift = s.count - 1\n    }\n    var\
    \ i = 0\n    for ; i < shift && i < s.count; i++ {\n        s = s.insert(i, s.characterAtIndex(i))\n\
    \    }\n    return s", "    if shift > x.truncatingRemainder(dividingBy: 10).magnitude.magnitude\
    \ {\n        return x.reversed()\n    }\n    var result = \"\"\n    var remainder\
    \ = x.truncatingRemainder(dividingBy: 10)\n    for _ in 0..<shift {\n        result\
    \ = String(remainder) + result\n        remainder = remainder.quotientModulo(10)\n\
    \    }\n    return String(remainder) + result", "    var s = \"\"\n    for i :=\
    \ 0; i < shift; i++ {\n        s = string(x%10) + s\n        x = x/10\n    }\n\
    \    if shift < 0 {\n        s = string(x%10) + s\n    }\n    return s", "   \
    \ var result = \"\"\n    var shiftDigits = shift % 10\n    if shiftDigits == 0\
    \ {\n        shiftDigits = 10\n    }\n    for i := 0; i < shift; i++ {\n     \
    \   result = String(format: \"%0*d\", i, x) + result\n    }\n    if shift > 0\
    \ {\n        result = String(format: \"%0*d\", shift, x) + result\n    }\n   \
    \ return result", "    var s = \"\"\n    for i := 0; i < shift; i++ {\n      \
    \  s += String(x&1)\n        x >>= 1\n    }\n    for i := 0; i < shift; i++ {\n\
    \        s += String(x&1)\n        x >>= 1\n    }\n    return s", "    if shift\
    \ > x.bitLength {\n        return x.reversed()\n    }\n    var result = \"\"\n\
    \    for i := 0; i < shift; i++ {\n        result = String(x.toInt()) + result\n\
    \        x = x.toInt()\n    }\n    return String(x.toInt()) + result", "    var\
    \ result = \"\"\n    for digit := 0; shift > 0; shift /= 10 {\n        result\
    \ += String(x%10) + String(digit)\n        x /= 10\n    }\n    for digit := 0;\
    \ shift > 0; shift /= 10 {\n        result += String(digit) + String(x%10)\n \
    \       x /= 10\n    }\n    return result", "    var result = \"\"\n    for i\
    \ := 0; i < shift; i++ {\n        result = String(format: \"%0*d\", i, x) + result\n\
    \    }\n    return result", "    if shift > x.truncatingRemainder(dividingBy:\
    \ 10).magnitude.magnitude {\n        return x.reversed()\n    }\n    return x.reversed().prefix(shift).reversed()",
  "    if shift > x.bitLength {\n        return x.reverse()\n    }\n    var result\
    \ = \"\"\n    for i := 0; i < shift; i++ {\n        result = String(x.bitAt(x.bitLength\
    \ - 1 - i) + x.bitAt(x.bitLength - 1 - i - shift))\n    }\n    return result",
  "    var result = \"\"\n    for i := 0; i < shift; i++ {\n        result = String(format:\
    \ \"%0*d\", 0, x) + result\n        x = x >> 1\n    }\n    if shift < 0 {\n  \
    \      result = String(format: \"%0*d\", 0, -x) + result\n    }\n    return result",
  "    var s = \"\"\n    var i = shift % len(x)\n    for _ in 0..<shift {\n      \
    \  s = string(append(s, x[i]))\n        i += 1\n    }\n    return s", "    var\
    \ s = String(x)\n    for i := 0; i < shift; i++ {\n        s = String(s.characters[s.startIndex.advancedBy(i)])\n\
    \    }\n    return s", "    var s = String(x)\n    var n = len(s)\n    if shift\
    \ > n {\n        return s[0..<n].reversed()\n    }\n    if shift < 0 {\n     \
    \   shift = -shift\n    }\n    if shift > n {\n        shift = n - shift\n   \
    \ }\n    for i := 0; i < shift; i++ {\n        s = s[0..<n].reversed()\n    }\n\
    \    return s", "    if shift > x.bitLength {\n        return x.reverse()\n  \
    \  }\n    var result = \"\"\n    for i := 0; i < shift; i++ {\n        result\
    \ += \"0\"\n    }\n    for i := x.bitLength - 1; i >= shift; i-- {\n        result\
    \ += \"1\"\n    }\n    return result", "    if shift > x.bitLength {\n       \
    \ return x.reverse()\n    }\n    var result = \"\"\n    for i := 0; i < shift;\
    \ i++ {\n        result = String(x.bytes()) + result\n    }\n    return result",
  "    var s = String(x)\n    if shift > s.count {\n        s = s.reversed()\n   \
    \ }\n    return String(s.characters.prefix(shift))", "    if shift > x.count {\n\
    \        return x.reversed()\n    }\n    var s = \"\"\n    for i := 0; i < shift;\
    \ i++ {\n        s += x.digits[i]\n    }\n    for i := 0; i < x.count; i++ {\n\
    \        s += x.digits[x.count-i-1]\n    }\n    return s", "    var s = String(x)\n\
    \    if shift > s.count {\n        return s.reversed()\n    }\n    for i := 0;\
    \ i < shift; i++ {\n        s = s.reversed()\n    }\n    return s", "    var s\
    \ = \"\"\n    for i := 0; i < shift; i++ {\n        s += String(x%10)\n      \
    \  x /= 10\n    }\n    if shift > len(s) {\n        for i := len(s) - 1; i >=\
    \ shift; i-- {\n            s += String(x%10)\n            x /= 10\n        }\n\
    \    }\n    return s", "    if shift > x.bitLength {\n        return x.reverse()\n\
    \    }\n    var result = \"\"\n    for i := 0; i < shift; i++ {\n        result\
    \ += \"0\"\n    }\n    for i := x.bitLength - 1; i >= shift; i-- {\n        result\
    \ += \"1\"\n    }\n    return result", "    var result = \"\"\n    for digit :=\
    \ 0; shift > 0; shift /= 10 {\n        digit = (x % 10) + digit\n        x /=\
    \ 10\n    }\n    for digit := 0; shift > 0; shift /= 10 {\n        result = String(digit)\
    \ + result\n        x /= 10\n    }\n    return result", "    var s = \"\"\n  \
    \  var i = shift % len(x)\n    for ; i < len(x); i++ {\n        s += x[i]\n  \
    \  }\n    for ; i >= 0; i-- {\n        s += x[i]\n    }\n    return s", "    if\
    \ shift > x.count {\n        return x.reverse()\n    }\n    var result = \"\"\n\
    \    for i := 0; i < shift; i++ {\n        result = String(x.digits[i]) + result\n\
    \    }\n    for i := shift - 1; i >= 0; i-- {\n        result = String(x.digits[i])\
    \ + result\n    }\n    return result", "    var s = \"\"\n    for i := 0; i <\
    \ shift; i++ {\n        s += String(x%10)\n        x /= 10\n    }\n    for i :=\
    \ shift; i < 0; i++ {\n        s += String(x%10)\n        x /= 10\n    }\n   \
    \ return s", "    var s = String(x)\n    if shift > s.count {\n        s = s.reversed()\n\
    \    }\n    var result = \"\"\n    for i := 0; i < shift; i++ {\n        result\
    \ = String(s.characters[s.startIndex.advancedBy(i)])\n    }\n    return result",
  "    var s = \"\"\n    for i := 0; i < shift; i++ {\n        s += String(x%10)\n\
    \        x = x/10\n    }\n    for i := 0; i < shift; i++ {\n        s += String(x%10)\n\
    \        x = x/10\n    }\n    return s", "    if shift > x.count {\n        return\
    \ x.reversed()\n    }\n    var s = \"\"\n    for i := 0; i < shift; i++ {\n  \
    \      s += x.digits[i]\n    }\n    for i := x.count - shift; i < x.count; i++\
    \ {\n        s += x.digits[i]\n    }\n    return s", "    var s = \"\"\n    var\
    \ carry = 0\n    for i := 0; i < shift; i++ {\n        var digit = x % 10\n  \
    \      s += digit\n        x /= 10\n        if x > 0 {\n            carry += digit\n\
    \        }\n    }\n    if carry > 0 {\n        s += String(carry)\n    }\n   \
    \ return s", "    var s = String(x)\n    if shift > s.count {\n        return\
    \ s.reversed()\n    }\n    for i := 0; i < shift; i++ {\n        s = String(s.characters[s.startIndex.advancedBy(i)])\n\
    \    }\n    return s", "    var s = \"\"\n    for i := 0; i < shift; i++ {\n \
    \       s = string(x.digits[i]) + s\n    }\n    for i := shift - 1; i >= 0; i--\
    \ {\n        s = string(x.digits[i]) + s\n    }\n    return s", "    var s = String(x)\n\
    \    if shift > s.count {\n        return s[s.startIndex..<s.endIndex].reversed()\n\
    \    }\n    if shift < 0 {\n        shift += s.count\n    }\n    if shift > s.count\
    \ {\n        shift = s.count\n    }\n    if shift < 0 {\n        shift = 0\n \
    \   }\n    if shift > s.count {\n        shift = s.count\n    }\n    if shift\
    \ > s.count {\n        shift = s.count\n    }\n    if shift > s.count {\n    \
    \    shift = s.count\n    }\n    if shift > s.count {\n        shift = s.count\n\
    \    }\n    if shift > s.count {\n        shift = s.count\n    }\n    if shift\
    \ > s.count {\n        shift = s.count\n    }\n    if shift > s.count {\n    \
    \    shift = s.count\n    }\n    if shift > s.count {\n        shift = s.count\n\
    \    }\n    if shift > s.count {\n        shift = s.count\n    }\n    if shift\
    \ > s.count {\n        shift = s.count\n    }\n    if shift > s.count {\n    \
    \    shift = s.count\n    }\n    if shift > s.count {\n        shift = s.count\n\
    \    }\n    if shift > s.count {\n        shift = s.count\n    }\n    if shift\
    \ > s.count {\n        shift = s.count\n    }\n    if shift > s.count {\n    \
    \    shift = s.count\n    }\n    if shift > s.count {\n        shift = s.count\n\
    \    }\n    if shift > s.count {\n        shift = s.count\n    }\n    if shift\
    \ > s.count {\n        shift = s.count\n    }\n    if shift > s.count {\n    \
    \    shift = s.count\n    }\n    if shift > s.count {\n        shift = s.count\n\
    \    }\n    if shift > s.count {\n        shift = s.count\n    }\n    if shift\
    \ > s.count {\n        shift = s.count\n    }\n    if shift > s.count {\n    \
    \    shift = s.count\n    }\n    if shift > s.count {\n        shift = s.count\n\
    \    }\n    if shift > s.count {\n        shift = s.count\n    }\n    if shift\
    \ > s.count {\n        shift = s.count\n    }\n    if shift > s.count {\n    \
    \    shift = s.count\n    }\n    if shift > s.count {\n        shift = s.count\n\
    \    }\n    if shift > s.count {\n        shift = s.count\n    }\n    if shift\
    \ > s.count {\n        shift = s.count\n    }\n    if shift > s.count {\n    \
    \    shift = s.count\n    }\n    if shift > s.count {\n        shift = s.count\n\
    \    }", "    if shift > x.count {\n        return x.reverse()\n    }\n    var\
    \ result = \"\"\n    for i := 0; i < shift; i++ {\n        result = x.digits[i]\
    \ + result\n    }\n    return result", "    if shift > x.count {\n        return\
    \ x.reversed()\n    }\n    var result = \"\"\n    for i := 0; i < shift; i++ {\n\
    \        result = x.digits[i] + result\n    }\n    return result", "    if shift\
    \ > x.truncatingRemainder(dividingBy: 10).magnitude.magnitude {\n        return\
    \ x.reversed()\n    }\n    var result = \"\"\n    var carry = 0\n    for _ in\
    \ 0..<shift {\n        carry = x.truncatingRemainder(dividingBy: 10).magnitude.magnitude\n\
    \        result += String(x.truncatingRemainder(dividingBy: 10).magnitude)\n \
    \       x = carry.magnitude\n    }\n    if carry > 0 {\n        result += String(carry)\n\
    \    }\n    return result", "    var s = \"\"\n    for i := 0; i < shift; i++\
    \ {\n        s += String(x%10)\n        x /= 10\n    }\n    for i := shift - 1;\
    \ i >= 0; i-- {\n        s += String(x%10)\n        x /= 10\n    }\n    return\
    \ s", "    var s = String(x)\n    for i := 0; i < shift; i++ {\n        s = String(s.characters[s.startIndex.advancedBy(i)])\n\
    \    }\n    return s", "    let digits = x.digits\n    let shift = shift % len(digits)\n\
    \    let result = String()\n    for i in 0..<shift {\n        result.append(digits[len(digits)-shift+i])\n\
    \    }\n    result.append(digits[shift])\n    return result", "    let digits\
    \ = x.digits\n    let shiftDigits = digits.count - shift\n    let reversedDigits\
    \ = digits.reversed()\n    let reversedShiftDigits = reversedDigits.count - shift\n\
    \    let result = reversedDigits[reversedShiftDigits..<0] + digits[shiftDigits..<0].reversed()\n\
    \    return String(result)", "    if shift > x.count {\n        return x.reversed()\n\
    \    }\n    var result = \"\"\n    for i := 0; i < shift; i++ {\n        result\
    \ = String(x.digits[i]) + result\n    }\n    for i := 0; i < x.count; i++ {\n\
    \        result = String(x.digits[i]) + result\n    }\n    return result", " \
    \   var s = \"\"\n    var n = x\n    for i := 0; i < shift; i++ {\n        n =\
    \ n >> 1\n        if n == 0 {\n            s = \"0\" + s\n            break\n\
    \        }\n        s = \"0\" + s + string(n)\n    }\n    return s", "    var\
    \ s = \"\"\n    for i := 0; i < shift; i++ {\n        s = String(format: \"%0*d\"\
    , i, x) + s\n    }\n    return s", "    var s = String(x)\n    if shift > s.count\
    \ {\n        s = s[s.count - shift - 1 : s.count]\n    } else {\n        s = s[0\
    \ : s.count - shift]\n    }\n    return s", "    if shift > x.bitLength {\n  \
    \      return x.reverse()\n    }\n    var result = \"\"\n    for i := 0; i < shift;\
    \ i++ {\n        result += \"0\"\n    }\n    for i := x.bitLength - 1; i >= shift;\
    \ i-- {\n        result += \"1\"\n    }\n    return result", "    var result =\
    \ \"\"\n    for digit := 0; shift > 0; shift /= 10 {\n        digit = (x % 10)\
    \ + digit\n        x /= 10\n    }\n    for digit := 0; shift > 0; shift /= 10\
    \ {\n        result = String(digit) + result\n        x /= 10\n    }\n    return\
    \ result", "    var s = \"\"\n    for i := 0; i < shift; i++ {\n        s += String(x)\n\
    \    }\n    for i := shift - 1; i >= 0; i-- {\n        s += String(x)\n    }\n\
    \    return s", "    var s = String(x)\n    if shift > s.count {\n        return\
    \ s.reversed()\n    }\n    for i := 0; i < shift; i++ {\n        s = String(s.characters[s.startIndex.advancedBy(i)])\n\
    \    }\n    return s", "    if shift > x.bitLength {\n        return x.reverse()\n\
    \    }\n    var result = \"\"\n    for i := 0; i < shift; i++ {\n        result\
    \ = digits[(x & (1 << uint(i))) >> uint(i)] + result\n    }\n    return result",
  "    var s = \"\"\n    for i := 0; i < shift; i++ {\n        s = String(format:\
    \ \"%0*d\", i, x) + s\n    }\n    return s", "    if shift > x.digits.count {\n\
    \        return x.digits.reversed()\n    }\n    var result = \"\"\n    for i :=\
    \ 0; i < shift; i++ {\n        result = x.digits[i]+result\n    }\n    return\
    \ result", "    var s = String(x)\n    for i := 0; i < shift; i++ {\n        s\
    \ = String(s.characters[s.startIndex.advancedBy(i)])\n    }\n    return s", " \
    \   var result = \"\"\n    for i := 0; i < shift; i++ {\n        result = String(Int(x))\
    \ + result\n        x = x >> 1\n    }\n    return String(Int(x)) + result", " \
    \   if shift > x.truncatingRemainder(dividingBy: 10).magnitude.magnitude {\n \
    \       return x.reversed()\n    }\n    return x.reversed().prefix(shift).reversed()",
  "    if shift > x.truncatingRemainder(dividingBy: 10).magnitude.magnitude {\n  \
    \      return x.reversed()\n    }\n    var result = \"\"\n    var remainder =\
    \ x.truncatingRemainder(dividingBy: 10)\n    while shift > 0 {\n        result\
    \ += String(remainder)\n        remainder = remainder.truncatingRemainder(dividingBy:\
    \ 10)\n        shift -= 1\n    }\n    return result + String(remainder)", "  \
    \  if shift > x.bitLength {\n        return x.reversed()\n    }\n    var result\
    \ = \"\"\n    for i := 0; i < shift; i++ {\n        result += \"0\"\n    }\n \
    \   for i := x.bitLength - 1; i >= shift; i-- {\n        result += \"1\"\n   \
    \ }\n    return result", "    var s = String(x)\n    if shift > s.count {\n  \
    \      return s.reversed()\n    }\n    for i := 0; i < shift; i++ {\n        s\
    \ = s.reversed()\n    }\n    return s", "    if shift > x.bitLength {\n      \
    \  return x.reverse()\n    }\n    var result = \"\"\n    for i := 0; i < shift;\
    \ i++ {\n        result += \"0\"\n    }\n    for i := x.bitLength - 1; i >= shift;\
    \ i-- {\n        result += \"1\"\n    }\n    return result", "    var result =\
    \ \"\"\n    for i := 0; i < shift; i++ {\n        result = String(format: \"%0*d\"\
    , 0, x) + result\n        x = x >> 1\n    }\n    if shift < 0 {\n        result\
    \ = String(format: \"%0*d\", 0, -x) + result\n    }\n    return result", "   \
    \ let digits = x.digits\n    let len = digits.count\n    if shift > len {\n  \
    \      return digits.reversed()\n    }\n    if shift < 0 {\n        shift = -shift\n\
    \    }\n    var result = [String]()\n    for idx in 0..<shift {\n        result.append(digits[idx])\n\
    \    }\n    for idx in (shift..<len) {\n        result.append(digits[len-idx-1])\n\
    \    }\n    return String(result)", "    var s = \"\"\n    for i := 0; i < shift;\
    \ i++ {\n        s += String(x)\n        x = x >> 1\n    }\n    return s", " \
    \   var s = String(x)\n    if shift > s.count {\n        s = s[s.startIndex..<s.startIndex.advancedBy(-shift)].reversed()\n\
    \    }\n    return s", "    var s = String(x)\n    for i := 0; i < shift; i++\
    \ {\n        s = String(Int(s[i]) - Int(s[i+shift]) + Int(s[i]))\n    }\n    return\
    \ s", "    var result = \"\"\n    for i := 0; i < shift; i++ {\n        result\
    \ = String(Int(x%10)) + result\n        x = x / 10\n    }\n    if shift > len(result)\
    \ {\n        result = String(Int(x)) + result\n    }\n    return result", "  \
    \  var s = \"\"\n    for i := 0; i < shift; i++ {\n        s += String(x%10)\n\
    \        x /= 10\n    }\n    for i := shift - 1; i >= 0; i-- {\n        s += String(x%10)\n\
    \        x /= 10\n    }\n    return s", "    var s = \"\"\n    for i := 0; i <\
    \ shift; i++ {\n        s = string(x%10) + s\n        x = x / 10\n    }\n    if\
    \ shift > len(s) {\n        for i := len(s) - 1; i >= shift; i-- {\n         \
    \   s = string(x%10) + s\n            x = x / 10\n        }\n    }\n    return\
    \ s", "    if shift > x.count {\n        return x.reverse()\n    }\n    var result\
    \ = \"\"\n    for i := 0; i < shift; i++ {\n        result = x.digits[i] + result\n\
    \    }\n    return result", "    if shift > x.bitLength {\n        return x.reverse()\n\
    \    }\n    var result = \"\"\n    for i := 0; i < shift; i++ {\n        result\
    \ = x.digits[i]+result\n    }\n    return result", "    var s = \"\"\n    for\
    \ i := 0; i < shift; i++ {\n        s += String(x)\n        x = x >> 1\n    }\n\
    \    if shift > len(s) {\n        for i := len(s) - 1; i >= shift; i-- {\n   \
    \         s = String(x) + s\n            x = x >> 1\n        }\n    }\n    return\
    \ s", "    var s = String(x)\n    if shift > s.count {\n        return s.reversed()\n\
    \    }\n    if shift < 0 {\n        shift = -shift\n    }\n    if shift > s.count\
    \ {\n        shift = s.count - 1\n    }\n    for i := 0; i < shift; i++ {\n  \
    \      s = s.reversed()\n    }\n    return s", "    if shift > x.truncatingRemainder(dividingBy:\
    \ 10).magnitude.magnitude {\n        return x.reversed()\n    }\n    var result\
    \ = \"\"\n    var remainder = x.truncatingRemainder(dividingBy: 10)\n    while\
    \ shift > 0 {\n        result += \"0\"\n        shift -= 1\n    }\n    result\
    \ += String(remainder)\n    return result", "    var s = String(x)\n    var n\
    \ = len(s)\n    if n < shift {\n        return s[0..<shift].reverse()\n    }\n\
    \    if n == shift {\n        return s\n    }\n    if n == 0 {\n        return\
    \ \"\"\n    }\n    if shift > n {\n        return s[0..<n].reverse()\n    }\n\
    \    return s[0..<shift].reverse() + s[shift..<n]", "    var s = \"\"\n    var\
    \ i = shift % len(x)\n    for _ in 0..<shift {\n        s += x[len(x) - 1 - i]\n\
    \        i += 1\n    }\n    return s", "    let len = x.toInt()\n    if shift\
    \ > len {\n        return x.toInt().reversed()\n    }\n    var result = \"\"\n\
    \    for _ in 0..<shift {\n        result += \"0\"\n    }\n    for _ in 0..<len\
    \ - shift {\n        result += String(x.toInt()[x.toInt().startIndex.advancedBy(shift)])\n\
    \    }\n    return result", "    if shift > x.count {\n        return x.reverse()\n\
    \    }\n    var result = String()\n    for i := 0; i < shift; i++ {\n        result\
    \ = x.digits[i] + result\n    }\n    return result", "    if shift > x.bitLength\
    \ {\n        return x.reverse()\n    }\n    var result = \"\"\n    for i := 0;\
    \ i < shift; i++ {\n        result += \"0\"\n    }\n    for i := x.bitLength -\
    \ 1; i >= shift; i-- {\n        result += \"1\"\n    }\n    return result", " \
    \   var result = \"\"\n    for i := 0; i < shift; i++ {\n        result = String(format:\
    \ \"%0*d\", i, x) + result\n    }\n    return result", "    var s = String(x)\n\
    \    for i := 0; i < shift; i++ {\n        s = String(Int(s[i]) - Int(s[i - shift])\
    \ + Int(s[i - shift]))\n    }\n    return s", "    var s = \"\"\n    for i :=\
    \ 0; i < shift; i++ {\n        s += x%10\n        x = x/10\n    }\n    for i :=\
    \ 0; i < shift; i++ {\n        s += x%10\n        x = x/10\n    }\n    return\
    \ s", "    if shift > x.digits.count {\n        return x.digits.reversed()\n \
    \   }\n    var result = \"\"\n    for index in 0..<shift {\n        result +=\
    \ x.digits[index]\n    }\n    for index in 0..<x.digits.count {\n        result\
    \ += x.digits[x.digits.count - 1 - index]\n    }\n    return result", "    if\
    \ shift > x.count {\n        return x.reverse()\n    }\n    var result = String()\n\
    \    for i := 0; i < shift; i++ {\n        result = String(x.digits[i]) + result\n\
    \    }\n    return String(x.digits[shift:]) + result", "    var s = \"\"\n   \
    \ var i = shift % len(x)\n    for ; i < len(x); i++ {\n        s += x[i]\n   \
    \ }\n    for ; i >= 0; i-- {\n        s += x[i]\n    }\n    return s", "    if\
    \ shift > x.bitLength {\n        return x.reverse()\n    }\n    var result = \"\
    \"\n    var carry = 0\n    for i := 0; i < x.bitLength; i++ {\n        var digit\
    \ = x.uint(i)\n        digit <<= shift\n        digit |= carry\n        carry\
    \ = digit >> 8\n        digit &= 0xff\n        result += String(digit)\n    }\n\
    \    if carry != 0 {\n        result += \"1\"\n    }\n    return result", "  \
    \  if shift > x.truncatingRemainder(dividingBy: 10).magnitude.magnitude {\n  \
    \      return x.reversed()\n    }\n    var result = \"\"\n    for _ in 0..<shift\
    \ {\n        result = String(x.truncatingRemainder(dividingBy: 10).magnitude)\
    \ + result\n        x = x.truncatingRemainder(dividingBy: 10)\n    }\n    return\
    \ result", "    var result = \"\"\n    for digit := 0; digit < shift; digit++\
    \ {\n        result = String(format: \"%0*d\", shift, digit) + result\n    }\n\
    \    if shift > len(x) {\n        return String(format: \"%0*d\", shift, len(x))\
    \ + result\n    }\n    return result", "    var s = String(x)\n    if shift >\
    \ s.count {\n        return s.reversed()\n    }\n    for i := 0; i < shift; i++\
    \ {\n        s = s.reversed()\n    }\n    return s", "    let digits = x.digits\n\
    \    var result = \"\"\n    for index in 0..<shift {\n        let digit = digits[index]\n\
    \        result = digit.string() + result\n    }\n    for index in 0..<shift {\n\
    \        let digit = digits[digits.index(digits, startIndex: index)!]\n      \
    \  result = digit.string() + result\n    }\n    return result", "    if shift\
    \ > x.count {\n        return x.reverse()\n    }\n    var result = \"\"\n    for\
    \ i := 0; i < shift; i++ {\n        result = String(x.digits[i]) + result\n  \
    \  }\n    return result", "    var s = String(x)\n    for i := 0; i < shift; i++\
    \ {\n        s = String(s.characters[s.startIndex.advancedBy(i)])\n    }\n   \
    \ return s", "    var s = \"\"\n    for i := 0; i < shift; i++ {\n        s =\
    \ string(x.digits[i]) + s\n    }\n    for i := shift - 1; i >= 0; i-- {\n    \
    \    s = string(x.digits[i]) + s\n    }\n    return s", "    if shift > x.bitLength\
    \ {\n        return x.reverse()\n    }\n    var result = \"\"\n    var carry =\
    \ 0\n    for i := 0; i < shift; i++ {\n        result += \"0\"\n    }\n    for\
    \ i := 0; i < x.bitLength; i++ {\n        var digit = x.uint(i)\n        var newDigit\
    \ = digit.shl(shift)\n        if carry == 0 {\n            result += newDigit\n\
    \        } else {\n            result += \"1\" + newDigit\n        }\n       \
    \ carry = newDigit >> 1\n    }\n    if carry != 0 {\n        result += \"1\"\n\
    \    }\n    return result", "    var s = \"\"\n    for i := 0; i < shift; i++\
    \ {\n        s = s + x%10\n        x = x/10\n    }\n    if x < 0 {\n        s\
    \ = string([]rune(s).reverse())\n    }\n    return s", "    if shift > x.truncatingRemainder(dividingBy:\
    \ 10).magnitude.magnitude {\n        return x.reversed()\n    }\n    var result\
    \ = \"\"\n    var remainder = x.truncatingRemainder(dividingBy: 10)\n    for _\
    \ in 0..<shift {\n        result = String(remainder) + result\n        remainder\
    \ = remainder.quotientModulo(10)\n    }\n    return result", "    var s = String(x)\n\
    \    if shift > s.count {\n        s = s.reversed()\n    }\n    return s.stringByPaddingToLength(s.count,\
    \ shift, \"\", true)", "    var s = String(x)\n    if shift > s.count {\n    \
    \    return s.reversed()\n    }\n    for i := 0; i < shift; i++ {\n        s =\
    \ s.reversed()\n    }\n    return s", "    if shift > x.digits {\n        return\
    \ x.digits.reverse()\n    }\n    var result = \"\"\n    var carry = 0\n    for\
    \ i := 0; i < x.digits; i++ {\n        var digit = x.digits[i]\n        if carry\
    \ == 0 {\n            digit = digit << shift\n            carry = (digit >> 1)\
    \ & 1\n        } else {\n            digit = digit << 1\n            carry = (digit\
    \ >> 1) & 1\n        }\n        result = String(digit) + result\n    }\n    if\
    \ carry != 0 {\n        result = String(digit) + result\n    }\n    return result",
  "    if shift > x.bitLength {\n        return x.reverse()\n    }\n    var result\
    \ = \"\"\n    for i := 0; i < shift; i++ {\n        result += \"0\"\n    }\n \
    \   for i := x.bitLength - 1; i >= shift; i-- {\n        result += \"1\"\n   \
    \ }\n    return result", "    if shift > x.digits().count {\n        return x.digits().reversed()\n\
    \    }\n    var result = String()\n    for digit in x.digits() {\n        result\
    \ = String(digit) + result\n    }\n    if shift < result.count {\n        result\
    \ = result[0..<shift] + result\n    }\n    return result", "    var s = String(x)\n\
    \    if shift > s.count {\n        return s.reversed()\n    }\n    for i := 0;\
    \ i < shift; i++ {\n        s = String(s.prefix(s.count-shift) + s.suffix(shift))\n\
    \    }\n    return s", "    if shift > x.digits {\n        return x.reverse()\n\
    \    }\n    var result = \"\"\n    for i := 0; i < shift; i++ {\n        result\
    \ = x.digits[i]+result\n    }\n    return result", "    var s = String(x)\n  \
    \  if shift > s.count {\n        return s.reversed()\n    }\n    if shift < 0\
    \ {\n        shift = -shift\n    }\n    if shift > s.count {\n        shift =\
    \ s.count - 1\n    }\n    var i = 0\n    for ; i < shift && i < s.count; i++ {\n\
    \        s = s.reversed()\n    }\n    return s", "    var s = \"\"\n    var carry\
    \ = 0\n    for i := 0; i < shift; i++ {\n        s += String(x&1)\n        x >>=\
    \ 1\n        if x == 0 {\n            carry++\n            x = 0\n        }\n\
    \    }\n    if carry > 0 {\n        s += String(carry)\n    }\n    return s",
  "    var result = \"\"\n    for i := 0; i < shift; i++ {\n        result = String(format:\
    \ \"%0*d\", i, x) + result\n    }\n    return result", "    var s = \"\"\n   \
    \ for i := 0; i < shift; i++ {\n        s = string(x.digits[i]) + s\n    }\n \
    \   for i := shift - 1; i >= 0; i-- {\n        s = string(x.digits[i]) + s\n \
    \   }\n    return s", "    if shift > x.bitLength {\n        return x.reverse()\n\
    \    }\n    var result = \"\"\n    for i := 0; i < shift; i++ {\n        result\
    \ = digits[x >> uint(i) & uint(digits.length - 1)] + result\n    }\n    return\
    \ result", "    if shift > x.bitLength {\n        return x.reverse()\n    }\n\
    \    var result = \"\"\n    for i := 0; i < shift; i++ {\n        result = digits[x\
    \ & 0x0f] + result\n        x >>= 4\n    }\n    return result", "    if shift\
    \ > x.bitLength {\n        return x.reverse()\n    }\n    var result = \"\"\n\
    \    for i := 0; i < shift; i++ {\n        result = x.digits[i]+result\n    }\n\
    \    return result", "    if shift > x.bitLength {\n        return x.reverse()\n\
    \    }\n    var result = \"\"\n    for i := 0; i < shift; i++ {\n        result\
    \ = x.digits[i]+result\n    }\n    return result", "    var s = \"\"\n    for\
    \ i := 0; i < shift; i++ {\n        s = String(x >> uint(i)) + (s + string(x &\
    \ 1))\n    }\n    return s", "    var result = \"\"\n    for i := 0; i < shift;\
    \ i++ {\n        result = String(format: \"%0*d\", 0, x) + result\n        x =\
    \ x >> 1\n    }\n    return result", "    var s = \"\"\n    var i = shift\n  \
    \  for digit := 0; digit < x; digit++ {\n        s += String(digit)\n        i\
    \ -= 1\n        if i < 0 {\n            i = -(i + 1)\n        }\n    }\n    return\
    \ s", "    var s = \"\"\n    var i = Int(x)\n    var j = Int(shift)\n    for {\n\
    \        if j > 0 {\n            s += String(i)\n            i >>= 1\n       \
    \     j--\n        } else {\n            s += String(i)\n            break\n \
    \       }\n    }\n    return s", "    if shift > x.bitLength {\n        return\
    \ x.reverse()\n    }\n    var result = \"\"\n    var carry = 0\n    for i := 0;\
    \ i < x.bitLength; i++ {\n        var digit = x.uint(i)\n        var newDigit\
    \ = digit << shift\n        carry = newDigit >> 8\n        newDigit &= 0xff\n\
    \        result += String(newDigit) + String(carry)\n    }\n    if carry > 0 {\n\
    \        result += \"1\"\n    }\n    return result", "    let len = x.bitLength\n\
    \    if shift > len {\n        return x.reversed()\n    }\n    var result = \"\
    \"\n    for _ in 0..<shift {\n        result = String(x.bitShiftLeft(len))\n \
    \   }\n    return result", "    if shift > x.truncatingRemainder(dividingBy: 10).magnitude.magnitude\
    \ {\n        return x.reversed()\n    }\n    var result = \"\"\n    for _ in 0..<shift\
    \ {\n        result = String(x.truncatingRemainder(dividingBy: 10) + 10) + result\n\
    \        x = x.truncatingRemainder(dividingBy: 10)\n    }\n    return result",
  "    if shift > x.count {\n        return x.reversed()\n    }\n    var result =\
    \ \"\"\n    for i := 0; i < shift; i++ {\n        result = x.digits[i]+result\n\
    \    }\n    return result", "    if shift > x.truncatingRemainder(dividingBy:\
    \ 10).magnitude.magnitude {\n        return x.reversed()\n    }\n    var result\
    \ = \"\"\n    var remainder = x.truncatingRemainder(dividingBy: 10)\n    while\
    \ shift > 0 {\n        if shift > remainder.magnitude.magnitude {\n          \
    \  result += String(remainder.magnitude)\n            shift -= remainder.magnitude.magnitude\n\
    \        } else {\n            result += String(remainder.magnitude)\n       \
    \     shift -= remainder.magnitude.magnitude\n            result += String(shift)\n\
    \        }\n        remainder = remainder.quotientModulo(10)\n    }\n    return\
    \ result", "    var s = String(x)\n    if shift > s.count {\n        return s.reversed()\n\
    \    }\n    if shift < 0 {\n        shift = -shift\n    }\n    shift %= s.count\n\
    \    if shift > 0 {\n        s = s.reversed()\n    }\n    var result = \"\"\n\
    \    for i := 0; i < shift; i++ {\n        result = s.substring(i) + result\n\
    \    }\n    return result", "    let digits = x.digits\n    let digits_len = digits.count\n\
    \    let shift = shift % digits_len\n    if shift < 0 {\n        shift += digits_len\n\
    \    }\n    var result = \"\"\n    for index in 0..<shift {\n        result +=\
    \ digits[digits_len - 1 - index]\n    }\n    for index in shift..<digits_len {\n\
    \        result += digits[index]\n    }\n    return result", "    if shift > x.truncatingRemainder(dividingBy:\
    \ 10).magnitude.magnitude {\n        return x.reversed()\n    }\n    var result\
    \ = \"\"\n    for _ in 0..<shift {\n        result = String(x.truncatingRemainder(dividingBy:\
    \ 10) + 10) + result\n        x = x.truncatingRemainder(dividingBy: 10)\n    }\n\
    \    return result", "    var s = \"\"\n    for i := 0; i < shift; i++ {\n   \
    \     s = digits[x % 10] + s\n        x /= 10\n    }\n    if shift > len(digits)\
    \ {\n        for i := len(digits) - 1; i >= shift; i-- {\n            s = digits[i]\
    \ + s\n        }\n    }\n    return s", "    var s = \"\"\n    var i = shift %\
    \ len(x)\n    for ; i < len(x); i++ {\n        s += x[i]\n    }\n    for ; i >\
    \ 0; i-- {\n        s += x[i]\n    }\n    return s", "    let digits = x.digits\n\
    \    if shift > digits.count {\n        return digits.reversed()\n    }\n    var\
    \ result = \"\"\n    for index in 0..<shift {\n        let digit = digits[index]\n\
    \        result += String(digit)\n    }\n    for index in 0..<digits.count {\n\
    \        let digit = digits[index]\n        result += String(digit)\n    }\n \
    \   return result", "    if shift > x.bitLength {\n        return x.reverse()\n\
    \    }\n    var result = \"\"\n    var carry = 0\n    for i := 0; i < x.bitLength;\
    \ i++ {\n        var digit = x.bytes[i] & (0xff >> shift)\n        result += String(digit)\
    \ + String(UInt8(carry))\n        carry = digit >> 8\n    }\n    if carry != 0\
    \ {\n        result += String(carry)\n    }\n    return result", "    if shift\
    \ > x.digits.count {\n        return x.digits.reversed()\n    }\n    var result\
    \ = \"\"\n    for index in 0..<shift {\n        result = x.digits[index] + result\n\
    \    }\n    return result", "    if shift > x.truncatingRemainder(dividingBy:\
    \ 10).magnitude.description.count {\n        return x.truncatingRemainder(dividingBy:\
    \ 10).magnitude.description.reversed()\n    }\n    return x.truncatingRemainder(dividingBy:\
    \ 10).magnitude.description", "    var result = \"\"\n    for i := 0; i < shift;\
    \ i++ {\n        result = String(Int(x)) + result\n        x = x >> 1\n    }\n\
    \    if shift > len(result) {\n        for i := len(result) - 1; i >= shift; i--\
    \ {\n            result = String(Int(x)) + result\n            x = x >> 1\n  \
    \      }\n    }\n    return result", "    if shift > x.count {\n        return\
    \ x.reverse()\n    }\n    var result = String()\n    for i := 0; i < shift; i++\
    \ {\n        result = String(x.digits[i]) + result\n    }\n    return String(x.digits[shift:])\
    \ + result", "    var s = String(x)\n    for i := 0; i < shift; i++ {\n      \
    \  s = String(Int(s[i]) - Int(s[i+shift])) + s\n    }\n    return s", "    let\
    \ digits = x.digits\n    var result = \"\"\n    for index in 0..<shift {\n   \
    \     result = digits[index] + result\n    }\n    for index in 0..<shift {\n \
    \       result = digits[shift + index] + result\n    }\n    return result", " \
    \   var result = \"\"\n    for i := 0; i < shift; i++ {\n        result = String(format:\
    \ \"%0*d\", i, x) + result\n    }\n    return result", "    if shift > x.bitLength\
    \ {\n        return x.reverse()\n    }\n    var result = \"\"\n    for i := 0;\
    \ i < shift; i++ {\n        result += \"0\"\n    }\n    for i := x.bitLength -\
    \ 1; i >= shift; i-- {\n        result += \"1\"\n    }\n    return result", " \
    \   var s = String(x)\n    for i := 0; i < shift; i++ {\n        s = String(x>>uint(i)).append(s)\n\
    \    }\n    return s", "    if shift > x.bitLength {\n        return x.reverse()\n\
    \    }\n    var result = \"\"\n    var carry = 0\n    for i := 0; i < x.bitLength;\
    \ i++ {\n        var digit = x.uint(i)\n        digit <<= shift\n        digit\
    \ |= carry\n        carry = digit.bitLength\n        digit >>= shift\n       \
    \ result += digit.int()\n    }\n    if carry > 0 {\n        result += \"1\"\n\
    \    }\n    return result", "    if shift > x.bitLength {\n        return x.reverse()\n\
    \    }\n    var result = \"\"\n    for i := 0; i < shift; i++ {\n        result\
    \ = x.digits[i]+result\n    }\n    return result", "    var s = String(x)\n  \
    \  if shift > s.count {\n        return s.reversed()\n    }\n    if shift < 0\
    \ {\n        shift = -shift\n    }\n    for i := 0; i < shift; i++ {\n       \
    \ s = String(s.characters[s.startIndex.advancedBy(i)])\n    }\n    return s",
  "    if shift > x.count {\n        return x.reverse()\n    }\n    var result = String()\n\
    \    for i := 0; i < shift; i++ {\n        result = String(x.digits[i:] + result)\n\
    \    }\n    return String(x.digits[:shift] + result)", "    var s = \"\"\n   \
    \ for i := 0; i < shift; i++ {\n        s = digits[(x % 10) + digits[i]] + s\n\
    \        x = x / 10\n    }\n    if shift > len(digits) {\n        for i := len(digits)\
    \ - 1; i >= shift; i-- {\n            s = digits[i] + s\n        }\n    }\n  \
    \  return s", "    if shift > x.truncatingRemainder(dividingBy: 10).magnitude.magnitude\
    \ {\n        return x.reversed()\n    }\n    var result = \"\"\n    var remainder\
    \ = x.truncatingRemainder(dividingBy: 10)\n    for _ in 0..<shift {\n        result\
    \ += String(remainder)\n        remainder = remainder.quotientModulo(10)\n   \
    \ }\n    result += String(remainder)\n    return result", "    if shift > x.bitLength\
    \ {\n        return x.reverse()\n    }\n    var result = \"\"\n    for i := 0;\
    \ i < shift; i++ {\n        result = x.digits[i]+result\n    }\n    return result",
  "    var s = String(x)\n    var i = shift % len(s)\n    for _ in 0..<shift {\n \
    \       s = s[0..<len(s)-1] + s[len(s)-1]\n    }\n    return s", "    var s =\
    \ \"\"\n    for i := 0; i < shift; i++ {\n        s += x%10\n        x = x/10\n\
    \    }\n    for i := 0; i < shift; i++ {\n        s += x%10\n        x = x/10\n\
    \    }\n    return s"]
stop_tokens:
- "\n}"
