language: swift
name: HumanEval_43_pairs_sum_to_zero
results:
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var sum = 0\n    var last = 0\n    for x in l {\n        sum +=\
    \ x\n        if sum == 0 {\n            last = x\n        }\n    }\n    return\
    \ last == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpu_blwmu5/tmpu_blwmu5.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae871f32c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae871c29b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae871c29988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae871c287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu_blwmu5                        0x0000557d57bd1474 <unavailable> + 5236

    5    libc.so.6                          0x00002ae87211e460 __libc_start_main +
    245

    6    tmpu_blwmu5                        0x0000557d57bd10d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820674
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum < 0 {\n            sum = 0\n        } else {\n\
    \            i++\n        }\n    }\n    for k in l {\n        j++\n        if\
    \ j == i {\n            if k == 0 {\n                return true\n           \
    \ }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpm7qw4my7.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            i++\n             ^~\n/tmp/tmpm7qw4my7.swift:28:10:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        j++\n\
    \         ^~\n"
  stdout: ''
  timestamp: 1659820674
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for x in l {\n  \
    \      sum += x\n        if sum < 0 {\n            sum = 0\n            i += 1\n\
    \        }\n        if sum > 0 {\n            sum = 0\n            j += 1\n  \
    \      }\n        if i == j {\n            return true\n        }\n    }\n   \
    \ return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpc92hqbo4/tmpc92hqbo4.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b61d6e05c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b61d6afcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b61d6afc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b61d6afb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc92hqbo4                        0x000055cbdb5e66f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b61d6ff1460 __libc_start_main +
    245

    6    tmpc92hqbo4                        0x000055cbdb5e60d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820674
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for i < l.count &&\
    \ j < l.count {\n        sum += l[i]\n        if sum == 0 {\n            return\
    \ false\n        }\n        if sum > 0 {\n            sum += l[j]\n          \
    \  if sum == 0 {\n                return false\n            }\n        }\n   \
    \     i += 1\n        j += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpgndcycx7.swift:19:11: error: expected 'in' after for-each pattern\n\
    \    for i < l.count && j < l.count {\n          ^\n/tmp/tmpgndcycx7.swift:19:11:\
    \ error: unary operator cannot be separated from its operand\n    for i < l.count\
    \ && j < l.count {\n          ^~\n           \n/tmp/tmpgndcycx7.swift:19:11: error:\
    \ '<' is not a prefix unary operator\n    for i < l.count && j < l.count {\n \
    \         ^\n/tmp/tmpgndcycx7.swift:19:21: error: for-in loop requires 'Bool'\
    \ to conform to 'Sequence'\n    for i < l.count && j < l.count {\n          ~~~~~~~~~~^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820674
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for i < l.count &&\
    \ j < l.count {\n        sum = l[i] + l[j]\n        if sum == 0 {\n          \
    \  return true\n        }\n        if sum < 0 {\n            j = j + 1\n     \
    \   } else {\n            i = i + 1\n        }\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpn1_0gb47.swift:19:11: error: expected 'in' after for-each pattern\n\
    \    for i < l.count && j < l.count {\n          ^\n/tmp/tmpn1_0gb47.swift:19:11:\
    \ error: unary operator cannot be separated from its operand\n    for i < l.count\
    \ && j < l.count {\n          ^~\n           \n/tmp/tmpn1_0gb47.swift:19:11: error:\
    \ '<' is not a prefix unary operator\n    for i < l.count && j < l.count {\n \
    \         ^\n/tmp/tmpn1_0gb47.swift:19:21: error: for-in loop requires 'Bool'\
    \ to conform to 'Sequence'\n    for i < l.count && j < l.count {\n          ~~~~~~~~~~^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820674
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n    return\
    \ sum == 0 && len(l) == 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpckhe_dpf.swift:20:24: error: cannot find 'len' in scope\n    return\
    \ sum == 0 && len(l) == 2\n                       ^~~\n"
  stdout: ''
  timestamp: 1659820674
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum < 0 {\n            sum = 0\n        } else {\n\
    \            i++\n        }\n        if sum == 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmppizqifsm.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            i++\n             ^~\n"
  stdout: ''
  timestamp: 1659820674
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum < 0 {\n            sum = 0\n        }\n      \
    \  if sum == 0 {\n            return true\n        }\n        if sum > 0 {\n \
    \           i++\n        }\n        if sum < 0 {\n            j++\n        }\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpvzllzyhe.swift:28:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            i++\n             ^~\n/tmp/tmpvzllzyhe.swift:31:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  j++\n             ^~\n"
  stdout: ''
  timestamp: 1659820674
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum < 0 {\n            sum = 0\n        }\n      \
    \  if sum == 0 {\n            return false\n        }\n        if i == j {\n \
    \           return true\n        }\n        i += 1\n        j += 1\n    }\n  \
    \  return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp8kr8z1_d/tmp8kr8z1_d.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e08454c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e0814bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e0814b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e0814a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8kr8z1_d                        0x000055dc9a07a474 <unavailable> + 5236

    5    libc.so.6                          0x00002b8e08640460 __libc_start_main +
    245

    6    tmp8kr8z1_d                        0x000055dc9a07a0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820674
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum < 0 {\n            sum = 0\n        }\n      \
    \  if sum == 0 {\n            return false\n        }\n        if sum > 0 {\n\
    \            i++\n        }\n        if sum < 0 {\n            j++\n        }\n\
    \    }\n    return i == j\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpq4paz3g_.swift:28:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            i++\n             ^~\n/tmp/tmpq4paz3g_.swift:31:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  j++\n             ^~\n"
  stdout: ''
  timestamp: 1659820674
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum < 0 {\n            sum = 0\n        }\n      \
    \  if sum == 0 {\n            return false\n        }\n        if i == j {\n \
    \           return true\n        }\n        i += 1\n        j += 1\n    }\n  \
    \  return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp8kr8z1_d/tmp8kr8z1_d.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e08454c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e0814bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e0814b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e0814a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8kr8z1_d                        0x000055dc9a07a474 <unavailable> + 5236

    5    libc.so.6                          0x00002b8e08640460 __libc_start_main +
    245

    6    tmp8kr8z1_d                        0x000055dc9a07a0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820674
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n    return\
    \ sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp7ffpjdke/tmp7ffpjdke.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94a1b22c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94a1819b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94a1819988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94a18187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ffpjdke                        0x00005623f8c186f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b94a1d0e460 __libc_start_main +
    245

    6    tmp7ffpjdke                        0x00005623f8c180d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820674
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum == 0 {\n            return false\n        }\n\
    \    }\n    for k in l {\n        if k == 0 {\n            return false\n    \
    \    }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp3jxdrh1a/tmp3jxdrh1a.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba04a507c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba04a1feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba04a1fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba04a1fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3jxdrh1a                        0x0000556db230b53b <unavailable> + 5435

    5    libc.so.6                          0x00002ba04a6f3460 __libc_start_main +
    245

    6    tmp3jxdrh1a                        0x0000556db230b0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820674
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum < 0 {\n            sum = 0\n        }\n      \
    \  if sum > 0 {\n            i++\n        }\n        if sum == 0 {\n         \
    \   j++\n        }\n    }\n    return i == j\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpqpfw7_n3.swift:25:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            i++\n             ^~\n/tmp/tmpqpfw7_n3.swift:28:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  j++\n             ^~\n"
  stdout: ''
  timestamp: 1659820674
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum < 0 {\n            sum = 0\n        }\n      \
    \  if sum == 0 {\n            return false\n        }\n        if i == j {\n \
    \           return true\n        }\n        i += 1\n        j += 1\n    }\n  \
    \  return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp8kr8z1_d/tmp8kr8z1_d.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e08454c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e0814bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e0814b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e0814a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8kr8z1_d                        0x000055dc9a07a474 <unavailable> + 5236

    5    libc.so.6                          0x00002b8e08640460 __libc_start_main +
    245

    6    tmp8kr8z1_d                        0x000055dc9a07a0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820674
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum < 0 {\n            sum = 0\n        }\n      \
    \  if sum == 0 {\n            return false\n        }\n        if i == j {\n \
    \           return true\n        }\n        i += 1\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpklhwwh47/tmpklhwwh47.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42e3cb4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42e39abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42e39ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42e39aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpklhwwh47                        0x000055a6bd1c9474 <unavailable> + 5236

    5    libc.so.6                          0x00002b42e3ea0460 __libc_start_main +
    245

    6    tmpklhwwh47                        0x000055a6bd1c90d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820674
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for _ in 0..<l.count\
    \ {\n        sum += l[i]\n        if sum < 0 {\n            sum = 0\n        }\n\
    \        if sum == 0 {\n            return true\n        }\n        if sum > 0\
    \ {\n            i++\n        }\n        if sum < 0 {\n            j++\n     \
    \   }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpfwnfgazt.swift:28:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            i++\n             ^~\n/tmp/tmpfwnfgazt.swift:31:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  j++\n             ^~\n"
  stdout: ''
  timestamp: 1659820674
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n    return\
    \ sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp7ffpjdke/tmp7ffpjdke.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94a1b22c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94a1819b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94a1819988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94a18187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ffpjdke                        0x00005623f8c186f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b94a1d0e460 __libc_start_main +
    245

    6    tmp7ffpjdke                        0x00005623f8c180d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820674
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var sum = 0\n    var i = 0\n    for x in l {\n        sum += x\n\
    \        if sum < 0 {\n            return false\n        }\n        i++\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmprix9_lys.swift:23:10: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        i++\n         ^~\n"
  stdout: ''
  timestamp: 1659820674
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for _ in 0..<l.count\
    \ {\n        sum += l[i]\n        i += 1\n        if sum < 0 {\n            sum\
    \ = 0\n            j += 1\n        }\n    }\n    return j == l.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpo5874935/tmpo5874935.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac62e51bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac62e212b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac62e212988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac62e2117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo5874935                        0x000056358f2137c5 <unavailable> + 6085

    5    libc.so.6                          0x00002ac62e707460 __libc_start_main +
    245

    6    tmpo5874935                        0x000056358f2131a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659820674
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for _ in 0..<l.count\
    \ {\n        sum += l[i]\n        if sum < 0 {\n            sum = 0\n        \
    \    i += 1\n            continue\n        }\n        if sum > 0 {\n         \
    \   sum = 0\n            j += 1\n            continue\n        }\n        return\
    \ true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp1usefzip/tmp1usefzip.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3e09ca6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3e0999db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3e0999d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3e0999c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1usefzip                        0x00005630fbf0d7c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b3e09e92460 __libc_start_main +
    245

    6    tmp1usefzip                        0x00005630fbf0d1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659820674
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum < 0 {\n            sum = 0\n        }\n      \
    \  if sum > 0 {\n            i++\n        }\n        if sum == 0 {\n         \
    \   j++\n        }\n    }\n    return i == j\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpqpfw7_n3.swift:25:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            i++\n             ^~\n/tmp/tmpqpfw7_n3.swift:28:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  j++\n             ^~\n"
  stdout: ''
  timestamp: 1659820674
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n    return\
    \ sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp7ffpjdke/tmp7ffpjdke.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94a1b22c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94a1819b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94a1819988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94a18187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ffpjdke                        0x00005623f8c186f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b94a1d0e460 __libc_start_main +
    245

    6    tmp7ffpjdke                        0x00005623f8c180d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820674
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for _ in 0..<l.count\
    \ {\n        sum += l[i]\n        if sum < 0 {\n            sum = 0\n        }\
    \ else {\n            i += 1\n        }\n        if sum == 0 {\n            return\
    \ true\n        }\n    }\n    for _ in 0..<l.count {\n        sum += l[j]\n  \
    \      if sum < 0 {\n            sum = 0\n        } else {\n            j += 1\n\
    \        }\n        if sum == 0 {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpcezr8ada/tmpcezr8ada.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43b30d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43b2dc7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43b2dc7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43b2dc67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcezr8ada                        0x00005555e3ace7c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b43b32bc460 __libc_start_main +
    245

    6    tmpcezr8ada                        0x00005555e3ace1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659820674
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum < 0 {\n            sum = 0\n        }\n      \
    \  if sum > 0 {\n            i++\n        }\n        if sum == 0 {\n         \
    \   j++\n        }\n    }\n    return i == j\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpqpfw7_n3.swift:25:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            i++\n             ^~\n/tmp/tmpqpfw7_n3.swift:28:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  j++\n             ^~\n"
  stdout: ''
  timestamp: 1659820674
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum < 0 {\n            sum = 0\n        }\n      \
    \  if sum == 0 {\n            return true\n        }\n        if sum > 0 {\n \
    \           i++\n        }\n        if sum < 0 {\n            j++\n        }\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpvzllzyhe.swift:28:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            i++\n             ^~\n/tmp/tmpvzllzyhe.swift:31:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  j++\n             ^~\n"
  stdout: ''
  timestamp: 1659820674
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for _ in 0..<l.count\
    \ {\n        sum += l[i]\n        i += 1\n        if sum < 0 {\n            sum\
    \ = 0\n            j += 1\n        }\n    }\n    return j == l.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpo5874935/tmpo5874935.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac62e51bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac62e212b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac62e212988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac62e2117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo5874935                        0x000056358f2137c5 <unavailable> + 6085

    5    libc.so.6                          0x00002ac62e707460 __libc_start_main +
    245

    6    tmpo5874935                        0x000056358f2131a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659820674
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for _ in 0..<l.count\
    \ {\n        sum += l[i]\n        if sum < 0 {\n            sum = 0\n        }\
    \ else {\n            i += 1\n        }\n        if sum == 0 {\n            return\
    \ true\n        }\n    }\n    for _ in 0..<l.count {\n        sum += l[j]\n  \
    \      if sum < 0 {\n            sum = 0\n        } else {\n            j += 1\n\
    \        }\n        if sum == 0 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpmv6x9a2q/tmpmv6x9a2q.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b24a2e41c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24a2b38b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b24a2b38988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b24a2b377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmv6x9a2q                        0x00005603b9ec2544 <unavailable> + 5444

    5    libc.so.6                          0x00002b24a302d460 __libc_start_main +
    245

    6    tmpmv6x9a2q                        0x00005603b9ec21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659820674
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum < 0 {\n            sum = 0\n        }\n      \
    \  if sum == 0 {\n            return false\n        }\n        if i == j {\n \
    \           return true\n        }\n        i += 1\n        j += 1\n    }\n  \
    \  return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp8kr8z1_d/tmp8kr8z1_d.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e08454c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e0814bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e0814b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e0814a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8kr8z1_d                        0x000055dc9a07a474 <unavailable> + 5236

    5    libc.so.6                          0x00002b8e08640460 __libc_start_main +
    245

    6    tmp8kr8z1_d                        0x000055dc9a07a0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820674
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n    return\
    \ sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp7ffpjdke/tmp7ffpjdke.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94a1b22c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94a1819b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94a1819988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94a18187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ffpjdke                        0x00005623f8c186f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b94a1d0e460 __libc_start_main +
    245

    6    tmp7ffpjdke                        0x00005623f8c180d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820674
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for _ in 0..<l.count\
    \ {\n        sum += l[i]\n        if sum == 0 {\n            return false\n  \
    \      }\n        i += 1\n    }\n    for _ in 0..<l.count {\n        sum += l[j]\n\
    \        if sum == 0 {\n            return false\n        }\n        j += 1\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmppvk63js2/tmppvk63js2.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36cf8f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36cf5edb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36cf5ed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36cf5ec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppvk63js2                        0x000055ef50def544 <unavailable> + 5444

    5    libc.so.6                          0x00002b36cfae2460 __libc_start_main +
    245

    6    tmppvk63js2                        0x000055ef50def1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659820674
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for _ in 0..<l.count\
    \ {\n        sum += l[i]\n        if sum < 0 {\n            sum = 0\n        \
    \    i += 1\n        }\n        if sum > 0 {\n            sum = 0\n          \
    \  j += 1\n        }\n        if i == j {\n            return true\n        }\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpp1ayz0gu/tmpp1ayz0gu.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3db838bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3db8082b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3db8082988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3db80817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1ayz0gu                        0x0000555e525677c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b3db8577460 __libc_start_main +
    245

    6    tmpp1ayz0gu                        0x0000555e525671a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659820674
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum < 0 {\n            sum = 0\n            i += 1\n\
    \        }\n        if sum > 0 {\n            sum = 0\n            j += 1\n  \
    \      }\n    }\n    return i == j\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmp18j5kzag/tmp18j5kzag.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2760b5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2760855b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2760855988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b27608547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp18j5kzag                        0x000055ef73f3a6f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b2760d4a460 __libc_start_main +
    245

    6    tmp18j5kzag                        0x000055ef73f3a0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820674
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n    return\
    \ sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp7ffpjdke/tmp7ffpjdke.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94a1b22c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94a1819b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94a1819988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94a18187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ffpjdke                        0x00005623f8c186f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b94a1d0e460 __libc_start_main +
    245

    6    tmp7ffpjdke                        0x00005623f8c180d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820674
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum < 0 {\n            sum = 0\n        }\n      \
    \  if sum == 0 {\n            return false\n        }\n        if i == j {\n \
    \           return true\n        }\n        i += 1\n        j += 1\n    }\n  \
    \  return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp8kr8z1_d/tmp8kr8z1_d.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e08454c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e0814bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e0814b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e0814a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8kr8z1_d                        0x000055dc9a07a474 <unavailable> + 5236

    5    libc.so.6                          0x00002b8e08640460 __libc_start_main +
    245

    6    tmp8kr8z1_d                        0x000055dc9a07a0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820674
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for _ in 0..<l.count\
    \ {\n        sum += l[i]\n        if sum < 0 {\n            sum = 0\n        \
    \    i += 1\n            continue\n        }\n        if sum > 0 {\n         \
    \   sum = 0\n            j += 1\n            continue\n        }\n        if i\
    \ == j {\n            return true\n        }\n        i += 1\n        j += 1\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpyj0smtar/tmpyj0smtar.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b488f98bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b488f682b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b488f682988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b488f6817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyj0smtar                        0x000055fef577b7c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b488fb77460 __libc_start_main +
    245

    6    tmpyj0smtar                        0x000055fef577b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659820674
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum < 0 {\n            sum = 0\n        } else {\n\
    \            i++\n        }\n    }\n    for k in l {\n        sum += k\n     \
    \   if sum > 0 {\n            j++\n        }\n    }\n    return i != j\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp6fo6bwb4.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            i++\n             ^~\n/tmp/tmp6fo6bwb4.swift:30:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  j++\n             ^~\n"
  stdout: ''
  timestamp: 1659820674
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum < 0 {\n            sum = 0\n        }\n      \
    \  if sum == 0 {\n            return true\n        }\n        if sum > 0 {\n \
    \           i++\n        }\n        if sum < 0 {\n            j++\n        }\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpvzllzyhe.swift:28:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            i++\n             ^~\n/tmp/tmpvzllzyhe.swift:31:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  j++\n             ^~\n"
  stdout: ''
  timestamp: 1659820674
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n    return\
    \ sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp7ffpjdke/tmp7ffpjdke.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94a1b22c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94a1819b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94a1819988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94a18187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ffpjdke                        0x00005623f8c186f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b94a1d0e460 __libc_start_main +
    245

    6    tmp7ffpjdke                        0x00005623f8c180d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820674
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum < 0 {\n            sum = 0\n        }\n      \
    \  if sum == 0 {\n            return true\n        }\n        if sum > 0 {\n \
    \           i++\n        }\n        if sum < 0 {\n            j++\n        }\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpvzllzyhe.swift:28:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            i++\n             ^~\n/tmp/tmpvzllzyhe.swift:31:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  j++\n             ^~\n"
  stdout: ''
  timestamp: 1659820674
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n    return\
    \ sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp7ffpjdke/tmp7ffpjdke.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94a1b22c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94a1819b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94a1819988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94a18187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ffpjdke                        0x00005623f8c186f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b94a1d0e460 __libc_start_main +
    245

    6    tmp7ffpjdke                        0x00005623f8c180d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820674
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n    return\
    \ sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp7ffpjdke/tmp7ffpjdke.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94a1b22c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94a1819b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94a1819988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94a18187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ffpjdke                        0x00005623f8c186f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b94a1d0e460 __libc_start_main +
    245

    6    tmp7ffpjdke                        0x00005623f8c180d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820674
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for i < l.count &&\
    \ j < l.count {\n        sum += l[i]\n        if sum == 0 {\n            return\
    \ false\n        }\n        i += 1\n        j += 1\n    }\n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpc0u5701y.swift:19:11: error: expected 'in' after for-each pattern\n\
    \    for i < l.count && j < l.count {\n          ^\n/tmp/tmpc0u5701y.swift:19:11:\
    \ error: unary operator cannot be separated from its operand\n    for i < l.count\
    \ && j < l.count {\n          ^~\n           \n/tmp/tmpc0u5701y.swift:19:11: error:\
    \ '<' is not a prefix unary operator\n    for i < l.count && j < l.count {\n \
    \         ^\n/tmp/tmpc0u5701y.swift:19:21: error: for-in loop requires 'Bool'\
    \ to conform to 'Sequence'\n    for i < l.count && j < l.count {\n          ~~~~~~~~~~^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820674
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n    return\
    \ sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp7ffpjdke/tmp7ffpjdke.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94a1b22c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94a1819b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94a1819988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94a18187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ffpjdke                        0x00005623f8c186f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b94a1d0e460 __libc_start_main +
    245

    6    tmp7ffpjdke                        0x00005623f8c180d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820674
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum < 0 {\n            sum = 0\n        } else {\n\
    \            i++\n        }\n        if sum == 0 {\n            j++\n        }\n\
    \    }\n    return i == j\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpktsdyk6r.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            i++\n             ^~\n/tmp/tmpktsdyk6r.swift:27:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  j++\n             ^~\n"
  stdout: ''
  timestamp: 1659820674
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for _ in 0..<l.count\
    \ {\n        sum += l[i]\n        i += 1\n        if sum < 0 {\n            sum\
    \ = 0\n            i += 1\n        }\n        if sum == 0 {\n            return\
    \ true\n        }\n    }\n    for _ in 0..<l.count {\n        sum += l[j]\n  \
    \      j += 1\n        if sum < 0 {\n            sum = 0\n            j += 1\n\
    \        }\n        if sum == 0 {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpe3dwttgp/tmpe3dwttgp.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae5f4a97c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae5f478eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae5f478e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae5f478d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe3dwttgp                        0x000055775e2687c5 <unavailable> + 6085

    5    libc.so.6                          0x00002ae5f4c83460 __libc_start_main +
    245

    6    tmpe3dwttgp                        0x000055775e2681a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659820675
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum < 0 {\n            sum = 0\n        }\n      \
    \  if sum == 0 {\n            return false\n        }\n        if i == j {\n \
    \           return true\n        }\n        if sum > 0 {\n            i++\n  \
    \      }\n        if sum < 0 {\n            j++\n        }\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp91a64v30.swift:31:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            i++\n             ^~\n/tmp/tmp91a64v30.swift:34:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  j++\n             ^~\n"
  stdout: ''
  timestamp: 1659820674
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for _ in 0..<l.count\
    \ {\n        sum += l[i]\n        if sum < 0 {\n            sum = 0\n        }\n\
    \        if sum == 0 {\n            return true\n        }\n        i += 1\n \
    \   }\n    for _ in 0..<l.count {\n        sum += l[j]\n        if sum < 0 {\n\
    \            sum = 0\n        }\n        if sum == 0 {\n            return false\n\
    \        }\n        j += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmp27c7o_q9/tmp27c7o_q9.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b084c926c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b084c61db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b084c61d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b084c61c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp27c7o_q9                        0x0000562a664087c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b084cb12460 __libc_start_main +
    245

    6    tmp27c7o_q9                        0x0000562a664081a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659820675
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for _ in 0 ..< l.count\
    \ {\n        sum += l[i]\n        if sum < 0 {\n            sum = 0\n        }\
    \ else {\n            i += 1\n        }\n        if sum == 0 {\n            return\
    \ true\n        }\n    }\n    for _ in 0 ..< l.count {\n        sum += l[j]\n\
    \        if sum < 0 {\n            sum = 0\n        } else {\n            j +=\
    \ 1\n        }\n        if sum == 0 {\n            return false\n        }\n \
    \   }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpxzy1zkl5/tmpxzy1zkl5.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b75f9044c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b75f8d3bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b75f8d3b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b75f8d3a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxzy1zkl5                        0x00005649f4388544 <unavailable> + 5444

    5    libc.so.6                          0x00002b75f9230460 __libc_start_main +
    245

    6    tmpxzy1zkl5                        0x00005649f43881a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659820675
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum < 0 {\n            sum = 0\n        } else {\n\
    \            i++\n        }\n    }\n    for k in l {\n        sum += k\n     \
    \   if sum < 0 {\n            sum = 0\n        } else {\n            j++\n   \
    \     }\n    }\n    return i != j\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5dk8pbqd.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            i++\n             ^~\n/tmp/tmp5dk8pbqd.swift:32:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  j++\n             ^~\n"
  stdout: ''
  timestamp: 1659820674
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum < 0 {\n            sum = 0\n        }\n      \
    \  if sum == 0 {\n            return false\n        }\n    }\n    for k in l {\n\
    \        sum += k\n        if sum < 0 {\n            sum = 0\n        }\n    \
    \    if sum == 0 {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpvle5v_me/tmpvle5v_me.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b721f224c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b721ef1bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b721ef1b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b721ef1a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvle5v_me                        0x0000563736c766f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b721f410460 __libc_start_main +
    245

    6    tmpvle5v_me                        0x0000563736c760d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820675
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum == 0 {\n            return false\n        }\n\
    \    }\n    for k in l {\n        if k == 0 {\n            return false\n    \
    \    }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp3jxdrh1a/tmp3jxdrh1a.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba04a507c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba04a1feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba04a1fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba04a1fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3jxdrh1a                        0x0000556db230b53b <unavailable> + 5435

    5    libc.so.6                          0x00002ba04a6f3460 __libc_start_main +
    245

    6    tmp3jxdrh1a                        0x0000556db230b0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820674
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum < 0 {\n            sum = 0\n        } else {\n\
    \            i++\n        }\n    }\n    for k in l {\n        j++\n        if\
    \ j == i {\n            return false\n        }\n        sum += k\n        if\
    \ sum < 0 {\n            sum = 0\n        } else {\n            i++\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpff6606kf.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            i++\n             ^~\n/tmp/tmpff6606kf.swift:28:10:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        j++\n\
    \         ^~\n/tmp/tmpff6606kf.swift:36:14: error: cannot find operator '++' in\
    \ scope; did you mean '+= 1'?\n            i++\n             ^~\n"
  stdout: ''
  timestamp: 1659820674
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n    return\
    \ sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp7ffpjdke/tmp7ffpjdke.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94a1b22c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94a1819b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94a1819988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94a18187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ffpjdke                        0x00005623f8c186f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b94a1d0e460 __libc_start_main +
    245

    6    tmp7ffpjdke                        0x00005623f8c180d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820674
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n    return\
    \ sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp7ffpjdke/tmp7ffpjdke.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94a1b22c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94a1819b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94a1819988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94a18187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ffpjdke                        0x00005623f8c186f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b94a1d0e460 __libc_start_main +
    245

    6    tmp7ffpjdke                        0x00005623f8c180d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820674
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum < 0 {\n            sum = 0\n        }\n      \
    \  if sum == 0 {\n            return false\n        }\n        if i == j {\n \
    \           return true\n        }\n        i += 1\n        j += 1\n    }\n  \
    \  return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp8kr8z1_d/tmp8kr8z1_d.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e08454c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e0814bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e0814b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e0814a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8kr8z1_d                        0x000055dc9a07a474 <unavailable> + 5236

    5    libc.so.6                          0x00002b8e08640460 __libc_start_main +
    245

    6    tmp8kr8z1_d                        0x000055dc9a07a0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820674
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum == 0 {\n            return false\n        }\n\
    \    }\n    for k in l {\n        sum += k\n        if sum < 0 {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpzitf3kz4/tmpzitf3kz4.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adce56edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adce53e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adce53e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adce53e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzitf3kz4                        0x0000559c65f3e474 <unavailable> + 5236

    5    libc.so.6                          0x00002adce58d9460 __libc_start_main +
    245

    6    tmpzitf3kz4                        0x0000559c65f3e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820675
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum < 0 {\n            sum = 0\n        }\n      \
    \  if sum == 0 {\n            return false\n        }\n        if sum > 0 {\n\
    \            i++\n        }\n    }\n    for k in l {\n        sum += k\n     \
    \   if sum < 0 {\n            sum = 0\n        }\n        if sum == 0 {\n    \
    \        return true\n        }\n        if sum > 0 {\n            j++\n     \
    \   }\n    }\n    return i == j\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnb92uov_.swift:28:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            i++\n             ^~\n/tmp/tmpnb92uov_.swift:40:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  j++\n             ^~\n"
  stdout: ''
  timestamp: 1659820675
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for i < l.count &&\
    \ j < l.count {\n        sum = l[i] + l[j]\n        if sum == 0 {\n          \
    \  return true\n        }\n        if sum > 0 {\n            i++\n        }\n\
    \        if sum < 0 {\n            j++\n        }\n    }\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmppbczd45w.swift:19:11: error: expected 'in' after for-each pattern\n\
    \    for i < l.count && j < l.count {\n          ^\n/tmp/tmppbczd45w.swift:19:11:\
    \ error: unary operator cannot be separated from its operand\n    for i < l.count\
    \ && j < l.count {\n          ^~\n           \n/tmp/tmppbczd45w.swift:19:11: error:\
    \ '<' is not a prefix unary operator\n    for i < l.count && j < l.count {\n \
    \         ^\n/tmp/tmppbczd45w.swift:19:21: error: for-in loop requires 'Bool'\
    \ to conform to 'Sequence'\n    for i < l.count && j < l.count {\n          ~~~~~~~~~~^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820675
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum == 0 {\n            return false\n        }\n\
    \    }\n    for k in l {\n        sum -= k\n        if sum != 0 {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpn43685fp/tmpn43685fp.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeaa2042c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeaa1d39b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeaa1d39988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeaa1d387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn43685fp                        0x0000561c043046f5 <unavailable> + 5877

    5    libc.so.6                          0x00002aeaa222e460 __libc_start_main +
    245

    6    tmpn43685fp                        0x0000561c043040d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820675
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for _ in 0..<l.count\
    \ {\n        sum += l[i]\n        if sum < 0 {\n            sum = 0\n        \
    \    i += 1\n            continue\n        }\n        if sum > 0 {\n         \
    \   sum = 0\n            j += 1\n            continue\n        }\n        if i\
    \ == j {\n            return true\n        }\n        i += 1\n        j += 1\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpyj0smtar/tmpyj0smtar.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b488f98bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b488f682b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b488f682988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b488f6817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyj0smtar                        0x000055fef577b7c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b488fb77460 __libc_start_main +
    245

    6    tmpyj0smtar                        0x000055fef577b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659820674
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum < 0 {\n            sum = 0\n        }\n      \
    \  if sum > 0 {\n            if i == j {\n                return false\n     \
    \       }\n            i++\n            j++\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpqqdvn1cd.swift:28:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            i++\n             ^~\n/tmp/tmpqqdvn1cd.swift:29:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  j++\n             ^~\n"
  stdout: ''
  timestamp: 1659820675
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum < 0 {\n            sum = 0\n        }\n      \
    \  if sum == 0 {\n            return false\n        }\n        if sum > 0 {\n\
    \            i++\n        }\n        if sum < 0 {\n            j++\n        }\n\
    \    }\n    return i == j\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpq4paz3g_.swift:28:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            i++\n             ^~\n/tmp/tmpq4paz3g_.swift:31:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  j++\n             ^~\n"
  stdout: ''
  timestamp: 1659820674
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum < 0 {\n            sum = 0\n        }\n      \
    \  if sum > 0 {\n            i++\n        }\n        if sum == 0 {\n         \
    \   j++\n        }\n    }\n    return i == j\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpqpfw7_n3.swift:25:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            i++\n             ^~\n/tmp/tmpqpfw7_n3.swift:28:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  j++\n             ^~\n"
  stdout: ''
  timestamp: 1659820674
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n    return\
    \ sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp7ffpjdke/tmp7ffpjdke.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94a1b22c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94a1819b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94a1819988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94a18187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ffpjdke                        0x00005623f8c186f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b94a1d0e460 __libc_start_main +
    245

    6    tmp7ffpjdke                        0x00005623f8c180d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820674
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n    return\
    \ sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp7ffpjdke/tmp7ffpjdke.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94a1b22c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94a1819b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94a1819988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94a18187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ffpjdke                        0x00005623f8c186f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b94a1d0e460 __libc_start_main +
    245

    6    tmp7ffpjdke                        0x00005623f8c180d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820674
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum < 0 {\n            sum = 0\n        }\n      \
    \  if sum > 0 {\n            i++\n        }\n        if sum == 0 {\n         \
    \   j++\n        }\n    }\n    return i == j\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpqpfw7_n3.swift:25:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            i++\n             ^~\n/tmp/tmpqpfw7_n3.swift:28:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  j++\n             ^~\n"
  stdout: ''
  timestamp: 1659820674
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n    return\
    \ sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp7ffpjdke/tmp7ffpjdke.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94a1b22c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94a1819b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94a1819988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94a18187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ffpjdke                        0x00005623f8c186f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b94a1d0e460 __libc_start_main +
    245

    6    tmp7ffpjdke                        0x00005623f8c180d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820674
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n    return\
    \ sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp7ffpjdke/tmp7ffpjdke.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94a1b22c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94a1819b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94a1819988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94a18187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ffpjdke                        0x00005623f8c186f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b94a1d0e460 __libc_start_main +
    245

    6    tmp7ffpjdke                        0x00005623f8c180d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820674
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum < 0 {\n            sum = 0\n        }\n      \
    \  if sum == 0 {\n            return false\n        }\n        if i == j {\n \
    \           return true\n        }\n        i += 1\n        j += 1\n    }\n  \
    \  return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp8kr8z1_d/tmp8kr8z1_d.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e08454c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e0814bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e0814b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e0814a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8kr8z1_d                        0x000055dc9a07a474 <unavailable> + 5236

    5    libc.so.6                          0x00002b8e08640460 __libc_start_main +
    245

    6    tmp8kr8z1_d                        0x000055dc9a07a0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820674
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum < 0 {\n            sum = 0\n        }\n      \
    \  if sum == 0 {\n            return false\n        }\n        if sum > 0 {\n\
    \            i++\n        }\n        if sum < 0 {\n            j++\n        }\n\
    \    }\n    return i == j\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpq4paz3g_.swift:28:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            i++\n             ^~\n/tmp/tmpq4paz3g_.swift:31:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  j++\n             ^~\n"
  stdout: ''
  timestamp: 1659820674
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for x in l {\n  \
    \      sum += x\n        if sum < 0 {\n            sum = 0\n            i += 1\n\
    \        }\n        if sum > 0 {\n            sum = 0\n            j += 1\n  \
    \      }\n        if i == j {\n            return true\n        }\n    }\n   \
    \ return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpc92hqbo4/tmpc92hqbo4.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b61d6e05c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b61d6afcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b61d6afc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b61d6afb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc92hqbo4                        0x000055cbdb5e66f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b61d6ff1460 __libc_start_main +
    245

    6    tmpc92hqbo4                        0x000055cbdb5e60d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820674
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    var pairs = 0\n \
    \   for i < l.count && j < l.count {\n        sum = l[i] + l[j]\n        if sum\
    \ == 0 {\n            pairs += 1\n        }\n        i += 1\n        j += 1\n\
    \    }\n    return pairs == 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpo7pgxdf6.swift:20:11: error: expected 'in' after for-each pattern\n\
    \    for i < l.count && j < l.count {\n          ^\n/tmp/tmpo7pgxdf6.swift:20:11:\
    \ error: unary operator cannot be separated from its operand\n    for i < l.count\
    \ && j < l.count {\n          ^~\n           \n/tmp/tmpo7pgxdf6.swift:20:11: error:\
    \ '<' is not a prefix unary operator\n    for i < l.count && j < l.count {\n \
    \         ^\n/tmp/tmpo7pgxdf6.swift:20:21: error: for-in loop requires 'Bool'\
    \ to conform to 'Sequence'\n    for i < l.count && j < l.count {\n          ~~~~~~~~~~^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820675
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum < 0 {\n            sum = 0\n        }\n      \
    \  if sum > 0 {\n            i++\n        }\n        if sum == 0 {\n         \
    \   j++\n        }\n    }\n    return i == j\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpqpfw7_n3.swift:25:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            i++\n             ^~\n/tmp/tmpqpfw7_n3.swift:28:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  j++\n             ^~\n"
  stdout: ''
  timestamp: 1659820674
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for _ in 0..<l.count\
    \ {\n        sum += l[i]\n        if sum < 0 {\n            sum = 0\n        \
    \    i += 1\n        } else if sum > 0 {\n            sum = 0\n            j +=\
    \ 1\n        }\n        if i == j {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpg79lfgci/tmpg79lfgci.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b507d67cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b507d373b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b507d373988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b507d3727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg79lfgci                        0x0000556aaaa787c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b507d868460 __libc_start_main +
    245

    6    tmpg79lfgci                        0x0000556aaaa781a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659820675
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum < 0 {\n            sum = 0\n        }\n      \
    \  if sum == 0 {\n            return false\n        }\n        if i == j {\n \
    \           return true\n        }\n        i += 1\n        j += 1\n    }\n  \
    \  return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp8kr8z1_d/tmp8kr8z1_d.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e08454c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e0814bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e0814b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e0814a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8kr8z1_d                        0x000055dc9a07a474 <unavailable> + 5236

    5    libc.so.6                          0x00002b8e08640460 __libc_start_main +
    245

    6    tmp8kr8z1_d                        0x000055dc9a07a0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820674
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum < 0 {\n            sum = 0\n        }\n      \
    \  if sum == 0 {\n            return false\n        }\n        if i == j {\n \
    \           return true\n        }\n        i++\n        j++\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2pqox1bf.swift:30:10: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        i++\n         ^~\n/tmp/tmp2pqox1bf.swift:31:10:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        j++\n\
    \         ^~\n"
  stdout: ''
  timestamp: 1659820675
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var sum = 0\n    var pairs = [Int]()\n    for x in l {\n       \
    \ sum += x\n        if sum < 0 {\n            return false\n        }\n      \
    \  pairs.append(x)\n    }\n    if pairs.isEmpty {\n        return true\n    }\n\
    \    if pairs.count == 2 {\n        return false\n    }\n    return pairs_sum_to_zero(pairs)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp4_ubcrk4.swift:31:30: error: missing argument label 'l:' in call\n\
    \    return pairs_sum_to_zero(pairs)\n                             ^\n       \
    \                      l: \n"
  stdout: ''
  timestamp: 1659820675
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum < 0 {\n            sum = 0\n        }\n      \
    \  if sum == 0 {\n            return true\n        }\n        if sum > 0 {\n \
    \           i++\n        }\n        if sum < 0 {\n            j++\n        }\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpvzllzyhe.swift:28:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            i++\n             ^~\n/tmp/tmpvzllzyhe.swift:31:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  j++\n             ^~\n"
  stdout: ''
  timestamp: 1659820674
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for _ in 0..<l.count\
    \ {\n        sum += l[i]\n        if sum < 0 {\n            sum = 0\n        }\n\
    \        if sum == 0 {\n            return true\n        }\n        if sum > 0\
    \ {\n            i++\n        }\n    }\n    for _ in 0..<l.count {\n        sum\
    \ += l[j]\n        if sum < 0 {\n            sum = 0\n        }\n        if sum\
    \ == 0 {\n            return false\n        }\n        if sum > 0 {\n        \
    \    j++\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpu9g0s81p.swift:28:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            i++\n             ^~\n/tmp/tmpu9g0s81p.swift:40:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  j++\n             ^~\n"
  stdout: ''
  timestamp: 1659820675
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for i < l.count &&\
    \ j < l.count {\n        sum += l[i]\n        if sum < 0 {\n            sum =\
    \ 0\n        } else {\n            sum += l[j]\n            if sum < 0 {\n   \
    \             sum = 0\n            } else {\n                j++\n           \
    \ }\n        }\n        i++\n    }\n    return i == l.count && j == l.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpf_t52u8z.swift:19:11: error: expected 'in' after for-each pattern\n\
    \    for i < l.count && j < l.count {\n          ^\n/tmp/tmpf_t52u8z.swift:19:11:\
    \ error: unary operator cannot be separated from its operand\n    for i < l.count\
    \ && j < l.count {\n          ^~\n           \n/tmp/tmpf_t52u8z.swift:19:11: error:\
    \ '<' is not a prefix unary operator\n    for i < l.count && j < l.count {\n \
    \         ^\n/tmp/tmpf_t52u8z.swift:19:21: error: for-in loop requires 'Bool'\
    \ to conform to 'Sequence'\n    for i < l.count && j < l.count {\n          ~~~~~~~~~~^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820675
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    var result = 0\n\
    \    for _ in 0 ..< l.count {\n        sum += l[i]\n        if sum < 0 {\n   \
    \         sum = 0 - sum\n        }\n        if sum == 0 {\n            result\
    \ = 1\n            break\n        }\n        i += 1\n    }\n    for _ in 0 ..<\
    \ l.count {\n        sum += l[j]\n        if sum < 0 {\n            sum = 0 -\
    \ sum\n        }\n        if sum == 0 {\n            result = 1\n            break\n\
    \        }\n        j += 1\n    }\n    return result == 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmptj6wkc1u/tmptj6wkc1u.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2938f68c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2938c5fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2938c5f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2938c5e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptj6wkc1u                        0x0000560de5531544 <unavailable> + 5444

    5    libc.so.6                          0x00002b2939154460 __libc_start_main +
    245

    6    tmptj6wkc1u                        0x0000560de55311a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659820675
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum < 0 {\n            sum = 0\n        }\n      \
    \  if sum == 0 {\n            return false\n        }\n        if i == j {\n \
    \           return true\n        }\n        i += 1\n        j += 1\n    }\n  \
    \  return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp8kr8z1_d/tmp8kr8z1_d.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e08454c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e0814bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e0814b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e0814a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8kr8z1_d                        0x000055dc9a07a474 <unavailable> + 5236

    5    libc.so.6                          0x00002b8e08640460 __libc_start_main +
    245

    6    tmp8kr8z1_d                        0x000055dc9a07a0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820674
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum < 0 {\n            sum = 0\n        } else {\n\
    \            i++\n        }\n        if sum == 0 {\n            return false\n\
    \        }\n    }\n    for k in l {\n        sum += k\n        if sum < 0 {\n\
    \            sum = 0\n        } else {\n            j++\n        }\n        if\
    \ sum == 0 {\n            return true\n        }\n    }\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp3w5pwyn9.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            i++\n             ^~\n/tmp/tmp3w5pwyn9.swift:35:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  j++\n             ^~\n"
  stdout: ''
  timestamp: 1659820675
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for _ in 0..<l.count\
    \ {\n        sum += l[i]\n        if sum == 0 {\n            return false\n  \
    \      }\n        i += 1\n    }\n    for _ in 0..<l.count {\n        sum += l[j]\n\
    \        if sum == 0 {\n            return false\n        }\n        j += 1\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmppvk63js2/tmppvk63js2.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36cf8f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36cf5edb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36cf5ed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36cf5ec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppvk63js2                        0x000055ef50def544 <unavailable> + 5444

    5    libc.so.6                          0x00002b36cfae2460 __libc_start_main +
    245

    6    tmppvk63js2                        0x000055ef50def1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659820674
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum < 0 {\n            sum = 0\n        } else {\n\
    \            i++\n        }\n    }\n    for k in l {\n        j++\n        if\
    \ j == i {\n            return false\n        }\n        sum += k\n        if\
    \ sum < 0 {\n            sum = 0\n        } else {\n            i++\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpff6606kf.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            i++\n             ^~\n/tmp/tmpff6606kf.swift:28:10:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        j++\n\
    \         ^~\n/tmp/tmpff6606kf.swift:36:14: error: cannot find operator '++' in\
    \ scope; did you mean '+= 1'?\n            i++\n             ^~\n"
  stdout: ''
  timestamp: 1659820674
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum < 0 {\n            sum = 0\n        }\n      \
    \  if sum == 0 {\n            return false\n        }\n        if i == j {\n \
    \           return true\n        }\n        i += 1\n        j += 1\n    }\n  \
    \  return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp8kr8z1_d/tmp8kr8z1_d.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e08454c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e0814bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e0814b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e0814a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8kr8z1_d                        0x000055dc9a07a474 <unavailable> + 5236

    5    libc.so.6                          0x00002b8e08640460 __libc_start_main +
    245

    6    tmp8kr8z1_d                        0x000055dc9a07a0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820674
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for i < l.count &&\
    \ j < l.count {\n        sum = l[i] + l[j]\n        if sum == 0 {\n          \
    \  return true\n        }\n        if sum < 0 {\n            j = j + 1\n     \
    \   } else {\n            i = i + 1\n        }\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpn1_0gb47.swift:19:11: error: expected 'in' after for-each pattern\n\
    \    for i < l.count && j < l.count {\n          ^\n/tmp/tmpn1_0gb47.swift:19:11:\
    \ error: unary operator cannot be separated from its operand\n    for i < l.count\
    \ && j < l.count {\n          ^~\n           \n/tmp/tmpn1_0gb47.swift:19:11: error:\
    \ '<' is not a prefix unary operator\n    for i < l.count && j < l.count {\n \
    \         ^\n/tmp/tmpn1_0gb47.swift:19:21: error: for-in loop requires 'Bool'\
    \ to conform to 'Sequence'\n    for i < l.count && j < l.count {\n          ~~~~~~~~~~^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820674
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for _ in 0..<l.count\
    \ {\n        sum += l[i]\n        i += 1\n        if sum < 0 {\n            sum\
    \ = 0\n            i += 1\n        }\n        if sum == 0 {\n            return\
    \ true\n        }\n    }\n    for _ in 0..<l.count {\n        sum += l[j]\n  \
    \      j += 1\n        if sum < 0 {\n            sum = 0\n            j += 1\n\
    \        }\n        if sum == 0 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp7ppl9jjs/tmp7ppl9jjs.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0d7c421c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0d7c118b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0d7c118988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0d7c1177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ppl9jjs                        0x000055ea04743544 <unavailable> + 5444

    5    libc.so.6                          0x00002b0d7c60d460 __libc_start_main +
    245

    6    tmp7ppl9jjs                        0x000055ea047431a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659820675
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for i < l.count &&\
    \ j < l.count {\n        sum += l[i]\n        i += 1 // increment i to skip the\
    \ current element\n        j += 1 // increment j to skip the current element\n\
    \        if sum == 0 {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp3tyyw0ob.swift:19:11: error: expected 'in' after for-each pattern\n\
    \    for i < l.count && j < l.count {\n          ^\n/tmp/tmp3tyyw0ob.swift:19:11:\
    \ error: unary operator cannot be separated from its operand\n    for i < l.count\
    \ && j < l.count {\n          ^~\n           \n/tmp/tmp3tyyw0ob.swift:19:11: error:\
    \ '<' is not a prefix unary operator\n    for i < l.count && j < l.count {\n \
    \         ^\n/tmp/tmp3tyyw0ob.swift:19:21: error: for-in loop requires 'Bool'\
    \ to conform to 'Sequence'\n    for i < l.count && j < l.count {\n          ~~~~~~~~~~^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820675
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum < 0 {\n            sum = 0\n        }\n      \
    \  if sum == 0 {\n            return false\n        }\n        if i == j {\n \
    \           return true\n        }\n        i += 1\n        j += 1\n    }\n  \
    \  return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp8kr8z1_d/tmp8kr8z1_d.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e08454c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e0814bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e0814b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e0814a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8kr8z1_d                        0x000055dc9a07a474 <unavailable> + 5236

    5    libc.so.6                          0x00002b8e08640460 __libc_start_main +
    245

    6    tmp8kr8z1_d                        0x000055dc9a07a0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820674
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var sum = 0\n    var i = 0\n    for v in l {\n        sum += v\n\
    \        if sum < 0 {\n            return false\n        }\n        i++\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9dq7ta7u.swift:23:10: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        i++\n         ^~\n"
  stdout: ''
  timestamp: 1659820675
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum < 0 {\n            sum = 0\n        }\n      \
    \  if sum == 0 {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp2g45n53y/tmp2g45n53y.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab2f2f8ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab2f2c81b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab2f2c81988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab2f2c807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2g45n53y                        0x000055b9545926f5 <unavailable> + 5877

    5    libc.so.6                          0x00002ab2f3176460 __libc_start_main +
    245

    6    tmp2g45n53y                        0x000055b9545920d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820675
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum < 0 {\n            sum = 0\n        }\n      \
    \  if sum == 0 {\n            return true\n        }\n        if sum > 0 {\n \
    \           i++\n        }\n        if sum < 0 {\n            j++\n        }\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpvzllzyhe.swift:28:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            i++\n             ^~\n/tmp/tmpvzllzyhe.swift:31:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  j++\n             ^~\n"
  stdout: ''
  timestamp: 1659820674
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum < 0 {\n            sum = 0\n        }\n      \
    \  if sum == 0 {\n            return false\n        }\n        if sum > 0 {\n\
    \            i++\n        }\n        if sum < 0 {\n            j++\n        }\n\
    \    }\n    return i == j\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpq4paz3g_.swift:28:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            i++\n             ^~\n/tmp/tmpq4paz3g_.swift:31:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  j++\n             ^~\n"
  stdout: ''
  timestamp: 1659820674
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum < 0 {\n            sum = 0\n            i += 1\n\
    \        }\n        if sum > 0 {\n            sum = 0\n            j += 1\n  \
    \      }\n        if i == j {\n            return true\n        }\n    }\n   \
    \ return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp4s1q7qej/tmp4s1q7qej.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed711fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed70ef5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed70ef5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed70ef47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4s1q7qej                        0x000055f71f51c6f5 <unavailable> + 5877

    5    libc.so.6                          0x00002aed713ea460 __libc_start_main +
    245

    6    tmp4s1q7qej                        0x000055f71f51c0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820675
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum < 0 {\n            sum = 0\n            i += 1\n\
    \        }\n        if sum > 0 {\n            sum = 0\n            j += 1\n  \
    \      }\n        if i == j {\n            return true\n        }\n    }\n   \
    \ return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp4s1q7qej/tmp4s1q7qej.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed711fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed70ef5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed70ef5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed70ef47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4s1q7qej                        0x000055f71f51c6f5 <unavailable> + 5877

    5    libc.so.6                          0x00002aed713ea460 __libc_start_main +
    245

    6    tmp4s1q7qej                        0x000055f71f51c0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820675
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n    return\
    \ sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp7ffpjdke/tmp7ffpjdke.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94a1b22c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94a1819b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94a1819988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94a18187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ffpjdke                        0x00005623f8c186f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b94a1d0e460 __libc_start_main +
    245

    6    tmp7ffpjdke                        0x00005623f8c180d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820674
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n    return\
    \ sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp7ffpjdke/tmp7ffpjdke.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94a1b22c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94a1819b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94a1819988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94a18187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ffpjdke                        0x00005623f8c186f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b94a1d0e460 __libc_start_main +
    245

    6    tmp7ffpjdke                        0x00005623f8c180d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820674
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for i < l.count {\n\
    \        sum += l[i]\n        if sum < 0 {\n            sum = 0\n        } else\
    \ {\n            sum += l[j]\n            if sum < 0 {\n                sum =\
    \ 0\n            } else {\n                j++\n            }\n        }\n   \
    \     i++\n    }\n    return j == i\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp6qlm7bm9.swift:19:11: error: expected 'in' after for-each pattern\n\
    \    for i < l.count {\n          ^\n/tmp/tmp6qlm7bm9.swift:19:11: error: unary\
    \ operator cannot be separated from its operand\n    for i < l.count {\n     \
    \     ^~\n           \n/tmp/tmp6qlm7bm9.swift:19:11: error: '<' is not a prefix\
    \ unary operator\n    for i < l.count {\n          ^\n"
  stdout: ''
  timestamp: 1659820675
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n    return\
    \ sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp7ffpjdke/tmp7ffpjdke.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94a1b22c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94a1819b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94a1819988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94a18187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ffpjdke                        0x00005623f8c186f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b94a1d0e460 __libc_start_main +
    245

    6    tmp7ffpjdke                        0x00005623f8c180d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820674
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n    return\
    \ sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp7ffpjdke/tmp7ffpjdke.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94a1b22c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94a1819b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94a1819988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94a18187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ffpjdke                        0x00005623f8c186f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b94a1d0e460 __libc_start_main +
    245

    6    tmp7ffpjdke                        0x00005623f8c180d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820674
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum == 0 {\n            return false\n        }\n\
    \        if sum < 0 {\n            sum = 0\n        }\n        if sum > 0 {\n\
    \            i++\n        }\n        if sum < 0 {\n            j++\n        }\n\
    \    }\n    return i == j\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5f2829zu.swift:28:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            i++\n             ^~\n/tmp/tmp5f2829zu.swift:31:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  j++\n             ^~\n"
  stdout: ''
  timestamp: 1659820675
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for _ in 0 ..< l.count\
    \ {\n        sum += l[i]\n        if sum < 0 {\n            sum = 0\n        \
    \    i += 1\n        }\n        if sum > 0 {\n            sum = 0\n          \
    \  j += 1\n        }\n        if i == j {\n            return true\n        }\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpnil212ah/tmpnil212ah.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fdcc43c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fdc93ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8fdc93a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8fdc9397b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnil212ah                        0x000055d32bb077c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b8fdce2f460 __libc_start_main +
    245

    6    tmpnil212ah                        0x000055d32bb071a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659820675
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n    return\
    \ sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp7ffpjdke/tmp7ffpjdke.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94a1b22c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94a1819b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94a1819988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94a18187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ffpjdke                        0x00005623f8c186f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b94a1d0e460 __libc_start_main +
    245

    6    tmp7ffpjdke                        0x00005623f8c180d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820674
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    var found = false\n\
    \    for k in l {\n        sum += k\n        if sum == 0 {\n            found\
    \ = true\n            break\n        }\n    }\n    if found {\n        for k in\
    \ l {\n            if k == 0 {\n                found = false\n              \
    \  break\n            }\n        }\n    }\n    return found\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpjxlkxoqw/tmpjxlkxoqw.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1deb95ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1deb651b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1deb651988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1deb6507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjxlkxoqw                        0x00005626153eb6f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b1debb46460 __libc_start_main +
    245

    6    tmpjxlkxoqw                        0x00005626153eb0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820675
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum < 0 {\n            sum = 0\n        } else {\n\
    \            i++\n        }\n    }\n    for k in l {\n        sum += k\n     \
    \   if sum > 0 {\n            j++\n        }\n    }\n    return i != j\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp6fo6bwb4.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            i++\n             ^~\n/tmp/tmp6fo6bwb4.swift:30:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  j++\n             ^~\n"
  stdout: ''
  timestamp: 1659820674
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum < 0 {\n            sum = 0\n        }\n      \
    \  if sum == 0 {\n            return false\n        }\n        if sum > 0 {\n\
    \            i++\n        }\n        if sum < 0 {\n            j++\n        }\n\
    \    }\n    return i == j\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpq4paz3g_.swift:28:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            i++\n             ^~\n/tmp/tmpq4paz3g_.swift:31:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  j++\n             ^~\n"
  stdout: ''
  timestamp: 1659820674
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var sum = 0\n    var pairs = false\n    for x in l {\n        sum\
    \ += x\n        if sum == 0 {\n            pairs = true\n        }\n    }\n  \
    \  return pairs\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmps4ktzm5s/tmps4ktzm5s.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05c9fafc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05c9ca6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05c9ca6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05c9ca57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps4ktzm5s                        0x0000563a470456f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b05ca19b460 __libc_start_main +
    245

    6    tmps4ktzm5s                        0x0000563a470450d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820675
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum < 0 {\n            sum = 0\n        }\n      \
    \  if sum == 0 {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp2g45n53y/tmp2g45n53y.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab2f2f8ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab2f2c81b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab2f2c81988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab2f2c807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2g45n53y                        0x000055b9545926f5 <unavailable> + 5877

    5    libc.so.6                          0x00002ab2f3176460 __libc_start_main +
    245

    6    tmp2g45n53y                        0x000055b9545920d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820675
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n    return\
    \ sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp7ffpjdke/tmp7ffpjdke.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94a1b22c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94a1819b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94a1819988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94a18187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ffpjdke                        0x00005623f8c186f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b94a1d0e460 __libc_start_main +
    245

    6    tmp7ffpjdke                        0x00005623f8c180d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820674
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum < 0 {\n            sum = 0\n        } else {\n\
    \            i++\n        }\n        if sum == 0 {\n            return true\n\
    \        }\n    }\n    for k in l {\n        j++\n        if j == i {\n      \
    \      return false\n        }\n        sum += k\n        if sum < 0 {\n     \
    \       sum = 0\n        } else {\n            i++\n        }\n        if sum\
    \ == 0 {\n            return true\n        }\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpa8kj23us.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            i++\n             ^~\n/tmp/tmpa8kj23us.swift:31:10:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        j++\n\
    \         ^~\n/tmp/tmpa8kj23us.swift:39:14: error: cannot find operator '++' in\
    \ scope; did you mean '+= 1'?\n            i++\n             ^~\n"
  stdout: ''
  timestamp: 1659820675
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum < 0 {\n            sum = 0\n        }\n      \
    \  if sum == 0 {\n            return false\n        }\n        if i == j {\n \
    \           return true\n        }\n        i += 1\n    }\n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpih6gts7h/tmpih6gts7h.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b66bbc6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b66bb966b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b66bb966988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b66bb9657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpih6gts7h                        0x00005612cac43474 <unavailable> + 5236

    5    libc.so.6                          0x00002b66bbe5b460 __libc_start_main +
    245

    6    tmpih6gts7h                        0x00005612cac430d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820675
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for _ in 0..<l.count\
    \ {\n        sum += l[i]\n        if sum < 0 {\n            sum = 0\n        \
    \    i += 1\n            continue\n        }\n        if sum > 0 {\n         \
    \   sum = 0\n            j += 1\n            continue\n        }\n        if i\
    \ == j {\n            return true\n        }\n        i += 1\n        j += 1\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpyj0smtar/tmpyj0smtar.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b488f98bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b488f682b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b488f682988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b488f6817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyj0smtar                        0x000055fef577b7c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b488fb77460 __libc_start_main +
    245

    6    tmpyj0smtar                        0x000055fef577b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659820674
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum < 0 {\n            sum = 0\n        }\n      \
    \  if sum == 0 {\n            return false\n        }\n        if i == j {\n \
    \           return true\n        }\n        i += 1\n        j += 1\n    }\n  \
    \  return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp8kr8z1_d/tmp8kr8z1_d.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e08454c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e0814bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e0814b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e0814a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8kr8z1_d                        0x000055dc9a07a474 <unavailable> + 5236

    5    libc.so.6                          0x00002b8e08640460 __libc_start_main +
    245

    6    tmp8kr8z1_d                        0x000055dc9a07a0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820674
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum == 0 {\n            return false\n        }\n\
    \    }\n    for k in l {\n        sum -= k\n        if sum != 0 {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpn43685fp/tmpn43685fp.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeaa2042c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeaa1d39b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeaa1d39988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeaa1d387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn43685fp                        0x0000561c043046f5 <unavailable> + 5877

    5    libc.so.6                          0x00002aeaa222e460 __libc_start_main +
    245

    6    tmpn43685fp                        0x0000561c043040d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820675
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum < 0 {\n            sum = 0\n        }\n      \
    \  if sum == 0 {\n            return false\n        }\n        if j == i {\n \
    \           return true\n        }\n        i++\n        j++\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpfat6t08o.swift:30:10: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        i++\n         ^~\n/tmp/tmpfat6t08o.swift:31:10:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        j++\n\
    \         ^~\n"
  stdout: ''
  timestamp: 1659820675
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for x in l {\n  \
    \      sum += x\n        if sum < 0 {\n            sum = 0\n        }\n      \
    \  if sum == 0 {\n            return false\n        }\n        if sum > 0 {\n\
    \            i++\n        }\n        if sum < 0 {\n            j++\n        }\n\
    \    }\n    return i == j\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmprps5b6h7.swift:28:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            i++\n             ^~\n/tmp/tmprps5b6h7.swift:31:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  j++\n             ^~\n"
  stdout: ''
  timestamp: 1659820675
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    var found = false\n\
    \    for k in l {\n        sum = sum + k\n        if sum == 0 {\n            found\
    \ = true\n            break\n        }\n    }\n    if found {\n        for l in\
    \ l {\n            if l == 0 {\n                found = true\n               \
    \ break\n            }\n        }\n    }\n    return found\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpe8jz89o2/tmpe8jz89o2.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1495715c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b149540cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b149540c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b149540b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe8jz89o2                        0x000055fbbc9596f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b1495901460 __libc_start_main +
    245

    6    tmpe8jz89o2                        0x000055fbbc9590d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820675
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum < 0 {\n            sum = 0\n        }\n      \
    \  if sum == 0 {\n            return false\n        }\n        if i == j {\n \
    \           return true\n        }\n        if sum > 0 {\n            i++\n  \
    \      }\n        if sum < 0 {\n            j++\n        }\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp91a64v30.swift:31:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            i++\n             ^~\n/tmp/tmp91a64v30.swift:34:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  j++\n             ^~\n"
  stdout: ''
  timestamp: 1659820674
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for _ in 0..<l.count\
    \ {\n        sum += l[i]\n        if sum < 0 {\n            sum = 0\n        }\n\
    \        if sum == 0 {\n            return true\n        }\n        i += 1\n \
    \   }\n    for _ in 0..<l.count {\n        sum += l[j]\n        if sum < 0 {\n\
    \            sum = 0\n        }\n        if sum == 0 {\n            return false\n\
    \        }\n        j += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpf4incnyv/tmpf4incnyv.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c2592ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c25621b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c25621988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c256207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf4incnyv                        0x0000561f65b37544 <unavailable> + 5444

    5    libc.so.6                          0x00002b2c25b16460 __libc_start_main +
    245

    6    tmpf4incnyv                        0x0000561f65b371a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659820675
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum < 0 {\n            sum = 0\n        }\n      \
    \  if sum == 0 {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp2g45n53y/tmp2g45n53y.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab2f2f8ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab2f2c81b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab2f2c81988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab2f2c807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2g45n53y                        0x000055b9545926f5 <unavailable> + 5877

    5    libc.so.6                          0x00002ab2f3176460 __libc_start_main +
    245

    6    tmp2g45n53y                        0x000055b9545920d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820675
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum < 0 {\n            sum = 0\n        }\n      \
    \  if sum == 0 {\n            return false\n        }\n        if sum > 0 {\n\
    \            i++\n        }\n        if sum < 0 {\n            j++\n        }\n\
    \    }\n    return i == j\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpq4paz3g_.swift:28:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            i++\n             ^~\n/tmp/tmpq4paz3g_.swift:31:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  j++\n             ^~\n"
  stdout: ''
  timestamp: 1659820674
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum < 0 {\n            sum = 0\n        } else {\n\
    \            i++\n        }\n        if sum == 0 {\n            j++\n        }\n\
    \    }\n    return i == j\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpktsdyk6r.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            i++\n             ^~\n/tmp/tmpktsdyk6r.swift:27:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  j++\n             ^~\n"
  stdout: ''
  timestamp: 1659820674
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum < 0 {\n            sum = 0\n        }\n      \
    \  if sum == 0 {\n            return true\n        }\n        if sum > 0 {\n \
    \           i++\n        }\n        if sum < 0 {\n            j++\n        }\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpvzllzyhe.swift:28:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            i++\n             ^~\n/tmp/tmpvzllzyhe.swift:31:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  j++\n             ^~\n"
  stdout: ''
  timestamp: 1659820674
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for _ in 0..<l.count\
    \ {\n        sum += l[i]\n        if sum < 0 {\n            sum = 0\n        \
    \    i += 1\n            continue\n        }\n        if sum == 0 {\n        \
    \    return true\n        }\n        if sum > 0 {\n            j += 1\n      \
    \      sum -= l[j]\n            if sum < 0 {\n                sum = 0\n      \
    \          j += 1\n            }\n        }\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b6f48905c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6f485fc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6f485fc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6f485fc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6f485fbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b6f483fbe83 <unavailable> + 188035

    6    tmp1xppq29y                        0x000055c0a79eae7c <unavailable> + 7804

    7    tmp1xppq29y                        0x000055c0a79ea4cd <unavailable> + 5325

    8    libc.so.6                          0x00002b6f48af1460 __libc_start_main +
    245

    9    tmp1xppq29y                        0x000055c0a79ea1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659820675
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for _ in 0..<l.count\
    \ {\n        sum += l[i]\n        i += 1\n        if sum < 0 {\n            sum\
    \ = 0\n            j += 1\n        }\n    }\n    return j == l.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpo5874935/tmpo5874935.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac62e51bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac62e212b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac62e212988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac62e2117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo5874935                        0x000056358f2137c5 <unavailable> + 6085

    5    libc.so.6                          0x00002ac62e707460 __libc_start_main +
    245

    6    tmpo5874935                        0x000056358f2131a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659820674
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum < 0 {\n            sum = 0\n        }\n      \
    \  if sum == 0 {\n            return false\n        }\n    }\n    for k in l {\n\
    \        if k == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp93yr6m49/tmp93yr6m49.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad327f47c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad327c3eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad327c3e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad327c3d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp93yr6m49                        0x0000558ec5ccc53b <unavailable> + 5435

    5    libc.so.6                          0x00002ad328133460 __libc_start_main +
    245

    6    tmp93yr6m49                        0x0000558ec5ccc0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820675
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum < 0 {\n            sum = 0\n        }\n      \
    \  if sum == 0 {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp2g45n53y/tmp2g45n53y.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab2f2f8ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab2f2c81b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab2f2c81988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab2f2c807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2g45n53y                        0x000055b9545926f5 <unavailable> + 5877

    5    libc.so.6                          0x00002ab2f3176460 __libc_start_main +
    245

    6    tmp2g45n53y                        0x000055b9545920d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820675
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n    return\
    \ sum == 0 || sum > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpyet8gsn9/tmpyet8gsn9.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aced589ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aced5595b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aced5595988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aced55947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyet8gsn9                        0x000055e1b0254474 <unavailable> + 5236

    5    libc.so.6                          0x00002aced5a8a460 __libc_start_main +
    245

    6    tmpyet8gsn9                        0x000055e1b02540d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820675
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    var pairs = 0\n \
    \   for _ in l {\n        sum += i\n        pairs += 1\n        if sum < 0 {\n\
    \            sum = 0\n            i += 1\n        }\n        if sum > 0 {\n  \
    \          sum = 0\n            j += 1\n        }\n    }\n    return pairs ==\
    \ 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5,\
    \ 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpkcvvhmxo/tmpkcvvhmxo.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0b7569c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0b7260b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0b7260988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0b725f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkcvvhmxo                        0x0000560766a3a6f5 <unavailable> + 5877

    5    libc.so.6                          0x00002ba0b7755460 __libc_start_main +
    245

    6    tmpkcvvhmxo                        0x0000560766a3a0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820675
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum < 0 {\n            sum = 0\n        }\n      \
    \  if sum == 0 {\n            return true\n        }\n        if sum > 0 {\n \
    \           i++\n        }\n    }\n    for k in l {\n        sum += k\n      \
    \  if sum < 0 {\n            sum = 0\n        }\n        if sum == 0 {\n     \
    \       return false\n        }\n        if sum > 0 {\n            j++\n     \
    \   }\n    }\n    return i == j\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpgunjnr6j.swift:28:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            i++\n             ^~\n/tmp/tmpgunjnr6j.swift:40:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  j++\n             ^~\n"
  stdout: ''
  timestamp: 1659820675
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum < 0 {\n            sum = 0\n        }\n      \
    \  if sum == 0 {\n            return true\n        }\n        if sum > 0 {\n \
    \           i++\n        }\n        if sum < 0 {\n            j++\n        }\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpvzllzyhe.swift:28:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            i++\n             ^~\n/tmp/tmpvzllzyhe.swift:31:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  j++\n             ^~\n"
  stdout: ''
  timestamp: 1659820674
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for _ in 0..<l.count\
    \ {\n        sum += l[i]\n        if sum < 0 {\n            sum = 0\n        }\
    \ else {\n            i += 1\n        }\n    }\n    for _ in 0..<l.count {\n \
    \       sum += l[j]\n        if sum < 0 {\n            sum = 0\n        } else\
    \ {\n            j += 1\n        }\n    }\n    return i != j\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpn2r5jrt6/tmpn2r5jrt6.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b718c939c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b718c630b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b718c630988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b718c62f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn2r5jrt6                        0x000055b2140097c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b718cb25460 __libc_start_main +
    245

    6    tmpn2r5jrt6                        0x000055b2140091a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659820675
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for _ in 0..<l.count\
    \ {\n        sum += l[i]\n        if sum < 0 {\n            sum = 0\n        \
    \    i += 1\n            continue\n        }\n        if sum > 0 {\n         \
    \   sum = 0\n            j += 1\n            continue\n        }\n        if i\
    \ == j {\n            return true\n        }\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpztc0xt89/tmpztc0xt89.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5ce3be2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5ce38d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5ce38d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5ce38d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpztc0xt89                        0x00005634bbba47c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b5ce3dce460 __libc_start_main +
    245

    6    tmpztc0xt89                        0x00005634bbba41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659820675
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n    return\
    \ sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp7ffpjdke/tmp7ffpjdke.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94a1b22c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94a1819b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94a1819988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94a18187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ffpjdke                        0x00005623f8c186f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b94a1d0e460 __libc_start_main +
    245

    6    tmp7ffpjdke                        0x00005623f8c180d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820674
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for _ in 0..<l.count\
    \ {\n        sum += l[i]\n        if sum < 0 {\n            sum = 0\n        }\n\
    \        if sum == 0 {\n            return false\n        }\n        if sum >\
    \ 0 {\n            i++\n        }\n    }\n    for _ in 0..<l.count {\n       \
    \ sum += l[j]\n        if sum < 0 {\n            sum = 0\n        }\n        if\
    \ sum == 0 {\n            return false\n        }\n        if sum > 0 {\n    \
    \        j++\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp0wbn0cx7.swift:28:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            i++\n             ^~\n/tmp/tmp0wbn0cx7.swift:40:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  j++\n             ^~\n"
  stdout: ''
  timestamp: 1659820675
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for x in l {\n  \
    \      sum += x\n        if sum < 0 {\n            sum = 0\n        }\n      \
    \  if sum == 0 {\n            return false\n        }\n        if i == j {\n \
    \           return true\n        }\n        i += 1\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpk12yebq3/tmpk12yebq3.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4401c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba43febab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba43feba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba43feb97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk12yebq3                        0x000055e3e879c474 <unavailable> + 5236

    5    libc.so.6                          0x00002ba4403af460 __libc_start_main +
    245

    6    tmpk12yebq3                        0x000055e3e879c0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820675
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum == 0 {\n            return false\n        }\n\
    \    }\n    for k in l {\n        sum += k\n        if sum != 0 {\n          \
    \  return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpba709c31/tmpba709c31.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b55d6362c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b55d6059b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b55d6059988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b55d60587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpba709c31                        0x00005600d1286474 <unavailable> + 5236

    5    libc.so.6                          0x00002b55d654e460 __libc_start_main +
    245

    6    tmpba709c31                        0x00005600d12860d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820675
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for _ in 0..<l.count\
    \ {\n        sum += l[i]\n        i += 1\n        if sum < 0 {\n            sum\
    \ = 0\n            i += 1\n        }\n    }\n    for _ in 0..<l.count {\n    \
    \    sum += l[j]\n        j += 1\n        if sum < 0 {\n            sum = 0\n\
    \            j += 1\n        }\n    }\n    return i != j\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpg5qvjtn3/tmpg5qvjtn3.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21412f0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2140fe7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2140fe7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2140fe67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg5qvjtn3                        0x0000560f4dbc67c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b21414dc460 __libc_start_main +
    245

    6    tmpg5qvjtn3                        0x0000560f4dbc61a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659820675
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum > 0 {\n            i++\n        }\n        if\
    \ sum < 0 {\n            j++\n        }\n    }\n    return i != j\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpp4sr_lhp.swift:22:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            i++\n             ^~\n/tmp/tmpp4sr_lhp.swift:25:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  j++\n             ^~\n"
  stdout: ''
  timestamp: 1659820675
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    var pairs = 0\n \
    \   for i < l.count {\n        sum += l[i]\n        if sum < 0 {\n           \
    \ sum = 0\n        } else {\n            pairs += 1\n        }\n        if pairs\
    \ == 2 {\n            return true\n        }\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp29tckz9n.swift:20:11: error: expected 'in' after for-each pattern\n\
    \    for i < l.count {\n          ^\n/tmp/tmp29tckz9n.swift:20:11: error: unary\
    \ operator cannot be separated from its operand\n    for i < l.count {\n     \
    \     ^~\n           \n/tmp/tmp29tckz9n.swift:20:11: error: '<' is not a prefix\
    \ unary operator\n    for i < l.count {\n          ^\n"
  stdout: ''
  timestamp: 1659820675
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    var pairs = true\n\
    \    for _ in 0..<l.count {\n        sum += l[i]\n        if sum < 0 {\n     \
    \       pairs = false\n            break\n        }\n        i += 1\n    }\n \
    \   for _ in 0..<l.count {\n        sum += l[j]\n        if sum < 0 {\n      \
    \      pairs = false\n            break\n        }\n        j += 1\n    }\n  \
    \  return pairs\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp12y7kej3/tmp12y7kej3.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acaf391bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acaf3612b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acaf3612988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acaf36117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp12y7kej3                        0x0000555cc86ac544 <unavailable> + 5444

    5    libc.so.6                          0x00002acaf3b07460 __libc_start_main +
    245

    6    tmp12y7kej3                        0x0000555cc86ac1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659820675
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for i < l.count &&\
    \ j < l.count {\n        sum = l[i] + l[j]\n        if sum == 0 {\n          \
    \  return true\n        }\n        if sum < 0 {\n            j = j + 1\n     \
    \   } else {\n            i = i + 1\n        }\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpn1_0gb47.swift:19:11: error: expected 'in' after for-each pattern\n\
    \    for i < l.count && j < l.count {\n          ^\n/tmp/tmpn1_0gb47.swift:19:11:\
    \ error: unary operator cannot be separated from its operand\n    for i < l.count\
    \ && j < l.count {\n          ^~\n           \n/tmp/tmpn1_0gb47.swift:19:11: error:\
    \ '<' is not a prefix unary operator\n    for i < l.count && j < l.count {\n \
    \         ^\n/tmp/tmpn1_0gb47.swift:19:21: error: for-in loop requires 'Bool'\
    \ to conform to 'Sequence'\n    for i < l.count && j < l.count {\n          ~~~~~~~~~~^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820674
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for i < l.count &&\
    \ j < l.count {\n        sum = l[i] + l[j]\n        if sum == 0 {\n          \
    \  return true\n        }\n        if sum > 0 {\n            i++\n        }\n\
    \        if sum < 0 {\n            j++\n        }\n    }\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmppbczd45w.swift:19:11: error: expected 'in' after for-each pattern\n\
    \    for i < l.count && j < l.count {\n          ^\n/tmp/tmppbczd45w.swift:19:11:\
    \ error: unary operator cannot be separated from its operand\n    for i < l.count\
    \ && j < l.count {\n          ^~\n           \n/tmp/tmppbczd45w.swift:19:11: error:\
    \ '<' is not a prefix unary operator\n    for i < l.count && j < l.count {\n \
    \         ^\n/tmp/tmppbczd45w.swift:19:21: error: for-in loop requires 'Bool'\
    \ to conform to 'Sequence'\n    for i < l.count && j < l.count {\n          ~~~~~~~~~~^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820675
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum == 0 {\n            return false\n        }\n\
    \    }\n    for k in l {\n        sum += k\n        if sum < 0 {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpzitf3kz4/tmpzitf3kz4.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adce56edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adce53e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adce53e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adce53e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzitf3kz4                        0x0000559c65f3e474 <unavailable> + 5236

    5    libc.so.6                          0x00002adce58d9460 __libc_start_main +
    245

    6    tmpzitf3kz4                        0x0000559c65f3e0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820675
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for _ in 0..<l.count\
    \ {\n        sum += l[i]\n        if sum < 0 {\n            sum = 0\n        }\
    \ else {\n            i += 1\n        }\n    }\n    for _ in 0..<l.count {\n \
    \       sum += l[j]\n        if sum < 0 {\n            sum = 0\n        } else\
    \ {\n            j += 1\n        }\n    }\n    return i != j\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpn2r5jrt6/tmpn2r5jrt6.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b718c939c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b718c630b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b718c630988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b718c62f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn2r5jrt6                        0x000055b2140097c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b718cb25460 __libc_start_main +
    245

    6    tmpn2r5jrt6                        0x000055b2140091a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659820675
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for _ in 0..<l.count\
    \ {\n        sum += l[i]\n        if sum == 0 {\n            return false\n  \
    \      }\n        i += 1\n    }\n    for _ in 0..<l.count {\n        sum += l[j]\n\
    \        if sum == 0 {\n            return false\n        }\n        j += 1\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmppvk63js2/tmppvk63js2.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36cf8f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36cf5edb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36cf5ed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36cf5ec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppvk63js2                        0x000055ef50def544 <unavailable> + 5444

    5    libc.so.6                          0x00002b36cfae2460 __libc_start_main +
    245

    6    tmppvk63js2                        0x000055ef50def1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659820674
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for _ in 0..<l.count\
    \ {\n        sum += l[i]\n        if sum < 0 {\n            sum = 0\n        }\n\
    \        if sum == 0 {\n            return false\n        }\n        if sum >\
    \ 0 {\n            i++\n        }\n    }\n    for _ in 0..<l.count {\n       \
    \ sum += l[j]\n        if sum < 0 {\n            sum = 0\n        }\n        if\
    \ sum == 0 {\n            return false\n        }\n        if sum > 0 {\n    \
    \        j++\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp0wbn0cx7.swift:28:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            i++\n             ^~\n/tmp/tmp0wbn0cx7.swift:40:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  j++\n             ^~\n"
  stdout: ''
  timestamp: 1659820675
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum < 0 {\n            sum = 0\n        } else {\n\
    \            i++\n        }\n    }\n    for k in l {\n        sum += k\n     \
    \   if sum < 0 {\n            sum = 0\n        } else {\n            j++\n   \
    \     }\n    }\n    return i == j\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmph5qpnn2w.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            i++\n             ^~\n/tmp/tmph5qpnn2w.swift:32:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  j++\n             ^~\n"
  stdout: ''
  timestamp: 1659820675
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum < 0 {\n            sum = 0\n        }\n      \
    \  if sum == 0 {\n            return false\n        }\n    }\n    for k in l {\n\
    \        if k == 0 {\n            return false\n        }\n        sum += k\n\
    \        if sum < 0 {\n            sum = 0\n        }\n        if sum == 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpo96wq7r3/tmpo96wq7r3.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b923f379c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b923f070b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b923f070988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b923f06f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo96wq7r3                        0x0000559e80a3a53b <unavailable> + 5435

    5    libc.so.6                          0x00002b923f565460 __libc_start_main +
    245

    6    tmpo96wq7r3                        0x0000559e80a3a0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820675
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for _ in 0..<l.count\
    \ {\n        sum += l[i]\n        if sum < 0 {\n            sum = 0\n        }\
    \ else {\n            i += 1\n        }\n        if sum == 0 {\n            return\
    \ true\n        }\n    }\n    for _ in 0..<l.count {\n        sum += l[j]\n  \
    \      if sum < 0 {\n            sum = 0\n        } else {\n            j += 1\n\
    \        }\n        if sum == 0 {\n            return false\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp6v1xav0q/tmp6v1xav0q.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3c0432bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3c04022b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3c04022988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3c040217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6v1xav0q                        0x000055946d44c7c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b3c04517460 __libc_start_main +
    245

    6    tmp6v1xav0q                        0x000055946d44c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659820675
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for i < l.count &&\
    \ j < l.count {\n        sum = l[i] + l[j]\n        if sum == 0 {\n          \
    \  return true\n        }\n        if sum > 0 {\n            i++\n        }\n\
    \        if sum < 0 {\n            j++\n        }\n    }\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmppbczd45w.swift:19:11: error: expected 'in' after for-each pattern\n\
    \    for i < l.count && j < l.count {\n          ^\n/tmp/tmppbczd45w.swift:19:11:\
    \ error: unary operator cannot be separated from its operand\n    for i < l.count\
    \ && j < l.count {\n          ^~\n           \n/tmp/tmppbczd45w.swift:19:11: error:\
    \ '<' is not a prefix unary operator\n    for i < l.count && j < l.count {\n \
    \         ^\n/tmp/tmppbczd45w.swift:19:21: error: for-in loop requires 'Bool'\
    \ to conform to 'Sequence'\n    for i < l.count && j < l.count {\n          ~~~~~~~~~~^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820675
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    var pairs = 0\n \
    \   for i < l.count && j < l.count {\n        sum = l[i] + l[j]\n        if sum\
    \ == 0 {\n            pairs += 1\n        }\n        if sum < 0 {\n          \
    \  sum = 0\n        }\n        if sum > 0 {\n            j += 1\n        }\n \
    \       if sum < 0 {\n            sum = 0\n        }\n        if sum > 0 {\n \
    \           i += 1\n        }\n    }\n    if pairs == 0 {\n        return false\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpja48pjfk.swift:20:11: error: expected 'in' after for-each pattern\n\
    \    for i < l.count && j < l.count {\n          ^\n/tmp/tmpja48pjfk.swift:20:11:\
    \ error: unary operator cannot be separated from its operand\n    for i < l.count\
    \ && j < l.count {\n          ^~\n           \n/tmp/tmpja48pjfk.swift:20:11: error:\
    \ '<' is not a prefix unary operator\n    for i < l.count && j < l.count {\n \
    \         ^\n/tmp/tmpja48pjfk.swift:20:21: error: for-in loop requires 'Bool'\
    \ to conform to 'Sequence'\n    for i < l.count && j < l.count {\n          ~~~~~~~~~~^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820675
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum < 0 {\n            sum = 0\n        } else {\n\
    \            i++\n        }\n        if sum == 0 {\n            j++\n        }\n\
    \    }\n    return j == i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnn8xf0r0.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            i++\n             ^~\n/tmp/tmpnn8xf0r0.swift:27:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  j++\n             ^~\n"
  stdout: ''
  timestamp: 1659820675
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    var pairs = 0\n \
    \   for i < l.count {\n        sum += l[i]\n        if sum < 0 {\n           \
    \ sum = 0\n        } else {\n            pairs += 1\n        }\n        if pairs\
    \ == 2 {\n            return true\n        }\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp29tckz9n.swift:20:11: error: expected 'in' after for-each pattern\n\
    \    for i < l.count {\n          ^\n/tmp/tmp29tckz9n.swift:20:11: error: unary\
    \ operator cannot be separated from its operand\n    for i < l.count {\n     \
    \     ^~\n           \n/tmp/tmp29tckz9n.swift:20:11: error: '<' is not a prefix\
    \ unary operator\n    for i < l.count {\n          ^\n"
  stdout: ''
  timestamp: 1659820675
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum < 0 {\n            sum = 0\n        }\n      \
    \  if sum == 0 {\n            return true\n        }\n        if sum > 0 {\n \
    \           i++\n        }\n        if sum < 0 {\n            j++\n        }\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpvzllzyhe.swift:28:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            i++\n             ^~\n/tmp/tmpvzllzyhe.swift:31:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  j++\n             ^~\n"
  stdout: ''
  timestamp: 1659820674
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum > 0 {\n            if i == j {\n             \
    \   j++\n                sum = 0\n            } else {\n                i++\n\
    \                sum = 0\n            }\n        }\n    }\n    return i == j\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpl8iixfl2.swift:23:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n                j++\n                 ^~\n/tmp/tmpl8iixfl2.swift:26:18:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \      i++\n                 ^~\n"
  stdout: ''
  timestamp: 1659820675
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum < 0 {\n            sum = 0\n        }\n      \
    \  if sum == 0 {\n            return true\n        }\n        if sum > 0 {\n \
    \           i++\n        }\n        if sum < 0 {\n            j++\n        }\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpvzllzyhe.swift:28:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            i++\n             ^~\n/tmp/tmpvzllzyhe.swift:31:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  j++\n             ^~\n"
  stdout: ''
  timestamp: 1659820674
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    var found = false\n\
    \    for i < l.count {\n        sum += l[i]\n        if sum == 0 {\n         \
    \   found = true\n            break\n        }\n    }\n    for j < l.count {\n\
    \        sum += l[j]\n        if sum == 0 {\n            found = true\n      \
    \      break\n        }\n    }\n    return found\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmps71dn7ij.swift:20:11: error: expected 'in' after for-each pattern\n\
    \    for i < l.count {\n          ^\n/tmp/tmps71dn7ij.swift:20:11: error: unary\
    \ operator cannot be separated from its operand\n    for i < l.count {\n     \
    \     ^~\n           \n/tmp/tmps71dn7ij.swift:27:11: error: expected 'in' after\
    \ for-each pattern\n    for j < l.count {\n          ^\n/tmp/tmps71dn7ij.swift:27:11:\
    \ error: unary operator cannot be separated from its operand\n    for j < l.count\
    \ {\n          ^~\n           \n/tmp/tmps71dn7ij.swift:20:11: error: '<' is not\
    \ a prefix unary operator\n    for i < l.count {\n          ^\n/tmp/tmps71dn7ij.swift:27:11:\
    \ error: '<' is not a prefix unary operator\n    for j < l.count {\n         \
    \ ^\n"
  stdout: ''
  timestamp: 1659820675
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for _ in 0..<l.count\
    \ {\n        sum += l[i]\n        if sum < 0 {\n            sum = 0\n        }\
    \ else {\n            i += 1\n        }\n    }\n    for _ in 0..<l.count {\n \
    \       sum += l[j]\n        if sum < 0 {\n            sum = 0\n        } else\
    \ {\n            j += 1\n        }\n    }\n    return i == j\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpqml11s32/tmpqml11s32.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af877a1ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af877715b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af877715988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af8777147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqml11s32                        0x0000560618b9a544 <unavailable> + 5444

    5    libc.so.6                          0x00002af877c0a460 __libc_start_main +
    245

    6    tmpqml11s32                        0x0000560618b9a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659820675
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for _ in 0..<l.count\
    \ {\n        sum += l[i]\n        if sum < 0 {\n            sum = 0\n        \
    \    i += 1\n        } else if sum > 0 {\n            sum = 0\n            j +=\
    \ 1\n        } else {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpm_5xc2b5/tmpm_5xc2b5.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9e95495c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9e9518cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9e9518c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9e9518b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm_5xc2b5                        0x00005607d29bf7c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b9e95681460 __libc_start_main +
    245

    6    tmpm_5xc2b5                        0x00005607d29bf1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659820675
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n    return\
    \ sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp7ffpjdke/tmp7ffpjdke.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94a1b22c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94a1819b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94a1819988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94a18187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ffpjdke                        0x00005623f8c186f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b94a1d0e460 __libc_start_main +
    245

    6    tmp7ffpjdke                        0x00005623f8c180d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820674
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for i < l.count &&\
    \ j < l.count {\n        sum = l[i] + l[j]\n        if sum == 0 {\n          \
    \  return true\n        }\n        if sum < 0 {\n            j = j + 1\n     \
    \   } else {\n            i = i + 1\n        }\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpn1_0gb47.swift:19:11: error: expected 'in' after for-each pattern\n\
    \    for i < l.count && j < l.count {\n          ^\n/tmp/tmpn1_0gb47.swift:19:11:\
    \ error: unary operator cannot be separated from its operand\n    for i < l.count\
    \ && j < l.count {\n          ^~\n           \n/tmp/tmpn1_0gb47.swift:19:11: error:\
    \ '<' is not a prefix unary operator\n    for i < l.count && j < l.count {\n \
    \         ^\n/tmp/tmpn1_0gb47.swift:19:21: error: for-in loop requires 'Bool'\
    \ to conform to 'Sequence'\n    for i < l.count && j < l.count {\n          ~~~~~~~~~~^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820674
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for i < l.count &&\
    \ j < l.count {\n        sum += l[i]\n        if sum == 0 {\n            return\
    \ false\n        }\n        i += 1\n        j += 1\n    }\n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpc0u5701y.swift:19:11: error: expected 'in' after for-each pattern\n\
    \    for i < l.count && j < l.count {\n          ^\n/tmp/tmpc0u5701y.swift:19:11:\
    \ error: unary operator cannot be separated from its operand\n    for i < l.count\
    \ && j < l.count {\n          ^~\n           \n/tmp/tmpc0u5701y.swift:19:11: error:\
    \ '<' is not a prefix unary operator\n    for i < l.count && j < l.count {\n \
    \         ^\n/tmp/tmpc0u5701y.swift:19:21: error: for-in loop requires 'Bool'\
    \ to conform to 'Sequence'\n    for i < l.count && j < l.count {\n          ~~~~~~~~~~^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820674
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum == 0 {\n            return false\n        }\n\
    \    }\n    for k in l {\n        sum += k\n        if sum != 0 {\n          \
    \  return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpba709c31/tmpba709c31.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b55d6362c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b55d6059b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b55d6059988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b55d60587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpba709c31                        0x00005600d1286474 <unavailable> + 5236

    5    libc.so.6                          0x00002b55d654e460 __libc_start_main +
    245

    6    tmpba709c31                        0x00005600d12860d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820675
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum < 0 {\n            sum = 0\n        }\n      \
    \  if sum == 0 {\n            return true\n        }\n        if sum > 0 {\n \
    \           i++\n        }\n        if sum < 0 {\n            j++\n        }\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpvzllzyhe.swift:28:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            i++\n             ^~\n/tmp/tmpvzllzyhe.swift:31:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  j++\n             ^~\n"
  stdout: ''
  timestamp: 1659820674
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum < 0 {\n            sum = 0\n        }\n      \
    \  if sum == 0 {\n            return false\n        }\n        if sum > 0 {\n\
    \            i++\n        }\n        if sum < 0 {\n            j++\n        }\n\
    \    }\n    return i == j\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpq4paz3g_.swift:28:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            i++\n             ^~\n/tmp/tmpq4paz3g_.swift:31:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  j++\n             ^~\n"
  stdout: ''
  timestamp: 1659820674
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n    return\
    \ sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp7ffpjdke/tmp7ffpjdke.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94a1b22c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94a1819b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94a1819988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94a18187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ffpjdke                        0x00005623f8c186f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b94a1d0e460 __libc_start_main +
    245

    6    tmp7ffpjdke                        0x00005623f8c180d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820674
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum == 0 {\n            return false\n        }\n\
    \    }\n    for k in l {\n        sum -= k\n        if sum != 0 {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpn43685fp/tmpn43685fp.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeaa2042c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeaa1d39b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeaa1d39988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeaa1d387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn43685fp                        0x0000561c043046f5 <unavailable> + 5877

    5    libc.so.6                          0x00002aeaa222e460 __libc_start_main +
    245

    6    tmpn43685fp                        0x0000561c043040d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820675
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n    return\
    \ sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp7ffpjdke/tmp7ffpjdke.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94a1b22c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94a1819b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94a1819988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94a18187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ffpjdke                        0x00005623f8c186f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b94a1d0e460 __libc_start_main +
    245

    6    tmp7ffpjdke                        0x00005623f8c180d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820674
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for _ in 0..<l.count\
    \ {\n        sum += l[i]\n        if sum < 0 {\n            sum = 0\n        }\n\
    \        if sum == 0 {\n            return true\n        }\n        if sum > 0\
    \ {\n            i++\n        }\n        if sum < 0 {\n            j++\n     \
    \   }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpfwnfgazt.swift:28:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            i++\n             ^~\n/tmp/tmpfwnfgazt.swift:31:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  j++\n             ^~\n"
  stdout: ''
  timestamp: 1659820674
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum > 0 {\n            i++\n        }\n        if\
    \ sum < 0 {\n            j++\n        }\n    }\n    return i == j\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpgehfzwt0.swift:22:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            i++\n             ^~\n/tmp/tmpgehfzwt0.swift:25:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  j++\n             ^~\n"
  stdout: ''
  timestamp: 1659820675
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n    return\
    \ sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp7ffpjdke/tmp7ffpjdke.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94a1b22c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94a1819b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94a1819988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94a18187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ffpjdke                        0x00005623f8c186f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b94a1d0e460 __libc_start_main +
    245

    6    tmp7ffpjdke                        0x00005623f8c180d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820674
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum < 0 {\n            sum = 0\n        }\n      \
    \  if sum == 0 {\n            return false\n        }\n        if i == j {\n \
    \           return true\n        }\n        if sum > 0 {\n            i++\n  \
    \      } else {\n            j++\n        }\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpae0u5ft2.swift:31:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            i++\n             ^~\n/tmp/tmpae0u5ft2.swift:33:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  j++\n             ^~\n"
  stdout: ''
  timestamp: 1659820675
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for i < l.count {\n\
    \        sum += l[i]\n        if sum < 0 {\n            sum = 0\n        } else\
    \ {\n            j = i\n        }\n        if j == i {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp3q5p2plg.swift:19:11: error: expected 'in' after for-each pattern\n\
    \    for i < l.count {\n          ^\n/tmp/tmp3q5p2plg.swift:19:11: error: unary\
    \ operator cannot be separated from its operand\n    for i < l.count {\n     \
    \     ^~\n           \n/tmp/tmp3q5p2plg.swift:19:11: error: '<' is not a prefix\
    \ unary operator\n    for i < l.count {\n          ^\n"
  stdout: ''
  timestamp: 1659820675
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for i < l.count {\n\
    \        sum += l[i]\n        if sum < 0 {\n            sum = 0\n        }\n \
    \       if sum == 0 {\n            return true\n        }\n    }\n    for j <\
    \ l.count {\n        sum += l[j]\n        if sum < 0 {\n            sum = 0\n\
    \        }\n        if sum == 0 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp4jdzjvgv.swift:19:11: error: expected 'in' after for-each pattern\n\
    \    for i < l.count {\n          ^\n/tmp/tmp4jdzjvgv.swift:19:11: error: unary\
    \ operator cannot be separated from its operand\n    for i < l.count {\n     \
    \     ^~\n           \n/tmp/tmp4jdzjvgv.swift:28:11: error: expected 'in' after\
    \ for-each pattern\n    for j < l.count {\n          ^\n/tmp/tmp4jdzjvgv.swift:28:11:\
    \ error: unary operator cannot be separated from its operand\n    for j < l.count\
    \ {\n          ^~\n           \n/tmp/tmp4jdzjvgv.swift:19:11: error: '<' is not\
    \ a prefix unary operator\n    for i < l.count {\n          ^\n/tmp/tmp4jdzjvgv.swift:28:11:\
    \ error: '<' is not a prefix unary operator\n    for j < l.count {\n         \
    \ ^\n"
  stdout: ''
  timestamp: 1659820675
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    var pairs = true\n\
    \    for i < l.count && j < l.count {\n        sum = l[i] + l[j]\n        if sum\
    \ == 0 {\n            pairs = false\n            break\n        }\n        if\
    \ sum < 0 {\n            pairs = false\n            break\n        }\n       \
    \ i += 1\n        j += 1\n    }\n    return pairs\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmps6rg9vfy.swift:20:11: error: expected 'in' after for-each pattern\n\
    \    for i < l.count && j < l.count {\n          ^\n/tmp/tmps6rg9vfy.swift:20:11:\
    \ error: unary operator cannot be separated from its operand\n    for i < l.count\
    \ && j < l.count {\n          ^~\n           \n/tmp/tmps6rg9vfy.swift:20:11: error:\
    \ '<' is not a prefix unary operator\n    for i < l.count && j < l.count {\n \
    \         ^\n/tmp/tmps6rg9vfy.swift:20:21: error: for-in loop requires 'Bool'\
    \ to conform to 'Sequence'\n    for i < l.count && j < l.count {\n          ~~~~~~~~~~^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820675
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for x in l {\n  \
    \      sum += x\n        if sum < 0 {\n            sum = 0\n        }\n      \
    \  if sum == 0 {\n            return false\n        }\n        if sum > 0 {\n\
    \            i++\n        }\n        if sum < 0 {\n            j++\n        }\n\
    \    }\n    return i == j\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmprps5b6h7.swift:28:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            i++\n             ^~\n/tmp/tmprps5b6h7.swift:31:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  j++\n             ^~\n"
  stdout: ''
  timestamp: 1659820675
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    var pairs = 0\n \
    \   for k in l {\n        sum += k\n        if sum == 0 {\n            pairs +=\
    \ 1\n        }\n    }\n    if pairs == 2 {\n        return true\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpjbxb057r/tmpjbxb057r.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b954c8bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b954c5b2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b954c5b2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b954c5b17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjbxb057r                        0x0000561f4af556f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b954caa7460 __libc_start_main +
    245

    6    tmpjbxb057r                        0x0000561f4af550d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820676
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum < 0 {\n            sum = 0\n        }\n      \
    \  if sum == 0 {\n            return true\n        }\n        if sum > 0 {\n \
    \           i++\n        }\n        if sum < 0 {\n            j++\n        }\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpvzllzyhe.swift:28:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            i++\n             ^~\n/tmp/tmpvzllzyhe.swift:31:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  j++\n             ^~\n"
  stdout: ''
  timestamp: 1659820674
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n    return\
    \ sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp7ffpjdke/tmp7ffpjdke.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94a1b22c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94a1819b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94a1819988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94a18187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ffpjdke                        0x00005623f8c186f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b94a1d0e460 __libc_start_main +
    245

    6    tmp7ffpjdke                        0x00005623f8c180d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820674
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum < 0 {\n            sum = 0\n        }\n      \
    \  if sum == 0 {\n            return false\n        }\n        if i == j {\n \
    \           return true\n        }\n        i++\n        j++\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2pqox1bf.swift:30:10: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        i++\n         ^~\n/tmp/tmp2pqox1bf.swift:31:10:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        j++\n\
    \         ^~\n"
  stdout: ''
  timestamp: 1659820675
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for x in l {\n  \
    \      sum += x\n        if sum < 0 {\n            sum = 0\n            i += 1\n\
    \        }\n        if sum > 0 {\n            sum = 0\n            j += 1\n  \
    \      }\n        if i == j {\n            return true\n        }\n    }\n   \
    \ return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpc92hqbo4/tmpc92hqbo4.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b61d6e05c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b61d6afcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b61d6afc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b61d6afb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc92hqbo4                        0x000055cbdb5e66f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b61d6ff1460 __libc_start_main +
    245

    6    tmpc92hqbo4                        0x000055cbdb5e60d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820674
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for _ in 0..<l.count\
    \ {\n        sum += l[i]\n        if sum < 0 {\n            sum = 0\n        }\
    \ else {\n            i += 1\n        }\n    }\n    for _ in 0..<l.count {\n \
    \       sum += l[j]\n        if sum < 0 {\n            sum = 0\n        } else\
    \ {\n            j += 1\n        }\n    }\n    return i == j\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpqml11s32/tmpqml11s32.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af877a1ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af877715b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af877715988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af8777147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqml11s32                        0x0000560618b9a544 <unavailable> + 5444

    5    libc.so.6                          0x00002af877c0a460 __libc_start_main +
    245

    6    tmpqml11s32                        0x0000560618b9a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659820675
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for x in l {\n  \
    \      sum += x\n        if sum < 0 {\n            sum = 0\n            i += 1\n\
    \        }\n        if sum > 0 {\n            sum = 0\n            j += 1\n  \
    \      }\n    }\n    return i == j\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpngafuzl2/tmpngafuzl2.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff85ce2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff859d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff859d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff859d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpngafuzl2                        0x0000560b825426f5 <unavailable> + 5877

    5    libc.so.6                          0x00002aff85ece460 __libc_start_main +
    245

    6    tmpngafuzl2                        0x0000560b825420d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820676
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum < 0 {\n            sum = 0\n        }\n      \
    \  if sum == 0 {\n            return false\n        }\n        if i == j {\n \
    \           return true\n        }\n        i += 1\n        j += 1\n    }\n  \
    \  return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp8kr8z1_d/tmp8kr8z1_d.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e08454c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e0814bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e0814b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e0814a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8kr8z1_d                        0x000055dc9a07a474 <unavailable> + 5236

    5    libc.so.6                          0x00002b8e08640460 __libc_start_main +
    245

    6    tmp8kr8z1_d                        0x000055dc9a07a0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820674
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum < 0 {\n            sum = 0\n        }\n      \
    \  if sum > 0 {\n            if i == j {\n                return false\n     \
    \       }\n            i++\n            j++\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpqqdvn1cd.swift:28:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            i++\n             ^~\n/tmp/tmpqqdvn1cd.swift:29:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  j++\n             ^~\n"
  stdout: ''
  timestamp: 1659820675
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for _ in 0..<l.count\
    \ {\n        sum += l[i]\n        if sum < 0 {\n            sum = 0\n        }\
    \ else {\n            i += 1\n        }\n        if sum == 0 {\n            return\
    \ false\n        }\n    }\n    for _ in 0..<l.count {\n        sum += l[j]\n \
    \       if sum < 0 {\n            sum = 0\n        } else {\n            j +=\
    \ 1\n        }\n        if sum == 0 {\n            return false\n        }\n \
    \   }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpz5ydnvfi/tmpz5ydnvfi.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf84402c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf840f9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf840f9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf840f87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz5ydnvfi                        0x000056060b0a8544 <unavailable> + 5444

    5    libc.so.6                          0x00002acf845ee460 __libc_start_main +
    245

    6    tmpz5ydnvfi                        0x000056060b0a81a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659820676
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n    return\
    \ sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp7ffpjdke/tmp7ffpjdke.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94a1b22c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94a1819b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94a1819988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94a18187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ffpjdke                        0x00005623f8c186f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b94a1d0e460 __libc_start_main +
    245

    6    tmp7ffpjdke                        0x00005623f8c180d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820674
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for _ in 0..<l.count\
    \ {\n        sum += l[i]\n        if sum < 0 {\n            sum = 0\n        }\n\
    \        if sum == 0 {\n            return true\n        }\n        if sum > 0\
    \ {\n            i++\n        }\n        if sum < 0 {\n            j++\n     \
    \   }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpfwnfgazt.swift:28:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            i++\n             ^~\n/tmp/tmpfwnfgazt.swift:31:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  j++\n             ^~\n"
  stdout: ''
  timestamp: 1659820674
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum < 0 {\n            sum = 0\n        }\n      \
    \  if sum == 0 {\n            return true\n        }\n        if sum > 0 {\n \
    \           i++\n        }\n        if sum < 0 {\n            j++\n        }\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpvzllzyhe.swift:28:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            i++\n             ^~\n/tmp/tmpvzllzyhe.swift:31:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  j++\n             ^~\n"
  stdout: ''
  timestamp: 1659820674
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var sum = 0\n    var pairs = [Int]()\n    for x in l {\n       \
    \ sum += x\n        if sum == 0 {\n            pairs.append(x)\n        }\n  \
    \  }\n    return pairs.count != 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpvi2_88p7/tmpvi2_88p7.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae042e34c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae042b2bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae042b2b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae042b2a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvi2_88p7                        0x00005644b5858805 <unavailable> + 6149

    5    libc.so.6                          0x00002ae043020460 __libc_start_main +
    245

    6    tmpvi2_88p7                        0x00005644b58581e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659820676
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    var pairs = 0\n \
    \   for _ in 0..<l.count {\n        sum += l[i]\n        i += 1\n        if sum\
    \ == 0 {\n            pairs += 1\n            sum = 0\n        }\n    }\n    return\
    \ pairs == 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp1cub239e/tmp1cub239e.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b205a982c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b205a679b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b205a679988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b205a6787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1cub239e                        0x0000561a326ad7c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b205ab6e460 __libc_start_main +
    245

    6    tmp1cub239e                        0x0000561a326ad1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659820676
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n    return\
    \ sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp7ffpjdke/tmp7ffpjdke.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94a1b22c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94a1819b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94a1819988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94a18187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ffpjdke                        0x00005623f8c186f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b94a1d0e460 __libc_start_main +
    245

    6    tmp7ffpjdke                        0x00005623f8c180d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820674
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for _ in 0..<l.count\
    \ {\n        sum += l[i]\n        i += 1\n        if sum < 0 {\n            sum\
    \ = 0\n            j += 1\n        }\n    }\n    return j == l.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpo5874935/tmpo5874935.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac62e51bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac62e212b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac62e212988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac62e2117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo5874935                        0x000056358f2137c5 <unavailable> + 6085

    5    libc.so.6                          0x00002ac62e707460 __libc_start_main +
    245

    6    tmpo5874935                        0x000056358f2131a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659820674
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for i < l.count &&\
    \ j < l.count {\n        sum = l[i] + l[j]\n        if sum == 0 {\n          \
    \  return true\n        }\n        if sum > 0 {\n            i++\n        } else\
    \ {\n            j++\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpfxsuagno.swift:19:11: error: expected 'in' after for-each pattern\n\
    \    for i < l.count && j < l.count {\n          ^\n/tmp/tmpfxsuagno.swift:19:11:\
    \ error: unary operator cannot be separated from its operand\n    for i < l.count\
    \ && j < l.count {\n          ^~\n           \n/tmp/tmpfxsuagno.swift:19:11: error:\
    \ '<' is not a prefix unary operator\n    for i < l.count && j < l.count {\n \
    \         ^\n/tmp/tmpfxsuagno.swift:19:21: error: for-in loop requires 'Bool'\
    \ to conform to 'Sequence'\n    for i < l.count && j < l.count {\n          ~~~~~~~~~~^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820675
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var sum = 0\n    for x in l {\n        sum += x\n    }\n    return\
    \ sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp7ffpjdke/tmp7ffpjdke.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94a1b22c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94a1819b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94a1819988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94a18187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ffpjdke                        0x00005623f8c186f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b94a1d0e460 __libc_start_main +
    245

    6    tmp7ffpjdke                        0x00005623f8c180d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820674
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for k in l {\n  \
    \      sum += k\n        if sum < 0 {\n            sum = 0\n            i += 1\n\
    \        }\n        if sum > 0 {\n            sum = 0\n            j += 1\n  \
    \      }\n        if i == j {\n            return true\n        }\n    }\n   \
    \ return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp4s1q7qej/tmp4s1q7qej.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed711fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed70ef5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed70ef5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed70ef47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4s1q7qej                        0x000055f71f51c6f5 <unavailable> + 5877

    5    libc.so.6                          0x00002aed713ea460 __libc_start_main +
    245

    6    tmp4s1q7qej                        0x000055f71f51c0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820675
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = 0\n    var sum = 0\n    for _ in 0..<l.count\
    \ {\n        sum += l[i]\n        if sum < 0 {\n            sum = 0\n        \
    \    i += 1\n        }\n        if sum > 0 {\n            sum = 0\n          \
    \  j += 1\n        }\n        if i == j {\n            return true\n        }\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpp1ayz0gu/tmpp1ayz0gu.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3db838bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3db8082b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3db8082988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3db80817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp1ayz0gu                        0x0000555e525677c5 <unavailable> + 6085

    5    libc.so.6                          0x00002b3db8577460 __libc_start_main +
    245

    6    tmpp1ayz0gu                        0x0000555e525671a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659820674
