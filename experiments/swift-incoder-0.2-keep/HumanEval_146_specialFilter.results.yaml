language: swift
name: HumanEval_146_specialFilter
results:
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for n in nums {\n        if n > 10 && n % 2 == 1 && n % 2 == 1 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpko0meptr/tmpko0meptr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86f11dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86f0ed3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86f0ed3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86f0ed27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpko0meptr                        0x000055d468ad26b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b86f13c8460 __libc_start_main +
    245

    6    tmpko0meptr                        0x000055d468ad2169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 2 == 0 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpge7_set8/tmpge7_set8.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b385e26ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b385df65b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b385df65988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b385df647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpge7_set8                        0x000055eb8e1ed5d7 <unavailable> + 5591

    5    libc.so.6                          0x00002b385e45a460 __libc_start_main +
    245

    6    tmpge7_set8                        0x000055eb8e1ed169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 2 == 1 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpkm1q15jr/tmpkm1q15jr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83e4622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83e4319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83e4319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83e43187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkm1q15jr                        0x00005627cb3bc6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b83e480e460 __libc_start_main +
    245

    6    tmpkm1q15jr                        0x00005627cb3bc169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 {\n            if num % 2 == 1 {\n\
    \                count += 1\n            }\n            if num % 2 == 0 {\n  \
    \              if num > 10 && num < 100 {\n                    count += 1\n  \
    \              }\n                if num > 100 && num < 1000 {\n             \
    \       count += 1\n                }\n                if num > 1000 && num <\
    \ 10000 {\n                    count += 1\n                }\n               \
    \ if num > 10000 && num < 100000 {\n                    count += 1\n         \
    \       }\n                if num > 100000 && num < 1000000 {\n              \
    \      count += 1\n                }\n                if num > 1000000 && num\
    \ < 10000000 {\n                    count += 1\n                }\n          \
    \      if num > 10000000 && num < 100000000 {\n                    count += 1\n\
    \                }\n                if num > 100000000 && num < 1000000000 {\n\
    \                    count += 1\n                }\n                if num > 1000000000\
    \ && num < 10000000000 {\n                    count += 1\n                }\n\
    \                if num > 10000000000 && num < 100000000000 {\n              \
    \      count += 1\n                }\n                if num > 100000000000 &&\
    \ num < 1000000000000 {\n                    count += 1\n                }\n \
    \               if num > 1000000000000 && num < 10000000000000 {\n           \
    \         count += 1\n                }\n                if num > 10000000000000\
    \ && num < 100000000000000 {\n                    count += 1\n               \
    \ }\n                if num > 100000000000000 && num < 1000000000000000 {\n  \
    \                  count += 1\n                }\n                if num > 1000000000000000\
    \ && num < 10000000000000000 {\n                    count += 1\n             \
    \   }\n                if num > 10000000000000000 && num < 100000000000000000\
    \ {\n                    count += 1\n                }\n                if num\
    \ > 100000000000000000 && num < 1000000000000000000 {\n                    count\
    \ += 1\n                }\n                if num > 1000000000000000000 && num\
    \ < 10000000000000000000 {\n                    count += 1\n                }\n\
    \                if num > 10000000000000000000 && num < 100000000000000000000\
    \ {\n                    count += 1\n                }\n                if num\
    \ > 100000000000000000000 && num < 1000000000000000000000 {\n                \
    \    count += 1\n                }\n                if num > 1000000000000000000000\
    \ && num < 10000000000000000000000 {\n                    count += 1\n       \
    \         }\n                if num > 10000000000000000000000 && num < 100000000000000000000000\
    \ {\n                    count += 1\n                }\n                if num\
    \ > 100000000000000000000000 && num < 1000000000000000000000000 {\n          \
    \          count += 1\n                }\n                if num > 1000000000000000000000000\
    \ && num < 10000000000000000000000000 {\n                    count += 1\n    \
    \            }\n                if num > 10000000000000000000000000 && num < 100000000000000000000000000\
    \ {\n                    count += 1\n                }\n                if num\
    \ > 100000000000000000000000000 && num < 1000000000000000000000000000 {\n    \
    \                count += 1\n                }\n                if num > 1000000000000000000000000000\
    \ && num < 10000000000000000000000000000 {\n                    count += 1\n \
    \               }\n                if num > 100\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp2jd799_0.swift:97:29: error: expected '{' after 'if' condition\n\
    \                if num > 100\n                            ^\n/tmp/tmp2jd799_0.swift:119:46:\
    \ error: expected '}' at end of brace statement\nassert(specialFilter(nums: []\
    \ as [Int]) == 0)\n                                             ^\n/tmp/tmp2jd799_0.swift:11:21:\
    \ note: to match this opening '{'\n        if num > 10 {\n                   \
    \ ^\n/tmp/tmp2jd799_0.swift:119:46: error: expected '}' at end of brace statement\n\
    assert(specialFilter(nums: [] as [Int]) == 0)\n                              \
    \               ^\n/tmp/tmp2jd799_0.swift:10:21: note: to match this opening '{'\n\
    \    for num in nums {\n                    ^\n/tmp/tmp2jd799_0.swift:119:46:\
    \ error: expected '}' at end of brace statement\nassert(specialFilter(nums: []\
    \ as [Int]) == 0)\n                                             ^\n/tmp/tmp2jd799_0.swift:8:40:\
    \ note: to match this opening '{'\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \                                       ^\n/tmp/tmp2jd799_0.swift:101:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 2 == 1 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpkm1q15jr/tmpkm1q15jr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83e4622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83e4319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83e4319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83e43187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkm1q15jr                        0x00005627cb3bc6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b83e480e460 __libc_start_main +
    245

    6    tmpkm1q15jr                        0x00005627cb3bc169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for n in nums {\n        if n > 10 && n % 2 == 1 && n % 2 == 1 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpko0meptr/tmpko0meptr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86f11dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86f0ed3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86f0ed3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86f0ed27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpko0meptr                        0x000055d468ad26b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b86f13c8460 __libc_start_main +
    245

    6    tmpko0meptr                        0x000055d468ad2169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for n in nums {\n        if n > 10 && n % 2 == 1 && n % 2 == 1 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpko0meptr/tmpko0meptr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86f11dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86f0ed3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86f0ed3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86f0ed27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpko0meptr                        0x000055d468ad26b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b86f13c8460 __libc_start_main +
    245

    6    tmpko0meptr                        0x000055d468ad2169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 2 == 1 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpkm1q15jr/tmpkm1q15jr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83e4622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83e4319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83e4319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83e43187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkm1q15jr                        0x00005627cb3bc6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b83e480e460 __libc_start_main +
    245

    6    tmpkm1q15jr                        0x00005627cb3bc169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 {\n            if num % 2 == 1 {\n\
    \                if num > 10 && num < 100 {\n                    if num % 2 ==\
    \ 1 {\n                        count += 1\n                    }\n           \
    \     }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmp2v1xjys4/tmp2v1xjys4.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6bcb73fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6bcb436b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6bcb436988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6bcb4357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2v1xjys4                        0x00005637bd73f6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b6bcb92b460 __libc_start_main +
    245

    6    tmp2v1xjys4                        0x00005637bd73f169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 2 == 1 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpkm1q15jr/tmpkm1q15jr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83e4622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83e4319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83e4319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83e43187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkm1q15jr                        0x00005627cb3bc6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b83e480e460 __libc_start_main +
    245

    6    tmpkm1q15jr                        0x00005627cb3bc169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for n in nums {\n        if n > 10 && n % 2 == 1 && n % 2 == 1 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpko0meptr/tmpko0meptr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86f11dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86f0ed3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86f0ed3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86f0ed27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpko0meptr                        0x000055d468ad26b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b86f13c8460 __libc_start_main +
    245

    6    tmpko0meptr                        0x000055d468ad2169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for n in nums {\n        if n > 10 && n % 2 == 1 && n % 2 == 1 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpko0meptr/tmpko0meptr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86f11dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86f0ed3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86f0ed3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86f0ed27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpko0meptr                        0x000055d468ad26b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b86f13c8460 __libc_start_main +
    245

    6    tmpko0meptr                        0x000055d468ad2169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 {\n            if num % 2 == 1 {\n\
    \                if num / 2 % 2 == 1 {\n                    count += 1\n     \
    \           }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpalkthkrh/tmpalkthkrh.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab95f6d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab95f3cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab95f3ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab95f3c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpalkthkrh                        0x000055d00d30a6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002ab95f8bf460 __libc_start_main +
    245

    6    tmpalkthkrh                        0x000055d00d30a169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 {\n            if num % 2 == 1 {\n\
    \                if num > 10 && num % 2 == 1 {\n                    count += 1\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpf32mab2x/tmpf32mab2x.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8660a16c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b866070db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b866070d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b866070c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf32mab2x                        0x000056267a3316b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b8660c02460 __libc_start_main +
    245

    6    tmpf32mab2x                        0x000056267a331169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 2 == 1 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpkm1q15jr/tmpkm1q15jr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83e4622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83e4319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83e4319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83e43187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkm1q15jr                        0x00005627cb3bc6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b83e480e460 __libc_start_main +
    245

    6    tmpkm1q15jr                        0x00005627cb3bc169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 2 == 1 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpkm1q15jr/tmpkm1q15jr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83e4622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83e4319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83e4319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83e43187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkm1q15jr                        0x00005627cb3bc6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b83e480e460 __libc_start_main +
    245

    6    tmpkm1q15jr                        0x00005627cb3bc169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 2 == 1 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpkm1q15jr/tmpkm1q15jr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83e4622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83e4319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83e4319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83e43187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkm1q15jr                        0x00005627cb3bc6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b83e480e460 __libc_start_main +
    245

    6    tmpkm1q15jr                        0x00005627cb3bc169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 {\n            if num % 2 == 1 {\n\
    \                if num > 10 && nums.last % 2 == 1 {\n                    count\
    \ += 1\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmprqyfg_ew.swift:13:37: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n                if num > 10 && nums.last\
    \ % 2 == 1 {\n                                    ^\n/tmp/tmprqyfg_ew.swift:13:37:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n                if num > 10 && nums.last % 2 == 1 {\n               \
    \                     ^\n                               (         ?? <#default\
    \ value#>)\n/tmp/tmprqyfg_ew.swift:13:37: note: force-unwrap using '!' to abort\
    \ execution if the optional value contains 'nil'\n                if num > 10\
    \ && nums.last % 2 == 1 {\n                                    ^\n           \
    \                             !\n"
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 2 == 0 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpge7_set8/tmpge7_set8.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b385e26ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b385df65b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b385df65988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b385df647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpge7_set8                        0x000055eb8e1ed5d7 <unavailable> + 5591

    5    libc.so.6                          0x00002b385e45a460 __libc_start_main +
    245

    6    tmpge7_set8                        0x000055eb8e1ed169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 2 == 1 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpkm1q15jr/tmpkm1q15jr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83e4622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83e4319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83e4319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83e43187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkm1q15jr                        0x00005627cb3bc6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b83e480e460 __libc_start_main +
    245

    6    tmpkm1q15jr                        0x00005627cb3bc169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 2 == 1 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpkm1q15jr/tmpkm1q15jr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83e4622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83e4319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83e4319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83e43187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkm1q15jr                        0x00005627cb3bc6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b83e480e460 __libc_start_main +
    245

    6    tmpkm1q15jr                        0x00005627cb3bc169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 {\n            if num % 2 == 1 {\n\
    \                if num > 10 && nums.last % 2 == 1 {\n                    count\
    \ += 1\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmprqyfg_ew.swift:13:37: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n                if num > 10 && nums.last\
    \ % 2 == 1 {\n                                    ^\n/tmp/tmprqyfg_ew.swift:13:37:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n                if num > 10 && nums.last % 2 == 1 {\n               \
    \                     ^\n                               (         ?? <#default\
    \ value#>)\n/tmp/tmprqyfg_ew.swift:13:37: note: force-unwrap using '!' to abort\
    \ execution if the optional value contains 'nil'\n                if num > 10\
    \ && nums.last % 2 == 1 {\n                                    ^\n           \
    \                             !\n"
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for n in nums {\n        if n > 10 && n % 2 == 1 && n % 2 == 1 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpko0meptr/tmpko0meptr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86f11dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86f0ed3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86f0ed3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86f0ed27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpko0meptr                        0x000055d468ad26b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b86f13c8460 __libc_start_main +
    245

    6    tmpko0meptr                        0x000055d468ad2169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for n in nums {\n        if n > 10 && n % 2 == 1 && n % 2 == 1 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpko0meptr/tmpko0meptr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86f11dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86f0ed3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86f0ed3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86f0ed27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpko0meptr                        0x000055d468ad26b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b86f13c8460 __libc_start_main +
    245

    6    tmpko0meptr                        0x000055d468ad2169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 2 == 1 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpkm1q15jr/tmpkm1q15jr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83e4622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83e4319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83e4319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83e43187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkm1q15jr                        0x00005627cb3bc6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b83e480e460 __libc_start_main +
    245

    6    tmpkm1q15jr                        0x00005627cb3bc169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 2 == 1 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpkm1q15jr/tmpkm1q15jr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83e4622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83e4319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83e4319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83e43187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkm1q15jr                        0x00005627cb3bc6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b83e480e460 __libc_start_main +
    245

    6    tmpkm1q15jr                        0x00005627cb3bc169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 {\n            if num % 2 == 1 {\n\
    \                if num % 3 == 1 {\n                    if num % 5 == 1 {\n  \
    \                      count += 1\n                    }\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpsxrdzm1t/tmpsxrdzm1t.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ba7c0dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ba7904b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ba7904988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ba79037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsxrdzm1t                        0x00005601c61a85d7 <unavailable> + 5591

    5    libc.so.6                          0x00002b4ba7df9460 __libc_start_main +
    245

    6    tmpsxrdzm1t                        0x00005601c61a8169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 {\n            if num % 2 == 1 {\n\
    \                if num > 10 && nums.last % 2 == 1 {\n                    count\
    \ += 1\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmprqyfg_ew.swift:13:37: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n                if num > 10 && nums.last\
    \ % 2 == 1 {\n                                    ^\n/tmp/tmprqyfg_ew.swift:13:37:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n                if num > 10 && nums.last % 2 == 1 {\n               \
    \                     ^\n                               (         ?? <#default\
    \ value#>)\n/tmp/tmprqyfg_ew.swift:13:37: note: force-unwrap using '!' to abort\
    \ execution if the optional value contains 'nil'\n                if num > 10\
    \ && nums.last % 2 == 1 {\n                                    ^\n           \
    \                             !\n"
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 2 == 1 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpkm1q15jr/tmpkm1q15jr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83e4622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83e4319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83e4319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83e43187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkm1q15jr                        0x00005627cb3bc6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b83e480e460 __libc_start_main +
    245

    6    tmpkm1q15jr                        0x00005627cb3bc169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 2 == 1 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpkm1q15jr/tmpkm1q15jr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83e4622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83e4319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83e4319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83e43187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkm1q15jr                        0x00005627cb3bc6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b83e480e460 __libc_start_main +
    245

    6    tmpkm1q15jr                        0x00005627cb3bc169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 3 == 1 &&\
    \ num % 5 == 1 {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpt6s34eny/tmpt6s34eny.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b50c825fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b50c7f56b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b50c7f56988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b50c7f557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt6s34eny                        0x000055f36bdc45d7 <unavailable> + 5591

    5    libc.so.6                          0x00002b50c844b460 __libc_start_main +
    245

    6    tmpt6s34eny                        0x000055f36bdc4169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 3 == 1 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpnn24wgxn/tmpnn24wgxn.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed40ca3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed4099ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed4099a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed409997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnn24wgxn                        0x000055a730b015d7 <unavailable> + 5591

    5    libc.so.6                          0x00002aed40e8f460 __libc_start_main +
    245

    6    tmpnn24wgxn                        0x000055a730b01169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 2 == 0 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpge7_set8/tmpge7_set8.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b385e26ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b385df65b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b385df65988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b385df647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpge7_set8                        0x000055eb8e1ed5d7 <unavailable> + 5591

    5    libc.so.6                          0x00002b385e45a460 __libc_start_main +
    245

    6    tmpge7_set8                        0x000055eb8e1ed169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for n in nums {\n        if n > 10 && n % 2 == 1 && n % 2 == 1 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpko0meptr/tmpko0meptr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86f11dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86f0ed3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86f0ed3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86f0ed27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpko0meptr                        0x000055d468ad26b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b86f13c8460 __libc_start_main +
    245

    6    tmpko0meptr                        0x000055d468ad2169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for n in nums {\n        if n > 10 && n % 2 == 1 && n % 2 == 1 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpko0meptr/tmpko0meptr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86f11dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86f0ed3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86f0ed3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86f0ed27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpko0meptr                        0x000055d468ad26b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b86f13c8460 __libc_start_main +
    245

    6    tmpko0meptr                        0x000055d468ad2169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 2 == 1 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpkm1q15jr/tmpkm1q15jr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83e4622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83e4319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83e4319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83e43187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkm1q15jr                        0x00005627cb3bc6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b83e480e460 __libc_start_main +
    245

    6    tmpkm1q15jr                        0x00005627cb3bc169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for n in nums {\n        if n > 10 && n % 2 == 1 && n % 2 != 0 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpr0abagls/tmpr0abagls.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b18e9164c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b18e8e5bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b18e8e5b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b18e8e5a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr0abagls                        0x00005589fdd146b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b18e9350460 __libc_start_main +
    245

    6    tmpr0abagls                        0x00005589fdd14169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 2 == 1 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpkm1q15jr/tmpkm1q15jr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83e4622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83e4319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83e4319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83e43187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkm1q15jr                        0x00005627cb3bc6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b83e480e460 __libc_start_main +
    245

    6    tmpkm1q15jr                        0x00005627cb3bc169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 2 == 1 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpkm1q15jr/tmpkm1q15jr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83e4622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83e4319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83e4319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83e43187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkm1q15jr                        0x00005627cb3bc6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b83e480e460 __libc_start_main +
    245

    6    tmpkm1q15jr                        0x00005627cb3bc169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 2 == 1 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpkm1q15jr/tmpkm1q15jr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83e4622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83e4319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83e4319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83e43187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkm1q15jr                        0x00005627cb3bc6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b83e480e460 __libc_start_main +
    245

    6    tmpkm1q15jr                        0x00005627cb3bc169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for n in nums {\n        if n > 10 && n % 2 == 1 && n % 2 == 1 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpko0meptr/tmpko0meptr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86f11dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86f0ed3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86f0ed3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86f0ed27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpko0meptr                        0x000055d468ad26b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b86f13c8460 __libc_start_main +
    245

    6    tmpko0meptr                        0x000055d468ad2169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 {\n            if num % 2 == 1 {\n\
    \                if num > 10 && nums.last % 2 == 1 {\n                    count\
    \ += 1\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmprqyfg_ew.swift:13:37: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n                if num > 10 && nums.last\
    \ % 2 == 1 {\n                                    ^\n/tmp/tmprqyfg_ew.swift:13:37:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n                if num > 10 && nums.last % 2 == 1 {\n               \
    \                     ^\n                               (         ?? <#default\
    \ value#>)\n/tmp/tmprqyfg_ew.swift:13:37: note: force-unwrap using '!' to abort\
    \ execution if the optional value contains 'nil'\n                if num > 10\
    \ && nums.last % 2 == 1 {\n                                    ^\n           \
    \                             !\n"
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 {\n            if num % 2 == 1 {\n\
    \                count += 1\n            }\n            if num % 2 == 0 {\n  \
    \              if num > 10 && num < 100 {\n                    count += 1\n  \
    \              }\n                if num > 100 && num < 1000 {\n             \
    \       count += 1\n                }\n                if num > 1000 && num <\
    \ 10000 {\n                    count += 1\n                }\n               \
    \ if num > 10000 && num < 100000 {\n                    count += 1\n         \
    \       }\n                if num > 100000 && num < 1000000 {\n              \
    \      count += 1\n                }\n                if num > 1000000 && num\
    \ < 10000000 {\n                    count += 1\n                }\n          \
    \      if num > 10000000 && num < 100000000 {\n                    count += 1\n\
    \                }\n                if num > 100000000 && num < 1000000000 {\n\
    \                    count += 1\n                }\n            }\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmps60ztfol/tmps60ztfol.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b628ef56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b628ec4db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b628ec4d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b628ec4c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps60ztfol                        0x0000556fa33945d7 <unavailable> + 5591

    5    libc.so.6                          0x00002b628f142460 __libc_start_main +
    245

    6    tmps60ztfol                        0x0000556fa3394169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 2 == 1 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpkm1q15jr/tmpkm1q15jr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83e4622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83e4319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83e4319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83e43187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkm1q15jr                        0x00005627cb3bc6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b83e480e460 __libc_start_main +
    245

    6    tmpkm1q15jr                        0x00005627cb3bc169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for n in nums {\n        if n > 10 && n % 2 == 1 && n % 2 == 1 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpko0meptr/tmpko0meptr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86f11dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86f0ed3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86f0ed3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86f0ed27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpko0meptr                        0x000055d468ad26b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b86f13c8460 __libc_start_main +
    245

    6    tmpko0meptr                        0x000055d468ad2169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for n in nums {\n        if n > 10 && n % 2 == 1 && n % 2 == 1 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpko0meptr/tmpko0meptr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86f11dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86f0ed3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86f0ed3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86f0ed27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpko0meptr                        0x000055d468ad26b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b86f13c8460 __libc_start_main +
    245

    6    tmpko0meptr                        0x000055d468ad2169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for n in nums {\n        if n > 10 && n % 2 == 1 && n % 2 == 1 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpko0meptr/tmpko0meptr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86f11dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86f0ed3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86f0ed3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86f0ed27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpko0meptr                        0x000055d468ad26b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b86f13c8460 __libc_start_main +
    245

    6    tmpko0meptr                        0x000055d468ad2169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 {\n            if num % 2 == 1 {\n\
    \                if num > 10 && num < 100 {\n                    if num % 2 ==\
    \ 1 {\n                        count += 1\n                    }\n           \
    \     }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmp2v1xjys4/tmp2v1xjys4.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6bcb73fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6bcb436b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6bcb436988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6bcb4357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2v1xjys4                        0x00005637bd73f6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b6bcb92b460 __libc_start_main +
    245

    6    tmp2v1xjys4                        0x00005637bd73f169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for n in nums {\n        if n > 10 && n % 2 == 1 && n % 2 == 1 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpko0meptr/tmpko0meptr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86f11dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86f0ed3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86f0ed3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86f0ed27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpko0meptr                        0x000055d468ad26b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b86f13c8460 __libc_start_main +
    245

    6    tmpko0meptr                        0x000055d468ad2169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 2 == 1 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpkm1q15jr/tmpkm1q15jr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83e4622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83e4319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83e4319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83e43187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkm1q15jr                        0x00005627cb3bc6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b83e480e460 __libc_start_main +
    245

    6    tmpkm1q15jr                        0x00005627cb3bc169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for n in nums {\n        if n > 10 && n % 2 == 1 && n % 2 == 1 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpko0meptr/tmpko0meptr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86f11dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86f0ed3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86f0ed3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86f0ed27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpko0meptr                        0x000055d468ad26b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b86f13c8460 __libc_start_main +
    245

    6    tmpko0meptr                        0x000055d468ad2169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for n in nums {\n        if n > 10 && n % 2 == 1 && n % 2 == 1 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpko0meptr/tmpko0meptr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86f11dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86f0ed3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86f0ed3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86f0ed27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpko0meptr                        0x000055d468ad26b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b86f13c8460 __libc_start_main +
    245

    6    tmpko0meptr                        0x000055d468ad2169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 {\n            if num % 2 == 1 {\n\
    \                if num % 2 == 1 {\n                    count += 1\n         \
    \       }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpbboc0gue/tmpbboc0gue.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2d1409fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2d13d96b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2d13d96988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2d13d957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbboc0gue                        0x0000561e89f526b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b2d1428b460 __libc_start_main +
    245

    6    tmpbboc0gue                        0x0000561e89f52169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 2 == 1 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpkm1q15jr/tmpkm1q15jr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83e4622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83e4319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83e4319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83e43187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkm1q15jr                        0x00005627cb3bc6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b83e480e460 __libc_start_main +
    245

    6    tmpkm1q15jr                        0x00005627cb3bc169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for n in nums {\n        if n > 10 && n % 2 == 1 && n % 2 == 1 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpko0meptr/tmpko0meptr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86f11dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86f0ed3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86f0ed3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86f0ed27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpko0meptr                        0x000055d468ad26b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b86f13c8460 __libc_start_main +
    245

    6    tmpko0meptr                        0x000055d468ad2169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 2 == 1 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpkm1q15jr/tmpkm1q15jr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83e4622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83e4319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83e4319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83e43187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkm1q15jr                        0x00005627cb3bc6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b83e480e460 __libc_start_main +
    245

    6    tmpkm1q15jr                        0x00005627cb3bc169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 {\n            if num % 2 == 0 {\n\
    \                if num % 10 == 1 {\n                    count += 1\n        \
    \        }\n                if num % 10 == 3 {\n                    count += 1\n\
    \                }\n                if num % 10 == 5 || num % 10 == 7 {\n    \
    \                count += 1\n                }\n                if num % 10 ==\
    \ 9 {\n                    count += 1\n                }\n            }\n    \
    \    }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(specialFilter(nums:\
    \ [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15, -73, 14, -15]) == 1)\n\
    assert(specialFilter(nums: [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums:\
    \ [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33,\
    \ 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpf45hdgkd/tmpf45hdgkd.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afa8d986c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afa8d67db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afa8d67d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afa8d67c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf45hdgkd                        0x0000556641bf85d7 <unavailable> + 5591

    5    libc.so.6                          0x00002afa8db72460 __libc_start_main +
    245

    6    tmpf45hdgkd                        0x0000556641bf8169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 2 == 1 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpkm1q15jr/tmpkm1q15jr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83e4622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83e4319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83e4319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83e43187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkm1q15jr                        0x00005627cb3bc6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b83e480e460 __libc_start_main +
    245

    6    tmpkm1q15jr                        0x00005627cb3bc169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 2 == 0 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpge7_set8/tmpge7_set8.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b385e26ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b385df65b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b385df65988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b385df647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpge7_set8                        0x000055eb8e1ed5d7 <unavailable> + 5591

    5    libc.so.6                          0x00002b385e45a460 __libc_start_main +
    245

    6    tmpge7_set8                        0x000055eb8e1ed169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for n in nums {\n        if n > 10 && n % 2 == 1 && n % 2 != 0 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpr0abagls/tmpr0abagls.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b18e9164c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b18e8e5bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b18e8e5b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b18e8e5a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr0abagls                        0x00005589fdd146b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b18e9350460 __libc_start_main +
    245

    6    tmpr0abagls                        0x00005589fdd14169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 {\n            if num % 2 == 1 {\n\
    \                if num > 10 && num % 2 == 1 {\n                    count += 1\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpf32mab2x/tmpf32mab2x.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8660a16c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b866070db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b866070d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b866070c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf32mab2x                        0x000056267a3316b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b8660c02460 __libc_start_main +
    245

    6    tmpf32mab2x                        0x000056267a331169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 2 == 1 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpkm1q15jr/tmpkm1q15jr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83e4622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83e4319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83e4319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83e43187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkm1q15jr                        0x00005627cb3bc6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b83e480e460 __libc_start_main +
    245

    6    tmpkm1q15jr                        0x00005627cb3bc169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for n in nums {\n        if n > 10 && n % 2 == 1 && n % 2 != 0 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpr0abagls/tmpr0abagls.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b18e9164c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b18e8e5bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b18e8e5b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b18e8e5a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr0abagls                        0x00005589fdd146b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b18e9350460 __libc_start_main +
    245

    6    tmpr0abagls                        0x00005589fdd14169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 {\n            if num % 2 == 1 {\n\
    \                if num > 10 && nums.last % 2 == 1 {\n                    count\
    \ += 1\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmprqyfg_ew.swift:13:37: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n                if num > 10 && nums.last\
    \ % 2 == 1 {\n                                    ^\n/tmp/tmprqyfg_ew.swift:13:37:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n                if num > 10 && nums.last % 2 == 1 {\n               \
    \                     ^\n                               (         ?? <#default\
    \ value#>)\n/tmp/tmprqyfg_ew.swift:13:37: note: force-unwrap using '!' to abort\
    \ execution if the optional value contains 'nil'\n                if num > 10\
    \ && nums.last % 2 == 1 {\n                                    ^\n           \
    \                             !\n"
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 2 == 1 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpkm1q15jr/tmpkm1q15jr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83e4622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83e4319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83e4319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83e43187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkm1q15jr                        0x00005627cb3bc6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b83e480e460 __libc_start_main +
    245

    6    tmpkm1q15jr                        0x00005627cb3bc169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 {\n            if num % 2 == 1 {\n\
    \                if num % 10 == 1 {\n                    if num % 100 == 1 {\n\
    \                        if num % 1000 == 1 {\n                            count\
    \ += 1\n                        }\n                    }\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpvtb2arsv/tmpvtb2arsv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b904f05bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b904ed52b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b904ed52988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b904ed517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvtb2arsv                        0x000055a2a1bf75d7 <unavailable> + 5591

    5    libc.so.6                          0x00002b904f247460 __libc_start_main +
    245

    6    tmpvtb2arsv                        0x000055a2a1bf7169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 {\n            if num % 2 == 1 {\n\
    \                if num > 10 && nums.last % 2 == 1 {\n                    count\
    \ += 1\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmprqyfg_ew.swift:13:37: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n                if num > 10 && nums.last\
    \ % 2 == 1 {\n                                    ^\n/tmp/tmprqyfg_ew.swift:13:37:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n                if num > 10 && nums.last % 2 == 1 {\n               \
    \                     ^\n                               (         ?? <#default\
    \ value#>)\n/tmp/tmprqyfg_ew.swift:13:37: note: force-unwrap using '!' to abort\
    \ execution if the optional value contains 'nil'\n                if num > 10\
    \ && nums.last % 2 == 1 {\n                                    ^\n           \
    \                             !\n"
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 {\n            if num % 2 == 1 {\n\
    \                if num % 10 == 1 {\n                    count += 1\n        \
    \        }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpviizd7kz/tmpviizd7kz.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b518c26ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b518bf65b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b518bf65988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b518bf647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpviizd7kz                        0x000055d273ce35d7 <unavailable> + 5591

    5    libc.so.6                          0x00002b518c45a460 __libc_start_main +
    245

    6    tmpviizd7kz                        0x000055d273ce3169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for n in nums {\n        if n > 10 && n % 2 == 1 && n % 2 == 1 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpko0meptr/tmpko0meptr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86f11dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86f0ed3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86f0ed3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86f0ed27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpko0meptr                        0x000055d468ad26b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b86f13c8460 __libc_start_main +
    245

    6    tmpko0meptr                        0x000055d468ad2169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for n in nums {\n        if n > 10 && n % 2 == 1 && n % 2 == 1 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpko0meptr/tmpko0meptr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86f11dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86f0ed3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86f0ed3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86f0ed27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpko0meptr                        0x000055d468ad26b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b86f13c8460 __libc_start_main +
    245

    6    tmpko0meptr                        0x000055d468ad2169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 2 == 1 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpkm1q15jr/tmpkm1q15jr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83e4622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83e4319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83e4319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83e43187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkm1q15jr                        0x00005627cb3bc6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b83e480e460 __libc_start_main +
    245

    6    tmpkm1q15jr                        0x00005627cb3bc169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 2 == 1 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpkm1q15jr/tmpkm1q15jr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83e4622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83e4319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83e4319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83e43187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkm1q15jr                        0x00005627cb3bc6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b83e480e460 __libc_start_main +
    245

    6    tmpkm1q15jr                        0x00005627cb3bc169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 2 == 1 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpkm1q15jr/tmpkm1q15jr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83e4622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83e4319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83e4319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83e43187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkm1q15jr                        0x00005627cb3bc6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b83e480e460 __libc_start_main +
    245

    6    tmpkm1q15jr                        0x00005627cb3bc169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for n in nums {\n        if n > 10 && n % 2 == 1 && n % 2 == 1 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpko0meptr/tmpko0meptr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86f11dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86f0ed3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86f0ed3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86f0ed27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpko0meptr                        0x000055d468ad26b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b86f13c8460 __libc_start_main +
    245

    6    tmpko0meptr                        0x000055d468ad2169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for n in nums {\n        if n > 10 && n % 2 == 1 && n % 2 == 1 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpko0meptr/tmpko0meptr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86f11dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86f0ed3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86f0ed3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86f0ed27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpko0meptr                        0x000055d468ad26b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b86f13c8460 __libc_start_main +
    245

    6    tmpko0meptr                        0x000055d468ad2169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for n in nums {\n        if n > 10 && n % 2 == 1 && n % 2 == 1 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpko0meptr/tmpko0meptr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86f11dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86f0ed3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86f0ed3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86f0ed27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpko0meptr                        0x000055d468ad26b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b86f13c8460 __libc_start_main +
    245

    6    tmpko0meptr                        0x000055d468ad2169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for n in nums {\n        if n > 10 && n % 2 == 1 && n % 2 == 1 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpko0meptr/tmpko0meptr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86f11dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86f0ed3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86f0ed3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86f0ed27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpko0meptr                        0x000055d468ad26b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b86f13c8460 __libc_start_main +
    245

    6    tmpko0meptr                        0x000055d468ad2169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 {\n            if num % 2 == 1 {\n\
    \                if num % 10 == 1 {\n                    count += 1\n        \
    \        }\n            }\n            if num % 2 == 0 {\n                if num\
    \ % 10 == 3 {\n                    count += 1\n                }\n           \
    \ }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15,\
    \ -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpiyl0vnx0/tmpiyl0vnx0.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0ed7eb3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0ed7baab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0ed7baa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0ed7ba97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiyl0vnx0                        0x0000555708ef35d7 <unavailable> + 5591

    5    libc.so.6                          0x00002b0ed809f460 __libc_start_main +
    245

    6    tmpiyl0vnx0                        0x0000555708ef3169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for n in nums {\n        if n > 10 && n % 2 == 1 && n % 2 == 1 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpko0meptr/tmpko0meptr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86f11dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86f0ed3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86f0ed3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86f0ed27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpko0meptr                        0x000055d468ad26b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b86f13c8460 __libc_start_main +
    245

    6    tmpko0meptr                        0x000055d468ad2169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for n in nums {\n        if n > 10 && n % 2 == 1 && n % 3 == 1 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpsjv84kx2/tmpsjv84kx2.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43ed41ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43ed111b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43ed111988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43ed1107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsjv84kx2                        0x0000559df864b5d7 <unavailable> + 5591

    5    libc.so.6                          0x00002b43ed606460 __libc_start_main +
    245

    6    tmpsjv84kx2                        0x0000559df864b169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 2 == 1 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpkm1q15jr/tmpkm1q15jr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83e4622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83e4319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83e4319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83e43187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkm1q15jr                        0x00005627cb3bc6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b83e480e460 __libc_start_main +
    245

    6    tmpkm1q15jr                        0x00005627cb3bc169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 2 == 1 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpkm1q15jr/tmpkm1q15jr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83e4622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83e4319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83e4319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83e43187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkm1q15jr                        0x00005627cb3bc6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b83e480e460 __libc_start_main +
    245

    6    tmpkm1q15jr                        0x00005627cb3bc169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for n in nums {\n        if n > 10 && n % 2 == 1 && n % 2 == 1 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpko0meptr/tmpko0meptr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86f11dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86f0ed3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86f0ed3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86f0ed27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpko0meptr                        0x000055d468ad26b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b86f13c8460 __libc_start_main +
    245

    6    tmpko0meptr                        0x000055d468ad2169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 {\n            if num % 2 == 1 {\n\
    \                count += 1\n            }\n            if num % 2 == 0 {\n  \
    \              if num > 10 && num < 100 {\n                    count += 1\n  \
    \              }\n                if num > 100 && num < 1000 {\n             \
    \       count += 1\n                }\n                if num > 1000 && num <\
    \ 10000 {\n                    count += 1\n                }\n               \
    \ if num > 10000 && num < 100000 {\n                    count += 1\n         \
    \       }\n                if num > 100000 && num < 1000000 {\n              \
    \      count += 1\n                }\n                if num > 1000000 && num\
    \ < 10000000 {\n                    count += 1\n                }\n          \
    \      if num > 10000000 && num < 100000000 {\n                    count += 1\n\
    \                }\n                if num > 100000000 && num < 1000000000 {\n\
    \                    count += 1\n                }\n                if num > 1000000000\
    \ && num < 10000000000 {\n                    count += 1\n                }\n\
    \                if num > 10000000000 && num < 100000000000 {\n              \
    \      count += 1\n                }\n                if num > 100000000000 &&\
    \ num < 1000000000000 {\n                    count += 1\n                }\n \
    \               if num > 1000000000000 && num < 10000000000000 {\n           \
    \         count += 1\n                }\n                if num > 10000000000000\
    \ && num < 100000000000000 {\n                    count += 1\n               \
    \ }\n                if num > 100000000000000 && num < 1000000000000000 {\n  \
    \                  count += 1\n                }\n                if num > 1000000000000000\
    \ && num < 10000000000000000 {\n                    count += 1\n             \
    \   }\n                if num > 10000000000000000 && num < 100000000000000000\
    \ {\n                    count += 1\n                }\n                if num\
    \ > 100000000000000000 && num < 1000000000000000000 {\n                    count\
    \ += 1\n                }\n                if num > 1000000000000000000 && num\
    \ < 10000000000000000000 {\n                    count += 1\n                }\n\
    \                if num > 10000000000000000000 && num < 100000000000000000000\
    \ {\n                    count += 1\n                }\n                if num\
    \ > 100000000000000000000 && num < 1000000000000000000000 {\n                \
    \    count += 1\n                }\n                if num > 1000000000000000000000\
    \ && num < 10000000000000000000000 {\n                    count += 1\n       \
    \         }\n                if num > 10000000000000000000000 && num < 100000000000000000000000\
    \ {\n                    count += 1\n                }\n                if num\
    \ > 100000000000000000000000 && num < 1000000000000000000000000 {\n          \
    \          count += 1\n                }\n                if num > 1000000000000000000000000\
    \ && num < 10000000000000000000000000 {\n                    count += 1\n    \
    \            }\n                if num > 10000000000000000000000000 && num < 100000000000000000000000000\
    \ {\n                    count += 1\n                }\n                if num\
    \ > 100000000000000000000000000 && num < 1000000000000000000000000000 {\n    \
    \                count += 1\n                }\n                if num > 10000000000\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpqi0ou76l.swift:94:37: error: expected '{' after 'if' condition\n\
    \                if num > 10000000000\n                                    ^\n\
    /tmp/tmpqi0ou76l.swift:116:46: error: expected '}' at end of brace statement\n\
    assert(specialFilter(nums: [] as [Int]) == 0)\n                              \
    \               ^\n/tmp/tmpqi0ou76l.swift:11:21: note: to match this opening '{'\n\
    \        if num > 10 {\n                    ^\n/tmp/tmpqi0ou76l.swift:116:46:\
    \ error: expected '}' at end of brace statement\nassert(specialFilter(nums: []\
    \ as [Int]) == 0)\n                                             ^\n/tmp/tmpqi0ou76l.swift:10:21:\
    \ note: to match this opening '{'\n    for num in nums {\n                   \
    \ ^\n/tmp/tmpqi0ou76l.swift:116:46: error: expected '}' at end of brace statement\n\
    assert(specialFilter(nums: [] as [Int]) == 0)\n                              \
    \               ^\n/tmp/tmpqi0ou76l.swift:8:40: note: to match this opening '{'\n\
    func specialFilter(nums: [Int]) -> Int {\n                                   \
    \    ^\n/tmp/tmpqi0ou76l.swift:98:6: error: operator functions can only be declared\
    \ at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for n in nums {\n        if n > 10 && n % 2 == 1 && n % 2 == 1 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpko0meptr/tmpko0meptr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86f11dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86f0ed3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86f0ed3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86f0ed27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpko0meptr                        0x000055d468ad26b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b86f13c8460 __libc_start_main +
    245

    6    tmpko0meptr                        0x000055d468ad2169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 {\n            if num % 2 == 1 {\n\
    \                if num > 10 && nums.last % 2 == 1 {\n                    count\
    \ += 1\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmprqyfg_ew.swift:13:37: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n                if num > 10 && nums.last\
    \ % 2 == 1 {\n                                    ^\n/tmp/tmprqyfg_ew.swift:13:37:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n                if num > 10 && nums.last % 2 == 1 {\n               \
    \                     ^\n                               (         ?? <#default\
    \ value#>)\n/tmp/tmprqyfg_ew.swift:13:37: note: force-unwrap using '!' to abort\
    \ execution if the optional value contains 'nil'\n                if num > 10\
    \ && nums.last % 2 == 1 {\n                                    ^\n           \
    \                             !\n"
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 2 == 1 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpkm1q15jr/tmpkm1q15jr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83e4622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83e4319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83e4319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83e43187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkm1q15jr                        0x00005627cb3bc6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b83e480e460 __libc_start_main +
    245

    6    tmpkm1q15jr                        0x00005627cb3bc169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 2 == 1 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpkm1q15jr/tmpkm1q15jr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83e4622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83e4319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83e4319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83e43187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkm1q15jr                        0x00005627cb3bc6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b83e480e460 __libc_start_main +
    245

    6    tmpkm1q15jr                        0x00005627cb3bc169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 2 == 1 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpkm1q15jr/tmpkm1q15jr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83e4622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83e4319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83e4319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83e43187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkm1q15jr                        0x00005627cb3bc6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b83e480e460 __libc_start_main +
    245

    6    tmpkm1q15jr                        0x00005627cb3bc169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for n in nums {\n        if n > 10 && n % 2 == 1 && n % 2 == 1 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpko0meptr/tmpko0meptr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86f11dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86f0ed3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86f0ed3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86f0ed27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpko0meptr                        0x000055d468ad26b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b86f13c8460 __libc_start_main +
    245

    6    tmpko0meptr                        0x000055d468ad2169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 2 == 1 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpkm1q15jr/tmpkm1q15jr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83e4622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83e4319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83e4319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83e43187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkm1q15jr                        0x00005627cb3bc6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b83e480e460 __libc_start_main +
    245

    6    tmpkm1q15jr                        0x00005627cb3bc169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for n in nums {\n        if n > 10 && n % 2 == 1 && n % 2 == 1 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpko0meptr/tmpko0meptr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86f11dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86f0ed3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86f0ed3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86f0ed27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpko0meptr                        0x000055d468ad26b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b86f13c8460 __libc_start_main +
    245

    6    tmpko0meptr                        0x000055d468ad2169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 2 == 1 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpkm1q15jr/tmpkm1q15jr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83e4622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83e4319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83e4319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83e43187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkm1q15jr                        0x00005627cb3bc6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b83e480e460 __libc_start_main +
    245

    6    tmpkm1q15jr                        0x00005627cb3bc169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for n in nums {\n        if n > 10 && n % 2 == 1 && n % 2 == 1 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpko0meptr/tmpko0meptr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86f11dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86f0ed3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86f0ed3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86f0ed27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpko0meptr                        0x000055d468ad26b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b86f13c8460 __libc_start_main +
    245

    6    tmpko0meptr                        0x000055d468ad2169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 {\n            if num % 2 == 1 {\n\
    \                if num % 2 == 1 {\n                    count += 1\n         \
    \       }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpbboc0gue/tmpbboc0gue.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2d1409fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2d13d96b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2d13d96988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2d13d957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbboc0gue                        0x0000561e89f526b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b2d1428b460 __libc_start_main +
    245

    6    tmpbboc0gue                        0x0000561e89f52169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 {\n            if num % 2 == 1 {\n\
    \                if num > 10 && nums.last % 2 == 1 {\n                    count\
    \ += 1\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmprqyfg_ew.swift:13:37: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n                if num > 10 && nums.last\
    \ % 2 == 1 {\n                                    ^\n/tmp/tmprqyfg_ew.swift:13:37:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n                if num > 10 && nums.last % 2 == 1 {\n               \
    \                     ^\n                               (         ?? <#default\
    \ value#>)\n/tmp/tmprqyfg_ew.swift:13:37: note: force-unwrap using '!' to abort\
    \ execution if the optional value contains 'nil'\n                if num > 10\
    \ && nums.last % 2 == 1 {\n                                    ^\n           \
    \                             !\n"
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 {\n            if num % 2 == 1 {\n\
    \                if num > 10 && num % 2 == 1 {\n                    count += 1\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpf32mab2x/tmpf32mab2x.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8660a16c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b866070db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b866070d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b866070c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf32mab2x                        0x000056267a3316b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b8660c02460 __libc_start_main +
    245

    6    tmpf32mab2x                        0x000056267a331169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 2 == 1 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpkm1q15jr/tmpkm1q15jr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83e4622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83e4319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83e4319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83e43187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkm1q15jr                        0x00005627cb3bc6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b83e480e460 __libc_start_main +
    245

    6    tmpkm1q15jr                        0x00005627cb3bc169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 2 == 0 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpge7_set8/tmpge7_set8.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b385e26ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b385df65b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b385df65988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b385df647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpge7_set8                        0x000055eb8e1ed5d7 <unavailable> + 5591

    5    libc.so.6                          0x00002b385e45a460 __libc_start_main +
    245

    6    tmpge7_set8                        0x000055eb8e1ed169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 {\n            if num % 2 == 1 {\n\
    \                if num % 10 == 1 {\n                    count += 1\n        \
    \        }\n            }\n            if num % 2 == 0 {\n                if num\
    \ % 10 == 3 {\n                    count += 1\n                }\n           \
    \ }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15,\
    \ -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpiyl0vnx0/tmpiyl0vnx0.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0ed7eb3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0ed7baab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0ed7baa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0ed7ba97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiyl0vnx0                        0x0000555708ef35d7 <unavailable> + 5591

    5    libc.so.6                          0x00002b0ed809f460 __libc_start_main +
    245

    6    tmpiyl0vnx0                        0x0000555708ef3169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for n in nums {\n        if n > 10 && n % 2 == 1 && n % 2 == 1 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpko0meptr/tmpko0meptr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86f11dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86f0ed3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86f0ed3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86f0ed27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpko0meptr                        0x000055d468ad26b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b86f13c8460 __libc_start_main +
    245

    6    tmpko0meptr                        0x000055d468ad2169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for n in nums {\n        if n > 10 && n % 2 == 1 && n % 3 == 1 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpsjv84kx2/tmpsjv84kx2.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43ed41ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43ed111b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43ed111988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43ed1107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsjv84kx2                        0x0000559df864b5d7 <unavailable> + 5591

    5    libc.so.6                          0x00002b43ed606460 __libc_start_main +
    245

    6    tmpsjv84kx2                        0x0000559df864b169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 2 == 1 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpkm1q15jr/tmpkm1q15jr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83e4622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83e4319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83e4319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83e43187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkm1q15jr                        0x00005627cb3bc6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b83e480e460 __libc_start_main +
    245

    6    tmpkm1q15jr                        0x00005627cb3bc169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for n in nums {\n        if n > 10 && n % 2 == 1 && n % 2 == 1 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpko0meptr/tmpko0meptr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86f11dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86f0ed3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86f0ed3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86f0ed27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpko0meptr                        0x000055d468ad26b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b86f13c8460 __libc_start_main +
    245

    6    tmpko0meptr                        0x000055d468ad2169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 {\n            if num % 2 == 1 {\n\
    \                if num > 10 && num < 100 {\n                    if num % 2 ==\
    \ 1 {\n                        count += 1\n                    }\n           \
    \     }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmp2v1xjys4/tmp2v1xjys4.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6bcb73fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6bcb436b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6bcb436988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6bcb4357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2v1xjys4                        0x00005637bd73f6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b6bcb92b460 __libc_start_main +
    245

    6    tmp2v1xjys4                        0x00005637bd73f169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 {\n            if num % 2 == 1 {\n\
    \                if num > 10 && num < 100 {\n                    if num % 2 ==\
    \ 1 {\n                        count += 1\n                    }\n           \
    \     }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmp2v1xjys4/tmp2v1xjys4.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6bcb73fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6bcb436b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6bcb436988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6bcb4357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2v1xjys4                        0x00005637bd73f6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b6bcb92b460 __libc_start_main +
    245

    6    tmp2v1xjys4                        0x00005637bd73f169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for n in nums {\n        if n > 10 && n % 2 == 1 && n % 2 != 0 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpr0abagls/tmpr0abagls.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b18e9164c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b18e8e5bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b18e8e5b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b18e8e5a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr0abagls                        0x00005589fdd146b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b18e9350460 __libc_start_main +
    245

    6    tmpr0abagls                        0x00005589fdd14169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 2 == 1 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpkm1q15jr/tmpkm1q15jr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83e4622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83e4319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83e4319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83e43187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkm1q15jr                        0x00005627cb3bc6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b83e480e460 __libc_start_main +
    245

    6    tmpkm1q15jr                        0x00005627cb3bc169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 2 == 1 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpkm1q15jr/tmpkm1q15jr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83e4622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83e4319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83e4319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83e43187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkm1q15jr                        0x00005627cb3bc6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b83e480e460 __libc_start_main +
    245

    6    tmpkm1q15jr                        0x00005627cb3bc169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for n in nums {\n        if n > 10 && n % 2 == 1 && n % 2 == 1 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpko0meptr/tmpko0meptr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86f11dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86f0ed3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86f0ed3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86f0ed27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpko0meptr                        0x000055d468ad26b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b86f13c8460 __libc_start_main +
    245

    6    tmpko0meptr                        0x000055d468ad2169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 {\n            if num % 2 == 1 {\n\
    \                if num > 10 && nums.last % 2 == 1 {\n                    count\
    \ += 1\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmprqyfg_ew.swift:13:37: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n                if num > 10 && nums.last\
    \ % 2 == 1 {\n                                    ^\n/tmp/tmprqyfg_ew.swift:13:37:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n                if num > 10 && nums.last % 2 == 1 {\n               \
    \                     ^\n                               (         ?? <#default\
    \ value#>)\n/tmp/tmprqyfg_ew.swift:13:37: note: force-unwrap using '!' to abort\
    \ execution if the optional value contains 'nil'\n                if num > 10\
    \ && nums.last % 2 == 1 {\n                                    ^\n           \
    \                             !\n"
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for n in nums {\n        if n > 10 && n % 2 == 1 && n % 2 == 1 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpko0meptr/tmpko0meptr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86f11dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86f0ed3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86f0ed3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86f0ed27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpko0meptr                        0x000055d468ad26b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b86f13c8460 __libc_start_main +
    245

    6    tmpko0meptr                        0x000055d468ad2169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 {\n            if num % 2 == 1 {\n\
    \                if num > 10 && nums.last % 2 == 1 {\n                    count\
    \ += 1\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmprqyfg_ew.swift:13:37: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n                if num > 10 && nums.last\
    \ % 2 == 1 {\n                                    ^\n/tmp/tmprqyfg_ew.swift:13:37:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n                if num > 10 && nums.last % 2 == 1 {\n               \
    \                     ^\n                               (         ?? <#default\
    \ value#>)\n/tmp/tmprqyfg_ew.swift:13:37: note: force-unwrap using '!' to abort\
    \ execution if the optional value contains 'nil'\n                if num > 10\
    \ && nums.last % 2 == 1 {\n                                    ^\n           \
    \                             !\n"
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 2 == 1 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpkm1q15jr/tmpkm1q15jr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83e4622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83e4319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83e4319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83e43187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkm1q15jr                        0x00005627cb3bc6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b83e480e460 __libc_start_main +
    245

    6    tmpkm1q15jr                        0x00005627cb3bc169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for n in nums {\n        if n > 10 && n % 2 == 1 && n % 3 == 1 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpsjv84kx2/tmpsjv84kx2.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43ed41ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43ed111b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43ed111988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43ed1107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsjv84kx2                        0x0000559df864b5d7 <unavailable> + 5591

    5    libc.so.6                          0x00002b43ed606460 __libc_start_main +
    245

    6    tmpsjv84kx2                        0x0000559df864b169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 {\n            if num % 2 == 1 {\n\
    \                if num % 10 == 1 {\n                    count += 1\n        \
    \        }\n            }\n            if num % 2 == 0 {\n                if num\
    \ % 10 == 3 {\n                    count += 1\n                }\n           \
    \ }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15,\
    \ -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpiyl0vnx0/tmpiyl0vnx0.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0ed7eb3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0ed7baab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0ed7baa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0ed7ba97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiyl0vnx0                        0x0000555708ef35d7 <unavailable> + 5591

    5    libc.so.6                          0x00002b0ed809f460 __libc_start_main +
    245

    6    tmpiyl0vnx0                        0x0000555708ef3169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for n in nums {\n        if n > 10 && n % 2 == 1 && n % 2 == 1 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpko0meptr/tmpko0meptr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86f11dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86f0ed3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86f0ed3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86f0ed27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpko0meptr                        0x000055d468ad26b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b86f13c8460 __libc_start_main +
    245

    6    tmpko0meptr                        0x000055d468ad2169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for n in nums {\n        if n > 10 && n % 2 == 1 && n % 2 == 1 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpko0meptr/tmpko0meptr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86f11dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86f0ed3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86f0ed3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86f0ed27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpko0meptr                        0x000055d468ad26b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b86f13c8460 __libc_start_main +
    245

    6    tmpko0meptr                        0x000055d468ad2169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 2 == 1 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpkm1q15jr/tmpkm1q15jr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83e4622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83e4319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83e4319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83e43187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkm1q15jr                        0x00005627cb3bc6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b83e480e460 __libc_start_main +
    245

    6    tmpkm1q15jr                        0x00005627cb3bc169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 {\n            if num % 2 == 1 {\n\
    \                if num % 10 == 1 {\n                    count += 1\n        \
    \        }\n            }\n            if num % 2 == 0 {\n                if num\
    \ % 10 == 3 {\n                    count += 1\n                }\n           \
    \ }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15,\
    \ -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpiyl0vnx0/tmpiyl0vnx0.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0ed7eb3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0ed7baab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0ed7baa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0ed7ba97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiyl0vnx0                        0x0000555708ef35d7 <unavailable> + 5591

    5    libc.so.6                          0x00002b0ed809f460 __libc_start_main +
    245

    6    tmpiyl0vnx0                        0x0000555708ef3169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 2 == 1 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpkm1q15jr/tmpkm1q15jr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83e4622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83e4319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83e4319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83e43187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkm1q15jr                        0x00005627cb3bc6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b83e480e460 __libc_start_main +
    245

    6    tmpkm1q15jr                        0x00005627cb3bc169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 3 == 1 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpnn24wgxn/tmpnn24wgxn.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed40ca3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed4099ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed4099a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed409997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnn24wgxn                        0x000055a730b015d7 <unavailable> + 5591

    5    libc.so.6                          0x00002aed40e8f460 __libc_start_main +
    245

    6    tmpnn24wgxn                        0x000055a730b01169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 {\n            if num % 2 == 1 {\n\
    \                count += 1\n            }\n            if num % 2 == 0 {\n  \
    \              if num > 10 && num < 100 {\n                    if num % 2 == 1\
    \ {\n                        count += 1\n                    }\n             \
    \   }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpifph6_dm/tmpifph6_dm.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb596d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb593c9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb593c9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb593c87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpifph6_dm                        0x00005579cca426b4 <unavailable> + 5812

    5    libc.so.6                          0x00002aeb598be460 __libc_start_main +
    245

    6    tmpifph6_dm                        0x00005579cca42169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 2 == 1 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpkm1q15jr/tmpkm1q15jr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83e4622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83e4319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83e4319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83e43187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkm1q15jr                        0x00005627cb3bc6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b83e480e460 __libc_start_main +
    245

    6    tmpkm1q15jr                        0x00005627cb3bc169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for n in nums {\n        if n > 10 && n % 2 == 1 && n % 2 == 1 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpko0meptr/tmpko0meptr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86f11dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86f0ed3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86f0ed3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86f0ed27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpko0meptr                        0x000055d468ad26b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b86f13c8460 __libc_start_main +
    245

    6    tmpko0meptr                        0x000055d468ad2169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 {\n            if num % 2 == 0 {\n\
    \                if num % 100 == 0 {\n                    if num % 10 == 0 {\n\
    \                        count += 1\n                    }\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpn9uyb0g2/tmpn9uyb0g2.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b231f513c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b231f20ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b231f20a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b231f2097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn9uyb0g2                        0x0000557dcc2f95d7 <unavailable> + 5591

    5    libc.so.6                          0x00002b231f6ff460 __libc_start_main +
    245

    6    tmpn9uyb0g2                        0x0000557dcc2f9169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 {\n            if num % 2 == 1 {\n\
    \                if num % 10 == 1 {\n                    count += 1\n        \
    \        }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpviizd7kz/tmpviizd7kz.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b518c26ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b518bf65b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b518bf65988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b518bf647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpviizd7kz                        0x000055d273ce35d7 <unavailable> + 5591

    5    libc.so.6                          0x00002b518c45a460 __libc_start_main +
    245

    6    tmpviizd7kz                        0x000055d273ce3169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 {\n            if num % 2 == 1 {\n\
    \                if num > 10 && num < 100 {\n                    if num % 2 ==\
    \ 1 {\n                        count += 1\n                    }\n           \
    \     }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmp2v1xjys4/tmp2v1xjys4.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6bcb73fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6bcb436b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6bcb436988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6bcb4357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2v1xjys4                        0x00005637bd73f6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b6bcb92b460 __libc_start_main +
    245

    6    tmp2v1xjys4                        0x00005637bd73f169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for n in nums {\n        if n > 10 && n % 2 == 1 && n % 2 == 1 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpko0meptr/tmpko0meptr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86f11dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86f0ed3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86f0ed3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86f0ed27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpko0meptr                        0x000055d468ad26b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b86f13c8460 __libc_start_main +
    245

    6    tmpko0meptr                        0x000055d468ad2169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 2 == 1 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpkm1q15jr/tmpkm1q15jr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83e4622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83e4319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83e4319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83e43187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkm1q15jr                        0x00005627cb3bc6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b83e480e460 __libc_start_main +
    245

    6    tmpkm1q15jr                        0x00005627cb3bc169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 2 == 1 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpkm1q15jr/tmpkm1q15jr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83e4622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83e4319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83e4319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83e43187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkm1q15jr                        0x00005627cb3bc6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b83e480e460 __libc_start_main +
    245

    6    tmpkm1q15jr                        0x00005627cb3bc169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 2 == 1 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpkm1q15jr/tmpkm1q15jr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83e4622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83e4319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83e4319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83e43187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkm1q15jr                        0x00005627cb3bc6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b83e480e460 __libc_start_main +
    245

    6    tmpkm1q15jr                        0x00005627cb3bc169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for n in nums {\n        if n > 10 && n % 2 == 1 && n % 2 == 1 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpko0meptr/tmpko0meptr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86f11dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86f0ed3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86f0ed3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86f0ed27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpko0meptr                        0x000055d468ad26b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b86f13c8460 __libc_start_main +
    245

    6    tmpko0meptr                        0x000055d468ad2169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 2 == 1 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpkm1q15jr/tmpkm1q15jr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83e4622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83e4319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83e4319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83e43187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkm1q15jr                        0x00005627cb3bc6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b83e480e460 __libc_start_main +
    245

    6    tmpkm1q15jr                        0x00005627cb3bc169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 2 == 1 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpkm1q15jr/tmpkm1q15jr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83e4622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83e4319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83e4319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83e43187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkm1q15jr                        0x00005627cb3bc6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b83e480e460 __libc_start_main +
    245

    6    tmpkm1q15jr                        0x00005627cb3bc169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 2 == 1 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpkm1q15jr/tmpkm1q15jr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83e4622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83e4319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83e4319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83e43187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkm1q15jr                        0x00005627cb3bc6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b83e480e460 __libc_start_main +
    245

    6    tmpkm1q15jr                        0x00005627cb3bc169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 2 == 0 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpge7_set8/tmpge7_set8.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b385e26ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b385df65b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b385df65988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b385df647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpge7_set8                        0x000055eb8e1ed5d7 <unavailable> + 5591

    5    libc.so.6                          0x00002b385e45a460 __libc_start_main +
    245

    6    tmpge7_set8                        0x000055eb8e1ed169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 {\n            if num % 2 == 1 {\n\
    \                if num % 100 == 0 {\n                    if num % 10 == 0 {\n\
    \                        count += 1\n                    }\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmp790szjc8/tmp790szjc8.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17ab884c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17ab57bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17ab57b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17ab57a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp790szjc8                        0x00005611d32bd5d7 <unavailable> + 5591

    5    libc.so.6                          0x00002b17aba70460 __libc_start_main +
    245

    6    tmp790szjc8                        0x00005611d32bd169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 2 == 1 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpkm1q15jr/tmpkm1q15jr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83e4622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83e4319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83e4319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83e43187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkm1q15jr                        0x00005627cb3bc6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b83e480e460 __libc_start_main +
    245

    6    tmpkm1q15jr                        0x00005627cb3bc169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 2 == 1 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpkm1q15jr/tmpkm1q15jr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83e4622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83e4319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83e4319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83e43187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkm1q15jr                        0x00005627cb3bc6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b83e480e460 __libc_start_main +
    245

    6    tmpkm1q15jr                        0x00005627cb3bc169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 2 == 1 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpkm1q15jr/tmpkm1q15jr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83e4622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83e4319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83e4319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83e43187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkm1q15jr                        0x00005627cb3bc6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b83e480e460 __libc_start_main +
    245

    6    tmpkm1q15jr                        0x00005627cb3bc169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for n in nums {\n        if n > 10 && n % 2 == 1 && n % 2 == 1 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpko0meptr/tmpko0meptr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86f11dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86f0ed3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86f0ed3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86f0ed27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpko0meptr                        0x000055d468ad26b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b86f13c8460 __libc_start_main +
    245

    6    tmpko0meptr                        0x000055d468ad2169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 {\n            if num % 2 == 1 {\n\
    \                if num > 10 && nums.last % 2 == 1 {\n                    count\
    \ += 1\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmprqyfg_ew.swift:13:37: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n                if num > 10 && nums.last\
    \ % 2 == 1 {\n                                    ^\n/tmp/tmprqyfg_ew.swift:13:37:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n                if num > 10 && nums.last % 2 == 1 {\n               \
    \                     ^\n                               (         ?? <#default\
    \ value#>)\n/tmp/tmprqyfg_ew.swift:13:37: note: force-unwrap using '!' to abort\
    \ execution if the optional value contains 'nil'\n                if num > 10\
    \ && nums.last % 2 == 1 {\n                                    ^\n           \
    \                             !\n"
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for n in nums {\n        if n > 10 && n % 2 == 1 && n % 2 == 1 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpko0meptr/tmpko0meptr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86f11dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86f0ed3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86f0ed3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86f0ed27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpko0meptr                        0x000055d468ad26b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b86f13c8460 __libc_start_main +
    245

    6    tmpko0meptr                        0x000055d468ad2169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for n in nums {\n        if n > 10 && n % 2 == 1 && n % 2 == 1 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpko0meptr/tmpko0meptr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86f11dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86f0ed3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86f0ed3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86f0ed27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpko0meptr                        0x000055d468ad26b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b86f13c8460 __libc_start_main +
    245

    6    tmpko0meptr                        0x000055d468ad2169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 2 == 1 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpkm1q15jr/tmpkm1q15jr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83e4622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83e4319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83e4319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83e43187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkm1q15jr                        0x00005627cb3bc6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b83e480e460 __libc_start_main +
    245

    6    tmpkm1q15jr                        0x00005627cb3bc169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 {\n            if num % 2 == 1 {\n\
    \                if num > 10 && nums.last % 2 == 1 {\n                    count\
    \ += 1\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmprqyfg_ew.swift:13:37: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n                if num > 10 && nums.last\
    \ % 2 == 1 {\n                                    ^\n/tmp/tmprqyfg_ew.swift:13:37:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n                if num > 10 && nums.last % 2 == 1 {\n               \
    \                     ^\n                               (         ?? <#default\
    \ value#>)\n/tmp/tmprqyfg_ew.swift:13:37: note: force-unwrap using '!' to abort\
    \ execution if the optional value contains 'nil'\n                if num > 10\
    \ && nums.last % 2 == 1 {\n                                    ^\n           \
    \                             !\n"
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for n in nums {\n        if n > 10 && n % 2 == 1 && n % 2 == 1 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpko0meptr/tmpko0meptr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86f11dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86f0ed3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86f0ed3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86f0ed27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpko0meptr                        0x000055d468ad26b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b86f13c8460 __libc_start_main +
    245

    6    tmpko0meptr                        0x000055d468ad2169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 {\n            if num % 2 == 0 {\n\
    \                if num % 10 == 1 {\n                    count += 1\n        \
    \        }\n                if num % 10 == 3 {\n                    count += 1\n\
    \                }\n                if num % 10 == 5 || num % 10 == 7 || num %\
    \ 10 == 9 {\n                    count += 1\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15,\
    \ -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmp914yc8jr/tmp914yc8jr.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed6666fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed66366b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed66366988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed663657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp914yc8jr                        0x000055ff024095d7 <unavailable> + 5591

    5    libc.so.6                          0x00002aed6685b460 __libc_start_main +
    245

    6    tmp914yc8jr                        0x000055ff02409169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 {\n            if num % 2 == 1 {\n\
    \                count += 1\n            }\n            if num % 2 == 0 {\n  \
    \              if num > 10 && num < 100 {\n                    if num % 2 == 1\
    \ {\n                        count += 1\n                    }\n             \
    \   }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpifph6_dm/tmpifph6_dm.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb596d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb593c9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb593c9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb593c87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpifph6_dm                        0x00005579cca426b4 <unavailable> + 5812

    5    libc.so.6                          0x00002aeb598be460 __libc_start_main +
    245

    6    tmpifph6_dm                        0x00005579cca42169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 {\n            if num % 2 == 1 {\n\
    \                if num > 10 && nums.last % 2 == 1 {\n                    count\
    \ += 1\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmprqyfg_ew.swift:13:37: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n                if num > 10 && nums.last\
    \ % 2 == 1 {\n                                    ^\n/tmp/tmprqyfg_ew.swift:13:37:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n                if num > 10 && nums.last % 2 == 1 {\n               \
    \                     ^\n                               (         ?? <#default\
    \ value#>)\n/tmp/tmprqyfg_ew.swift:13:37: note: force-unwrap using '!' to abort\
    \ execution if the optional value contains 'nil'\n                if num > 10\
    \ && nums.last % 2 == 1 {\n                                    ^\n           \
    \                             !\n"
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 2 == 1 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpkm1q15jr/tmpkm1q15jr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83e4622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83e4319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83e4319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83e43187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkm1q15jr                        0x00005627cb3bc6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b83e480e460 __libc_start_main +
    245

    6    tmpkm1q15jr                        0x00005627cb3bc169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 {\n            if num % 2 == 1 {\n\
    \                if num > 10 && num % 2 == 1 {\n                    count += 1\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpf32mab2x/tmpf32mab2x.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8660a16c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b866070db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b866070d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b866070c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf32mab2x                        0x000056267a3316b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b8660c02460 __libc_start_main +
    245

    6    tmpf32mab2x                        0x000056267a331169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 {\n            if num % 2 == 1 {\n\
    \                if num % 10 == 1 {\n                    count += 1\n        \
    \        }\n            }\n            if num % 2 == 0 {\n                if num\
    \ % 10 == 3 {\n                    count += 1\n                }\n           \
    \ }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15,\
    \ -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpiyl0vnx0/tmpiyl0vnx0.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0ed7eb3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0ed7baab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0ed7baa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0ed7ba97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiyl0vnx0                        0x0000555708ef35d7 <unavailable> + 5591

    5    libc.so.6                          0x00002b0ed809f460 __libc_start_main +
    245

    6    tmpiyl0vnx0                        0x0000555708ef3169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for n in nums {\n        if n > 10 && n % 2 == 1 && n % 2 == 1 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpko0meptr/tmpko0meptr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86f11dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86f0ed3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86f0ed3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86f0ed27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpko0meptr                        0x000055d468ad26b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b86f13c8460 __libc_start_main +
    245

    6    tmpko0meptr                        0x000055d468ad2169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 2 == 1 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpkm1q15jr/tmpkm1q15jr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83e4622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83e4319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83e4319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83e43187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkm1q15jr                        0x00005627cb3bc6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b83e480e460 __libc_start_main +
    245

    6    tmpkm1q15jr                        0x00005627cb3bc169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 2 == 1 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpkm1q15jr/tmpkm1q15jr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83e4622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83e4319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83e4319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83e43187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkm1q15jr                        0x00005627cb3bc6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b83e480e460 __libc_start_main +
    245

    6    tmpkm1q15jr                        0x00005627cb3bc169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 2 == 1 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpkm1q15jr/tmpkm1q15jr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83e4622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83e4319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83e4319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83e43187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkm1q15jr                        0x00005627cb3bc6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b83e480e460 __libc_start_main +
    245

    6    tmpkm1q15jr                        0x00005627cb3bc169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 2 == 1 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpkm1q15jr/tmpkm1q15jr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83e4622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83e4319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83e4319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83e43187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkm1q15jr                        0x00005627cb3bc6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b83e480e460 __libc_start_main +
    245

    6    tmpkm1q15jr                        0x00005627cb3bc169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 3 == 1 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpnn24wgxn/tmpnn24wgxn.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed40ca3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed4099ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed4099a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed409997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnn24wgxn                        0x000055a730b015d7 <unavailable> + 5591

    5    libc.so.6                          0x00002aed40e8f460 __libc_start_main +
    245

    6    tmpnn24wgxn                        0x000055a730b01169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 {\n            if num % 2 == 1 {\n\
    \                count += 1\n            }\n            if num % 2 == 0 {\n  \
    \              if num > 10 && num < 100 {\n                    count += 1\n  \
    \              }\n                if num > 100 && num < 1000 {\n             \
    \       count += 1\n                }\n                if num > 1000 && num <\
    \ 10000 {\n                    count += 1\n                }\n               \
    \ if num > 10000 && num < 100000 {\n                    count += 1\n         \
    \       }\n                if num > 100000 && num < 1000000 {\n              \
    \      count += 1\n                }\n                if num > 1000000 && num\
    \ < 10000000 {\n                    count += 1\n                }\n          \
    \      if num > 10000000 && num < 100000000 {\n                    count += 1\n\
    \                }\n                if num > 100000000 && num < 1000000000 {\n\
    \                    count += 1\n                }\n                if num > 1000000000\
    \ && num < 10000000000 {\n                    count += 1\n                }\n\
    \                if num > 10000000000 && num < 100000000000 {\n              \
    \      count += 1\n                }\n                if num > 100000000000 &&\
    \ num < 1000000000000 {\n                    count += 1\n                }\n \
    \               if num > 1000000000000 && num < 10000000000000 {\n           \
    \         count += 1\n                }\n                if num > 10000000000000\
    \ && num < 100000000000000 {\n                    count += 1\n               \
    \ }\n                if num > 100000000000000 && num < 1000000000000000 {\n  \
    \                  count += 1\n                }\n                if num > 1000000000000000\
    \ && num < 10000000000000000 {\n                    count += 1\n             \
    \   }\n                if num > 10000000000000000 && num < 100000000000000000\
    \ {\n                    count += 1\n                }\n                if num\
    \ > 100000000000000000 && num < 1000000000000000000 {\n                    count\
    \ += 1\n                }\n                if num > 1000000000000000000 && num\
    \ < 10000000000000000000 {\n                    count += 1\n                }\n\
    \                if num > 10000000000000000000 && num < 100000000000000000000\
    \ {\n                    count += 1\n                }\n                if num\
    \ > 100000000000000000000 && num < 1000000000000000000000 {\n                \
    \    count += 1\n                }\n                if num > 1000000000000000000000\
    \ && num < 10000000000000000000000 {\n                    count += 1\n       \
    \         }\n                if num > 10000000000000000000000 && num < 100000000000000000000000\
    \ {\n                    count += 1\n                }\n                if num\
    \ > 100000000000000000000000 && num < 1000000000000000000000000 {\n          \
    \          count += 1\n                }\n                if num > 1000000000000000000000000\
    \ && num < 10000000000000000000000000 {\n                    count += 1\n    \
    \            }\n                if num > 10000000000000000000000000 && num < 100000000000000000000000000\
    \ {\n                    count += 1\n                }\n                if num\
    \ > 100000000000000000000000000 && num < 1000000000000000000000000000 {\n    \
    \                count += 1\n                }\n                if num > 1000000000000000000000000000\
    \ && num < 10000000000000000000000000000 {\n                    count += 1\n \
    \               }\n                if num > 100\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp2jd799_0.swift:97:29: error: expected '{' after 'if' condition\n\
    \                if num > 100\n                            ^\n/tmp/tmp2jd799_0.swift:119:46:\
    \ error: expected '}' at end of brace statement\nassert(specialFilter(nums: []\
    \ as [Int]) == 0)\n                                             ^\n/tmp/tmp2jd799_0.swift:11:21:\
    \ note: to match this opening '{'\n        if num > 10 {\n                   \
    \ ^\n/tmp/tmp2jd799_0.swift:119:46: error: expected '}' at end of brace statement\n\
    assert(specialFilter(nums: [] as [Int]) == 0)\n                              \
    \               ^\n/tmp/tmp2jd799_0.swift:10:21: note: to match this opening '{'\n\
    \    for num in nums {\n                    ^\n/tmp/tmp2jd799_0.swift:119:46:\
    \ error: expected '}' at end of brace statement\nassert(specialFilter(nums: []\
    \ as [Int]) == 0)\n                                             ^\n/tmp/tmp2jd799_0.swift:8:40:\
    \ note: to match this opening '{'\nfunc specialFilter(nums: [Int]) -> Int {\n\
    \                                       ^\n/tmp/tmp2jd799_0.swift:101:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 2 == 1 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpkm1q15jr/tmpkm1q15jr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83e4622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83e4319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83e4319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83e43187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkm1q15jr                        0x00005627cb3bc6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b83e480e460 __libc_start_main +
    245

    6    tmpkm1q15jr                        0x00005627cb3bc169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 2 == 1 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpkm1q15jr/tmpkm1q15jr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83e4622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83e4319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83e4319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83e43187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkm1q15jr                        0x00005627cb3bc6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b83e480e460 __libc_start_main +
    245

    6    tmpkm1q15jr                        0x00005627cb3bc169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for n in nums {\n        if n > 10 && n % 2 == 1 && n % 3 == 1 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpsjv84kx2/tmpsjv84kx2.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43ed41ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43ed111b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43ed111988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43ed1107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsjv84kx2                        0x0000559df864b5d7 <unavailable> + 5591

    5    libc.so.6                          0x00002b43ed606460 __libc_start_main +
    245

    6    tmpsjv84kx2                        0x0000559df864b169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 2 == 1 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpkm1q15jr/tmpkm1q15jr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83e4622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83e4319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83e4319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83e43187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkm1q15jr                        0x00005627cb3bc6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b83e480e460 __libc_start_main +
    245

    6    tmpkm1q15jr                        0x00005627cb3bc169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 {\n            if num % 2 == 1 {\n\
    \                if num % 3 == 1 {\n                    if num % 5 == 1 {\n  \
    \                      count += 1\n                    }\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpsxrdzm1t/tmpsxrdzm1t.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ba7c0dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ba7904b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ba7904988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ba79037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsxrdzm1t                        0x00005601c61a85d7 <unavailable> + 5591

    5    libc.so.6                          0x00002b4ba7df9460 __libc_start_main +
    245

    6    tmpsxrdzm1t                        0x00005601c61a8169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 2 == 1 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpkm1q15jr/tmpkm1q15jr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83e4622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83e4319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83e4319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83e43187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkm1q15jr                        0x00005627cb3bc6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b83e480e460 __libc_start_main +
    245

    6    tmpkm1q15jr                        0x00005627cb3bc169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 {\n            if num % 2 == 1 {\n\
    \                if num % 10 == 1 {\n                    count += 1\n        \
    \        }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpviizd7kz/tmpviizd7kz.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b518c26ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b518bf65b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b518bf65988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b518bf647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpviizd7kz                        0x000055d273ce35d7 <unavailable> + 5591

    5    libc.so.6                          0x00002b518c45a460 __libc_start_main +
    245

    6    tmpviizd7kz                        0x000055d273ce3169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 {\n            if num % 2 == 1 {\n\
    \                if num % 2 == 1 {\n                    count += 1\n         \
    \       }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpbboc0gue/tmpbboc0gue.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2d1409fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2d13d96b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2d13d96988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2d13d957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbboc0gue                        0x0000561e89f526b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b2d1428b460 __libc_start_main +
    245

    6    tmpbboc0gue                        0x0000561e89f52169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 2 == 0 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpge7_set8/tmpge7_set8.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b385e26ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b385df65b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b385df65988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b385df647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpge7_set8                        0x000055eb8e1ed5d7 <unavailable> + 5591

    5    libc.so.6                          0x00002b385e45a460 __libc_start_main +
    245

    6    tmpge7_set8                        0x000055eb8e1ed169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 2 == 1 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpkm1q15jr/tmpkm1q15jr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83e4622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83e4319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83e4319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83e43187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkm1q15jr                        0x00005627cb3bc6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b83e480e460 __libc_start_main +
    245

    6    tmpkm1q15jr                        0x00005627cb3bc169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 {\n            if num % 2 == 1 {\n\
    \                if num > 10 && num < 100 {\n                    if num % 2 ==\
    \ 1 {\n                        count += 1\n                    }\n           \
    \     }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmp2v1xjys4/tmp2v1xjys4.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6bcb73fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6bcb436b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6bcb436988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6bcb4357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2v1xjys4                        0x00005637bd73f6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b6bcb92b460 __libc_start_main +
    245

    6    tmp2v1xjys4                        0x00005637bd73f169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 {\n            if num % 2 == 1 {\n\
    \                if num > 10 && nums.last % 2 == 1 {\n                    count\
    \ += 1\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmprqyfg_ew.swift:13:37: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n                if num > 10 && nums.last\
    \ % 2 == 1 {\n                                    ^\n/tmp/tmprqyfg_ew.swift:13:37:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n                if num > 10 && nums.last % 2 == 1 {\n               \
    \                     ^\n                               (         ?? <#default\
    \ value#>)\n/tmp/tmprqyfg_ew.swift:13:37: note: force-unwrap using '!' to abort\
    \ execution if the optional value contains 'nil'\n                if num > 10\
    \ && nums.last % 2 == 1 {\n                                    ^\n           \
    \                             !\n"
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for n in nums {\n        if n > 10 && n % 2 == 1 && n % 3 == 1 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpsjv84kx2/tmpsjv84kx2.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43ed41ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43ed111b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43ed111988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43ed1107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsjv84kx2                        0x0000559df864b5d7 <unavailable> + 5591

    5    libc.so.6                          0x00002b43ed606460 __libc_start_main +
    245

    6    tmpsjv84kx2                        0x0000559df864b169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 {\n            if num % 2 == 1 {\n\
    \                if num % 3 == 1 {\n                    if num % 5 == 1 {\n  \
    \                      count += 1\n                    }\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpsxrdzm1t/tmpsxrdzm1t.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ba7c0dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ba7904b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ba7904988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ba79037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsxrdzm1t                        0x00005601c61a85d7 <unavailable> + 5591

    5    libc.so.6                          0x00002b4ba7df9460 __libc_start_main +
    245

    6    tmpsxrdzm1t                        0x00005601c61a8169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 2 == 1 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpkm1q15jr/tmpkm1q15jr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83e4622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83e4319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83e4319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83e43187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkm1q15jr                        0x00005627cb3bc6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b83e480e460 __libc_start_main +
    245

    6    tmpkm1q15jr                        0x00005627cb3bc169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for n in nums {\n        if n > 10 && n % 2 == 1 && n % 2 == 1 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpko0meptr/tmpko0meptr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86f11dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86f0ed3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86f0ed3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86f0ed27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpko0meptr                        0x000055d468ad26b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b86f13c8460 __libc_start_main +
    245

    6    tmpko0meptr                        0x000055d468ad2169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 2 == 1 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpkm1q15jr/tmpkm1q15jr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83e4622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83e4319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83e4319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83e43187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkm1q15jr                        0x00005627cb3bc6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b83e480e460 __libc_start_main +
    245

    6    tmpkm1q15jr                        0x00005627cb3bc169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 {\n            if num % 2 == 1 {\n\
    \                count += 1\n            }\n            if num % 2 == 0 {\n  \
    \              if num > 10 && num < 100 {\n                    if num % 2 == 1\
    \ {\n                        count += 1\n                    }\n             \
    \   }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpifph6_dm/tmpifph6_dm.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb596d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb593c9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb593c9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb593c87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpifph6_dm                        0x00005579cca426b4 <unavailable> + 5812

    5    libc.so.6                          0x00002aeb598be460 __libc_start_main +
    245

    6    tmpifph6_dm                        0x00005579cca42169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for n in nums {\n        if n > 10 && n % 2 == 1 && n % 2 == 1 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpko0meptr/tmpko0meptr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86f11dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86f0ed3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86f0ed3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86f0ed27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpko0meptr                        0x000055d468ad26b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b86f13c8460 __libc_start_main +
    245

    6    tmpko0meptr                        0x000055d468ad2169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 {\n            if num % 2 == 1 {\n\
    \                if num % 10 == 1 {\n                    count += 1\n        \
    \        }\n            }\n            if num % 2 == 0 {\n                if num\
    \ % 10 == 3 {\n                    count += 1\n                }\n           \
    \ }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15,\
    \ -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpiyl0vnx0/tmpiyl0vnx0.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0ed7eb3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0ed7baab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0ed7baa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0ed7ba97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiyl0vnx0                        0x0000555708ef35d7 <unavailable> + 5591

    5    libc.so.6                          0x00002b0ed809f460 __libc_start_main +
    245

    6    tmpiyl0vnx0                        0x0000555708ef3169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 2 == 0 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpge7_set8/tmpge7_set8.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b385e26ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b385df65b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b385df65988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b385df647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpge7_set8                        0x000055eb8e1ed5d7 <unavailable> + 5591

    5    libc.so.6                          0x00002b385e45a460 __libc_start_main +
    245

    6    tmpge7_set8                        0x000055eb8e1ed169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 2 == 1 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpkm1q15jr/tmpkm1q15jr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83e4622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83e4319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83e4319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83e43187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkm1q15jr                        0x00005627cb3bc6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b83e480e460 __libc_start_main +
    245

    6    tmpkm1q15jr                        0x00005627cb3bc169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 {\n            if num % 2 == 1 {\n\
    \                if num % 10 == 1 {\n                    count += 1\n        \
    \        }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpviizd7kz/tmpviizd7kz.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b518c26ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b518bf65b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b518bf65988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b518bf647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpviizd7kz                        0x000055d273ce35d7 <unavailable> + 5591

    5    libc.so.6                          0x00002b518c45a460 __libc_start_main +
    245

    6    tmpviizd7kz                        0x000055d273ce3169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: 1
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 {\n            if num % 2 == 1 {\n\
    \                if num > 10 && nums.last % 2 == 1 {\n                    count\
    \ += 1\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmprqyfg_ew.swift:13:37: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n                if num > 10 && nums.last\
    \ % 2 == 1 {\n                                    ^\n/tmp/tmprqyfg_ew.swift:13:37:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n                if num > 10 && nums.last % 2 == 1 {\n               \
    \                     ^\n                               (         ?? <#default\
    \ value#>)\n/tmp/tmprqyfg_ew.swift:13:37: note: force-unwrap using '!' to abort\
    \ execution if the optional value contains 'nil'\n                if num > 10\
    \ && nums.last % 2 == 1 {\n                                    ^\n           \
    \                             !\n"
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for n in nums {\n        if n > 10 && n % 2 == 1 && n % 2 == 1 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpko0meptr/tmpko0meptr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86f11dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86f0ed3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86f0ed3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86f0ed27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpko0meptr                        0x000055d468ad26b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b86f13c8460 __libc_start_main +
    245

    6    tmpko0meptr                        0x000055d468ad2169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for n in nums {\n        if n > 10 && n % 2 == 1 && n % 3 == 1 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpsjv84kx2/tmpsjv84kx2.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43ed41ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43ed111b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43ed111988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43ed1107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsjv84kx2                        0x0000559df864b5d7 <unavailable> + 5591

    5    libc.so.6                          0x00002b43ed606460 __libc_start_main +
    245

    6    tmpsjv84kx2                        0x0000559df864b169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 2 == 1 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpkm1q15jr/tmpkm1q15jr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83e4622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83e4319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83e4319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83e43187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkm1q15jr                        0x00005627cb3bc6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b83e480e460 __libc_start_main +
    245

    6    tmpkm1q15jr                        0x00005627cb3bc169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 2 == 0 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpge7_set8/tmpge7_set8.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b385e26ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b385df65b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b385df65988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b385df647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpge7_set8                        0x000055eb8e1ed5d7 <unavailable> + 5591

    5    libc.so.6                          0x00002b385e45a460 __libc_start_main +
    245

    6    tmpge7_set8                        0x000055eb8e1ed169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for n in nums {\n        if n > 10 && n % 2 == 1 && n % 2 == 1 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpko0meptr/tmpko0meptr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86f11dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86f0ed3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86f0ed3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86f0ed27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpko0meptr                        0x000055d468ad26b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b86f13c8460 __libc_start_main +
    245

    6    tmpko0meptr                        0x000055d468ad2169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for n in nums {\n        if n > 10 && n % 2 == 1 && n % 2 == 1 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpko0meptr/tmpko0meptr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86f11dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86f0ed3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86f0ed3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86f0ed27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpko0meptr                        0x000055d468ad26b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b86f13c8460 __libc_start_main +
    245

    6    tmpko0meptr                        0x000055d468ad2169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 {\n            if num % 2 == 1 {\n\
    \                if num % 10 == 1 {\n                    count += 1\n        \
    \        }\n            }\n            if num % 2 == 0 {\n                if num\
    \ % 10 == 3 {\n                    count += 1\n                }\n           \
    \ }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums: [15,\
    \ -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpiyl0vnx0/tmpiyl0vnx0.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0ed7eb3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0ed7baab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0ed7baa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0ed7ba97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiyl0vnx0                        0x0000555708ef35d7 <unavailable> + 5591

    5    libc.so.6                          0x00002b0ed809f460 __libc_start_main +
    245

    6    tmpiyl0vnx0                        0x0000555708ef3169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 2 == 1 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpkm1q15jr/tmpkm1q15jr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83e4622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83e4319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83e4319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83e43187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkm1q15jr                        0x00005627cb3bc6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b83e480e460 __libc_start_main +
    245

    6    tmpkm1q15jr                        0x00005627cb3bc169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for n in nums {\n        if n > 10 && n % 2 == 1 && n % 2 == 1 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpko0meptr/tmpko0meptr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86f11dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86f0ed3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86f0ed3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86f0ed27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpko0meptr                        0x000055d468ad26b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b86f13c8460 __libc_start_main +
    245

    6    tmpko0meptr                        0x000055d468ad2169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 2 == 1 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpkm1q15jr/tmpkm1q15jr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83e4622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83e4319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83e4319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83e43187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkm1q15jr                        0x00005627cb3bc6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b83e480e460 __libc_start_main +
    245

    6    tmpkm1q15jr                        0x00005627cb3bc169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 3 == 1 &&\
    \ num % 5 == 1 {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpt6s34eny/tmpt6s34eny.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b50c825fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b50c7f56b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b50c7f56988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b50c7f557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt6s34eny                        0x000055f36bdc45d7 <unavailable> + 5591

    5    libc.so.6                          0x00002b50c844b460 __libc_start_main +
    245

    6    tmpt6s34eny                        0x000055f36bdc4169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for n in nums {\n        if n > 10 && n % 2 == 1 && n % 2 == 1 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpko0meptr/tmpko0meptr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86f11dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86f0ed3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86f0ed3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86f0ed27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpko0meptr                        0x000055d468ad26b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b86f13c8460 __libc_start_main +
    245

    6    tmpko0meptr                        0x000055d468ad2169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for num in nums {\n        if num > 10 && num % 2 == 1 && num % 2 == 1 {\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpkm1q15jr/tmpkm1q15jr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83e4622c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83e4319b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83e4319988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83e43187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkm1q15jr                        0x00005627cb3bc6b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b83e480e460 __libc_start_main +
    245

    6    tmpkm1q15jr                        0x00005627cb3bc169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for n in nums {\n        if n > 10 && n % 2 == 1 && n % 3 == 1 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpsjv84kx2/tmpsjv84kx2.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43ed41ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43ed111b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43ed111988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43ed1107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsjv84kx2                        0x0000559df864b5d7 <unavailable> + 5591

    5    libc.so.6                          0x00002b43ed606460 __libc_start_main +
    245

    6    tmpsjv84kx2                        0x0000559df864b169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
- exit_code: -4
  program: "\n/// Write a function that takes an array of numbers as input and returns\
    \ \n/// the number of elements in the array that are greater than 10 and both\
    \ \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
    /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
    \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n\
    \    for n in nums {\n        if n > 10 && n % 2 == 1 && n % 2 == 1 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\nassert(specialFilter(nums:\
    \ [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums: [33, -2, -3, 45, 21, 109])\
    \ == 2)\nassert(specialFilter(nums: [43, -12, 93, 125, 121, 109]) == 4)\nassert(specialFilter(nums:\
    \ [71, -2, -33, 75, 21, 19]) == 3)\nassert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums:\
    \ [] as [Int]) == 0)"
  status: Exception
  stderr: 'tmpko0meptr/tmpko0meptr.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86f11dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86f0ed3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86f0ed3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86f0ed27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpko0meptr                        0x000055d468ad26b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b86f13c8460 __libc_start_main +
    245

    6    tmpko0meptr                        0x000055d468ad2169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659821074
