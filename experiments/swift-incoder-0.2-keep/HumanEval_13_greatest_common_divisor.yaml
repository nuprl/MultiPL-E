name: HumanEval_13_greatest_common_divisor
language: swift
prompt: "\n/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3,\
  \ 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfunc greatest_common_divisor(a:\
  \ Int, b: Int) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\n\
  assert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
  \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
completions: ['    return a / gcd(a, b)', '    return a / gcd(a, b)', '    return
    a / gcd(a, b)', '    return a / gcd(a, b)', '    return a / gcd(a, b)', "    if\
    \ a < b {\n        guard a >= 0 else { return b }\n        guard b >= 0 else {\
    \ return a }\n        return greatest_common_divisor(b, a % b)\n    }\n    return\
    \ a", '    return a / gcd(a, b)', '    return a / gcd(a, b)', '    return a /
    gcd(a, b)', '    return a / gcd(a, b)', "    var gcd = a\n    while gcd != 0 {\n\
    \        if b == 0 {\n            return gcd\n        }\n        gcd = (a % gcd)\
    \ / b\n    }\n    return gcd", "    if a < b {\n        guard a >= 0 else { return\
    \ b }\n        guard b >= 0 else { return a }\n        return greatest_common_divisor(b,\
    \ a % b)\n    }\n    guard b >= 0 else { return a }\n    guard a >= 0 else { return\
    \ b }\n    return greatest_common_divisor(a, b % a)", '    return a / gcd(a, b)',
  "    if a < b {\n        guard a > 0 else { return b }\n        return greatest_common_divisor(b,\
    \ a % b)\n    }\n    guard b > 0 else { return a }\n    return greatest_common_divisor(a,\
    \ b % a)", '    return a / gcd(a, b)', "    if a < b {\n        guard a > 0 else\
    \ { return b }\n        return greatest_common_divisor(b, a % b)\n    }\n    return\
    \ a", '    return a / gcd(a, b)', '    return a / gcd(a, b)', "    if a < b {\n\
    \        guard a >= 0 else { return b }\n        guard b >= 0 else { return a\
    \ }\n        return greatest_common_divisor(b, a % b)\n    }\n    guard b >= 0\
    \ else { return a }\n    guard a >= 0 else { return b }\n    return greatest_common_divisor(a,\
    \ b % a)", '    return a / gcd(a, b)']
stop_tokens:
- "\n}"
