name: HumanEval_13_greatest_common_divisor
language: swift
prompt: "\n/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3,\
  \ 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfunc greatest_common_divisor(a:\
  \ Int, b: Int) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\n\
  assert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
  \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
completions: ['    return a / gcd(a, b)', '    return a / gcd(a, b)', '    return
    a / gcd(a, b)', '    return a / gcd(a, b)', '    return a / gcd(a, b)', "    if\
    \ a < b {\n        guard a >= 0 else { return b }\n        guard b >= 0 else {\
    \ return a }\n        return greatest_common_divisor(b, a % b)\n    }\n    return\
    \ a", '    return a / gcd(a, b)', '    return a / gcd(a, b)', '    return a /
    gcd(a, b)', '    return a / gcd(a, b)', "    var gcd = a\n    while gcd != 0 {\n\
    \        if b == 0 {\n            return gcd\n        }\n        gcd = (a % gcd)\
    \ / b\n    }\n    return gcd", "    if a < b {\n        guard a >= 0 else { return\
    \ b }\n        guard b >= 0 else { return a }\n        return greatest_common_divisor(b,\
    \ a % b)\n    }\n    guard b >= 0 else { return a }\n    guard a >= 0 else { return\
    \ b }\n    return greatest_common_divisor(a, b % a)", '    return a / gcd(a, b)',
  "    if a < b {\n        guard a > 0 else { return b }\n        return greatest_common_divisor(b,\
    \ a % b)\n    }\n    guard b > 0 else { return a }\n    return greatest_common_divisor(a,\
    \ b % a)", '    return a / gcd(a, b)', "    if a < b {\n        guard a > 0 else\
    \ { return b }\n        return greatest_common_divisor(b, a % b)\n    }\n    return\
    \ a", '    return a / gcd(a, b)', '    return a / gcd(a, b)', "    if a < b {\n\
    \        guard a >= 0 else { return b }\n        guard b >= 0 else { return a\
    \ }\n        return greatest_common_divisor(b, a % b)\n    }\n    guard b >= 0\
    \ else { return a }\n    guard a >= 0 else { return b }\n    return greatest_common_divisor(a,\
    \ b % a)", '    return a / gcd(a, b)', '    return a / gcd(a, b)', '    return
    gcd(a, b) * b', "    if a < b {\n        guard a > 0 else { return b }\n     \
    \   return greatest_common_divisor(b, a % b)\n    }\n    guard b > 0 else { return\
    \ a }\n    return greatest_common_divisor(b, a % b)", "    if a < b {\n      \
    \  return greatest_common_divisor(b, a)\n    }\n    if a == 0 {\n        return\
    \ b\n    }\n    if b == 0 {\n        return a\n    }\n    if a > b {\n       \
    \ return greatest_common_divisor(b, a % b)\n    }\n    var gcd = a\n    for i\
    \ = 2; i <= b; i++ {\n        if a % i == 0 {\n            gcd = i\n        }\n\
    \    }\n    return gcd", "    if a < b {\n        guard a > 0 else { return b\
    \ }\n        guard b > 0 else { return a }\n        return greatest_common_divisor(b,\
    \ a % b)\n    }\n    guard b > 0 else { return a }\n    guard a > 0 else { return\
    \ b }\n    return greatest_common_divisor(a, b % a)", "    if a < b {\n      \
    \  guard a >= 0 else { return b }\n        guard b >= 0 else { return a }\n  \
    \      return greatest_common_divisor(b, a % b)\n    }\n    guard b >= 0 else\
    \ { return a }\n    guard a >= 0 else { return b }\n    return greatest_common_divisor(b,\
    \ a % b)", '    return a / gcd(a, b)', '    return a / gcd(a, b)', '    return
    a / gcd(a, b)', '    return gcd(a, b) * b', '    return a / gcd(a, b)', '    return
    a / gcd(a, b)', '    return a / gcd(a, b)', '    return a / gcd(a, b)', "    if\
    \ a < b {\n        guard a >= 0 else { return b }\n        guard b >= 0 else {\
    \ return a }\n        return greatest_common_divisor(b, a % b)\n    }\n    guard\
    \ b >= 0 else { return a }\n    guard a >= 0 else { return b }\n    return greatest_common_divisor(a,\
    \ b % a)", "    if a < b {\n        (a, b) = (b, a)\n    }\n    var gcd = 1\n\
    \    for i in  0 ..< b {\n        if a % gcd == 0 && b % gcd == 0 {\n        \
    \    gcd = gcd / 2\n        } else {\n            gcd = gcd / 2\n        }\n \
    \   }\n    return gcd", "    if a < b {\n        guard a > 0 else { return b }\n\
    \        guard b > 0 else { return a }\n        return greatest_common_divisor(b,\
    \ a % b)\n    }\n    guard b > 0 else { return a }\n    guard a > 0 else { return\
    \ b }\n    return greatest_common_divisor(b, a % b)", '    return a / gcd(a, b)',
  '    return a / gcd(a, b)', '    return a / gcd(a, b)', '    return a / gcd(a, b)',
  '    return gcd(a, b) * b', '    return a / gcd(a, b)', "    if a < b {\n      \
    \  guard a > 0 else { return b }\n        return greatest_common_divisor(b, a\
    \ % b)\n    }\n    guard b > 0 else { return a }\n    return greatest_common_divisor(a,\
    \ b % a)", "    var gcd = a\n    while gcd != 0 {\n        if b == 0 {\n     \
    \       return gcd\n        }\n        gcd = b\n        b %= gcd\n    }\n    return\
    \ gcd", '    return a / gcd(a, b)', '    return a / gcd(a, b)', '    return a
    / gcd(a, b)', "    if a < b {\n        guard a > 0 else { return b }\n       \
    \ return greatest_common_divisor(b, a % b)\n    }\n    guard b > 0 else { return\
    \ a }\n    return greatest_common_divisor(a, b % a)", '    return a / gcd(a, b)',
  '    return a / gcd(a, b)', '    return a / gcd(a, b)', '    return a / gcd(a, b)',
  "    if a < b {\n        guard a > 0 else { return b }\n        guard b > 0 else\
    \ { return a }\n        return greatest_common_divisor(b, a % b)\n    }\n    guard\
    \ b > 0 else { return a }\n    guard a > 0 else { return b }\n    return greatest_common_divisor(b,\
    \ a % b)", "    if a < b {\n        guard a > 0 else { return b }\n        return\
    \ greatest_common_divisor(b, a % b)\n    }\n    guard b > 0 else { return a }\n\
    \    return greatest_common_divisor(a, (b % a) + a)", '    return a / gcd(a, b)',
  '    return a / gcd(a, b)', '    return a / gcd(a, b)', "    if a < b {\n      \
    \  guard a > 0 else { return b }\n        return greatest_common_divisor(b, a\
    \ % b)\n    }\n    guard b > 0 else { return a }\n    return greatest_common_divisor(a,\
    \ b % a)", '    return a / gcd(a, b)', '    return a / gcd(a, b)', '    return
    a / gcd(a, b)', '    return a / gcd(a, b)', '    return a / gcd(a, b)', '    return
    a / gcd(a, b)', "    if a < b {\n        guard a > 0 else { return b }\n     \
    \   guard b > 0 else { return a }\n        return greatest_common_divisor(b, a\
    \ % b)\n    }\n    return a", "    if a < b {\n        guard a > 0 else { return\
    \ 0 }\n        return greatest_common_divisor(b, a % b)\n    }\n    guard b >\
    \ 0 else { return 0 }\n    return greatest_common_divisor(a, (b % a) + a)", '    return
    a / gcd(a, b)', "    if a < b {\n        guard a > 0 else { return b }\n     \
    \   return greatest_common_divisor(b, a % b)\n    }\n    guard b > 0 else { return\
    \ a }\n    return greatest_common_divisor(b, a % b)", '    return a / gcd(a, b)',
  "    var gcd = a\n    while gcd != 0 {\n        if b == 0 {\n            return\
    \ gcd\n        }\n        gcd = a % b\n        a = b\n        b = gcd\n    }\n\
    \    return b", '    return a / gcd(a, b)', '    return a / gcd(a, b)', "    var\
    \ gcd = a\n    while gcd != 0 {\n        if b == 0 {\n            return gcd\n\
    \        }\n        gcd = b\n        b /= a\n    }\n    return b", '    return
    a / gcd(a, b)', '    return a / gcd(a, b)', "    if a < b {\n        guard a >=\
    \ 0 else { return b }\n        guard b >= 0 else { return a }\n        return\
    \ greatest_common_divisor(b, a % b)\n    }\n    return b", "    if a < b {\n \
    \       guard a > 0 else { return b }\n        return greatest_common_divisor(b,\
    \ a % b)\n    }\n    guard b > 0 else { return a }\n    return greatest_common_divisor(a,\
    \ (b % a) + a)", '    return a / gcd(a, b)', "    if a < b {\n        guard a\
    \ > 0 else { return b }\n        guard b > 0 else { return a }\n        return\
    \ greatest_common_divisor(b, a % b)\n    }\n    guard b > 0 else { return a }\n\
    \    guard a > 0 else { return b }\n    return greatest_common_divisor(b, a %\
    \ b)", '    return a / gcd(a, b)', '    return a / gcd(a, b)', '    return a /
    gcd(a, b)', '    return a / gcd(a, b)', "    if a < b {\n        guard a > 0 else\
    \ { return 0 }\n        return greatest_common_divisor(b, a % b)\n    }\n    guard\
    \ b > 0 else { return 0 }\n    return greatest_common_divisor(a, (b % a) + a)",
  '    return a / gcd(a, b)', '    return a / gcd(a, b)', '    return a / gcd(a, b)',
  '    return a / gcd(a, b)', '    return a / gcd(a, b)', '    return a / gcd(a, b)',
  '    return a / gcd(a, b)', "    if a < b {\n        guard a > 0 else { return b\
    \ }\n        guard b > 0 else { return a }\n        return greatest_common_divisor(b,\
    \ a % b)\n    }\n    guard b > 0 else { return a }\n    guard a > 0 else { return\
    \ b }\n    return greatest_common_divisor(a, b % a)", "    if a < b {\n      \
    \  guard a >= 0 else { return b }\n        guard b >= 0 else { return a }\n  \
    \      return greatest_common_divisor(b, a % b)\n    }\n    guard b >= 0 else\
    \ { return a }\n    guard a >= 0 else { return b }\n    return greatest_common_divisor(a,\
    \ b % a)", "    if a < b {\n        guard a > 0 else { return b }\n        guard\
    \ b > 0 else { return a }\n        return greatest_common_divisor(b, a % b)\n\
    \    }\n    guard b > 0 else { return a }\n    guard a > 0 else { return b }\n\
    \    return greatest_common_divisor(b, a % b)", '    return a / gcd(a, b)', " \
    \   if a < b {\n        guard a >= 0 else { return b }\n        guard b >= 0 else\
    \ { return a }\n        return greatest_common_divisor(b, a % b)\n    }\n    guard\
    \ b >= 0 else { return a }\n    guard a >= 0 else { return b }\n    return greatest_common_divisor(a,\
    \ b % a)", '    return a / gcd(a, b)', '    return a / gcd(a, b)', "    if a <\
    \ b {\n        return greatest_common_divisor(b, a)\n    }\n    if a == 0 {\n\
    \        return b\n    }\n    if b == 0 {\n        return a\n    }\n    if a >\
    \ b {\n        return greatest_common_divisor(b, a % b)\n    }\n    var gcd =\
    \ a\n    var remain = b\n    while remain != 0 {\n        remain = remain%gcd\n\
    \        gcd = gcd%b\n    }\n    return gcd", '    return a / gcd(a, b)', '    return
    a / gcd(a, b)', '    return a / gcd(a, b)', '    return a / gcd(a, b)', '    return
    a / gcd(a, b)', "    if a < b {\n        guard a > 0 else { return b }\n     \
    \   return greatest_common_divisor(b, a % b)\n    }\n    guard b > 0 else { return\
    \ a }\n    return greatest_common_divisor(a, b % a)", '    return a / gcd(a, b)',
  "    if a < b {\n        guard a > 0 else { return b }\n        return greatest_common_divisor(b,\
    \ a % b)\n    }\n    guard b > 0 else { return a }\n    return greatest_common_divisor(b,\
    \ a % b)", '    return a / gcd(a, b)', '    return a / gcd(a, b)', '    return
    a / gcd(a, b)', '    return a / gcd(a, b)', "    if a < b {\n        guard a >\
    \ 0 else { return 0 }\n        return greatest_common_divisor(b, a % b)\n    }\n\
    \    guard b > 0 else { return 0 }\n    return greatest_common_divisor(a, (b %\
    \ a) + a)", "    if a < b {\n        guard a > 0 else { return 0 }\n        return\
    \ greatest_common_divisor(b, a % b)\n    }\n    guard b > 0 else { return 0 }\n\
    \    return greatest_common_divisor(a, (b % a) + a)", '    return a / gcd(a, b)',
  '    return a / gcd(a, b)', '    return a / gcd(a, b)', '    return a / gcd(a, b)',
  '    return a / gcd(a, b)', '    return a / gcd(a, b)', '    return a / gcd(a, b)',
  "    if a < b {\n        guard a >= 0 else { return b }\n        guard b >= 0 else\
    \ { return a }\n        return greatest_common_divisor(b, a % b)\n    }\n    guard\
    \ b >= 0 else { return a }\n    guard a >= 0 else { return b }\n    return greatest_common_divisor(a,\
    \ b % a)", '    return a / gcd(a, b)', "    if a < b {\n        guard a > 0 else\
    \ { return b }\n        return greatest_common_divisor(b, a % b)\n    }\n    guard\
    \ b > 0 else { return a }\n    return greatest_common_divisor(a, b % a)", '    return
    a / gcd(a, b)', '    return a / gcd(a, b)', "    if a < b {\n        guard a >\
    \ 0 else { return b }\n        return greatest_common_divisor(b, a)\n    }\n \
    \   guard b > 0 else { return a }\n    return greatest_common_divisor(b, a%b)",
  '    return a / gcd(a, b)', '    return a / gcd(a, b)', '    return a / gcd(a, b)',
  '    return a / gcd(a, b)', '    return a / gcd(a, b)', "    if a < b {\n      \
    \  guard a > 0 else { return b }\n        guard b > 0 else { return a }\n    \
    \    return greatest_common_divisor(b, a % b)\n    }\n    guard b > 0 else { return\
    \ a }\n    guard a > 0 else { return b }\n    return greatest_common_divisor(b,\
    \ a % b)", "    if a < b {\n        guard a > 0 else { return b }\n        return\
    \ greatest_common_divisor(b, a % b)\n    }\n    guard b > 0 else { return a }\n\
    \    return greatest_common_divisor(a, (b % a))", "    if a < b {\n        guard\
    \ a >= 0 else { return b }\n        guard b >= 0 else { return a }\n        return\
    \ greatest_common_divisor(b, a%b)\n    }\n    guard b >= 0 else { return a }\n\
    \    guard a >= 0 else { return b }\n    return greatest_common_divisor(a%b, b)",
  "    if a < b {\n        (a, b) = (b, a)\n    }\n    var gcd = 1\n    for x in 0\
    \ ..< b {\n        if a % x == 0 {\n            gcd = x\n        }\n    }\n  \
    \  return gcd", '    return a / gcd(a, b)', '    return a / gcd(a, b)', '    return
    a / gcd(a, b)', '    return a / gcd(a, b)', '    return a / gcd(a, b)', "    if\
    \ a < b {\n        guard a > 0 else { return 0 }\n        return greatest_common_divisor(b,\
    \ a % b)\n    }\n    guard b > 0 else { return 0 }\n    return greatest_common_divisor(a,\
    \ (b * b) % a)", "    if a < b {\n        guard a > 0 else { return b }\n    \
    \    return greatest_common_divisor(b, a)\n    }\n    guard b > 0 else { return\
    \ a }\n    return greatest_common_divisor(b, a%b)", "    if a < b {\n        guard\
    \ a > 0 else { return b }\n        return greatest_common_divisor(b, a % b)\n\
    \    }\n    guard b > 0 else { return a }\n    return greatest_common_divisor(a,\
    \ (b % a) + a)", "    if a < b {\n        guard a > 0 else { return b }\n    \
    \    return greatest_common_divisor(b, a % b)\n    }\n    guard b > 0 else { return\
    \ a }\n    return greatest_common_divisor(a, (b % a) + a)", "    if a < b {\n\
    \        guard a > 0 else { return b }\n        return greatest_common_divisor(b,\
    \ a % b)\n    }\n    return a", '    return a / gcd(a, b)', '    return a / gcd(a,
    b)', '    return a / gcd(a, b)', "    if a < b {\n        guard a > 0 else { return\
    \ 0 }\n        return greatest_common_divisor(b, a % b)\n    }\n    guard b >\
    \ 0 else { return 0 }\n    return greatest_common_divisor(a, (b * b) % a)", " \
    \   if a < b {\n        guard a > 0 else { return b }\n        return greatest_common_divisor(b,\
    \ a)\n    }\n    guard b > 0 else { return a }\n    return greatest_common_divisor(b,\
    \ a)", '    return a / gcd(a, b)', '    return a / gcd(a, b)', '    return a /
    gcd(a, b)', '    return a / gcd(a, b)', '    return a / gcd(a, b)', "    if a\
    \ < b {\n        guard a > 0 else { return b }\n        return greatest_common_divisor(b,\
    \ a % b)\n    }\n    guard b > 0 else { return a }\n    return greatest_common_divisor(b,\
    \ a % b)", "    var gcd = a\n    while gcd != 0 {\n        if b == 0 {\n     \
    \       return gcd\n        }\n        gcd = b\n        b %= gcd\n    }\n    return\
    \ gcd", '    return a / gcd(a, b)', "    if a < b {\n        guard a >= 0 else\
    \ { return b }\n        guard b >= 0 else { return a }\n        return greatest_common_divisor(b,\
    \ a%b)\n    }\n    guard b >= 0 else { return a }\n    guard a >= 0 else { return\
    \ b }\n    return greatest_common_divisor(a%b, b)", '    return a / gcd(a, b)',
  '    return a / gcd(a, b)', '    return a / gcd(a, b)', '    return a / gcd(a, b)',
  '    return a / gcd(a, b)', '    return a / gcd(a, b)', '    return a / gcd(a, b)',
  '    return a / gcd(a, b)', "    if a < b {\n        guard a > 0 else { return 0\
    \ }\n        return greatest_common_divisor(b, a % b)\n    }\n    guard b > 0\
    \ else { return 0 }\n    return greatest_common_divisor(a, (b * b) % a)", '    return
    a / gcd(a, b)', '    return a / gcd(a, b)', '    return a / gcd(a, b)', "    if\
    \ a < b {\n        guard a > 0 else { return b }\n        return greatest_common_divisor(b,\
    \ a % b)\n    }\n    return a", '    return gcd(a, b) * b', "    if a < b {\n\
    \        guard a > 0 else { return b }\n        return greatest_common_divisor(b,\
    \ a % b)\n    }\n    guard b > 0 else { return a }\n    return greatest_common_divisor(b,\
    \ a % b)", '    return a / gcd(a, b)', '    return a / gcd(a, b)', '    return
    a / gcd(a, b)', '    return a / gcd(a, b)', '    return a / gcd(a, b)', '    return
    a / gcd(a, b)', "    if a < b {\n        guard a > 0 else { return b }\n     \
    \   return greatest_common_divisor(b, a % b)\n    }\n    guard b > 0 else { return\
    \ a }\n    return greatest_common_divisor(a, (b % a) + a)", '    return a / gcd(a,
    b)', "    if a < b {\n        guard a > 0 else { return b }\n        return greatest_common_divisor(b,\
    \ a % b)\n    }\n    guard b > 0 else { return a }\n    return greatest_common_divisor(a,\
    \ (b % a) + a)", "    if a < b {\n        guard a > 0 else { return b }\n    \
    \    return greatest_common_divisor(b, a % b)\n    }\n    guard b > 0 else { return\
    \ a }\n    return greatest_common_divisor(a, b % a)", '    return a / gcd(a, b)',
  "    if a < b {\n        guard a > 0 else { return b }\n        return greatest_common_divisor(b,\
    \ a % b)\n    }\n    guard b > 0 else { return a }\n    return greatest_common_divisor(a,\
    \ (b % a) + a)", '    return a / gcd(a, b)', '    return a / gcd(a, b)', '    return
    a / gcd(a, b)', "    if a < b {\n        guard a > 0 else { return b }\n     \
    \   return greatest_common_divisor(b, a % b)\n    }\n    guard b > 0 else { return\
    \ a }\n    return greatest_common_divisor(a, (b % a) + a)", '    return a / gcd(a,
    b)', '    return a / gcd(a, b)', "    if a < b {\n        guard a > 0 else { return\
    \ b }\n        return greatest_common_divisor(b, a % b)\n    }\n    guard b >\
    \ 0 else { return a }\n    return greatest_common_divisor(b, a % b)", '    return
    a / gcd(a, b)', '    return a / gcd(a, b)', '    return a / gcd(a, b)', '    return
    a / gcd(a, b)', "    if a < b {\n        (a, b) = (b, a)\n    }\n    var c: Int\
    \ = 0\n    for _ in 0..<(a / b) {\n        c = b\n        b -= a\n        a /=\
    \ c\n    }\n    return c", "    if a < b {\n        guard a > 0 else { return\
    \ b }\n        guard b > 0 else { return a }\n        return greatest_common_divisor(b,\
    \ a % b)\n    }\n    return a"]
stop_tokens:
- "\n}"
