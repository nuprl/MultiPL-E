name: HumanEval_145_order_by_points
language: swift
prompt: "\n/// Write a function which sorts the given list of integers\n/// in ascending\
  \ order according to the sum of their digits.\n/// Note: if there are several items\
  \ with similar sum of their digits,\n/// order them based on their index in original\
  \ list.\n/// For example:\n/// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
  \ -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc order_by_points(nums:\
  \ [Int]) -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12])\
  \ == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145,\
  \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
  \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
  \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3])\
  \ == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3,\
  \ 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
  \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
completions: ["    var result = [Int]()\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        if sum > 0 {\n            result.append(num)\n  \
    \      }\n    }\n    return result", "    var result = [Int]()\n    var sum =\
    \ 0\n    for n in nums {\n        sum += n\n    }\n    for n in nums {\n     \
    \   if sum < 0 {\n            sum += n\n        } else {\n            sum += n\
    \ % 10\n        }\n        result.append(n)\n    }\n    return result", "    var\
    \ result = [Int]()\n    var sum = 0\n    for num in nums {\n        sum += num\n\
    \        if sum > 0 {\n            result.insert(sum, num)\n        }\n    }\n\
    \    return result", "    var result = [Int]()\n    var sum = 0\n    for num in\
    \ nums {\n        sum += num\n        if sum > 0 {\n            result.append(num)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n    }\n    for num in nums {\n\
    \        if sum < 0 {\n            sum += 10\n        }\n        if sum > 0 {\n\
    \            sum -= 10\n        }\n        if sum == 0 {\n            result.append(num)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        if sum > 0 {\n     \
    \       result.append(num)\n        }\n    }\n    return result", "    var result\
    \ = [Int]()\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n\
    \    for num in nums {\n        if sum > 0 {\n            result.insert(num, 0)\n\
    \            sum -= num\n        }\n    }\n    return result", "    var result\
    \ = [Int]()\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n\
    \    for num in nums {\n        if sum < 0 {\n            sum += num\n       \
    \ } else {\n            if sum == 0 {\n                result.append(num)\n  \
    \          } else {\n                let index = nums.indexOf(num)\n         \
    \       result[index] = num\n            }\n        }\n    }\n    return result",
  "    var result = [Int]()\n    var sum = 0\n    for num in nums {\n        sum +=\
    \ num\n    }\n    for num in nums {\n        if sum < 0 {\n            sum +=\
    \ 10\n        }\n        if sum > 0 {\n            sum -= 10\n        }\n    \
    \    if sum == 0 {\n            result.insert(num, at: result.index(of: num))\n\
    \        }\n    }\n    return result", "    let len = nums.count\n    var sum\
    \ = 0\n    var result = [Int]()\n    for i in 0..<len {\n        sum += nums[i]\n\
    \        result.append(sum)\n    }\n    return result.sorted(by: { (a, b) -> Bool\
    \ in\n        let aSum = a % 10\n        let bSum = b % 10\n        return aSum\
    \ < bSum ? true : aSum > bSum\n    })", "    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        if sum > 0 {\n     \
    \       result.append(num)\n        }\n    }\n    return result", "    var result\
    \ = [Int]()\n    var sum = 0\n    for num in nums {\n        sum += num\n    \
    \    if sum > 0 {\n            result.append(num)\n        }\n    }\n    return\
    \ result", "    var result = [Int]()\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        result.append(num)\n    }\n    result.sort(by: {\
    \ (a, b) -> Bool in\n        return sum - a < sum - b\n    })\n    return result",
  "    var numsSorted = nums\n    for i := 0; i < len(nums); i++ {\n        for j\
    \ := i + 1; j < len(nums); j++ {\n            if nums[j] < nums[i] {\n       \
    \         numsSorted = numsSorted[:j] + numsSorted[j+1:]\n                break\n\
    \            }\n        }\n    }\n    return numsSorted", "    var result = [Int]()\n\
    \    var sum = 0\n    for num in nums {\n        sum += num\n        result.append(num)\n\
    \    }\n    for i := 0; i < len(result); i++ {\n        result[i] = result[i]\
    \ - sum\n    }\n    return result", "    var result = [Int]()\n    var sum = 0\n\
    \    for num in nums {\n        sum += num\n        if sum > 0 {\n           \
    \ result.append(num)\n        }\n    }\n    return result", "    var result =\
    \ [Int]()\n    var sum = 0\n    for num in nums {\n        sum += num\n      \
    \  result.append(num)\n    }\n    result.sort(by: { (a, b) -> Bool in\n      \
    \  let aSum = a.toInt()\n        let bSum = b.toInt()\n        return aSum < bSum\
    \ || (aSum == bSum && a.compareTo(b) == .orderedAscending)\n    })\n    return\
    \ result", "    var result = [Int]()\n    var sum = 0\n    for n in nums {\n \
    \       sum += n\n    }\n    for n in nums {\n        if sum < 0 {\n         \
    \   sum += n\n        } else {\n            if sum == 0 {\n                result.append(n)\n\
    \            } else {\n                let index = nums.indexOf(sum)\n       \
    \         result.append(nums[index])\n                nums[index] = n\n      \
    \          sum -= n\n            }\n        }\n    }\n    return result", "  \
    \  var result = [Int]()\n    var sum = 0\n    for num in nums {\n        sum +=\
    \ num\n        if sum < 0 {\n            sum = 0\n        }\n        if sum >\
    \ 0 {\n            result.append(num)\n        }\n    }\n    return result", " \
    \   var result = [Int]()\n    var sum = 0\n    for num in nums {\n        sum\
    \ += num\n        result.append(num)\n    }\n    result.sort(by: { (a, b) -> Bool\
    \ in\n        let aDigit = a % 10\n        let bDigit = b % 10\n        if aDigit\
    \ == bDigit {\n            return a < b\n        } else {\n            return\
    \ aDigit < bDigit\n        }\n    })\n    return result"]
stop_tokens:
- "\n}"
