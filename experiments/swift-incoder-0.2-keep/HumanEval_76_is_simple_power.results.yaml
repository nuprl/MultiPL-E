language: swift
name: HumanEval_76_is_simple_power
results:
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n        return\
    \ true\n    }\n    if x == 1 {\n        return true\n    }\n    if x == n {\n\
    \        return true\n    }\n    if n % x == 0 {\n        return is_simple_power(x,\
    \ n-1)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpylabkyhr.swift:23:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n        return\
    \ true\n    }\n    if x == 1 {\n        return true\n    }\n    if x == n {\n\
    \        return true\n    }\n    if n % 2 == 0 {\n        return is_simple_power(x,\
    \ n/2)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7nyl5yis.swift:23:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n/2)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n        return\
    \ true\n    }\n    if x == n {\n        return true\n    }\n    if n <= 1 {\n\
    \        return false\n    }\n    if n % 2 == 0 {\n        return is_simple_power(x,\
    \ n-1)\n    }\n    return is_simple_power(x, n/2)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpju1y0pj8.swift:23:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n/tmp/tmpju1y0pj8.swift:25:27: error:\
    \ missing argument labels 'x:n:' in call\n    return is_simple_power(x, n/2)\n\
    \                          ^\n                           x: n: \n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    return is_simple_power_impl(x,\
    \ n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(is_simple_power(x: 16, n: 2)\
    \ == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp049zxv5o.swift:13:12: error: cannot find 'is_simple_power_impl'\
    \ in scope\n    return is_simple_power_impl(x, n)\n           ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n        return\
    \ true\n    }\n    if n == 1 {\n        return true\n    }\n    if x == n {\n\
    \        return true\n    }\n    if x > n {\n        return false\n    }\n   \
    \ if x == 1 {\n        return true\n    }\n    if n == 1 {\n        return true\n\
    \    }\n    if x == n {\n        return true\n    }\n    if x > n {\n        return\
    \ false\n    }\n    if x == 1 {\n        return true\n    }\n    if n == 1 {\n\
    \        return true\n    }\n    if x == n {\n        return true\n    }\n   \
    \ if x > n {\n        return false\n    }\n    if x == 1 {\n        return true\n\
    \    }\n    if n == 1 {\n        return true\n    }\n    if x == n {\n       \
    \ return true\n    }\n    if x > n {\n        return false\n    }\n    if x ==\
    \ 1 {\n        return true\n    }\n    if n == 1 {\n        return true\n    }\n\
    \    if x == n {\n        return true\n    }\n    if x > n {\n        return false\n\
    \    }\n    if x == 1 {\n        return true\n    }\n    if n == 1 {\n       \
    \ return true\n    }\n    if x == n {\n        return true\n    }\n    if x >\
    \ n {\n        return false\n    }\n    if x == 1 {\n        return true\n   \
    \ }\n    if n == 1 {\n        return true\n    }\n    if x == n {\n        return\
    \ true\n    }\n    if x > n {\n        return false\n    }\n    if x == 1 {\n\
    \        return true\n    }\n    if n == 1 {\n        return true\n    }\n   \
    \ if x == n {\n        return true\n    }\n    if x > n {\n        return false\n\
    \    }\n    if x == 1 {\n        return true\n    }\n    if n == 1 {\n       \
    \ return true\n    }\n    if x == n {\n        return true\n    }\n    if x >\
    \ n {\n        return false\n    }\n    if x == 1 {\n        return true\n   \
    \ }\n    if n == 1 {\n        return true\n    }\n    if x == n {\n        return\
    \ true\n    }\n    if x > n {\n        return false\n    }\n    if x == 1 {\n\
    \        return true\n    }\n    if n == 1 {\n        return true\n    }\n   \
    \ if x == n {\n        return true\n    }\n    if x > n {\n        return false\n\
    \    }\n    if x == 1 {\n        return true\n    }\n    if n == 1 {\n       \
    \ return true\n    }\n    if x == n {\n        return true\n    }\n    if x >\
    \ n {\n        return false\n    }\n    if x == 1 {\n        return true\n   \
    \ }\n    if n == 1 {\n        return true\n    }\n    if x == n {\n        return\
    \ true\n    }\n    if x > n {\n        return false\n    }\n    if x == 1 {\n\
    \        return true\n    }\n    if n == 1 {\n        return true\n    }\n\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: '/tmp/tmpq6lih6fs.swift:176:1: error: missing return in global function
    expected to return ''Bool''

    }

    ^

    '
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n        return\
    \ true\n    }\n    if n == 2 {\n        return true\n    }\n    if n == 3 {\n\
    \        return true\n    }\n    if n == 4 {\n        return true\n    }\n   \
    \ if n == 5 {\n        return true\n    }\n    if n == 6 {\n        return true\n\
    \    }\n    if n == 7 {\n        return true\n    }\n    if n == 8 {\n       \
    \ return true\n    }\n    if n == 9 {\n        return true\n    }\n    if n ==\
    \ 10 {\n        return true\n    }\n    if n == 11 {\n        return true\n  \
    \  }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n       \
    \ return true\n    }\n    if n == 14 {\n        return true\n    }\n    if n ==\
    \ 15 {\n        return true\n    }\n    if n == 16 {\n        return true\n  \
    \  }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n       \
    \ return true\n    }\n    if n == 19 {\n        return true\n    }\n    if n ==\
    \ 20 {\n        return true\n    }\n    if n == 21 {\n        return true\n  \
    \  }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n       \
    \ return true\n    }\n    if n == 24 {\n        return true\n    }\n    if n ==\
    \ 25 {\n        return true\n    }\n    if n == 26 {\n        return true\n  \
    \  }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n       \
    \ return true\n    }\n    if n == 29 {\n        return true\n    }\n    if n ==\
    \ 30 {\n        return true\n    }\n    if n == 31 {\n        return true\n  \
    \  }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n       \
    \ return true\n    }\n    if n == 34 {\n        return true\n    }\n    if n ==\
    \ 35 {\n        return true\n    }\n    if n == 36 {\n        return true\n  \
    \  }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n       \
    \ return true\n    }\n    if n == 39 {\n        return true\n    }\n    if n ==\
    \ 40 {\n        return true\n    }\n    if n == 41 {\n        return true\n  \
    \  }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n       \
    \ return true\n    }\n    if n == 44 {\n        return true\n    }\n    if n ==\
    \ 45 {\n        return true\n    }\n    if n == 46 {\n        return true\n  \
    \  }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n       \
    \ return true\n    }\n    if n == 49 {\n        return true\n    }\n    if n ==\
    \ 50 {\n        return true\n    }\n    if n == 51 {\n        return true\n  \
    \  }\n    if n == 52 {\n        return \n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x: 143214,\
    \ n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpyvq3gzkc.swift:192:45: error: expected '}' at end of brace statement\n\
    assert(is_simple_power(x: 1, n: 12) == true)\n                               \
    \             ^\n/tmp/tmpyvq3gzkc.swift:12:46: note: to match this opening '{'\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n                             \
    \                ^\n/tmp/tmpyvq3gzkc.swift:167:9: error: non-void function should\
    \ return a value\n        return \n        ^\n/tmp/tmpyvq3gzkc.swift:171:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n        return\
    \ true\n    }\n    if x == n {\n        return true\n    }\n    if n % x == 0\
    \ {\n        return is_simple_power(x, n-1)\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpj_8d321a.swift:20:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824613
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n        return\
    \ true\n    }\n    if x == 1 {\n        return true\n    }\n    if n == 0 {\n\
    \        return false\n    }\n    if x == 0 {\n        return false\n    }\n \
    \   if n == x {\n        return true\n    }\n    if n == (x * x) {\n        return\
    \ true\n    }\n    if n == (x * x * (x * x)) {\n        return true\n    }\n \
    \   return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpvuo7e8_v/tmpvuo7e8_v.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4b58291c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4b57f88b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4b57f88988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4b57f877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvuo7e8_v                        0x000055f91ab971b6 <unavailable> + 4534

    5    libc.so.6                          0x00002b4b5847d460 __libc_start_main +
    245

    6    tmpvuo7e8_v                        0x000055f91ab96e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824614
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    return is_power_of_two(x)\
    \ && is_power_of_two(n) && is_power_of_two(n*x)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmps4jfacgm.swift:13:12: error: cannot find 'is_power_of_two' in scope\n\
    \    return is_power_of_two(x) && is_power_of_two(n) && is_power_of_two(n*x)\n\
    \           ^~~~~~~~~~~~~~~\n/tmp/tmps4jfacgm.swift:13:34: error: cannot find\
    \ 'is_power_of_two' in scope\n    return is_power_of_two(x) && is_power_of_two(n)\
    \ && is_power_of_two(n*x)\n                                 ^~~~~~~~~~~~~~~\n\
    /tmp/tmps4jfacgm.swift:13:56: error: cannot find 'is_power_of_two' in scope\n\
    \    return is_power_of_two(x) && is_power_of_two(n) && is_power_of_two(n*x)\n\
    \                                                       ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    return x == n ** Int(x)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpuzzfo_ie.swift:13:19: error: cannot find operator '**' in scope\n\
    \    return x == n ** Int(x)\n                  ^~\n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    return x == pow(x, n)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp8wmfjx7m.swift:13:17: error: cannot find 'pow' in scope\n    return\
    \ x == pow(x, n)\n                ^~~\n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n        return\
    \ true\n    }\n    if n == 1 {\n        return true\n    }\n    if x == n {\n\
    \        return true\n    }\n    if n == 0 {\n        return false\n    }\n  \
    \  if n == 2 {\n        return is_simple_power(x, n-1)\n    }\n    if n == 3 {\n\
    \        return is_simple_power(x, n-1)\n    }\n    if n == 4 {\n        return\
    \ is_simple_power(x, n-1)\n    }\n    if n == 5 {\n        return is_simple_power(x,\
    \ n-1)\n    }\n    if n == 6 {\n        return is_simple_power(x, n-1)\n    }\n\
    \    if n == 7 {\n        return is_simple_power(x, n-1)\n    }\n    if n == 8\
    \ {\n        return is_simple_power(x, n-1)\n    }\n    if n == 9 {\n        return\
    \ is_simple_power(x, n-1)\n    }\n    if n == 10 {\n        return is_simple_power(x,\
    \ n-1)\n    }\n    if n == 11 {\n        return is_simple_power(x, n-1)\n    }\n\
    \    if n == 12 {\n        return is_simple_power(x, n-1)\n    }\n    if n ==\
    \ 13 {\n        return is_simple_power(x, n-1)\n    }\n    if n == 14 {\n    \
    \    return is_simple_power(x, n-1)\n    }\n    if n == 15 {\n        return is_simple_power(x,\
    \ n-1)\n    }\n    if n == 16 {\n        return is_simple_power(x, n-1)\n    }\n\
    \    if n == 17 {\n        return is_simple_power(x, n-1)\n    }\n    if n ==\
    \ 18 {\n        return is_simple_power(x, n-1)\n    }\n    if n == 19 {\n    \
    \    return is_simple_power(x, n-1)\n    }\n    if n == 20 {\n        return is_simple_power(x,\
    \ n-1)\n    }\n    if n == 21 {\n        return is_simple_power(x, n-1)\n    }\n\
    \    if n == 22 {\n        return is_simple_power(x, n-1)\n    }\n    if n ==\
    \ 23 {\n        return is_simple_power(x, n-1)\n    }\n    if n == 24 {\n    \
    \    return is_simple_power(x, n-1)\n    }\n    if n == 25 {\n        return is_simple_power(x,\
    \ n-1)\n    }\n    if n == 26 {\n        return is_simple_power(x, n-1)\n    }\n\
    \    if n == 27 {\n        return is_simple_power(x, n-1)\n    }\n    if n ==\
    \ 28 {\n        return is_simple_power(x, n-1)\n    }\n    if n == 29 {\n    \
    \    return is_simple_power(x, n-1)\n    }\n    if n == 30 {\n        return is_simple_power(x,\
    \ n-1)\n    }\n    if n == 31 {\n        return is_simple_power(x, n-1)\n    }\n\
    \    if n == 32 {\n        return is_simple_power(x, n-1)\n    }\n    if n ==\
    \ 33 {\n        return is_simple_power(x, n-1)\n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpw6i7j1wm.swift:145:45: error: expected '}' at end of brace statement\n\
    assert(is_simple_power(x: 1, n: 12) == true)\n                               \
    \             ^\n/tmp/tmpw6i7j1wm.swift:12:46: note: to match this opening '{'\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n                             \
    \                ^\n/tmp/tmpw6i7j1wm.swift:26:31: error: missing argument labels\
    \ 'x:n:' in call\n        return is_simple_power(x, n-1)\n                   \
    \           ^\n                               x: n: \n/tmp/tmpw6i7j1wm.swift:29:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ n-1)\n                              ^\n                               x: n:\
    \ \n/tmp/tmpw6i7j1wm.swift:32:31: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, n-1)\n                              ^\n   \
    \                            x: n: \n/tmp/tmpw6i7j1wm.swift:35:31: error: missing\
    \ argument labels 'x:n:' in call\n        return is_simple_power(x, n-1)\n   \
    \                           ^\n                               x: n: \n/tmp/tmpw6i7j1wm.swift:38:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ n-1)\n                              ^\n                               x: n:\
    \ \n/tmp/tmpw6i7j1wm.swift:41:31: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, n-1)\n                              ^\n   \
    \                            x: n: \n/tmp/tmpw6i7j1wm.swift:44:31: error: missing\
    \ argument labels 'x:n:' in call\n        return is_simple_power(x, n-1)\n   \
    \                           ^\n                               x: n: \n/tmp/tmpw6i7j1wm.swift:47:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ n-1)\n                              ^\n                               x: n:\
    \ \n/tmp/tmpw6i7j1wm.swift:50:31: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, n-1)\n                              ^\n   \
    \                            x: n: \n/tmp/tmpw6i7j1wm.swift:53:31: error: missing\
    \ argument label"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n        return\
    \ true\n    }\n    if x == n {\n        return true\n    }\n    if n%x == 0 {\n\
    \        return is_simple_power(x, n-1)\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpk48kj5xg.swift:20:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n        return\
    \ true\n    }\n    if x == 1 {\n        return true\n    }\n    if x == n {\n\
    \        return true\n    }\n    if n % 2 == 0 {\n        return is_simple_power(x,\
    \ n/2)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7nyl5yis.swift:23:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n/2)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    return x == n**x\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpd2bur0jn.swift:13:18: error: cannot find operator '**' in scope\n\
    \    return x == n**x\n                 ^~\n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n        return\
    \ true\n    }\n    if x == 1 {\n        return true\n    }\n    if x == n {\n\
    \        return true\n    }\n    if n % x == 0 {\n        return is_simple_power(x,\
    \ n-1)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpylabkyhr.swift:23:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    return is_simple_power_helper(x,\
    \ n, 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp053u7ab3.swift:13:12: error: cannot find 'is_simple_power_helper'\
    \ in scope\n    return is_simple_power_helper(x, n, 0)\n           ^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n        return\
    \ true\n    }\n    if x == 1 {\n        return true\n    }\n    if x == n {\n\
    \        return true\n    }\n    if n % x == 0 {\n        return is_simple_power(x,\
    \ n-1)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpylabkyhr.swift:23:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    guard n > 0 else { return\
    \ false }\n    guard x > 0 else { return false }\n    guard x != n else { return\
    \ false }\n    guard x != n else { return false }\n    guard x != n else { return\
    \ false }\n    guard x != n else { return false }\n    guard x != n else { return\
    \ false }\n    guard x != n else { return false }\n    guard x != n else { return\
    \ false }\n    guard x != n else { return false }\n    guard x != n else { return\
    \ false }\n    guard x != n else { return false }\n    guard x != n else { return\
    \ false }\n    guard x != n else { return false }\n    guard x != n else { return\
    \ false }\n    guard x != n else { return false }\n    guard x != n else { return\
    \ false }\n    guard x != n else { return false }\n    guard x != n else { return\
    \ false }\n    guard x != n else { return false }\n    guard x != n else { return\
    \ false }\n    guard x != n else { return false }\n    guard x != n else { return\
    \ false }\n    guard x != n else { return false }\n    guard x != n else { return\
    \ false }\n    guard x != n else { return false }\n    guard x != n else { return\
    \ false }\n    guard x != n else { return false }\n    guard x != n else { return\
    \ false }\n    guard x != n else { return false }\n    guard x != n else { return\
    \ false }\n    guard x != n else { return false }\n    guard x != n else { return\
    \ false }\n    guard x != n else { return false }\n    guard x != n else { return\
    \ false }\n    guard x != n else { return false }\n    guard x != n else { return\
    \ false }\n    guard x != n else { return false }\n    guard x != n else { return\
    \ false }\n    guard x != n else { return false }\n    guard x != n else { return\
    \ false }\n    guard x != n else { return false }\n    guard x != n else { return\
    \ false }\n    guard x != n else { return false }\n    guard x != n else { return\
    \ false }\n    guard x != n else { return false }\n    guard x != n else { return\
    \ false }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: '/tmp/tmpkalzsb1d.swift:60:1: error: missing return in global function expected
    to return ''Bool''

    }

    ^

    '
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    return is_simple_power_impl(x,\
    \ n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(is_simple_power(x: 16, n: 2)\
    \ == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp049zxv5o.swift:13:12: error: cannot find 'is_simple_power_impl'\
    \ in scope\n    return is_simple_power_impl(x, n)\n           ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824613
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    guard n > 0 else { return\
    \ false }\n    guard x == n else { return false }\n    guard n == 1 || (x & (n\
    \ - 1)) == 0 else {\n        return false\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmp5ss2h0kr/tmp5ss2h0kr.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b832b89fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b832b596b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b832b596988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b832b5957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ss2h0kr                        0x00005616878bf1b6 <unavailable> + 4534

    5    libc.so.6                          0x00002b832ba8b460 __libc_start_main +
    245

    6    tmp5ss2h0kr                        0x00005616878bee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824614
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n        return\
    \ true\n    }\n    if x == n {\n        return true\n    }\n    if n <= 1 {\n\
    \        return false\n    }\n    if n % 2 == 0 {\n        return is_simple_power(x,\
    \ n / 2)\n    }\n    return is_simple_power(x, n / 2) || is_simple_power(x, n\
    \ / 3)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp41i9vua2.swift:23:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n / 2)\n                           \
    \   ^\n                               x: n: \n/tmp/tmp41i9vua2.swift:25:27: error:\
    \ missing argument labels 'x:n:' in call\n    return is_simple_power(x, n / 2)\
    \ || is_simple_power(x, n / 3)\n                          ^\n                \
    \           x: n: \n/tmp/tmp41i9vua2.swift:25:56: error: missing argument labels\
    \ 'x:n:' in call\n    return is_simple_power(x, n / 2) || is_simple_power(x, n\
    \ / 3)\n                                                       ^\n           \
    \                                             x: n: \n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    var result = true\n    for\
    \ _ in 0..<n {\n        if x%n == 0 {\n            result = false\n          \
    \  break\n        }\n        x /= n\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpfc5qh8zt.swift:19:11: error: left side of mutating operator isn't\
    \ mutable: 'x' is a 'let' constant\n        x /= n\n        ~ ^\n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n        return\
    \ true\n    }\n    if x == 1 {\n        return true\n    }\n    if x == n {\n\
    \        return true\n    }\n    if n % x == 0 {\n        return is_simple_power(x,\
    \ n-1)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpylabkyhr.swift:23:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    return x == n ** Int(x)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpuzzfo_ie.swift:13:19: error: cannot find operator '**' in scope\n\
    \    return x == n ** Int(x)\n                  ^~\n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n        return\
    \ true\n    }\n    if n == 0 {\n        return false\n    }\n    if x == 1 {\n\
    \        return true\n    }\n    if x == 0 {\n        return false\n    }\n  \
    \  if x == n {\n        return true\n    }\n    if x % n == 0 {\n        return\
    \ is_simple_power(x / n, n)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmps_ctdprs.swift:29:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x / n, n)\n                           \
    \   ^\n                               x:     n: \n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n        return\
    \ true\n    }\n    if n == 1 {\n        return true\n    }\n    if n == 2 {\n\
    \        return is_simple_power(x, 2)\n    }\n    if n == 3 {\n        return\
    \ is_simple_power(x, 3)\n    }\n    if n == 4 {\n        return is_simple_power(x,\
    \ 4)\n    }\n    if n == 5 {\n        return is_simple_power(x, 5)\n    }\n  \
    \  if n == 6 {\n        return is_simple_power(x, 6)\n    }\n    if n == 7 {\n\
    \        return is_simple_power(x, 7)\n    }\n    if n == 8 {\n        return\
    \ is_simple_power(x, 8)\n    }\n    if n == 9 {\n        return is_simple_power(x,\
    \ 9)\n    }\n    if n == 10 {\n        return is_simple_power(x, 10)\n    }\n\
    \    if n == 11 {\n        return is_simple_power(x, 11)\n    }\n    if n == 12\
    \ {\n        return is_simple_power(x, 12)\n    }\n    if n == 13 {\n        return\
    \ is_simple_power(x, 13)\n    }\n    if n == 14 {\n        return is_simple_power(x,\
    \ 14)\n    }\n    if n == 15 {\n        return is_simple_power(x, 15)\n    }\n\
    \    if n == 16 {\n        return is_simple_power(x, 16)\n    }\n    if n == 17\
    \ {\n        return is_simple_power(x, 17)\n    }\n    if n == 18 {\n        return\
    \ is_simple_power(x, 18)\n    }\n    if n == 19 {\n        return is_simple_power(x,\
    \ 19)\n    }\n    if n == 20 {\n        return is_simple_power(x, 20)\n    }\n\
    \    if n == 21 {\n        return is_simple_power(x, 21)\n    }\n    if n == 22\
    \ {\n        return is_simple_power(x, 22)\n    }\n    if n == 23 {\n        return\
    \ is_simple_power(x, 23)\n    }\n    if n == 24 {\n        return is_simple_power(x,\
    \ 24)\n    }\n    if n == 25 {\n        return is_simple_power(x, 25)\n    }\n\
    \    if n == 26 {\n        return is_simple_power(x, 26)\n    }\n    if n == 27\
    \ {\n        return is_simple_power(x, 27)\n    }\n    if n == 28 {\n        return\
    \ is_simple_power(x, 28)\n    }\n    if n == 29 {\n        return is_simple_power(x,\
    \ 29)\n    }\n    if n == 30 {\n        return is_simple_power(x, 30)\n    }\n\
    \    if n == 31 {\n        return is_simple_power(x, 31)\n    }\n    if n == 32\
    \ {\n        return is_simple_power(x, 32)\n    }\n    if n == 33 {\n        return\
    \ is_simple_power(x, 33)\n    }\n    if n == 34 {\n        return is_simple_power(x,\
    \ 34)\n    }\n    if n == 35 {\n        return is_simple_power(x, 35)\n    }\n\
    \    if n == 36 {\n        return is_simple_power(x, 36\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpmhlhp8bj.swift:123:1: error: expected ')' in expression list\n\
    }\n^\n/tmp/tmpmhlhp8bj.swift:122:31: note: to match this opening '('\n       \
    \ return is_simple_power(x, 36\n                              ^\n/tmp/tmpmhlhp8bj.swift:147:45:\
    \ error: expected '}' at end of brace statement\nassert(is_simple_power(x: 1,\
    \ n: 12) == true)\n                                            ^\n/tmp/tmpmhlhp8bj.swift:12:46:\
    \ note: to match this opening '{'\nfunc is_simple_power(x: Int, n: Int) -> Bool\
    \ {\n                                             ^\n/tmp/tmpmhlhp8bj.swift:20:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ 2)\n                              ^\n                               x: n: \n\
    /tmp/tmpmhlhp8bj.swift:23:31: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, 3)\n                              ^\n     \
    \                          x: n: \n/tmp/tmpmhlhp8bj.swift:26:31: error: missing\
    \ argument labels 'x:n:' in call\n        return is_simple_power(x, 4)\n     \
    \                         ^\n                               x: n: \n/tmp/tmpmhlhp8bj.swift:29:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ 5)\n                              ^\n                               x: n: \n\
    /tmp/tmpmhlhp8bj.swift:32:31: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, 6)\n                              ^\n     \
    \                          x: n: \n/tmp/tmpmhlhp8bj.swift:35:31: error: missing\
    \ argument labels 'x:n:' in call\n        return is_simple_power(x, 7)\n     \
    \                         ^\n                               x: n: \n/tmp/tmpmhlhp8bj.swift:38:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ 8)\n                              ^\n                               x: n: \n\
    /tmp/tmpmhlhp8bj.swift:41:31: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, 9)\n                              ^\n     \
    \                          x: n: \n/tmp/tmpmhlhp8bj.swift:44:31: error: missing\
    \ argument l"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n        return\
    \ true\n    }\n    if n == 0 {\n        return false\n    }\n    if x == 1 {\n\
    \        return true\n    }\n    if x == 0 {\n        return false\n    }\n  \
    \  if x == n {\n        return true\n    }\n    if x % n == 0 {\n        return\
    \ is_simple_power(x / n, n)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmps_ctdprs.swift:29:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x / n, n)\n                           \
    \   ^\n                               x:     n: \n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n        return\
    \ true\n    }\n    if n == 1 {\n        return true\n    }\n    if n == 2 {\n\
    \        return is_simple_power(x, 2)\n    }\n    if n == 3 {\n        return\
    \ is_simple_power(x, 3)\n    }\n    if n == 4 {\n        return is_simple_power(x,\
    \ 4)\n    }\n    if n == 5 {\n        return is_simple_power(x, 5)\n    }\n  \
    \  if n == 6 {\n        return is_simple_power(x, 6)\n    }\n    if n == 7 {\n\
    \        return is_simple_power(x, 7)\n    }\n    if n == 8 {\n        return\
    \ is_simple_power(x, 8)\n    }\n    if n == 9 {\n        return is_simple_power(x,\
    \ 9)\n    }\n    if n == 10 {\n        return is_simple_power(x, 10)\n    }\n\
    \    if n == 11 {\n        return is_simple_power(x, 11)\n    }\n    if n == 12\
    \ {\n        return is_simple_power(x, 12)\n    }\n    if n == 13 {\n        return\
    \ is_simple_power(x, 13)\n    }\n    if n == 14 {\n        return is_simple_power(x,\
    \ 14)\n    }\n    if n == 15 {\n        return is_simple_power(x, 15)\n    }\n\
    \    if n == 16 {\n        return is_simple_power(x, 16)\n    }\n    if n == 17\
    \ {\n        return is_simple_power(x, 17)\n    }\n    if n == 18 {\n        return\
    \ is_simple_power(x, 18)\n    }\n    if n == 19 {\n        return is_simple_power(x,\
    \ 19)\n    }\n    if n == 20 {\n        return is_simple_power(x, 20)\n    }\n\
    \    if n == 21 {\n        return is_simple_power(x, 21)\n    }\n    if n == 22\
    \ {\n        return is_simple_power(x, 22)\n    }\n    if n == 23 {\n        return\
    \ is_simple_power(x, 23)\n    }\n    if n == 24 {\n        return is_simple_power(x,\
    \ 24)\n    }\n    if n == 25 {\n        return is_simple_power(x, 25)\n    }\n\
    \    if n == 26 {\n        return is_simple_power(x, 26)\n    }\n    if n == 27\
    \ {\n        return is_simple_power(x, 27)\n    }\n    if n == 28 {\n        return\
    \ is_simple_power(x, 28)\n    }\n    if n == 29 {\n        return is_simple_power(x,\
    \ 29)\n    }\n    if n == 30 {\n        return is_simple_power(x, 30)\n    }\n\
    \    if n == 31 {\n        return is_simple_power(x, 31)\n    }\n    if n == 32\
    \ {\n        return is_simple_power(x, 32)\n    }\n    if n == 33 {\n        return\
    \ is_simple_power(x, 33)\n    }\n    if n == 34 {\n        return is_simple_power(x,\
    \ 34)\n    }\n    if n == 35 {\n        return is_simple_power(x, 35)\n    }\n\
    \    if n == 36 {\n        return is_simple_power(x, 36\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpmhlhp8bj.swift:123:1: error: expected ')' in expression list\n\
    }\n^\n/tmp/tmpmhlhp8bj.swift:122:31: note: to match this opening '('\n       \
    \ return is_simple_power(x, 36\n                              ^\n/tmp/tmpmhlhp8bj.swift:147:45:\
    \ error: expected '}' at end of brace statement\nassert(is_simple_power(x: 1,\
    \ n: 12) == true)\n                                            ^\n/tmp/tmpmhlhp8bj.swift:12:46:\
    \ note: to match this opening '{'\nfunc is_simple_power(x: Int, n: Int) -> Bool\
    \ {\n                                             ^\n/tmp/tmpmhlhp8bj.swift:20:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ 2)\n                              ^\n                               x: n: \n\
    /tmp/tmpmhlhp8bj.swift:23:31: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, 3)\n                              ^\n     \
    \                          x: n: \n/tmp/tmpmhlhp8bj.swift:26:31: error: missing\
    \ argument labels 'x:n:' in call\n        return is_simple_power(x, 4)\n     \
    \                         ^\n                               x: n: \n/tmp/tmpmhlhp8bj.swift:29:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ 5)\n                              ^\n                               x: n: \n\
    /tmp/tmpmhlhp8bj.swift:32:31: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, 6)\n                              ^\n     \
    \                          x: n: \n/tmp/tmpmhlhp8bj.swift:35:31: error: missing\
    \ argument labels 'x:n:' in call\n        return is_simple_power(x, 7)\n     \
    \                         ^\n                               x: n: \n/tmp/tmpmhlhp8bj.swift:38:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ 8)\n                              ^\n                               x: n: \n\
    /tmp/tmpmhlhp8bj.swift:41:31: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, 9)\n                              ^\n     \
    \                          x: n: \n/tmp/tmpmhlhp8bj.swift:44:31: error: missing\
    \ argument l"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    return is_simple_power_impl(x,\
    \ n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(is_simple_power(x: 16, n: 2)\
    \ == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp049zxv5o.swift:13:12: error: cannot find 'is_simple_power_impl'\
    \ in scope\n    return is_simple_power_impl(x, n)\n           ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    var result = true\n    for\
    \ _ in 0..<n {\n        if x == n ** Int(x) {\n            result = false\n  \
    \          break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpb_mze86b.swift:15:19: error: cannot find operator '**' in scope\n\
    \        if x == n ** Int(x) {\n                  ^~\n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    return x == n ** Int(x)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpuzzfo_ie.swift:13:19: error: cannot find operator '**' in scope\n\
    \    return x == n ** Int(x)\n                  ^~\n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n        return\
    \ true\n    }\n    if n == 0 {\n        return false\n    }\n    if x == 1 {\n\
    \        return true\n    }\n    if x == 0 {\n        return false\n    }\n  \
    \  if x == n {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ is_simple_power(x, n/2)\n    }\n    return is_simple_power(x, n/2)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpozdcuc1g.swift:29:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n/2)\n                             \
    \ ^\n                               x: n: \n/tmp/tmpozdcuc1g.swift:31:27: error:\
    \ missing argument labels 'x:n:' in call\n    return is_simple_power(x, n/2)\n\
    \                          ^\n                           x: n: \n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n        return\
    \ true\n    }\n    if x == n {\n        return true\n    }\n    if n == 1 {\n\
    \        return false\n    }\n    if n == 2 {\n        return is_simple_power(x,\
    \ n-1)\n    }\n    if n == 3 {\n        return is_simple_power(x, n-2) || is_simple_power(x,\
    \ n-2)\n    }\n    if n == 4 {\n        return is_simple_power(x, n-3) || is_simple_power(x,\
    \ n-3) || is_simple_power(x, n-3)\n    }\n    if n == 5 {\n        return is_simple_power(x,\
    \ n-4) || is_simple_power(x, n-4) || is_simple_power(x, n-4) || is_simple_power(x,\
    \ n-4)\n    }\n    if n == 6 {\n        return is_simple_power(x, n-5) || is_simple_power(x,\
    \ n-5) || is_simple_power(x, n-5) || is_simple_power(x, n-5) || is_simple_power(x,\
    \ n-5)\n    }\n    if n == 7 {\n        return is_simple_power(x, n-6) || is_simple_power(x,\
    \ n-6) || is_simple_power(x, n-6) || is_simple_power(x, n-6) || is_simple_power(x,\
    \ n-6)\n    }\n    if n == 8 {\n        return is_simple_power(x, n-7) || is_simple_power(x,\
    \ n-7) || is_simple_power(x, n-7) || is_simple_power(x, n-7) || is_simple_power(x,\
    \ n-7)\n    }\n    if n == 9 {\n        return is_simple_power(x, n-8) || is_simple_power(x,\
    \ n-8) || is_simple_power(x, n-8) || is_simple_power(x, n-8) || is_simple_power(x,\
    \ n-8)\n    }\n    if n == 10 {\n        return is_simple_power(x, n-9) || is_simple_power(x,\
    \ n-9) || is_simple_power(x, n-9) || is_simple_power(x, n-9) || is_simple_power(x,\
    \ n-9)\n    }\n    if n == 11 {\n        return is_simple_power(x, n-10) || is_simple_power(x,\
    \ n-10) || is_simple_power(x, n-10) || is_simple_power(x, n-10) || is_simple_power(x,\
    \ n-10)\n    }\n    if n == 12 {\n        return is_simple_power(x, n-11) || is_simple_power(x,\
    \ n-11) || is_simple_power(x, n-11) || is_simple_power(x, n-11) || is_simple_power(x,\
    \ n-11)\n    }\n    if n == 13 {\n        return is_simple_power(x, n-12) || is_simple_power(x,\
    \ n-12) || is_simple_power(x, n-12) || is_simple_power(x, n-12) || is_simple_power(x,\
    \ n-12)\n    }\n    if n == 14 {\n        return is_simple_power(x, n-13) || is_simple_power(x,\
    \ n-13) || is_simple_power(x, n-13) || is_simple_power(x, n-13) || is_simple_power(x,\
    \ \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(is_simple_power(x: 16, n: 2)\
    \ == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp3ju1_1mz.swift:60:1: error: expected expression in list of expressions\n\
    }\n^\n/tmp/tmp3ju1_1mz.swift:84:45: error: expected '}' at end of brace statement\n\
    assert(is_simple_power(x: 1, n: 12) == true)\n                               \
    \             ^\n/tmp/tmp3ju1_1mz.swift:12:46: note: to match this opening '{'\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n                             \
    \                ^\n/tmp/tmp3ju1_1mz.swift:23:31: error: missing argument labels\
    \ 'x:n:' in call\n        return is_simple_power(x, n-1)\n                   \
    \           ^\n                               x: n: \n/tmp/tmp3ju1_1mz.swift:26:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ n-2) || is_simple_power(x, n-2)\n                              ^\n         \
    \                      x: n: \n/tmp/tmp3ju1_1mz.swift:26:58: error: missing argument\
    \ labels 'x:n:' in call\n        return is_simple_power(x, n-2) || is_simple_power(x,\
    \ n-2)\n                                                         ^\n         \
    \                                                 x: n: \n/tmp/tmp3ju1_1mz.swift:29:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ n-3) || is_simple_power(x, n-3) || is_simple_power(x, n-3)\n               \
    \               ^\n                               x: n: \n/tmp/tmp3ju1_1mz.swift:29:58:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ n-3) || is_simple_power(x, n-3) || is_simple_power(x, n-3)\n               \
    \                                          ^\n                               \
    \                           x: n: \n/tmp/tmp3ju1_1mz.swift:29:85: error: missing\
    \ argument labels 'x:n:' in call\n        return is_simple_power(x, n-3) || is_simple_power(x,\
    \ n-3) || is_simple_power(x, n-3)\n                                          \
    \                                          ^\n                               \
    \                                                      x: n: \n/tmp/tmp3ju1_1mz.swift:32:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple"
  stdout: ''
  timestamp: 1659824614
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    return is_simple_power_impl(x,\
    \ n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(is_simple_power(x: 16, n: 2)\
    \ == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp049zxv5o.swift:13:12: error: cannot find 'is_simple_power_impl'\
    \ in scope\n    return is_simple_power_impl(x, n)\n           ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    return is_simple_power_impl(x,\
    \ n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(is_simple_power(x: 16, n: 2)\
    \ == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp049zxv5o.swift:13:12: error: cannot find 'is_simple_power_impl'\
    \ in scope\n    return is_simple_power_impl(x, n)\n           ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n        return\
    \ true\n    }\n    if n == 0 {\n        return false\n    }\n    if x == 1 {\n\
    \        return true\n    }\n    if x == 0 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return is_simple_power(x, n/2)\n    }\n    return\
    \ is_simple_power(x, n/2) * is_simple_power(x, n-1)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpvmr5j67m.swift:26:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n/2)\n                             \
    \ ^\n                               x: n: \n/tmp/tmpvmr5j67m.swift:28:27: error:\
    \ missing argument labels 'x:n:' in call\n    return is_simple_power(x, n/2) *\
    \ is_simple_power(x, n-1)\n                          ^\n                     \
    \      x: n: \n/tmp/tmpvmr5j67m.swift:28:36: error: binary operator '*' cannot\
    \ be applied to two 'Bool' operands\n    return is_simple_power(x, n/2) * is_simple_power(x,\
    \ n-1)\n                                   ^\nSwift.FloatingPoint:1:17: note:\
    \ candidate requires that 'Bool' conform to 'FloatingPoint' (requirement specified\
    \ as 'Self' : 'FloatingPoint')\npublic protocol FloatingPoint : Hashable, SignedNumeric,\
    \ Strideable where Self == Self.Magnitude {\n                ^\n/tmp/tmpvmr5j67m.swift:28:53:\
    \ error: missing argument labels 'x:n:' in call\n    return is_simple_power(x,\
    \ n/2) * is_simple_power(x, n-1)\n                                           \
    \         ^\n                                                     x: n: \n"
  stdout: ''
  timestamp: 1659824614
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    return x == n ** int(x)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpc4hakye4.swift:13:19: error: cannot find operator '**' in scope\n\
    \    return x == n ** int(x)\n                  ^~\n/tmp/tmpc4hakye4.swift:13:22:\
    \ error: cannot find 'int' in scope\n    return x == n ** int(x)\n           \
    \          ^~~\n"
  stdout: ''
  timestamp: 1659824614
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    return x == n ** x\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpngrraz9t.swift:13:19: error: cannot find operator '**' in scope\n\
    \    return x == n ** x\n                  ^~\n"
  stdout: ''
  timestamp: 1659824614
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    return is_simple_power_helper(x,\
    \ n, 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp053u7ab3.swift:13:12: error: cannot find 'is_simple_power_helper'\
    \ in scope\n    return is_simple_power_helper(x, n, 0)\n           ^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n        return\
    \ true\n    }\n    if n == 0 {\n        return false\n    }\n    if x == 1 {\n\
    \        return true\n    }\n    if x == 0 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return is_simple_power(x, n / 2)\n    }\n    return\
    \ is_simple_power(x, n / 2) || is_simple_power(x, n / 2)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpp9d98mci.swift:26:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n / 2)\n                           \
    \   ^\n                               x: n: \n/tmp/tmpp9d98mci.swift:28:27: error:\
    \ missing argument labels 'x:n:' in call\n    return is_simple_power(x, n / 2)\
    \ || is_simple_power(x, n / 2)\n                          ^\n                \
    \           x: n: \n/tmp/tmpp9d98mci.swift:28:56: error: missing argument labels\
    \ 'x:n:' in call\n    return is_simple_power(x, n / 2) || is_simple_power(x, n\
    \ / 2)\n                                                       ^\n           \
    \                                             x: n: \n"
  stdout: ''
  timestamp: 1659824614
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n        return\
    \ true\n    }\n    if n == 1 {\n        return true\n    }\n    if n%2 == 0 {\n\
    \        return is_simple_power(x, n/2)\n    }\n    return is_simple_power(x,\
    \ n-1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp89ybq4fq.swift:20:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n/2)\n                             \
    \ ^\n                               x: n: \n/tmp/tmp89ybq4fq.swift:22:27: error:\
    \ missing argument labels 'x:n:' in call\n    return is_simple_power(x, n-1)\n\
    \                          ^\n                           x: n: \n"
  stdout: ''
  timestamp: 1659824614
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    return x == n ** Int(x)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpuzzfo_ie.swift:13:19: error: cannot find operator '**' in scope\n\
    \    return x == n ** Int(x)\n                  ^~\n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n        return\
    \ true\n    }\n    if x == n {\n        return true\n    }\n    if n % x == 0\
    \ {\n        return is_simple_power(x, n//x)\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmprkoso6p4.swift:21:5: error: expected ')' in expression list\n \
    \   }\n    ^\n/tmp/tmprkoso6p4.swift:20:31: note: to match this opening '('\n\
    \        return is_simple_power(x, n//x)\n                              ^\n/tmp/tmprkoso6p4.swift:20:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ n//x)\n                              ^\n                               x: n:\
    \ \n"
  stdout: ''
  timestamp: 1659824614
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n        return\
    \ true\n    }\n    if n == 0 {\n        return false\n    }\n    if x == 1 {\n\
    \        return true\n    }\n    if x == 0 {\n        return false\n    }\n  \
    \  if x == n {\n        return true\n    }\n    if x % n == 0 {\n        return\
    \ is_simple_power(x / n, n)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmps_ctdprs.swift:29:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x / n, n)\n                           \
    \   ^\n                               x:     n: \n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n        return\
    \ true\n    }\n    if x == n {\n        return true\n    }\n    if n % x == 0\
    \ {\n        return is_simple_power(x, n-1)\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpj_8d321a.swift:20:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n        return\
    \ true\n    }\n    if n == 0 {\n        return false\n    }\n    if x == 1 {\n\
    \        return true\n    }\n    if x == 0 {\n        return false\n    }\n  \
    \  if x == n {\n        return true\n    }\n    if x % n == 0 {\n        return\
    \ is_simple_power(x / n, n)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmps_ctdprs.swift:29:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x / n, n)\n                           \
    \   ^\n                               x:     n: \n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n        return\
    \ true\n    }\n    if n == 1 {\n        return true\n    }\n    if x == n {\n\
    \        return true\n    }\n    if x == n ** 2 {\n        return true\n    }\n\
    \    if x == n ** 3 {\n        return true\n    }\n    if x == n ** 4 {\n    \
    \    return true\n    }\n    if x == n ** 5 {\n        return true\n    }\n  \
    \  if x == n ** 6 {\n        return true\n    }\n    if x == n ** 7 {\n      \
    \  return true\n    }\n    if x == n ** 8 {\n        return true\n    }\n    if\
    \ x == n ** 9 {\n        return true\n    }\n    if x == n ** 10 {\n        return\
    \ true\n    }\n    if x == n ** 11 {\n        return true\n    }\n    if x ==\
    \ n ** 12 {\n        return true\n    }\n    if x == n ** 13 {\n        return\
    \ true\n    }\n    if x == n ** 14 {\n        return true\n    }\n    if x ==\
    \ n ** 15 {\n        return true\n    }\n    if x == n ** 16 {\n        return\
    \ true\n    }\n    if x == n ** 17 {\n        return true\n    }\n    if x ==\
    \ n ** 18 {\n        return true\n    }\n    if x == n ** 19 {\n        return\
    \ true\n    }\n    if x == n ** 20 {\n        return true\n    }\n    if x ==\
    \ n ** 21 {\n        return true\n    }\n    if x == n ** 22 {\n        return\
    \ true\n    }\n    if x == n ** 23 {\n        return true\n    }\n    if x ==\
    \ n ** 24 {\n        return true\n    }\n    if x == n ** 25 {\n        return\
    \ true\n    }\n    if x == n ** 26 {\n        return true\n    }\n    if x ==\
    \ n ** 27 {\n        return true\n    }\n    if x == n ** 28 {\n        return\
    \ true\n    }\n    if x == n ** 29 {\n        return true\n    }\n    if x ==\
    \ n ** 30 {\n        return true\n    }\n    if x == n ** 31 {\n        return\
    \ true\n    }\n    if x == n ** 32 {\n        return true\n    }\n    if x ==\
    \ n ** 33 {\n        return true\n    }\n    if x == n ** 34 {\n        return\
    \ true\n    }\n    if x == n ** 35 {\n        return true\n    }\n    if x ==\
    \ n ** 36 {\n        return true\n    }\n    if x == n ** 37 {\n        return\
    \ true\n    }\n    if x == n ** 38 {\n        return true\n    }\n    if x ==\
    \ n ** 39 {\n        return true\n    }\n    if x == n ** 40 {\n        return\
    \ true\n    }\n    if x == n ** 41 {\n        return true\n    }\n    if x ==\
    \ n ** 42 {\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp75e6e7ft.swift:168:45: error: expected '}' at end of brace statement\n\
    assert(is_simple_power(x: 1, n: 12) == true)\n                               \
    \             ^\n/tmp/tmp75e6e7ft.swift:12:46: note: to match this opening '{'\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n                             \
    \                ^\n/tmp/tmp75e6e7ft.swift:22:15: error: cannot find operator\
    \ '**' in scope\n    if x == n ** 2 {\n              ^~\n/tmp/tmp75e6e7ft.swift:25:15:\
    \ error: cannot find operator '**' in scope\n    if x == n ** 3 {\n          \
    \    ^~\n/tmp/tmp75e6e7ft.swift:28:15: error: cannot find operator '**' in scope\n\
    \    if x == n ** 4 {\n              ^~\n/tmp/tmp75e6e7ft.swift:31:15: error:\
    \ cannot find operator '**' in scope\n    if x == n ** 5 {\n              ^~\n\
    /tmp/tmp75e6e7ft.swift:34:15: error: cannot find operator '**' in scope\n    if\
    \ x == n ** 6 {\n              ^~\n/tmp/tmp75e6e7ft.swift:37:15: error: cannot\
    \ find operator '**' in scope\n    if x == n ** 7 {\n              ^~\n/tmp/tmp75e6e7ft.swift:40:15:\
    \ error: cannot find operator '**' in scope\n    if x == n ** 8 {\n          \
    \    ^~\n/tmp/tmp75e6e7ft.swift:43:15: error: cannot find operator '**' in scope\n\
    \    if x == n ** 9 {\n              ^~\n/tmp/tmp75e6e7ft.swift:46:15: error:\
    \ cannot find operator '**' in scope\n    if x == n ** 10 {\n              ^~\n\
    /tmp/tmp75e6e7ft.swift:49:15: error: cannot find operator '**' in scope\n    if\
    \ x == n ** 11 {\n              ^~\n/tmp/tmp75e6e7ft.swift:52:15: error: cannot\
    \ find operator '**' in scope\n    if x == n ** 12 {\n              ^~\n/tmp/tmp75e6e7ft.swift:55:15:\
    \ error: cannot find operator '**' in scope\n    if x == n ** 13 {\n         \
    \     ^~\n/tmp/tmp75e6e7ft.swift:58:15: error: cannot find operator '**' in scope\n\
    \    if x == n ** 14 {\n              ^~\n/tmp/tmp75e6e7ft.swift:61:15: error:\
    \ cannot find operator '**' in scope\n    if x == n ** 15 {\n              ^~\n\
    /tmp/tmp75e6e7ft.swift:64:15: error: cannot find operator '**' in scope\n    if\
    \ x == n ** 16 {\n              ^~\n/tmp/tmp75e6e7ft.swift:67:15: error: cannot\
    \ find operator '**' in s"
  stdout: ''
  timestamp: 1659824614
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n        return\
    \ true\n    }\n    if x == n {\n        return true\n    }\n    if n <= 1 {\n\
    \        return false\n    }\n    if n % 2 == 0 {\n        return is_simple_power(x,\
    \ n/2)\n    }\n    return is_simple_power(x, n/2)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph1evhml7.swift:23:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n/2)\n                             \
    \ ^\n                               x: n: \n/tmp/tmph1evhml7.swift:25:27: error:\
    \ missing argument labels 'x:n:' in call\n    return is_simple_power(x, n/2)\n\
    \                          ^\n                           x: n: \n"
  stdout: ''
  timestamp: 1659824614
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n        return\
    \ true\n    }\n    if n == 1 {\n        return true\n    }\n    if n % 2 == 0\
    \ {\n        return is_simple_power(x, n / 2)\n    }\n    return is_simple_power(x,\
    \ n / 2) && is_simple_power(x, n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x: 143214,\
    \ n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpp028sl27.swift:20:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n / 2)\n                           \
    \   ^\n                               x: n: \n/tmp/tmpp028sl27.swift:22:27: error:\
    \ missing argument labels 'x:n:' in call\n    return is_simple_power(x, n / 2)\
    \ && is_simple_power(x, n - 1)\n                          ^\n                \
    \           x: n: \n/tmp/tmpp028sl27.swift:22:56: error: missing argument labels\
    \ 'x:n:' in call\n    return is_simple_power(x, n / 2) && is_simple_power(x, n\
    \ - 1)\n                                                       ^\n           \
    \                                             x: n: \n"
  stdout: ''
  timestamp: 1659824614
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n        return\
    \ true\n    }\n    if x == 1 {\n        return true\n    }\n    if x == n {\n\
    \        return true\n    }\n    if n % x == 0 {\n        return is_simple_power(x,\
    \ n-1)\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp6o56qtu_.swift:23:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824614
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n        return\
    \ true\n    }\n    if x == n {\n        return true\n    }\n    if n % x == 0\
    \ {\n        return is_simple_power(x, n-1)\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpj_8d321a.swift:20:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824613
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    guard n > 0 else { return\
    \ false }\n    guard x == 0 || x == 1 || (x & (x - 1)) == 0 else {\n        return\
    \ false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmp42zrqt38/tmp42zrqt38.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1a29531c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1a29228b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1a29228988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1a292277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp42zrqt38                        0x000055d11df23323 <unavailable> + 4899

    5    libc.so.6                          0x00002b1a2971d460 __libc_start_main +
    245

    6    tmp42zrqt38                        0x000055d11df22e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824614
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n        return\
    \ true\n    }\n    if x == 1 {\n        return true\n    }\n    if x == n {\n\
    \        return true\n    }\n    if n % 2 == 0 {\n        return is_simple_power(x,\
    \ n/2)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7nyl5yis.swift:23:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n/2)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    guard n > 0 else { return\
    \ false }\n    guard x < n else { return false }\n    guard n == 1 || x == n else\
    \ { return false }\n    guard n == 2 || x == n / 2 else { return false }\n   \
    \ guard n == 3 || x == n / 3 else { return false }\n    guard n == 4 || x == n\
    \ / 4 else { return false }\n    guard n == 5 || x == n / 5 else { return false\
    \ }\n    guard n == 6 || x == n / 6 else { return false }\n    guard n == 7 ||\
    \ x == n / 7 else { return false }\n    guard n == 8 || x == n / 8 else { return\
    \ false }\n    guard n == 9 || x == n / 9 else { return false }\n    guard n ==\
    \ 10 || x == n / 10 else { return false }\n    guard n == 11 || x == n / 11 else\
    \ { return false }\n    guard n == 12 || x == n / 12 else { return false }\n \
    \   guard n == 13 || x == n / 13 else { return false }\n    guard n == 14 || x\
    \ == n / 14 else { return false }\n    guard n == 15 || x == n / 15 else { return\
    \ false }\n    guard n == 16 || x == n / 16 else { return false }\n    guard n\
    \ == 17 || x == n / 17 else { return false }\n    guard n == 18 || x == n / 18\
    \ else { return false }\n    guard n == 19 || x == n / 19 else { return false\
    \ }\n    guard n == 20 || x == n / 20 else { return false }\n    guard n == 21\
    \ || x == n / 21 else { return false }\n    guard n == 22 || x == n / 22 else\
    \ { return false }\n    guard n == 23 || x == n / 23 else { return false }\n \
    \   guard n == 24 || x == n / 24 else { return false }\n    guard n == 25 || x\
    \ == n / 25 else { return false }\n    guard n == 26 || x == n / 26 else { return\
    \ false }\n    guard n == 27 || x == n / 27 else { return false }\n    guard n\
    \ == 28 || x == n / 28 else { return false }\n    guard n == 29 || x == n / 29\
    \ else { return false }\n    guard n == 30 || x == n / 30 else { return false\
    \ }\n    guard n == 31 || x == n / 31 else { return false }\n    guard n == 32\
    \ || x == n / 32 else { return false }\n    guard n == 33 || x == n / 33 else\
    \ { return false }\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: '/tmp/tmpv3y9spv2.swift:49:1: error: missing return in global function expected
    to return ''Bool''

    }

    ^

    '
  stdout: ''
  timestamp: 1659824614
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n        return\
    \ true\n    }\n    if n == 0 {\n        return false\n    }\n    if x == 1 {\n\
    \        return true\n    }\n    if x == 0 {\n        return false\n    }\n  \
    \  if x == n {\n        return true\n    }\n    if x % n == 0 {\n        return\
    \ is_simple_power(x / n, n)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmps_ctdprs.swift:29:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x / n, n)\n                           \
    \   ^\n                               x:     n: \n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    return is_simple_power_impl(x,\
    \ n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(is_simple_power(x: 16, n: 2)\
    \ == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp049zxv5o.swift:13:12: error: cannot find 'is_simple_power_impl'\
    \ in scope\n    return is_simple_power_impl(x, n)\n           ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n        return\
    \ true\n    }\n    if x == 1 {\n        return true\n    }\n    if n == 0 {\n\
    \        return false\n    }\n    if x == 0 {\n        return false\n    }\n \
    \   if n == x {\n        return true\n    }\n    if n % x == 0 {\n        return\
    \ is_simple_power(x, n/x) == 0\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp8btwf8hq.swift:29:40: error: binary operator '==' cannot be applied\
    \ to operands of type 'Bool' and 'Int'\n        return is_simple_power(x, n/x)\
    \ == 0\n               ~~~~~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp8btwf8hq.swift:29:40:\
    \ note: overloads for '==' exist with these partially matching parameter lists:\
    \ (Bool, Bool), (Int, Int)\n        return is_simple_power(x, n/x) == 0\n    \
    \                                   ^\n/tmp/tmp8btwf8hq.swift:29:31: error: missing\
    \ argument labels 'x:n:' in call\n        return is_simple_power(x, n/x) == 0\n\
    \                              ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824614
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    return is_simple_power_impl(x,\
    \ n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(is_simple_power(x: 16, n: 2)\
    \ == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp049zxv5o.swift:13:12: error: cannot find 'is_simple_power_impl'\
    \ in scope\n    return is_simple_power_impl(x, n)\n           ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    return x == n ** Int(x)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpuzzfo_ie.swift:13:19: error: cannot find operator '**' in scope\n\
    \    return x == n ** Int(x)\n                  ^~\n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    var result = true\n    for\
    \ _ in 0..<n {\n        if x == n ** Int(x) {\n            result = false\n  \
    \          break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpb_mze86b.swift:15:19: error: cannot find operator '**' in scope\n\
    \        if x == n ** Int(x) {\n                  ^~\n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n        return\
    \ true\n    }\n    if x == n {\n        return true\n    }\n    if n % x == 0\
    \ {\n        return is_simple_power(x, n/x+1)\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmphztburm4.swift:20:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n/x+1)\n                           \
    \   ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824614
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    return x == n ** Int(x)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpuzzfo_ie.swift:13:19: error: cannot find operator '**' in scope\n\
    \    return x == n ** Int(x)\n                  ^~\n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n        return\
    \ true\n    }\n    if n == 0 {\n        return false\n    }\n    if x == 1 {\n\
    \        return true\n    }\n    if x == 0 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return is_simple_power(x, n/2)\n    }\n    return\
    \ is_simple_power(x, n/2) * is_simple_power(x, n-1)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpvmr5j67m.swift:26:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n/2)\n                             \
    \ ^\n                               x: n: \n/tmp/tmpvmr5j67m.swift:28:27: error:\
    \ missing argument labels 'x:n:' in call\n    return is_simple_power(x, n/2) *\
    \ is_simple_power(x, n-1)\n                          ^\n                     \
    \      x: n: \n/tmp/tmpvmr5j67m.swift:28:36: error: binary operator '*' cannot\
    \ be applied to two 'Bool' operands\n    return is_simple_power(x, n/2) * is_simple_power(x,\
    \ n-1)\n                                   ^\nSwift.FloatingPoint:1:17: note:\
    \ candidate requires that 'Bool' conform to 'FloatingPoint' (requirement specified\
    \ as 'Self' : 'FloatingPoint')\npublic protocol FloatingPoint : Hashable, SignedNumeric,\
    \ Strideable where Self == Self.Magnitude {\n                ^\n/tmp/tmpvmr5j67m.swift:28:53:\
    \ error: missing argument labels 'x:n:' in call\n    return is_simple_power(x,\
    \ n/2) * is_simple_power(x, n-1)\n                                           \
    \         ^\n                                                     x: n: \n"
  stdout: ''
  timestamp: 1659824614
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n        return\
    \ true\n    }\n    if n == 1 {\n        return true\n    }\n    if n == 2 {\n\
    \        return is_simple_power(x, 2)\n    }\n    if n == 3 {\n        return\
    \ is_simple_power(x, 3)\n    }\n    if n == 4 {\n        return is_simple_power(x,\
    \ 4)\n    }\n    if n == 5 {\n        return is_simple_power(x, 5)\n    }\n  \
    \  if n == 6 {\n        return is_simple_power(x, 6)\n    }\n    if n == 7 {\n\
    \        return is_simple_power(x, 7)\n    }\n    if n == 8 {\n        return\
    \ is_simple_power(x, 8)\n    }\n    if n == 9 {\n        return is_simple_power(x,\
    \ 9)\n    }\n    if n == 10 {\n        return is_simple_power(x, 10)\n    }\n\
    \    if n == 11 {\n        return is_simple_power(x, 11)\n    }\n    if n == 12\
    \ {\n        return is_simple_power(x, 12)\n    }\n    if n == 13 {\n        return\
    \ is_simple_power(x, 13)\n    }\n    if n == 14 {\n        return is_simple_power(x,\
    \ 14)\n    }\n    if n == 15 {\n        return is_simple_power(x, 15)\n    }\n\
    \    if n == 16 {\n        return is_simple_power(x, 16)\n    }\n    if n == 17\
    \ {\n        return is_simple_power(x, 17)\n    }\n    if n == 18 {\n        return\
    \ is_simple_power(x, 18)\n    }\n    if n == 19 {\n        return is_simple_power(x,\
    \ 19)\n    }\n    if n == 20 {\n        return is_simple_power(x, 20)\n    }\n\
    \    if n == 21 {\n        return is_simple_power(x, 21)\n    }\n    if n == 22\
    \ {\n        return is_simple_power(x, 22)\n    }\n    if n == 23 {\n        return\
    \ is_simple_power(x, 23)\n    }\n    if n == 24 {\n        return is_simple_power(x,\
    \ 24)\n    }\n    if n == 25 {\n        return is_simple_power(x, 25)\n    }\n\
    \    if n == 26 {\n        return is_simple_power(x, 26)\n    }\n    if n == 27\
    \ {\n        return is_simple_power(x, 27)\n    }\n    if n == 28 {\n        return\
    \ is_simple_power(x, 28)\n    }\n    if n == 29 {\n        return is_simple_power(x,\
    \ 29)\n    }\n    if n == 30 {\n        return is_simple_power(x, 30)\n    }\n\
    \    if n == 31 {\n        return is_simple_power(x, 31)\n    }\n    if n == 32\
    \ {\n        return is_simple_power(x, 32)\n    }\n    if n == 33 {\n        return\
    \ is_simple_power(x, 33)\n    }\n    if n == 34 {\n        return is_simple_power(x,\
    \ 34)\n    }\n    if n == 35 {\n        return is_simple_power(x, 35)\n    }\n\
    \    if n == 36 {\n        return is_simple_power(x, 36\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpmhlhp8bj.swift:123:1: error: expected ')' in expression list\n\
    }\n^\n/tmp/tmpmhlhp8bj.swift:122:31: note: to match this opening '('\n       \
    \ return is_simple_power(x, 36\n                              ^\n/tmp/tmpmhlhp8bj.swift:147:45:\
    \ error: expected '}' at end of brace statement\nassert(is_simple_power(x: 1,\
    \ n: 12) == true)\n                                            ^\n/tmp/tmpmhlhp8bj.swift:12:46:\
    \ note: to match this opening '{'\nfunc is_simple_power(x: Int, n: Int) -> Bool\
    \ {\n                                             ^\n/tmp/tmpmhlhp8bj.swift:20:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ 2)\n                              ^\n                               x: n: \n\
    /tmp/tmpmhlhp8bj.swift:23:31: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, 3)\n                              ^\n     \
    \                          x: n: \n/tmp/tmpmhlhp8bj.swift:26:31: error: missing\
    \ argument labels 'x:n:' in call\n        return is_simple_power(x, 4)\n     \
    \                         ^\n                               x: n: \n/tmp/tmpmhlhp8bj.swift:29:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ 5)\n                              ^\n                               x: n: \n\
    /tmp/tmpmhlhp8bj.swift:32:31: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, 6)\n                              ^\n     \
    \                          x: n: \n/tmp/tmpmhlhp8bj.swift:35:31: error: missing\
    \ argument labels 'x:n:' in call\n        return is_simple_power(x, 7)\n     \
    \                         ^\n                               x: n: \n/tmp/tmpmhlhp8bj.swift:38:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ 8)\n                              ^\n                               x: n: \n\
    /tmp/tmpmhlhp8bj.swift:41:31: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, 9)\n                              ^\n     \
    \                          x: n: \n/tmp/tmpmhlhp8bj.swift:44:31: error: missing\
    \ argument l"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    return x == (n**x)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpdsmtovqw.swift:13:19: error: cannot find operator '**' in scope\n\
    \    return x == (n**x)\n                  ^~\n"
  stdout: ''
  timestamp: 1659824614
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    return x == n ** Int(x)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpuzzfo_ie.swift:13:19: error: cannot find operator '**' in scope\n\
    \    return x == n ** Int(x)\n                  ^~\n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n        return\
    \ true\n    }\n    if n == 0 {\n        return false\n    }\n    if x == 1 {\n\
    \        return true\n    }\n    if x == 0 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return is_simple_power(x, n//2)\n    }\n    return\
    \ is_simple_power(x, n-1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp2zzqgqby.swift:27:5: error: expected ')' in expression list\n \
    \   }\n    ^\n/tmp/tmp2zzqgqby.swift:26:31: note: to match this opening '('\n\
    \        return is_simple_power(x, n//2)\n                              ^\n/tmp/tmp2zzqgqby.swift:26:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ n//2)\n                              ^\n                               x: n:\
    \ \n/tmp/tmp2zzqgqby.swift:28:27: error: missing argument labels 'x:n:' in call\n\
    \    return is_simple_power(x, n-1)\n                          ^\n           \
    \                x: n: \n"
  stdout: ''
  timestamp: 1659824614
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n        return\
    \ true\n    }\n    if n == 1 {\n        return true\n    }\n    if n%2 == 0 {\n\
    \        return is_simple_power(x, n/2)\n    }\n    if n%3 == 0 {\n        return\
    \ is_simple_power(x, n/3)\n    }\n    if n%5 == 0 {\n        return is_simple_power(x,\
    \ n/5)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmppg8y6_8g.swift:20:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n/2)\n                             \
    \ ^\n                               x: n: \n/tmp/tmppg8y6_8g.swift:23:31: error:\
    \ missing argument labels 'x:n:' in call\n        return is_simple_power(x, n/3)\n\
    \                              ^\n                               x: n: \n/tmp/tmppg8y6_8g.swift:26:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ n/5)\n                              ^\n                               x: n:\
    \ \n"
  stdout: ''
  timestamp: 1659824614
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n        return\
    \ true\n    }\n    if x == n {\n        return true\n    }\n    if n <= 1 {\n\
    \        return false\n    }\n    if n % 2 == 0 {\n        return is_simple_power(x,\
    \ n//2)\n    }\n    return is_simple_power(x, n-1)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpd6np16in.swift:24:5: error: expected ')' in expression list\n \
    \   }\n    ^\n/tmp/tmpd6np16in.swift:23:31: note: to match this opening '('\n\
    \        return is_simple_power(x, n//2)\n                              ^\n/tmp/tmpd6np16in.swift:23:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ n//2)\n                              ^\n                               x: n:\
    \ \n/tmp/tmpd6np16in.swift:25:27: error: missing argument labels 'x:n:' in call\n\
    \    return is_simple_power(x, n-1)\n                          ^\n           \
    \                x: n: \n"
  stdout: ''
  timestamp: 1659824614
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n        return\
    \ true\n    }\n    if n == 0 {\n        return false\n    }\n    if n % 2 == 0\
    \ {\n        return is_simple_power(x, n / 2)\n    }\n    return is_simple_power(x\
    \ * x, n / 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpj14sdb_2.swift:20:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n / 2)\n                           \
    \   ^\n                               x: n: \n/tmp/tmpj14sdb_2.swift:22:27: error:\
    \ missing argument labels 'x:n:' in call\n    return is_simple_power(x * x, n\
    \ / 2)\n                          ^\n                           x:     n: \n"
  stdout: ''
  timestamp: 1659824614
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n        return\
    \ true\n    }\n    if x == 1 {\n        return true\n    }\n    if x == n {\n\
    \        return true\n    }\n    if n % x == 0 {\n        return is_simple_power(x,\
    \ n-1)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpylabkyhr.swift:23:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n        return\
    \ true\n    }\n    if x == n {\n        return true\n    }\n    if n % x == 0\
    \ {\n        return is_simple_power(x, n-1)\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpj_8d321a.swift:20:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    guard n >= 1 else {\n    \
    \    return false\n    }\n    guard x != 0 else {\n        return false\n    }\n\
    \    var result = true\n    var power = 1\n    while n > 1 {\n        if n % power\
    \ == 0 {\n            result = false\n            break\n        }\n        power\
    \ = power * 2\n        n = n / 2\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpwrhdf1n6.swift:27:9: error: cannot assign to value: 'n' is a 'let'\
    \ constant\n        n = n / 2\n        ^\n"
  stdout: ''
  timestamp: 1659824614
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n        return\
    \ true\n    }\n    if n == 0 {\n        return false\n    }\n    if x == 1 {\n\
    \        return true\n    }\n    if x == 0 {\n        return false\n    }\n  \
    \  if x == n {\n        return true\n    }\n    if x % n == 0 {\n        return\
    \ is_simple_power(x / n, n)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmps_ctdprs.swift:29:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x / n, n)\n                           \
    \   ^\n                               x:     n: \n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    return is_simple_power_impl(x,\
    \ n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(is_simple_power(x: 16, n: 2)\
    \ == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp049zxv5o.swift:13:12: error: cannot find 'is_simple_power_impl'\
    \ in scope\n    return is_simple_power_impl(x, n)\n           ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n        return\
    \ true\n    }\n    if n == 1 {\n        return true\n    }\n    if x == n {\n\
    \        return true\n    }\n    if n % 2 == 0 {\n        return is_simple_power(x,\
    \ n / 2)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpv6vntz5s.swift:23:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n / 2)\n                           \
    \   ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824614
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n        return\
    \ true\n    }\n    if n == 2 {\n        return true\n    }\n    if n == 3 {\n\
    \        return true\n    }\n    if n == 4 {\n        return true\n    }\n   \
    \ if n == 5 {\n        return true\n    }\n    if n == 6 {\n        return true\n\
    \    }\n    if n == 7 {\n        return true\n    }\n    if n == 8 {\n       \
    \ return true\n    }\n    if n == 9 {\n        return true\n    }\n    if n ==\
    \ 10 {\n        return true\n    }\n    if n == 11 {\n        return true\n  \
    \  }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n       \
    \ return true\n    }\n    if n == 14 {\n        return true\n    }\n    if n ==\
    \ 15 {\n        return true\n    }\n    if n == 16 {\n        return true\n  \
    \  }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n       \
    \ return true\n    }\n    if n == 19 {\n        return true\n    }\n    if n ==\
    \ 20 {\n        return true\n    }\n    if n == 21 {\n        return true\n  \
    \  }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n       \
    \ return true\n    }\n    if n == 24 {\n        return true\n    }\n    if n ==\
    \ 25 {\n        return true\n    }\n    if n == 26 {\n        return true\n  \
    \  }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n       \
    \ return true\n    }\n    if n == 29 {\n        return true\n    }\n    if n ==\
    \ 30 {\n        return true\n    }\n    if n == 31 {\n        return true\n  \
    \  }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n       \
    \ return true\n    }\n    if n == 34 {\n        return true\n    }\n    if n ==\
    \ 35 {\n        return true\n    }\n    if n == 36 {\n        return true\n  \
    \  }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n       \
    \ return true\n    }\n    if n == 39 {\n        return true\n    }\n    if n ==\
    \ 40 {\n        return true\n    }\n    if n == 41 {\n        return true\n  \
    \  }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n       \
    \ return true\n    }\n    if n == 44 {\n        return true\n    }\n    if n ==\
    \ 45 {\n        return true\n    }\n    if n == 46 {\n        return true\n  \
    \  }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n       \
    \ return true\n    }\n    if n == 49 {\n        return true\n    }\n    if n ==\
    \ 50 {\n        return true\n    }\n    if n == 51 {\n        return true\n  \
    \  }\n    if n == 52 {\n        return \n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x: 143214,\
    \ n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpyvq3gzkc.swift:192:45: error: expected '}' at end of brace statement\n\
    assert(is_simple_power(x: 1, n: 12) == true)\n                               \
    \             ^\n/tmp/tmpyvq3gzkc.swift:12:46: note: to match this opening '{'\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n                             \
    \                ^\n/tmp/tmpyvq3gzkc.swift:167:9: error: non-void function should\
    \ return a value\n        return \n        ^\n/tmp/tmpyvq3gzkc.swift:171:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n        return\
    \ true\n    }\n    if x == n {\n        return true\n    }\n    if n % x == 0\
    \ {\n        return is_simple_power(x, n//x)\n    } else {\n        return false\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp_1t0sviv.swift:21:5: error: expected ')' in expression list\n \
    \   } else {\n    ^\n/tmp/tmp_1t0sviv.swift:20:31: note: to match this opening\
    \ '('\n        return is_simple_power(x, n//x)\n                             \
    \ ^\n/tmp/tmp_1t0sviv.swift:20:31: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, n//x)\n                              ^\n  \
    \                             x: n: \n"
  stdout: ''
  timestamp: 1659824614
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n        return\
    \ true\n    }\n    if x == 1 {\n        return true\n    }\n    if x == n {\n\
    \        return true\n    }\n    if n % x == 0 {\n        return is_simple_power(x,\
    \ n-1)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpylabkyhr.swift:23:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n        return\
    \ true\n    }\n    if x == 1 {\n        return true\n    }\n    if x == n {\n\
    \        return true\n    }\n    if n % 2 == 0 {\n        return is_simple_power(x,\
    \ n/2)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7nyl5yis.swift:23:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n/2)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    return is_simple_power_impl(x,\
    \ n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(is_simple_power(x: 16, n: 2)\
    \ == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp049zxv5o.swift:13:12: error: cannot find 'is_simple_power_impl'\
    \ in scope\n    return is_simple_power_impl(x, n)\n           ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824613
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    guard n >= 1 else {\n    \
    \    return false\n    }\n    var result = true\n    var power = 1\n    while\
    \ n > power {\n        power = power * n\n        result = result && (power ==\
    \ x)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpgjpzeoyr/tmpgjpzeoyr.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6334c97c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b633498eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b633498e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b633498d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgjpzeoyr                        0x00005577a3e611b6 <unavailable> + 4534

    5    libc.so.6                          0x00002b6334e83460 __libc_start_main +
    245

    6    tmpgjpzeoyr                        0x00005577a3e60e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824614
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n        return\
    \ true\n    }\n    if x == n {\n        return true\n    }\n    if n % x == 0\
    \ {\n        return is_simple_power(x, n-1)\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpj_8d321a.swift:20:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n        return\
    \ true\n    }\n    if n == 1 {\n        return true\n    }\n    if x == n {\n\
    \        return true\n    }\n    if n % 2 == 0 {\n        return is_simple_power(x,\
    \ n/2)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpmqxis1g6.swift:23:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n/2)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824614
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    return is_simple_power_impl(x,\
    \ n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(is_simple_power(x: 16, n: 2)\
    \ == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp049zxv5o.swift:13:12: error: cannot find 'is_simple_power_impl'\
    \ in scope\n    return is_simple_power_impl(x, n)\n           ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n        return\
    \ true\n    }\n    if n == 1 {\n        return true\n    }\n    if n == 2 {\n\
    \        return is_simple_power(x, 2)\n    }\n    if n == 3 {\n        return\
    \ is_simple_power(x, 3)\n    }\n    if n == 4 {\n        return is_simple_power(x,\
    \ 4)\n    }\n    if n == 5 {\n        return is_simple_power(x, 5)\n    }\n  \
    \  if n == 6 {\n        return is_simple_power(x, 6)\n    }\n    if n == 7 {\n\
    \        return is_simple_power(x, 7)\n    }\n    if n == 8 {\n        return\
    \ is_simple_power(x, 8)\n    }\n    if n == 9 {\n        return is_simple_power(x,\
    \ 9)\n    }\n    if n == 10 {\n        return is_simple_power(x, 10)\n    }\n\
    \    if n == 11 {\n        return is_simple_power(x, 11)\n    }\n    if n == 12\
    \ {\n        return is_simple_power(x, 12)\n    }\n    if n == 13 {\n        return\
    \ is_simple_power(x, 13)\n    }\n    if n == 14 {\n        return is_simple_power(x,\
    \ 14)\n    }\n    if n == 15 {\n        return is_simple_power(x, 15)\n    }\n\
    \    if n == 16 {\n        return is_simple_power(x, 16)\n    }\n    if n == 17\
    \ {\n        return is_simple_power(x, 17)\n    }\n    if n == 18 {\n        return\
    \ is_simple_power(x, 18)\n    }\n    if n == 19 {\n        return is_simple_power(x,\
    \ 19)\n    }\n    if n == 20 {\n        return is_simple_power(x, 20)\n    }\n\
    \    if n == 21 {\n        return is_simple_power(x, 21)\n    }\n    if n == 22\
    \ {\n        return is_simple_power(x, 22)\n    }\n    if n == 23 {\n        return\
    \ is_simple_power(x, 23)\n    }\n    if n == 24 {\n        return is_simple_power(x,\
    \ 24)\n    }\n    if n == 25 {\n        return is_simple_power(x, 25)\n    }\n\
    \    if n == 26 {\n        return is_simple_power(x, 26)\n    }\n    if n == 27\
    \ {\n        return is_simple_power(x, 27)\n    }\n    if n == 28 {\n        return\
    \ is_simple_power(x, 28)\n    }\n    if n == 29 {\n        return is_simple_power(x,\
    \ 29)\n    }\n    if n == 30 {\n        return is_simple_power(x, 30)\n    }\n\
    \    if n == 31 {\n        return is_simple_power(x, 31)\n    }\n    if n == 32\
    \ {\n        return is_simple_power(x, 32)\n    }\n    if n == 33 {\n        return\
    \ is_simple_power(x, 33)\n    }\n    if n == 34 {\n        return is_simple_power(x,\
    \ 34)\n    }\n    if n == 35 {\n        return is_simple_power(x, 35)\n    }\n\
    \    if n == 36 {\n        return is_simple_power(x, 36\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpmhlhp8bj.swift:123:1: error: expected ')' in expression list\n\
    }\n^\n/tmp/tmpmhlhp8bj.swift:122:31: note: to match this opening '('\n       \
    \ return is_simple_power(x, 36\n                              ^\n/tmp/tmpmhlhp8bj.swift:147:45:\
    \ error: expected '}' at end of brace statement\nassert(is_simple_power(x: 1,\
    \ n: 12) == true)\n                                            ^\n/tmp/tmpmhlhp8bj.swift:12:46:\
    \ note: to match this opening '{'\nfunc is_simple_power(x: Int, n: Int) -> Bool\
    \ {\n                                             ^\n/tmp/tmpmhlhp8bj.swift:20:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ 2)\n                              ^\n                               x: n: \n\
    /tmp/tmpmhlhp8bj.swift:23:31: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, 3)\n                              ^\n     \
    \                          x: n: \n/tmp/tmpmhlhp8bj.swift:26:31: error: missing\
    \ argument labels 'x:n:' in call\n        return is_simple_power(x, 4)\n     \
    \                         ^\n                               x: n: \n/tmp/tmpmhlhp8bj.swift:29:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ 5)\n                              ^\n                               x: n: \n\
    /tmp/tmpmhlhp8bj.swift:32:31: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, 6)\n                              ^\n     \
    \                          x: n: \n/tmp/tmpmhlhp8bj.swift:35:31: error: missing\
    \ argument labels 'x:n:' in call\n        return is_simple_power(x, 7)\n     \
    \                         ^\n                               x: n: \n/tmp/tmpmhlhp8bj.swift:38:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ 8)\n                              ^\n                               x: n: \n\
    /tmp/tmpmhlhp8bj.swift:41:31: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, 9)\n                              ^\n     \
    \                          x: n: \n/tmp/tmpmhlhp8bj.swift:44:31: error: missing\
    \ argument l"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    var result = true\n    var\
    \ power = 1\n    while n > 0 {\n        if x % n == 0 {\n            result =\
    \ false\n            break\n        }\n        power *= n\n        x /= n\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpumxbhjmg.swift:21:11: error: left side of mutating operator isn't\
    \ mutable: 'x' is a 'let' constant\n        x /= n\n        ~ ^\n"
  stdout: ''
  timestamp: 1659824614
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n        return\
    \ true\n    }\n    if x == n {\n        return true\n    }\n    if n < 0 {\n \
    \       return false\n    }\n    if n == 1 {\n        return true\n    }\n   \
    \ if n == 0 {\n        return false\n    }\n    if n == 2 {\n        return is_simple_power(x,\
    \ n-1)\n    }\n    if n == 3 {\n        return is_simple_power(x, n-2) || is_simple_power(x,\
    \ n-2)\n    }\n    if n == 4 {\n        return is_simple_power(x, n-3) || is_simple_power(x,\
    \ n-3)\n    }\n    if n == 5 {\n        return is_simple_power(x, n-4) || is_simple_power(x,\
    \ n-4)\n    }\n    if n == 6 {\n        return is_simple_power(x, n-5) || is_simple_power(x,\
    \ n-5)\n    }\n    if n == 7 {\n        return is_simple_power(x, n-6) || is_simple_power(x,\
    \ n-6)\n    }\n    if n == 8 {\n        return is_simple_power(x, n-7) || is_simple_power(x,\
    \ n-7)\n    }\n    if n == 9 {\n        return is_simple_power(x, n-8) || is_simple_power(x,\
    \ n-8)\n    }\n    if n == 10 {\n        return is_simple_power(x, n-9) || is_simple_power(x,\
    \ n-9)\n    }\n    if n == 11 {\n        return is_simple_power(x, n-10) || is_simple_power(x,\
    \ n-10)\n    }\n    if n == 12 {\n        return is_simple_power(x, n-11) || is_simple_power(x,\
    \ n-11)\n    }\n    if n == 13 {\n        return is_simple_power(x, n-12) || is_simple_power(x,\
    \ n-12)\n    }\n    if n == 14 {\n        return is_simple_power(x, n-13) || is_simple_power(x,\
    \ n-13)\n    }\n    if n == 15 {\n        return is_simple_power(x, n-14) || is_simple_power(x,\
    \ n-14)\n    }\n    if n == 16 {\n        return is_simple_power(x, n-15) || is_simple_power(x,\
    \ n-15)\n    }\n    if n == 17 {\n        return is_simple_power(x, n-16) || is_simple_power(x,\
    \ n-16)\n    }\n    if n == 18 {\n        return is_simple_power(x, n-17) || is_simple_power(x,\
    \ n-17)\n    }\n    if n == 19 {\n        return is_simple_power(x, n-18) || is_simple_power(x,\
    \ n-18)\n    }\n    if n == 20 {\n        return is_simple_power(x, n-19) || is_simple_power(x,\
    \ n-19)\n    }\n    if n == 21 {\n        return is_simple_power(x, n-20) || is_simple_power(x,\
    \ n-20)\n    }\n    if n == 22 {\n        return is_simple_power(x, n-21) || is_simple_power(x,\
    \ n-21)\n    }\n    if n == 23 {\n        return is_simple_\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp8pdmjcxf.swift:117:45: error: expected '}' at end of brace statement\n\
    assert(is_simple_power(x: 1, n: 12) == true)\n                               \
    \             ^\n/tmp/tmp8pdmjcxf.swift:12:46: note: to match this opening '{'\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n                             \
    \                ^\n/tmp/tmp8pdmjcxf.swift:29:31: error: missing argument labels\
    \ 'x:n:' in call\n        return is_simple_power(x, n-1)\n                   \
    \           ^\n                               x: n: \n/tmp/tmp8pdmjcxf.swift:32:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ n-2) || is_simple_power(x, n-2)\n                              ^\n         \
    \                      x: n: \n/tmp/tmp8pdmjcxf.swift:32:58: error: missing argument\
    \ labels 'x:n:' in call\n        return is_simple_power(x, n-2) || is_simple_power(x,\
    \ n-2)\n                                                         ^\n         \
    \                                                 x: n: \n/tmp/tmp8pdmjcxf.swift:35:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ n-3) || is_simple_power(x, n-3)\n                              ^\n         \
    \                      x: n: \n/tmp/tmp8pdmjcxf.swift:35:58: error: missing argument\
    \ labels 'x:n:' in call\n        return is_simple_power(x, n-3) || is_simple_power(x,\
    \ n-3)\n                                                         ^\n         \
    \                                                 x: n: \n/tmp/tmp8pdmjcxf.swift:38:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ n-4) || is_simple_power(x, n-4)\n                              ^\n         \
    \                      x: n: \n/tmp/tmp8pdmjcxf.swift:38:58: error: missing argument\
    \ labels 'x:n:' in call\n        return is_simple_power(x, n-4) || is_simple_power(x,\
    \ n-4)\n                                                         ^\n         \
    \                                                 x: n: \n/tmp/tmp8pdmjcxf.swift:41:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_powe"
  stdout: ''
  timestamp: 1659824614
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    return x == n ** Int(x)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpuzzfo_ie.swift:13:19: error: cannot find operator '**' in scope\n\
    \    return x == n ** Int(x)\n                  ^~\n"
  stdout: ''
  timestamp: 1659824613
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n        return\
    \ true\n    }\n    if n == 1 {\n        return true\n    }\n    if x == n {\n\
    \        return true\n    }\n    if x == n*n*n {\n        return true\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmphydahttf/tmphydahttf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aefbb136c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aefbae2db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aefbae2d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aefbae2c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphydahttf                        0x000055f5f48351b6 <unavailable> + 4534

    5    libc.so.6                          0x00002aefbb322460 __libc_start_main +
    245

    6    tmphydahttf                        0x000055f5f4834e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824614
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n        return\
    \ true\n    }\n    if x == 1 {\n        return true\n    }\n    if x == n {\n\
    \        return true\n    }\n    if n % 2 == 0 {\n        return is_simple_power(x,\
    \ n/2)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7nyl5yis.swift:23:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n/2)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n        return\
    \ true\n    }\n    if n == 0 {\n        return false\n    }\n    if x == 1 {\n\
    \        return true\n    }\n    if x == 0 {\n        return false\n    }\n  \
    \  if x == n {\n        return true\n    }\n    if x == n+1 {\n        return\
    \ true\n    }\n    if x == n-1 {\n        return true\n    }\n    if x == n+2\
    \ {\n        return true\n    }\n    if x == n+3 {\n        return true\n    }\n\
    \    if x == n+4 {\n        return true\n    }\n    if x == n+5 {\n        return\
    \ true\n    }\n    if x == n+6 {\n        return true\n    }\n    if x == n+7\
    \ {\n        return true\n    }\n    if x == n+8 {\n        return true\n    }\n\
    \    if x == n+9 {\n        return true\n    }\n    if x == n+10 {\n        return\
    \ true\n    }\n    if x == n+11 {\n        return true\n    }\n    if x == n+12\
    \ {\n        return true\n    }\n    if x == n+13 {\n        return true\n   \
    \ }\n    if x == n+14 {\n        return true\n    }\n    if x == n+15 {\n    \
    \    return true\n    }\n    if x == n+16 {\n        return true\n    }\n    if\
    \ x == n+17 {\n        return true\n    }\n    if x == n+18 {\n        return\
    \ true\n    }\n    if x == n+19 {\n        return true\n    }\n    if x == n+20\
    \ {\n        return true\n    }\n    if x == n+21 {\n        return true\n   \
    \ }\n    if x == n+22 {\n        return true\n    }\n    if x == n+23 {\n    \
    \    return true\n    }\n    if x == n+24 {\n        return true\n    }\n    if\
    \ x == n+25 {\n        return true\n    }\n    if x == n+26 {\n        return\
    \ true\n    }\n    if x == n+27 {\n        return true\n    }\n    if x == n+28\
    \ {\n        return true\n    }\n    if x == n+29 {\n        return true\n   \
    \ }\n    if x == n+30 {\n        return true\n    }\n    if x == n+31 {\n    \
    \    return true\n    }\n    if x == n+32 {\n        return true\n    }\n    if\
    \ x == n+33 {\n        return true\n    }\n    if x == n+34 {\n        return\
    \ true\n    }\n    if x == n+35 {\n        return true\n    }\n    if x == n+36\
    \ {\n        return true\n    }\n    if x == n+37 {\n        return true\n   \
    \ }\n    if x == n+38 {\n        return true\n    }\n    if x == n+\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpfx3ar_98.swift:145:15: error: expected '{' after 'if' condition\n\
    \    if x == n+\n              ^\n/tmp/tmpfx3ar_98.swift:145:14: error: '+' is\
    \ not a postfix unary operator\n    if x == n+\n             ^\n"
  stdout: ''
  timestamp: 1659824614
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    return is_simple_power_impl(x,\
    \ n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(is_simple_power(x: 16, n: 2)\
    \ == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp049zxv5o.swift:13:12: error: cannot find 'is_simple_power_impl'\
    \ in scope\n    return is_simple_power_impl(x, n)\n           ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    return x == n ** Int(x)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpuzzfo_ie.swift:13:19: error: cannot find operator '**' in scope\n\
    \    return x == n ** Int(x)\n                  ^~\n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n        return\
    \ true\n    }\n    if x == 1 {\n        return true\n    }\n    if x == n {\n\
    \        return true\n    }\n    if n % x == 0 {\n        return is_simple_power(x,\
    \ n-1)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpylabkyhr.swift:23:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n        return\
    \ true\n    }\n    if n == 1 {\n        return true\n    }\n    if x == n {\n\
    \        return true\n    }\n    if x % n == 0 {\n        return is_simple_power(x\
    \ / n, n)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x: 143214,\
    \ n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpya9u_uwc.swift:23:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x / n, n)\n                           \
    \   ^\n                               x:     n: \n"
  stdout: ''
  timestamp: 1659824614
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n        return\
    \ true\n    }\n    if x == 1 {\n        return true\n    }\n    if x == n {\n\
    \        return true\n    }\n    if n % x == 0 {\n        return is_simple_power(x,\
    \ n-1)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpylabkyhr.swift:23:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    return is_simple_power_impl(x,\
    \ n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(is_simple_power(x: 16, n: 2)\
    \ == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp049zxv5o.swift:13:12: error: cannot find 'is_simple_power_impl'\
    \ in scope\n    return is_simple_power_impl(x, n)\n           ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n        return\
    \ true\n    }\n    if n == 1 {\n        return true\n    }\n    if n == 2 {\n\
    \        return is_simple_power(x, 2)\n    }\n    if n == 3 {\n        return\
    \ is_simple_power(x, 3)\n    }\n    if n == 4 {\n        return is_simple_power(x,\
    \ 4)\n    }\n    if n == 5 {\n        return is_simple_power(x, 5)\n    }\n  \
    \  if n == 6 {\n        return is_simple_power(x, 6)\n    }\n    if n == 7 {\n\
    \        return is_simple_power(x, 7)\n    }\n    if n == 8 {\n        return\
    \ is_simple_power(x, 8)\n    }\n    if n == 9 {\n        return is_simple_power(x,\
    \ 9)\n    }\n    if n == 10 {\n        return is_simple_power(x, 10)\n    }\n\
    \    if n == 11 {\n        return is_simple_power(x, 11)\n    }\n    if n == 12\
    \ {\n        return is_simple_power(x, 12)\n    }\n    if n == 13 {\n        return\
    \ is_simple_power(x, 13)\n    }\n    if n == 14 {\n        return is_simple_power(x,\
    \ 14)\n    }\n    if n == 15 {\n        return is_simple_power(x, 15)\n    }\n\
    \    if n == 16 {\n        return is_simple_power(x, 16)\n    }\n    if n == 17\
    \ {\n        return is_simple_power(x, 17)\n    }\n    if n == 18 {\n        return\
    \ is_simple_power(x, 18)\n    }\n    if n == 19 {\n        return is_simple_power(x,\
    \ 19)\n    }\n    if n == 20 {\n        return is_simple_power(x, 20)\n    }\n\
    \    if n == 21 {\n        return is_simple_power(x, 21)\n    }\n    if n == 22\
    \ {\n        return is_simple_power(x, 22)\n    }\n    if n == 23 {\n        return\
    \ is_simple_power(x, 23)\n    }\n    if n == 24 {\n        return is_simple_power(x,\
    \ 24)\n    }\n    if n == 25 {\n        return is_simple_power(x, 25)\n    }\n\
    \    if n == 26 {\n        return is_simple_power(x, 26)\n    }\n    if n == 27\
    \ {\n        return is_simple_power(x, 27)\n    }\n    if n == 28 {\n        return\
    \ is_simple_power(x, 28)\n    }\n    if n == 29 {\n        return is_simple_power(x,\
    \ 29)\n    }\n    if n == 30 {\n        return is_simple_power(x, 30)\n    }\n\
    \    if n == 31 {\n        return is_simple_power(x, 31)\n    }\n    if n == 32\
    \ {\n        return is_simple_power(x, 32)\n    }\n    if n == 33 {\n        return\
    \ is_simple_power(x, 33)\n    }\n    if n == 34 {\n        return is_simple_power(x,\
    \ 34)\n    }\n    if n == 35 {\n        return is_simple_power(x, 35)\n    }\n\
    \    if n == 36 {\n        return is_simple_power(x, 36\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpmhlhp8bj.swift:123:1: error: expected ')' in expression list\n\
    }\n^\n/tmp/tmpmhlhp8bj.swift:122:31: note: to match this opening '('\n       \
    \ return is_simple_power(x, 36\n                              ^\n/tmp/tmpmhlhp8bj.swift:147:45:\
    \ error: expected '}' at end of brace statement\nassert(is_simple_power(x: 1,\
    \ n: 12) == true)\n                                            ^\n/tmp/tmpmhlhp8bj.swift:12:46:\
    \ note: to match this opening '{'\nfunc is_simple_power(x: Int, n: Int) -> Bool\
    \ {\n                                             ^\n/tmp/tmpmhlhp8bj.swift:20:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ 2)\n                              ^\n                               x: n: \n\
    /tmp/tmpmhlhp8bj.swift:23:31: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, 3)\n                              ^\n     \
    \                          x: n: \n/tmp/tmpmhlhp8bj.swift:26:31: error: missing\
    \ argument labels 'x:n:' in call\n        return is_simple_power(x, 4)\n     \
    \                         ^\n                               x: n: \n/tmp/tmpmhlhp8bj.swift:29:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ 5)\n                              ^\n                               x: n: \n\
    /tmp/tmpmhlhp8bj.swift:32:31: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, 6)\n                              ^\n     \
    \                          x: n: \n/tmp/tmpmhlhp8bj.swift:35:31: error: missing\
    \ argument labels 'x:n:' in call\n        return is_simple_power(x, 7)\n     \
    \                         ^\n                               x: n: \n/tmp/tmpmhlhp8bj.swift:38:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ 8)\n                              ^\n                               x: n: \n\
    /tmp/tmpmhlhp8bj.swift:41:31: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, 9)\n                              ^\n     \
    \                          x: n: \n/tmp/tmpmhlhp8bj.swift:44:31: error: missing\
    \ argument l"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    return is_simple_power_impl(x,\
    \ n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(is_simple_power(x: 16, n: 2)\
    \ == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp049zxv5o.swift:13:12: error: cannot find 'is_simple_power_impl'\
    \ in scope\n    return is_simple_power_impl(x, n)\n           ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n        return\
    \ true\n    }\n    if x == 1 {\n        return true\n    }\n    if x == n {\n\
    \        return true\n    }\n    if n % x == 0 {\n        return is_simple_power(x,\
    \ n/x+1)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpfdub_u84.swift:23:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n/x+1)\n                           \
    \   ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824614
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    return is_simple_power_impl(x,\
    \ n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(is_simple_power(x: 16, n: 2)\
    \ == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp049zxv5o.swift:13:12: error: cannot find 'is_simple_power_impl'\
    \ in scope\n    return is_simple_power_impl(x, n)\n           ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n        return\
    \ true\n    }\n    if n == 1 {\n        return true\n    }\n    if n == 2 {\n\
    \        return is_simple_power(x, 2)\n    }\n    if n == 3 {\n        return\
    \ is_simple_power(x, 3)\n    }\n    if n == 4 {\n        return is_simple_power(x,\
    \ 4)\n    }\n    if n == 5 {\n        return is_simple_power(x, 5)\n    }\n  \
    \  if n == 6 {\n        return is_simple_power(x, 6)\n    }\n    if n == 7 {\n\
    \        return is_simple_power(x, 7)\n    }\n    if n == 8 {\n        return\
    \ is_simple_power(x, 8)\n    }\n    if n == 9 {\n        return is_simple_power(x,\
    \ 9)\n    }\n    if n == 10 {\n        return is_simple_power(x, 10)\n    }\n\
    \    if n == 11 {\n        return is_simple_power(x, 11)\n    }\n    if n == 12\
    \ {\n        return is_simple_power(x, 12)\n    }\n    if n == 13 {\n        return\
    \ is_simple_power(x, 13)\n    }\n    if n == 14 {\n        return is_simple_power(x,\
    \ 14)\n    }\n    if n == 15 {\n        return is_simple_power(x, 15)\n    }\n\
    \    if n == 16 {\n        return is_simple_power(x, 16)\n    }\n    if n == 17\
    \ {\n        return is_simple_power(x, 17)\n    }\n    if n == 18 {\n        return\
    \ is_simple_power(x, 18)\n    }\n    if n == 19 {\n        return is_simple_power(x,\
    \ 19)\n    }\n    if n == 20 {\n        return is_simple_power(x, 20)\n    }\n\
    \    if n == 21 {\n        return is_simple_power(x, 21)\n    }\n    if n == 22\
    \ {\n        return is_simple_power(x, 22)\n    }\n    if n == 23 {\n        return\
    \ is_simple_power(x, 23)\n    }\n    if n == 24 {\n        return is_simple_power(x,\
    \ 24)\n    }\n    if n == 25 {\n        return is_simple_power(x, 25)\n    }\n\
    \    if n == 26 {\n        return is_simple_power(x, 26)\n    }\n    if n == 27\
    \ {\n        return is_simple_power(x, 27)\n    }\n    if n == 28 {\n        return\
    \ is_simple_power(x, 28)\n    }\n    if n == 29 {\n        return is_simple_power(x,\
    \ 29)\n    }\n    if n == 30 {\n        return is_simple_power(x, 30)\n    }\n\
    \    if n == 31 {\n        return is_simple_power(x, 31)\n    }\n    if n == 32\
    \ {\n        return is_simple_power(x, 32)\n    }\n    if n == 33 {\n        return\
    \ is_simple_power(x, 33)\n    }\n    if n == 34 {\n        return is_simple_power(x,\
    \ 34)\n    }\n    if n == 35 {\n        return is_simple_power(x, 35)\n    }\n\
    \    if n == 36 {\n        return is_simple_power(x, 36\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpmhlhp8bj.swift:123:1: error: expected ')' in expression list\n\
    }\n^\n/tmp/tmpmhlhp8bj.swift:122:31: note: to match this opening '('\n       \
    \ return is_simple_power(x, 36\n                              ^\n/tmp/tmpmhlhp8bj.swift:147:45:\
    \ error: expected '}' at end of brace statement\nassert(is_simple_power(x: 1,\
    \ n: 12) == true)\n                                            ^\n/tmp/tmpmhlhp8bj.swift:12:46:\
    \ note: to match this opening '{'\nfunc is_simple_power(x: Int, n: Int) -> Bool\
    \ {\n                                             ^\n/tmp/tmpmhlhp8bj.swift:20:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ 2)\n                              ^\n                               x: n: \n\
    /tmp/tmpmhlhp8bj.swift:23:31: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, 3)\n                              ^\n     \
    \                          x: n: \n/tmp/tmpmhlhp8bj.swift:26:31: error: missing\
    \ argument labels 'x:n:' in call\n        return is_simple_power(x, 4)\n     \
    \                         ^\n                               x: n: \n/tmp/tmpmhlhp8bj.swift:29:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ 5)\n                              ^\n                               x: n: \n\
    /tmp/tmpmhlhp8bj.swift:32:31: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, 6)\n                              ^\n     \
    \                          x: n: \n/tmp/tmpmhlhp8bj.swift:35:31: error: missing\
    \ argument labels 'x:n:' in call\n        return is_simple_power(x, 7)\n     \
    \                         ^\n                               x: n: \n/tmp/tmpmhlhp8bj.swift:38:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ 8)\n                              ^\n                               x: n: \n\
    /tmp/tmpmhlhp8bj.swift:41:31: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, 9)\n                              ^\n     \
    \                          x: n: \n/tmp/tmpmhlhp8bj.swift:44:31: error: missing\
    \ argument l"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n        return\
    \ true\n    }\n    if x == 1 {\n        return true\n    }\n    if x == n {\n\
    \        return true\n    }\n    if n % 2 == 0 {\n        return is_simple_power(x,\
    \ n/2)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7nyl5yis.swift:23:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n/2)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n        return\
    \ true\n    }\n    if n == 1 {\n        return true\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n == 4 {\n        return true\n    }\n    if n == 5 {\n        return true\n\
    \    }\n    if n == 6 {\n        return true\n    }\n    if n == 7 {\n       \
    \ return true\n    }\n    if n == 8 {\n        return true\n    }\n    if n ==\
    \ 9 {\n        return true\n    }\n    if n == 10 {\n        return true\n   \
    \ }\n    if n == 11 {\n        return true\n    }\n    if n == 12 {\n        return\
    \ true\n    }\n    if n == 13 {\n        return true\n    }\n    if n == 14 {\n\
    \        return true\n    }\n    if n == 15 {\n        return true\n    }\n  \
    \  if n == 16 {\n        return true\n    }\n    if n == 17 {\n        return\
    \ true\n    }\n    if n == 18 {\n        return true\n    }\n    if n == 19 {\n\
    \        return true\n    }\n    if n == 20 {\n        return true\n    }\n  \
    \  if n == 21 {\n        return true\n    }\n    if n == 22 {\n        return\
    \ true\n    }\n    if n == 23 {\n        return true\n    }\n    if n == 24 {\n\
    \        return true\n    }\n    if n == 25 {\n        return true\n    }\n  \
    \  if n == 26 {\n        return true\n    }\n    if n == 27 {\n        return\
    \ true\n    }\n    if n == 28 {\n        return true\n    }\n    if n == 29 {\n\
    \        return true\n    }\n    if n == 30 {\n        return true\n    }\n  \
    \  if n == 31 {\n        return true\n    }\n    if n == 32 {\n        return\
    \ true\n    }\n    if n == 33 {\n        return true\n    }\n    if n == 34 {\n\
    \        return true\n    }\n    if n == 35 {\n        return true\n    }\n  \
    \  if n == 36 {\n        return true\n    }\n    if n == 37 {\n        return\
    \ true\n    }\n    if n == 38 {\n        return true\n    }\n    if n == 39 {\n\
    \        return true\n    }\n    if n == 40 {\n        return true\n    }\n  \
    \  if n == 41 {\n        return true\n    }\n    if n == 42 {\n        return\
    \ true\n    }\n    if n == 43 {\n        return true\n    }\n    if n == 44 {\n\
    \        return true\n    }\n    if n == 45 {\n        return true\n    }\n  \
    \  if n == 46 {\n        return true\n    }\n    if n == 47 {\n        return\
    \ true\n    }\n    if n == 48 {\n        return true\n    }\n    if n == 49 {\n\
    \        return true\n    }\n    if n == 50 {\n        return true\n    }\n  \
    \  if n == 51 {\n        return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x: 143214,\
    \ n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpxd1xcrpr.swift:192:45: error: expected '}' at end of brace statement\n\
    assert(is_simple_power(x: 1, n: 12) == true)\n                               \
    \             ^\n/tmp/tmpxd1xcrpr.swift:12:46: note: to match this opening '{'\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n                             \
    \                ^\n/tmp/tmpxd1xcrpr.swift:171:6: error: operator functions can\
    \ only be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824614
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    return x == n**x\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpd2bur0jn.swift:13:18: error: cannot find operator '**' in scope\n\
    \    return x == n**x\n                 ^~\n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n        return\
    \ true\n    }\n    if n == 0 {\n        return false\n    }\n    if x == 0 {\n\
    \        return false\n    }\n    if x == 1 {\n        return true\n    }\n  \
    \  if x == n {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ is_simple_power(x, n/2)\n    }\n    return is_simple_power(x, n-1)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7whe73l5.swift:29:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n/2)\n                             \
    \ ^\n                               x: n: \n/tmp/tmp7whe73l5.swift:31:27: error:\
    \ missing argument labels 'x:n:' in call\n    return is_simple_power(x, n-1)\n\
    \                          ^\n                           x: n: \n"
  stdout: ''
  timestamp: 1659824614
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n        return\
    \ true\n    }\n    if n == 0 {\n        return false\n    }\n    if x == 1 {\n\
    \        return true\n    }\n    if x == 0 {\n        return false\n    }\n  \
    \  if x == n {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ is_simple_power(x, n/2)\n    }\n    return is_simple_power(x, n-1)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp09v2v0ng.swift:29:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n/2)\n                             \
    \ ^\n                               x: n: \n/tmp/tmp09v2v0ng.swift:31:27: error:\
    \ missing argument labels 'x:n:' in call\n    return is_simple_power(x, n-1)\n\
    \                          ^\n                           x: n: \n"
  stdout: ''
  timestamp: 1659824614
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n        return\
    \ true\n    }\n    if x == n {\n        return true\n    }\n    if n == 1 {\n\
    \        return false\n    }\n    if n == 2 {\n        return is_simple_power(x,\
    \ 3)\n    }\n    if n == 3 {\n        return is_simple_power(x, 5)\n    }\n  \
    \  if n == 4 {\n        return is_simple_power(x, 7)\n    }\n    if n == 5 {\n\
    \        return is_simple_power(x, 9)\n    }\n    if n == 6 {\n        return\
    \ is_simple_power(x, 11)\n    }\n    if n == 7 {\n        return is_simple_power(x,\
    \ 13)\n    }\n    if n == 8 {\n        return is_simple_power(x, 15)\n    }\n\
    \    if n == 9 {\n        return is_simple_power(x, 17)\n    }\n    if n == 10\
    \ {\n        return is_simple_power(x, 19)\n    }\n    if n == 11 {\n        return\
    \ is_simple_power(x, 21)\n    }\n    if n == 12 {\n        return is_simple_power(x,\
    \ 23)\n    }\n    if n == 13 {\n        return is_simple_power(x, 25)\n    }\n\
    \    if n == 14 {\n        return is_simple_power(x, 27)\n    }\n    if n == 15\
    \ {\n        return is_simple_power(x, 29)\n    }\n    if n == 16 {\n        return\
    \ is_simple_power(x, 31)\n    }\n    if n == 17 {\n        return is_simple_power(x,\
    \ 33)\n    }\n    if n == 18 {\n        return is_simple_power(x, 35)\n    }\n\
    \    if n == 19 {\n        return is_simple_power(x, 37)\n    }\n    if n == 20\
    \ {\n        return is_simple_power(x, 39)\n    }\n    if n == 21 {\n        return\
    \ is_simple_power(x, 41)\n    }\n    if n == 22 {\n        return is_simple_power(x,\
    \ 43)\n    }\n    if n == 23 {\n        return is_simple_power(x, 45)\n    }\n\
    \    if n == 24 {\n        return is_simple_power(x, 47)\n    }\n    if n == 25\
    \ {\n        return is_simple_power(x, 49)\n    }\n    if n == 26 {\n        return\
    \ is_simple_power(x, 51)\n    }\n    if n == 27 {\n        return is_simple_power(x,\
    \ 53)\n    }\n    if n == 28 {\n        return is_simple_power(x, 55)\n    }\n\
    \    if n == 29 {\n        return is_simple_power(x, 57)\n    }\n    if n == 30\
    \ {\n        return is_simple_power(x, 59)\n    }\n    if n == 31 {\n        return\
    \ is_simple_power(x, 61)\n    }\n    if n == 32 {\n        return is_simple_power(x,\
    \ 63)\n    }\n    if n == 33 {\n        return is_simple_power(x, 65)\n    }\n\
    \    if n == 34 {\n        return is_simple_power(x, 67)\n    }\n    if n == 35\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpk5b4ac5y.swift:121:15: error: expected '{' after 'if' condition\n\
    \    if n == 35\n              ^\n/tmp/tmpk5b4ac5y.swift:23:31: error: missing\
    \ argument labels 'x:n:' in call\n        return is_simple_power(x, 3)\n     \
    \                         ^\n                               x: n: \n/tmp/tmpk5b4ac5y.swift:26:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ 5)\n                              ^\n                               x: n: \n\
    /tmp/tmpk5b4ac5y.swift:29:31: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, 7)\n                              ^\n     \
    \                          x: n: \n/tmp/tmpk5b4ac5y.swift:32:31: error: missing\
    \ argument labels 'x:n:' in call\n        return is_simple_power(x, 9)\n     \
    \                         ^\n                               x: n: \n/tmp/tmpk5b4ac5y.swift:35:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ 11)\n                              ^\n                               x: n: \n\
    /tmp/tmpk5b4ac5y.swift:38:31: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, 13)\n                              ^\n    \
    \                           x: n: \n/tmp/tmpk5b4ac5y.swift:41:31: error: missing\
    \ argument labels 'x:n:' in call\n        return is_simple_power(x, 15)\n    \
    \                          ^\n                               x: n: \n/tmp/tmpk5b4ac5y.swift:44:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ 17)\n                              ^\n                               x: n: \n\
    /tmp/tmpk5b4ac5y.swift:47:31: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, 19)\n                              ^\n    \
    \                           x: n: \n/tmp/tmpk5b4ac5y.swift:50:31: error: missing\
    \ argument labels 'x:n:' in call\n        return is_simple_power(x, 21)\n    \
    \                          ^\n                               x: n: \n/tmp/tmpk5b4ac5y.swift:53:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,"
  stdout: ''
  timestamp: 1659824614
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n        return\
    \ true\n    }\n    if x == 1 {\n        return true\n    }\n    if x == n {\n\
    \        return true\n    }\n    if x % n == 0 {\n        return is_simple_power(x\
    \ / n, n)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x: 143214,\
    \ n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7ipllg5p.swift:23:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x / n, n)\n                           \
    \   ^\n                               x:     n: \n"
  stdout: ''
  timestamp: 1659824614
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n        return\
    \ true\n    }\n    if n == 1 {\n        return true\n    }\n    if n == 2 {\n\
    \        return is_simple_power(x, 2)\n    }\n    if n == 3 {\n        return\
    \ is_simple_power(x, 3)\n    }\n    if n == 4 {\n        return is_simple_power(x,\
    \ 4)\n    }\n    if n == 5 {\n        return is_simple_power(x, 5)\n    }\n  \
    \  if n == 6 {\n        return is_simple_power(x, 6)\n    }\n    if n == 7 {\n\
    \        return is_simple_power(x, 7)\n    }\n    if n == 8 {\n        return\
    \ is_simple_power(x, 8)\n    }\n    if n == 9 {\n        return is_simple_power(x,\
    \ 9)\n    }\n    if n == 10 {\n        return is_simple_power(x, 10)\n    }\n\
    \    if n == 11 {\n        return is_simple_power(x, 11)\n    }\n    if n == 12\
    \ {\n        return is_simple_power(x, 12)\n    }\n    if n == 13 {\n        return\
    \ is_simple_power(x, 13)\n    }\n    if n == 14 {\n        return is_simple_power(x,\
    \ 14)\n    }\n    if n == 15 {\n        return is_simple_power(x, 15)\n    }\n\
    \    if n == 16 {\n        return is_simple_power(x, 16)\n    }\n    if n == 17\
    \ {\n        return is_simple_power(x, 17)\n    }\n    if n == 18 {\n        return\
    \ is_simple_power(x, 18)\n    }\n    if n == 19 {\n        return is_simple_power(x,\
    \ 19)\n    }\n    if n == 20 {\n        return is_simple_power(x, 20)\n    }\n\
    \    if n == 21 {\n        return is_simple_power(x, 21)\n    }\n    if n == 22\
    \ {\n        return is_simple_power(x, 22)\n    }\n    if n == 23 {\n        return\
    \ is_simple_power(x, 23)\n    }\n    if n == 24 {\n        return is_simple_power(x,\
    \ 24)\n    }\n    if n == 25 {\n        return is_simple_power(x, 25)\n    }\n\
    \    if n == 26 {\n        return is_simple_power(x, 26)\n    }\n    if n == 27\
    \ {\n        return is_simple_power(x, 27)\n    }\n    if n == 28 {\n        return\
    \ is_simple_power(x, 28)\n    }\n    if n == 29 {\n        return is_simple_power(x,\
    \ 29)\n    }\n    if n == 30 {\n        return is_simple_power(x, 30)\n    }\n\
    \    if n == 31 {\n        return is_simple_power(x, 31)\n    }\n    if n == 32\
    \ {\n        return is_simple_power(x, 32)\n    }\n    if n == 33 {\n        return\
    \ is_simple_power(x, 33)\n    }\n    if n == 34 {\n        return is_simple_power(x,\
    \ 34)\n    }\n    if n == 35 {\n        return is_simple_power(x, 35)\n    }\n\
    \    if n == 36 {\n        return is_simple_power(x, 36\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpmhlhp8bj.swift:123:1: error: expected ')' in expression list\n\
    }\n^\n/tmp/tmpmhlhp8bj.swift:122:31: note: to match this opening '('\n       \
    \ return is_simple_power(x, 36\n                              ^\n/tmp/tmpmhlhp8bj.swift:147:45:\
    \ error: expected '}' at end of brace statement\nassert(is_simple_power(x: 1,\
    \ n: 12) == true)\n                                            ^\n/tmp/tmpmhlhp8bj.swift:12:46:\
    \ note: to match this opening '{'\nfunc is_simple_power(x: Int, n: Int) -> Bool\
    \ {\n                                             ^\n/tmp/tmpmhlhp8bj.swift:20:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ 2)\n                              ^\n                               x: n: \n\
    /tmp/tmpmhlhp8bj.swift:23:31: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, 3)\n                              ^\n     \
    \                          x: n: \n/tmp/tmpmhlhp8bj.swift:26:31: error: missing\
    \ argument labels 'x:n:' in call\n        return is_simple_power(x, 4)\n     \
    \                         ^\n                               x: n: \n/tmp/tmpmhlhp8bj.swift:29:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ 5)\n                              ^\n                               x: n: \n\
    /tmp/tmpmhlhp8bj.swift:32:31: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, 6)\n                              ^\n     \
    \                          x: n: \n/tmp/tmpmhlhp8bj.swift:35:31: error: missing\
    \ argument labels 'x:n:' in call\n        return is_simple_power(x, 7)\n     \
    \                         ^\n                               x: n: \n/tmp/tmpmhlhp8bj.swift:38:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ 8)\n                              ^\n                               x: n: \n\
    /tmp/tmpmhlhp8bj.swift:41:31: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, 9)\n                              ^\n     \
    \                          x: n: \n/tmp/tmpmhlhp8bj.swift:44:31: error: missing\
    \ argument l"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    return x == n ** Int(x)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpuzzfo_ie.swift:13:19: error: cannot find operator '**' in scope\n\
    \    return x == n ** Int(x)\n                  ^~\n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n        return\
    \ true\n    }\n    if x == 1 {\n        return true\n    }\n    if n % x == 0\
    \ {\n        return is_simple_power(x, n/x+1)\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph6dhbqii.swift:20:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n/x+1)\n                           \
    \   ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824614
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n        return\
    \ true\n    }\n    if n == 2 {\n        return true\n    }\n    if n == 3 {\n\
    \        return true\n    }\n    if n == 4 {\n        return true\n    }\n   \
    \ if n == 5 {\n        return true\n    }\n    if n == 6 {\n        return true\n\
    \    }\n    if n == 7 {\n        return true\n    }\n    if n == 8 {\n       \
    \ return true\n    }\n    if n == 9 {\n        return true\n    }\n    if n ==\
    \ 10 {\n        return true\n    }\n    if n == 11 {\n        return true\n  \
    \  }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n       \
    \ return true\n    }\n    if n == 14 {\n        return true\n    }\n    if n ==\
    \ 15 {\n        return true\n    }\n    if n == 16 {\n        return true\n  \
    \  }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n       \
    \ return true\n    }\n    if n == 19 {\n        return true\n    }\n    if n ==\
    \ 20 {\n        return true\n    }\n    if n == 21 {\n        return true\n  \
    \  }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n       \
    \ return true\n    }\n    if n == 24 {\n        return true\n    }\n    if n ==\
    \ 25 {\n        return true\n    }\n    if n == 26 {\n        return true\n  \
    \  }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n       \
    \ return true\n    }\n    if n == 29 {\n        return true\n    }\n    if n ==\
    \ 30 {\n        return true\n    }\n    if n == 31 {\n        return true\n  \
    \  }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n       \
    \ return true\n    }\n    if n == 34 {\n        return true\n    }\n    if n ==\
    \ 35 {\n        return true\n    }\n    if n == 36 {\n        return true\n  \
    \  }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n       \
    \ return true\n    }\n    if n == 39 {\n        return true\n    }\n    if n ==\
    \ 40 {\n        return true\n    }\n    if n == 41 {\n        return true\n  \
    \  }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n       \
    \ return true\n    }\n    if n == 44 {\n        return true\n    }\n    if n ==\
    \ 45 {\n        return true\n    }\n    if n == 46 {\n        return true\n  \
    \  }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n       \
    \ return true\n    }\n    if n == 49 {\n        return true\n    }\n    if n ==\
    \ 50 {\n        return true\n    }\n    if n == 51 {\n        return true\n  \
    \  }\n    if n == 52 {\n        return \n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x: 143214,\
    \ n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpyvq3gzkc.swift:192:45: error: expected '}' at end of brace statement\n\
    assert(is_simple_power(x: 1, n: 12) == true)\n                               \
    \             ^\n/tmp/tmpyvq3gzkc.swift:12:46: note: to match this opening '{'\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n                             \
    \                ^\n/tmp/tmpyvq3gzkc.swift:167:9: error: non-void function should\
    \ return a value\n        return \n        ^\n/tmp/tmpyvq3gzkc.swift:171:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    return is_simple_power_impl(x,\
    \ n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(is_simple_power(x: 16, n: 2)\
    \ == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp049zxv5o.swift:13:12: error: cannot find 'is_simple_power_impl'\
    \ in scope\n    return is_simple_power_impl(x, n)\n           ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    guard n > 0 else { return\
    \ false }\n    guard x != 0 else { return false }\n    guard n == x else { return\
    \ false }\n    guard n == Int(pow(x, Double(n))) else { return false }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpznh4c2vg.swift:16:20: error: cannot find 'pow' in scope\n    guard\
    \ n == Int(pow(x, Double(n))) else { return false }\n                   ^~~\n"
  stdout: ''
  timestamp: 1659824614
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n        return\
    \ true\n    }\n    if x == n {\n        return true\n    }\n    if n % x == 0\
    \ {\n        return is_simple_power(x, n-1)\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpj_8d321a.swift:20:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n        return\
    \ true\n    }\n    if n == 1 {\n        return true\n    }\n    if n == 2 {\n\
    \        return is_simple_power(x, 2)\n    }\n    if n == 3 {\n        return\
    \ is_simple_power(x, 3)\n    }\n    if n == 4 {\n        return is_simple_power(x,\
    \ 4)\n    }\n    if n == 5 {\n        return is_simple_power(x, 5)\n    }\n  \
    \  if n == 6 {\n        return is_simple_power(x, 6)\n    }\n    if n == 7 {\n\
    \        return is_simple_power(x, 7)\n    }\n    if n == 8 {\n        return\
    \ is_simple_power(x, 8)\n    }\n    if n == 9 {\n        return is_simple_power(x,\
    \ 9)\n    }\n    if n == 10 {\n        return is_simple_power(x, 10)\n    }\n\
    \    if n == 11 {\n        return is_simple_power(x, 11)\n    }\n    if n == 12\
    \ {\n        return is_simple_power(x, 12)\n    }\n    if n == 13 {\n        return\
    \ is_simple_power(x, 13)\n    }\n    if n == 14 {\n        return is_simple_power(x,\
    \ 14)\n    }\n    if n == 15 {\n        return is_simple_power(x, 15)\n    }\n\
    \    if n == 16 {\n        return is_simple_power(x, 16)\n    }\n    if n == 17\
    \ {\n        return is_simple_power(x, 17)\n    }\n    if n == 18 {\n        return\
    \ is_simple_power(x, 18)\n    }\n    if n == 19 {\n        return is_simple_power(x,\
    \ 19)\n    }\n    if n == 20 {\n        return is_simple_power(x, 20)\n    }\n\
    \    if n == 21 {\n        return is_simple_power(x, 21)\n    }\n    if n == 22\
    \ {\n        return is_simple_power(x, 22)\n    }\n    if n == 23 {\n        return\
    \ is_simple_power(x, 23)\n    }\n    if n == 24 {\n        return is_simple_power(x,\
    \ 24)\n    }\n    if n == 25 {\n        return is_simple_power(x, 25)\n    }\n\
    \    if n == 26 {\n        return is_simple_power(x, 26)\n    }\n    if n == 27\
    \ {\n        return is_simple_power(x, 27)\n    }\n    if n == 28 {\n        return\
    \ is_simple_power(x, 28)\n    }\n    if n == 29 {\n        return is_simple_power(x,\
    \ 29)\n    }\n    if n == 30 {\n        return is_simple_power(x, 30)\n    }\n\
    \    if n == 31 {\n        return is_simple_power(x, 31)\n    }\n    if n == 32\
    \ {\n        return is_simple_power(x, 32)\n    }\n    if n == 33 {\n        return\
    \ is_simple_power(x, 33)\n    }\n    if n == 34 {\n        return is_simple_power(x,\
    \ 34)\n    }\n    if n == 35 {\n        return is_simple_power(x, 35)\n    }\n\
    \    if n == 36 {\n        return is_simple_power(x, 36\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpmhlhp8bj.swift:123:1: error: expected ')' in expression list\n\
    }\n^\n/tmp/tmpmhlhp8bj.swift:122:31: note: to match this opening '('\n       \
    \ return is_simple_power(x, 36\n                              ^\n/tmp/tmpmhlhp8bj.swift:147:45:\
    \ error: expected '}' at end of brace statement\nassert(is_simple_power(x: 1,\
    \ n: 12) == true)\n                                            ^\n/tmp/tmpmhlhp8bj.swift:12:46:\
    \ note: to match this opening '{'\nfunc is_simple_power(x: Int, n: Int) -> Bool\
    \ {\n                                             ^\n/tmp/tmpmhlhp8bj.swift:20:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ 2)\n                              ^\n                               x: n: \n\
    /tmp/tmpmhlhp8bj.swift:23:31: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, 3)\n                              ^\n     \
    \                          x: n: \n/tmp/tmpmhlhp8bj.swift:26:31: error: missing\
    \ argument labels 'x:n:' in call\n        return is_simple_power(x, 4)\n     \
    \                         ^\n                               x: n: \n/tmp/tmpmhlhp8bj.swift:29:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ 5)\n                              ^\n                               x: n: \n\
    /tmp/tmpmhlhp8bj.swift:32:31: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, 6)\n                              ^\n     \
    \                          x: n: \n/tmp/tmpmhlhp8bj.swift:35:31: error: missing\
    \ argument labels 'x:n:' in call\n        return is_simple_power(x, 7)\n     \
    \                         ^\n                               x: n: \n/tmp/tmpmhlhp8bj.swift:38:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ 8)\n                              ^\n                               x: n: \n\
    /tmp/tmpmhlhp8bj.swift:41:31: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, 9)\n                              ^\n     \
    \                          x: n: \n/tmp/tmpmhlhp8bj.swift:44:31: error: missing\
    \ argument l"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    return x == n**x\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpd2bur0jn.swift:13:18: error: cannot find operator '**' in scope\n\
    \    return x == n**x\n                 ^~\n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n        return\
    \ true\n    }\n    if x == 1 {\n        return true\n    }\n    if n == 0 {\n\
    \        return false\n    }\n    if x == 0 {\n        return false\n    }\n \
    \   if n % 2 == 0 {\n        return is_simple_power(x, n//2)\n    }\n    return\
    \ is_simple_power(x*x, n-1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpuzx6396o.swift:27:5: error: expected ')' in expression list\n \
    \   }\n    ^\n/tmp/tmpuzx6396o.swift:26:31: note: to match this opening '('\n\
    \        return is_simple_power(x, n//2)\n                              ^\n/tmp/tmpuzx6396o.swift:26:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ n//2)\n                              ^\n                               x: n:\
    \ \n/tmp/tmpuzx6396o.swift:28:27: error: missing argument labels 'x:n:' in call\n\
    \    return is_simple_power(x*x, n-1)\n                          ^\n         \
    \                  x:   n: \n"
  stdout: ''
  timestamp: 1659824614
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    guard n > 0 else { return\
    \ false }\n    guard x != 0 else { return false }\n    guard n == 1 || x == 1\
    \ else { return false }\n    guard n == x else { return true }\n    return is_simple_power(x,\
    \ n-1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpdnhmsjt3.swift:17:27: error: missing argument labels 'x:n:' in\
    \ call\n    return is_simple_power(x, n-1)\n                          ^\n    \
    \                       x: n: \n"
  stdout: ''
  timestamp: 1659824614
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n        return\
    \ true\n    }\n    if n == 2 {\n        return true\n    }\n    if x == 1 {\n\
    \        return true\n    }\n    if x == n {\n        return true\n    }\n   \
    \ if x % n == 0 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmp_ie1rwqs/tmp_ie1rwqs.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b59ba255c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b59b9f4cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b59b9f4c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b59b9f4b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_ie1rwqs                        0x0000563cc85be4a7 <unavailable> + 5287

    5    libc.so.6                          0x00002b59ba441460 __libc_start_main +
    245

    6    tmp_ie1rwqs                        0x0000563cc85bdef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824614
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n        return\
    \ true\n    }\n    if x == 1 {\n        return true\n    }\n    if x == n {\n\
    \        return true\n    }\n    if x % n == 0 {\n        return is_simple_power(x\
    \ / n, n)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x: 143214,\
    \ n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7ipllg5p.swift:23:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x / n, n)\n                           \
    \   ^\n                               x:     n: \n"
  stdout: ''
  timestamp: 1659824614
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    var result = true\n    for\
    \ _ in 0..<n {\n        if x == n ** Int(x) {\n            result = false\n  \
    \          break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpb_mze86b.swift:15:19: error: cannot find operator '**' in scope\n\
    \        if x == n ** Int(x) {\n                  ^~\n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n        return\
    \ true\n    }\n    if x == n {\n        return true\n    }\n    if n == 1 {\n\
    \        return false\n    }\n    if n == 2 {\n        return is_simple_power(x,\
    \ 2)\n    }\n    if n == 3 {\n        return is_simple_power(x, 3)\n    }\n  \
    \  if n == 4 {\n        return is_simple_power(x, 4)\n    }\n    if n == 5 {\n\
    \        return is_simple_power(x, 5)\n    }\n    if n == 6 {\n        return\
    \ is_simple_power(x, 6)\n    }\n    if n == 7 {\n        return is_simple_power(x,\
    \ 7)\n    }\n    if n == 8 {\n        return is_simple_power(x, 8)\n    }\n  \
    \  if n == 9 {\n        return is_simple_power(x, 9)\n    }\n    if n == 10 {\n\
    \        return is_simple_power(x, 10)\n    }\n    if n == 11 {\n        return\
    \ is_simple_power(x, 11)\n    }\n    if n == 12 {\n        return is_simple_power(x,\
    \ 12)\n    }\n    if n == 13 {\n        return is_simple_power(x, 13)\n    }\n\
    \    if n == 14 {\n        return is_simple_power(x, 14)\n    }\n    if n == 15\
    \ {\n        return is_simple_power(x, 15)\n    }\n    if n == 16 {\n        return\
    \ is_simple_power(x, 16)\n    }\n    if n == 17 {\n        return is_simple_power(x,\
    \ 17)\n    }\n    if n == 18 {\n        return is_simple_power(x, 18)\n    }\n\
    \    if n == 19 {\n        return is_simple_power(x, 19)\n    }\n    if n == 20\
    \ {\n        return is_simple_power(x, 20)\n    }\n    if n == 21 {\n        return\
    \ is_simple_power(x, 21)\n    }\n    if n == 22 {\n        return is_simple_power(x,\
    \ 22)\n    }\n    if n == 23 {\n        return is_simple_power(x, 23)\n    }\n\
    \    if n == 24 {\n        return is_simple_power(x, 24)\n    }\n    if n == 25\
    \ {\n        return is_simple_power(x, 25)\n    }\n    if n == 26 {\n        return\
    \ is_simple_power(x, 26)\n    }\n    if n == 27 {\n        return is_simple_power(x,\
    \ 27)\n    }\n    if n == 28 {\n        return is_simple_power(x, 28)\n    }\n\
    \    if n == 29 {\n        return is_simple_power(x, 29)\n    }\n    if n == 30\
    \ {\n        return is_simple_power(x, 30)\n    }\n    if n == 31 {\n        return\
    \ is_simple_power(x, 31)\n    }\n    if n == 32 {\n        return is_simple_power(x,\
    \ 32)\n    }\n    if n == 33 {\n        return is_simple_power(x, 33)\n    }\n\
    \    if n == 34 {\n        return is_simple_power(x, 34)\n    }\n    if n == 35\
    \ {\n        return is_simple_power(x, 35)\n    }\n    if \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp5zke2iaa.swift:124:7: error: expected expression, var, or let in\
    \ 'if' condition\n    if \n      ^\n/tmp/tmp5zke2iaa.swift:23:31: error: missing\
    \ argument labels 'x:n:' in call\n        return is_simple_power(x, 2)\n     \
    \                         ^\n                               x: n: \n/tmp/tmp5zke2iaa.swift:26:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ 3)\n                              ^\n                               x: n: \n\
    /tmp/tmp5zke2iaa.swift:29:31: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, 4)\n                              ^\n     \
    \                          x: n: \n/tmp/tmp5zke2iaa.swift:32:31: error: missing\
    \ argument labels 'x:n:' in call\n        return is_simple_power(x, 5)\n     \
    \                         ^\n                               x: n: \n/tmp/tmp5zke2iaa.swift:35:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ 6)\n                              ^\n                               x: n: \n\
    /tmp/tmp5zke2iaa.swift:38:31: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, 7)\n                              ^\n     \
    \                          x: n: \n/tmp/tmp5zke2iaa.swift:41:31: error: missing\
    \ argument labels 'x:n:' in call\n        return is_simple_power(x, 8)\n     \
    \                         ^\n                               x: n: \n/tmp/tmp5zke2iaa.swift:44:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ 9)\n                              ^\n                               x: n: \n\
    /tmp/tmp5zke2iaa.swift:47:31: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, 10)\n                              ^\n    \
    \                           x: n: \n/tmp/tmp5zke2iaa.swift:50:31: error: missing\
    \ argument labels 'x:n:' in call\n        return is_simple_power(x, 11)\n    \
    \                          ^\n                               x: n: \n/tmp/tmp5zke2iaa.swift:53:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ 12"
  stdout: ''
  timestamp: 1659824614
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    guard x > 0 else {\n     \
    \   return false\n    }\n    guard n >= 1 else {\n        return false\n    }\n\
    \    if n == 1 {\n        return true\n    }\n    if x == 1 {\n        return\
    \ true\n    }\n    if x == n {\n        return true\n    }\n    if x == n^2 {\n\
    \        return true\n    }\n    if x == n^3 {\n        return true\n    }\n \
    \   if x == n^4 {\n        return true\n    }\n    if x == n^5 {\n        return\
    \ true\n    }\n    if x == n^6 {\n        return true\n    }\n    if x == n^7\
    \ {\n        return true\n    }\n    if x == n^8 {\n        return true\n    }\n\
    \    if x == n^9 {\n        return true\n    }\n    if x == n^10 {\n        return\
    \ true\n    }\n    if x == n^11 {\n        return true\n    }\n    if x == n^12\
    \ {\n        return true\n    }\n    if x == n^13 {\n        return true\n   \
    \ }\n    if x == n^14 {\n        return true\n    }\n    if x == n^15 {\n    \
    \    return true\n    }\n    if x == n^16 {\n        return true\n    }\n    if\
    \ x == n^17 {\n        return true\n    }\n    if x == n^18 {\n        return\
    \ true\n    }\n    if x == n^19 {\n        return true\n    }\n    if x == n^20\
    \ {\n        return true\n    }\n    if x == n^21 {\n        return true\n   \
    \ }\n    if x == n^22 {\n        return true\n    }\n    if x == n^23 {\n    \
    \    return true\n    }\n    if x == n^24 {\n        return true\n    }\n    if\
    \ x == n^25 {\n        return true\n    }\n    if x == n^26 {\n        return\
    \ true\n    }\n    if x == n^27 {\n        return true\n    }\n    if x == n^28\
    \ {\n        return true\n    }\n    if x == n^29 {\n        return true\n   \
    \ }\n    if x == n^30 {\n        return true\n    }\n    if x == n^31 {\n    \
    \    return true\n    }\n    if x == n^32 {\n        return true\n    }\n    if\
    \ x == n^33 {\n        return true\n    }\n    if x == n^34 {\n        return\
    \ true\n    }\n    if x == n^35 {\n        return true\n    }\n    if x == n^36\
    \ {\n        return true\n    }\n    if x == n^37 {\n        return true\n   \
    \ }\n    if x == n^38 {\n        return true\n    }\n    if x == n^39 {\n    \
    \    return true\n    }\n    if x == n^40 {\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp88yn72nj.swift:167:45: error: expected '}' at end of brace statement\n\
    assert(is_simple_power(x: 1, n: 12) == true)\n                               \
    \             ^\n/tmp/tmp88yn72nj.swift:12:46: note: to match this opening '{'\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n                             \
    \                ^\n/tmp/tmp88yn72nj.swift:146:6: error: operator functions can\
    \ only be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824614
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    return is_simple_power_impl(x,\
    \ n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(is_simple_power(x: 16, n: 2)\
    \ == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp049zxv5o.swift:13:12: error: cannot find 'is_simple_power_impl'\
    \ in scope\n    return is_simple_power_impl(x, n)\n           ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    return is_simple_power_impl(x,\
    \ n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(is_simple_power(x: 16, n: 2)\
    \ == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp049zxv5o.swift:13:12: error: cannot find 'is_simple_power_impl'\
    \ in scope\n    return is_simple_power_impl(x, n)\n           ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n        return\
    \ true\n    }\n    if x == n {\n        return true\n    }\n    if n % x == 0\
    \ {\n        return is_simple_power(x, n/x+1)\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmphztburm4.swift:20:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n/x+1)\n                           \
    \   ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824614
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n        return\
    \ true\n    }\n    if x == 1 {\n        return true\n    }\n    if x == n {\n\
    \        return true\n    }\n    if n % 2 == 0 {\n        return is_simple_power(x,\
    \ n/2)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7nyl5yis.swift:23:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n/2)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n        return\
    \ true\n    }\n    if n == 2 {\n        return true\n    }\n    if n == 3 {\n\
    \        return true\n    }\n    if n == 4 {\n        return true\n    }\n   \
    \ if n == 5 {\n        return true\n    }\n    if n == 6 {\n        return true\n\
    \    }\n    if n == 7 {\n        return true\n    }\n    if n == 8 {\n       \
    \ return true\n    }\n    if n == 9 {\n        return true\n    }\n    if n ==\
    \ 10 {\n        return true\n    }\n    if n == 11 {\n        return true\n  \
    \  }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n       \
    \ return true\n    }\n    if n == 14 {\n        return true\n    }\n    if n ==\
    \ 15 {\n        return true\n    }\n    if n == 16 {\n        return true\n  \
    \  }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n       \
    \ return true\n    }\n    if n == 19 {\n        return true\n    }\n    if n ==\
    \ 20 {\n        return true\n    }\n    if n == 21 {\n        return true\n  \
    \  }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n       \
    \ return true\n    }\n    if n == 24 {\n        return true\n    }\n    if n ==\
    \ 25 {\n        return true\n    }\n    if n == 26 {\n        return true\n  \
    \  }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n       \
    \ return true\n    }\n    if n == 29 {\n        return true\n    }\n    if n ==\
    \ 30 {\n        return true\n    }\n    if n == 31 {\n        return true\n  \
    \  }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n       \
    \ return true\n    }\n    if n == 34 {\n        return true\n    }\n    if n ==\
    \ 35 {\n        return true\n    }\n    if n == 36 {\n        return true\n  \
    \  }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n       \
    \ return true\n    }\n    if n == 39 {\n        return true\n    }\n    if n ==\
    \ 40 {\n        return true\n    }\n    if n == 41 {\n        return true\n  \
    \  }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n       \
    \ return true\n    }\n    if n == 44 {\n        return true\n    }\n    if n ==\
    \ 45 {\n        return true\n    }\n    if n == 46 {\n        return true\n  \
    \  }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n       \
    \ return true\n    }\n    if n == 49 {\n        return true\n    }\n    if n ==\
    \ 50 {\n        return true\n    }\n    if n == 51 {\n        return true\n  \
    \  }\n    if n == 52 {\n        return \n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x: 143214,\
    \ n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpyvq3gzkc.swift:192:45: error: expected '}' at end of brace statement\n\
    assert(is_simple_power(x: 1, n: 12) == true)\n                               \
    \             ^\n/tmp/tmpyvq3gzkc.swift:12:46: note: to match this opening '{'\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n                             \
    \                ^\n/tmp/tmpyvq3gzkc.swift:167:9: error: non-void function should\
    \ return a value\n        return \n        ^\n/tmp/tmpyvq3gzkc.swift:171:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    return is_power_of_two(x)\
    \ && is_power_of_two(n) && is_power_of_two(n*x)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmps4jfacgm.swift:13:12: error: cannot find 'is_power_of_two' in scope\n\
    \    return is_power_of_two(x) && is_power_of_two(n) && is_power_of_two(n*x)\n\
    \           ^~~~~~~~~~~~~~~\n/tmp/tmps4jfacgm.swift:13:34: error: cannot find\
    \ 'is_power_of_two' in scope\n    return is_power_of_two(x) && is_power_of_two(n)\
    \ && is_power_of_two(n*x)\n                                 ^~~~~~~~~~~~~~~\n\
    /tmp/tmps4jfacgm.swift:13:56: error: cannot find 'is_power_of_two' in scope\n\
    \    return is_power_of_two(x) && is_power_of_two(n) && is_power_of_two(n*x)\n\
    \                                                       ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n        return\
    \ true\n    }\n    if n == 1 {\n        return true\n    }\n    if n == 2 {\n\
    \        return is_simple_power(x, 2)\n    }\n    if n == 3 {\n        return\
    \ is_simple_power(x, 3)\n    }\n    if n == 4 {\n        return is_simple_power(x,\
    \ 4)\n    }\n    if n == 5 {\n        return is_simple_power(x, 5)\n    }\n  \
    \  if n == 6 {\n        return is_simple_power(x, 6)\n    }\n    if n == 7 {\n\
    \        return is_simple_power(x, 7)\n    }\n    if n == 8 {\n        return\
    \ is_simple_power(x, 8)\n    }\n    if n == 9 {\n        return is_simple_power(x,\
    \ 9)\n    }\n    if n == 10 {\n        return is_simple_power(x, 10)\n    }\n\
    \    if n == 11 {\n        return is_simple_power(x, 11)\n    }\n    if n == 12\
    \ {\n        return is_simple_power(x, 12)\n    }\n    if n == 13 {\n        return\
    \ is_simple_power(x, 13)\n    }\n    if n == 14 {\n        return is_simple_power(x,\
    \ 14)\n    }\n    if n == 15 {\n        return is_simple_power(x, 15)\n    }\n\
    \    if n == 16 {\n        return is_simple_power(x, 16)\n    }\n    if n == 17\
    \ {\n        return is_simple_power(x, 17)\n    }\n    if n == 18 {\n        return\
    \ is_simple_power(x, 18)\n    }\n    if n == 19 {\n        return is_simple_power(x,\
    \ 19)\n    }\n    if n == 20 {\n        return is_simple_power(x, 20)\n    }\n\
    \    if n == 21 {\n        return is_simple_power(x, 21)\n    }\n    if n == 22\
    \ {\n        return is_simple_power(x, 22)\n    }\n    if n == 23 {\n        return\
    \ is_simple_power(x, 23)\n    }\n    if n == 24 {\n        return is_simple_power(x,\
    \ 24)\n    }\n    if n == 25 {\n        return is_simple_power(x, 25)\n    }\n\
    \    if n == 26 {\n        return is_simple_power(x, 26)\n    }\n    if n == 27\
    \ {\n        return is_simple_power(x, 27)\n    }\n    if n == 28 {\n        return\
    \ is_simple_power(x, 28)\n    }\n    if n == 29 {\n        return is_simple_power(x,\
    \ 29)\n    }\n    if n == 30 {\n        return is_simple_power(x, 30)\n    }\n\
    \    if n == 31 {\n        return is_simple_power(x, 31)\n    }\n    if n == 32\
    \ {\n        return is_simple_power(x, 32)\n    }\n    if n == 33 {\n        return\
    \ is_simple_power(x, 33)\n    }\n    if n == 34 {\n        return is_simple_power(x,\
    \ 34)\n    }\n    if n == 35 {\n        return is_simple_power(x, 35)\n    }\n\
    \    if n == 36 {\n        return is_simple_power(x, 36\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpmhlhp8bj.swift:123:1: error: expected ')' in expression list\n\
    }\n^\n/tmp/tmpmhlhp8bj.swift:122:31: note: to match this opening '('\n       \
    \ return is_simple_power(x, 36\n                              ^\n/tmp/tmpmhlhp8bj.swift:147:45:\
    \ error: expected '}' at end of brace statement\nassert(is_simple_power(x: 1,\
    \ n: 12) == true)\n                                            ^\n/tmp/tmpmhlhp8bj.swift:12:46:\
    \ note: to match this opening '{'\nfunc is_simple_power(x: Int, n: Int) -> Bool\
    \ {\n                                             ^\n/tmp/tmpmhlhp8bj.swift:20:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ 2)\n                              ^\n                               x: n: \n\
    /tmp/tmpmhlhp8bj.swift:23:31: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, 3)\n                              ^\n     \
    \                          x: n: \n/tmp/tmpmhlhp8bj.swift:26:31: error: missing\
    \ argument labels 'x:n:' in call\n        return is_simple_power(x, 4)\n     \
    \                         ^\n                               x: n: \n/tmp/tmpmhlhp8bj.swift:29:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ 5)\n                              ^\n                               x: n: \n\
    /tmp/tmpmhlhp8bj.swift:32:31: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, 6)\n                              ^\n     \
    \                          x: n: \n/tmp/tmpmhlhp8bj.swift:35:31: error: missing\
    \ argument labels 'x:n:' in call\n        return is_simple_power(x, 7)\n     \
    \                         ^\n                               x: n: \n/tmp/tmpmhlhp8bj.swift:38:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ 8)\n                              ^\n                               x: n: \n\
    /tmp/tmpmhlhp8bj.swift:41:31: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, 9)\n                              ^\n     \
    \                          x: n: \n/tmp/tmpmhlhp8bj.swift:44:31: error: missing\
    \ argument l"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n        return\
    \ true\n    }\n    if n == 0 {\n        return false\n    }\n    if x == 1 {\n\
    \        return true\n    }\n    if x == 0 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return is_simple_power(x, n/2)\n    }\n    return\
    \ is_simple_power(x, n-1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpgk5nbj7r.swift:26:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n/2)\n                             \
    \ ^\n                               x: n: \n/tmp/tmpgk5nbj7r.swift:28:27: error:\
    \ missing argument labels 'x:n:' in call\n    return is_simple_power(x, n-1)\n\
    \                          ^\n                           x: n: \n"
  stdout: ''
  timestamp: 1659824614
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n        return\
    \ true\n    }\n    if x == n {\n        return true\n    }\n    if n % x == 0\
    \ {\n        return is_simple_power(x, n-1)\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpj_8d321a.swift:20:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n        return\
    \ true\n    }\n    if n == 1 {\n        return true\n    }\n    if n == 2 {\n\
    \        return is_simple_power(x, 2)\n    }\n    if n == 3 {\n        return\
    \ is_simple_power(x, 3)\n    }\n    if n == 4 {\n        return is_simple_power(x,\
    \ 4)\n    }\n    if n == 5 {\n        return is_simple_power(x, 5)\n    }\n  \
    \  if n == 6 {\n        return is_simple_power(x, 6)\n    }\n    if n == 7 {\n\
    \        return is_simple_power(x, 7)\n    }\n    if n == 8 {\n        return\
    \ is_simple_power(x, 8)\n    }\n    if n == 9 {\n        return is_simple_power(x,\
    \ 9)\n    }\n    if n == 10 {\n        return is_simple_power(x, 10)\n    }\n\
    \    if n == 11 {\n        return is_simple_power(x, 11)\n    }\n    if n == 12\
    \ {\n        return is_simple_power(x, 12)\n    }\n    if n == 13 {\n        return\
    \ is_simple_power(x, 13)\n    }\n    if n == 14 {\n        return is_simple_power(x,\
    \ 14)\n    }\n    if n == 15 {\n        return is_simple_power(x, 15)\n    }\n\
    \    if n == 16 {\n        return is_simple_power(x, 16)\n    }\n    if n == 17\
    \ {\n        return is_simple_power(x, 17)\n    }\n    if n == 18 {\n        return\
    \ is_simple_power(x, 18)\n    }\n    if n == 19 {\n        return is_simple_power(x,\
    \ 19)\n    }\n    if n == 20 {\n        return is_simple_power(x, 20)\n    }\n\
    \    if n == 21 {\n        return is_simple_power(x, 21)\n    }\n    if n == 22\
    \ {\n        return is_simple_power(x, 22)\n    }\n    if n == 23 {\n        return\
    \ is_simple_power(x, 23)\n    }\n    if n == 24 {\n        return is_simple_power(x,\
    \ 24)\n    }\n    if n == 25 {\n        return is_simple_power(x, 25)\n    }\n\
    \    if n == 26 {\n        return is_simple_power(x, 26)\n    }\n    if n == 27\
    \ {\n        return is_simple_power(x, 27)\n    }\n    if n == 28 {\n        return\
    \ is_simple_power(x, 28)\n    }\n    if n == 29 {\n        return is_simple_power(x,\
    \ 29)\n    }\n    if n == 30 {\n        return is_simple_power(x, 30)\n    }\n\
    \    if n == 31 {\n        return is_simple_power(x, 31)\n    }\n    if n == 32\
    \ {\n        return is_simple_power(x, 32)\n    }\n    if n == 33 {\n        return\
    \ is_simple_power(x, 33)\n    }\n    if n == 34 {\n        return is_simple_power(x,\
    \ 34)\n    }\n    if n == 35 {\n        return is_simple_power(x, 35)\n    }\n\
    \    if n == 36 {\n        return is_simple_power(x, 36\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpmhlhp8bj.swift:123:1: error: expected ')' in expression list\n\
    }\n^\n/tmp/tmpmhlhp8bj.swift:122:31: note: to match this opening '('\n       \
    \ return is_simple_power(x, 36\n                              ^\n/tmp/tmpmhlhp8bj.swift:147:45:\
    \ error: expected '}' at end of brace statement\nassert(is_simple_power(x: 1,\
    \ n: 12) == true)\n                                            ^\n/tmp/tmpmhlhp8bj.swift:12:46:\
    \ note: to match this opening '{'\nfunc is_simple_power(x: Int, n: Int) -> Bool\
    \ {\n                                             ^\n/tmp/tmpmhlhp8bj.swift:20:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ 2)\n                              ^\n                               x: n: \n\
    /tmp/tmpmhlhp8bj.swift:23:31: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, 3)\n                              ^\n     \
    \                          x: n: \n/tmp/tmpmhlhp8bj.swift:26:31: error: missing\
    \ argument labels 'x:n:' in call\n        return is_simple_power(x, 4)\n     \
    \                         ^\n                               x: n: \n/tmp/tmpmhlhp8bj.swift:29:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ 5)\n                              ^\n                               x: n: \n\
    /tmp/tmpmhlhp8bj.swift:32:31: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, 6)\n                              ^\n     \
    \                          x: n: \n/tmp/tmpmhlhp8bj.swift:35:31: error: missing\
    \ argument labels 'x:n:' in call\n        return is_simple_power(x, 7)\n     \
    \                         ^\n                               x: n: \n/tmp/tmpmhlhp8bj.swift:38:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ 8)\n                              ^\n                               x: n: \n\
    /tmp/tmpmhlhp8bj.swift:41:31: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, 9)\n                              ^\n     \
    \                          x: n: \n/tmp/tmpmhlhp8bj.swift:44:31: error: missing\
    \ argument l"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n        return\
    \ true\n    }\n    if x == n {\n        return true\n    }\n    if n % x == 0\
    \ {\n        return is_simple_power(x, n-1)\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpj_8d321a.swift:20:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n        return\
    \ true\n    }\n    if x == 1 {\n        return true\n    }\n    if x == n {\n\
    \        return true\n    }\n    if n % x == 0 {\n        return is_simple_power(x,\
    \ n-1)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpylabkyhr.swift:23:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n        return\
    \ true\n    }\n    if n == 1 {\n        return true\n    }\n    if x == n {\n\
    \        return true\n    }\n    if n % 2 == 0 {\n        return is_simple_power(x,\
    \ n/2)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpmqxis1g6.swift:23:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n/2)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824614
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n        return\
    \ true\n    }\n    if n == 1 {\n        return true\n    }\n    if n % x == 0\
    \ {\n        return is_simple_power(x, n-1)\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpoqn5h__h.swift:20:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824614
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    return is_simple_power_impl(x,\
    \ n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(is_simple_power(x: 16, n: 2)\
    \ == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp049zxv5o.swift:13:12: error: cannot find 'is_simple_power_impl'\
    \ in scope\n    return is_simple_power_impl(x, n)\n           ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n        return\
    \ true\n    }\n    if x == n {\n        return true\n    }\n    if x % n == 0\
    \ {\n        return is_simple_power(x / n, n)\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmplzexjnrt.swift:20:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x / n, n)\n                           \
    \   ^\n                               x:     n: \n"
  stdout: ''
  timestamp: 1659824614
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n        return\
    \ true\n    }\n    if n == 1 {\n        return true\n    }\n    if n == 2 {\n\
    \        return is_simple_power(x, 2)\n    }\n    if n == 3 {\n        return\
    \ is_simple_power(x, 3)\n    }\n    if n == 4 {\n        return is_simple_power(x,\
    \ 4)\n    }\n    if n == 5 {\n        return is_simple_power(x, 5)\n    }\n  \
    \  if n == 6 {\n        return is_simple_power(x, 6)\n    }\n    if n == 7 {\n\
    \        return is_simple_power(x, 7)\n    }\n    if n == 8 {\n        return\
    \ is_simple_power(x, 8)\n    }\n    if n == 9 {\n        return is_simple_power(x,\
    \ 9)\n    }\n    if n == 10 {\n        return is_simple_power(x, 10)\n    }\n\
    \    if n == 11 {\n        return is_simple_power(x, 11)\n    }\n    if n == 12\
    \ {\n        return is_simple_power(x, 12)\n    }\n    if n == 13 {\n        return\
    \ is_simple_power(x, 13)\n    }\n    if n == 14 {\n        return is_simple_power(x,\
    \ 14)\n    }\n    if n == 15 {\n        return is_simple_power(x, 15)\n    }\n\
    \    if n == 16 {\n        return is_simple_power(x, 16)\n    }\n    if n == 17\
    \ {\n        return is_simple_power(x, 17)\n    }\n    if n == 18 {\n        return\
    \ is_simple_power(x, 18)\n    }\n    if n == 19 {\n        return is_simple_power(x,\
    \ 19)\n    }\n    if n == 20 {\n        return is_simple_power(x, 20)\n    }\n\
    \    if n == 21 {\n        return is_simple_power(x, 21)\n    }\n    if n == 22\
    \ {\n        return is_simple_power(x, 22)\n    }\n    if n == 23 {\n        return\
    \ is_simple_power(x, 23)\n    }\n    if n == 24 {\n        return is_simple_power(x,\
    \ 24)\n    }\n    if n == 25 {\n        return is_simple_power(x, 25)\n    }\n\
    \    if n == 26 {\n        return is_simple_power(x, 26)\n    }\n    if n == 27\
    \ {\n        return is_simple_power(x, 27)\n    }\n    if n == 28 {\n        return\
    \ is_simple_power(x, 28)\n    }\n    if n == 29 {\n        return is_simple_power(x,\
    \ 29)\n    }\n    if n == 30 {\n        return is_simple_power(x, 30)\n    }\n\
    \    if n == 31 {\n        return is_simple_power(x, 31)\n    }\n    if n == 32\
    \ {\n        return is_simple_power(x, 32)\n    }\n    if n == 33 {\n        return\
    \ is_simple_power(x, 33)\n    }\n    if n == 34 {\n        return is_simple_power(x,\
    \ 34)\n    }\n    if n == 35 {\n        return is_simple_power(x, 35)\n    }\n\
    \    if n == 36 {\n        return is_simple_power(x, 36\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpmhlhp8bj.swift:123:1: error: expected ')' in expression list\n\
    }\n^\n/tmp/tmpmhlhp8bj.swift:122:31: note: to match this opening '('\n       \
    \ return is_simple_power(x, 36\n                              ^\n/tmp/tmpmhlhp8bj.swift:147:45:\
    \ error: expected '}' at end of brace statement\nassert(is_simple_power(x: 1,\
    \ n: 12) == true)\n                                            ^\n/tmp/tmpmhlhp8bj.swift:12:46:\
    \ note: to match this opening '{'\nfunc is_simple_power(x: Int, n: Int) -> Bool\
    \ {\n                                             ^\n/tmp/tmpmhlhp8bj.swift:20:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ 2)\n                              ^\n                               x: n: \n\
    /tmp/tmpmhlhp8bj.swift:23:31: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, 3)\n                              ^\n     \
    \                          x: n: \n/tmp/tmpmhlhp8bj.swift:26:31: error: missing\
    \ argument labels 'x:n:' in call\n        return is_simple_power(x, 4)\n     \
    \                         ^\n                               x: n: \n/tmp/tmpmhlhp8bj.swift:29:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ 5)\n                              ^\n                               x: n: \n\
    /tmp/tmpmhlhp8bj.swift:32:31: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, 6)\n                              ^\n     \
    \                          x: n: \n/tmp/tmpmhlhp8bj.swift:35:31: error: missing\
    \ argument labels 'x:n:' in call\n        return is_simple_power(x, 7)\n     \
    \                         ^\n                               x: n: \n/tmp/tmpmhlhp8bj.swift:38:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ 8)\n                              ^\n                               x: n: \n\
    /tmp/tmpmhlhp8bj.swift:41:31: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, 9)\n                              ^\n     \
    \                          x: n: \n/tmp/tmpmhlhp8bj.swift:44:31: error: missing\
    \ argument l"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n        return\
    \ true\n    }\n    if n == 0 {\n        return false\n    }\n    if x == 1 {\n\
    \        return true\n    }\n    if x == 0 {\n        return false\n    }\n  \
    \  if x == n {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ is_simple_power(x, n/2)\n    }\n    return is_simple_power(x, n/2) * is_simple_power(x,\
    \ n-1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpnju3g_md.swift:29:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n/2)\n                             \
    \ ^\n                               x: n: \n/tmp/tmpnju3g_md.swift:31:27: error:\
    \ missing argument labels 'x:n:' in call\n    return is_simple_power(x, n/2) *\
    \ is_simple_power(x, n-1)\n                          ^\n                     \
    \      x: n: \n/tmp/tmpnju3g_md.swift:31:36: error: binary operator '*' cannot\
    \ be applied to two 'Bool' operands\n    return is_simple_power(x, n/2) * is_simple_power(x,\
    \ n-1)\n                                   ^\nSwift.FloatingPoint:1:17: note:\
    \ candidate requires that 'Bool' conform to 'FloatingPoint' (requirement specified\
    \ as 'Self' : 'FloatingPoint')\npublic protocol FloatingPoint : Hashable, SignedNumeric,\
    \ Strideable where Self == Self.Magnitude {\n                ^\n/tmp/tmpnju3g_md.swift:31:53:\
    \ error: missing argument labels 'x:n:' in call\n    return is_simple_power(x,\
    \ n/2) * is_simple_power(x, n-1)\n                                           \
    \         ^\n                                                     x: n: \n"
  stdout: ''
  timestamp: 1659824614
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    return is_simple_power_impl(x,\
    \ n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(is_simple_power(x: 16, n: 2)\
    \ == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp049zxv5o.swift:13:12: error: cannot find 'is_simple_power_impl'\
    \ in scope\n    return is_simple_power_impl(x, n)\n           ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n        return\
    \ true\n    }\n    if x == 1 {\n        return true\n    }\n    if n == 0 {\n\
    \        return false\n    }\n    if x == 0 {\n        return false\n    }\n \
    \   if n == x {\n        return true\n    }\n    if n == (x * x) {\n        return\
    \ true\n    }\n    if n == (x * x * (x * x)) {\n        return true\n    }\n \
    \   if n == (x * x * (x * x) * (x * x) * (x * x)) {\n        return true\n   \
    \ }\n    if n == (x * x * (x * x) * (x * x) * (x * x) * (x * x) * (x * x)) {\n\
    \        return true\n    }\n    if n == (x * x * (x * x) * (x * x) * (x * x)\
    \ * (x * x) * (x * x) * (x * x) * (x * x)) {\n        return true\n    }\n   \
    \ if n == (x * x * (x * x) * (x * x) * (x * x) * (x * x) * (x * x) * (x * x) *\
    \ (x * x) * (x * x) * (x * x)) {\n        return true\n    }\n    if n == (x *\
    \ x * (x * x) * (x * x) * (x * x) * (x * x) * (x * x) * (x * x) * (x * x) * (x\
    \ * x) * (x * x) * (x * x)) {\n        return true\n    }\n    if n == (x * x\
    \ * (x * x) * (x * x) * (x * x) * (x * x) * (x * x) * (x * x) * (x * x) * (x *\
    \ x) * (x * x) * (x * x) * (x * x)) {\n        return true\n    }\n    if n ==\
    \ (x * x * (x * x) * (x * x) * (x * x) * (x * x) * (x * x) * (x * x) * (x * x)\
    \ * (x * x) * (x * x) * (x * x) * (x * x)) {\n        return true\n    }\n   \
    \ if n == (x * x * (x * x) * (x * x) * (x * x) * (x * x) * (x * x) * (x * x) *\
    \ (x * x) * (x * x) * (x * x) * (x * x) * (x * x) * (x * x)) {\n        return\
    \ true\n    }\n    if n == (x * x * (x * x) * (x * x) * (x * x) * (x * x) * (x\
    \ * x) * (x * x) * (x * x) * (x * x) * (x * x) * (x * x) * (x * x) * (x * x))\
    \ {\n        return true\n    }\n    if n == (x * x * (x * x) * (x * x) * (x *\
    \ x) * (x * x) * (x * x) * (x * x) * (x * x) * (x * x) * (x * x) * (x * x) * (x\
    \ * x) * (x * x)) {\n        return true\n    }\n    if n == (x * x * (x * x)\
    \ * (x * x) * (x * x) * (x * x) * (x * x) * (x * x) * (x * x) * (x * x) * (x *\
    \ x) * (x * x) * (x * x) * (x * x)) {\n        return \n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp12ave_6m.swift:90:45: error: expected '}' at end of brace statement\n\
    assert(is_simple_power(x: 1, n: 12) == true)\n                               \
    \             ^\n/tmp/tmp12ave_6m.swift:12:46: note: to match this opening '{'\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n                             \
    \                ^\n/tmp/tmp12ave_6m.swift:65:9: error: non-void function should\
    \ return a value\n        return \n        ^\n/tmp/tmp12ave_6m.swift:69:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824614
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    return x == n**x\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpd2bur0jn.swift:13:18: error: cannot find operator '**' in scope\n\
    \    return x == n**x\n                 ^~\n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n        return\
    \ true\n    }\n    if x == n {\n        return true\n    }\n    if n % x == 0\
    \ {\n        return is_simple_power(x, n-1)\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpj_8d321a.swift:20:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    return is_power_of_two(x)\
    \ && is_power_of_two(n) && is_power_of_two(n*x)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmps4jfacgm.swift:13:12: error: cannot find 'is_power_of_two' in scope\n\
    \    return is_power_of_two(x) && is_power_of_two(n) && is_power_of_two(n*x)\n\
    \           ^~~~~~~~~~~~~~~\n/tmp/tmps4jfacgm.swift:13:34: error: cannot find\
    \ 'is_power_of_two' in scope\n    return is_power_of_two(x) && is_power_of_two(n)\
    \ && is_power_of_two(n*x)\n                                 ^~~~~~~~~~~~~~~\n\
    /tmp/tmps4jfacgm.swift:13:56: error: cannot find 'is_power_of_two' in scope\n\
    \    return is_power_of_two(x) && is_power_of_two(n) && is_power_of_two(n*x)\n\
    \                                                       ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824613
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    guard n > 0 else { return\
    \ false }\n    guard x == n else { return false }\n    guard n == 1 || (n % 2)\
    \ == 0 else { return false }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpk4cccgdl/tmpk4cccgdl.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2cf8708c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2cf83ffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2cf83ff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2cf83fe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk4cccgdl                        0x000055f021795246 <unavailable> + 4678

    5    libc.so.6                          0x00002b2cf88f4460 __libc_start_main +
    245

    6    tmpk4cccgdl                        0x000055f021794ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824614
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    return is_simple_power_impl(x,\
    \ n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(is_simple_power(x: 16, n: 2)\
    \ == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp049zxv5o.swift:13:12: error: cannot find 'is_simple_power_impl'\
    \ in scope\n    return is_simple_power_impl(x, n)\n           ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n        return\
    \ true\n    }\n    if x == n {\n        return true\n    }\n    if n % x == 0\
    \ {\n        return is_simple_power(x, n-1)\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpj_8d321a.swift:20:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n        return\
    \ true\n    }\n    if x == 1 {\n        return true\n    }\n    if n % x == 0\
    \ {\n        return is_simple_power(x, n/x) == 0\n    }\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpen6z07do.swift:20:40: error: binary operator '==' cannot be applied\
    \ to operands of type 'Bool' and 'Int'\n        return is_simple_power(x, n/x)\
    \ == 0\n               ~~~~~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpen6z07do.swift:20:40:\
    \ note: overloads for '==' exist with these partially matching parameter lists:\
    \ (Bool, Bool), (Int, Int)\n        return is_simple_power(x, n/x) == 0\n    \
    \                                   ^\n/tmp/tmpen6z07do.swift:20:31: error: missing\
    \ argument labels 'x:n:' in call\n        return is_simple_power(x, n/x) == 0\n\
    \                              ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824614
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n        return\
    \ true\n    }\n    if n == 2 {\n        return true\n    }\n    if n % 2 == 0\
    \ {\n        return is_simple_power(x, n / 2)\n    }\n    return is_simple_power(x,\
    \ n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpqsue19gl.swift:20:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n / 2)\n                           \
    \   ^\n                               x: n: \n/tmp/tmpqsue19gl.swift:22:27: error:\
    \ missing argument labels 'x:n:' in call\n    return is_simple_power(x, n - 1)\n\
    \                          ^\n                           x: n: \n"
  stdout: ''
  timestamp: 1659824614
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n        return\
    \ true\n    }\n    if n == 1 {\n        return true\n    }\n    if x == n {\n\
    \        return true\n    }\n    if n % x == 0 {\n        return is_simple_power(x,\
    \ n-1)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpdnq1f7cy.swift:23:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824614
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n        return\
    \ true\n    }\n    if n == 0 {\n        return false\n    }\n    if x == 1 {\n\
    \        return true\n    }\n    if x == 0 {\n        return false\n    }\n  \
    \  if x == n {\n        return true\n    }\n    if x % n == 0 {\n        return\
    \ is_simple_power(x / n, n)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmps_ctdprs.swift:29:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x / n, n)\n                           \
    \   ^\n                               x:     n: \n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    return is_simple_power_impl(x,\
    \ n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(is_simple_power(x: 16, n: 2)\
    \ == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp049zxv5o.swift:13:12: error: cannot find 'is_simple_power_impl'\
    \ in scope\n    return is_simple_power_impl(x, n)\n           ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n        return\
    \ true\n    }\n    if n == 1 {\n        return true\n    }\n    if n == 2 {\n\
    \        return is_simple_power(x, 2)\n    }\n    if n == 3 {\n        return\
    \ is_simple_power(x, 3)\n    }\n    if n == 4 {\n        return is_simple_power(x,\
    \ 4)\n    }\n    if n == 5 {\n        return is_simple_power(x, 5)\n    }\n  \
    \  if n == 6 {\n        return is_simple_power(x, 6)\n    }\n    if n == 7 {\n\
    \        return is_simple_power(x, 7)\n    }\n    if n == 8 {\n        return\
    \ is_simple_power(x, 8)\n    }\n    if n == 9 {\n        return is_simple_power(x,\
    \ 9)\n    }\n    if n == 10 {\n        return is_simple_power(x, 10)\n    }\n\
    \    if n == 11 {\n        return is_simple_power(x, 11)\n    }\n    if n == 12\
    \ {\n        return is_simple_power(x, 12)\n    }\n    if n == 13 {\n        return\
    \ is_simple_power(x, 13)\n    }\n    if n == 14 {\n        return is_simple_power(x,\
    \ 14)\n    }\n    if n == 15 {\n        return is_simple_power(x, 15)\n    }\n\
    \    if n == 16 {\n        return is_simple_power(x, 16)\n    }\n    if n == 17\
    \ {\n        return is_simple_power(x, 17)\n    }\n    if n == 18 {\n        return\
    \ is_simple_power(x, 18)\n    }\n    if n == 19 {\n        return is_simple_power(x,\
    \ 19)\n    }\n    if n == 20 {\n        return is_simple_power(x, 20)\n    }\n\
    \    if n == 21 {\n        return is_simple_power(x, 21)\n    }\n    if n == 22\
    \ {\n        return is_simple_power(x, 22)\n    }\n    if n == 23 {\n        return\
    \ is_simple_power(x, 23)\n    }\n    if n == 24 {\n        return is_simple_power(x,\
    \ 24)\n    }\n    if n == 25 {\n        return is_simple_power(x, 25)\n    }\n\
    \    if n == 26 {\n        return is_simple_power(x, 26)\n    }\n    if n == 27\
    \ {\n        return is_simple_power(x, 27)\n    }\n    if n == 28 {\n        return\
    \ is_simple_power(x, 28)\n    }\n    if n == 29 {\n        return is_simple_power(x,\
    \ 29)\n    }\n    if n == 30 {\n        return is_simple_power(x, 30)\n    }\n\
    \    if n == 31 {\n        return is_simple_power(x, 31)\n    }\n    if n == 32\
    \ {\n        return is_simple_power(x, 32)\n    }\n    if n == 33 {\n        return\
    \ is_simple_power(x, 33)\n    }\n    if n == 34 {\n        return is_simple_power(x,\
    \ 34)\n    }\n    if n == 35 {\n        return is_simple_power(x, 35)\n    }\n\
    \    if n == 36 {\n        return is_simple_power(x, 36\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpmhlhp8bj.swift:123:1: error: expected ')' in expression list\n\
    }\n^\n/tmp/tmpmhlhp8bj.swift:122:31: note: to match this opening '('\n       \
    \ return is_simple_power(x, 36\n                              ^\n/tmp/tmpmhlhp8bj.swift:147:45:\
    \ error: expected '}' at end of brace statement\nassert(is_simple_power(x: 1,\
    \ n: 12) == true)\n                                            ^\n/tmp/tmpmhlhp8bj.swift:12:46:\
    \ note: to match this opening '{'\nfunc is_simple_power(x: Int, n: Int) -> Bool\
    \ {\n                                             ^\n/tmp/tmpmhlhp8bj.swift:20:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ 2)\n                              ^\n                               x: n: \n\
    /tmp/tmpmhlhp8bj.swift:23:31: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, 3)\n                              ^\n     \
    \                          x: n: \n/tmp/tmpmhlhp8bj.swift:26:31: error: missing\
    \ argument labels 'x:n:' in call\n        return is_simple_power(x, 4)\n     \
    \                         ^\n                               x: n: \n/tmp/tmpmhlhp8bj.swift:29:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ 5)\n                              ^\n                               x: n: \n\
    /tmp/tmpmhlhp8bj.swift:32:31: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, 6)\n                              ^\n     \
    \                          x: n: \n/tmp/tmpmhlhp8bj.swift:35:31: error: missing\
    \ argument labels 'x:n:' in call\n        return is_simple_power(x, 7)\n     \
    \                         ^\n                               x: n: \n/tmp/tmpmhlhp8bj.swift:38:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ 8)\n                              ^\n                               x: n: \n\
    /tmp/tmpmhlhp8bj.swift:41:31: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, 9)\n                              ^\n     \
    \                          x: n: \n/tmp/tmpmhlhp8bj.swift:44:31: error: missing\
    \ argument l"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    return is_simple_power_impl(x,\
    \ n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(is_simple_power(x: 16, n: 2)\
    \ == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp049zxv5o.swift:13:12: error: cannot find 'is_simple_power_impl'\
    \ in scope\n    return is_simple_power_impl(x, n)\n           ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n        return\
    \ true\n    }\n    if x == n {\n        return true\n    }\n    if n % x == 0\
    \ {\n        return is_simple_power(x, n-1)\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpj_8d321a.swift:20:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n        return\
    \ true\n    }\n    if x == n {\n        return true\n    }\n    if n <= 1 {\n\
    \        return false\n    }\n    if x % n == 0 {\n        return is_simple_power(x\
    \ / n, n)\n    }\n    return is_simple_power(x, n-1)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpbk46mwa7.swift:23:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x / n, n)\n                           \
    \   ^\n                               x:     n: \n/tmp/tmpbk46mwa7.swift:25:27:\
    \ error: missing argument labels 'x:n:' in call\n    return is_simple_power(x,\
    \ n-1)\n                          ^\n                           x: n: \n"
  stdout: ''
  timestamp: 1659824614
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n        return\
    \ true\n    }\n    if x == n {\n        return true\n    }\n    if n % x == 0\
    \ {\n        return is_simple_power(x, n-1)\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpj_8d321a.swift:20:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    return x == n ** Int(x)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpuzzfo_ie.swift:13:19: error: cannot find operator '**' in scope\n\
    \    return x == n ** Int(x)\n                  ^~\n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    return x == n ** Int(x)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpuzzfo_ie.swift:13:19: error: cannot find operator '**' in scope\n\
    \    return x == n ** Int(x)\n                  ^~\n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n        return\
    \ true\n    }\n    if x == n {\n        return true\n    }\n    if n % x == 0\
    \ {\n        return is_simple_power(x, n-1)\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpj_8d321a.swift:20:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824613
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n        return\
    \ true\n    }\n    if n == 1 {\n        return true\n    }\n    if x == n {\n\
    \        return true\n    }\n    if x == n * (n - 1) {\n        return true\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpuspgfvfc/tmpuspgfvfc.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae914720c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae914417b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae914417988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae9144167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuspgfvfc                        0x00005591372f51b6 <unavailable> + 4534

    5    libc.so.6                          0x00002ae91490c460 __libc_start_main +
    245

    6    tmpuspgfvfc                        0x00005591372f4e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824614
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n        return\
    \ true\n    }\n    if n == 0 {\n        return false\n    }\n    if x == 0 {\n\
    \        return false\n    }\n    if x == 1 {\n        return true\n    }\n  \
    \  if x == n {\n        return true\n    }\n    if x % n == 0 {\n        return\
    \ is_simple_power(x / n, n)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpnh83z2fl.swift:29:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x / n, n)\n                           \
    \   ^\n                               x:     n: \n"
  stdout: ''
  timestamp: 1659824614
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n        return\
    \ true\n    }\n    if n == 2 {\n        return true\n    }\n    if x == 1 {\n\
    \        return true\n    }\n    if x == n {\n        return true\n    }\n   \
    \ if x == n^2 {\n        return true\n    }\n    if x == n^3 {\n        return\
    \ true\n    }\n    if x == n^4 {\n        return true\n    }\n    if x == n^5\
    \ {\n        return true\n    }\n    if x == n^6 {\n        return true\n    }\n\
    \    if x == n^7 {\n        return true\n    }\n    if x == n^8 {\n        return\
    \ true\n    }\n    if x == n^9 {\n        return true\n    }\n    if x == n^10\
    \ {\n        return true\n    }\n    if x == n^11 {\n        return true\n   \
    \ }\n    if x == n^12 {\n        return true\n    }\n    if x == n^13 {\n    \
    \    return true\n    }\n    if x == n^14 {\n        return true\n    }\n    if\
    \ x == n^15 {\n        return true\n    }\n    if x == n^16 {\n        return\
    \ true\n    }\n    if x == n^17 {\n        return true\n    }\n    if x == n^18\
    \ {\n        return true\n    }\n    if x == n^19 {\n        return true\n   \
    \ }\n    if x == n^20 {\n        return true\n    }\n    if x == n^21 {\n    \
    \    return true\n    }\n    if x == n^22 {\n        return true\n    }\n    if\
    \ x == n^23 {\n        return true\n    }\n    if x == n^24 {\n        return\
    \ true\n    }\n    if x == n^25 {\n        return true\n    }\n    if x == n^26\
    \ {\n        return true\n    }\n    if x == n^27 {\n        return true\n   \
    \ }\n    if x == n^28 {\n        return true\n    }\n    if x == n^29 {\n    \
    \    return true\n    }\n    if x == n^30 {\n        return true\n    }\n    if\
    \ x == n^31 {\n        return true\n    }\n    if x == n^32 {\n        return\
    \ true\n    }\n    if x == n^33 {\n        return true\n    }\n    if x == n^34\
    \ {\n        return true\n    }\n    if x == n^35 {\n        return true\n   \
    \ }\n    if x == n^36 {\n        return true\n    }\n    if x == n^37 {\n    \
    \    return true\n    }\n    if x == n^38 {\n        return true\n    }\n    if\
    \ x == n^39 {\n        return true\n    }\n    if x == n^40 {\n        return\
    \ true\n    }\n    if x == n^41 {\n        return true\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: '/tmp/tmpjkp6kz7v.swift:145:1: error: missing return in global function
    expected to return ''Bool''

    }

    ^

    '
  stdout: ''
  timestamp: 1659824614
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n        return\
    \ true\n    }\n    if x == n {\n        return true\n    }\n    if n <= 1 {\n\
    \        return false\n    }\n    if n % 2 == 0 {\n        return is_simple_power(x,\
    \ n/2)\n    }\n    return is_simple_power(x, n/2)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmph1evhml7.swift:23:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n/2)\n                             \
    \ ^\n                               x: n: \n/tmp/tmph1evhml7.swift:25:27: error:\
    \ missing argument labels 'x:n:' in call\n    return is_simple_power(x, n/2)\n\
    \                          ^\n                           x: n: \n"
  stdout: ''
  timestamp: 1659824614
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n        return\
    \ true\n    }\n    if n == 1 {\n        return true\n    }\n    if n == 2 {\n\
    \        return is_simple_power(x, 2)\n    }\n    if n == 3 {\n        return\
    \ is_simple_power(x, 3)\n    }\n    if n == 4 {\n        return is_simple_power(x,\
    \ 4)\n    }\n    if n == 5 {\n        return is_simple_power(x, 5)\n    }\n  \
    \  if n == 6 {\n        return is_simple_power(x, 6)\n    }\n    if n == 7 {\n\
    \        return is_simple_power(x, 7)\n    }\n    if n == 8 {\n        return\
    \ is_simple_power(x, 8)\n    }\n    if n == 9 {\n        return is_simple_power(x,\
    \ 9)\n    }\n    if n == 10 {\n        return is_simple_power(x, 10)\n    }\n\
    \    if n == 11 {\n        return is_simple_power(x, 11)\n    }\n    if n == 12\
    \ {\n        return is_simple_power(x, 12)\n    }\n    if n == 13 {\n        return\
    \ is_simple_power(x, 13)\n    }\n    if n == 14 {\n        return is_simple_power(x,\
    \ 14)\n    }\n    if n == 15 {\n        return is_simple_power(x, 15)\n    }\n\
    \    if n == 16 {\n        return is_simple_power(x, 16)\n    }\n    if n == 17\
    \ {\n        return is_simple_power(x, 17)\n    }\n    if n == 18 {\n        return\
    \ is_simple_power(x, 18)\n    }\n    if n == 19 {\n        return is_simple_power(x,\
    \ 19)\n    }\n    if n == 20 {\n        return is_simple_power(x, 20)\n    }\n\
    \    if n == 21 {\n        return is_simple_power(x, 21)\n    }\n    if n == 22\
    \ {\n        return is_simple_power(x, 22)\n    }\n    if n == 23 {\n        return\
    \ is_simple_power(x, 23)\n    }\n    if n == 24 {\n        return is_simple_power(x,\
    \ 24)\n    }\n    if n == 25 {\n        return is_simple_power(x, 25)\n    }\n\
    \    if n == 26 {\n        return is_simple_power(x, 26)\n    }\n    if n == 27\
    \ {\n        return is_simple_power(x, 27)\n    }\n    if n == 28 {\n        return\
    \ is_simple_power(x, 28)\n    }\n    if n == 29 {\n        return is_simple_power(x,\
    \ 29)\n    }\n    if n == 30 {\n        return is_simple_power(x, 30)\n    }\n\
    \    if n == 31 {\n        return is_simple_power(x, 31)\n    }\n    if n == 32\
    \ {\n        return is_simple_power(x, 32)\n    }\n    if n == 33 {\n        return\
    \ is_simple_power(x, 33)\n    }\n    if n == 34 {\n        return is_simple_power(x,\
    \ 34)\n    }\n    if n == 35 {\n        return is_simple_power(x, 35)\n    }\n\
    \    if n == 36 {\n        return is_simple_power(x, 36\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpmhlhp8bj.swift:123:1: error: expected ')' in expression list\n\
    }\n^\n/tmp/tmpmhlhp8bj.swift:122:31: note: to match this opening '('\n       \
    \ return is_simple_power(x, 36\n                              ^\n/tmp/tmpmhlhp8bj.swift:147:45:\
    \ error: expected '}' at end of brace statement\nassert(is_simple_power(x: 1,\
    \ n: 12) == true)\n                                            ^\n/tmp/tmpmhlhp8bj.swift:12:46:\
    \ note: to match this opening '{'\nfunc is_simple_power(x: Int, n: Int) -> Bool\
    \ {\n                                             ^\n/tmp/tmpmhlhp8bj.swift:20:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ 2)\n                              ^\n                               x: n: \n\
    /tmp/tmpmhlhp8bj.swift:23:31: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, 3)\n                              ^\n     \
    \                          x: n: \n/tmp/tmpmhlhp8bj.swift:26:31: error: missing\
    \ argument labels 'x:n:' in call\n        return is_simple_power(x, 4)\n     \
    \                         ^\n                               x: n: \n/tmp/tmpmhlhp8bj.swift:29:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ 5)\n                              ^\n                               x: n: \n\
    /tmp/tmpmhlhp8bj.swift:32:31: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, 6)\n                              ^\n     \
    \                          x: n: \n/tmp/tmpmhlhp8bj.swift:35:31: error: missing\
    \ argument labels 'x:n:' in call\n        return is_simple_power(x, 7)\n     \
    \                         ^\n                               x: n: \n/tmp/tmpmhlhp8bj.swift:38:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ 8)\n                              ^\n                               x: n: \n\
    /tmp/tmpmhlhp8bj.swift:41:31: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, 9)\n                              ^\n     \
    \                          x: n: \n/tmp/tmpmhlhp8bj.swift:44:31: error: missing\
    \ argument l"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n        return\
    \ true\n    }\n    if n == 0 {\n        return false\n    }\n    if x == 1 {\n\
    \        return true\n    }\n    if x == 0 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return is_simple_power(x, n//2)\n    }\n    return\
    \ is_simple_power(x*x, n-1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmplmc2zagq.swift:27:5: error: expected ')' in expression list\n \
    \   }\n    ^\n/tmp/tmplmc2zagq.swift:26:31: note: to match this opening '('\n\
    \        return is_simple_power(x, n//2)\n                              ^\n/tmp/tmplmc2zagq.swift:26:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ n//2)\n                              ^\n                               x: n:\
    \ \n/tmp/tmplmc2zagq.swift:28:27: error: missing argument labels 'x:n:' in call\n\
    \    return is_simple_power(x*x, n-1)\n                          ^\n         \
    \                  x:   n: \n"
  stdout: ''
  timestamp: 1659824614
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n        return\
    \ true\n    }\n    if x == n {\n        return true\n    }\n    if n == 1 {\n\
    \        return false\n    }\n    if n % 2 == 0 {\n        return is_simple_power(x,\
    \ n/2)\n    }\n    return is_simple_power(x, n-1)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpoauxmz7c.swift:23:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n/2)\n                             \
    \ ^\n                               x: n: \n/tmp/tmpoauxmz7c.swift:25:27: error:\
    \ missing argument labels 'x:n:' in call\n    return is_simple_power(x, n-1)\n\
    \                          ^\n                           x: n: \n"
  stdout: ''
  timestamp: 1659824614
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n        return\
    \ true\n    }\n    if x == 1 {\n        return true\n    }\n    if n == 0 {\n\
    \        return false\n    }\n    if x == 0 {\n        return false\n    }\n \
    \   if x == n {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ is_simple_power(x, n/2)\n    }\n    return is_simple_power(x, n-1)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpbsnjkc27.swift:29:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n/2)\n                             \
    \ ^\n                               x: n: \n/tmp/tmpbsnjkc27.swift:31:27: error:\
    \ missing argument labels 'x:n:' in call\n    return is_simple_power(x, n-1)\n\
    \                          ^\n                           x: n: \n"
  stdout: ''
  timestamp: 1659824614
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n        return\
    \ true\n    }\n    if x == n {\n        return true\n    }\n    if x < n {\n \
    \       return false\n    }\n    if x == n-1 {\n        return true\n    }\n \
    \   if x == n*n {\n        return true\n    }\n    if x == n*(n-1) {\n       \
    \ return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x: 143214,\
    \ n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: Exception
  stderr: 'tmpbsbo9i0g/tmpbsbo9i0g.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adba03ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adba00c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adba00c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adba00c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbsbo9i0g                        0x00005643870881b6 <unavailable> + 4534

    5    libc.so.6                          0x00002adba05b8460 __libc_start_main +
    245

    6    tmpbsbo9i0g                        0x0000564387087e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824614
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n        return\
    \ true\n    }\n    if n == 2 {\n        return true\n    }\n    if n == 3 {\n\
    \        return true\n    }\n    if n == 4 {\n        return true\n    }\n   \
    \ if n == 5 {\n        return true\n    }\n    if n == 6 {\n        return true\n\
    \    }\n    if n == 7 {\n        return true\n    }\n    if n == 8 {\n       \
    \ return true\n    }\n    if n == 9 {\n        return true\n    }\n    if n ==\
    \ 10 {\n        return true\n    }\n    if n == 11 {\n        return true\n  \
    \  }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n       \
    \ return true\n    }\n    if n == 14 {\n        return true\n    }\n    if n ==\
    \ 15 {\n        return true\n    }\n    if n == 16 {\n        return true\n  \
    \  }\n    if n == 17 {\n        return true\n    }\n    if n == 18 {\n       \
    \ return true\n    }\n    if n == 19 {\n        return true\n    }\n    if n ==\
    \ 20 {\n        return true\n    }\n    if n == 21 {\n        return true\n  \
    \  }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n       \
    \ return true\n    }\n    if n == 24 {\n        return true\n    }\n    if n ==\
    \ 25 {\n        return true\n    }\n    if n == 26 {\n        return true\n  \
    \  }\n    if n == 27 {\n        return true\n    }\n    if n == 28 {\n       \
    \ return true\n    }\n    if n == 29 {\n        return true\n    }\n    if n ==\
    \ 30 {\n        return true\n    }\n    if n == 31 {\n        return true\n  \
    \  }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n       \
    \ return true\n    }\n    if n == 34 {\n        return true\n    }\n    if n ==\
    \ 35 {\n        return true\n    }\n    if n == 36 {\n        return true\n  \
    \  }\n    if n == 37 {\n        return true\n    }\n    if n == 38 {\n       \
    \ return true\n    }\n    if n == 39 {\n        return true\n    }\n    if n ==\
    \ 40 {\n        return true\n    }\n    if n == 41 {\n        return true\n  \
    \  }\n    if n == 42 {\n        return true\n    }\n    if n == 43 {\n       \
    \ return true\n    }\n    if n == 44 {\n        return true\n    }\n    if n ==\
    \ 45 {\n        return true\n    }\n    if n == 46 {\n        return true\n  \
    \  }\n    if n == 47 {\n        return true\n    }\n    if n == 48 {\n       \
    \ return true\n    }\n    if n == 49 {\n        return true\n    }\n    if n ==\
    \ 50 {\n        return true\n    }\n    if n == 51 {\n        return true\n  \
    \  }\n    if n == 52 {\n        return \n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x: 143214,\
    \ n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpyvq3gzkc.swift:192:45: error: expected '}' at end of brace statement\n\
    assert(is_simple_power(x: 1, n: 12) == true)\n                               \
    \             ^\n/tmp/tmpyvq3gzkc.swift:12:46: note: to match this opening '{'\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n                             \
    \                ^\n/tmp/tmpyvq3gzkc.swift:167:9: error: non-void function should\
    \ return a value\n        return \n        ^\n/tmp/tmpyvq3gzkc.swift:171:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    return is_simple_power_impl(x,\
    \ n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(is_simple_power(x: 16, n: 2)\
    \ == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp049zxv5o.swift:13:12: error: cannot find 'is_simple_power_impl'\
    \ in scope\n    return is_simple_power_impl(x, n)\n           ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    return is_simple_power_helper(x,\
    \ n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(is_simple_power(x: 16, n: 2)\
    \ == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpv9i57rtl.swift:13:12: error: cannot find 'is_simple_power_helper'\
    \ in scope\n    return is_simple_power_helper(x, n)\n           ^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824614
- exit_code: -4
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    var result = true\n    var\
    \ power = 1\n    while power < n {\n        if (x == power) {\n            result\
    \ = true\n        } else {\n            result = false\n        }\n        power\
    \ *= x\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: Exception
  stderr: 'tmp8ttk80wm/tmp8ttk80wm.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b543e86cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b543e563b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b543e563988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b543e5627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8ttk80wm                        0x00005569ccafb1b6 <unavailable> + 4534

    5    libc.so.6                          0x00002b543ea58460 __libc_start_main +
    245

    6    tmp8ttk80wm                        0x00005569ccafae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824614
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n        return\
    \ true\n    }\n    if n == 1 {\n        return true\n    }\n    if n == 2 {\n\
    \        return is_simple_power(x, 2)\n    }\n    if n == 3 {\n        return\
    \ is_simple_power(x, 3)\n    }\n    if n == 4 {\n        return is_simple_power(x,\
    \ 4)\n    }\n    if n == 5 {\n        return is_simple_power(x, 5)\n    }\n  \
    \  if n == 6 {\n        return is_simple_power(x, 6)\n    }\n    if n == 7 {\n\
    \        return is_simple_power(x, 7)\n    }\n    if n == 8 {\n        return\
    \ is_simple_power(x, 8)\n    }\n    if n == 9 {\n        return is_simple_power(x,\
    \ 9)\n    }\n    if n == 10 {\n        return is_simple_power(x, 10)\n    }\n\
    \    if n == 11 {\n        return is_simple_power(x, 11)\n    }\n    if n == 12\
    \ {\n        return is_simple_power(x, 12)\n    }\n    if n == 13 {\n        return\
    \ is_simple_power(x, 13)\n    }\n    if n == 14 {\n        return is_simple_power(x,\
    \ 14)\n    }\n    if n == 15 {\n        return is_simple_power(x, 15)\n    }\n\
    \    if n == 16 {\n        return is_simple_power(x, 16)\n    }\n    if n == 17\
    \ {\n        return is_simple_power(x, 17)\n    }\n    if n == 18 {\n        return\
    \ is_simple_power(x, 18)\n    }\n    if n == 19 {\n        return is_simple_power(x,\
    \ 19)\n    }\n    if n == 20 {\n        return is_simple_power(x, 20)\n    }\n\
    \    if n == 21 {\n        return is_simple_power(x, 21)\n    }\n    if n == 22\
    \ {\n        return is_simple_power(x, 22)\n    }\n    if n == 23 {\n        return\
    \ is_simple_power(x, 23)\n    }\n    if n == 24 {\n        return is_simple_power(x,\
    \ 24)\n    }\n    if n == 25 {\n        return is_simple_power(x, 25)\n    }\n\
    \    if n == 26 {\n        return is_simple_power(x, 26)\n    }\n    if n == 27\
    \ {\n        return is_simple_power(x, 27)\n    }\n    if n == 28 {\n        return\
    \ is_simple_power(x, 28)\n    }\n    if n == 29 {\n        return is_simple_power(x,\
    \ 29)\n    }\n    if n == 30 {\n        return is_simple_power(x, 30)\n    }\n\
    \    if n == 31 {\n        return is_simple_power(x, 31)\n    }\n    if n == 32\
    \ {\n        return is_simple_power(x, 32)\n    }\n    if n == 33 {\n        return\
    \ is_simple_power(x, 33)\n    }\n    if n == 34 {\n        return is_simple_power(x,\
    \ 34)\n    }\n    if n == 35 {\n        return is_simple_power(x, 35)\n    }\n\
    \    if n == 36 {\n        return is_simple_power(x, 36\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpmhlhp8bj.swift:123:1: error: expected ')' in expression list\n\
    }\n^\n/tmp/tmpmhlhp8bj.swift:122:31: note: to match this opening '('\n       \
    \ return is_simple_power(x, 36\n                              ^\n/tmp/tmpmhlhp8bj.swift:147:45:\
    \ error: expected '}' at end of brace statement\nassert(is_simple_power(x: 1,\
    \ n: 12) == true)\n                                            ^\n/tmp/tmpmhlhp8bj.swift:12:46:\
    \ note: to match this opening '{'\nfunc is_simple_power(x: Int, n: Int) -> Bool\
    \ {\n                                             ^\n/tmp/tmpmhlhp8bj.swift:20:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ 2)\n                              ^\n                               x: n: \n\
    /tmp/tmpmhlhp8bj.swift:23:31: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, 3)\n                              ^\n     \
    \                          x: n: \n/tmp/tmpmhlhp8bj.swift:26:31: error: missing\
    \ argument labels 'x:n:' in call\n        return is_simple_power(x, 4)\n     \
    \                         ^\n                               x: n: \n/tmp/tmpmhlhp8bj.swift:29:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ 5)\n                              ^\n                               x: n: \n\
    /tmp/tmpmhlhp8bj.swift:32:31: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, 6)\n                              ^\n     \
    \                          x: n: \n/tmp/tmpmhlhp8bj.swift:35:31: error: missing\
    \ argument labels 'x:n:' in call\n        return is_simple_power(x, 7)\n     \
    \                         ^\n                               x: n: \n/tmp/tmpmhlhp8bj.swift:38:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ 8)\n                              ^\n                               x: n: \n\
    /tmp/tmpmhlhp8bj.swift:41:31: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, 9)\n                              ^\n     \
    \                          x: n: \n/tmp/tmpmhlhp8bj.swift:44:31: error: missing\
    \ argument l"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n        return\
    \ true\n    }\n    if x == n {\n        return true\n    }\n    if x % n == 0\
    \ {\n        return is_simple_power(x / n, n)\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmplzexjnrt.swift:20:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x / n, n)\n                           \
    \   ^\n                               x:     n: \n"
  stdout: ''
  timestamp: 1659824614
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    return is_simple_power_impl(x,\
    \ n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(is_simple_power(x: 16, n: 2)\
    \ == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp049zxv5o.swift:13:12: error: cannot find 'is_simple_power_impl'\
    \ in scope\n    return is_simple_power_impl(x, n)\n           ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    return x == n ** Int(x)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpuzzfo_ie.swift:13:19: error: cannot find operator '**' in scope\n\
    \    return x == n ** Int(x)\n                  ^~\n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    guard n >= 1 else {\n    \
    \    return false\n    }\n    if x == 1 {\n        return true\n    }\n    if\
    \ x == n {\n        return true\n    }\n    if x % n == 0 {\n        return is_simple_power(x\
    \ / n, n)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x: 143214,\
    \ n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp2bpocx36.swift:23:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x / n, n)\n                           \
    \   ^\n                               x:     n: \n"
  stdout: ''
  timestamp: 1659824614
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    guard x > 0 && n > 0 else\
    \ { return false }\n    var power = 1\n    var result = true\n    while n > 0\
    \ {\n        if n % 2 == 0 {\n            power = power * x\n            n /=\
    \ 2\n        } else {\n            power = power * x\n            n -= 1\n   \
    \     }\n    }\n    if power != x {\n        result = false\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_simple_power(x: 16,\
    \ n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpl5tuhh0n.swift:19:15: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n            n /= 2\n            ~ ^\n/tmp/tmpl5tuhh0n.swift:22:15:\
    \ error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n\
    \            n -= 1\n            ~ ^\n"
  stdout: ''
  timestamp: 1659824614
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    return is_simple_power_impl(x,\
    \ n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(is_simple_power(x: 16, n: 2)\
    \ == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp049zxv5o.swift:13:12: error: cannot find 'is_simple_power_impl'\
    \ in scope\n    return is_simple_power_impl(x, n)\n           ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n        return\
    \ true\n    }\n    if n == 1 {\n        return true\n    }\n    if n == 2 {\n\
    \        return is_simple_power(x, 2)\n    }\n    if n == 3 {\n        return\
    \ is_simple_power(x, 3)\n    }\n    if n == 4 {\n        return is_simple_power(x,\
    \ 4)\n    }\n    if n == 5 {\n        return is_simple_power(x, 5)\n    }\n  \
    \  if n == 6 {\n        return is_simple_power(x, 6)\n    }\n    if n == 7 {\n\
    \        return is_simple_power(x, 7)\n    }\n    if n == 8 {\n        return\
    \ is_simple_power(x, 8)\n    }\n    if n == 9 {\n        return is_simple_power(x,\
    \ 9)\n    }\n    if n == 10 {\n        return is_simple_power(x, 10)\n    }\n\
    \    if n == 11 {\n        return is_simple_power(x, 11)\n    }\n    if n == 12\
    \ {\n        return is_simple_power(x, 12)\n    }\n    if n == 13 {\n        return\
    \ is_simple_power(x, 13)\n    }\n    if n == 14 {\n        return is_simple_power(x,\
    \ 14)\n    }\n    if n == 15 {\n        return is_simple_power(x, 15)\n    }\n\
    \    if n == 16 {\n        return is_simple_power(x, 16)\n    }\n    if n == 17\
    \ {\n        return is_simple_power(x, 17)\n    }\n    if n == 18 {\n        return\
    \ is_simple_power(x, 18)\n    }\n    if n == 19 {\n        return is_simple_power(x,\
    \ 19)\n    }\n    if n == 20 {\n        return is_simple_power(x, 20)\n    }\n\
    \    if n == 21 {\n        return is_simple_power(x, 21)\n    }\n    if n == 22\
    \ {\n        return is_simple_power(x, 22)\n    }\n    if n == 23 {\n        return\
    \ is_simple_power(x, 23)\n    }\n    if n == 24 {\n        return is_simple_power(x,\
    \ 24)\n    }\n    if n == 25 {\n        return is_simple_power(x, 25)\n    }\n\
    \    if n == 26 {\n        return is_simple_power(x, 26)\n    }\n    if n == 27\
    \ {\n        return is_simple_power(x, 27)\n    }\n    if n == 28 {\n        return\
    \ is_simple_power(x, 28)\n    }\n    if n == 29 {\n        return is_simple_power(x,\
    \ 29)\n    }\n    if n == 30 {\n        return is_simple_power(x, 30)\n    }\n\
    \    if n == 31 {\n        return is_simple_power(x, 31)\n    }\n    if n == 32\
    \ {\n        return is_simple_power(x, 32)\n    }\n    if n == 33 {\n        return\
    \ is_simple_power(x, 33)\n    }\n    if n == 34 {\n        return is_simple_power(x,\
    \ 34)\n    }\n    if n == 35 {\n        return is_simple_power(x, 35)\n    }\n\
    \    if n == 36 {\n        return is_simple_power(x, 36\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpmhlhp8bj.swift:123:1: error: expected ')' in expression list\n\
    }\n^\n/tmp/tmpmhlhp8bj.swift:122:31: note: to match this opening '('\n       \
    \ return is_simple_power(x, 36\n                              ^\n/tmp/tmpmhlhp8bj.swift:147:45:\
    \ error: expected '}' at end of brace statement\nassert(is_simple_power(x: 1,\
    \ n: 12) == true)\n                                            ^\n/tmp/tmpmhlhp8bj.swift:12:46:\
    \ note: to match this opening '{'\nfunc is_simple_power(x: Int, n: Int) -> Bool\
    \ {\n                                             ^\n/tmp/tmpmhlhp8bj.swift:20:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ 2)\n                              ^\n                               x: n: \n\
    /tmp/tmpmhlhp8bj.swift:23:31: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, 3)\n                              ^\n     \
    \                          x: n: \n/tmp/tmpmhlhp8bj.swift:26:31: error: missing\
    \ argument labels 'x:n:' in call\n        return is_simple_power(x, 4)\n     \
    \                         ^\n                               x: n: \n/tmp/tmpmhlhp8bj.swift:29:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ 5)\n                              ^\n                               x: n: \n\
    /tmp/tmpmhlhp8bj.swift:32:31: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, 6)\n                              ^\n     \
    \                          x: n: \n/tmp/tmpmhlhp8bj.swift:35:31: error: missing\
    \ argument labels 'x:n:' in call\n        return is_simple_power(x, 7)\n     \
    \                         ^\n                               x: n: \n/tmp/tmpmhlhp8bj.swift:38:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ 8)\n                              ^\n                               x: n: \n\
    /tmp/tmpmhlhp8bj.swift:41:31: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, 9)\n                              ^\n     \
    \                          x: n: \n/tmp/tmpmhlhp8bj.swift:44:31: error: missing\
    \ argument l"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n        return\
    \ true\n    }\n    if x == n {\n        return true\n    }\n    if n % x == 0\
    \ {\n        return is_simple_power(x, n-1)\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpj_8d321a.swift:20:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    return is_simple_power_impl(x,\
    \ n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(is_simple_power(x: 16, n: 2)\
    \ == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp049zxv5o.swift:13:12: error: cannot find 'is_simple_power_impl'\
    \ in scope\n    return is_simple_power_impl(x, n)\n           ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n        return\
    \ true\n    }\n    if x == n {\n        return true\n    }\n    if n % x == 0\
    \ {\n        return is_simple_power(x, n/x+1)\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmphztburm4.swift:20:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n/x+1)\n                           \
    \   ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824614
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n        return\
    \ true\n    }\n    if n == 1 {\n        return true\n    }\n    if x == n {\n\
    \        return true\n    }\n    if n % 2 == 0 {\n        return is_simple_power(x,\
    \ n-1)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpfnvjusz7.swift:23:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824614
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n        return\
    \ true\n    }\n    if n == 1 {\n        return true\n    }\n    if x == n {\n\
    \        return true\n    }\n    if n % 2 == 0 {\n        return is_simple_power(x,\
    \ n/2)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpmqxis1g6.swift:23:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n/2)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824614
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    return x == n ** Int(x)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpuzzfo_ie.swift:13:19: error: cannot find operator '**' in scope\n\
    \    return x == n ** Int(x)\n                  ^~\n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n        return\
    \ true\n    }\n    if n == 0 {\n        return false\n    }\n    if x == 1 {\n\
    \        return true\n    }\n    if x == 0 {\n        return false\n    }\n  \
    \  if x == n {\n        return true\n    }\n    if x % n == 0 {\n        return\
    \ is_simple_power(x / n, n)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmps_ctdprs.swift:29:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x / n, n)\n                           \
    \   ^\n                               x:     n: \n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n        return\
    \ true\n    }\n    if x == n {\n        return true\n    }\n    if n == 1 {\n\
    \        return false\n    }\n    if n == 2 {\n        return is_simple_power(x,\
    \ n-1)\n    }\n    if n == 3 {\n        return is_simple_power(x, n-1) && is_simple_power(x,\
    \ n-2)\n    }\n    if n == 4 {\n        return is_simple_power(x, n-1) && is_simple_power(x,\
    \ n-2) && is_simple_power(x, n-3)\n    }\n    if n == 5 {\n        return is_simple_power(x,\
    \ n-1) && is_simple_power(x, n-2) && is_simple_power(x, n-3) && is_simple_power(x,\
    \ n-4)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpz8gxpppa.swift:23:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n-1)\n                             \
    \ ^\n                               x: n: \n/tmp/tmpz8gxpppa.swift:26:31: error:\
    \ missing argument labels 'x:n:' in call\n        return is_simple_power(x, n-1)\
    \ && is_simple_power(x, n-2)\n                              ^\n              \
    \                 x: n: \n/tmp/tmpz8gxpppa.swift:26:58: error: missing argument\
    \ labels 'x:n:' in call\n        return is_simple_power(x, n-1) && is_simple_power(x,\
    \ n-2)\n                                                         ^\n         \
    \                                                 x: n: \n/tmp/tmpz8gxpppa.swift:29:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ n-1) && is_simple_power(x, n-2) && is_simple_power(x, n-3)\n               \
    \               ^\n                               x: n: \n/tmp/tmpz8gxpppa.swift:29:58:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ n-1) && is_simple_power(x, n-2) && is_simple_power(x, n-3)\n               \
    \                                          ^\n                               \
    \                           x: n: \n/tmp/tmpz8gxpppa.swift:29:85: error: missing\
    \ argument labels 'x:n:' in call\n        return is_simple_power(x, n-1) && is_simple_power(x,\
    \ n-2) && is_simple_power(x, n-3)\n                                          \
    \                                          ^\n                               \
    \                                                      x: n: \n/tmp/tmpz8gxpppa.swift:32:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ n-1) && is_simple_power(x, n-2) && is_simple_power(x, n-3) && is_simple_power(x,\
    \ n-4)\n                              ^\n                               x: n:\
    \ \n/tmp/tmpz8gxpppa.swift:32:58: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, n-1) && is_simple_power(x, n-2) && is_simple_power(x,\
    \ n-3) && is_simple_power(x, n-4)\n                                          \
    \  "
  stdout: ''
  timestamp: 1659824614
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if n == 1 {\n        return\
    \ true\n    }\n    if x == 1 {\n        return true\n    }\n    if x == n {\n\
    \        return true\n    }\n    if n % 2 == 0 {\n        return is_simple_power(x,\
    \ n/2)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_simple_power(x:\
    \ 16, n: 2) == true)\nassert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x:\
    \ 4, n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
    \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
    \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
    \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7nyl5yis.swift:23:31: error: missing argument labels 'x:n:' in\
    \ call\n        return is_simple_power(x, n/2)\n                             \
    \ ^\n                               x: n: \n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    return x == n**x\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpd2bur0jn.swift:13:18: error: cannot find operator '**' in scope\n\
    \    return x == n**x\n                 ^~\n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    return is_power_of_two(x)\
    \ && is_power_of_two(n) && is_power_of_two(n*x)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmps4jfacgm.swift:13:12: error: cannot find 'is_power_of_two' in scope\n\
    \    return is_power_of_two(x) && is_power_of_two(n) && is_power_of_two(n*x)\n\
    \           ^~~~~~~~~~~~~~~\n/tmp/tmps4jfacgm.swift:13:34: error: cannot find\
    \ 'is_power_of_two' in scope\n    return is_power_of_two(x) && is_power_of_two(n)\
    \ && is_power_of_two(n*x)\n                                 ^~~~~~~~~~~~~~~\n\
    /tmp/tmps4jfacgm.swift:13:56: error: cannot find 'is_power_of_two' in scope\n\
    \    return is_power_of_two(x) && is_power_of_two(n) && is_power_of_two(n*x)\n\
    \                                                       ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    if x == 1 {\n        return\
    \ true\n    }\n    if n == 1 {\n        return true\n    }\n    if n == 2 {\n\
    \        return is_simple_power(x, 2)\n    }\n    if n == 3 {\n        return\
    \ is_simple_power(x, 3)\n    }\n    if n == 4 {\n        return is_simple_power(x,\
    \ 4)\n    }\n    if n == 5 {\n        return is_simple_power(x, 5)\n    }\n  \
    \  if n == 6 {\n        return is_simple_power(x, 6)\n    }\n    if n == 7 {\n\
    \        return is_simple_power(x, 7)\n    }\n    if n == 8 {\n        return\
    \ is_simple_power(x, 8)\n    }\n    if n == 9 {\n        return is_simple_power(x,\
    \ 9)\n    }\n    if n == 10 {\n        return is_simple_power(x, 10)\n    }\n\
    \    if n == 11 {\n        return is_simple_power(x, 11)\n    }\n    if n == 12\
    \ {\n        return is_simple_power(x, 12)\n    }\n    if n == 13 {\n        return\
    \ is_simple_power(x, 13)\n    }\n    if n == 14 {\n        return is_simple_power(x,\
    \ 14)\n    }\n    if n == 15 {\n        return is_simple_power(x, 15)\n    }\n\
    \    if n == 16 {\n        return is_simple_power(x, 16)\n    }\n    if n == 17\
    \ {\n        return is_simple_power(x, 17)\n    }\n    if n == 18 {\n        return\
    \ is_simple_power(x, 18)\n    }\n    if n == 19 {\n        return is_simple_power(x,\
    \ 19)\n    }\n    if n == 20 {\n        return is_simple_power(x, 20)\n    }\n\
    \    if n == 21 {\n        return is_simple_power(x, 21)\n    }\n    if n == 22\
    \ {\n        return is_simple_power(x, 22)\n    }\n    if n == 23 {\n        return\
    \ is_simple_power(x, 23)\n    }\n    if n == 24 {\n        return is_simple_power(x,\
    \ 24)\n    }\n    if n == 25 {\n        return is_simple_power(x, 25)\n    }\n\
    \    if n == 26 {\n        return is_simple_power(x, 26)\n    }\n    if n == 27\
    \ {\n        return is_simple_power(x, 27)\n    }\n    if n == 28 {\n        return\
    \ is_simple_power(x, 28)\n    }\n    if n == 29 {\n        return is_simple_power(x,\
    \ 29)\n    }\n    if n == 30 {\n        return is_simple_power(x, 30)\n    }\n\
    \    if n == 31 {\n        return is_simple_power(x, 31)\n    }\n    if n == 32\
    \ {\n        return is_simple_power(x, 32)\n    }\n    if n == 33 {\n        return\
    \ is_simple_power(x, 33)\n    }\n    if n == 34 {\n        return is_simple_power(x,\
    \ 34)\n    }\n    if n == 35 {\n        return is_simple_power(x, 35)\n    }\n\
    \    if n == 36 {\n        return is_simple_power(x, 36\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpmhlhp8bj.swift:123:1: error: expected ')' in expression list\n\
    }\n^\n/tmp/tmpmhlhp8bj.swift:122:31: note: to match this opening '('\n       \
    \ return is_simple_power(x, 36\n                              ^\n/tmp/tmpmhlhp8bj.swift:147:45:\
    \ error: expected '}' at end of brace statement\nassert(is_simple_power(x: 1,\
    \ n: 12) == true)\n                                            ^\n/tmp/tmpmhlhp8bj.swift:12:46:\
    \ note: to match this opening '{'\nfunc is_simple_power(x: Int, n: Int) -> Bool\
    \ {\n                                             ^\n/tmp/tmpmhlhp8bj.swift:20:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ 2)\n                              ^\n                               x: n: \n\
    /tmp/tmpmhlhp8bj.swift:23:31: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, 3)\n                              ^\n     \
    \                          x: n: \n/tmp/tmpmhlhp8bj.swift:26:31: error: missing\
    \ argument labels 'x:n:' in call\n        return is_simple_power(x, 4)\n     \
    \                         ^\n                               x: n: \n/tmp/tmpmhlhp8bj.swift:29:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ 5)\n                              ^\n                               x: n: \n\
    /tmp/tmpmhlhp8bj.swift:32:31: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, 6)\n                              ^\n     \
    \                          x: n: \n/tmp/tmpmhlhp8bj.swift:35:31: error: missing\
    \ argument labels 'x:n:' in call\n        return is_simple_power(x, 7)\n     \
    \                         ^\n                               x: n: \n/tmp/tmpmhlhp8bj.swift:38:31:\
    \ error: missing argument labels 'x:n:' in call\n        return is_simple_power(x,\
    \ 8)\n                              ^\n                               x: n: \n\
    /tmp/tmpmhlhp8bj.swift:41:31: error: missing argument labels 'x:n:' in call\n\
    \        return is_simple_power(x, 9)\n                              ^\n     \
    \                          x: n: \n/tmp/tmpmhlhp8bj.swift:44:31: error: missing\
    \ argument l"
  stdout: ''
  timestamp: 1659824613
- exit_code: 1
  program: "\n/// Your task is to write a function that returns true if a number x\
    \ is a simple\n/// power of n and false in other cases.\n/// x is a simple power\
    \ of n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
    \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) =>\
    \ false\n/// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\n\
    func is_simple_power(x: Int, n: Int) -> Bool {\n    return x == n ** Int(x)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\nassert(is_simple_power(x:\
    \ 143214, n: 16) == false)\nassert(is_simple_power(x: 4, n: 2) == true)\nassert(is_simple_power(x:\
    \ 9, n: 3) == true)\nassert(is_simple_power(x: 16, n: 4) == true)\nassert(is_simple_power(x:\
    \ 24, n: 2) == false)\nassert(is_simple_power(x: 128, n: 4) == false)\nassert(is_simple_power(x:\
    \ 12, n: 6) == false)\nassert(is_simple_power(x: 1, n: 1) == true)\nassert(is_simple_power(x:\
    \ 1, n: 12) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpuzzfo_ie.swift:13:19: error: cannot find operator '**' in scope\n\
    \    return x == n ** Int(x)\n                  ^~\n"
  stdout: ''
  timestamp: 1659824613
