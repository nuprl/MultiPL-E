name: HumanEval_156_int_to_mini_roman
language: swift
prompt: "\n/// Given a positive integer, obtain its roman numeral equivalent as a\
  \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
  /// Examples:\n/// >>> int_to_mini_roman(19) == 'xix'\n/// >>> int_to_mini_roman(152)\
  \ == 'clii'\n/// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunc int_to_mini_roman(number:\
  \ Int) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\"\
  )\nassert(int_to_mini_roman(number: 152) == \"clii\")\nassert(int_to_mini_roman(number:\
  \ 251) == \"ccli\")\nassert(int_to_mini_roman(number: 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number:\
  \ 500) == \"d\")\nassert(int_to_mini_roman(number: 1) == \"i\")\nassert(int_to_mini_roman(number:\
  \ 4) == \"iv\")\nassert(int_to_mini_roman(number: 43) == \"xliii\")\nassert(int_to_mini_roman(number:\
  \ 90) == \"xc\")\nassert(int_to_mini_roman(number: 94) == \"xciv\")\nassert(int_to_mini_roman(number:\
  \ 532) == \"dxxxii\")\nassert(int_to_mini_roman(number: 900) == \"cm\")\nassert(int_to_mini_roman(number:\
  \ 994) == \"cmxciv\")\nassert(int_to_mini_roman(number: 1000) == \"m\")"
completions: ["    let roman = romans[number]\n    if roman == nil {\n        return\
    \ \"\"\n    }\n    return roman!", "    var roman = \"\"\n    var remainder =\
    \ number\n    var quotient = 0\n    while remainder > 0 {\n        quotient =\
    \ remainder / 10\n        remainder = remainder % 10\n        roman += mini_roman[quotient]\n\
    \    }\n    return roman", "    var roman = \"\"\n    var remainder = number\n\
    \    var i = 1\n    while remainder > 0 {\n        remainder -= i\n        roman\
    \ += roman_digits[remainder]\n        i += 1\n    }\n    return roman", "    var\
    \ roman = \"\"\n    var num: Int\n    var numStr: String\n    var romanStr: String\n\
    \n    for numStr in \"MCMXC\":\n        romanStr = romanStr + numStr\n    }\n\n\
    \    for numStr in \"CLD\":\n        romanStr = romanStr + numStr\n    }\n\n \
    \   for numStr in \"MN\":\n        romanStr = romanStr + numStr\n    }\n\n   \
    \ for numStr in \"MMM\":\n        romanStr = romanStr + numStr\n    }\n\n    for\
    \ numStr in \"III\":\n        romanStr = romanStr + numStr\n    }\n\n    for numStr\
    \ in \"IV\":\n        romanStr = romanStr + numStr\n    }\n\n    for numStr in\
    \ \"V\":\n        romanStr = romanStr + numStr\n    }\n\n    for numStr in \"\
    IX\":\n        romanStr = romanStr + numStr\n    }\n\n    for numStr in \"X\"\
    :\n        romanStr = romanStr + numStr\n    }\n\n    for numStr in \"XL\":\n\
    \        romanStr = romanStr + numStr\n    }\n\n    for numStr in \"L\":\n   \
    \     romanStr = romanStr + numStr\n    }\n\n    for numStr in \"XC\":\n     \
    \   romanStr = romanStr + numStr\n    }\n\n    for numStr in \"C\":\n        romanStr\
    \ = romanStr + numStr\n    }\n\n    for numStr in \"D\":\n        romanStr = romanStr\
    \ + numStr\n    }\n\n    for numStr in \"M\":\n        romanStr = romanStr + numStr\n\
    \    }\n\n    for numStr in \"CM\":\n        romanStr = romanStr + numStr\n  \
    \  }\n\n    for numStr in \"MN\":\n        romanStr = romanStr + numStr\n    }\n\
    \n    for numStr in \"MMM\":\n        romanStr = romanStr + numStr\n    }\n\n\
    \    for numStr in \"MMM\":\n        romanStr = romanStr + numStr\n    }\n\n \
    \   for numStr in \"MMMM\":\n        romanStr = romanStr + numStr\n    }\n\n \
    \   for numStr in \"MMMM\":\n        romanStr = romanStr + numStr\n    }\n\n \
    \   for numStr in \"MMMM\":\n        romanStr = romanStr + numStr\n    }\n\n \
    \   for numStr in \"MMMM\":\n        romanStr = romanStr + numStr\n    }\n\n",
  "    var roman = \"\"\n    var i = 0\n    var numerals = [Int]()\n    var romans\
    \ = [String]()\n    for num in 1...1000 {\n        numerals.append(num)\n    }\n\
    \    for num in numerals {\n        roman = \"\"\n        for _ in 1...num {\n\
    \            roman += \"M\"\n        }\n        romans.append(roman)\n    }\n\
    \    for num in numerals {\n        if number == num {\n            return romans[numerals.index(num)]\n\
    \        }\n    }\n    return \"\"", "    var roman = \"\"\n    var remainder\
    \ = number % 100\n    var quotient = number / 100\n    if quotient > 0 {\n   \
    \     roman = roman.prefix(quotient) + int_to_mini_roman(remainder)\n    }\n \
    \   if remainder > 0 {\n        roman = roman.suffix(remainder) + roman\n    }\n\
    \    return roman.lowercased()", "    var roman = \"\"\n    var romanDigits =\
    \ \"\"\n    var romanNumber = 0\n    var romanNumberDigits = 0\n    var romanNumberRoman\
    \ = 0\n    var romanNumberRomanDigits = 0\n    var romanNumberRomanRoman = 0\n\
    \    var romanNumberRomanRomanDigits = 0\n    var romanNumberRomanRomanRoman =\
    \ 0\n    var romanNumberRomanRomanRomanDigits = 0\n    var romanNumberRomanRomanRomanRoman\
    \ = 0\n    var romanNumberRomanRomanRomanRomanDigits = 0\n    var romanNumberRomanRomanRomanRomanRoman\
    \ = 0\n    var romanNumberRomanRomanRomanRomanDigits = 0\n    var romanNumberRomanRomanRomanRomanRomanRoman\
    \ = 0\n    var romanNumberRomanRomanRomanRomanRomanDigits = 0\n    var romanNumberRomanRomanRomanRomanRomanRoman\
    \ = 0\n    var romanNumberRomanRomanRomanRomanRomanDigits = 0\n    var romanNumberRomanRomanRomanRomanRomanRoman\
    \ = 0\n    var romanNumberRomanRomanRomanRomanRomanDigits = 0\n    var romanNumberRomanRomanRomanRomanRomanRoman\
    \ = 0\n    var romanNumberRomanRomanRomanRomanRomanDigits = 0\n    var romanNumberRomanRomanRomanRomanRomanRomanRoman\
    \ = 0\n    var romanNumberRomanRomanRomanRomanRomanRomanDigits = 0\n    var romanNumberRomanRomanRomanRomanRomanRomanRoman\
    \ = 0\n    var romanNumberRomanRomanRomanRomanRomanRomanDigits = 0\n    var romanNumberRomanRomanRomanRomanRomanRomanRoman\
    \ = 0\n    var romanNumberRomanRomanRomanRomanRomanRomanDigits = 0\n    var romanNumberRomanRomanRomanRomanRomanRomanRoman\
    \ = 0\n    var romanNumberRomanRomanRomanRomanRomanRomanDigits = 0\n    var romanNumberRomanRomanRomanRomanRomanRomanRoman\
    \ = 0\n    var romanNumberRomanRomanRomanRomanRomanRomanDigits = 0\n    var romanNumberRomanRomanRomanRomanRomanRomanRoman\
    \ = 0\n    var romanNumberRomanRomanRo", "    var roman = \"\"\n    var roman_numeral\
    \ = \"\"\n    var roman_numeral_digits = \"\"\n    var roman_numeral_digits_length\
    \ = 0\n    var roman_numeral_digits_index = 0\n    var roman_numeral_digits_index_max\
    \ = 0\n    var roman_numeral_digits_index_min = 0\n    var roman_numeral_digits_index_max_min\
    \ = 0\n    var roman_numeral_digits_index_max_min_index = 0\n    var roman_numeral_digits_index_max_min_index_max\
    \ = 0\n    var roman_numeral_digits_index_max_min_index_max_min = 0\n    var roman_numeral_digits_index_max_min_index_max_min_index\
    \ = 0\n    var roman_numeral_digits_index_max_min_index_max_min_index_max = 0\n\
    \    var roman_numeral_digits_index_max_min_index_max_min_index_max_min = 0\n\
    \    var roman_numeral_digits_index_max_min_index_max_min_index_max_min_index\
    \ = 0\n    var roman_numeral_digits_index_max_min_index_max_min_index_max_min_index_max\
    \ = 0\n    var roman_numeral_digits_index_max_min_index_max_min_index_max_min_index_max_min\
    \ = 0\n    var roman_numeral_digits_index_max_min_index_max_min_index_max_min_index_max_min_index\
    \ = 0\n    var roman_numeral_digits_index_max_min_index_max_min_index_max_min_index_max_min_index_max\
    \ = 0\n    var roman_numeral_digits_index_max_min_index_max_min_index_max_min_index_max_min_index_max_min\
    \ = 0\n    var roman_numeral_digits_index_max_min_index_max_min_index_max_min_index_max_min_index_max_min_index\
    \ = 0\n    var roman_numeral_digits_index_max_min_index_max_min_index_max_min_index_max_min_index_max_min_index_max\
    \ = 0\n    var roman_numeral_digits_index_max_min_index_max_min_index_max_min_index_max_min_index_max_min_index_max_min\
    \ = 0\n    var roman_numeral_digits_index_max_min_index_max_min_index_max_min_index_max_min_index_max_min_index_max_min_index\
    \ = 0\n    var roman_numeral_digits_index_max_min_index_max_min_index_max_min_index_max_min_index_max_min_index_max_min_index_max\
    \ = 0\n    var roman_numeral_digits_index_max_min_index_max_min_index_max_min_index_max_min_index_max_min_index_max_min_index_max_min\
    \ = 0\n    var roman_numeral_digits_index_max_min_index_max_min_index_max_min_index_max_min_index_max_min_index_max_min_index_max_min_index\
    \ = 0\n    var roman_numeral_digits_index_max_min_index_max_min_index_max_min_index_max_min",
  "    let roman = roman_numerals(number)\n    return roman.map(String::init).joined()",
  "    var roman = \"\"\n    var remainder = number\n    var remainder2 = number\n\
    \    var remainder3 = number\n    var remainder4 = number\n    var remainder5\
    \ = number\n    var remainder6 = number\n    var remainder7 = number\n    var\
    \ remainder8 = number\n    var remainder9 = number\n    var remainder10 = number\n\
    \    var remainder11 = number\n    var remainder12 = number\n    var remainder13\
    \ = number\n    var remainder14 = number\n    var remainder15 = number\n    var\
    \ remainder16 = number\n    var remainder17 = number\n    var remainder18 = number\n\
    \    var remainder19 = number\n    var remainder20 = number\n    var remainder21\
    \ = number\n    var remainder22 = number\n    var remainder23 = number\n    var\
    \ remainder24 = number\n    var remainder25 = number\n    var remainder26 = number\n\
    \    var remainder27 = number\n    var remainder28 = number\n    var remainder29\
    \ = number\n    var remainder30 = number\n    var remainder31 = number\n    var\
    \ remainder32 = number\n    var remainder33 = number\n    var remainder34 = number\n\
    \    var remainder35 = number\n    var remainder36 = number\n    var remainder37\
    \ = number\n    var remainder38 = number\n    var remainder39 = number\n    var\
    \ remainder40 = number\n    var remainder41 = number\n    var remainder42 = number\n\
    \    var remainder43 = number\n    var remainder44 = number\n    var remainder45\
    \ = number\n    var remainder46 = number\n    var remainder47 = number\n    var\
    \ remainder48 = number\n    var remainder49 = number\n    var remainder50 = number\n\
    \    var remainder51 = number\n    var remainder52 = number\n    var remainder53\
    \ = number\n    var remainder54 = number\n    var remainder55 = number\n    var\
    \ remainder56 = number\n    var remainder57 = number\n    var remainder58 = number\n\
    \    var remainder59 = number\n    var remainder60 = number\n    var remainder61\
    \ = number\n    var remainder62 = number\n    var remainder63 = number\n    var\
    \ remainder64 = number\n    var remainder65 = number\n    var remainder66 = number\n\
    \    var remainder67 = number\n    var remainder68 = number\n    var remainder69\
    \ = number\n    var remainder70 = number\n    var remainder71 = number\n    var\
    \ remainder72 = number\n    var remainder73 = number\n    var remainder74 = number\n\
    \    var remain", "    let roman = int_to_roman(number)\n    return roman.lowercased()",
  "    let roman = int_to_roman(number)\n    return roman.lowercased()", "    var\
    \ roman = \"\"\n    var num = 0\n    var lastNum = 0\n    var lastNumStr = \"\"\
    \n    for numStr in romanNumStrs {\n        if number >= numStr.num {\n      \
    \      lastNum = numStr.num\n            lastNumStr = numStr.str\n        }\n\
    \    }\n    if lastNum == 0 {\n        return roman\n    }\n    for numStr in\
    \ romanNumStrs {\n        if lastNum >= numStr.num {\n            roman = roman.Insert(0,\
    \ numStr.str)\n            number -= lastNum\n            lastNum = 0\n      \
    \      lastNumStr = \"\"\n        }\n    }\n    if number > 0 {\n        roman\
    \ = roman.Insert(0, lastNumStr)\n    }\n    return roman", "    let roman = IntToRoman(number)\n\
    \    return roman.lowercased()", "    var roman = \"\"\n    var numeral = number\n\
    \    var index = 0\n    var romanNum = 0\n    var romanNumString = \"\"\n    var\
    \ romanNumStringWithSpaces = \"\"\n    var romanNumStringWithSpacesWithSpaces\
    \ = \"\"\n    var romanNumStringWithSpacesWithSpacesWithSpaces = \"\"\n    var\
    \ romanNumStringWithSpacesWithSpacesWithSpacesWithSpaces = \"\"\n    var romanNumStringWithSpacesWithSpacesWithSpacesWithSpacesWithSpaces\
    \ = \"\"\n    var romanNumStringWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpaces\
    \ = \"\"\n    var romanNumStringWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpaces\
    \ = \"\"\n    var romanNumStringWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpaces\
    \ = \"\"\n    var romanNumStringWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpaces\
    \ = \"\"\n    var romanNumStringWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpaces\
    \ = \"\"\n    var romanNumStringWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpaces\
    \ = \"\"\n    var romanNumStringWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpaces\
    \ = \"\"\n    var romanNumStringWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpaces\
    \ = \"\"\n    var romanNumStringWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpaces\
    \ = \"\"\n    var romanNumStringWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpaces\
    \ = \"\"\n    var romanNumStringWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpaces",
  "    if number < 1 || number > 1000 {\n        throw Error::new(ENOENT, \"Invalid\
    \ number\")\n    }\n    let mut roman = String::new();\n    let mut numeral =\
    \ number;\n    let mut remainder = number;\n    let mut i = 1;\n    while remainder\
    \ > 0 {\n        remainder -= 10;\n        roman.push((numeral % 10).to_string());\n\
    \        numeral /= 10;\n        i += 1;\n    }\n    roman.push((numeral % 10).to_string());\n\
    \    roman.push((i as String).to_string());\n    roman.push_str(\"i\");\n    roman.push_str(\"\
    x\");\n    roman.push_str(\"i\");\n    roman.push_str(\"x\");\n    roman.push_str(\"\
    i\");\n    roman.push_str(\"x\");\n    roman.push_str(\"i\");\n    roman.push_str(\"\
    x\");\n    roman.push_str(\"i\");\n    roman.push_str(\"x\");\n    roman.push_str(\"\
    i\");\n    roman.push_str(\"x\");\n    roman.push_str(\"i\");\n    roman.push_str(\"\
    x\");\n    roman.push_str(\"i\");\n    roman.push_str(\"x\");\n    roman.push_str(\"\
    i\");\n    roman.push_str(\"x\");\n    roman.push_str(\"i\");\n    roman.push_str(\"\
    x\");\n    roman.push_str(\"i\");\n    roman.push_str(\"x\");\n    roman.push_str(\"\
    i\");\n    roman.push_str(\"x\");\n    roman.push_str(\"i\");\n    roman.push_str(\"\
    x\");\n    roman.push_str(\"i\");\n    roman.push_str(\"x\");\n    roman.push_str(\"\
    i\");\n    roman.push_str(\"x\");\n    roman.push_str(\"i\");\n    roman.push_str(\"\
    x\");\n    roman.push_str(\"i\");\n    roman.push_str(\"x\");\n    roman.push_str(\"\
    i\");\n    roman.push_str(\"x\");\n    roman.push_str(\"i\");\n    roman.push_str(\"\
    x\");\n    roman.push_str(\"i\");\n    roman.push_str(\"x\");\n    roman.push_str(\"\
    i\");\n    roman.push_str(\"x\");\n    roman.push_str(\"i\");\n    roman.push_str(\"\
    x\");\n    roman.push_str(\"i\");\n    roman.push_str(\"x\");\n    ro", "    let\
    \ roman = mini_roman(number)\n    return roman.lowercased()", "    let roman =\
    \ roman_numerals(number)\n    return roman.map(String.init).joinWithSeparator(\"\
    \")", "    var roman = \"\"\n    var i = 0\n    for num in 0..<number {\n    \
    \    var romanDigit = romanDigits[num]\n        if romanDigit == 0 {\n       \
    \     romanDigit += romanDigit\n        } else {\n            romanDigit += romanDigits[romanDigit]\n\
    \        }\n        roman = roman.stringByAppendingString(romanDigit)\n      \
    \  i += 1\n    }\n    return roman.lowercaseString", "    let roman = roman_to_int(number)\n\
    \    return mini_roman_to_int(roman)"]
stop_tokens:
- "\n}"
