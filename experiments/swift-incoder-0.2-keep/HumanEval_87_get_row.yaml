name: HumanEval_87_get_row
language: swift
prompt: "\n/// You are given a 2 dimensional data, as a nested lists,\n/// which is\
  \ similar to matrix, however, unlike matrices,\n/// each row may contain a different\
  \ number of columns.\n/// Given lst, and integer x, find integers x in the list,\n\
  /// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n/// each tuple\
  \ is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates initially\
  \ by rows in ascending order.\n/// Also, sort coordinates of the row by columns\
  \ in descending order.\n/// Examples:\n/// get_row([\n/// [1,2,3,4,5,6],\n/// [1,2,3,4,1,6],\n\
  /// [1,2,3,4,5,1]\n/// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// get_row([],\
  \ 1) == []\n/// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunc get_row(lst:\
  \ [[Int]], x: Int) -> [(Int, Int)] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(get_row(lst: [[1, 2, 3, 4, 5, 6], [1, 2,\
  \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], x: 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2,\
  \ 0)])\nassert(get_row(lst: [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
  \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], x: 2) == [(0,\
  \ 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\nassert(get_row(lst: [[1, 2, 3, 4,\
  \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
  \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], x: 1) == [(0, 0), (1, 0), (2,\
  \ 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)])\n\
  assert(get_row(lst: [] as [[Int]], x: 1) == [] as [(Int, Int)])\nassert(get_row(lst:\
  \ [[1]], x: 2) == [] as [(Int, Int)])\nassert(get_row(lst: [[] as [Int], [1], [1,\
  \ 2, 3]], x: 3) == [(2, 2)])"
completions: ["    var row = [Int]()\n    var column = [Int]()\n    var result = [[(Int,\
    \ Int)]]()\n    for row in lst {\n        for column in row {\n            if\
    \ column == x {\n                result.append([(row, column)])\n            }\n\
    \        }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder()\n\
    \    return result", "    var row = [Int]()\n    var col = [Int]()\n    var result\
    \ = [[(Int, Int)]]()\n    for row in lst {\n        for col in row {\n       \
    \     if col == x {\n                result.append((col, row))\n            }\n\
    \        }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder(by:\
    \ {$0.0 < $1.0})\n    return result", "    var row = [Int]()\n    var col = [Int]()\n\
    \    var result = [(Int, Int)]()\n    for row in lst {\n        for col in row\
    \ {\n            if col == x {\n                result.append((row, col))\n  \
    \          }\n        }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder(by:\
    \ {$0.0 < $1.0})\n    return result", "    var row = [Int]()\n    var col = [Int]()\n\
    \    var result = [[(Int, Int)]]()\n    for row in lst {\n        if row.contains(x)\
    \ {\n            for col in row {\n                if col == x {\n           \
    \         result.append([(row, col)])\n                }\n            }\n    \
    \    }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder(by:\
    \ {$0.1 < $1.1})\n    return result", "    var rows = [[(Int, Int)]]()\n    var\
    \ row = [Int]()\n    var cols = [Int]()\n    var col = [Int]()\n    var i = 0\n\
    \    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n \
    \   var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n  \
    \  var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n   \
    \ var y = 0\n    var z = 0\n    var count = 0\n    var rowCount = 0\n    var colCount\
    \ = 0\n    for _ in lst {\n        if rowCount == 0 {\n            row = l\n \
    \           cols = m\n        } else {\n            row = rows[rowCount-1]\n \
    \           cols = cols[colCount-1]\n        }\n        if colCount == 0 {\n \
    \           cols = m\n        } else {\n            cols = cols[colCount-1]\n\
    \        }\n        if rowCount == 0 {\n            rows = l\n        } else {\n\
    \            rows = rows[rowCount-1]\n        }\n        if colCount == 0 {\n\
    \            cols = m\n        } else {\n            cols = cols[colCount-1]\n\
    \        }\n        if rowCount == 0 {\n            rows = l\n        } else {\n\
    \            rows = rows[rowCount-1]\n        }\n        if colCount == 0 {\n\
    \            cols = m\n        } else {\n            cols = cols[colCount-1]\n\
    \        }\n        if rowCount == 0 {\n            rows = l\n        } else {\n\
    \            rows = rows[rowCount-1]\n        }\n        if colCount == 0 {\n\
    \            cols = m\n        } else {\n            cols = cols[colCount-1]\n\
    \        }\n        if rowCount == 0 {\n            rows = l\n        } else {\n\
    \            rows = rows[rowCount-1]\n        }\n        if colCount == 0 {\n\
    \            cols = m\n        } else {\n            cols = cols[colCount-1]\n\
    \        }\n        if rowCount == 0 {\n            rows = l\n        } else {\n\
    \            rows = rows[rowCount-1]\n        }\n        if colCount == 0 {\n\
    \            cols = m\n        } else {\n            cols = cols[colCount-1]\n\
    \        }\n        if rowCount == 0 {\n            rows = l\n        } else {\n\
    \            rows = rows[rowCount-1]\n        }\n        if colCount == 0 {\n\
    \            cols = m\n        } else {\n            cols = cols[colCount-1]\n\
    \        }\n        if rowCount == 0 {\n            rows = l\n        } else {\n\
    \            rows = rows[rowCount-1]\n        }\n        if colCount == 0 {\n\
    \            cols = m\n        } else {\n            cols = cols[colCount-1]\n\
    \        }\n        if rowCount == 0 {\n            rows = l\n        } else {\n\
    \            rows = rows[rowCount-1]\n        }\n        if colCount == 0 {",
  "    var result = [(Int, Int)]()\n    var row = 0\n    var col = 0\n    for row\
    \ in lst {\n        if row == x {\n            break\n        }\n    }\n    for\
    \ row in lst {\n        if row == x {\n            break\n        }\n        for\
    \ col in row {\n            if col == x {\n                break\n           \
    \ }\n        }\n        result.append((row, col))\n    }\n    return result",
  "    var row = [Int]()\n    var col = [Int]()\n    var result = [[(Int, Int)]]()\n\
    \    for row in lst {\n        for col in row {\n            if col == x {\n \
    \               result.append((row, col))\n            }\n        }\n    }\n \
    \   result.sort(by: { (row1, row2) in\n        row1.0 < row2.0\n    })\n    result.sort(by:\
    \ { (row1, row2) in\n        row1.1 < row2.0\n    })\n    return result", "  \
    \  var rows = [[(Int, Int)]]()\n    for row in lst {\n        var cols = [Int]()\n\
    \        for col in row {\n            if col == x {\n                cols.append(col)\n\
    \            }\n        }\n        rows.append((row, cols))\n    }\n    return\
    \ rows", "    var result = [(Int, Int)]()\n    var row = 0\n    var col = 0\n\
    \    for row in lst {\n        if row == x {\n            break\n        }\n \
    \   }\n    for row in lst {\n        if row == x {\n            break\n      \
    \  }\n        for col in row {\n            if col == x {\n                break\n\
    \            }\n        }\n        result.append((row, col))\n    }\n    return\
    \ result", "    var rows = [[(Int, Int)]]()\n    var row = [Int]()\n    var columns\
    \ = [Int]()\n    var row_index = 0\n    var column_index = 0\n    for row in lst\
    \ {\n        column_index = 0\n        for column in row {\n            if column\
    \ == x {\n                rows.append([(row_index, column_index)])\n         \
    \   }\n            column_index += 1\n        }\n        row_index += 1\n    }\n\
    \    rows.sort(by: {$0.0 < $1.0})\n    rows.sort(by: {$0.1 < $1.0})\n    rows.sort(by:\
    \ {$0.0 < $1.0})\n    return rows", "    var rows = [[(Int, Int)]]()\n    for\
    \ row in lst {\n        var rowTups = [(Int, Int)]()\n        for tup in row {\n\
    \            if tup == x {\n                rowTups.append((tup, 1))\n       \
    \     } else {\n                rowTups.append((tup, 0))\n            }\n    \
    \    }\n        rows.append(rowTups)\n    }\n    return rows", "    var result\
    \ = [(Int, Int)]()\n    for row in lst {\n        for (i, v) in row.enumerated()\
    \ {\n            if v == x {\n                result.append( (i, row.count) )\n\
    \            }\n        }\n    }\n    result.sortInPlace()\n    result.sortInPlace{\
    \ $0.1 < $1.1 }\n    return result", "    if lst.isEmpty() {\n        return []\n\
    \    }\n    var row = [Int]()\n    var col = [Int]()\n    var rows = [Int]()\n\
    \    var cols = [Int]()\n    var i = 0\n    var j = 0\n    var k = 0\n    var\
    \ l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q\
    \ = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v =\
    \ 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var count\
    \ = 0\n    var rowCount = 0\n    var colCount = 0\n    for row in lst {\n    \
    \    if rowCount == x {\n            break\n        }\n        rowCount = rowCount\
    \ + 1\n    }\n    for col in row {\n        if colCount == x {\n            break\n\
    \        }\n        colCount = colCount + 1\n    }\n    for row in lst {\n   \
    \     if rowCount == x {\n            break\n        }\n        rowCount = rowCount\
    \ + 1\n    }\n    for col in row {\n        if colCount == x {\n            break\n\
    \        }\n        colCount = colCount + 1\n    }\n    for row in lst {\n   \
    \     if rowCount == x {\n            break\n        }\n        rowCount = rowCount\
    \ + 1\n    }\n    for col in row {\n        if colCount == x {\n            break\n\
    \        }\n        colCount = colCount + 1\n    }\n    for row in lst {\n   \
    \     if rowCount == x {\n            break\n        }\n        rowCount = rowCount\
    \ + 1\n    }\n    for col in row {\n        if colCount == x {\n            break\n\
    \        }\n        colCount = colCount + 1\n    }\n    for row in lst {\n   \
    \     if rowCount == x {\n            break\n        }\n        rowCount = rowCount\
    \ + 1\n    }\n    for col in row {\n        if colCount == x {\n            break\n\
    \        }\n        colCount = colCount + 1\n    }\n    for row in lst {\n   \
    \     if rowCount == x {\n            break\n        }\n        rowCount = rowCount\
    \ + 1\n    }\n    for col in row {\n        if colCount == x {\n            break\n\
    \        }\n        colCount = colCount + 1\n    }\n    for row in lst {\n   \
    \     if rowCount == x {\n            break\n        }\n        rowCount = rowCount\
    \ + 1\n    }\n    for col in row {\n        if colCount == x {\n            break\n\
    \        }\n        colCount = colCount + 1\n    }\n    for row in lst {\n   \
    \     if rowCount == x {\n            break\n        }\n        rowCount = rowCount\
    \ + 1\n    }\n    for col in row {\n        if colCoun", "    var row = [Int]()\n\
    \    var col = [Int]()\n    var result = [[(Int, Int)]]()\n    for row in lst\
    \ {\n        for col in row {\n            if col == x {\n                result.append((row,\
    \ col))\n            }\n        }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder(by:\
    \ {$0.0 < $1.0})\n    return result", "    if lst.isEmpty() {\n        return\
    \ []\n    }\n    var row = [Int]()\n    var col = [Int]()\n    var rows = [Int]()\n\
    \    var cols = [Int]()\n    var i = 0\n    var j = 0\n    for row in lst {\n\
    \        i += 1\n        for col in row {\n            j += 1\n            if\
    \ j == x {\n                rows.append(i)\n                cols.append(j)\n \
    \           }\n        }\n    }\n    rows.sortInPlace()\n    cols.sortInPlace()\n\
    \    var result = [(0, 0)]\n    for row in rows {\n        for col in cols {\n\
    \            result.append((row, col))\n        }\n    }\n    return result",
  "    var result = [(Int, Int)]()\n    for row in lst {\n        for (i, v) in row.enumerated()\
    \ {\n            if v == x {\n                result.append( (i, row.count) )\n\
    \                break\n            }\n        }\n    }\n    result.sortInPlace()\n\
    \    result.sortInPlace{ $0.1 < $1.1 }\n    return result", "    var row = [Int]()\n\
    \    var col = [Int]()\n    var result = [(Int, Int)]()\n    for row in lst {\n\
    \        for col in row {\n            if col == x {\n                result.append((row,\
    \ col))\n            }\n        }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder()\n\
    \    return result", "    var result = [(Int, Int)]()\n    var row = 0\n    var\
    \ col = 0\n    for row in lst {\n        if row == x {\n            break\n  \
    \      }\n    }\n    for col in row.reverse() {\n        if col == x {\n     \
    \       break\n        }\n    }\n    for row in lst {\n        if row == x {\n\
    \            break\n        }\n        for col in row.reverse() {\n          \
    \  if col == x {\n                break\n            }\n        }\n    }\n   \
    \ for row in lst {\n        if row == x {\n            break\n        }\n    \
    \    for col in row.reverse() {\n            if col == x {\n                break\n\
    \            }\n        }\n    }\n    for row in lst {\n        if row == x {\n\
    \            break\n        }\n        for col in row.reverse() {\n          \
    \  if col == x {\n                break\n            }\n        }\n    }\n   \
    \ for row in lst {\n        if row == x {\n            break\n        }\n    \
    \    for col in row.reverse() {\n            if col == x {\n                break\n\
    \            }\n        }\n    }\n    for row in lst {\n        if row == x {\n\
    \            break\n        }\n        for col in row.reverse() {\n          \
    \  if col == x {\n                break\n            }\n        }\n    }\n   \
    \ for row in lst {\n        if row == x {\n            break\n        }\n    \
    \    for col in row.reverse() {\n            if col == x {\n                break\n\
    \            }\n        }\n    }\n    for row in lst {\n        if row == x {\n\
    \            break\n        }\n        for col in row.reverse() {\n          \
    \  if col == x {\n                break\n            }\n        }\n    }\n   \
    \ for row in lst {\n        if row == x {\n            break\n        }\n    \
    \    for col in row.reverse() {\n            if col == x {\n                break\n\
    \            }\n        }\n    }\n    for row in lst {\n        if row == x {\n\
    \            break\n        }\n        for col in row.reverse() {\n          \
    \  if col == x {\n                break\n            }\n        }\n    }\n   \
    \ for row in lst {\n        if row == x {\n            break\n        }\n    \
    \    for col in row.reverse() {\n            if col == x {\n                break\n\
    \            }\n        }\n    }\n    for row in lst {\n        if row == x {\n\
    \            break\n        }\n        for col in row.reverse() {\n          \
    \  if col == x {\n                break\n            }\n        }\n    }\n   \
    \ for row in lst {\n        if row == x {\n            break\n        }\n    \
    \    for col in row.reverse() {\n            if col == x {\n                break\n\
    \            }\n        }\n    }\n    for row in lst {\n        if row == x {\n\
    \            break\n        }\n        for col in row.reverse() {\n          \
    \  if col == x {", "    var row = [Int]()\n    var col = [Int]()\n    var result\
    \ = [(Int, Int)]()\n    for row in lst {\n        for col in row {\n         \
    \   if col == x {\n                result.append(row)\n            }\n       \
    \ }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder()\n\
    \    return result", "    var result = [(Int, Int)]()\n    for row in lst {\n\
    \        var rowResult = [(Int, Int)]()\n        for column in row {\n       \
    \     if column == x {\n                rowResult.append((column, 0))\n      \
    \      } else {\n                rowResult.append((column, column))\n        \
    \    }\n        }\n        result = result.sorted(by: { (r1, r2) in\n        \
    \    return r1.0 < r2.0\n        })\n        result = result.sorted(by: { (r1,\
    \ r2) in\n            return r1.1 < r2.0\n        })\n        result = result.sorted(by:\
    \ { (r1, r2) in\n            return r1.2 < r2.0\n        })\n        result =\
    \ result.sorted(by: { (r1, r2) in\n            return r1.3 < r2.0\n        })\n\
    \        result = result.sorted(by: { (r1, r2) in\n            return r1.4 < r2.0\n\
    \        })\n        result = result.sorted(by: { (r1, r2) in\n            return\
    \ r1.5 < r2.0\n        })\n        result = result.sorted(by: { (r1, r2) in\n\
    \            return r1.6 < r2.0\n        })\n        result = result.sorted(by:\
    \ { (r1, r2) in\n            return r1.7 < r2.0\n        })\n        result =\
    \ result.sorted(by: { (r1, r2) in\n            return r1.8 < r2.0\n        })\n\
    \        result = result.sorted(by: { (r1, r2) in\n            return r1.9 < r2.0\n\
    \        })\n        result = result.sorted(by: { (r1, r2) in\n            return\
    \ r1.10 < r2.0\n        })\n        result = result.sorted(by: { (r1, r2) in\n\
    \            return r1.11 < r2.0\n        })\n        result = result.sorted(by:\
    \ { (r1, r2) in\n            return r1.12 < r2.0\n        })\n        result =\
    \ result.sorted(by: { (r1, r2) in\n            return r1.13 < r2.0\n        })\n\
    \        result = result.sorted(by: { (r1, r2) in\n            return r1.14 <\
    \ r2.0\n        })\n        result = result.sorted(by: { (r1, r2) in\n       \
    \     return r1.15 < r2.0\n        })\n        result = result.sorted(by: { (r1,\
    \ r2) in\n            return r1.16 < r2.0\n        })\n        result = result.sorted(by:\
    \ { (r1, r2) in\n            return r1.17 < r2.0\n        })\n        result =\
    \ result.sorted(by: { (r1, r2) in\n            return r1.18 < r2.0\n        })\n\
    \        result = result.sorted(by: { (r1, r2) in\n            return r1.19 <\
    \ r2.0\n        })\n        result = result.sorted(by: { (r1, r2) in\n       \
    \     return r1.20 < r2.0\n        })\n        result = result.sorted(by: { (r1,\
    \ r2) in\n            return r1.21 < r2.0\n        })\n        result = result."]
stop_tokens:
- "\n}"
