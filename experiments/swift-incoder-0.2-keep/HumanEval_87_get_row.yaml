name: HumanEval_87_get_row
language: swift
prompt: "\n/// You are given a 2 dimensional data, as a nested lists,\n/// which is\
  \ similar to matrix, however, unlike matrices,\n/// each row may contain a different\
  \ number of columns.\n/// Given lst, and integer x, find integers x in the list,\n\
  /// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n/// each tuple\
  \ is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates initially\
  \ by rows in ascending order.\n/// Also, sort coordinates of the row by columns\
  \ in descending order.\n/// Examples:\n/// get_row([\n/// [1,2,3,4,5,6],\n/// [1,2,3,4,1,6],\n\
  /// [1,2,3,4,5,1]\n/// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// get_row([],\
  \ 1) == []\n/// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunc get_row(lst:\
  \ [[Int]], x: Int) -> [(Int, Int)] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(get_row(lst: [[1, 2, 3, 4, 5, 6], [1, 2,\
  \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], x: 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2,\
  \ 0)])\nassert(get_row(lst: [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
  \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], x: 2) == [(0,\
  \ 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\nassert(get_row(lst: [[1, 2, 3, 4,\
  \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
  \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], x: 1) == [(0, 0), (1, 0), (2,\
  \ 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)])\n\
  assert(get_row(lst: [] as [[Int]], x: 1) == [] as [(Int, Int)])\nassert(get_row(lst:\
  \ [[1]], x: 2) == [] as [(Int, Int)])\nassert(get_row(lst: [[] as [Int], [1], [1,\
  \ 2, 3]], x: 3) == [(2, 2)])"
completions: ["    var row = [Int]()\n    var column = [Int]()\n    var result = [[(Int,\
    \ Int)]]()\n    for row in lst {\n        for column in row {\n            if\
    \ column == x {\n                result.append([(row, column)])\n            }\n\
    \        }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder()\n\
    \    return result", "    var row = [Int]()\n    var col = [Int]()\n    var result\
    \ = [[(Int, Int)]]()\n    for row in lst {\n        for col in row {\n       \
    \     if col == x {\n                result.append((col, row))\n            }\n\
    \        }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder(by:\
    \ {$0.0 < $1.0})\n    return result", "    var row = [Int]()\n    var col = [Int]()\n\
    \    var result = [(Int, Int)]()\n    for row in lst {\n        for col in row\
    \ {\n            if col == x {\n                result.append((row, col))\n  \
    \          }\n        }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder(by:\
    \ {$0.0 < $1.0})\n    return result", "    var row = [Int]()\n    var col = [Int]()\n\
    \    var result = [[(Int, Int)]]()\n    for row in lst {\n        if row.contains(x)\
    \ {\n            for col in row {\n                if col == x {\n           \
    \         result.append([(row, col)])\n                }\n            }\n    \
    \    }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder(by:\
    \ {$0.1 < $1.1})\n    return result", "    var rows = [[(Int, Int)]]()\n    var\
    \ row = [Int]()\n    var cols = [Int]()\n    var col = [Int]()\n    var i = 0\n\
    \    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n \
    \   var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n  \
    \  var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n   \
    \ var y = 0\n    var z = 0\n    var count = 0\n    var rowCount = 0\n    var colCount\
    \ = 0\n    for _ in lst {\n        if rowCount == 0 {\n            row = l\n \
    \           cols = m\n        } else {\n            row = rows[rowCount-1]\n \
    \           cols = cols[colCount-1]\n        }\n        if colCount == 0 {\n \
    \           cols = m\n        } else {\n            cols = cols[colCount-1]\n\
    \        }\n        if rowCount == 0 {\n            rows = l\n        } else {\n\
    \            rows = rows[rowCount-1]\n        }\n        if colCount == 0 {\n\
    \            cols = m\n        } else {\n            cols = cols[colCount-1]\n\
    \        }\n        if rowCount == 0 {\n            rows = l\n        } else {\n\
    \            rows = rows[rowCount-1]\n        }\n        if colCount == 0 {\n\
    \            cols = m\n        } else {\n            cols = cols[colCount-1]\n\
    \        }\n        if rowCount == 0 {\n            rows = l\n        } else {\n\
    \            rows = rows[rowCount-1]\n        }\n        if colCount == 0 {\n\
    \            cols = m\n        } else {\n            cols = cols[colCount-1]\n\
    \        }\n        if rowCount == 0 {\n            rows = l\n        } else {\n\
    \            rows = rows[rowCount-1]\n        }\n        if colCount == 0 {\n\
    \            cols = m\n        } else {\n            cols = cols[colCount-1]\n\
    \        }\n        if rowCount == 0 {\n            rows = l\n        } else {\n\
    \            rows = rows[rowCount-1]\n        }\n        if colCount == 0 {\n\
    \            cols = m\n        } else {\n            cols = cols[colCount-1]\n\
    \        }\n        if rowCount == 0 {\n            rows = l\n        } else {\n\
    \            rows = rows[rowCount-1]\n        }\n        if colCount == 0 {\n\
    \            cols = m\n        } else {\n            cols = cols[colCount-1]\n\
    \        }\n        if rowCount == 0 {\n            rows = l\n        } else {\n\
    \            rows = rows[rowCount-1]\n        }\n        if colCount == 0 {\n\
    \            cols = m\n        } else {\n            cols = cols[colCount-1]\n\
    \        }\n        if rowCount == 0 {\n            rows = l\n        } else {\n\
    \            rows = rows[rowCount-1]\n        }\n        if colCount == 0 {",
  "    var result = [(Int, Int)]()\n    var row = 0\n    var col = 0\n    for row\
    \ in lst {\n        if row == x {\n            break\n        }\n    }\n    for\
    \ row in lst {\n        if row == x {\n            break\n        }\n        for\
    \ col in row {\n            if col == x {\n                break\n           \
    \ }\n        }\n        result.append((row, col))\n    }\n    return result",
  "    var row = [Int]()\n    var col = [Int]()\n    var result = [[(Int, Int)]]()\n\
    \    for row in lst {\n        for col in row {\n            if col == x {\n \
    \               result.append((row, col))\n            }\n        }\n    }\n \
    \   result.sort(by: { (row1, row2) in\n        row1.0 < row2.0\n    })\n    result.sort(by:\
    \ { (row1, row2) in\n        row1.1 < row2.0\n    })\n    return result", "  \
    \  var rows = [[(Int, Int)]]()\n    for row in lst {\n        var cols = [Int]()\n\
    \        for col in row {\n            if col == x {\n                cols.append(col)\n\
    \            }\n        }\n        rows.append((row, cols))\n    }\n    return\
    \ rows", "    var result = [(Int, Int)]()\n    var row = 0\n    var col = 0\n\
    \    for row in lst {\n        if row == x {\n            break\n        }\n \
    \   }\n    for row in lst {\n        if row == x {\n            break\n      \
    \  }\n        for col in row {\n            if col == x {\n                break\n\
    \            }\n        }\n        result.append((row, col))\n    }\n    return\
    \ result", "    var rows = [[(Int, Int)]]()\n    var row = [Int]()\n    var columns\
    \ = [Int]()\n    var row_index = 0\n    var column_index = 0\n    for row in lst\
    \ {\n        column_index = 0\n        for column in row {\n            if column\
    \ == x {\n                rows.append([(row_index, column_index)])\n         \
    \   }\n            column_index += 1\n        }\n        row_index += 1\n    }\n\
    \    rows.sort(by: {$0.0 < $1.0})\n    rows.sort(by: {$0.1 < $1.0})\n    rows.sort(by:\
    \ {$0.0 < $1.0})\n    return rows", "    var rows = [[(Int, Int)]]()\n    for\
    \ row in lst {\n        var rowTups = [(Int, Int)]()\n        for tup in row {\n\
    \            if tup == x {\n                rowTups.append((tup, 1))\n       \
    \     } else {\n                rowTups.append((tup, 0))\n            }\n    \
    \    }\n        rows.append(rowTups)\n    }\n    return rows", "    var result\
    \ = [(Int, Int)]()\n    for row in lst {\n        for (i, v) in row.enumerated()\
    \ {\n            if v == x {\n                result.append( (i, row.count) )\n\
    \            }\n        }\n    }\n    result.sortInPlace()\n    result.sortInPlace{\
    \ $0.1 < $1.1 }\n    return result", "    if lst.isEmpty() {\n        return []\n\
    \    }\n    var row = [Int]()\n    var col = [Int]()\n    var rows = [Int]()\n\
    \    var cols = [Int]()\n    var i = 0\n    var j = 0\n    var k = 0\n    var\
    \ l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q\
    \ = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v =\
    \ 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var count\
    \ = 0\n    var rowCount = 0\n    var colCount = 0\n    for row in lst {\n    \
    \    if rowCount == x {\n            break\n        }\n        rowCount = rowCount\
    \ + 1\n    }\n    for col in row {\n        if colCount == x {\n            break\n\
    \        }\n        colCount = colCount + 1\n    }\n    for row in lst {\n   \
    \     if rowCount == x {\n            break\n        }\n        rowCount = rowCount\
    \ + 1\n    }\n    for col in row {\n        if colCount == x {\n            break\n\
    \        }\n        colCount = colCount + 1\n    }\n    for row in lst {\n   \
    \     if rowCount == x {\n            break\n        }\n        rowCount = rowCount\
    \ + 1\n    }\n    for col in row {\n        if colCount == x {\n            break\n\
    \        }\n        colCount = colCount + 1\n    }\n    for row in lst {\n   \
    \     if rowCount == x {\n            break\n        }\n        rowCount = rowCount\
    \ + 1\n    }\n    for col in row {\n        if colCount == x {\n            break\n\
    \        }\n        colCount = colCount + 1\n    }\n    for row in lst {\n   \
    \     if rowCount == x {\n            break\n        }\n        rowCount = rowCount\
    \ + 1\n    }\n    for col in row {\n        if colCount == x {\n            break\n\
    \        }\n        colCount = colCount + 1\n    }\n    for row in lst {\n   \
    \     if rowCount == x {\n            break\n        }\n        rowCount = rowCount\
    \ + 1\n    }\n    for col in row {\n        if colCount == x {\n            break\n\
    \        }\n        colCount = colCount + 1\n    }\n    for row in lst {\n   \
    \     if rowCount == x {\n            break\n        }\n        rowCount = rowCount\
    \ + 1\n    }\n    for col in row {\n        if colCount == x {\n            break\n\
    \        }\n        colCount = colCount + 1\n    }\n    for row in lst {\n   \
    \     if rowCount == x {\n            break\n        }\n        rowCount = rowCount\
    \ + 1\n    }\n    for col in row {\n        if colCoun", "    var row = [Int]()\n\
    \    var col = [Int]()\n    var result = [[(Int, Int)]]()\n    for row in lst\
    \ {\n        for col in row {\n            if col == x {\n                result.append((row,\
    \ col))\n            }\n        }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder(by:\
    \ {$0.0 < $1.0})\n    return result", "    if lst.isEmpty() {\n        return\
    \ []\n    }\n    var row = [Int]()\n    var col = [Int]()\n    var rows = [Int]()\n\
    \    var cols = [Int]()\n    var i = 0\n    var j = 0\n    for row in lst {\n\
    \        i += 1\n        for col in row {\n            j += 1\n            if\
    \ j == x {\n                rows.append(i)\n                cols.append(j)\n \
    \           }\n        }\n    }\n    rows.sortInPlace()\n    cols.sortInPlace()\n\
    \    var result = [(0, 0)]\n    for row in rows {\n        for col in cols {\n\
    \            result.append((row, col))\n        }\n    }\n    return result",
  "    var result = [(Int, Int)]()\n    for row in lst {\n        for (i, v) in row.enumerated()\
    \ {\n            if v == x {\n                result.append( (i, row.count) )\n\
    \                break\n            }\n        }\n    }\n    result.sortInPlace()\n\
    \    result.sortInPlace{ $0.1 < $1.1 }\n    return result", "    var row = [Int]()\n\
    \    var col = [Int]()\n    var result = [(Int, Int)]()\n    for row in lst {\n\
    \        for col in row {\n            if col == x {\n                result.append((row,\
    \ col))\n            }\n        }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder()\n\
    \    return result", "    var result = [(Int, Int)]()\n    var row = 0\n    var\
    \ col = 0\n    for row in lst {\n        if row == x {\n            break\n  \
    \      }\n    }\n    for col in row.reverse() {\n        if col == x {\n     \
    \       break\n        }\n    }\n    for row in lst {\n        if row == x {\n\
    \            break\n        }\n        for col in row.reverse() {\n          \
    \  if col == x {\n                break\n            }\n        }\n    }\n   \
    \ for row in lst {\n        if row == x {\n            break\n        }\n    \
    \    for col in row.reverse() {\n            if col == x {\n                break\n\
    \            }\n        }\n    }\n    for row in lst {\n        if row == x {\n\
    \            break\n        }\n        for col in row.reverse() {\n          \
    \  if col == x {\n                break\n            }\n        }\n    }\n   \
    \ for row in lst {\n        if row == x {\n            break\n        }\n    \
    \    for col in row.reverse() {\n            if col == x {\n                break\n\
    \            }\n        }\n    }\n    for row in lst {\n        if row == x {\n\
    \            break\n        }\n        for col in row.reverse() {\n          \
    \  if col == x {\n                break\n            }\n        }\n    }\n   \
    \ for row in lst {\n        if row == x {\n            break\n        }\n    \
    \    for col in row.reverse() {\n            if col == x {\n                break\n\
    \            }\n        }\n    }\n    for row in lst {\n        if row == x {\n\
    \            break\n        }\n        for col in row.reverse() {\n          \
    \  if col == x {\n                break\n            }\n        }\n    }\n   \
    \ for row in lst {\n        if row == x {\n            break\n        }\n    \
    \    for col in row.reverse() {\n            if col == x {\n                break\n\
    \            }\n        }\n    }\n    for row in lst {\n        if row == x {\n\
    \            break\n        }\n        for col in row.reverse() {\n          \
    \  if col == x {\n                break\n            }\n        }\n    }\n   \
    \ for row in lst {\n        if row == x {\n            break\n        }\n    \
    \    for col in row.reverse() {\n            if col == x {\n                break\n\
    \            }\n        }\n    }\n    for row in lst {\n        if row == x {\n\
    \            break\n        }\n        for col in row.reverse() {\n          \
    \  if col == x {\n                break\n            }\n        }\n    }\n   \
    \ for row in lst {\n        if row == x {\n            break\n        }\n    \
    \    for col in row.reverse() {\n            if col == x {\n                break\n\
    \            }\n        }\n    }\n    for row in lst {\n        if row == x {\n\
    \            break\n        }\n        for col in row.reverse() {\n          \
    \  if col == x {", "    var row = [Int]()\n    var col = [Int]()\n    var result\
    \ = [(Int, Int)]()\n    for row in lst {\n        for col in row {\n         \
    \   if col == x {\n                result.append(row)\n            }\n       \
    \ }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder()\n\
    \    return result", "    var result = [(Int, Int)]()\n    for row in lst {\n\
    \        var rowResult = [(Int, Int)]()\n        for column in row {\n       \
    \     if column == x {\n                rowResult.append((column, 0))\n      \
    \      } else {\n                rowResult.append((column, column))\n        \
    \    }\n        }\n        result = result.sorted(by: { (r1, r2) in\n        \
    \    return r1.0 < r2.0\n        })\n        result = result.sorted(by: { (r1,\
    \ r2) in\n            return r1.1 < r2.0\n        })\n        result = result.sorted(by:\
    \ { (r1, r2) in\n            return r1.2 < r2.0\n        })\n        result =\
    \ result.sorted(by: { (r1, r2) in\n            return r1.3 < r2.0\n        })\n\
    \        result = result.sorted(by: { (r1, r2) in\n            return r1.4 < r2.0\n\
    \        })\n        result = result.sorted(by: { (r1, r2) in\n            return\
    \ r1.5 < r2.0\n        })\n        result = result.sorted(by: { (r1, r2) in\n\
    \            return r1.6 < r2.0\n        })\n        result = result.sorted(by:\
    \ { (r1, r2) in\n            return r1.7 < r2.0\n        })\n        result =\
    \ result.sorted(by: { (r1, r2) in\n            return r1.8 < r2.0\n        })\n\
    \        result = result.sorted(by: { (r1, r2) in\n            return r1.9 < r2.0\n\
    \        })\n        result = result.sorted(by: { (r1, r2) in\n            return\
    \ r1.10 < r2.0\n        })\n        result = result.sorted(by: { (r1, r2) in\n\
    \            return r1.11 < r2.0\n        })\n        result = result.sorted(by:\
    \ { (r1, r2) in\n            return r1.12 < r2.0\n        })\n        result =\
    \ result.sorted(by: { (r1, r2) in\n            return r1.13 < r2.0\n        })\n\
    \        result = result.sorted(by: { (r1, r2) in\n            return r1.14 <\
    \ r2.0\n        })\n        result = result.sorted(by: { (r1, r2) in\n       \
    \     return r1.15 < r2.0\n        })\n        result = result.sorted(by: { (r1,\
    \ r2) in\n            return r1.16 < r2.0\n        })\n        result = result.sorted(by:\
    \ { (r1, r2) in\n            return r1.17 < r2.0\n        })\n        result =\
    \ result.sorted(by: { (r1, r2) in\n            return r1.18 < r2.0\n        })\n\
    \        result = result.sorted(by: { (r1, r2) in\n            return r1.19 <\
    \ r2.0\n        })\n        result = result.sorted(by: { (r1, r2) in\n       \
    \     return r1.20 < r2.0\n        })\n        result = result.sorted(by: { (r1,\
    \ r2) in\n            return r1.21 < r2.0\n        })\n        result = result.",
  "    var result = [(Int, Int)]()\n    for row in lst {\n        var rowResult =\
    \ [(Int, Int)]()\n        for column in row {\n            if column == x {\n\
    \                rowResult.append((column, 0))\n            } else {\n       \
    \         rowResult.append((column, column))\n            }\n        }\n     \
    \   result = result.sorted(by: { $0.0 < $1.0 }).append(rowResult).sorted(by: {\
    \ $0.1 < $1.1 })\n    }\n    return result", "    var row = [Int]()\n    var col\
    \ = [Int]()\n    var result = [(Int, Int)]()\n    for row in lst {\n        for\
    \ col in row {\n            if col == x {\n                result.append((row,\
    \ col))\n            }\n        }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder()\n\
    \    return result", "    var rows = [Int]()\n    var cols = [Int]()\n    var\
    \ coords = [Int]()\n    var row = 0\n    var col = 0\n    var coord = 0\n    for\
    \ row in lst {\n        cols = row\n        for col in cols {\n            if\
    \ col == x {\n                coords.append(coord)\n            }\n        }\n\
    \    }\n    coords.sort()\n    coords.reverse()\n    for coord in coords {\n \
    \       rows.append(row)\n    }\n    rows.sort()\n    rows.reverse()\n    return\
    \ rows", "    var result = [(Int, Int)]()\n    var row = 0\n    var col = 0\n\
    \    for row in lst {\n        if row == x {\n            break\n        }\n \
    \   }\n    for col in lst[row].reversed() {\n        if col == x {\n         \
    \   break\n        }\n    }\n    for row in lst {\n        if row == x {\n   \
    \         break\n        }\n    }\n    for col in lst[row].reversed() {\n    \
    \    if col == x {\n            break\n        }\n    }\n    for row in lst {\n\
    \        if row == x {\n            break\n        }\n    }\n    for col in lst[row].reversed()\
    \ {\n        if col == x {\n            break\n        }\n    }\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n    }\n    for col\
    \ in lst[row].reversed() {\n        if col == x {\n            break\n       \
    \ }\n    }\n    for row in lst {\n        if row == x {\n            break\n \
    \       }\n    }\n    for col in lst[row].reversed() {\n        if col == x {\n\
    \            break\n        }\n    }\n    for row in lst {\n        if row ==\
    \ x {\n            break\n        }\n    }\n    for col in lst[row].reversed()\
    \ {\n        if col == x {\n            break\n        }\n    }\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n    }\n    for col\
    \ in lst[row].reversed() {\n        if col == x {\n            break\n       \
    \ }\n    }\n    for row in lst {\n        if row == x {\n            break\n \
    \       }\n    }\n    for col in lst[row].reversed() {\n        if col == x {\n\
    \            break\n        }\n    }\n    for row in lst {\n        if row ==\
    \ x {\n            break\n        }\n    }\n    for col in lst[row].reversed()\
    \ {\n        if col == x {\n            break\n        }\n    }\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n    }\n    for col\
    \ in lst[row].reversed() {\n        if col == x {\n            break\n       \
    \ }\n    }\n    for row in lst {\n        if row == x {\n            break\n \
    \       }\n    }\n    for col in lst[row].reversed() {\n        if col == x {\n\
    \            break\n        }\n    }\n    for row in lst {\n        if row ==\
    \ x {\n            break\n        }\n    }\n    for col in lst[row].reversed()\
    \ {\n        if col == x {\n            break\n        }\n    }\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n    }\n    for col\
    \ in lst[row].reversed() {\n        if col == x {\n            break\n       \
    \ }\n    }\n    for ", "    if lst.isEmpty() {\n        return []\n    }\n   \
    \ var result = [(Int, Int)]()\n    var row = 0\n    var col = 0\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n    }\n    for col\
    \ in row {\n        if col == x {\n            break\n        }\n    }\n    for\
    \ row in lst {\n        if row == x {\n            break\n        }\n        for\
    \ col in row {\n            if col == x {\n                break\n           \
    \ }\n        }\n    }\n    for row in lst {\n        if row == x {\n         \
    \   break\n        }\n        for col in row {\n            if col == x {\n  \
    \              break\n            }\n        }\n    }\n    for row in lst {\n\
    \        if row == x {\n            break\n        }\n        for col in row {\n\
    \            if col == x {\n                break\n            }\n        }\n\
    \    }\n    for row in lst {\n        if row == x {\n            break\n     \
    \   }\n        for col in row {\n            if col == x {\n                break\n\
    \            }\n        }\n    }\n    for row in lst {\n        if row == x {\n\
    \            break\n        }\n        for col in row {\n            if col ==\
    \ x {\n                break\n            }\n        }\n    }\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n        for col\
    \ in row {\n            if col == x {\n                break\n            }\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n        for col in row {\n            if col == x {\n            \
    \    break\n            }\n        }\n    }\n    for row in lst {\n        if\
    \ row == x {\n            break\n        }\n        for col in row {\n       \
    \     if col == x {\n                break\n            }\n        }\n    }\n\
    \    for row in lst {\n        if row == x {\n            break\n        }\n \
    \       for col in row {\n            if col == x {\n                break\n \
    \           }\n        }\n    }\n    for row in lst {\n        if row == x {\n\
    \            break\n        }\n        for col in row {\n            if col ==\
    \ x {\n                break\n            }\n        }\n    }\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n        for col\
    \ in row {\n            if col == x {\n                break\n            }\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n        for col in row {\n            if col == x {\n            \
    \    break\n            }\n        }\n    }\n    for row in lst {\n        if\
    \ row == x {\n            break\n        }\n        for col in row {\n       \
    \     if col == x {\n                break\n            }", "    if lst.isEmpty()\
    \ {\n        return []\n    }\n    var result = [(Int, Int)]()\n    var row =\
    \ 0\n    var col = 0\n    for row in lst {\n        if row == x {\n          \
    \  break\n        }\n    }\n    for col in lst.first!.indices {\n        if col\
    \ == x {\n            break\n        }\n    }\n    for row in lst {\n        if\
    \ row == x {\n            break\n        }\n        for col in lst.first!.indices\
    \ {\n            if col == x {\n                break\n            }\n       \
    \     if col > x {\n                break\n            }\n        }\n        if\
    \ col == x {\n            result.append((row, col))\n        }\n    }\n    return\
    \ result", "    if lst.isEmpty() {\n        return []\n    }\n    var row = [Int]()\n\
    \    var col = [Int]()\n    var rows = [Int]()\n    var cols = [Int]()\n    var\
    \ rowIndex = 0\n    var colIndex = 0\n    var rowCount = lst.count\n    var colCount\
    \ = lst[0].count\n    var rowIndex = 0\n    var colIndex = 0\n    var rowCount\
    \ = lst.count\n    var colCount = lst[0].count\n    var rowIndex = 0\n    var\
    \ colIndex = 0\n    var rowCount = lst.count\n    var colCount = lst[0].count\n\
    \    var rowIndex = 0\n    var colIndex = 0\n    var rowCount = lst.count\n  \
    \  var colCount = lst[0].count\n    var rowIndex = 0\n    var colIndex = 0\n \
    \   var rowCount = lst.count\n    var colCount = lst[0].count\n    var rowIndex\
    \ = 0\n    var colIndex = 0\n    var rowCount = lst.count\n    var colCount =\
    \ lst[0].count\n    var rowIndex = 0\n    var colIndex = 0\n    var rowCount =\
    \ lst.count\n    var colCount = lst[0].count\n    var rowIndex = 0\n    var colIndex\
    \ = 0\n    var rowCount = lst.count\n    var colCount = lst[0].count\n    var\
    \ rowIndex = 0\n    var colIndex = 0\n    var rowCount = lst.count\n    var colCount\
    \ = lst[0].count\n    var rowIndex = 0\n    var colIndex = 0\n    var rowCount\
    \ = lst.count\n    var colCount = lst[0].count\n    var rowIndex = 0\n    var\
    \ colIndex = 0\n    var rowCount = lst.count\n    var colCount = lst[0].count\n\
    \    var rowIndex = 0\n    var colIndex = 0\n    var rowCount = lst.count\n  \
    \  var colCount = lst[0].count\n    var rowIndex = 0\n    var colIndex = 0\n \
    \   var rowCount = lst.count\n    var colCount = lst[0].count\n    var rowIndex\
    \ = 0\n    var colIndex = 0\n    var rowCount = lst.count\n    var colCount =\
    \ lst[0].count\n    var rowIndex = 0\n    var colIndex = 0\n    var rowCount =\
    \ lst.count\n    var colCount = lst[0].count\n    var rowIndex = 0\n    var colIndex\
    \ = 0\n    var rowCount = lst.count\n    var colCount = lst[0].count\n    var\
    \ rowIndex = 0\n    var colIndex = 0\n    var rowCount = lst.count\n    var colCount\
    \ = lst[0].count\n    var rowIndex = 0\n    var colIndex = 0\n    var rowCount\
    \ = lst.count\n    var colCount = lst[0].count\n    var rowIndex = 0\n    var\
    \ colIndex = 0\n    var rowCount = lst.count\n    var colCount = lst[0].count\n\
    \    var rowIndex = 0\n    var colIndex = 0\n    var rowCount = lst.count\n  \
    \  var ", "    var result = [(Int, Int)]()\n    for row in lst {\n        for\
    \ (i, v) in row.enumerated() {\n            if v == x {\n                result.append(\
    \ (i, row.count) )\n            }\n        }\n    }\n    result.sortInPlace()\n\
    \    result.sortInPlaceInDescendingOrder()\n    return result", "    var row =\
    \ [Int]()\n    var col = [Int]()\n    var result = [[(Int, Int)]]()\n    for row\
    \ in lst {\n        for col in row {\n            if col == x {\n            \
    \    result.append((row, col))\n            }\n        }\n    }\n    result.sortInPlace()\n\
    \    result.sortInPlaceInDescendingOrder(by: {$0.1 < $1.1})\n    return result",
  "    if lst.isEmpty() {\n        return []\n    }\n    var row = [Int]()\n    var\
    \ col = [Int]()\n    var result = [(Int, Int)]()\n    var rowOrder = [Int]()\n\
    \    var colOrder = [Int]()\n    var i = 0\n    var j = 0\n    var k = 0\n   \
    \ for row in lst {\n        rowOrder = row\n        colOrder = col\n        j\
    \ = i\n        for col in row {\n            if col == x {\n                result.append((i,\
    \ j))\n            }\n            i += 1\n        }\n        i += 1\n    }\n \
    \   result.sortInPlace()\n    result.sortInPlaceInPlace(&colOrder)\n    return\
    \ result", "    if lst.isEmpty() {\n        return []\n    }\n    var row = [Int]()\n\
    \    var col = [Int]()\n    var rows = [Int]()\n    var cols = [Int]()\n    var\
    \ i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = lst.count\n\
    \    for row in lst {\n        l = row.count\n        if l == 1 {\n          \
    \  rows.append(row[0])\n            cols.append(0)\n        } else {\n       \
    \     for (; i < l; i++ ) {\n                rows.append(row[i])\n           \
    \     cols.append(0)\n            }\n        }\n    }\n    for (i = 0; i < m;\
    \ i++ ) {\n        for (j = 0; j < l; j++ ) {\n            if rows[i] == x {\n\
    \                for (k = 0; k < l; k++ ) {\n                    if cols[k] ==\
    \ 0 {\n                        cols[k] = j\n                        break\n  \
    \                  }\n                }\n                break\n            }\n\
    \        }\n    }\n    rows = rows.sorted()\n    cols = cols.sorted()\n    var\
    \ result = [ (0, 0) ]\n    for (i = 1; i < m; i++ ) {\n        for (j = 0; j <\
    \ l; j++ ) {\n            if rows[i] == x {\n                for (k = 0; k < l;\
    \ k++ ) {\n                    if cols[k] == 0 {\n                        result.append((i,\
    \ k))\n                        break\n                    }\n                }\n\
    \                break\n            }\n        }\n    }\n    return result", " \
    \   if lst.isEmpty() {\n        return []\n    }\n    var row = [Int]()\n    var\
    \ column = [Int]()\n    var result = [(0, 0), (lst.count-1, 0)]\n    for row in\
    \ lst {\n        column = row\n        for column in row.reversed() {\n      \
    \      if column[x] == x {\n                result.append((column, row.count-1))\n\
    \                break\n            }\n        }\n    }\n    return result", " \
    \   var result = [(Int, Int)]()\n    var row = 0\n    var col = 0\n    for row\
    \ in lst {\n        if row == x {\n            break\n        }\n    }\n    for\
    \ col in row.reverse() {\n        if col == x {\n            break\n        }\n\
    \    }\n    for row in lst {\n        if row == x {\n            break\n     \
    \   }\n    }\n    for col in row.reverse() {\n        if col == x {\n        \
    \    break\n        }\n    }\n    for row in lst {\n        if row == x {\n  \
    \          break\n        }\n    }\n    for col in row.reverse() {\n        if\
    \ col == x {\n            break\n        }\n    }\n    for row in lst {\n    \
    \    if row == x {\n            break\n        }\n    }\n    for col in row.reverse()\
    \ {\n        if col == x {\n            break\n        }\n    }\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n    }\n    for col\
    \ in row.reverse() {\n        if col == x {\n            break\n        }\n  \
    \  }\n    for row in lst {\n        if row == x {\n            break\n       \
    \ }\n    }\n    for col in row.reverse() {\n        if col == x {\n          \
    \  break\n        }\n    }\n    for row in lst {\n        if row == x {\n    \
    \        break\n        }\n    }\n    for col in row.reverse() {\n        if col\
    \ == x {\n            break\n        }\n    }\n    for row in lst {\n        if\
    \ row == x {\n            break\n        }\n    }\n    for col in row.reverse()\
    \ {\n        if col == x {\n            break\n        }\n    }\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n    }\n    for col\
    \ in row.reverse() {\n        if col == x {\n            break\n        }\n  \
    \  }\n    for row in lst {\n        if row == x {\n            break\n       \
    \ }\n    }\n    for col in row.reverse() {\n        if col == x {\n          \
    \  break\n        }\n    }\n    for row in lst {\n        if row == x {\n    \
    \        break\n        }\n    }\n    for col in row.reverse() {\n        if col\
    \ == x {\n            break\n        }\n    }\n    for row in lst {\n        if\
    \ row == x {\n            break\n        }\n    }\n    for col in row.reverse()\
    \ {\n        if col == x {\n            break\n        }\n    }\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n    }\n    for col\
    \ in row.reverse() {\n        if col == x {\n            break\n        }\n  \
    \  }\n    for row in lst {\n        if row == x {\n            break\n       \
    \ }\n    }\n    for col in row.reverse() {\n        if col == ", "    var result\
    \ = [(Int, Int)]()\n    var row = 0\n    var col = 0\n    for row in lst {\n \
    \       if row == x {\n            break\n        }\n    }\n    for col in row.reverse()\
    \ {\n        if col == x {\n            break\n        }\n    }\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n    }\n    for col\
    \ in row.reverse() {\n        if col == x {\n            break\n        }\n  \
    \  }\n    for row in lst {\n        if row == x {\n            break\n       \
    \ }\n    }\n    for col in row.reverse() {\n        if col == x {\n          \
    \  break\n        }\n    }\n    for row in lst {\n        if row == x {\n    \
    \        break\n        }\n    }\n    for col in row.reverse() {\n        if col\
    \ == x {\n            break\n        }\n    }\n    for row in lst {\n        if\
    \ row == x {\n            break\n        }\n    }\n    for col in row.reverse()\
    \ {\n        if col == x {\n            break\n        }\n    }\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n    }\n    for col\
    \ in row.reverse() {\n        if col == x {\n            break\n        }\n  \
    \  }\n    for row in lst {\n        if row == x {\n            break\n       \
    \ }\n    }\n    for col in row.reverse() {\n        if col == x {\n          \
    \  break\n        }\n    }\n    for row in lst {\n        if row == x {\n    \
    \        break\n        }\n    }\n    for col in row.reverse() {\n        if col\
    \ == x {\n            break\n        }\n    }\n    for row in lst {\n        if\
    \ row == x {\n            break\n        }\n    }\n    for col in row.reverse()\
    \ {\n        if col == x {\n            break\n        }\n    }\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n    }\n    for col\
    \ in row.reverse() {\n        if col == x {\n            break\n        }\n  \
    \  }\n    for row in lst {\n        if row == x {\n            break\n       \
    \ }\n    }\n    for col in row.reverse() {\n        if col == x {\n          \
    \  break\n        }\n    }\n    for row in lst {\n        if row == x {\n    \
    \        break\n        }\n    }\n    for col in row.reverse() {\n        if col\
    \ == x {\n            break\n        }\n    }\n    for row in lst {\n        if\
    \ row == x {\n            break\n        }\n    }\n    for col in row.reverse()\
    \ {\n        if col == x {\n            break\n        }\n    }\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n    }\n    for col\
    \ in row.reverse() {\n        if col == ", "    var result = [(Int, Int)]()\n\
    \    for row in lst {\n        for (i, v) in row.enumerated() {\n            if\
    \ v == x {\n                result.append((i, row.count()))\n            }\n \
    \       }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder()\n\
    \    return result", "    var rows = [[(Int, Int)]]()\n    for row in lst {\n\
    \        var cols = [Int]()\n        for col in row {\n            if col == x\
    \ {\n                cols.append(col)\n            }\n        }\n        if cols.count\
    \ > 0 {\n            rows.append((0, cols.reversed()))\n        }\n    }\n   \
    \ return rows", "    if lst.isEmpty() {\n        return []\n    }\n    var row\
    \ = [Int]()\n    var column = [Int]()\n    var result = [(Int, Int)]()\n    var\
    \ rowIndex = 0\n    var columnIndex = 0\n    for row in lst {\n        if rowIndex\
    \ == x {\n            result.append((rowIndex, columnIndex))\n        }\n    \
    \    columnIndex = columnIndex + row.count\n    }\n    result.sortInPlaceByDescending({$0.0\
    \ < $1.0})\n    result.sortInPlaceByDescending({$0.1 < $1.0})\n    return result",
  "    var result = [(Int, Int)]()\n    var row = 0\n    var col = 0\n    for row\
    \ in lst {\n        if row == x {\n            break\n        }\n    }\n    for\
    \ col in row.reverse() {\n        if col == x {\n            break\n        }\n\
    \    }\n    for row in lst {\n        if row == x {\n            break\n     \
    \   }\n        for col in row.reverse() {\n            if col == x {\n       \
    \         break\n            }\n        }\n    }\n    for row in lst {\n     \
    \   if row == x {\n            break\n        }\n        for col in row.reverse()\
    \ {\n            if col == x {\n                break\n            }\n       \
    \ }\n    }\n    for row in lst {\n        if row == x {\n            break\n \
    \       }\n        for col in row.reverse() {\n            if col == x {\n   \
    \             break\n            }\n        }\n    }\n    for row in lst {\n \
    \       if row == x {\n            break\n        }\n        for col in row.reverse()\
    \ {\n            if col == x {\n                break\n            }\n       \
    \ }\n    }\n    for row in lst {\n        if row == x {\n            break\n \
    \       }\n        for col in row.reverse() {\n            if col == x {\n   \
    \             break\n            }\n        }\n    }\n    for row in lst {\n \
    \       if row == x {\n            break\n        }\n        for col in row.reverse()\
    \ {\n            if col == x {\n                break\n            }\n       \
    \ }\n    }\n    for row in lst {\n        if row == x {\n            break\n \
    \       }\n        for col in row.reverse() {\n            if col == x {\n   \
    \             break\n            }\n        }\n    }\n    for row in lst {\n \
    \       if row == x {\n            break\n        }\n        for col in row.reverse()\
    \ {\n            if col == x {\n                break\n            }\n       \
    \ }\n    }\n    for row in lst {\n        if row == x {\n            break\n \
    \       }\n        for col in row.reverse() {\n            if col == x {\n   \
    \             break\n            }\n        }\n    }\n    for row in lst {\n \
    \       if row == x {\n            break\n        }\n        for col in row.reverse()\
    \ {\n            if col == x {\n                break\n            }\n       \
    \ }\n    }\n    for row in lst {\n        if row == x {\n            break\n \
    \       }\n        for col in row.reverse() {\n            if col == x {\n   \
    \             break\n            }\n        }\n    }\n    for row in lst {\n \
    \       if row == x {\n            break\n        }\n        for col in row.reverse()\
    \ {\n            if col == x {\n                break\n            }\n       \
    \ }\n    }\n    for row in lst {\n        if row == x {\n            break\n \
    \       }\n        for col in row.reverse() {\n            if col == x {", " \
    \   var result = [(0, -1)]\n    for row in lst {\n        var rowResult = [(Int,\
    \ Int)]()\n        for (i, v) in row.enumerated() {\n            if v == x {\n\
    \                rowResult.append((i, v))\n            }\n        }\n        result\
    \ = result.sorted(by: {\n            ($0.0 < $1.0) || ($0.1 < $1.1)\n        }).append(rowResult)\n\
    \    }\n    return result", "    var rows = [[(Int, Int)]]()\n    for row in lst\
    \ {\n        var rowCoords = [(Int, Int)]()\n        for (i, v) in row.enumerated()\
    \ {\n            if v == x {\n                rowCoords.append((i, v))\n     \
    \       }\n        }\n        rows.append(rowCoords)\n    }\n    rows.sort(by:\
    \ { (r1, r2) in\n        var r = r1\n        if r1.1 < r2.1 {\n            r =\
    \ r2\n        }\n        return r\n    })\n    rows.sort(by: { (r1, r2) in\n \
    \       var r = r2\n        if r1.1 < r2.1 {\n            r = r1\n        }\n\
    \        return r\n    })\n    return rows", "    var result = [(Int, Int)]()\n\
    \    for row in lst {\n        for (i, v) in row.enumerated() {\n            if\
    \ v == x {\n                result.append((i, v))\n            }\n        }\n\
    \    }\n    result.sortInPlaceByKey(ascending: true)\n    result.sortInPlaceByKey(ascending:\
    \ false)\n    return result", "    var result = [(Int, Int)]()\n    for row in\
    \ lst {\n        for (i, v) in row.enumerated() {\n            if v == x {\n \
    \               result.append((i, v))\n            }\n        }\n    }\n    result.sortInPlace()\n\
    \    result.sortInPlaceInDescendingOrder(by: { (a, b) -> Bool in\n        return\
    \ a.1 < b.1\n    })\n    return result", "    var result = [(Int, Int)]()\n  \
    \  var row = 0\n    var col = 0\n    for row in lst {\n        if row == x {\n\
    \            break\n        }\n    }\n    for col in lst[row].reversed() {\n \
    \       if col == x {\n            break\n        }\n    }\n    for row in lst\
    \ {\n        if row == x {\n            break\n        }\n    }\n    for col in\
    \ lst[row].reversed() {\n        if col == x {\n            break\n        }\n\
    \    }\n    for row in lst {\n        if row == x {\n            break\n     \
    \   }\n    }\n    for col in lst[row].reversed() {\n        if col == x {\n  \
    \          break\n        }\n    }\n    for row in lst {\n        if row == x\
    \ {\n            break\n        }\n    }\n    for col in lst[row].reversed() {\n\
    \        if col == x {\n            break\n        }\n    }\n    for row in lst\
    \ {\n        if row == x {\n            break\n        }\n    }\n    for col in\
    \ lst[row].reversed() {\n        if col == x {\n            break\n        }\n\
    \    }\n    for row in lst {\n        if row == x {\n            break\n     \
    \   }\n    }\n    for col in lst[row].reversed() {\n        if col == x {\n  \
    \          break\n        }\n    }\n    for row in lst {\n        if row == x\
    \ {\n            break\n        }\n    }\n    for col in lst[row].reversed() {\n\
    \        if col == x {\n            break\n        }\n    }\n    for row in lst\
    \ {\n        if row == x {\n            break\n        }\n    }\n    for col in\
    \ lst[row].reversed() {\n        if col == x {\n            break\n        }\n\
    \    }\n    for row in lst {\n        if row == x {\n            break\n     \
    \   }\n    }\n    for col in lst[row].reversed() {\n        if col == x {\n  \
    \          break\n        }\n    }\n    for row in lst {\n        if row == x\
    \ {\n            break\n        }\n    }\n    for col in lst[row].reversed() {\n\
    \        if col == x {\n            break\n        }\n    }\n    for row in lst\
    \ {\n        if row == x {\n            break\n        }\n    }\n    for col in\
    \ lst[row].reversed() {\n        if col == x {\n            break\n        }\n\
    \    }\n    for row in lst {\n        if row == x {\n            break\n     \
    \   }\n    }\n    for col in lst[row].reversed() {\n        if col == x {\n  \
    \          break\n        }\n    }\n    for row in lst {\n        if row == x\
    \ {\n            break\n        }\n    }\n    for col in lst[row].reversed() {\n\
    \        if col == x {\n            break\n        }\n    }\n    for ", "    if\
    \ lst.isEmpty() {\n        return []\n    }\n    var row = [Int]()\n    var col\
    \ = [Int]()\n    var rows = [Int]()\n    var cols = [Int]()\n    var i = 0\n \
    \   var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n  \
    \  var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n   \
    \ var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var\
    \ y = 0\n    var z = 0\n    var count = 0\n    var j = 0\n    var k = 0\n    var\
    \ l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q\
    \ = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v =\
    \ 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var count\
    \ = 0\n    for row in lst {\n        count = row.count\n        if count == x\
    \ {\n            rows.append(i)\n            cols.append(j)\n            i +=\
    \ 1\n            j = 0\n            k += 1\n        }\n        if count == x {\n\
    \            rows.append(i)\n            cols.append(j)\n            i += 1\n\
    \            j = 0\n            k += 1\n        }\n        if count == x {\n \
    \           rows.append(i)\n            cols.append(j)\n            i += 1\n \
    \           j = 0\n            k += 1\n        }\n        if count == x {\n  \
    \          rows.append(i)\n            cols.append(j)\n            i += 1\n  \
    \          j = 0\n            k += 1\n        }\n        if count == x {\n   \
    \         rows.append(i)\n            cols.append(j)\n            i += 1\n   \
    \         j = 0\n            k += 1\n        }\n        if count == x {\n    \
    \        rows.append(i)\n            cols.append(j)\n            i += 1\n    \
    \        j = 0\n            k += 1\n        }\n        if count == x {\n     \
    \       rows.append(i)\n            cols.append(j)\n            i += 1\n     \
    \       j = 0\n            k += 1\n        }\n        if count == x {\n      \
    \      rows.append(i)\n            cols.append(j)\n            i += 1\n      \
    \      j = 0\n            k += 1\n        }\n        if count == x {\n       \
    \     rows.append(i)\n            cols.append(j)\n            i += 1\n       \
    \     j = 0\n            k += 1\n        }\n        if count == x {\n        \
    \    rows.append(i)\n            cols.append(j)\n            i += 1\n        \
    \    j = 0\n            k += 1\n        }\n        if count == x {\n         \
    \   rows.append(i)\n            cols.append(j)\n            i += 1\n         \
    \   j = 0\n            k += 1\n        }\n        if count == x {\n          \
    \  rows.append(i)\n            cols.append(j)\n            i += 1\n          \
    \  j = 0\n            k += 1\n        }\n        if count == x {\n           \
    \ rows.append(i)\n            cols.append(j)\n            i += 1\n           \
    \ j = 0\n            ", "    var row = [Int]()\n    var col = [Int]()\n    var\
    \ result = [(Int, Int)]()\n    var rowIdx = 1\n    var colIdx = 1\n    for row\
    \ in lst {\n        if rowIdx < row.count {\n            if colIdx < row.count\
    \ {\n                if row[rowIdx] == x {\n                    result.append(\
    \ (rowIdx, colIdx) )\n                }\n                colIdx += 1\n       \
    \     } else {\n                colIdx = 1\n                rowIdx += 1\n    \
    \        }\n        } else {\n            rowIdx = 1\n            colIdx = 1\n\
    \        }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder()\n\
    \    return result", "    var row = [Int]()\n    var column = [Int]()\n    var\
    \ result = [[(Int, Int)]]()\n    for row in lst {\n        for column in row {\n\
    \            if column == x {\n                result.append([(row, column)])\n\
    \            }\n        }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder()\n\
    \    return result", "    var result = [(0, -1)]\n    for row in lst {\n     \
    \   var rowResult = [(0, -1)]\n        for row in row {\n            if row ==\
    \ x {\n                rowResult = rowResult\n            } else {\n         \
    \       rowResult.insert(rowResult.end(), (0, -1))\n            }\n        }\n\
    \        result = rowResult\n    }\n    return result", "    var rows = [[(Int,\
    \ Int)]]()\n    var row = [Int]()\n    var columns = [Int]()\n    var row_index\
    \ = 0\n    var column_index = 0\n    for row in lst {\n        column_index =\
    \ 0\n        for column in row {\n            if column_index == x {\n       \
    \         rows.append((row, columns))\n            }\n            column_index\
    \ += 1\n        }\n        row_index += 1\n        columns = [Int]()\n    }\n\
    \    return rows", "    if lst.isEmpty() {\n        return []\n    }\n    var\
    \ rows = [Int]()\n    var cols = [Int]()\n    var row = 0\n    var col = 0\n \
    \   for row in lst {\n        cols = cols.sorted()\n        if cols.contains(x)\
    \ {\n            return [(row, col)]\n        }\n        cols.append(0)\n    }\n\
    \    return []", "    var result = [(Int, Int)]()\n    var row = 0\n    var col\
    \ = 0\n    for row in lst {\n        if row == x {\n            break\n      \
    \  }\n    }\n    for col in row.reverse() {\n        if col == x {\n         \
    \   break\n        }\n    }\n    for row in lst {\n        if row == x {\n   \
    \         break\n        }\n    }\n    for col in row.reverse() {\n        if\
    \ col == x {\n            break\n        }\n    }\n    for row in lst {\n    \
    \    if row == x {\n            break\n        }\n    }\n    for col in row.reverse()\
    \ {\n        if col == x {\n            break\n        }\n    }\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n    }\n    for col\
    \ in row.reverse() {\n        if col == x {\n            break\n        }\n  \
    \  }\n    for row in lst {\n        if row == x {\n            break\n       \
    \ }\n    }\n    for col in row.reverse() {\n        if col == x {\n          \
    \  break\n        }\n    }\n    for row in lst {\n        if row == x {\n    \
    \        break\n        }\n    }\n    for col in row.reverse() {\n        if col\
    \ == x {\n            break\n        }\n    }\n    for row in lst {\n        if\
    \ row == x {\n            break\n        }\n    }\n    for col in row.reverse()\
    \ {\n        if col == x {\n            break\n        }\n    }\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n    }\n    for col\
    \ in row.reverse() {\n        if col == x {\n            break\n        }\n  \
    \  }\n    for row in lst {\n        if row == x {\n            break\n       \
    \ }\n    }\n    for col in row.reverse() {\n        if col == x {\n          \
    \  break\n        }\n    }\n    for row in lst {\n        if row == x {\n    \
    \        break\n        }\n    }\n    for col in row.reverse() {\n        if col\
    \ == x {\n            break\n        }\n    }\n    for row in lst {\n        if\
    \ row == x {\n            break\n        }\n    }\n    for col in row.reverse()\
    \ {\n        if col == x {\n            break\n        }\n    }\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n    }\n    for col\
    \ in row.reverse() {\n        if col == x {\n            break\n        }\n  \
    \  }\n    for row in lst {\n        if row == x {\n            break\n       \
    \ }\n    }\n    for col in row.reverse() {\n        if col == x {\n          \
    \  break\n        }\n    }\n    for row in lst {\n        if row == x {\n    \
    \        break\n        }\n    }\n    for col in row.reverse() {\n        if col\
    \ == ", "    var result = [(0, 0)]\n    for row in lst {\n        for (i, _) in\
    \ row.enumerated() {\n            if i == x {\n                result.append(row)\n\
    \                break\n            }\n        }\n    }\n    result.sortInPlaceByColumn(&reverseInPlaceByColumn(&result))\n\
    \    return result", "    var result = [(Int, Int)]()\n    var row = 0\n    var\
    \ col = 0\n    for row in lst {\n        if row == x {\n            break\n  \
    \      }\n    }\n    for col in lst[row].reversed() {\n        if col == x {\n\
    \            break\n        }\n    }\n    for row in lst {\n        if row ==\
    \ x {\n            break\n        }\n        for col in lst[row].reversed() {\n\
    \            if col == x {\n                break\n            }\n        }\n\
    \        result.append((row, col))\n    }\n    return result", "    var rows =\
    \ [[(Int, Int)]]()\n    var row = [Int]()\n    var cols = [Int]()\n    var col\
    \ = [Int]()\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    for\
    \ row in lst {\n        cols = row\n        cols = cols.sorted()\n        for\
    \ col in cols {\n            i = col\n            j = i\n            k = i\n \
    \           l = i\n            while i < x {\n                i += 1\n       \
    \         j += 1\n                k += 1\n                l += 1\n           \
    \ }\n            rows.append((i, k))\n            rows.append((j, l))\n      \
    \      rows.append((k, i))\n            rows.append((l, j))\n        }\n    }\n\
    \    return rows", "    var result = [(Int, Int)]()\n    var row = 0\n    var\
    \ column = 0\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n        column += 1\n    }\n    for row in lst {\n        if row ==\
    \ x {\n            break\n        }\n        column -= 1\n    }\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n        column +=\
    \ 1\n        column -= 1\n    }\n    for row in lst {\n        if row == x {\n\
    \            break\n        }\n        column += 1\n        column -= 1\n    \
    \    column += 1\n    }\n    for row in lst {\n        if row == x {\n       \
    \     break\n        }\n        column += 1\n        column -= 1\n        column\
    \ += 1\n        column -= 1\n    }\n    for row in lst {\n        if row == x\
    \ {\n            break\n        }\n        column += 1\n        column -= 1\n\
    \        column += 1\n        column -= 1\n        column += 1\n    }\n    for\
    \ row in lst {\n        if row == x {\n            break\n        }\n        column\
    \ += 1\n        column -= 1\n        column += 1\n        column -= 1\n      \
    \  column -= 1\n    }\n    for row in lst {\n        if row == x {\n         \
    \   break\n        }\n        column += 1\n        column -= 1\n        column\
    \ += 1\n        column -= 1\n        column -= 1\n        column += 1\n    }\n\
    \    for row in lst {\n        if row == x {\n            break\n        }\n \
    \       column += 1\n        column -= 1\n        column += 1\n        column\
    \ -= 1\n        column -= 1\n        column -= 1\n    }\n    for row in lst {\n\
    \        if row == x {\n            break\n        }\n        column += 1\n  \
    \      column -= 1\n        column += 1\n        column -= 1\n        column -=\
    \ 1\n        column -= 1\n    }\n    for row in lst {\n        if row == x {\n\
    \            break\n        }\n        column += 1\n        column -= 1\n    \
    \    column += 1\n        column -= 1\n        column -= 1\n        column -=\
    \ 1\n        column += 1\n    }\n    for row in lst {\n        if row == x {\n\
    \            break\n        }\n        column += 1\n        column -= 1\n    \
    \    column += 1\n        column -= 1\n        column -= 1\n        column -=\
    \ 1\n        column -= 1\n    }\n    for row in lst {\n        if row == x {\n\
    \            break\n        }\n        column += 1\n        column -= 1\n    \
    \    column += 1\n        column -= 1\n        column -= 1\n        column -=\
    \ 1\n        column -= 1\n    }\n    for row in l", "    var result = [(Int, Int)]()\n\
    \    var row = 0\n    var col = 0\n    for row in lst {\n        if row == x {\n\
    \            break\n        }\n    }\n    for col in row {\n        if col ==\
    \ x {\n            break\n        }\n    }\n    for row in lst {\n        if row\
    \ == x {\n            break\n        }\n    }\n    for col in row {\n        if\
    \ col == x {\n            break\n        }\n    }\n    for row in lst {\n    \
    \    if row == x {\n            break\n        }\n    }\n    for col in row {\n\
    \        if col == x {\n            break\n        }\n    }\n    for row in lst\
    \ {\n        if row == x {\n            break\n        }\n    }\n    for col in\
    \ row {\n        if col == x {\n            break\n        }\n    }\n    for row\
    \ in lst {\n        if row == x {\n            break\n        }\n    }\n    for\
    \ col in row {\n        if col == x {\n            break\n        }\n    }\n \
    \   for row in lst {\n        if row == x {\n            break\n        }\n  \
    \  }\n    for col in row {\n        if col == x {\n            break\n       \
    \ }\n    }\n    for row in lst {\n        if row == x {\n            break\n \
    \       }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {", "    var rows = [[(Int, Int)]]()\n \
    \   var columns = [Int]()\n    var row = 0\n    var column = 0\n    for row in\
    \ lst {\n        column = 0\n        for element in row {\n            if element\
    \ == x {\n                columns.append(column)\n            }\n            column++\n\
    \        }\n        rows.append((row, columns))\n        columns.removeAll()\n\
    \    }\n    rows.sort()\n    rows.reverse()\n    return rows", "    var result\
    \ = [(Int, Int)]()\n    for row in lst {\n        for column in row {\n      \
    \      if column == x {\n                result.append( (row, column) )\n    \
    \        }\n        }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder()\n\
    \    return result", "    var result = [(Int, Int)]()\n    var row = 0\n    var\
    \ col = 0\n    for row in lst {\n        if row == x {\n            break\n  \
    \      }\n    }\n    for col in row.reverse() {\n        if col == x {\n     \
    \       break\n        }\n    }\n    for row in lst {\n        if row == x {\n\
    \            break\n        }\n    }\n    for col in row.reverse() {\n       \
    \ if col == x {\n            break\n        }\n    }\n    for row in lst {\n \
    \       if row == x {\n            break\n        }\n    }\n    for col in row.reverse()\
    \ {\n        if col == x {\n            break\n        }\n    }\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n    }\n    for col\
    \ in row.reverse() {\n        if col == x {\n            break\n        }\n  \
    \  }\n    for row in lst {\n        if row == x {\n            break\n       \
    \ }\n    }\n    for col in row.reverse() {\n        if col == x {\n          \
    \  break\n        }\n    }\n    for row in lst {\n        if row == x {\n    \
    \        break\n        }\n    }\n    for col in row.reverse() {\n        if col\
    \ == x {\n            break\n        }\n    }\n    for row in lst {\n        if\
    \ row == x {\n            break\n        }\n    }\n    for col in row.reverse()\
    \ {\n        if col == x {\n            break\n        }\n    }\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n    }\n    for col\
    \ in row.reverse() {\n        if col == x {\n            break\n        }\n  \
    \  }\n    for row in lst {\n        if row == x {\n            break\n       \
    \ }\n    }\n    for col in row.reverse() {\n        if col == x {\n          \
    \  break\n        }\n    }\n    for row in lst {\n        if row == x {\n    \
    \        break\n        }\n    }\n    for col in row.reverse() {\n        if col\
    \ == x {\n            break\n        }\n    }\n    for row in lst {\n        if\
    \ row == x {\n            break\n        }\n    }\n    for col in row.reverse()\
    \ {\n        if col == x {\n            break\n        }\n    }\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n    }\n    for col\
    \ in row.reverse() {\n        if col == x {\n            break\n        }\n  \
    \  }\n    for row in lst {\n        if row == x {\n            break\n       \
    \ }\n    }\n    for col in row.reverse() {\n        if col == x {\n          \
    \  break\n        }\n    }\n    for row in lst {\n        if row == x {\n    \
    \        break\n        }\n    }\n    for col in row.reverse() {\n        if col\
    \ == ", "    var result = [(Int, Int)]()\n    for row in lst {\n        for (i,\
    \ v) in row.enumerated() {\n            if v == x {\n                result.append(\
    \ (i, row.count) )\n            }\n        }\n    }\n    result.sortInPlace((a,\
    \ b) -> Bool {\n        return a.0 < b.0\n    })\n    result.sortInPlace((a, b)\
    \ -> Bool {\n        return a.1 < b.1\n    })\n    return result", "    if lst.isEmpty()\
    \ {\n        return []\n    }\n    var row = [Int]()\n    var col = [Int]()\n\
    \    var rows = [Int]()\n    var cols = [Int]()\n    var rowIdx = 0\n    var colIdx\
    \ = 0\n    var rowIdxs = [0]\n    var colIdxs = [0]\n    var rowIdx = 0\n    var\
    \ colIdx = 0\n    var rowIdxs = [0]\n    var colIdxs = [0]\n    for row in lst\
    \ {\n        colIdx = 0\n        for col in row {\n            if colIdx == x\
    \ {\n                rowIdxs.append(rowIdx)\n                colIdxs.append(colIdx)\n\
    \            }\n            colIdx += 1\n        }\n        rowIdx += 1\n    }\n\
    \    rowIdxs = rowIdxs.sorted()\n    colIdxs = colIdxs.sorted()\n    for idx in\
    \ rowIdxs {\n        rowIdx = idx\n        rowIdxs.append(rowIdx)\n    }\n   \
    \ for idx in colIdxs {\n        colIdx = idx\n        colIdxs.append(colIdx)\n\
    \    }\n    for idx in rowIdxs {\n        rowIdx = idx\n        rowIdxs.append(rowIdx)\n\
    \    }\n    for idx in colIdxs {\n        colIdx = idx\n        colIdxs.append(colIdx)\n\
    \    }\n    return rowIdxs.map { (idx, _) in\n        return (idx, colIdxs[idx])\n\
    \    }.sorted()", "    var row = [Int]()\n    var column = [Int]()\n    var result\
    \ = [[(Int, Int)]]()\n    var row_index = 0\n    var column_index = 0\n    var\
    \ row_index2 = 0\n    var column_index2 = 0\n    var row_index3 = 0\n    var column_index3\
    \ = 0\n    var row_index4 = 0\n    var column_index4 = 0\n    var row_index5 =\
    \ 0\n    var column_index5 = 0\n    var row_index6 = 0\n    var column_index6\
    \ = 0\n    var row_index7 = 0\n    var column_index7 = 0\n    var row_index8 =\
    \ 0\n    var column_index8 = 0\n    var row_index9 = 0\n    var column_index9\
    \ = 0\n    var row_index10 = 0\n    var column_index10 = 0\n    var row_index11\
    \ = 0\n    var column_index11 = 0\n    var row_index12 = 0\n    var column_index12\
    \ = 0\n    var row_index13 = 0\n    var column_index13 = 0\n    var row_index14\
    \ = 0\n    var column_index14 = 0\n    var row_index15 = 0\n    var column_index15\
    \ = 0\n    var row_index16 = 0\n    var column_index16 = 0\n    var row_index17\
    \ = 0\n    var column_index17 = 0\n    var row_index18 = 0\n    var column_index18\
    \ = 0\n    var row_index19 = 0\n    var column_index19 = 0\n    var row_index20\
    \ = 0\n    var column_index20 = 0\n    var row_index21 = 0\n    var column_index21\
    \ = 0\n    var row_index22 = 0\n    var column_index22 = 0\n    var row_index23\
    \ = 0\n    var column_index23 = 0\n    var row_index24 = 0\n    var column_index24\
    \ = 0\n    var row_index25 = 0\n    var column_index25 = 0\n    var row_index26\
    \ = 0\n    var column_index26 = 0\n    var row_index27 = 0\n    var column_index27\
    \ = 0\n    var row_index28 = 0\n    var column_index28 = 0\n    var row_index29\
    \ = 0\n    var column_index29 = 0\n    var row_index30 = 0\n    var column_index30\
    \ = 0\n    var row_index31 = 0\n    var column_index31 = 0\n    var row_index32\
    \ = 0\n    var column_index32 = 0\n    var row_index33 = 0\n    var column_index33\
    \ = 0\n    var row_index34 = 0\n    var column_index34 = 0\n    var row_index35\
    \ = 0\n    var column_index35 = 0\n    var row_index36 = 0\n    var column_index36\
    \ = 0\n    var row_index37 = 0\n    var column_index37 = 0\n    var row_index38\
    \ = 0\n    var column_index38 = 0\n    var row_index39 = 0\n    var column_index39\
    \ = 0\n    var row_index40 = 0\n    var column_index40 = 0\n    var row_index41\
    \ = 0\n    var column_index", "    if lst.isEmpty() {\n        return []\n   \
    \ }\n    var row = [Int]()\n    var col = [Int]()\n    var result = [(Int, Int)]()\n\
    \    var rowIdx = 0\n    var colIdx = 0\n    var rowLen = lst.count\n    var colLen\
    \ = lst[0].count\n    var rowIdx = 1\n    var colIdx = 1\n    var rowIdx_ = rowIdx\n\
    \    var colIdx_ = colIdx\n    var rowLen_ = rowLen\n    var colLen_ = colLen\n\
    \    var rowIdx_ = rowIdx\n    var colIdx_ = colIdx\n    var rowLen_ = rowLen\n\
    \    var colLen_ = colLen\n    var rowIdx_ = rowIdx\n    var colIdx_ = colIdx\n\
    \    var rowLen_ = rowLen\n    var colLen_ = colLen\n    var rowIdx_ = rowIdx\n\
    \    var colIdx_ = colIdx\n    var rowLen_ = rowLen\n    var colLen_ = colLen\n\
    \    var rowIdx_ = rowIdx\n    var colIdx_ = colIdx\n    var rowLen_ = rowLen\n\
    \    var colLen_ = colLen\n    var rowIdx_ = rowIdx\n    var colIdx_ = colIdx\n\
    \    var rowLen_ = rowLen\n    var colLen_ = colLen\n    var rowIdx_ = rowIdx\n\
    \    var colIdx_ = colIdx\n    var rowLen_ = rowLen\n    var colLen_ = colLen\n\
    \    var rowIdx_ = rowIdx\n    var colIdx_ = colIdx\n    var rowLen_ = rowLen\n\
    \    var colLen_ = colLen\n    var rowIdx_ = rowIdx\n    var colIdx_ = colIdx\n\
    \    var rowLen_ = rowLen\n    var colLen_ = colLen\n    var rowIdx_ = rowIdx\n\
    \    var colIdx_ = colIdx\n    var rowLen_ = rowLen\n    var colLen_ = colLen\n\
    \    var rowIdx_ = rowIdx\n    var colIdx_ = colIdx\n    var rowLen_ = rowLen\n\
    \    var colLen_ = colLen\n    var rowIdx_ = rowIdx\n    var colIdx_ = colIdx\n\
    \    var rowLen_ = rowLen\n    var colLen_ = colLen\n    var rowIdx_ = rowIdx\n\
    \    var colIdx_ = colIdx\n    var rowLen_ = rowLen\n    var colLen_ = colLen\n\
    \    var rowIdx_ = rowIdx\n    var colIdx_ = colIdx\n    var rowLen_ = rowLen\n\
    \    var colLen_ = colLen\n    var rowIdx_ = rowIdx\n    var colIdx_ = colIdx\n\
    \    var rowLen_ = row", "    if lst.isEmpty() {\n        return []\n    }\n \
    \   var rows = [Int]()\n    var cols = [Int]()\n    var row = 0\n    var col =\
    \ 0\n    for row in lst {\n        cols = row.slice()\n        cols.reverse()\n\
    \        if cols.contains(x) {\n            return [(row, col)]\n        }\n \
    \   }\n    return []", "    var result = [(Int, Int)]()\n    for row in lst {\n\
    \        for column in row {\n            if column == x {\n                result.append(\
    \ (row, column) )\n            }\n        }\n    }\n    result.sortInPlace()\n\
    \    result.sortInPlaceInDescendingOrder()\n    return result", "    if lst.isEmpty()\
    \ {\n        return []\n    }\n    var row = [Int]()\n    var column = [Int]()\n\
    \    var result = [(0, 0), (len(lst) - 1, 0)]\n    for row in lst {\n        for\
    \ column in row {\n            if column == x {\n                result.append((row,\
    \ column))\n            }\n        }\n    }\n    result.sort(by: { (r1, r2) ->\
    \ Bool in\n        return r1.0 < r2\n    })\n    result.sort(by: { (r1, r2) ->\
    \ Bool in\n        return r2.0 < r1\n    })\n    return result", "    var row\
    \ = [Int]()\n    var col = [Int]()\n    var result = [(Int, Int)]()\n    for row\
    \ in lst {\n        for col in row {\n            if col == x {\n            \
    \    result.append((row, col))\n            }\n        }\n    }\n    result.sortInPlace()\n\
    \    result.sortInPlaceInDescendingOrder()\n    return result", "    var rows\
    \ = [[(Int, Int)]]()\n    var columns = [Int]()\n    var row = 0\n    var column\
    \ = 0\n    for row in lst {\n        column = 0\n        for element in row {\n\
    \            if element == x {\n                columns.append(column)\n     \
    \           rows.append((row, column))\n            }\n            column += 1\n\
    \        }\n    }\n    return rows", "    var result = [(Int, Int)]()\n    var\
    \ row = 0\n    var col = 0\n    for row in lst {\n        if row == x {\n    \
    \        break\n        }\n    }\n    for row in lst {\n        if row == x {\n\
    \            break\n        }\n        if col < row.count {\n            result.append(\
    \ (row, col) )\n            col++\n        }\n    }\n    result.sort(by: { (r1,\
    \ r2) -> Bool in\n        if r1.0 < r2.0 {\n            return true\n        }\n\
    \        return false\n    })\n    result.sort(by: { (r1, r2) -> Bool in\n   \
    \     if r1.1 < r2.1 {\n            return true\n        }\n        return false\n\
    \    })\n    return result", "    var result = [(Int, Int)]()\n    var row = 0\n\
    \    var col = 0\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {", "    var result = [(Int, Int)]()\n \
    \   var row = 0\n    var column = 0\n    for row in lst {\n        column = column\
    \ + row[x] - 1\n        if column >= 0 {\n            result.append((row, column))\n\
    \        }\n    }\n    result.sortInPlaceByKey(ascending: true)\n    result.sortInPlaceByKey(ascending:\
    \ false)\n    return result", "    var row = [Int]()\n    var col = [Int]()\n\
    \    var result = [(Int, Int)]()\n    for row in lst {\n        for col in row\
    \ {\n            if col == x {\n                result.append((row, col))\n  \
    \          }\n        }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder()\n\
    \    return result", "    var result = [(Int, Int)]()\n    var row = 0\n    var\
    \ col = 0\n    for row in lst {\n        if row == x {\n            break\n  \
    \      }\n    }\n    for col in row.reverse() {\n        if col == x {\n     \
    \       break\n        }\n    }\n    for row in lst {\n        if row == x {\n\
    \            break\n        }\n        for col in row.reverse() {\n          \
    \  if col == x {\n                break\n            }\n        }\n    }\n   \
    \ for row in lst {\n        if row == x {\n            break\n        }\n    \
    \    for col in row.reverse() {\n            if col == x {\n                break\n\
    \            }\n        }\n    }\n    for row in lst {\n        if row == x {\n\
    \            break\n        }\n        for col in row.reverse() {\n          \
    \  if col == x {\n                break\n            }\n        }\n    }\n   \
    \ for row in lst {\n        if row == x {\n            break\n        }\n    \
    \    for col in row.reverse() {\n            if col == x {\n                break\n\
    \            }\n        }\n    }\n    for row in lst {\n        if row == x {\n\
    \            break\n        }\n        for col in row.reverse() {\n          \
    \  if col == x {\n                break\n            }\n        }\n    }\n   \
    \ for row in lst {\n        if row == x {\n            break\n        }\n    \
    \    for col in row.reverse() {\n            if col == x {\n                break\n\
    \            }\n        }\n    }\n    for row in lst {\n        if row == x {\n\
    \            break\n        }\n        for col in row.reverse() {\n          \
    \  if col == x {\n                break\n            }\n        }\n    }\n   \
    \ for row in lst {\n        if row == x {\n            break\n        }\n    \
    \    for col in row.reverse() {\n            if col == x {\n                break\n\
    \            }\n        }\n    }\n    for row in lst {\n        if row == x {\n\
    \            break\n        }\n        for col in row.reverse() {\n          \
    \  if col == x {\n                break\n            }\n        }\n    }\n   \
    \ for row in lst {\n        if row == x {\n            break\n        }\n    \
    \    for col in row.reverse() {\n            if col == x {\n                break\n\
    \            }\n        }\n    }\n    for row in lst {\n        if row == x {\n\
    \            break\n        }\n        for col in row.reverse() {\n          \
    \  if col == x {\n                break\n            }\n        }\n    }\n   \
    \ for row in lst {\n        if row == x {\n            break\n        }\n    \
    \    for col in row.reverse() {\n            if col == x {\n                break\n\
    \            }\n        }\n    }\n    for row in lst {\n        if row == x {\n\
    \            break\n        }\n        for col in row.reverse() {\n          \
    \  if col == x {", "    var result = [(Int, Int)]()\n    var row = 0\n    var\
    \ col = 0\n    for row in lst {\n        if row == x {\n            break\n  \
    \      }\n    }\n    for col in lst[row].reversed() {\n        if col == x {\n\
    \            break\n        }\n    }\n    for row in lst {\n        if row ==\
    \ x {\n            break\n        }\n    }\n    for col in lst[row].reversed()\
    \ {\n        if col == x {\n            break\n        }\n    }\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n    }\n    for col\
    \ in lst[row].reversed() {\n        if col == x {\n            break\n       \
    \ }\n    }\n    for row in lst {\n        if row == x {\n            break\n \
    \       }\n    }\n    for col in lst[row].reversed() {\n        if col == x {\n\
    \            break\n        }\n    }\n    for row in lst {\n        if row ==\
    \ x {\n            break\n        }\n    }\n    for col in lst[row].reversed()\
    \ {\n        if col == x {\n            break\n        }\n    }\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n    }\n    for col\
    \ in lst[row].reversed() {\n        if col == x {\n            break\n       \
    \ }\n    }\n    for row in lst {\n        if row == x {\n            break\n \
    \       }\n    }\n    for col in lst[row].reversed() {\n        if col == x {\n\
    \            break\n        }\n    }\n    for row in lst {\n        if row ==\
    \ x {\n            break\n        }\n    }\n    for col in lst[row].reversed()\
    \ {\n        if col == x {\n            break\n        }\n    }\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n    }\n    for col\
    \ in lst[row].reversed() {\n        if col == x {\n            break\n       \
    \ }\n    }\n    for row in lst {\n        if row == x {\n            break\n \
    \       }\n    }\n    for col in lst[row].reversed() {\n        if col == x {\n\
    \            break\n        }\n    }\n    for row in lst {\n        if row ==\
    \ x {\n            break\n        }\n    }\n    for col in lst[row].reversed()\
    \ {\n        if col == x {\n            break\n        }\n    }\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n    }\n    for col\
    \ in lst[row].reversed() {\n        if col == x {\n            break\n       \
    \ }\n    }\n    for row in lst {\n        if row == x {\n            break\n \
    \       }\n    }\n    for col in lst[row].reversed() {\n        if col == x {\n\
    \            break\n        }\n    }\n    for ", "    var rows = [[(Int, Int)]]()\n\
    \    var row = [Int]()\n    var cols = [Int]()\n    var col = [Int]()\n    var\
    \ i = 0\n    for row in lst {\n        cols = row\n        cols = cols.sorted()\n\
    \        for col in cols {\n            if col == x {\n                rows.append((i,\
    \ col))\n            }\n        }\n        i += 1\n    }\n    return rows", " \
    \   var result = [(Int, Int)]()\n    var row = 0\n    var column = 0\n    for\
    \ row in lst {\n        var column = 0\n        for column in row {\n        \
    \    if column == x {\n                result.append( (row, column) )\n      \
    \      }\n        }\n    }\n    result.sort(by: { (lhs, rhs) -> Bool in\n    \
    \    if lhs.0 < rhs.0 {\n            return true\n        }\n        return false\n\
    \    })\n    result.sort(by: { (lhs, rhs) -> Bool in\n        if lhs.1 < rhs.1\
    \ {\n            return true\n        }\n        return false\n    })\n    return\
    \ result", "    var rows = [[(Int, Int)]]()\n    var row = [Int]()\n    var cols\
    \ = [Int]()\n    var row_index = 0\n    var col_index = 0\n    for row in lst\
    \ {\n        cols = row\n        for col in cols {\n            if col == x {\n\
    \                rows.append((row_index, col_index))\n            }\n        }\n\
    \        row_index += 1\n    }\n    return rows", "    var row = [Int]()\n   \
    \ var col = [Int]()\n    var result = [[(Int, Int)]]()\n    for row in lst {\n\
    \        for col in row {\n            if col == x {\n                result.append([(row,\
    \ col)])\n            }\n        }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder(by:\
    \ {$0.1 < $1.1})\n    return result", "    var rows = [[(Int, Int)]]()\n    var\
    \ columns = [Int]()\n    var row = 0\n    var column = 0\n    for row in lst {\n\
    \        column = 0\n        for element in row {\n            if element == x\
    \ {\n                columns.append(column)\n                rows.append((row,\
    \ column))\n            }\n            column += 1\n        }\n    }\n    rows.sort()\n\
    \    columns.sort()\n    rows.reverse()\n    columns.reverse()\n    return rows",
  "    var row = [Int]()\n    var column = [Int]()\n    var result = [[(Int, Int)]]()\n\
    \    for row in lst {\n        for column in row {\n            if column == x\
    \ {\n                result.append((row, column))\n            }\n        }\n\
    \    }\n    result.sort(by: {$0.0 < $1.0})\n    result.sort(by: {$1.0 > $0.0})\n\
    \    return result", "    var row = [Int]()\n    var col = [Int]()\n    var result\
    \ = [(Int, Int)]()\n    for row in lst {\n        for col in row {\n         \
    \   if col == x {\n                result.append((row, col))\n            }\n\
    \        }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder({\
    \ $0.1 < $1.1 })\n    return result", "    var result = [(0, -1)]\n    for row\
    \ in lst {\n        if row[x] != nil {\n            for (i, j) in row.enumerated()\
    \ {\n                if j == x {\n                    result.append((i, j))\n\
    \                }\n            }\n        }\n    }\n    result.sortInPlaceByKey(ascending:\
    \ false)\n    result.sortInPlaceByKey(ascending: true)\n    return result", " \
    \   var rows = [[(Int, Int)]]()\n    var row = [Int]()\n    var cols = [Int]()\n\
    \    var col = [Int]()\n    var i = 0\n    var j = 0\n    var k = 0\n    var l\
    \ = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q =\
    \ 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n\
    \    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var count = 0\n\
    \    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n \
    \   var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n  \
    \  var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n   \
    \ var y = 0\n    var z = 0\n    var count = 0\n    for (i = 0; i < lst.count;\
    \ i += 1) {\n        row = lst[i]\n        l = row.count\n        for (j = 0;\
    \ j < l; j += 1) {\n            col = row[j]\n            m = col.count\n    \
    \        for (k = 0; k < m; k += 1) {\n                w = col[k]\n          \
    \      x = w\n                y = x\n                z = y\n                count++\n\
    \                rows.append([(i, j)])\n                row.append((i, k))\n \
    \               row.append((k, j))\n                row.append((j, k))\n     \
    \           row.append((k, i))\n                row.append((i, i))\n         \
    \       row.append((i, i + 1))\n                row.append((i + 1, i))\n     \
    \           row.append((i + 1, i + 2))\n                row.append((i + 2, i +\
    \ 1))\n                row.append((i + 1, i + 1))\n                row.append((i\
    \ + 1, i + 2))\n                row.append((i + 2, i + 1))\n                row.append((i\
    \ + 1, i + 1))\n                row.append((i + 1, i + 2))\n                row.append((i\
    \ + 2, i + 1))\n                row.append((i + 1, i + 1))\n                row.append((i\
    \ + 1, i + 2))\n                row.append((i + 2, i + 1))\n                row.append((i\
    \ + 1, i + 1))\n                row.append((i + 1, i + 2))\n                row.append((i\
    \ + 2, i + 1))\n                row.append((i + 1, i + 1))\n                row.append((i\
    \ + 1, i + 2))\n                row.append((i + 2, i + 1))\n                row.append((i\
    \ + 1, i + 1))\n                row.append((i + 1, i + 2))\n                row.append((i\
    \ + 2, i + 1))\n                row.append((i + 1, i + 1))\n                row.append((i\
    \ + 1, i + 2))\n                row.append((i + 2, i + 1))\n                row.append((i\
    \ + 1, i + 1))\n                row.append((i + 1, i + 2))\n                row.append((i\
    \ + 2, i + 1))\n                row.append((i + 1, i + 1))\n                row",
  "    var result = [(Int, Int)]()\n    for row in lst {\n        for column in row\
    \ {\n            if column == x {\n                result.append((row, column))\n\
    \            }\n        }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder()\n\
    \    return result", "    var row = [Int]()\n    var col = [Int]()\n    var result\
    \ = [[(Int, Int)]]()\n    for row in lst {\n        for col in row {\n       \
    \     if col == x {\n                result.append([(row, col)])\n           \
    \ }\n        }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder(by:\
    \ {$0.1 < $1.1})\n    return result", "    var result = [(Int, Int)]()\n    var\
    \ row = 0\n    var col = 0\n    for row in lst {\n        if row == x {\n    \
    \        break\n        }\n    }\n    for col in row.reverse() {\n        if col\
    \ == x {\n            break\n        }\n    }\n    for row in lst {\n        if\
    \ row == x {\n            break\n        }\n    }\n    for col in row.reverse()\
    \ {\n        if col == x {\n            break\n        }\n    }\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n    }\n    for col\
    \ in row.reverse() {\n        if col == x {\n            break\n        }\n  \
    \  }\n    for row in lst {\n        if row == x {\n            break\n       \
    \ }\n    }\n    for col in row.reverse() {\n        if col == x {\n          \
    \  break\n        }\n    }\n    for row in lst {\n        if row == x {\n    \
    \        break\n        }\n    }\n    for col in row.reverse() {\n        if col\
    \ == x {\n            break\n        }\n    }\n    for row in lst {\n        if\
    \ row == x {\n            break\n        }\n    }\n    for col in row.reverse()\
    \ {\n        if col == x {\n            break\n        }\n    }\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n    }\n    for col\
    \ in row.reverse() {\n        if col == x {\n            break\n        }\n  \
    \  }\n    for row in lst {\n        if row == x {\n            break\n       \
    \ }\n    }\n    for col in row.reverse() {\n        if col == x {\n          \
    \  break\n        }\n    }\n    for row in lst {\n        if row == x {\n    \
    \        break\n        }\n    }\n    for col in row.reverse() {\n        if col\
    \ == x {\n            break\n        }\n    }\n    for row in lst {\n        if\
    \ row == x {\n            break\n        }\n    }\n    for col in row.reverse()\
    \ {\n        if col == x {\n            break\n        }\n    }\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n    }\n    for col\
    \ in row.reverse() {\n        if col == x {\n            break\n        }\n  \
    \  }\n    for row in lst {\n        if row == x {\n            break\n       \
    \ }\n    }\n    for col in row.reverse() {\n        if col == x {\n          \
    \  break\n        }\n    }\n    for row in lst {\n        if row == x {\n    \
    \        break\n        }\n    }\n    for col in row.reverse() {\n        if col\
    \ == x {\n            break\n        }\n    }\n    for row in lst {\n        if\
    \ row == x {\n            break\n        }\n    }\n    for col in row.reverse()\
    \ {\n        if col == ", "    var row = [Int]()\n    var col = [Int]()\n    var\
    \ result = [(Int, Int)]()\n    for row in lst {\n        for col in row {\n  \
    \          if col == x {\n                result.append( (row, col) )\n      \
    \      }\n        }\n    }\n    result.sort(by: { (r1, r2) -> Bool in\n      \
    \  return r1.0 < r2\n    })\n    result.sort(by: { (r1, r2) -> Bool in\n     \
    \   return r2.0 < r1\n    })\n    return result", "    if lst.isEmpty() {\n  \
    \      return []\n    }\n    var rows = [[(Int, Int)]]()\n    var row = [Int]()\n\
    \    var cols = [Int]()\n    var col = 0\n    for row in lst {\n        if row.contains(x)\
    \ {\n            rows.append((row, cols))\n        }\n        col += 1\n     \
    \   cols.append(col)\n    }\n    rows.sortInPlace()\n    var result = [(Int, Int)]()\n\
    \    for row in rows {\n        result.append((row[0], row[1]))\n    }\n    return\
    \ result", "    if lst.isEmpty() {\n        return []\n    }\n    var row = [Int]()\n\
    \    var column = [Int]()\n    var result = [(Int, Int)]()\n    for row in lst\
    \ {\n        for column in row {\n            if column == x {\n             \
    \   result.append((row, column))\n            }\n        }\n    }\n    result.sortInPlace()\n\
    \    result.sortInPlaceInDescendingOrder(by: { (a, b) -> Bool in\n        return\
    \ a.1 < b.1\n    })\n    return result", "    var row = [Int]()\n    var column\
    \ = [Int]()\n    var result = [[(Int, Int)]]()\n    for row in lst {\n       \
    \ for column in row {\n            if column == x {\n                result.append((row,\
    \ column))\n            }\n        }\n    }\n    result.sortInPlace()\n    for\
    \ row in result {\n        row.sortInPlace()\n    }\n    return result", "   \
    \ if lst.isEmpty() {\n        return []\n    }\n    var row = [Int]()\n    var\
    \ column = [Int]()\n    var result = [(Int, Int)]()\n    for row in lst {\n  \
    \      if row.contains(x) {\n            result.append((row.startIndex, row.endIndex))\n\
    \        }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder({\
    \ $0.0 < $1.0 })\n    return result", "    var coords = [(Int, Int)]()\n    var\
    \ row = [Int]()\n    var col = [Int]()\n    var rowInd = 0\n    var colInd = 0\n\
    \    for row in lst {\n        colInd = 0\n        for col in row {\n        \
    \    if col == x {\n                coords.append((rowInd, colInd))\n        \
    \    }\n            colInd += 1\n        }\n        rowInd += 1\n    }\n    coords.sortInPlaceByKey(ascending:\
    \ true)\n    coords.sortInPlaceByKey(ascending: false)\n    return coords", " \
    \   if lst.isEmpty {\n        return []\n    }\n    var result = [(Int, Int)]()\n\
    \    var row = 0\n    var col = 0\n    for row in lst {\n        if row == x {\n\
    \            break\n        }\n    }\n    for col in row {\n        if col ==\
    \ x {\n            break\n        }\n    }\n    for row in lst {\n        if row\
    \ == x {\n            break\n        }\n        for col in row {\n           \
    \ if col == x {\n                break\n            }\n        }\n    }\n    for\
    \ row in lst {\n        if row == x {\n            break\n        }\n        for\
    \ col in row {\n            if col == x {\n                break\n           \
    \ }\n        }\n    }\n    for row in lst {\n        if row == x {\n         \
    \   break\n        }\n        for col in row {\n            if col == x {\n  \
    \              break\n            }\n        }\n    }\n    for row in lst {\n\
    \        if row == x {\n            break\n        }\n        for col in row {\n\
    \            if col == x {\n                break\n            }\n        }\n\
    \    }\n    for row in lst {\n        if row == x {\n            break\n     \
    \   }\n        for col in row {\n            if col == x {\n                break\n\
    \            }\n        }\n    }\n    for row in lst {\n        if row == x {\n\
    \            break\n        }\n        for col in row {\n            if col ==\
    \ x {\n                break\n            }\n        }\n    }\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n        for col\
    \ in row {\n            if col == x {\n                break\n            }\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n        for col in row {\n            if col == x {\n            \
    \    break\n            }\n        }\n    }\n    for row in lst {\n        if\
    \ row == x {\n            break\n        }\n        for col in row {\n       \
    \     if col == x {\n                break\n            }\n        }\n    }\n\
    \    for row in lst {\n        if row == x {\n            break\n        }\n \
    \       for col in row {\n            if col == x {\n                break\n \
    \           }\n        }\n    }\n    for row in lst {\n        if row == x {\n\
    \            break\n        }\n        for col in row {\n            if col ==\
    \ x {\n                break\n            }\n        }\n    }\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n        for col\
    \ in row {\n            if col == x {\n                break\n            }\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n        for col in row {\n            if col == x {\n            \
    \    break\n", "    var result = [(Int, Int)]()\n    for row in lst {\n      \
    \  for (i, v) in row.enumerated() {\n            if v == x {\n               \
    \ result.append( (i, row.count) )\n            }\n        }\n    }\n    result.sortInPlace()\n\
    \    result.sortInPlaceInDescendingOrder(by: { (a, b) -> Bool in\n        return\
    \ a.1 < b.1\n    })\n    return result", "    var result = [(Int, Int)]()\n  \
    \  var row = 0\n    var col = 0\n    for row in lst {\n        var col = 0\n \
    \       for col in row {\n            if col == x {\n                result.append(\
    \ (row, col) )\n            }\n        }\n    }\n    result.sort(by: { (r1, r2)\
    \ -> Bool in\n        if r1.0 < r2.0 {\n            return true\n        }\n \
    \       return false\n    })\n    result.sort(by: { (r1, r2) -> Bool in\n    \
    \    if r1.1 < r2.1 {\n            return true\n        }\n        return false\n\
    \    })\n    return result", "    var rows = [[(Int, Int)]]()\n    for row in\
    \ lst {\n        var rowCoords = [(Int, Int)]()\n        for col in row {\n  \
    \          if col == x {\n                rowCoords.append((row, col))\n     \
    \       }\n        }\n        rows.append(rowCoords)\n    }\n    return rows",
  "    var result = [(Int, Int)]()\n    for row in lst {\n        for (i, v) in row.enumerated()\
    \ {\n            if v == x {\n                result.append((i, row.count))\n\
    \            }\n        }\n    }\n    result.sortInPlaceByKey(ascending: true)\n\
    \    result.sortInPlaceByKey(ascending: false)\n    return result", "    var result\
    \ = [(Int, Int)]()\n    for row in lst {\n        for column in row {\n      \
    \      if column == x {\n                result.append(Tuple2(row, column))\n\
    \            }\n        }\n    }\n    result.sortInPlaceByRow()\n    result.sortInPlaceByColumn()\n\
    \    return result", "    var rows = [[(Int, Int)]]()\n    for row in lst {\n\
    \        var rowCoords = [(Int, Int)]()\n        for coord in row {\n        \
    \    if coord == x {\n                rowCoords.append((coord, 1))\n         \
    \   } else {\n                rowCoords.append((coord, 0))\n            }\n  \
    \      }\n        rows.append(rowCoords)\n    }\n    rows.sort(by: { (lhs, rhs)\
    \ -> Bool in\n        let lhsRow = lhs[0]\n        let rhsRow = rhs[0]\n     \
    \   return lhsRow[0] > rhsRow[0]\n    })\n    rows.sort(by: { (lhs, rhs) -> Bool\
    \ in\n        let lhsRow = lhs[0]\n        let rhsRow = rhs[0]\n        return\
    \ lhsRow[1] > rhsRow[1]\n    })\n    return rows", "    var result = [(Int, Int)]()\n\
    \    for row in lst {\n        for (i, v) in row.enumerated() {\n            if\
    \ v == x {\n                result.append( (i, row.count) )\n            }\n \
    \       }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder(by:\
    \ { (a, b) -> Bool in\n        return a.1 < b.1\n    })\n    return result", " \
    \   var result = [(Int, Int)]()\n    var row = 0\n    var col = 0\n    for row\
    \ in lst {\n        if row == x {\n            break\n        }\n    }\n    for\
    \ col in lst[row].reversed() {\n        if col == x {\n            break\n   \
    \     }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in lst[row].reversed() {\n        if col == x {\n\
    \            break\n        }\n    }\n    for row in lst {\n        if row ==\
    \ x {\n            break\n        }\n    }\n    for col in lst[row].reversed()\
    \ {\n        if col == x {\n            break\n        }\n    }\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n    }\n    for col\
    \ in lst[row].reversed() {\n        if col == x {\n            break\n       \
    \ }\n    }\n    for row in lst {\n        if row == x {\n            break\n \
    \       }\n    }\n    for col in lst[row].reversed() {\n        if col == x {\n\
    \            break\n        }\n    }\n    for row in lst {\n        if row ==\
    \ x {\n            break\n        }\n    }\n    for col in lst[row].reversed()\
    \ {\n        if col == x {\n            break\n        }\n    }\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n    }\n    for col\
    \ in lst[row].reversed() {\n        if col == x {\n            break\n       \
    \ }\n    }\n    for row in lst {\n        if row == x {\n            break\n \
    \       }\n    }\n    for col in lst[row].reversed() {\n        if col == x {\n\
    \            break\n        }\n    }\n    for row in lst {\n        if row ==\
    \ x {\n            break\n        }\n    }\n    for col in lst[row].reversed()\
    \ {\n        if col == x {\n            break\n        }\n    }\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n    }\n    for col\
    \ in lst[row].reversed() {\n        if col == x {\n            break\n       \
    \ }\n    }\n    for row in lst {\n        if row == x {\n            break\n \
    \       }\n    }\n    for col in lst[row].reversed() {\n        if col == x {\n\
    \            break\n        }\n    }\n    for row in lst {\n        if row ==\
    \ x {\n            break\n        }\n    }\n    for col in lst[row].reversed()\
    \ {\n        if col == x {\n            break\n        }\n    }\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n    }\n    for col\
    \ in lst[row].reversed() {\n        if col == x {\n            break\n       \
    \ }\n    }\n    for ", "    var rows = [[(Int, Int)]]()\n    for row in lst {\n\
    \        var rowCoords = [(Int, Int)]()\n        for (i, v) in row.enumerated()\
    \ {\n            if i == x {\n                rowCoords.append((i, v))\n     \
    \       }\n        }\n        rows.append(rowCoords)\n    }\n    rows.sortInPlace()\n\
    \    var result = [(Int, Int)]()\n    for row in rows {\n        result.sortInPlace()\n\
    \    }\n    return result", "    var row = [Int]()\n    var col = [Int]()\n  \
    \  var result = [(Int, Int)]()\n    for row in lst {\n        for col in row {\n\
    \            if col == x {\n                result.append( (row, col) )\n    \
    \        }\n        }\n    }\n    result.sort(by: { (row1, row2) in\n        return\
    \ row1.0 < row2.0\n    })\n    result.sort(by: { (row1, row2) in\n        return\
    \ row1.1 < row2.0\n    })\n    return result", "    var result = [(Int, Int)]()\n\
    \    if lst.isEmpty() {\n        return result\n    }\n    var row = 0\n    var\
    \ col = 0\n    for row in lst {\n        if row == x {\n            break\n  \
    \      }\n    }\n    for col in lst.first!.dropFirst().reversed() {\n        if\
    \ col == x {\n            break\n        }\n    }\n    for row in lst.first!.dropFirst()\
    \ {\n        if row == x {\n            break\n        }\n    }\n    for col in\
    \ lst.first!.dropFirst().reversed() {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst.first!.dropFirst() {\n        if row ==\
    \ x {\n            break\n        }\n    }\n    for col in lst.first!.dropFirst().reversed()\
    \ {\n        if col == x {\n            break\n        }\n    }\n    for row in\
    \ lst.first!.dropFirst() {\n        if row == x {\n            break\n       \
    \ }\n    }\n    for col in lst.first!.dropFirst().reversed() {\n        if col\
    \ == x {\n            break\n        }\n    }\n    for row in lst.first!.dropFirst()\
    \ {\n        if row == x {\n            break\n        }\n    }\n    for col in\
    \ lst.first!.dropFirst().reversed() {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst.first!.dropFirst() {\n        if row ==\
    \ x {\n            break\n        }\n    }\n    for col in lst.first!.dropFirst().reversed()\
    \ {\n        if col == x {\n            break\n        }\n    }\n    for row in\
    \ lst.first!.dropFirst() {\n        if row == x {\n            break\n       \
    \ }\n    }\n    for col in lst.first!.dropFirst().reversed() {\n        if col\
    \ == x {\n            break\n        }\n    }\n    for row in lst.first!.dropFirst()\
    \ {\n        if row == x {\n            break\n        }\n    }\n    for col in\
    \ lst.first!.dropFirst().reversed() {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst.first!.dropFirst() {\n        if row ==\
    \ x {\n            break\n        }\n    }\n    for col in lst.first!.dropFirst().reversed()\
    \ {\n        if col == x {\n            break\n        }\n    }\n    for row in\
    \ lst.first!.dropFirst() {\n        if row == x {\n            break\n       \
    \ }\n    }\n    for col in lst.first!.dropFirst().reversed() {\n        if col\
    \ == x {\n            break\n        }\n    }\n    for row in lst.first!.dropFirst()\
    \ {", "    var result = [(Int, Int)]()\n    for row in lst {\n        for (i,\
    \ v) in row.enumerated() {\n            if v == x {\n                result.append(\
    \ (i, row.count) )\n            }\n        }\n    }\n    result.sortInPlace()\n\
    \    result.sortInPlace{ $0.1 < $1.1 }\n    return result", "    var result =\
    \ [(Int, Int)]()\n    var row = 0\n    var col = 0\n    for row in lst {\n   \
    \     if row == x {\n            break\n        }\n    }\n    for col in lst[row].reversed()\
    \ {\n        if col == x {\n            break\n        }\n    }\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n    }\n    for col\
    \ in lst[row].reversed() {\n        if col == x {\n            break\n       \
    \ }\n    }\n    for row in lst {\n        if row == x {\n            break\n \
    \       }\n    }\n    for col in lst[row].reversed() {\n        if col == x {\n\
    \            break\n        }\n    }\n    for row in lst {\n        if row ==\
    \ x {\n            break\n        }\n    }\n    for col in lst[row].reversed()\
    \ {\n        if col == x {\n            break\n        }\n    }\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n    }\n    for col\
    \ in lst[row].reversed() {\n        if col == x {\n            break\n       \
    \ }\n    }\n    for row in lst {\n        if row == x {\n            break\n \
    \       }\n    }\n    for col in lst[row].reversed() {\n        if col == x {\n\
    \            break\n        }\n    }\n    for row in lst {\n        if row ==\
    \ x {\n            break\n        }\n    }\n    for col in lst[row].reversed()\
    \ {\n        if col == x {\n            break\n        }\n    }\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n    }\n    for col\
    \ in lst[row].reversed() {\n        if col == x {\n            break\n       \
    \ }\n    }\n    for row in lst {\n        if row == x {\n            break\n \
    \       }\n    }\n    for col in lst[row].reversed() {\n        if col == x {\n\
    \            break\n        }\n    }\n    for row in lst {\n        if row ==\
    \ x {\n            break\n        }\n    }\n    for col in lst[row].reversed()\
    \ {\n        if col == x {\n            break\n        }\n    }\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n    }\n    for col\
    \ in lst[row].reversed() {\n        if col == x {\n            break\n       \
    \ }\n    }\n    for row in lst {\n        if row == x {\n            break\n \
    \       }\n    }\n    for col in lst[row].reversed() {\n        if col == x {\n\
    \            break\n        }\n    }\n    for row in lst {\n        if row ==\
    \ x {\n            break\n        }\n    }\n    for col in lst[row].reversed()\
    \ {\n        if col == x {\n            break\n        }\n    }\n    for ", " \
    \   var rows = [[(Int, Int)]]()\n    for row in lst {\n        var rowCoords =\
    \ [(Int, Int)]()\n        for col in row {\n            if col == x {\n      \
    \          rowCoords.append((row, col))\n            }\n        }\n        rows.append(rowCoords)\n\
    \    }\n    rows.sortInPlaceByColumn(0)\n    rows.sortInPlaceByColumn(1)\n   \
    \ return rows", "    var row = [Int]()\n    var column = [Int]()\n    var result\
    \ = [(Int, Int)]()\n    for row in lst {\n        column = [Int]()\n        for\
    \ column in row {\n            if column == x {\n                result.append((column,\
    \ row))\n            }\n        }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder(by:\
    \ {$0.0 < $1.0})\n    return result", "    if lst.isEmpty() {\n        return\
    \ []\n    }\n    var result = [(Int, Int)]()\n    var row = 0\n    var col = 0\n\
    \    for row in lst {\n        if row == x {\n            break\n        }\n \
    \   }\n    for col in row {\n        if col == x {\n            break\n      \
    \  }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n        for col in row {\n            if col == x {\n            \
    \    break\n            }\n        }\n    }\n    for row in lst {\n        if\
    \ row == x {\n            break\n        }\n        for col in row {\n       \
    \     if col == x {\n                break\n            }\n        }\n    }\n\
    \    for row in lst {\n        if row == x {\n            break\n        }\n \
    \       for col in row {\n            if col == x {\n                break\n \
    \           }\n        }\n    }\n    for row in lst {\n        if row == x {\n\
    \            break\n        }\n        for col in row {\n            if col ==\
    \ x {\n                break\n            }\n        }\n    }\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n        for col\
    \ in row {\n            if col == x {\n                break\n            }\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n        for col in row {\n            if col == x {\n            \
    \    break\n            }\n        }\n    }\n    for row in lst {\n        if\
    \ row == x {\n            break\n        }\n        for col in row {\n       \
    \     if col == x {\n                break\n            }\n        }\n    }\n\
    \    for row in lst {\n        if row == x {\n            break\n        }\n \
    \       for col in row {\n            if col == x {\n                break\n \
    \           }\n        }\n    }\n    for row in lst {\n        if row == x {\n\
    \            break\n        }\n        for col in row {\n            if col ==\
    \ x {\n                break\n            }\n        }\n    }\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n        for col\
    \ in row {\n            if col == x {\n                break\n            }\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n        for col in row {\n            if col == x {\n            \
    \    break\n            }\n        }\n    }\n    for row in lst {\n        if\
    \ row == x {\n            break\n        }\n        for col in row {\n       \
    \     if col == x {\n                break\n            }\n        }\n    }\n\
    \    for row in lst {\n        if row == x {\n            break\n        }\n \
    \       for col in row {\n            if col == x {\n                break\n \
    \           }", "    if lst.isEmpty() {\n        return []\n    }\n    var row\
    \ = [Int]()\n    var col = [Int]()\n    var result = [(Int, Int)]()\n    var i\
    \ = 0\n    var j = 0\n    for row in lst {\n        if i == x {\n            result.append((i,\
    \ j))\n        }\n        if i == 0 {\n            i = row.count\n        }\n\
    \        if j == row.count {\n            j = row.count\n        }\n        if\
    \ j == 0 {\n            j = row.count\n        }\n        i += 1\n        j +=\
    \ 1\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder(&col)\n\
    \    return result", "    var coords = [(Int, Int)]()\n    for row in lst {\n\
    \        var rowCoords = [(Int, Int)]()\n        for col in row {\n          \
    \  if col == x {\n                rowCoords.append((col, row))\n            }\n\
    \        }\n        coords.append(rowCoords)\n    }\n    coords.sortInPlaceByKey(ascending:\
    \ true, by: { (row1, row2) in\n        return row2.0 < row1.0\n    })\n    coords.sortInPlaceByKey(ascending:\
    \ false, by: { (row1, row2) in\n        return row2.0 < row1.0\n    })\n    return\
    \ coords", "    var result = [(Int, Int)]()\n    for row in lst {\n        for\
    \ (i, v) in row.enumerated() {\n            if v == x {\n                result.append((i,\
    \ row.count()))\n                break\n            }\n        }\n    }\n    result.sortInPlaceByKey(ascending:\
    \ true)\n    result.sortInPlaceByKey(ascending: false)\n    return result", " \
    \   if lst.isEmpty() {\n        return []\n    }\n    var row = [Int]()\n    var\
    \ col = [Int]()\n    var result = [(0, 0), (lst.count(), 0)]\n    for row in lst\
    \ {\n        for col in row {\n            if col == x {\n                result.append((row,\
    \ col))\n            }\n        }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder(1)\n\
    \    return result", "    var result = [(Int, Int)]()\n    var row = 0\n    var\
    \ col = 0\n    for row in lst {\n        if row == x {\n            break\n  \
    \      }\n    }\n    for col in row.reverse() {\n        if col == x {\n     \
    \       break\n        }\n    }\n    for row in lst {\n        if row == x {\n\
    \            break\n        }\n    }\n    for col in row.reverse() {\n       \
    \ if col == x {\n            break\n        }\n    }\n    for row in lst {\n \
    \       if row == x {\n            break\n        }\n    }\n    for col in row.reverse()\
    \ {\n        if col == x {\n            break\n        }\n    }\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n    }\n    for col\
    \ in row.reverse() {\n        if col == x {\n            break\n        }\n  \
    \  }\n    for row in lst {\n        if row == x {\n            break\n       \
    \ }\n    }\n    for col in row.reverse() {\n        if col == x {\n          \
    \  break\n        }\n    }\n    for row in lst {\n        if row == x {\n    \
    \        break\n        }\n    }\n    for col in row.reverse() {\n        if col\
    \ == x {\n            break\n        }\n    }\n    for row in lst {\n        if\
    \ row == x {\n            break\n        }\n    }\n    for col in row.reverse()\
    \ {\n        if col == x {\n            break\n        }\n    }\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n    }\n    for col\
    \ in row.reverse() {\n        if col == x {\n            break\n        }\n  \
    \  }\n    for row in lst {\n        if row == x {\n            break\n       \
    \ }\n    }\n    for col in row.reverse() {\n        if col == x {\n          \
    \  break\n        }\n    }\n    for row in lst {\n        if row == x {\n    \
    \        break\n        }\n    }\n    for col in row.reverse() {\n        if col\
    \ == x {\n            break\n        }\n    }\n    for row in lst {\n        if\
    \ row == x {\n            break\n        }\n    }\n    for col in row.reverse()\
    \ {\n        if col == x {\n            break\n        }\n    }\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n    }\n    for col\
    \ in row.reverse() {\n        if col == x {\n            break\n        }\n  \
    \  }\n    for row in lst {\n        if row == x {\n            break\n       \
    \ }\n    }\n    for col in row.reverse() {\n        if col == x {\n          \
    \  break\n        }\n    }\n    for row in lst {\n        if row == x {\n    \
    \        break\n        }\n    }\n    for col in row.reverse() {\n        if col\
    \ == ", "    var result = [(Int, Int)]()\n    var row = 0\n    var col = 0\n \
    \   for row in lst {\n        if row == x {\n            break\n        }\n  \
    \  }\n    for col in row.reverse() {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row.reverse() {\n        if col == x {\n   \
    \         break\n        }\n    }\n    for row in lst {\n        if row == x {\n\
    \            break\n        }\n    }\n    for col in row.reverse() {\n       \
    \ if col == x {\n            break\n        }\n    }\n    for row in lst {\n \
    \       if row == x {\n            break\n        }\n    }\n    for col in row.reverse()\
    \ {\n        if col == x {\n            break\n        }\n    }\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n    }\n    for col\
    \ in row.reverse() {\n        if col == x {\n            break\n        }\n  \
    \  }\n    for row in lst {\n        if row == x {\n            break\n       \
    \ }\n    }\n    for col in row.reverse() {\n        if col == x {\n          \
    \  break\n        }\n    }\n    for row in lst {\n        if row == x {\n    \
    \        break\n        }\n    }\n    for col in row.reverse() {\n        if col\
    \ == x {\n            break\n        }\n    }\n    for row in lst {\n        if\
    \ row == x {\n            break\n        }\n    }\n    for col in row.reverse()\
    \ {\n        if col == x {\n            break\n        }\n    }\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n    }\n    for col\
    \ in row.reverse() {\n        if col == x {\n            break\n        }\n  \
    \  }\n    for row in lst {\n        if row == x {\n            break\n       \
    \ }\n    }\n    for col in row.reverse() {\n        if col == x {\n          \
    \  break\n        }\n    }\n    for row in lst {\n        if row == x {\n    \
    \        break\n        }\n    }\n    for col in row.reverse() {\n        if col\
    \ == x {\n            break\n        }\n    }\n    for row in lst {\n        if\
    \ row == x {\n            break\n        }\n    }\n    for col in row.reverse()\
    \ {\n        if col == x {\n            break\n        }\n    }\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n    }\n    for col\
    \ in row.reverse() {\n        if col == x {\n            break\n        }\n  \
    \  }\n    for row in lst {\n        if row == x {\n            break\n       \
    \ }\n    }\n    for col in row.reverse() {\n        if col == ", "    var result\
    \ = [(Int, Int)]()\n    var row = 0\n    var col = 0\n    for row in lst {\n \
    \       for col in row {\n            if col == x {\n                result.append(\
    \ (row, col) )\n            }\n        }\n    }\n    result.sortInPlace()\n  \
    \  result.sortInPlaceInDescendingOrder(by: { (row1, row2) in\n        return row2.0\
    \ < row1.0\n    })\n    return result", "    var result = [(Int, Int)]()\n   \
    \ var row = 0\n    var col = 0\n    for row in lst {\n        if row == x {\n\
    \            break\n        }\n    }\n    for col in row.reverse() {\n       \
    \ if col == x {\n            break\n        }\n    }\n    for row in lst {\n \
    \       if row == x {\n            break\n        }\n    }\n    for col in row.reverse()\
    \ {\n        if col == x {\n            break\n        }\n    }\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n    }\n    for col\
    \ in row.reverse() {\n        if col == x {\n            break\n        }\n  \
    \  }\n    for row in lst {\n        if row == x {\n            break\n       \
    \ }\n    }\n    for col in row.reverse() {\n        if col == x {\n          \
    \  break\n        }\n    }\n    for row in lst {\n        if row == x {\n    \
    \        break\n        }\n    }\n    for col in row.reverse() {\n        if col\
    \ == x {\n            break\n        }\n    }\n    for row in lst {\n        if\
    \ row == x {\n            break\n        }\n    }\n    for col in row.reverse()\
    \ {\n        if col == x {\n            break\n        }\n    }\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n    }\n    for col\
    \ in row.reverse() {\n        if col == x {\n            break\n        }\n  \
    \  }\n    for row in lst {\n        if row == x {\n            break\n       \
    \ }\n    }\n    for col in row.reverse() {\n        if col == x {\n          \
    \  break\n        }\n    }\n    for row in lst {\n        if row == x {\n    \
    \        break\n        }\n    }\n    for col in row.reverse() {\n        if col\
    \ == x {\n            break\n        }\n    }\n    for row in lst {\n        if\
    \ row == x {\n            break\n        }\n    }\n    for col in row.reverse()\
    \ {\n        if col == x {\n            break\n        }\n    }\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n    }\n    for col\
    \ in row.reverse() {\n        if col == x {\n            break\n        }\n  \
    \  }\n    for row in lst {\n        if row == x {\n            break\n       \
    \ }\n    }\n    for col in row.reverse() {\n        if col == x {\n          \
    \  break\n        }\n    }\n    for row in lst {\n        if row == x {\n    \
    \        break\n        }\n    }\n    for col in row.reverse() {\n        if col\
    \ == x {\n            break\n        }\n    }\n    for row in lst {\n        if\
    \ row == x {\n            break\n        }\n    }\n    for col in row.reverse()\
    \ {\n        if col == ", "    var rows = [[(Int, Int)]]()\n    var row = [Int]()\n\
    \    var cols = [Int]()\n    var col = [Int]()\n    var i = 0\n    for row in\
    \ lst {\n        cols = row\n        cols = cols.sorted()\n        for col in\
    \ cols {\n            if col == x {\n                rows.append((i, col))\n \
    \           }\n        }\n        i += 1\n    }\n    return rows", "    var row\
    \ = [Int]()\n    var col = [Int]()\n    var result = [Int]()\n    var row_index\
    \ = 0\n    var col_index = 0\n    for row in lst {\n        col_index = 0\n  \
    \      for col in row {\n            if col == x {\n                result.append((row_index,\
    \ col_index))\n            }\n            col_index += 1\n        }\n        row_index\
    \ += 1\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder({\
    \ $0.0 < $1.0 })\n    return result", "    var rows = [[(Int, Int)]]()\n    var\
    \ row = [Int]()\n    var cols = [Int]()\n    var col = [Int]()\n    var i = 0\n\
    \    for row in lst {\n        cols = row\n        cols = cols.sorted()\n    \
    \    for col in cols {\n            if col == x {\n                rows.append((i,\
    \ col))\n            }\n        }\n        i += 1\n    }\n    return rows", " \
    \   var result = [(Int, Int)]()\n    var row = 0\n    var col = 0\n    for row\
    \ in lst {\n        if row == x {\n            break\n        }\n    }\n    for\
    \ col in row.reverse() {\n        if col == x {\n            break\n        }\n\
    \    }\n    for row in lst {\n        if row == x {\n            break\n     \
    \   }\n    }\n    for col in row.reverse() {\n        if col == x {\n        \
    \    break\n        }\n    }\n    for row in lst {\n        if row == x {\n  \
    \          break\n        }\n    }\n    for col in row.reverse() {\n        if\
    \ col == x {\n            break\n        }\n    }\n    for row in lst {\n    \
    \    if row == x {\n            break\n        }\n    }\n    for col in row.reverse()\
    \ {\n        if col == x {\n            break\n        }\n    }\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n    }\n    for col\
    \ in row.reverse() {\n        if col == x {\n            break\n        }\n  \
    \  }\n    for row in lst {\n        if row == x {\n            break\n       \
    \ }\n    }\n    for col in row.reverse() {\n        if col == x {\n          \
    \  break\n        }\n    }\n    for row in lst {\n        if row == x {\n    \
    \        break\n        }\n    }\n    for col in row.reverse() {\n        if col\
    \ == x {\n            break\n        }\n    }\n    for row in lst {\n        if\
    \ row == x {\n            break\n        }\n    }\n    for col in row.reverse()\
    \ {\n        if col == x {\n            break\n        }\n    }\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n    }\n    for col\
    \ in row.reverse() {\n        if col == x {\n            break\n        }\n  \
    \  }\n    for row in lst {\n        if row == x {\n            break\n       \
    \ }\n    }\n    for col in row.reverse() {\n        if col == x {\n          \
    \  break\n        }\n    }\n    for row in lst {\n        if row == x {\n    \
    \        break\n        }\n    }\n    for col in row.reverse() {\n        if col\
    \ == x {\n            break\n        }\n    }\n    for row in lst {\n        if\
    \ row == x {\n            break\n        }\n    }\n    for col in row.reverse()\
    \ {\n        if col == x {\n            break\n        }\n    }\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n    }\n    for col\
    \ in row.reverse() {\n        if col == x {\n            break\n        }\n  \
    \  }\n    for row in lst {\n        if row == x {\n            break\n       \
    \ }\n    }\n    for col in row.reverse() {\n        if col == ", "    var rows\
    \ = [Int]()\n    var cols = [Int]()\n    var result = [[(Int, Int)]]()\n    for\
    \ row in lst {\n        for col in row {\n            if col == x {\n        \
    \        rows.append(row)\n                cols.append(col)\n            }\n \
    \       }\n    }\n    for row in rows {\n        for col in cols {\n         \
    \   result.append((row, col))\n        }\n    }\n    result.sortInPlace()\n  \
    \  result.sortInPlaceInDescendingOrder()\n    return result", "    var result\
    \ = [(Int, Int)]()\n    for row in lst {\n        for column in row {\n      \
    \      if column == x {\n                result.append( (row, column) )\n    \
    \        }\n        }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder()\n\
    \    return result", "    var result = [(Int, Int)]()\n    var row = 0\n    var\
    \ col = 0\n    for row in lst {\n        var col = 0\n        for col in row {\n\
    \            if col == x {\n                result.append( (row, col) )\n    \
    \        }\n        }\n    }\n    result.sort(by: { (a, b) -> Bool in\n      \
    \  if a.0 < b.0 {\n            return true\n        }\n        return false\n\
    \    })\n    result.sort(by: { (a, b) -> Bool in\n        if a.1 < b.1 {\n   \
    \         return true\n        }\n        return false\n    })\n    return result",
  "    var result = [(Int, Int)]()\n    var row = 0\n    var col = 0\n    for row\
    \ in lst {\n        if row == x {\n            break\n        }\n    }\n    for\
    \ col in lst[row].reversed() {\n        if col == x {\n            break\n   \
    \     }\n    }\n    for row in lst {\n        if row == row {\n            for\
    \ col in lst[row].reversed() {\n                if col == col {\n            \
    \        result.append( (row, col) )\n                    break\n            \
    \    }\n            }\n        }\n    }\n    return result", "    var result =\
    \ [(Int, Int)]()\n    for row in lst {\n        for (i, v) in row.enumerated()\
    \ {\n            if v == x {\n                result.append((i, row.count))\n\
    \            }\n        }\n    }\n    result.sortInPlaceByKey(ascending: true)\n\
    \    result.sortInPlaceByKey(ascending: false)\n    return result", "    var result\
    \ = [(Int, Int)]()\n    for row in lst {\n        for (i, v) in row.enumerated()\
    \ {\n            if v == x {\n                result.append( (i, row.count) )\n\
    \            }\n        }\n    }\n    result.sortInPlace()\n    return result",
  "    var row = [Int]()\n    var column = [Int]()\n    var result = [(Int, Int)]()\n\
    \    for row in lst {\n        for column in row {\n            if column == x\
    \ {\n                result.append((row, column))\n            }\n        }\n\
    \    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder(by:\
    \ { (a, b) -> Bool in\n        return a.0 < b.0\n    })\n    return result", " \
    \   var result = [(Int, Int)]()\n    var row = 0\n    var col = 0\n    for row\
    \ in lst {\n        for col in row {\n            if col == x {\n            \
    \    result.append( (row, col) )\n            }\n        }\n    }\n    result.sort(by:\
    \ { (r1, r2) -> Bool in\n        let r1Row = r1.0\n        let r2Row = r2.0\n\
    \        if r1Row < r2Row {\n            return true\n        }\n        return\
    \ false\n    })\n    result.sort(by: { (r1, r2) -> Bool in\n        let r1Col\
    \ = r1.1\n        let r2Col = r2.1\n        if r1Col < r2Col {\n            return\
    \ true\n        }\n        return false\n    })\n    return result", "    if lst.isEmpty()\
    \ {\n        return []\n    }\n    var result = [(Int, Int)]()\n    var row =\
    \ 0\n    var column = 0\n    var rowMax = lst.count\n    var columnMax = lst[0].count\n\
    \    var rowMin = rowMax\n    var columnMin = columnMax\n    while row < rowMax\
    \ {\n        if lst[row][column] == x {\n            result.append((row, column))\n\
    \        }\n        column += 1\n        if column == columnMax {\n          \
    \  column = 0\n            column += 1\n        }\n        if column == columnMin\
    \ {\n            row += 1\n            column = 0\n            column += 1\n \
    \       }\n    }\n    result.sortInPlaceByRow()\n    result.sortInPlaceByColumn()\n\
    \    return result", "    var rows = [[(Int, Int)]]()\n    for row in lst {\n\
    \        var cols = [Int]()\n        for col in row {\n            if col == x\
    \ {\n                cols.append(col)\n            }\n        }\n        rows.append((0,\
    \ cols))\n    }\n    rows.sortInPlaceByRows()\n    return rows.reverseInPlaceByCols()",
  "    var row = [Int]()\n    var col = [Int]()\n    var result = [[(Int, Int)]]()\n\
    \    for row in lst {\n        for col in row {\n            if col == x {\n \
    \               result.append([(row, col)])\n            }\n        }\n    }\n\
    \    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder(by: {$0.1 <\
    \ $1.1})\n    return result", "    var row = [Int]()\n    var col = [Int]()\n\
    \    var result = [(Int, Int)]()\n    for row in lst {\n        for col in row\
    \ {\n            if col == x {\n                result.append( (row, col) )\n\
    \            }\n        }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder({\
    \ $0.0 < $1.0 })\n    return result", "    var row = [Int]()\n    var column =\
    \ [Int]()\n    var result = [(Int, Int)]()\n    for row in lst {\n        for\
    \ column in row {\n            if column == x {\n                result.append((row,\
    \ column))\n            }\n        }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder()\n\
    \    return result", "    var rows = [[(Int, Int)]]()\n    var row = [Int]()\n\
    \    var cols = [Int]()\n    var col = [Int]()\n    var i = 0\n    for row in\
    \ lst {\n        cols = row\n        cols = cols.sorted()\n        for col in\
    \ cols {\n            if col == x {\n                rows.append((i, col))\n \
    \           }\n        }\n        i += 1\n    }\n    return rows", "    if lst.isEmpty()\
    \ {\n        return []\n    }\n    var row = [Int]()\n    var col = [Int]()\n\
    \    var result = [(Int, Int)]()\n    var rowIndex = 0\n    var colIndex = 0\n\
    \    for row in lst {\n        if rowIndex == x {\n            result.append((rowIndex,\
    \ colIndex))\n        }\n        rowIndex++\n    }\n    result.sortInPlace()\n\
    \    for row in lst {\n        row.sortInPlace()\n        for col in row {\n \
    \           if colIndex == x {\n                result.append((rowIndex, colIndex))\n\
    \            }\n            colIndex++\n        }\n    }\n    return result",
  "    var result = [(Int, Int)]()\n    var row = 0\n    var col = 0\n    for row\
    \ in lst {\n        if row == x {\n            break\n        }\n    }\n    for\
    \ col in row.reverse() {\n        if col == x {\n            break\n        }\n\
    \    }\n    for row in lst {\n        if row == x {\n            break\n     \
    \   }\n    }\n    for col in row.reverse() {\n        if col == x {\n        \
    \    break\n        }\n    }\n    for row in lst {\n        if row == x {\n  \
    \          break\n        }\n    }\n    for col in row.reverse() {\n        if\
    \ col == x {\n            break\n        }\n    }\n    for row in lst {\n    \
    \    if row == x {\n            break\n        }\n    }\n    for col in row.reverse()\
    \ {\n        if col == x {\n            break\n        }\n    }\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n    }\n    for col\
    \ in row.reverse() {\n        if col == x {\n            break\n        }\n  \
    \  }\n    for row in lst {\n        if row == x {\n            break\n       \
    \ }\n    }\n    for col in row.reverse() {\n        if col == x {\n          \
    \  break\n        }\n    }\n    for row in lst {\n        if row == x {\n    \
    \        break\n        }\n    }\n    for col in row.reverse() {\n        if col\
    \ == x {\n            break\n        }\n    }\n    for row in lst {\n        if\
    \ row == x {\n            break\n        }\n    }\n    for col in row.reverse()\
    \ {\n        if col == x {\n            break\n        }\n    }\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n    }\n    for col\
    \ in row.reverse() {\n        if col == x {\n            break\n        }\n  \
    \  }\n    for row in lst {\n        if row == x {\n            break\n       \
    \ }\n    }\n    for col in row.reverse() {\n        if col == x {\n          \
    \  break\n        }\n    }\n    for row in lst {\n        if row == x {\n    \
    \        break\n        }\n    }\n    for col in row.reverse() {\n        if col\
    \ == x {\n            break\n        }\n    }\n    for row in lst {\n        if\
    \ row == x {\n            break\n        }\n    }\n    for col in row.reverse()\
    \ {\n        if col == x {\n            break\n        }\n    }\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n    }\n    for col\
    \ in row.reverse() {\n        if col == x {\n            break\n        }\n  \
    \  }\n    for row in lst {\n        if row == x {\n            break\n       \
    \ }\n    }\n    for col in row.reverse() {\n        if col == ", "    var result\
    \ = [(Int, Int)]()\n    var row = 0\n    var col = 0\n    for row in lst {\n \
    \       if row == x {\n            break\n        }\n    }\n    for col in row\
    \ {\n        if col == x {\n            break\n        }\n    }\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n    }\n    for col\
    \ in row {\n        if col == x {\n            break\n        }\n    }\n    for\
    \ row in lst {\n        if row == x {\n            break\n        }\n    }\n \
    \   for col in row {\n        if col == x {\n            break\n        }\n  \
    \  }\n    for row in lst {\n        if row == x {\n            break\n       \
    \ }\n    }\n    for col in row {\n        if col == x {\n            break\n \
    \       }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {", "    if lst.isEmpty() {\n        return\
    \ []\n    }\n    var row = [Int]()\n    var rows = [Int]()\n    var cols = [Int]()\n\
    \    var coords = [Int]()\n    var coord = [Int]()\n    var i = 0\n    var j =\
    \ 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n\
    \    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n \
    \   var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n  \
    \  var z = 0\n    var count = 0\n    var coords = [Int]()\n    var coord = [Int]()\n\
    \    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n \
    \   var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n  \
    \  var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n   \
    \ var x = 0\n    var y = 0\n    var z = 0\n    var count = 0\n    for row in lst\
    \ {\n        for col in row {\n            if col == x {\n                coords.append(j)\n\
    \                coord.append(k)\n                coords.append(k)\n         \
    \       coord.append(j)\n                coords.append(j)\n                coords.append(j)\n\
    \                coords.append(j)\n                coords.append(j)\n        \
    \        coords.append(j)\n                coords.append(j)\n                coords.append(j)\n\
    \                coords.append(j)\n                coords.append(j)\n        \
    \        coords.append(j)\n                coords.append(j)\n                coords.append(j)\n\
    \                coords.append(j)\n                coords.append(j)\n        \
    \        coords.append(j)\n                coords.append(j)\n                coords.append(j)\n\
    \                coords.append(j)\n                coords.append(j)\n        \
    \        coords.append(j)\n                coords.append(j)\n                coords.append(j)\n\
    \                coords.append(j)\n                coords.append(j)\n        \
    \        coords.append(j)\n                coords.append(j)\n                coords.append(j)\n\
    \                coords.append(j)\n                coords.append(j)\n        \
    \        coords.append(j)\n                coords.append(j)\n                coords.append(j)\n\
    \                coords.append(j)\n                coords.append(j)\n        \
    \        coords.append(j)\n                coords.append(j)\n                coords.append(j)\n\
    \                coords.append(j)\n                coords.append(j)\n        \
    \        coords.append(j)\n                coords.append(j)\n                coords.append(j)\n\
    \                coords.append(j)\n                coords.append(j)\n        \
    \        coords.append(j)\n                coords.append(j)\n                coords.append(j)\n\
    \                coords.append(j)\n                coords.append(j)\n        \
    \        coords.append(j)\n                coords.append(j)\n                coords.append(j)\n\
    \                coords.append(j)\n                coords.append(j)\n", "    var\
    \ rows = [[(Int, Int)]]()\n    var row = [Int]()\n    var cols = [Int]()\n   \
    \ var col = [Int]()\n    var row_index = 0\n    var col_index = 0\n    var i =\
    \ 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n\
    \    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n \
    \   var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n  \
    \  var y = 0\n    var z = 0\n    var count = 0\n    for (i = 0; i < lst.count;\
    \ i += 1) {\n        row = lst[i]\n        rows = append(rows, row)\n    }\n \
    \   for (i = 0; i < rows.count; i += 1) {\n        row = rows[i]\n        l =\
    \ row.count\n        for (j = 0; j < l; j += 1) {\n            col = row[j]\n\
    \            cols = append(cols, col)\n        }\n    }\n    for (i = 0; i < cols.count;\
    \ i += 1) {\n        col = cols[i]\n        l = col.count\n        for (j = 0;\
    \ j < l; j += 1) {\n            row = rows[row_index]\n            z = row[j]\n\
    \            if z == x {\n                count = count + 1\n            }\n \
    \       }\n    }\n    if count == 0 {\n        return []\n    }\n    for (i =\
    \ 0; i < rows.count; i += 1) {\n        row = rows[i]\n        l = row.count\n\
    \        for (j = 0; j < l; j += 1) {\n            col = row[j]\n            cols\
    \ = append(cols, col)\n        }\n    }\n    for (i = 0; i < cols.count; i +=\
    \ 1) {\n        col = cols[i]\n        l = col.count\n        for (j = 0; j <\
    \ l; j += 1) {\n            row = rows[row_index]\n            z = row[j]\n  \
    \          if z == x {\n                count = count + 1\n            }\n   \
    \     }\n    }\n    if count == 0 {\n        return []\n    }\n    for (i = 0;\
    \ i < rows.count; i += 1) {\n        row = rows[i]\n        l = row.count\n  \
    \      for (j = 0; j < l; j += 1) {\n            col = row[j]\n            cols\
    \ = append(cols, col)\n        }\n    }\n    for (i = 0; i < cols.count; i +=\
    \ 1) {\n        col = cols[i]\n        l = col.count\n        for (j = 0; j <\
    \ l; j += 1) {\n            row = rows[row_index]\n            z = row[j]\n  \
    \          if z == x {\n                count = count + 1\n            }\n   \
    \     }\n    }\n    if count == 0 {\n        return []\n    }\n    for (i = 0;\
    \ i < rows.count; i += 1) {\n        row = rows[i]\n        l = row.count\n  \
    \      for (j = 0; j < l; j += 1) {\n            col = row[j]\n            cols\
    \ = append(cols, col)\n        }\n    }\n    for (i = 0; i < cols.count; i +=\
    \ 1) {\n        col = cols[i]\n        l = col.count\n", "    var result = [(Int,\
    \ Int)]()\n    for row in lst {\n        for (i, v) in row.enumerated() {\n  \
    \          if v == x {\n                result.append( (i, row.count) )\n    \
    \        }\n        }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder()\n\
    \    return result", "    var row = [Int]()\n    var col = [Int]()\n    var result\
    \ = [(Int, Int)]()\n    var row_index = 0\n    var col_index = 0\n    for row\
    \ in lst {\n        col_index = col_index + row.count\n        if col_index ==\
    \ x {\n            result.append((row_index, col_index))\n        }\n    }\n \
    \   result.sortInPlace()\n    result.sortInPlaceInDescendingOrder()\n    return\
    \ result", "    var result = [(Int, Int)]()\n    for row in lst {\n        for\
    \ (i, v) in row.enumerated() {\n            if v == x {\n                result.append(\
    \ (i, row.count-1) )\n            }\n        }\n    }\n    result.sortInPlace()\n\
    \    result.sortInPlaceInDescendingOrder(by: { (a, b) -> Bool in\n        return\
    \ a.1 < b.1\n    })\n    return result", "    if lst.isEmpty() {\n        return\
    \ []\n    }\n    var row = [Int]()\n    var column = [Int]()\n    var rowIndex\
    \ = 0\n    var columnIndex = 0\n    var rowLength = 0\n    var columnLength =\
    \ 0\n    for row in lst {\n        rowLength = row.count\n        if rowIndex\
    \ == x {\n            break\n        }\n    }\n    for column in row {\n     \
    \   columnLength = column.count\n        if columnIndex == x {\n            break\n\
    \        }\n    }\n    var result = [(Int, Int)]()\n    for row in lst {\n   \
    \     var rowResult = [(Int, Int)]()\n        for column in row {\n          \
    \  if columnIndex == x {\n                rowResult.append((column, columnIndex))\n\
    \            }\n            columnIndex++\n        }\n        result.insert(rowResult,\
    \ at: rowIndex)\n        rowIndex++\n    }\n    result.sort(by: { (row1, row2)\
    \ in\n        return row1.0 < row2.0\n    })\n    result.sort(by: { (row1, row2)\
    \ in\n        return row1.1 < row2.0\n    })\n    return result", "    var result\
    \ = [(Int, Int)]()\n    var row = 0\n    var col = 0\n    for row in lst {\n \
    \       if row == x {\n            break\n        }\n    }\n    for row in lst\
    \ {\n        if row == x {\n            break\n        }\n        for col in row\
    \ {\n            if col == x {\n                break\n            }\n       \
    \ }\n        if col != x {\n            result.append((row, col))\n        }\n\
    \    }\n    result.sort(by: {$0.0 < $1.0})\n    result.sort(by: {$1.0 > $0.0})\n\
    \    return result", "    var result = [(Int, Int)]()\n    for row in lst {\n\
    \        var rowResult = [(Int, Int)]()\n        for column in row {\n       \
    \     if column == x {\n                rowResult.append((column, row))\n    \
    \        }\n        }\n        result = rowResult.sorted(by: { $0.0 < $1.0 }).sorted(by:\
    \ { $0.1 < $1.1 })\n    }\n    return result", "    if lst.isEmpty() {\n     \
    \   return []\n    }\n    var result = [(Int, Int)]()\n    var row = 0\n    var\
    \ col = 0\n    var rowMax = lst.count\n    var colMax = lst[0].count\n    for\
    \ row in 0..<rowMax {\n        var col = 0\n        for col in 0..<colMax {\n\
    \            if lst[row][col] == x {\n                result.append( (row, col)\
    \ )\n            }\n        }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder(by:\
    \ { (a, b) -> Bool in\n        return a.0 < b.0\n    })\n    return result", " \
    \   var row = [Int]()\n    var col = [Int]()\n    var result = [[(Int, Int)]]()\n\
    \    for row in lst {\n        for col in row {\n            if col == x {\n \
    \               result.append([(row, col)])\n            }\n        }\n    }\n\
    \    result.sort(by: {$0.0 < $1.0})\n    result.sort(by: {$1.0 > $0.0})\n    return\
    \ result", "    var rows = [[(Int, Int)]]()\n    var row = [Int]()\n    var columns\
    \ = [Int]()\n    var column = 0\n    for row in lst {\n        columns.append(column)\n\
    \        if column == x {\n            rows.append(row)\n        }\n        column\
    \ = 0\n    }\n    rows.sort(byRow)\n    rows.sort(byColumn)\n    return rows",
  "    if lst.isEmpty() {\n        return []\n    }\n    var row = [Int]()\n    var\
    \ col = [Int]()\n    var rows = [Int]()\n    var cols = [Int]()\n    var rowI\
    \ = 0\n    var colI = 0\n    var rowI2 = -1\n    var colI2 = -1\n    var rowI3\
    \ = -1\n    var colI3 = -1\n    var rowI4 = -1\n    var colI4 = -1\n    var rowI5\
    \ = -1\n    var colI5 = -1\n    var rowI6 = -1\n    var colI6 = -1\n    var rowI7\
    \ = -1\n    var colI7 = -1\n    var rowI8 = -1\n    var colI8 = -1\n    var rowI9\
    \ = -1\n    var colI9 = -1\n    var rowI10 = -1\n    var colI10 = -1\n    var\
    \ rowI11 = -1\n    var colI11 = -1\n    var rowI12 = -1\n    var colI12 = -1\n\
    \    var rowI13 = -1\n    var colI13 = -1\n    var rowI14 = -1\n    var colI14\
    \ = -1\n    var rowI15 = -1\n    var colI15 = -1\n    var rowI16 = -1\n    var\
    \ colI16 = -1\n    var rowI17 = -1\n    var colI17 = -1\n    var rowI18 = -1\n\
    \    var colI18 = -1\n    var rowI19 = -1\n    var colI19 = -1\n    var rowI20\
    \ = -1\n    var colI20 = -1\n    var rowI21 = -1\n    var colI21 = -1\n    var\
    \ rowI22 = -1\n    var colI22 = -1\n    var rowI23 = -1\n    var colI23 = -1\n\
    \    var rowI24 = -1\n    var colI24 = -1\n    var rowI25 = -1\n    var colI25\
    \ = -1\n    var rowI26 = -1\n    var colI26 = -1\n    var rowI27 = -1\n    var\
    \ colI27 = -1\n    var rowI28 = -1\n    var colI28 = -1\n    var rowI29 = -1\n\
    \    var colI29 = -1\n    var rowI30 = -1\n    var colI30 = -1\n    var rowI31\
    \ = -1\n    var colI31 = -1\n    var rowI32 = -1\n    var colI32 = -1\n    var\
    \ rowI33 = -1\n    var colI33 = -1\n    var rowI34 = -1\n    var colI34 = -1\n\
    \    var rowI35 = -1\n    var colI35 = -1\n    var rowI36 = -1\n    var colI36\
    \ = -1\n    var rowI37 = -1\n    var colI37 = -1\n    var rowI38 = -1\n    var\
    \ colI38 = -1\n    var rowI39 = -1\n    var colI39 = -1\n    var rowI40 = -1\n\
    \    var colI40", "    var result = [(Int, Int)]()\n    if lst.count == 0 {\n\
    \        return result\n    }\n    if lst.count != 1 {\n        return nil\n \
    \   }\n    var row = 0\n    var column = 0\n    for row in lst {\n        if row\
    \ == x {\n            break\n        }\n    }\n    for row in lst {\n        if\
    \ row == x {\n            break\n        }\n        for column in row {\n    \
    \        if column == x {\n                break\n            }\n        }\n \
    \       if column == x {\n            result.append((row, column))\n        }\n\
    \    }\n    return result", "    var result = [(Int, Int)]()\n    if lst.count\
    \ == 0 {\n        return result\n    }\n    var row = 0\n    var column = 0\n\
    \    for row in lst {\n        if row == x {\n            break\n        }\n \
    \   }\n    for row in lst {\n        if row == x {\n            break\n      \
    \  }\n        for column in row {\n            if column == x {\n            \
    \    break\n            }\n        }\n        if column == x {\n            result.append((row,\
    \ column))\n        }\n    }\n    return result", "    if lst.isEmpty() {\n  \
    \      return []\n    }\n    var rows = [[(Int, Int)]]()\n    var row = [Int]()\n\
    \    var cols = [Int]()\n    var col = [Int]()\n    var i = 0\n    for row in\
    \ lst {\n        cols = row\n        cols = cols.sorted()\n        for col in\
    \ cols {\n            if col == x {\n                rows.append((i, col))\n \
    \           }\n        }\n        i += 1\n    }\n    return rows.sorted()", " \
    \   var result = [(Int, Int)]()\n    var row = 0\n    var col = 0\n    for row\
    \ in lst {\n        if row == x {\n            break\n        }\n    }\n    for\
    \ col in row.reverse() {\n        if col == x {\n            break\n        }\n\
    \    }\n    for row in lst {\n        if row == x {\n            break\n     \
    \   }\n    }\n    for col in row.reverse() {\n        if col == x {\n        \
    \    break\n        }\n    }\n    for row in lst {\n        if row == x {\n  \
    \          break\n        }\n    }\n    for col in row.reverse() {\n        if\
    \ col == x {\n            break\n        }\n    }\n    for row in lst {\n    \
    \    if row == x {\n            break\n        }\n    }\n    for col in row.reverse()\
    \ {\n        if col == x {\n            break\n        }\n    }\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n    }\n    for col\
    \ in row.reverse() {\n        if col == x {\n            break\n        }\n  \
    \  }\n    for row in lst {\n        if row == x {\n            break\n       \
    \ }\n    }\n    for col in row.reverse() {\n        if col == x {\n          \
    \  break\n        }\n    }\n    for row in lst {\n        if row == x {\n    \
    \        break\n        }\n    }\n    for col in row.reverse() {\n        if col\
    \ == x {\n            break\n        }\n    }\n    for row in lst {\n        if\
    \ row == x {\n            break\n        }\n    }\n    for col in row.reverse()\
    \ {\n        if col == x {\n            break\n        }\n    }\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n    }\n    for col\
    \ in row.reverse() {\n        if col == x {\n            break\n        }\n  \
    \  }\n    for row in lst {\n        if row == x {\n            break\n       \
    \ }\n    }\n    for col in row.reverse() {\n        if col == x {\n          \
    \  break\n        }\n    }\n    for row in lst {\n        if row == x {\n    \
    \        break\n        }\n    }\n    for col in row.reverse() {\n        if col\
    \ == x {\n            break\n        }\n    }\n    for row in lst {\n        if\
    \ row == x {\n            break\n        }\n    }\n    for col in row.reverse()\
    \ {\n        if col == x {\n            break\n        }\n    }\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n    }\n    for col\
    \ in row.reverse() {\n        if col == x {\n            break\n        }\n  \
    \  }\n    for row in lst {\n        if row == x {\n            break\n       \
    \ }\n    }\n    for col in row.reverse() {\n        if col == ", "    if lst.isEmpty()\
    \ {\n        return []\n    }\n    var row = [Int]()\n    var col = [Int]()\n\
    \    var rowOrder = Int()\n    var colOrder = Int()\n    var result = [[(Int,\
    \ Int)]]()\n    for row in lst {\n        if rowOrder > x {\n            break\n\
    \        }\n        for col in row {\n            if colOrder > x {\n        \
    \        break\n            }\n            if col == x {\n                result.append([(row,\
    \ col)])\n            }\n        }\n    }\n    result.sort(by: { (r1, r2) -> Bool\
    \ in\n        if r1.0 < r2.0 {\n            return true\n        }\n        return\
    \ false\n    })\n    result.sort(by: { (r1, r2) -> Bool in\n        if r1.1 <\
    \ r2.1 {\n            return true\n        }\n        return false\n    })\n \
    \   return result", "    var result = [(Int, Int)]()\n    for row in lst {\n \
    \       var rowResult = [(Int, Int)]()\n        for col in row {\n           \
    \ if col == x {\n                rowResult.append((row, col))\n            }\n\
    \        }\n        result = result.sorted(by: { $0.0 < $1.0 }).append(rowResult).sorted(by:\
    \ { $0.1 < $1.1 })\n    }\n    return result", "    if lst.isEmpty() {\n     \
    \   return []\n    }\n    var result = [(Int, Int)]()\n    var row = 0\n    var\
    \ col = 0\n    var rowMax = lst.count\n    var colMax = lst[0].count\n    var\
    \ rowMin = rowMax\n    var colMin = colMax\n    for row in 0..<rowMax {\n    \
    \    for col in 0..<colMax {\n            if lst[row][col] == x {\n          \
    \      result.append( (row, col) )\n            }\n        }\n    }\n    result.sortInPlaceByKey(ascending:\
    \ true)\n    result.sortInPlaceByKey(ascending: false)\n    return result", " \
    \   var result = [(Int, Int)]()\n    for row in lst {\n        for (i, v) in row.enumerated()\
    \ {\n            if v == x {\n                result.append((i, v))\n        \
    \    }\n        }\n    }\n    result.sortInPlaceByKey(ascending: true, by: { $0.0\
    \ < $1.0 })\n    result.sortInPlaceByKey(ascending: false, by: { $0.1 < $1.0 })\n\
    \    return result", "    var row = [Int]()\n    var col = [Int]()\n    var result\
    \ = [(Int, Int)]()\n    for row in lst {\n        for col in row {\n         \
    \   if col == x {\n                result.append( (row, col) )\n            }\n\
    \        }\n    }\n    result.sort(by: { (row1, row2) in\n        return row1.0\
    \ < row2.0\n    })\n    result.sort(by: { (col1, col2) in\n        return col1.0\
    \ < col2.0\n    })\n    return result", "    var result = [(Int, Int)]()\n   \
    \ var row = 0\n    var col = 0\n    for row in lst {\n        if row == x {\n\
    \            break\n        }\n    }\n    for col in row {\n        if col ==\
    \ x {\n            break\n        }\n    }\n    for row in lst {\n        if row\
    \ == x {\n            break\n        }\n    }\n    for col in row {\n        if\
    \ col == x {\n            break\n        }\n    }\n    for row in lst {\n    \
    \    if row == x {\n            break\n        }\n    }\n    for col in row {\n\
    \        if col == x {\n            break\n        }\n    }\n    for row in lst\
    \ {\n        if row == x {\n            break\n        }\n    }\n    for col in\
    \ row {\n        if col == x {\n            break\n        }\n    }\n    for row\
    \ in lst {\n        if row == x {\n            break\n        }\n    }\n    for\
    \ col in row {\n        if col == x {\n            break\n        }\n    }\n \
    \   for row in lst {\n        if row == x {\n            break\n        }\n  \
    \  }\n    for col in row {\n        if col == x {\n            break\n       \
    \ }\n    }\n    for row in lst {\n        if row == x {\n            break\n \
    \       }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {", "    var row = [Int]()\n    var col\
    \ = [Int]()\n    var rows = [Int]()\n    var cols = [Int]()\n    var i = 0\n \
    \   var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n  \
    \  var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n   \
    \ var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var\
    \ y = 0\n    var z = 0\n    var count = 0\n    var result = [[(Int, Int)]]()\n\
    \    for row in lst {\n        i += 1\n        j += 1\n        k += 1\n      \
    \  l += 1\n        m += 1\n        n += 1\n        o += 1\n        p += 1\n  \
    \      q += 1\n        r += 1\n        s += 1\n        t += 1\n        u += 1\n\
    \        v += 1\n        w += 1\n        x += 1\n        y += 1\n        z +=\
    \ 1\n    }\n    for row in lst {\n        count += 1\n    }\n    for row in lst\
    \ {\n        for col in row {\n            if col == x {\n                rows.append(row)\n\
    \                cols.append(col)\n            }\n        }\n    }\n    for row\
    \ in rows {\n        for col in cols {\n            if col == x {\n          \
    \      result.append([(row, col)])\n            }\n        }\n    }\n    for row\
    \ in result {\n        for col in row {\n            if col == x {\n         \
    \       count += 1\n            }\n        }\n    }\n    for row in result {\n\
    \        for col in row {\n            if col == x {\n                rows.append(row)\n\
    \                cols.append(col)\n            }\n        }\n    }\n    for row\
    \ in rows {\n        for col in cols {\n            if col == x {\n          \
    \      result.append([(row, col)])\n            }\n        }\n    }\n    for row\
    \ in result {\n        for col in row {\n            if col == x {\n         \
    \       count += 1\n            }\n        }\n    }\n    for row in result {\n\
    \        for col in row {\n            if col == x {\n                rows.append(row)\n\
    \                cols.append(col)\n            }\n        }\n    }\n    for row\
    \ in rows {\n        for col in cols {\n            if col == x {\n          \
    \      result.append([(row, col)])\n            }\n        }\n    }\n    for row\
    \ in result {\n        for col in row {\n            if col == x {\n         \
    \       count += 1\n            }\n        }\n    }\n    for row in result {\n\
    \        for col in row {\n            if col == x {\n                rows.append(row)\n\
    \                cols.append(col)\n            }\n        }\n    }\n    for row\
    \ in rows {\n        for col in cols {\n            if col == x {\n          \
    \      result.append([(row, col", "    var rows = [[(Int, Int)]]()\n    var row\
    \ = [Int]()\n    var cols = [Int]()\n    var col = [Int]()\n    var i = 0\n  \
    \  for row in lst {\n        cols = row\n        cols = cols.sorted()\n      \
    \  for col in cols {\n            if col == x {\n                rows.append((i,\
    \ col))\n            }\n        }\n        i += 1\n    }\n    return rows", " \
    \   var result = [(Int, Int)]()\n    var row = 0\n    var col = 0\n    for row\
    \ in lst {\n        if row == x {\n            break\n        }\n    }\n    for\
    \ col in row.reverse() {\n        if col == x {\n            break\n        }\n\
    \    }\n    for row in lst {\n        if row == x {\n            break\n     \
    \   }\n    }\n    for col in row.reverse() {\n        if col == x {\n        \
    \    break\n        }\n    }\n    for row in lst {\n        if row == x {\n  \
    \          break\n        }\n    }\n    for col in row.reverse() {\n        if\
    \ col == x {\n            break\n        }\n    }\n    for row in lst {\n    \
    \    if row == x {\n            break\n        }\n    }\n    for col in row.reverse()\
    \ {\n        if col == x {\n            break\n        }\n    }\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n    }\n    for col\
    \ in row.reverse() {\n        if col == x {\n            break\n        }\n  \
    \  }\n    for row in lst {\n        if row == x {\n            break\n       \
    \ }\n    }\n    for col in row.reverse() {\n        if col == x {\n          \
    \  break\n        }\n    }\n    for row in lst {\n        if row == x {\n    \
    \        break\n        }\n    }\n    for col in row.reverse() {\n        if col\
    \ == x {\n            break\n        }\n    }\n    for row in lst {\n        if\
    \ row == x {\n            break\n        }\n    }\n    for col in row.reverse()\
    \ {\n        if col == x {\n            break\n        }\n    }\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n    }\n    for col\
    \ in row.reverse() {\n        if col == x {\n            break\n        }\n  \
    \  }\n    for row in lst {\n        if row == x {\n            break\n       \
    \ }\n    }\n    for col in row.reverse() {\n        if col == x {\n          \
    \  break\n        }\n    }\n    for row in lst {\n        if row == x {\n    \
    \        break\n        }\n    }\n    for col in row.reverse() {\n        if col\
    \ == x {\n            break\n        }\n    }\n    for row in lst {\n        if\
    \ row == x {\n            break\n        }\n    }\n    for col in row.reverse()\
    \ {\n        if col == x {\n            break\n        }\n    }\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n    }\n    for col\
    \ in row.reverse() {\n        if col == x {\n            break\n        }\n  \
    \  }\n    for row in lst {\n        if row == x {\n            break\n       \
    \ }\n    }\n    for col in row.reverse() {\n        if col == ", "    var result\
    \ = [(Int, Int)]()\n    var row = 0\n    var col = 0\n    for row in lst {\n \
    \       var col = 0\n        for col in row {\n            if col == x {\n   \
    \             result.append( (row, col) )\n            }\n        }\n    }\n \
    \   result.sort(by: { (r1, r2) -> Bool in\n        return r1.0 < r2.0\n    })\n\
    \    result.sort(by: { (r1, r2) -> Bool in\n        return r1.1 < r2.0\n    })\n\
    \    return result", "    if lst.isEmpty() {\n        return []\n    }\n    var\
    \ row = [Int]()\n    var col = [Int]()\n    var rows = [Int]()\n    var cols =\
    \ [Int]()\n    var i = 0\n    var j = 0\n    for row in lst {\n        cols =\
    \ row\n        cols = cols.sorted()\n        for col in cols {\n            if\
    \ col == x {\n                rows.append((i, col))\n            }\n        }\n\
    \    }\n    rows.sortInPlace()\n    var result = [Int]()\n    for row in rows\
    \ {\n        result.append((row[0], row[1]))\n    }\n    return result", "   \
    \ var result = [(Int, Int)]()\n    var row = 0\n    var col = 0\n    for row in\
    \ lst {\n        for col in row {\n            if col == x {\n               \
    \ result.append( (row, col) )\n            }\n        }\n    }\n    result.sortInPlace()\n\
    \    result.sortInPlaceInDescendingOrder()\n    return result", "    var result\
    \ = [(0, -1)]\n    for row in lst {\n        var rowResult = [(0, -1)]\n     \
    \   for (i, v) in row.enumerated() {\n            if v == x {\n              \
    \  rowResult.append((i, v))\n            }\n        }\n        result = result.union(rowResult)\n\
    \    }\n    return result.sorted { $0.0 < $1.0 }", "    if lst.isEmpty() {\n \
    \       return []\n    }\n    var result = [(Int, Int)]()\n    var row = 0\n \
    \   var col = 0\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in lst.first!.indices {\n        if col == x {\n\
    \            break\n        }\n    }\n    for row in lst {\n        if row ==\
    \ x {\n            break\n        }\n    }\n    for col in lst.first!.indices\
    \ {\n        if col == x {\n            break\n        }\n    }\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n    }\n    for col\
    \ in lst.first!.indices {\n        if col == x {\n            break\n        }\n\
    \    }\n    for row in lst {\n        if row == x {\n            break\n     \
    \   }\n    }\n    for col in lst.first!.indices {\n        if col == x {\n   \
    \         break\n        }\n    }\n    for row in lst {\n        if row == x {\n\
    \            break\n        }\n    }\n    for col in lst.first!.indices {\n  \
    \      if col == x {\n            break\n        }\n    }\n    for row in lst\
    \ {\n        if row == x {\n            break\n        }\n    }\n    for col in\
    \ lst.first!.indices {\n        if col == x {\n            break\n        }\n\
    \    }\n    for row in lst {\n        if row == x {\n            break\n     \
    \   }\n    }\n    for col in lst.first!.indices {\n        if col == x {\n   \
    \         break\n        }\n    }\n    for row in lst {\n        if row == x {\n\
    \            break\n        }\n    }\n    for col in lst.first!.indices {\n  \
    \      if col == x {\n            break\n        }\n    }\n    for row in lst\
    \ {\n        if row == x {\n            break\n        }\n    }\n    for col in\
    \ lst.first!.indices {\n        if col == x {\n            break\n        }\n\
    \    }\n    for row in lst {\n        if row == x {\n            break\n     \
    \   }\n    }\n    for col in lst.first!.indices {\n        if col == x {\n   \
    \         break\n        }\n    }\n    for row in lst {\n        if row == x {\n\
    \            break\n        }\n    }\n    for col in lst.first!.indices {\n  \
    \      if col == x {\n            break\n        }\n    }\n    for row in lst\
    \ {\n        if row == x {\n            break\n        }\n    }\n    for col in\
    \ lst.first!.indices {\n        if col == x {\n            break\n        }\n\
    \    }\n    for row in lst {", "    if lst.isEmpty() {\n        return []\n  \
    \  }\n    var row = [Int]()\n    var col = [Int]()\n    var rows = [Int]()\n \
    \   var cols = [Int]()\n    var i = 0\n    var j = 0\n    for row in lst {\n \
    \       for col in row {\n            if col == x {\n                rows.append(i)\n\
    \                cols.append(j)\n            }\n            j += 1\n        }\n\
    \        i += 1\n        j = 0\n    }\n    rows.sort()\n    cols.sort()\n    var\
    \ result = [(0, 0), (rows[0], cols[0])]\n    for row in rows {\n        result.append((row,\
    \ cols[row]))\n    }\n    return result", "    var row = [Int]()\n    var col\
    \ = [Int]()\n    var result = [[(Int, Int)]]()\n    for row in lst {\n       \
    \ for col in row {\n            if col == x {\n                result.append((col,\
    \ row))\n            }\n        }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder(by:\
    \ {$0.0 < $1.0})\n    return result", "    var row = [Int]()\n    var col = [Int]()\n\
    \    var result = [[(Int, Int)]]()\n    for row in lst {\n        if row.contains(x)\
    \ {\n            result.append((row, col))\n        }\n    }\n    result.sort(by:\
    \ { (r1, r2) in r1.0 < r2.0 })\n    result.sort(by: { (r1, r2) in r1.1 < r2.0\
    \ })\n    return result", "    var result = [(Int, Int)]()\n    var row = 0\n\
    \    var col = 0\n    for row in lst {\n        for col in row {\n           \
    \ if col == x {\n                result.append( (row, col) )\n            }\n\
    \        }\n    }\n    result.sortInPlaceByColumn(col)\n    return result", " \
    \   if lst.isEmpty() {\n        return []\n    }\n    var row = [Int]()\n    var\
    \ col = [Int]()\n    var result = [(Int, Int)]()\n    var rowIdx = 0\n    var\
    \ colIdx = 0\n    for row in lst {\n        colIdx = colIdx\n        for col in\
    \ row {\n            if col == x {\n                result.append( (rowIdx, colIdx)\
    \ )\n            }\n            colIdx += 1\n        }\n        rowIdx += 1\n\
    \    }\n    result.sort(by: { (r1, r2) -> Bool in\n        if r1.0 < r2.0 {\n\
    \            return true\n        }\n        return false\n    })\n    result.sort(by:\
    \ { (r1, r2) -> Bool in\n        if r1.1 < r2.1 {\n            return true\n \
    \       }\n        return false\n    })\n    return result", "    if lst.isEmpty()\
    \ {\n        return []\n    }\n    var row = [Int]()\n    var column = [Int]()\n\
    \    var result = [(Int, Int)]()\n    var rowIndex = 0\n    var columnIndex =\
    \ 0\n    var rowLength = lst.count\n    var columnLength = lst[0].count\n    for\
    \ row in lst {\n        if rowIndex == rowLength {\n            rowIndex = 0\n\
    \            columnIndex = 0\n        }\n        if columnIndex == columnLength\
    \ {\n            columnIndex = 0\n        }\n        if rowIndex == x {\n    \
    \        result.append((rowIndex, columnIndex))\n        }\n        rowIndex++\n\
    \        columnIndex++\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder(by:\
    \ {$0.0 < $1.0})\n    return result", "    if lst.isEmpty() {\n        return\
    \ []\n    }\n    var row = [Int]()\n    var col = [Int]()\n    var i = 0\n   \
    \ var j = 0\n    var rowLen = 0\n    var colLen = 0\n    for row in lst {\n  \
    \      rowLen = row.count\n        if rowLen > colLen {\n            j = colLen\n\
    \            colLen = rowLen\n        }\n        if i == x {\n            return\
    \ [(i, j)].sorted()\n        }\n        if j == x {\n            return [(i, j)].sorted().reversed()\n\
    \        }\n        if rowLen > colLen {\n            i += 1\n            j =\
    \ 0\n        }\n        if j == x {\n            j += 1\n        }\n    }\n  \
    \  return []", "    var rows = [[(Int, Int)]]()\n    var row = [Int]()\n    var\
    \ cols = [Int]()\n    var col = [Int]()\n    var i = 0\n    var j = 0\n    var\
    \ k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p\
    \ = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u =\
    \ 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n\
    \    var count = 0\n    var max = 0\n    var min = 0\n    var sum = 0\n    var\
    \ sum2 = 0\n    var sum3 = 0\n    var sum4 = 0\n    var sum5 = 0\n    var sum6\
    \ = 0\n    var sum7 = 0\n    var sum8 = 0\n    var sum9 = 0\n    var sum10 = 0\n\
    \    var sum11 = 0\n    var sum12 = 0\n    var sum13 = 0\n    var sum14 = 0\n\
    \    var sum15 = 0\n    var sum16 = 0\n    var sum17 = 0\n    var sum18 = 0\n\
    \    var sum19 = 0\n    var sum20 = 0\n    var sum21 = 0\n    var sum22 = 0\n\
    \    var sum23 = 0\n    var sum24 = 0\n    var sum25 = 0\n    var sum26 = 0\n\
    \    var sum27 = 0\n    var sum28 = 0\n    var sum29 = 0\n    var sum30 = 0\n\
    \    var sum31 = 0\n    var sum32 = 0\n    var sum33 = 0\n    var sum34 = 0\n\
    \    var sum35 = 0\n    var sum36 = 0\n    var sum37 = 0\n    var sum38 = 0\n\
    \    var sum39 = 0\n    var sum40 = 0\n    var sum41 = 0\n    var sum42 = 0\n\
    \    var sum43 = 0\n    var sum44 = 0\n    var sum45 = 0\n    var sum46 = 0\n\
    \    var sum47 = 0\n    var sum48 = 0\n    var sum49 = 0\n    var sum50 = 0\n\
    \    var sum51 = 0\n    var sum52 = 0\n    var sum53 = 0\n    var sum54 = 0\n\
    \    var sum55 = 0\n    var sum56 = 0\n    var sum57 = 0\n    var sum58 = 0\n\
    \    var sum59 = 0\n    var sum60 = 0\n    var sum61 = 0\n    var sum62 = 0\n\
    \    var sum63 = 0\n    var sum64 = 0\n    var sum65 = 0\n    var sum66 = 0\n\
    \    var sum67 = 0\n    var sum68 = 0\n    var sum69 = 0\n    var sum70 = 0\n\
    \    var sum71 = 0\n    var sum72 = 0\n    var sum73 = 0\n    var sum74 = 0\n\
    \    var sum75 = 0\n    var sum76 = 0\n    var sum77 = 0\n    var sum78 = 0\n\
    \    var sum79 = 0\n    var sum80 = 0\n", "    var rows = [[(Int, Int)]]()\n \
    \   for row in lst {\n        var cols = [Int]()\n        for col in row {\n \
    \           if col == x {\n                cols.append(col)\n            }\n \
    \       }\n        if cols.count > 0 {\n            rows.append((0, cols.reversed()))\n\
    \        }\n    }\n    return rows.sorted(by: { (r1, r2) -> Bool in\n        if\
    \ r1.1 < r2.1 {\n            return true\n        }\n        return false\n  \
    \  }).sorted(by: { (r1, r2) -> Bool in\n        if r1.1 < r2.1 {\n           \
    \ return false\n        }\n        return true\n    })", "    var result = [(Int,\
    \ Int)]()\n    for row in lst {\n        for (i, j) in row.enumerated() {\n  \
    \          if i == x {\n                result.append( (i, j) )\n            }\n\
    \        }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder(by:\
    \ { (a, b) -> Bool in\n        return a.0 < b.0\n    })\n    return result", " \
    \   var result = [(Int, Int)]()\n    var row = 0\n    var col = 0\n    for row\
    \ in lst {\n        col = 0\n        for col in row {\n            if col == x\
    \ {\n                result.append( (row, col) )\n            }\n        }\n \
    \   }\n    result.sort(by: { (r1, r2) -> Bool in\n        if r1.0 < r2.0 {\n \
    \           return true\n        }\n        return false\n    })\n    result.sort(by:\
    \ { (r1, r2) -> Bool in\n        if r1.1 < r2.1 {\n            return true\n \
    \       }\n        return false\n    })\n    return result", "    var row = [Int]()\n\
    \    var col = [Int]()\n    var result = [(Int, Int)]()\n    var rowIndex = 0\n\
    \    var colIndex = 0\n    for row in lst {\n        if rowIndex == x {\n    \
    \        result.append((rowIndex, colIndex))\n            rowIndex = 0\n     \
    \       colIndex = 0\n        }\n        colIndex += 1\n    }\n    result.append((rowIndex,\
    \ colIndex))\n    return result", "    var result = [(Int, Int)]()\n    for row\
    \ in lst {\n        for (i, v) in row.enumerated() {\n            if v == x {\n\
    \                result.append((i, v))\n            }\n        }\n    }\n    result.sortInPlaceByKey(ascending:\
    \ true, by: { $0.1 < $1.1 })\n    result.sortInPlaceByKey(ascending: false, by:\
    \ { $0.1 < $1.1 })\n    return result", "    var result = [(Int, Int)]()\n   \
    \ for row in lst {\n        for (i, v) in row.enumerated() {\n            if v\
    \ == x {\n                result.append( (i, row.count) )\n            }\n   \
    \     }\n    }\n    result.sortInPlaceByKey(ascending: true, by: { $0.1 > $1.1\
    \ })\n    result.sortInPlaceByKey(ascending: false, by: { $0.1 < $1.1 })\n   \
    \ return result", "    var result = [(Int, Int)]()\n    var row = 0\n    var col\
    \ = 0\n    for row in lst {\n        if row == x {\n            break\n      \
    \  }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {", "    var rows = [[(Int, Int)]]()\n \
    \   var row = [Int]()\n    var cols = [Int]()\n    var col = [Int]()\n    var\
    \ row_index = 0\n    var col_index = 0\n    var i = 0\n    for row in lst {\n\
    \        cols = row\n        cols = cols[0..<row.count]\n        for col in cols\
    \ {\n            if col == x {\n                rows.append([(row_index, col_index)])\n\
    \            }\n        }\n        col_index += 1\n    }\n    rows.sort(by: {$0.0\
    \ < $1.0})\n    for row in rows {\n        row.sort(by: {$0.1 < $1.1})\n    }\n\
    \    return rows", "    var rows = [Int]()\n    var cols = [Int]()\n    var coords\
    \ = [(0, 0)]\n    for row in lst {\n        if rows.contains(row[0]) {\n     \
    \       cols.append(row[0])\n            rows.remove(row[0])\n        } else {\n\
    \            rows.append(row[0])\n        }\n    }\n    for col in cols {\n  \
    \      coords.append((col, rows.indexOf(col)))\n    }\n    coords.sortInPlace()\n\
    \    var result = [(0, 0)]\n    for coord in coords {\n        result.append((coord.1,\
    \ coord.2))\n    }\n    return result", "    var rows = [Int]()\n    var cols\
    \ = [Int]()\n    var coords = [(0, 0)]\n    for row in lst {\n        cols = append(cols,\
    \ row[x])\n        if rows.contains(row[x]) {\n            coords = append(coords,\
    \ (x, rows.indexOf(row[x])))\n        }\n        rows = append(rows, row[x])\n\
    \    }\n    coords.sortInPlace()\n    coords.sortInPlaceInDescendingOrder()\n\
    \    return coords", "    if lst.isEmpty() {\n        return []\n    }\n    var\
    \ row = [Int]()\n    var rows = [Int]()\n    var cols = [Int]()\n    var coords\
    \ = [Int]()\n    var coord = Int()\n    var i = 0\n    var j = 0\n    var k =\
    \ 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n\
    \    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n \
    \   var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n  \
    \  var count = 0\n    var max = 0\n    var min = 0\n    var maxRow = 0\n    var\
    \ minRow = 0\n    var maxCol = 0\n    var minCol = 0\n    var maxRowIndex = 0\n\
    \    var minRowIndex = 0\n    var maxColIndex = 0\n    var minColIndex = 0\n \
    \   var maxRowIndex = 0\n    var minRowIndex = 0\n    var maxColIndex = 0\n  \
    \  var minColIndex = 0\n    var maxRowIndex = 0\n    var minRowIndex = 0\n   \
    \ var maxColIndex = 0\n    var minColIndex = 0\n    var maxRowIndex = 0\n    var\
    \ minRowIndex = 0\n    var maxColIndex = 0\n    var minColIndex = 0\n    var maxRowIndex\
    \ = 0\n    var minRowIndex = 0\n    var maxColIndex = 0\n    var minColIndex =\
    \ 0\n    var maxRowIndex = 0\n    var minRowIndex = 0\n    var maxColIndex = 0\n\
    \    var minColIndex = 0\n    var maxRowIndex = 0\n    var minRowIndex = 0\n \
    \   var maxColIndex = 0\n    var minColIndex = 0\n    var maxRowIndex = 0\n  \
    \  var minRowIndex = 0\n    var maxColIndex = 0\n    var minColIndex = 0\n   \
    \ var maxRowIndex = 0\n    var minRowIndex = 0\n    var maxColIndex = 0\n    var\
    \ minColIndex = 0\n    var maxRowIndex = 0\n    var minRowIndex = 0\n    var maxColIndex\
    \ = 0\n    var minColIndex = 0\n    var maxRowIndex = 0\n    var minRowIndex =\
    \ 0\n    var maxColIndex = 0\n    var minColIndex = 0\n    var maxRowIndex = 0\n\
    \    var minRowIndex = 0\n    var maxColIndex = 0\n    var minColIndex = 0\n \
    \   var maxRowIndex = 0\n    var minRowIndex = 0\n    var maxColIndex = 0\n  \
    \  var minColIndex = 0\n    var maxRowIndex = 0\n    var minRowIndex = 0\n   \
    \ var maxColIndex = 0\n    var minColIndex = 0\n    var maxRowIndex = 0\n    var\
    \ minRowIndex = 0\n    var maxColIndex = 0\n    var minColIndex = 0\n    var maxRowIndex\
    \ = 0\n    var ", "    var result = [(Int, Int)]()\n    var row = 0\n    var col\
    \ = 0\n    for row in lst {\n        if row == x {\n            break\n      \
    \  }\n    }\n    for col in lst[row].reversed() {\n        if col == x {\n   \
    \         break\n        }\n    }\n    for row in lst {\n        if row == row\
    \ {\n            continue\n        }\n        for col in lst[row].reversed() {\n\
    \            if col == col {\n                continue\n            }\n      \
    \      if col > col {\n                result.append((row, col))\n           \
    \ }\n        }\n    }\n    return result", "    var result = [(Int, Int)]()\n\
    \    for row in lst {\n        for column in row {\n            if column == x\
    \ {\n                result.append( (row, column) )\n            }\n        }\n\
    \    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder()\n\
    \    return result", "    var result = [(Int, Int)]()\n    for row in lst {\n\
    \        for column in row {\n            if column == x {\n                result.append(\
    \ (row, column) )\n            }\n        }\n    }\n    result.sortInPlace()\n\
    \    result.sortInPlaceInDescendingOrder(by: {$0.1 < $1.1})\n    return result",
  "    var rows = [[(Int, Int)]]()\n    var columns = [Int]()\n    var row = 0\n \
    \   var column = 0\n    for row in lst {\n        column = 0\n        for element\
    \ in row {\n            if element == x {\n                columns.append(column)\n\
    \            }\n            column += 1\n        }\n        rows.append((row,\
    \ columns))\n        columns.removeAll()\n    }\n    rows.sort(by: {$0.0 < $1.0})\n\
    \    rows.reverse()\n    return rows", "    var row = [Int]()\n    var col = [Int]()\n\
    \    var result = [(Int, Int)]()\n    for row in lst {\n        for col in row\
    \ {\n            if col == x {\n                result.append((row, col))\n  \
    \          }\n        }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder(by:\
    \ {$0.1 < $1.1})\n    return result", "    var result = [(Int, Int)]()\n    var\
    \ row = 0\n    var col = 0\n    for row in lst {\n        if row == x {\n    \
    \        break\n        }\n    }\n    for col in row.reverse() {\n        if col\
    \ == x {\n            break\n        }\n    }\n    for row in lst {\n        if\
    \ row == x {\n            break\n        }\n    }\n    for col in row.reverse()\
    \ {\n        if col == x {\n            break\n        }\n    }\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n    }\n    for col\
    \ in row.reverse() {\n        if col == x {\n            break\n        }\n  \
    \  }\n    for row in lst {\n        if row == x {\n            break\n       \
    \ }\n    }\n    for col in row.reverse() {\n        if col == x {\n          \
    \  break\n        }\n    }\n    for row in lst {\n        if row == x {\n    \
    \        break\n        }\n    }\n    for col in row.reverse() {\n        if col\
    \ == x {\n            break\n        }\n    }\n    for row in lst {\n        if\
    \ row == x {\n            break\n        }\n    }\n    for col in row.reverse()\
    \ {\n        if col == x {\n            break\n        }\n    }\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n    }\n    for col\
    \ in row.reverse() {\n        if col == x {\n            break\n        }\n  \
    \  }\n    for row in lst {\n        if row == x {\n            break\n       \
    \ }\n    }\n    for col in row.reverse() {\n        if col == x {\n          \
    \  break\n        }\n    }\n    for row in lst {\n        if row == x {\n    \
    \        break\n        }\n    }\n    for col in row.reverse() {\n        if col\
    \ == x {\n            break\n        }\n    }\n    for row in lst {\n        if\
    \ row == x {\n            break\n        }\n    }\n    for col in row.reverse()\
    \ {\n        if col == x {\n            break\n        }\n    }\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n    }\n    for col\
    \ in row.reverse() {\n        if col == x {\n            break\n        }\n  \
    \  }\n    for row in lst {\n        if row == x {\n            break\n       \
    \ }\n    }\n    for col in row.reverse() {\n        if col == x {\n          \
    \  break\n        }\n    }\n    for row in lst {\n        if row == x {\n    \
    \        break\n        }\n    }\n    for col in row.reverse() {\n        if col\
    \ == x {\n            break\n        }\n    }\n    for row in lst {\n        if\
    \ row == x {\n            break\n        }\n    }\n    for col in row.reverse()\
    \ {\n        if col == ", "    var rows = [[(Int, Int)]]()\n    var row = [Int]()\n\
    \    var columns = [Int]()\n    var column = [Int]()\n    var i = 0\n    for row\
    \ in lst {\n        columns.append(0)\n    }\n    for row in lst {\n        columns\
    \ = append(columns, row[i])\n    }\n    for row in lst {\n        columns = append(columns,\
    \ row[i])\n    }\n    for row in lst {\n        columns = append(columns, row[i])\n\
    \    }\n    for row in lst {\n        columns = append(columns, row[i])\n    }\n\
    \    for row in lst {\n        columns = append(columns, row[i])\n    }\n    for\
    \ row in lst {\n        columns = append(columns, row[i])\n    }\n    for row\
    \ in lst {\n        columns = append(columns, row[i])\n    }\n    for row in lst\
    \ {\n        columns = append(columns, row[i])\n    }\n    for row in lst {\n\
    \        columns = append(columns, row[i])\n    }\n    for row in lst {\n    \
    \    columns = append(columns, row[i])\n    }\n    for row in lst {\n        columns\
    \ = append(columns, row[i])\n    }\n    for row in lst {\n        columns = append(columns,\
    \ row[i])\n    }\n    for row in lst {\n        columns = append(columns, row[i])\n\
    \    }\n    for row in lst {\n        columns = append(columns, row[i])\n    }\n\
    \    for row in lst {\n        columns = append(columns, row[i])\n    }\n    for\
    \ row in lst {\n        columns = append(columns, row[i])\n    }\n    for row\
    \ in lst {\n        columns = append(columns, row[i])\n    }\n    for row in lst\
    \ {\n        columns = append(columns, row[i])\n    }\n    for row in lst {\n\
    \        columns = append(columns, row[i])\n    }\n    for row in lst {\n    \
    \    columns = append(columns, row[i])\n    }\n    for row in lst {\n        columns\
    \ = append(columns, row[i])\n    }\n    for row in lst {\n        columns = append(columns,\
    \ row[i])\n    }\n    for row in lst {\n        columns = append(columns, row[i])\n\
    \    }\n    for row in lst {\n        columns = append(columns, row[i])\n    }\n\
    \    for row in lst {\n        columns = append(columns, row[i])\n    }\n    for\
    \ row in lst {\n        columns = append(columns, row[i])\n    }\n    for row\
    \ in lst {\n        columns = append(columns, row[i])\n    }\n    for row in lst\
    \ {\n        columns = append(columns, row[i])\n    }\n    for row in lst {\n\
    \        columns = append(columns, row[i])\n    }\n    for row in lst {\n    \
    \    columns = append(columns, row[i])\n    }\n    for row in lst {\n        columns\
    \ = append(columns, row[i])\n    }\n", "    if lst.isEmpty() {\n        return\
    \ []\n    }\n    var row = [Int]()\n    var col = [Int]()\n    var result = [(Int,\
    \ Int)]()\n    var rowIdx = 0\n    var colIdx = 0\n    for row in lst {\n    \
    \    if rowIdx == x {\n            for col in row {\n                result.append((rowIdx,\
    \ colIdx))\n            }\n            break\n        }\n        colIdx += 1\n\
    \    }\n    return result", "    var row = [Int]()\n    var col = [Int]()\n  \
    \  var result = [(Int, Int)]()\n    for row in lst {\n        for col in row {\n\
    \            if col == x {\n                result.append((row, col))\n      \
    \      }\n        }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder({\
    \ $0.1 < $1.1 })\n    return result", "    var row = [Int]()\n    var col = [Int]()\n\
    \    var result = [(Int, Int)]()\n    for row in lst {\n        for col in row\
    \ {\n            if col == x {\n                result.append((row, col))\n  \
    \          }\n        }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder()\n\
    \    return result", "    var rows = [[(Int, Int)]]()\n    var cols = [Int]()\n\
    \    var row = 0\n    var col = 0\n    for row in lst {\n        cols = append(cols,\
    \ row[0])\n    }\n    for col in cols {\n        rows.append([(row, col)])\n \
    \   }\n    for row in rows {\n        if row[0] == x {\n            return rows\n\
    \        }\n    }\n    return []", "    var result = [(Int, Int)]()\n    var row\
    \ = 0\n    var col = 0\n    for row in lst {\n        if row == x {\n        \
    \    break\n        }\n    }\n    for col in row.reverse() {\n        if col ==\
    \ x {\n            break\n        }\n    }\n    for row in lst {\n        if row\
    \ == x {\n            break\n        }\n    }\n    for col in row.reverse() {\n\
    \        if col == x {\n            break\n        }\n    }\n    for row in lst\
    \ {\n        if row == x {\n            break\n        }\n    }\n    for col in\
    \ row.reverse() {\n        if col == x {\n            break\n        }\n    }\n\
    \    for row in lst {\n        if row == x {\n            break\n        }\n \
    \   }\n    for col in row.reverse() {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row.reverse() {\n        if col == x {\n   \
    \         break\n        }\n    }\n    for row in lst {\n        if row == x {\n\
    \            break\n        }\n    }\n    for col in row.reverse() {\n       \
    \ if col == x {\n            break\n        }\n    }\n    for row in lst {\n \
    \       if row == x {\n            break\n        }\n    }\n    for col in row.reverse()\
    \ {\n        if col == x {\n            break\n        }\n    }\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n    }\n    for col\
    \ in row.reverse() {\n        if col == x {\n            break\n        }\n  \
    \  }\n    for row in lst {\n        if row == x {\n            break\n       \
    \ }\n    }\n    for col in row.reverse() {\n        if col == x {\n          \
    \  break\n        }\n    }\n    for row in lst {\n        if row == x {\n    \
    \        break\n        }\n    }\n    for col in row.reverse() {\n        if col\
    \ == x {\n            break\n        }\n    }\n    for row in lst {\n        if\
    \ row == x {\n            break\n        }\n    }\n    for col in row.reverse()\
    \ {\n        if col == x {\n            break\n        }\n    }\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n    }\n    for col\
    \ in row.reverse() {\n        if col == x {\n            break\n        }\n  \
    \  }\n    for row in lst {\n        if row == x {\n            break\n       \
    \ }\n    }\n    for col in row.reverse() {\n        if col == x {\n          \
    \  break\n        }\n    }\n    for row in lst {\n        if row == x {\n    \
    \        break\n        }\n    }\n    for col in row.reverse() {\n        if col\
    \ == ", "    var result = [(Int, Int)]()\n    for row in lst {\n        for column\
    \ in row {\n            if column == x {\n                result.append( (row,\
    \ column) )\n            }\n        }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder(by:\
    \ { (row1, row2) in\n        return row1.1 < row2.1\n    })\n    return result",
  "    var row = [Int]()\n    var col = [Int]()\n    var result = [[(Int, Int)]]()\n\
    \    for row in lst {\n        for col in row {\n            if col == x {\n \
    \               result.append((row, col))\n            }\n        }\n    }\n \
    \   result.sort(by: { (r1, r2) -> Bool in\n        return r1.0 < r2\n    })\n\
    \    result.sort(by: { (r1, r2) -> Bool in\n        return r2.0 < r1\n    })\n\
    \    return result"]
stop_tokens:
- "\n}"
