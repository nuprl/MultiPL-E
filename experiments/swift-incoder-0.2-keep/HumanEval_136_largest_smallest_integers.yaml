name: HumanEval_136_largest_smallest_integers
language: swift
prompt: "\n/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
  \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
  \ in a list.\n/// If there is no negative or positive integers, return them as None.\n\
  /// Examples:\n/// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n\
  /// largest_smallest_integers([]) == (None, None)\n/// largest_smallest_integers([0])\
  \ == (None, None)\nfunc largest_smallest_integers(lst: [Int]) -> (Int?, Int?) {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(largest_smallest_integers(lst: [2, 4, 1,\
  \ 3, 5, 7]) == (nil, 1))\nassert(largest_smallest_integers(lst: [2, 4, 1, 3, 5,\
  \ 7, 0]) == (nil, 1))\nassert(largest_smallest_integers(lst: [1, 3, 2, 4, 5, 6,\
  \ -2]) == (-2, 1))\nassert(largest_smallest_integers(lst: [4, 5, 3, 6, 2, 7, -7])\
  \ == (-7, 2))\nassert(largest_smallest_integers(lst: [7, 3, 8, 4, 9, 2, 5, -9])\
  \ == (-9, 2))\nassert(largest_smallest_integers(lst: [] as [Int]) == (nil, nil))\n\
  assert(largest_smallest_integers(lst: [0]) == (nil, nil))\nassert(largest_smallest_integers(lst:\
  \ [-1, -3, -5, -6]) == (-1, nil))\nassert(largest_smallest_integers(lst: [-1, -3,\
  \ -5, -6, 0]) == (-1, nil))\nassert(largest_smallest_integers(lst: [-6, -4, -4,\
  \ -3, 1]) == (-3, 1))\nassert(largest_smallest_integers(lst: [-6, -4, -4, -3, -100,\
  \ 1]) == (-3, 1))"
completions: ["    var largest = Int?()\n    var smallest = Int?()\n    for num in\
    \ lst {\n        if num < 0 {\n            largest = num\n        } else {\n \
    \           smallest = num\n        }\n    }\n    return (largest, smallest)",
  "    if lst.isEmpty {\n        return (None, None)\n    }\n    var largest = Int?()\n\
    \    var smallest = Int?()\n    for v in lst {\n        if v < 0 {\n         \
    \   largest = v\n        } else {\n            smallest = v\n        }\n    }\n\
    \    return (largest, smallest)", "    var largest = Int?()\n    var smallest\
    \ = Int?()\n    for el in lst {\n        if el < 0 {\n            largest = el\n\
    \        } else {\n            smallest = el\n        }\n    }\n    return (largest,\
    \ smallest)", "    var largest = Int?()\n    var smallest = Int?()\n    for num\
    \ in lst {\n        if num < 0 {\n            largest = num\n        } else {\n\
    \            smallest = num\n        }\n    }\n    return (largest, smallest)",
  "    guard lst.count > 0 else {\n        return (nil, nil)\n    }\n    var largest\
    \ = Int?(0)\n    var smallest = Int?(0)\n    for value in lst {\n        if let\
    \ value = value {\n            if value < 0 {\n                largest = value\n\
    \            } else {\n                smallest = value\n            }\n     \
    \   }\n    }\n    return (largest, smallest)", "    var largest = Int?()\n   \
    \ var smallest = Int?()\n    for x in lst {\n        if x < 0 {\n            largest\
    \ = x\n        } else if x > 0 {\n            smallest = x\n        }\n    }\n\
    \    return (largest, smallest)", "    var largest = Int?()\n    var smallest\
    \ = Int?()\n    for num in lst {\n        if num < 0 {\n            largest =\
    \ num\n        } else {\n            smallest = num\n        }\n    }\n    return\
    \ (largest, smallest)", "    var largest = Int?()\n    var smallest = Int?()\n\
    \    for num in lst {\n        if num < 0 {\n            largest = num\n     \
    \   } else {\n            smallest = num\n        }\n    }\n    return (largest,\
    \ smallest)", "    var largest = Int?()\n    var smallest = Int?()\n    for number\
    \ in lst {\n        if number < 0 {\n            largest = number\n        } else\
    \ {\n            smallest = number\n        }\n    }\n    return (largest, smallest)",
  "    var largest = Int?()\n    var smallest = Int?()\n    for x in lst {\n     \
    \   if x < 0 {\n            largest = x\n        } else {\n            smallest\
    \ = x\n        }\n    }\n    return (largest, smallest)", "    if lst.isEmpty\
    \ {\n        return (None, None)\n    }\n    var largest = Int?(0)\n    var smallest\
    \ = Int?(0)\n    for x in lst {\n        if x < 0 {\n            largest = x\n\
    \        } else {\n            smallest = x\n        }\n    }\n    return (largest,\
    \ smallest)", "    var largest = Int?()\n    var smallest = Int?()\n    for num\
    \ in lst {\n        if num < 0 {\n            largest = num\n        } else {\n\
    \            smallest = num\n        }\n    }\n    return (largest, smallest)",
  "    var largest = Int?()\n    var smallest = Int?()\n    for num in lst {\n   \
    \     if num < 0 {\n            largest = num\n        } else {\n            smallest\
    \ = num\n        }\n    }\n    return (largest, smallest)", "    var largest:\
    \ Int? = nil\n    var smallest: Int? = nil\n    for x in lst {\n        if x <\
    \ 0 {\n            largest = x\n        } else {\n            smallest = x\n \
    \       }\n    }\n    return (largest, smallest)", "    var largest: Int?\n  \
    \  var smallest: Int?\n    for num in lst {\n        if num < 0 {\n          \
    \  largest = num\n        } else {\n            smallest = num\n        }\n  \
    \  }\n    return (largest, smallest)", "    var largest = Int?()\n    var smallest\
    \ = Int?()\n    for x in lst {\n        if x < 0 {\n            largest = x\n\
    \        } else {\n            smallest = x\n        }\n    }\n    return (largest,\
    \ smallest)", "    var largest = Int?()\n    var smallest = Int?()\n    for num\
    \ in lst {\n        if num < 0 {\n            largest = num\n        } else {\n\
    \            smallest = num\n        }\n    }\n    return (largest, smallest)",
  "    var min: Int?\n    var max: Int?\n    for x in lst {\n        if x < 0 {\n\
    \            min = x\n        } else {\n            max = x\n        }\n    }\n\
    \    return (min, max)", "    guard lst.count > 0 else {\n        return (nil,\
    \ nil)\n    }\n    var largest = Int()\n    var smallest = Int()\n    for num\
    \ in lst {\n        if num < smallest {\n            smallest = num\n        }\n\
    \        if num > largest {\n            largest = num\n        }\n    }\n   \
    \ return (largest, smallest)", "    var largest = Int?()\n    var smallest = Int?()\n\
    \    for num in lst {\n        if num < 0 {\n            largest = num\n     \
    \   } else {\n            smallest = num\n        }\n    }\n    return (largest,\
    \ smallest)"]
stop_tokens:
- "\n}"
