language: swift
name: HumanEval_31_is_prime
results:
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n % 2 == 0 {\n        return false\n    }\n    if n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    var s = 2\n    while i * i <= n {\n       \
    \ if n % i == 0 {\n            return false\n        }\n        i += s\n     \
    \   s += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmp07krbmi9/tmp07krbmi9.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21ea88fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21ea586b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21ea586988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21ea5857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp07krbmi9                        0x000055d3bd28f80a <unavailable> + 6154

    5    libc.so.6                          0x00002b21eaa7b460 __libc_start_main +
    245

    6    tmp07krbmi9                        0x000055d3bd28eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824475
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  var i = 2\n    var j = 3\n    var k = n - 1\n    while i <= k {\n        if\
    \ n % i == 0 {\n            return false\n        }\n        if n % j == 0 {\n\
    \            return false\n        }\n        i += 2\n        j += 2\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpueb0jpif/tmpueb0jpif.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b82ff386c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82ff07db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b82ff07d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b82ff07c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpueb0jpif                        0x0000560755dd62b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b82ff572460 __libc_start_main +
    245

    6    tmpueb0jpif                        0x0000560755dd5ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824475
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n\
    \    var i = 2\n    var j = 3\n    var k = n\n    while i <= k {\n        if n\
    \ % i == 0 {\n            return false\n        }\n        if j > i {\n      \
    \      j += 2\n        }\n        i += 2\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmptd9csyg5/tmptd9csyg5.swift:65: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05f36b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05f33abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05f33ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05f33aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptd9csyg5                        0x000056217242e6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b05f38a0460 __libc_start_main +
    245

    6    tmptd9csyg5                        0x000056217242def9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n % 2 == 0 {\n        return false\n    }\n    if n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    var s = 2\n    while i * i <= n {\n       \
    \ if n % i == 0 {\n            return false\n        }\n        if i == 3 {\n\
    \            if n % i == 0 {\n                return false\n            }\n  \
    \      }\n        i += s\n        s = 6 - s\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\n    var i = 2\n\
    \    var j = 2\n    var k = 1\n    var m = 1\n    var prime = true\n\n    while\
    \ i < n {\n        if n % i == 0 {\n            prime = false\n            break\n\
    \        }\n\n        i += k\n        j += k\n        k += 1\n    }\n\n    if\
    \ prime {\n        return true\n    }\n\n    while j < n {\n        if n % j ==\
    \ 0 {\n            prime = false\n            break\n        }\n\n        j +=\
    \ k\n        k += 1\n    }\n\n    return prime\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmpwabu4qc7/tmpwabu4qc7.swift:80: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7d20a5cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7d20753b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7d20753988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7d207527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwabu4qc7                        0x00005584469c377d <unavailable> + 6013

    5    libc.so.6                          0x00002b7d20c48460 __libc_start_main +
    245

    6    tmpwabu4qc7                        0x00005584469c2ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824475
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n\
    \    var i = 5\n    var j = (3 * n) + 1\n    while i <= j {\n        if n % i\
    \ == 0 {\n            return false\n        }\n        i += 6\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmplq06xcuh/tmplq06xcuh.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae166e30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae166b27b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae166b27988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae166b267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplq06xcuh                        0x000055cf13b072b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ae16701c460 __libc_start_main +
    245

    6    tmplq06xcuh                        0x000055cf13b06ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824475
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n % 2 == 0 {\n        return false\n    }\n    if n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    var s = 2\n    while i * i <= n {\n       \
    \ if n % i == 0 {\n            return false\n        }\n        i += s\n     \
    \   s += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmp07krbmi9/tmp07krbmi9.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21ea88fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21ea586b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21ea586988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21ea5857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp07krbmi9                        0x000055d3bd28f80a <unavailable> + 6154

    5    libc.so.6                          0x00002b21eaa7b460 __libc_start_main +
    245

    6    tmp07krbmi9                        0x000055d3bd28eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824475
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    var i = 5\n\
    \    var s: Int64 = 1\n    while i * i <= n {\n        if n % i == 0 {\n     \
    \       return false\n        }\n        s += i\n        i += 6\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpn0ravayk.swift:36:14: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Int64'\n        s += i\n             ^\n        \
    \     Int64( )\n"
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n == 3 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    if n % 3 == 0 {\n        return false\n    }\n    var i =\
    \ 5\n    var s = 2\n    while i * i <= n {\n        if n % i == 0 {\n        \
    \    return false\n        }\n        i += s\n        s = 6 - s\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n == 2\
    \ {\n        return true\n    }\n    if n % 2 == 0 {\n        return false\n \
    \   }\n    var i = 5\n    var s: Int\n    while i * i <= n {\n        if n % i\
    \ == 0 {\n            return false\n        }\n        i += 6\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmplidnnna6/tmplidnnna6.swift:62: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0569662c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0569359b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0569359988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05693587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplidnnna6                        0x000055d1433f277d <unavailable> + 6013

    5    libc.so.6                          0x00002b056984e460 __libc_start_main +
    245

    6    tmplidnnna6                        0x000055d1433f1ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824475
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n % 2 == 0 {\n        return false\n    }\n    if n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    var s = 2\n    while i * i <= n {\n       \
    \ if n % i == 0 {\n            return false\n        }\n        i += s\n     \
    \   s += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmp07krbmi9/tmp07krbmi9.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21ea88fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21ea586b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21ea586988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21ea5857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp07krbmi9                        0x000055d3bd28f80a <unavailable> + 6154

    5    libc.so.6                          0x00002b21eaa7b460 __libc_start_main +
    245

    6    tmp07krbmi9                        0x000055d3bd28eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824475
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n % 2 == 0 {\n        return false\n    }\n    if n % 3 == 0 {\n        return\
    \ false\n    }\n    let m = Int(sqrt(Double(n)))\n    for _ in 0..<m {\n     \
    \   if n % Int(pow(Double(2), Double(Int(m)))) != 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp48mwvv0v.swift:33:17: error: cannot find 'sqrt' in scope\n    let\
    \ m = Int(sqrt(Double(n)))\n                ^~~~\n"
  stdout: ''
  timestamp: 1659824475
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\n    var i = 2\n\
    \    var j = 2\n    var k = n - 1\n\n    while i <= k {\n        if n % i == 0\
    \ {\n            return false\n        }\n\n        i += j\n        j += 2\n \
    \   }\n\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpow7906fo/tmpow7906fo.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f6d5eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f6d2e5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f6d2e5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f6d2e47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpow7906fo                        0x000055ce9c9db6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b7f6d7da460 __libc_start_main +
    245

    6    tmpow7906fo                        0x000055ce9c9daef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824475
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n % 2 == 0 {\n        return false\n    }\n    var i = 5\n    var j = 3\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            return false\n \
    \       }\n        i += j\n        j += 2\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpkfqio60r/tmpkfqio60r.swift:66: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b46c29dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b46c26d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b46c26d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b46c26d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkfqio60r                        0x000055643a16477d <unavailable> + 6013

    5    libc.so.6                          0x00002b46c2bc6460 __libc_start_main +
    245

    6    tmpkfqio60r                        0x000055643a163ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824475
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n % 2 == 0 {\n        return false\n    }\n    var i = 5\n    var j = (3\
    \ * n) + 1\n    var k = n\n    while i <= j {\n        if k % i == 0 {\n     \
    \       return false\n        }\n        i += 2\n    }\n    return true\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmp_a5abzq5/tmp_a5abzq5.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b37f2f2cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b37f2c23b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b37f2c23988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b37f2c227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_a5abzq5                        0x000055d17cf132b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b37f3118460 __libc_start_main +
    245

    6    tmp_a5abzq5                        0x000055d17cf12ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824475
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n % 2 == 0 {\n        return false\n    }\n    if n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    var s = 2\n    while i * i <= n {\n       \
    \ if n % i == 0 {\n            return false\n        }\n        i += s\n     \
    \   s += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmp07krbmi9/tmp07krbmi9.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21ea88fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21ea586b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21ea586988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21ea5857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp07krbmi9                        0x000055d3bd28f80a <unavailable> + 6154

    5    libc.so.6                          0x00002b21eaa7b460 __libc_start_main +
    245

    6    tmp07krbmi9                        0x000055d3bd28eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824475
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n\
    \    if n % 3 == 0 {\n        return false\n    }\n    var i = 5\n    var j =\
    \ 3\n    var k = 2\n    while i * j <= n {\n        if n % i == 0 {\n        \
    \    return false\n        }\n        if n % j == 0 {\n            return false\n\
    \        }\n        if k % 3 == 0 {\n            return false\n        }\n   \
    \     i += 2\n        j += 2\n        k += 2\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmphgyvb4r2/tmphgyvb4r2.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b749b8b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b749b5abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b749b5ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b749b5aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphgyvb4r2                        0x000055cf2d29f2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b749baa0460 __libc_start_main +
    245

    6    tmphgyvb4r2                        0x000055cf2d29eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824475
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    var i = 5\n    var j = (3\
    \ * n) + 1\n    while i <= j {\n        if n % i == 0 {\n            return false\n\
    \        }\n        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmptpw_kh1h/tmptpw_kh1h.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac27510ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac274e01b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac274e01988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac274e007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptpw_kh1h                        0x000055b3c08ee2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ac2752f6460 __libc_start_main +
    245

    6    tmptpw_kh1h                        0x000055b3c08edef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    var i = 5\n\
    \    var s = 2\n    while i * i <= n {\n        if n % i == 0 || n % (i + 2) ==\
    \ 0 {\n            return false\n        }\n        i += 6\n        s += 6\n \
    \   }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    var i = 2\n    var j = 3\n\
    \    var k = n\n    while i <= k {\n        if n % i == 0 {\n            return\
    \ false\n        }\n        if j > i {\n            j += 2\n        }\n      \
    \  i += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpl_6v5uaq/tmpl_6v5uaq.swift:68: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ce4719c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ce4410b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ce4410988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ce440f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl_6v5uaq                        0x000055f52e93b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b4ce4905460 __libc_start_main +
    245

    6    tmpl_6v5uaq                        0x000055f52e93aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    var i = 5\n\
    \    var s = 2\n    while i * i <= n {\n        if n % i == 0 || n % (i + 2) ==\
    \ 0 {\n            return false\n        }\n        i += s\n        s = 6 - s\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\n    if n == 2\
    \ {\n        return true\n    }\n\n    if n == 3 {\n        return true\n    }\n\
    \n    if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n\n    var i\
    \ = 5\n    var s: Int64 = 1\n    var t: Int64 = 2\n\n    while i * i <= n {\n\
    \        if n % i == 0 {\n            return false\n        }\n\n        i +=\
    \ 6\n        s *= t\n        t += 2\n    }\n\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659824475
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n == 2\
    \ {\n        return true\n    }\n    if n == 3 {\n        return true\n    }\n\
    \    if n % 2 == 0 {\n        return false\n    }\n    var i = 5\n    var j =\
    \ (n - 1) / 2\n    while i <= j {\n        if n % i == 0 {\n            return\
    \ false\n        }\n        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpze2_0qw5/tmpze2_0qw5.swift:66: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1cea2f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1ce9ff0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1ce9ff0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1ce9fef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpze2_0qw5                        0x0000557bd076280a <unavailable> + 6154

    5    libc.so.6                          0x00002b1cea4e5460 __libc_start_main +
    245

    6    tmpze2_0qw5                        0x0000557bd0761ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824475
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n == 3 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    if n % 3 == 0 {\n        return false\n    }\n    var i =\
    \ 5\n    var s: Int\n    while i * i <= n {\n        if n % i == 0 {\n       \
    \     return false\n        }\n        i += 6\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmp5ex7lv81/tmp5ex7lv81.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf246eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf243e5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf243e5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf243e47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ex7lv81                        0x000055e34dfaa77d <unavailable> + 6013

    5    libc.so.6                          0x00002abf248da460 __libc_start_main +
    245

    6    tmp5ex7lv81                        0x000055e34dfa9ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824475
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    var i = 5\n    var s = 2\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            return false\n \
    \       }\n        i += s\n        s += 2\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmphpw7qttt/tmphpw7qttt.swift:67: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b61a1f1ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b61a1c15b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b61a1c15988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b61a1c147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphpw7qttt                        0x00005566ee7dd80a <unavailable> + 6154

    5    libc.so.6                          0x00002b61a210a460 __libc_start_main +
    245

    6    tmphpw7qttt                        0x00005566ee7dcef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824475
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    var i = 5\n\
    \    var s: Int = 0\n    var t: Int = 0\n    while i * i <= n {\n        if n\
    \ % i == 0 {\n            return false\n        }\n        s += i\n        t +=\
    \ i\n        i += 6\n    }\n    if s == n {\n        return true\n    }\n    if\
    \ t != n {\n        return false\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpskt61s5s/tmpskt61s5s.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1f9742bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1f97122b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1f97122988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1f971217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpskt61s5s                        0x00005560e15642b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b1f97617460 __libc_start_main +
    245

    6    tmpskt61s5s                        0x00005560e1563ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824475
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n == 3 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    if n % 3 == 0 {\n        return false\n    }\n    if n % 5\
    \ == 0 {\n        return false\n    }\n    if n % 7 == 0 {\n        return false\n\
    \    }\n    if n % 11 == 0 {\n        return false\n    }\n    if n % 13 == 0\
    \ {\n        return false\n    }\n    if n % 17 == 0 {\n        return false\n\
    \    }\n    if n % 19 == 0 {\n        return false\n    }\n    if n % 23 == 0\
    \ {\n        return false\n    }\n    if n % 29 == 0 {\n        return false\n\
    \    }\n    if n % 31 == 0 {\n        return false\n    }\n    if n % 37 == 0\
    \ {\n        return false\n    }\n    if n % 41 == 0 {\n        return false\n\
    \    }\n    if n % 43 == 0 {\n        return false\n    }\n    if n % 47 == 0\
    \ {\n        return false\n    }\n    if n % 53 == 0 {\n        return false\n\
    \    }\n    if n % 59 == 0 {\n        return false\n    }\n    if n % 61 == 0\
    \ {\n        return false\n    }\n    if n % 67 == 0 {\n        return false\n\
    \    }\n    if n % 71 == 0 {\n        return false\n    }\n    if n % 73 == 0\
    \ {\n        return false\n    }\n    if n % 79 == 0 {\n        return false\n\
    \    }\n    if n % 83 == 0 {\n        return false\n    }\n    if n % 89 == 0\
    \ {\n        return false\n    }\n    if n % 97 == 0 {\n        return false\n\
    \    }\n    if n % 101 == 0 {\n        return false\n    }\n    if n % 103 ==\
    \ 0 {\n        return false\n    }\n    if n % 107 == 0 {\n        return false\n\
    \    }\n    if n % 109 == 0 {\n        return false\n    }\n    if n % 113 ==\
    \ 0 {\n        return false\n    }\n    if n % 117 == 0 {\n        return false\n\
    \    }\n    if n % 121 == 0 {\n        return false\n    }\n    if n % 123 ==\
    \ 0 {\n        return false\n    }\n    if n % 127 == 0 {\n        return false\n\
    \    }\n    if n % 131 == 0 {\n        return false\n    }\n    if n % 137 ==\
    \ 0 {\n        return false\n    }\n    if n % 139 == 0 {\n        return false\n\
    \    }\n    if n % 143 == 0 {\n        return false\n    }\n    if n % 147 ==\
    \ 0 {\n        return false\n    }\n    if n % 151 == 0 {\n        return false\n\
    \    }\n    if n % 157 == 0 {\n        return false\n    }\n    if n % 161 ==\
    \ 0 {\n        return false\n    }\n    if n % 165 == 0 {\n        return false\n\
    \    }\n    if n % 169 == 0 {\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmp82jlo68d.swift:187:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmp82jlo68d.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmp82jlo68d.swift:163:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824475
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n % 2 == 0 {\n        return false\n    }\n    if n % 3 == 0 {\n        return\
    \ false\n    }\n    let limit = (sqrt(Double(n))).rounded(.up)\n    for i in 2...limit\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmp35xlt3pr.swift:33:18: error: cannot find 'sqrt' in scope\n    let\
    \ limit = (sqrt(Double(n))).rounded(.up)\n                 ^~~~\n/tmp/tmp35xlt3pr.swift:33:44:\
    \ error: cannot infer contextual base in reference to member 'up'\n    let limit\
    \ = (sqrt(Double(n))).rounded(.up)\n                                         \
    \ ~^~\n"
  stdout: ''
  timestamp: 1659824475
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    var i = 2\n    var j = 3\n\
    \    var k = n - 1\n    while i <= k {\n        if n % i == 0 {\n            return\
    \ false\n        }\n        i += 2\n        j += 2\n    }\n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpmmmpf8b6/tmpmmmpf8b6.swift:66: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9199dd7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9199aceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9199ace988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9199acd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmmmpf8b6                        0x000055dc151226fb <unavailable> + 5883

    5    libc.so.6                          0x00002b9199fc3460 __libc_start_main +
    245

    6    tmpmmmpf8b6                        0x000055dc15121ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824476
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    var i = 2\n    var j = 3\n\
    \    var k = n - 1\n    while i <= k {\n        if n % i == 0 {\n            return\
    \ false\n        }\n        i += 2\n        j += 2\n    }\n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpmmmpf8b6/tmpmmmpf8b6.swift:66: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9199dd7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9199aceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9199ace988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9199acd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmmmpf8b6                        0x000055dc151226fb <unavailable> + 5883

    5    libc.so.6                          0x00002b9199fc3460 __libc_start_main +
    245

    6    tmpmmmpf8b6                        0x000055dc15121ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824476
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    var i = 5\n\
    \    var s = 2\n    while i * i <= n {\n        if n % i == 0 || n % (i + 2) ==\
    \ 0 {\n            return false\n        }\n        i += s\n        s += 6\n \
    \   }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmp85pbga02/tmp85pbga02.swift:67: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b124254fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1242246b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1242246988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b12422457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp85pbga02                        0x000055e092bc580a <unavailable> + 6154

    5    libc.so.6                          0x00002b124273b460 __libc_start_main +
    245

    6    tmp85pbga02                        0x000055e092bc4ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824476
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n == 2\
    \ {\n        return true\n    }\n    if n == 3 {\n        return true\n    }\n\
    \    if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    var i = 5\n\
    \    var j = (3 * n) + 1\n    var k = (3 * n) + 3\n    while i <= j {\n      \
    \  if i % k == 0 {\n            return false\n        }\n        i += 2\n    \
    \    k += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmpvcdp548p/tmpvcdp548p.swift:66: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b92db3edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b92db0e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b92db0e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92db0e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvcdp548p                        0x000055ef69d4c6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b92db5d9460 __libc_start_main +
    245

    6    tmpvcdp548p                        0x000055ef69d4bef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824476
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n == 2\
    \ {\n        return true\n    }\n    if n % 2 == 0 {\n        return false\n \
    \   }\n    var i = 5\n    var j = (3 * n) + 1\n    var k = (3 * n) + 3\n    while\
    \ i <= j {\n        if i % n == 0 {\n            return false\n        }\n   \
    \     i += k\n        j += k\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpd_hscisk/tmpd_hscisk.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab857f7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab857c72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab857c72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab857c717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd_hscisk                        0x00005596b67962b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ab858167460 __libc_start_main +
    245

    6    tmpd_hscisk                        0x00005596b6795ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824476
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    var i = 2\n    var j = 3\n\
    \    var k = n\n    while i <= k {\n        if n % i == 0 {\n            return\
    \ false\n        }\n        if j > i {\n            j += 2\n        }\n      \
    \  i += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpl_6v5uaq/tmpl_6v5uaq.swift:68: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ce4719c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ce4410b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ce4410988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ce440f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl_6v5uaq                        0x000055f52e93b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b4ce4905460 __libc_start_main +
    245

    6    tmpl_6v5uaq                        0x000055f52e93aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824475
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n % 2 == 0 {\n        return false\n    }\n    if n % 3 == 0 {\n        return\
    \ false\n    }\n    let m = Int(sqrt(Double(n)))\n    for d in 2...m {\n     \
    \   if n % d == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxz9wnqox.swift:33:17: error: cannot find 'sqrt' in scope\n    let\
    \ m = Int(sqrt(Double(n)))\n                ^~~~\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n % 2 == 0 {\n        return false\n    }\n    var i = 5\n    var s: Int\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            return false\n \
    \       }\n        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmp8cyh1w4r/tmp8cyh1w4r.swift:65: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0a92d17c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0a92a0eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0a92a0e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0a92a0d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8cyh1w4r                        0x00005653e05bd77d <unavailable> + 6013

    5    libc.so.6                          0x00002b0a92f03460 __libc_start_main +
    245

    6    tmp8cyh1w4r                        0x00005653e05bcef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    let mut i =\
    \ 5\n    let mut s = 2\n    while i * i <= n {\n        if n % i == 0 {\n    \
    \        return false\n        }\n        i += s\n        s += 2\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpwavx7s4m.swift:30:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut i = 5\n\
    \            ^\n/tmp/tmpwavx7s4m.swift:30:13: note: join the identifiers together\n\
    \    let mut i = 5\n        ~~~~^\n        muti\n/tmp/tmpwavx7s4m.swift:30:13:\
    \ note: join the identifiers together with camel-case\n    let mut i = 5\n   \
    \     ~~~~^\n        mutI\n/tmp/tmpwavx7s4m.swift:31:13: error: found an unexpected\
    \ second identifier in constant declaration; is there an accidental break?\n \
    \   let mut s = 2\n            ^\n/tmp/tmpwavx7s4m.swift:31:13: note: join the\
    \ identifiers together\n    let mut s = 2\n        ~~~~^\n        muts\n/tmp/tmpwavx7s4m.swift:31:13:\
    \ note: join the identifiers together with camel-case\n    let mut s = 2\n   \
    \     ~~~~^\n        mutS\n/tmp/tmpwavx7s4m.swift:31:9: error: invalid redeclaration\
    \ of 'mut'\n    let mut s = 2\n        ^\n/tmp/tmpwavx7s4m.swift:30:9: note: 'mut'\
    \ previously declared here\n    let mut i = 5\n        ^\n/tmp/tmpwavx7s4m.swift:32:11:\
    \ error: cannot find 'i' in scope\n    while i * i <= n {\n          ^\n/tmp/tmpwavx7s4m.swift:32:15:\
    \ error: cannot find 'i' in scope\n    while i * i <= n {\n              ^\n/tmp/tmpwavx7s4m.swift:32:13:\
    \ error: cannot convert value of type 'Duration' to expected argument type 'Int'\n\
    \    while i * i <= n {\n            ^\n/tmp/tmpwavx7s4m.swift:33:16: error: cannot\
    \ find 'i' in scope\n        if n % i == 0 {\n               ^\n/tmp/tmpwavx7s4m.swift:36:9:\
    \ error: cannot find 'i' in scope\n        i += s\n        ^\n/tmp/tmpwavx7s4m.swift:36:14:\
    \ error: cannot find 's' in scope\n        i += s\n             ^\n/tmp/tmpwavx7s4m.swift:37:9:\
    \ error: cannot find 's' in scope\n        s += 2\n        ^\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    var i = 2\n    var j = 3\n\
    \    var k = 3\n    while i <= n {\n        if n % i == 0 {\n            return\
    \ false\n        }\n        if i == n {\n            return true\n        }\n\
    \        while j <= n / i {\n            if n % i == 0 {\n                return\
    \ false\n            }\n            if i == n {\n                return true\n\
    \            }\n            i += k\n            k += 2\n        }\n        i +=\
    \ 2\n        j += 3\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmpsuz38o1j/tmpsuz38o1j.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b20f8f1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b20f8c12b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b20f8c12988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b20f8c117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsuz38o1j                        0x0000559ae44ca2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b20f9107460 __libc_start_main +
    245

    6    tmpsuz38o1j                        0x0000559ae44c9ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824476
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n % 2 == 0 {\n        return false\n    }\n    if n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    var j = (3 * n) + 1\n    var k = n - 1\n  \
    \  while i <= k {\n        if j % i == 0 {\n            return false\n       \
    \ }\n        i += 2\n        j += 2\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmp44wojthi/tmp44wojthi.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b633beb9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b633bbb0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b633bbb0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b633bbaf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp44wojthi                        0x00005560e2a152b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b633c0a5460 __libc_start_main +
    245

    6    tmp44wojthi                        0x00005560e2a14ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824476
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n % 2 == 0 {\n        return false\n    }\n    if n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    var s = 2\n    while i * i <= n {\n       \
    \ if n % i == 0 {\n            return false\n        }\n        i += s\n     \
    \   s = 6 - s\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmpfz59sku8/tmpfz59sku8.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af224698c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af22438fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af22438f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af22438e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfz59sku8                        0x00005592182a94ff <unavailable> + 5375

    5    libc.so.6                          0x00002af224884460 __libc_start_main +
    245

    6    tmpfz59sku8                        0x00005592182a8ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  var i = 2\n    var j = 2\n    var k = n - 1\n    var m = 1\n    var prime =\
    \ true\n    while i <= k {\n        if ((n % i) == 0) {\n            prime = false\n\
    \            break\n        }\n        i += 1\n    }\n    if prime {\n       \
    \ return true\n    }\n    i = 2\n    j = 2\n    k = n - 1\n    m = 2\n    while\
    \ i <= k {\n        if ((n % i) == 0) {\n            prime = false\n         \
    \   break\n        }\n        i += m\n        m += 2\n    }\n    if prime {\n\
    \        return true\n    }\n    i = 2\n    j = 3\n    k = n - 1\n    m = 4\n\
    \    while i <= k {\n        if ((n % i) == 0) {\n            prime = false\n\
    \            break\n        }\n        i += m\n        m += 2\n    }\n    if prime\
    \ {\n        return true\n    }\n    i = 2\n    j = 3\n    k = n - 1\n    m =\
    \ 6\n    while i <= k {\n        if ((n % i) == 0) {\n            prime = false\n\
    \            break\n        }\n        i += m\n        m += 2\n    }\n    if prime\
    \ {\n        return true\n    }\n    i = 2\n    j = 3\n    k = n - 1\n    m =\
    \ 8\n    while i <= k {\n        if ((n % i) == 0) {\n            prime = false\n\
    \            break\n        }\n        i += m\n        m += 2\n    }\n    if prime\
    \ {\n        return true\n    }\n    i = 2\n    j = 3\n    k = n - 1\n    m =\
    \ 10\n    while i <= k {\n        if ((n % i) == 0) {\n            prime = false\n\
    \            break\n        }\n        i += m\n        m += 2\n    }\n    if prime\
    \ {\n        return true\n    }\n    i = 2\n    j = 3\n    k = n - 1\n    m =\
    \ 12\n    while i <= k {\n        if ((n % i) == 0) {\n            prime = false\n\
    \            break\n        }\n        i += m\n        m += 2\n    }\n    if prime\
    \ {\n        return true\n    }\n    i = 2\n    j = 3\n    k = n - 1\n    m =\
    \ 14\n    while i <= k {\n        if ((n % i) == 0) {\n            prime = false\n\
    \            break\n        }\n        i += m\n        m += 2\n    }\n    if prime\
    \ {\n        return true\n    }\n    i = 2\n    j = 3\n    k = n - 1\n    m =\
    \ 16\n    while i <= k {\n        if ((n % i) == 0) {\n            prime = false\n\
    \            break\n        }\n        i += m\n        m += 2\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpwsefuocw.swift:28:9: warning: variable 'j' was written to, but\
    \ never read\n    var j = 2\n        ^\n/tmp/tmpwsefuocw.swift:159:1: error: missing\
    \ return in global function expected to return 'Bool'\n}\n^\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n % 2 == 0 {\n        return false\n    }\n    if n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    var j = 3\n    while i * i <= n {\n       \
    \ if n % i == 0 {\n            return false\n        }\n        i += j\n     \
    \   j += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmpro7a5kz7/tmpro7a5kz7.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22bde01c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22bdaf8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22bdaf8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22bdaf77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpro7a5kz7                        0x000055bf9eee24ff <unavailable> + 5375

    5    libc.so.6                          0x00002b22bdfed460 __libc_start_main +
    245

    6    tmpro7a5kz7                        0x000055bf9eee1ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n == 4 {\n        return true\n    }\n    if n == 5 {\n        return true\n\
    \    }\n    if n == 6 {\n        return true\n    }\n    if n == 7 {\n       \
    \ return true\n    }\n    if n == 8 {\n        return true\n    }\n    if n ==\
    \ 9 {\n        return true\n    }\n    if n == 10 {\n        return true\n   \
    \ }\n    if n == 11 {\n        return true\n    }\n    if n == 12 {\n        return\
    \ true\n    }\n    if n == 13 {\n        return true\n    }\n    if n == 14 {\n\
    \        return true\n    }\n    if n == 15 {\n        return true\n    }\n  \
    \  if n == 16 {\n        return true\n    }\n    if n == 17 {\n        return\
    \ true\n    }\n    if n == 18 {\n        return true\n    }\n    if n == 19 {\n\
    \        return true\n    }\n    if n == 20 {\n        return true\n    }\n  \
    \  if n == 21 {\n        return true\n    }\n    if n == 22 {\n        return\
    \ true\n    }\n    if n == 23 {\n        return true\n    }\n    if n == 24 {\n\
    \        return true\n    }\n    if n == 25 {\n        return true\n    }\n  \
    \  if n == 26 {\n        return true\n    }\n    if n == 27 {\n        return\
    \ true\n    }\n    if n == 28 {\n        return true\n    }\n    if n == 29 {\n\
    \        return true\n    }\n    if n == 30 {\n        return true\n    }\n  \
    \  if n == 31 {\n        return true\n    }\n    if n == 32 {\n        return\
    \ true\n    }\n    if n == 33 {\n        return true\n    }\n    if n == 34 {\n\
    \        return true\n    }\n    if n == 35 {\n        return true\n    }\n  \
    \  if n == 36 {\n        return true\n    }\n    if n == 37 {\n        return\
    \ true\n    }\n    if n == 38 {\n        return true\n    }\n    if n == 39 {\n\
    \        return true\n    }\n    if n == 40 {\n        return true\n    }\n  \
    \  if n == 41 {\n        return true\n    }\n    if n == 42 {\n        return\
    \ true\n    }\n    if n == 43 {\n        return true\n    }\n    if n == 44 {\n\
    \        return true\n    }\n    if n == 45 {\n        return true\n    }\n  \
    \  if n == 46 {\n        return true\n    }\n    if n == 47 {\n        return\
    \ true\n    }\n    if n == 48 {\n        return true\n    }\n    if n == 49 {\n\
    \        return true\n    }\n    if n == 50 {\n        return true\n    }\n  \
    \  if n == 51 {\n        return true\n    }\n    if n == 52 {\n        return\
    \ \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n:\
    \ 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) ==\
    \ true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5xbufwk6.swift:200:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmp5xbufwk6.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmp5xbufwk6.swift:172:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmp5xbufwk6.swift:176:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n % 2 == 0 {\n        return false\n    }\n    if n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    var s = 2\n    while i * i <= n {\n       \
    \ if n % i == 0 {\n            return false\n        }\n        s += i\n     \
    \   i += 6\n    }\n    return s == n\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmp_qgui_fg/tmp_qgui_fg.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad24b175c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad24ae6cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad24ae6c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad24ae6b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_qgui_fg                        0x000055dcbd1652b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ad24b361460 __libc_start_main +
    245

    6    tmp_qgui_fg                        0x000055dcbd164ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824476
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n % 2 == 0 {\n        return false\n    }\n    if n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    var s: Int\n    while i * i <= n {\n      \
    \  if n % i == 0 {\n            return false\n        }\n        i += 6\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpxx_fywmg/tmpxx_fywmg.swift:68: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adea0268c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade9ff5fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade9ff5f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade9ff5e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxx_fywmg                        0x000055756879577d <unavailable> + 6013

    5    libc.so.6                          0x00002adea0454460 __libc_start_main +
    245

    6    tmpxx_fywmg                        0x0000557568794ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824476
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n == 3 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    if n % 3 == 0 {\n        return false\n    }\n    var i =\
    \ 5\n    var s = 2\n    while i * i <= n {\n        if n % i == 0 {\n        \
    \    return false\n        }\n        s += 2\n        i += 6\n    }\n    return\
    \ s == n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpmh3d474t/tmpmh3d474t.swift:62: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b20df2d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b20defcab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b20defca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b20defc97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmh3d474t                        0x00005558d3be22b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b20df4bf460 __libc_start_main +
    245

    6    tmpmh3d474t                        0x00005558d3be1ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824476
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n\
    \    var i = 2\n    var j = 3\n    var k = n - 1\n    while i <= k {\n       \
    \ if n % i == 0 {\n            return false\n        }\n        if j % i == 0\
    \ {\n            return false\n        }\n        i += 2\n        j += 2\n   \
    \ }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmptnfe3m89/tmptnfe3m89.swift:62: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae705263c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae704f5ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae704f5a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae704f597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptnfe3m89                        0x0000560df2d034ff <unavailable> + 5375

    5    libc.so.6                          0x00002ae70544f460 __libc_start_main +
    245

    6    tmptnfe3m89                        0x0000560df2d02ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824476
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    var i = 2\n    var j = 3\n\
    \    var k = n\n    while i <= k {\n        if n % i == 0 {\n            return\
    \ false\n        }\n        if i == k {\n            return true\n        }\n\
    \        i += 2\n        j += 2\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpxdj89bjr/tmpxdj89bjr.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5b5ec3ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5b5e931b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5b5e931988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5b5e9307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxdj89bjr                        0x000055561a1046fb <unavailable> + 5883

    5    libc.so.6                          0x00002b5b5ee26460 __libc_start_main +
    245

    6    tmpxdj89bjr                        0x000055561a103ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824476
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n % 2 == 0 {\n        return false\n    }\n    if n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    var s = 2\n    while i * i <= n {\n       \
    \ if n % i == 0 {\n            return false\n        }\n        s += i\n     \
    \   i += 6\n    }\n    return s == n\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmp_qgui_fg/tmp_qgui_fg.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad24b175c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad24ae6cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad24ae6c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad24ae6b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_qgui_fg                        0x000055dcbd1652b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ad24b361460 __libc_start_main +
    245

    6    tmp_qgui_fg                        0x000055dcbd164ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824476
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    var i = 2\n    var j = 3\n\
    \    var k = n - 1\n    while i <= k {\n        if n % i == 0 {\n            return\
    \ false\n        }\n        if j % i == 0 {\n            return false\n      \
    \  }\n        i += 2\n        j += 2\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmprjaq225c/tmprjaq225c.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b79d33dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b79d30d6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b79d30d6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b79d30d57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprjaq225c                        0x000055b6bbeeb6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b79d35cb460 __libc_start_main +
    245

    6    tmprjaq225c                        0x000055b6bbeeaef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824476
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  var i = 2\n    var j = 2\n    var k = n - 1\n    while i <= k {\n        if\
    \ n % i == 0 {\n            return false\n        }\n        if j > i {\n    \
    \        j += i\n        }\n        i += 2\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpa_cbar4s/tmpa_cbar4s.swift:65: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad827e69c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad827b60b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad827b60988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad827b5f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa_cbar4s                        0x000055d730e3c6fb <unavailable> + 5883

    5    libc.so.6                          0x00002ad828055460 __libc_start_main +
    245

    6    tmpa_cbar4s                        0x000055d730e3bef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824476
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n % 2 == 0 {\n        return false\n    }\n    if n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    var s = 2\n    while i * i <= n {\n       \
    \ if n % i == 0 {\n            return false\n        }\n        i += s\n     \
    \   s += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmp07krbmi9/tmp07krbmi9.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21ea88fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21ea586b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21ea586988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21ea5857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp07krbmi9                        0x000055d3bd28f80a <unavailable> + 6154

    5    libc.so.6                          0x00002b21eaa7b460 __libc_start_main +
    245

    6    tmp07krbmi9                        0x000055d3bd28eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824475
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    var i = 5\n\
    \    var s: Int\n    while i * i <= n {\n        if n % i == 0 || n % (i + 2)\
    \ == 0 {\n            return false\n        }\n        i += 6\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpws4sjliz/tmpws4sjliz.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42ed1aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42ecea1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42ecea1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42ecea07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpws4sjliz                        0x000055e69b3814ff <unavailable> + 5375

    5    libc.so.6                          0x00002b42ed396460 __libc_start_main +
    245

    6    tmpws4sjliz                        0x000055e69b380ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824476
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n % 2 == 0 {\n        return false\n    }\n    var i = 5\n    var j = (n\
    \ - 1) / 2\n    while i <= j {\n        if n % i == 0 {\n            return false\n\
    \        }\n        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpomkmp7ok/tmpomkmp7ok.swift:66: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee629c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee626b8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee626b8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee626b77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpomkmp7ok                        0x000055e8c076880a <unavailable> + 6154

    5    libc.so.6                          0x00002aee62bad460 __libc_start_main +
    245

    6    tmpomkmp7ok                        0x000055e8c0767ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n % 2 == 0 {\n        return false\n    }\n    if n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    var s: Int64 = 0\n    while i * i <= n {\n\
    \        if n % i == 0 {\n            return false\n        }\n        s += i\n\
    \        i += 6\n    }\n    if s == n {\n        return true\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp3sadphde.swift:39:14: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Int64'\n        s += i\n             ^\n        \
    \     Int64( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n == 3 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    if n % 3 == 0 {\n        return false\n    }\n    if n % 5\
    \ == 0 {\n        return false\n    }\n    if n % 7 == 0 {\n        return false\n\
    \    }\n    if n % 11 == 0 {\n        return false\n    }\n    if n % 13 == 0\
    \ {\n        return false\n    }\n    if n % 17 == 0 {\n        return false\n\
    \    }\n    if n % 19 == 0 {\n        return false\n    }\n    if n % 23 == 0\
    \ {\n        return false\n    }\n    if n % 29 == 0 {\n        return false\n\
    \    }\n    if n % 31 == 0 {\n        return false\n    }\n    if n % 37 == 0\
    \ {\n        return false\n    }\n    if n % 41 == 0 {\n        return false\n\
    \    }\n    if n % 43 == 0 {\n        return false\n    }\n    if n % 47 == 0\
    \ {\n        return false\n    }\n    if n % 53 == 0 {\n        return false\n\
    \    }\n    if n % 59 == 0 {\n        return false\n    }\n    if n % 61 == 0\
    \ {\n        return false\n    }\n    if n % 67 == 0 {\n        return false\n\
    \    }\n    if n % 71 == 0 {\n        return false\n    }\n    if n % 73 == 0\
    \ {\n        return false\n    }\n    if n % 79 == 0 {\n        return false\n\
    \    }\n    if n % 83 == 0 {\n        return false\n    }\n    if n % 89 == 0\
    \ {\n        return false\n    }\n    if n % 97 == 0 {\n        return false\n\
    \    }\n    if n % 101 == 0 {\n        return false\n    }\n    if n % 103 ==\
    \ 0 {\n        return false\n    }\n    if n % 107 == 0 {\n        return false\n\
    \    }\n    if n % 109 == 0 {\n        return false\n    }\n    if n % 113 ==\
    \ 0 {\n        return false\n    }\n    if n % 117 == 0 {\n        return false\n\
    \    }\n    if n % 121 == 0 {\n        return false\n    }\n    if n % 123 ==\
    \ 0 {\n        return false\n    }\n    if n % 127 == 0 {\n        return false\n\
    \    }\n    if n % 131 == 0 {\n        return false\n    }\n    if n % 137 ==\
    \ 0 {\n        return false\n    }\n    if n % 139 == 0 {\n        return false\n\
    \    }\n    if n % 143 == 0 {\n        return false\n    }\n    if n % 147 ==\
    \ 0 {\n        return false\n    }\n    if n % 151 == 0 {\n        return false\n\
    \    }\n    if n % 157 == 0 {\n        return false\n    }\n    if n % 161 ==\
    \ 0 {\n        return false\n    }\n    if n % 165 == 0 {\n        return false\n\
    \    }\n    if n % 169 == 0 {\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmp82jlo68d.swift:187:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmp82jlo68d.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmp82jlo68d.swift:163:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824475
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n % 2 == 0 {\n        return false\n    }\n    if n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    var s: Int = 0\n    while i * i <= n {\n  \
    \      if n % i == 0 {\n            return false\n        }\n        s += i\n\
    \        i += 6\n    }\n    return s == n\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmpogu_iyt2/tmpogu_iyt2.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1b8b9fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1b8896b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab1b8896988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1b88957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpogu_iyt2                        0x000055af79ab12b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ab1b8d8b460 __libc_start_main +
    245

    6    tmpogu_iyt2                        0x000055af79ab0ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824476
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n % 2 == 0 {\n        return false\n    }\n    var i = 5\n    var j = (n\
    \ - 1) / 2\n    while i <= j {\n        if n % i == 0 {\n            return false\n\
    \        }\n        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpomkmp7ok/tmpomkmp7ok.swift:66: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee629c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee626b8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee626b8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee626b77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpomkmp7ok                        0x000055e8c076880a <unavailable> + 6154

    5    libc.so.6                          0x00002aee62bad460 __libc_start_main +
    245

    6    tmpomkmp7ok                        0x000055e8c0767ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824476
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    if n % 3 == 0 {\n       \
    \ return false\n    }\n    var i = 5\n    var j = 3\n    while i * i <= n {\n\
    \        if n % i == 0 {\n            return false\n        }\n        i += j\n\
    \        j += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmpf97bfr5d/tmpf97bfr5d.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba366a3cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba366733b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba366733988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba3667327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf97bfr5d                        0x0000563cc5e4777d <unavailable> + 6013

    5    libc.so.6                          0x00002ba366c28460 __libc_start_main +
    245

    6    tmpf97bfr5d                        0x0000563cc5e46ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824476
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\n    if n == 2\
    \ {\n        return true\n    }\n\n    if n % 2 == 0 {\n        return false\n\
    \    }\n\n    var i = 2\n    var j = 3\n    var k = n\n\n    while i <= k {\n\
    \        if n % i == 0 {\n            return false\n        }\n\n        if j\
    \ % i == 0 {\n            return false\n        }\n\n        i += 2\n        j\
    \ += 2\n    }\n\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpj7ak4y7z/tmpj7ak4y7z.swift:73: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af7fffe7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af7ffcdeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af7ffcde988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af7ffcdd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj7ak4y7z                        0x000056129f34d6fb <unavailable> + 5883

    5    libc.so.6                          0x00002af8001d3460 __libc_start_main +
    245

    6    tmpj7ak4y7z                        0x000056129f34cef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    if n % 3 == 0 {\n       \
    \ return false\n    }\n    for i := 3; i <= (Int)(sqrt(Double(n))); i++ {\n  \
    \      if n % i == 0 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpm63t4vy0.swift:33:12: error: expected type\n    for i := 3; i <=\
    \ (Int)(sqrt(Double(n))); i++ {\n           ^\n            <#type#>\n/tmp/tmpm63t4vy0.swift:33:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 3; i <= (Int)(sqrt(Double(n)));\
    \ i++ {\n           ^\n/tmp/tmpm63t4vy0.swift:33:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 3; i <= (Int)(sqrt(Double(n))); i++\
    \ {\n           ^\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n == 4 {\n        return true\n    }\n    if n == 5 {\n        return true\n\
    \    }\n    if n == 6 {\n        return true\n    }\n    if n == 7 {\n       \
    \ return true\n    }\n    if n == 8 {\n        return true\n    }\n    if n ==\
    \ 9 {\n        return true\n    }\n    if n == 10 {\n        return true\n   \
    \ }\n    if n == 11 {\n        return true\n    }\n    if n == 12 {\n        return\
    \ true\n    }\n    if n == 13 {\n        return true\n    }\n    if n == 14 {\n\
    \        return true\n    }\n    if n == 15 {\n        return true\n    }\n  \
    \  if n == 16 {\n        return true\n    }\n    if n == 17 {\n        return\
    \ true\n    }\n    if n == 18 {\n        return true\n    }\n    if n == 19 {\n\
    \        return true\n    }\n    if n == 20 {\n        return true\n    }\n  \
    \  if n == 21 {\n        return true\n    }\n    if n == 22 {\n        return\
    \ true\n    }\n    if n == 23 {\n        return true\n    }\n    if n == 24 {\n\
    \        return true\n    }\n    if n == 25 {\n        return true\n    }\n  \
    \  if n == 26 {\n        return true\n    }\n    if n == 27 {\n        return\
    \ true\n    }\n    if n == 28 {\n        return true\n    }\n    if n == 29 {\n\
    \        return true\n    }\n    if n == 30 {\n        return true\n    }\n  \
    \  if n == 31 {\n        return true\n    }\n    if n == 32 {\n        return\
    \ true\n    }\n    if n == 33 {\n        return true\n    }\n    if n == 34 {\n\
    \        return true\n    }\n    if n == 35 {\n        return true\n    }\n  \
    \  if n == 36 {\n        return true\n    }\n    if n == 37 {\n        return\
    \ true\n    }\n    if n == 38 {\n        return true\n    }\n    if n == 39 {\n\
    \        return true\n    }\n    if n == 40 {\n        return true\n    }\n  \
    \  if n == 41 {\n        return true\n    }\n    if n == 42 {\n        return\
    \ true\n    }\n    if n == 43 {\n        return true\n    }\n    if n == 44 {\n\
    \        return true\n    }\n    if n == 45 {\n        return true\n    }\n  \
    \  if n == 46 {\n        return true\n    }\n    if n == 47 {\n        return\
    \ true\n    }\n    if n == 48 {\n        return true\n    }\n    if n == 49 {\n\
    \        return true\n    }\n    if n == 50 {\n        return true\n    }\n  \
    \  if n == 51 {\n        return true\n    }\n    if n == 52 {\n        return\
    \ \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n:\
    \ 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) ==\
    \ true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5xbufwk6.swift:200:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmp5xbufwk6.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmp5xbufwk6.swift:172:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmp5xbufwk6.swift:176:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n % 2 == 0 {\n        return false\n    }\n    if n % 3 == 0 {\n        return\
    \ false\n    }\n    let m = Int(sqrt(Double(n)))\n    for _ in 0..<m {\n     \
    \   if n % m == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9lwa86xq.swift:33:17: error: cannot find 'sqrt' in scope\n    let\
    \ m = Int(sqrt(Double(n)))\n                ^~~~\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n == 2\
    \ {\n        return true\n    }\n    if n == 3 {\n        return true\n    }\n\
    \    if n == 4 {\n        return true\n    }\n    if n == 5 {\n        return\
    \ true\n    }\n    if n == 6 {\n        return true\n    }\n    if n == 7 {\n\
    \        return true\n    }\n    if n == 8 {\n        return true\n    }\n   \
    \ if n == 9 {\n        return true\n    }\n    if n == 10 {\n        return true\n\
    \    }\n    if n == 11 {\n        return true\n    }\n    if n == 12 {\n     \
    \   return true\n    }\n    if n == 13 {\n        return true\n    }\n    if n\
    \ == 14 {\n        return true\n    }\n    if n == 15 {\n        return true\n\
    \    }\n    if n == 16 {\n        return true\n    }\n    if n == 17 {\n     \
    \   return true\n    }\n    if n == 18 {\n        return true\n    }\n    if n\
    \ == 19 {\n        return true\n    }\n    if n == 20 {\n        return true\n\
    \    }\n    if n == 21 {\n        return true\n    }\n    if n == 22 {\n     \
    \   return true\n    }\n    if n == 23 {\n        return true\n    }\n    if n\
    \ == 24 {\n        return true\n    }\n    if n == 25 {\n        return true\n\
    \    }\n    if n == 26 {\n        return true\n    }\n    if n == 27 {\n     \
    \   return true\n    }\n    if n == 28 {\n        return true\n    }\n    if n\
    \ == 29 {\n        return true\n    }\n    if n == 30 {\n        return true\n\
    \    }\n    if n == 31 {\n        return true\n    }\n    if n == 32 {\n     \
    \   return true\n    }\n    if n == 33 {\n        return true\n    }\n    if n\
    \ == 34 {\n        return true\n    }\n    if n == 35 {\n        return true\n\
    \    }\n    if n == 36 {\n        return true\n    }\n    if n == 37 {\n     \
    \   return true\n    }\n    if n == 38 {\n        return true\n    }\n    if n\
    \ == 39 {\n        return true\n    }\n    if n == 40 {\n        return true\n\
    \    }\n    if n == 41 {\n        return true\n    }\n    if n == 42 {\n     \
    \   return true\n    }\n    if n == 43 {\n        return true\n    }\n    if n\
    \ == 44 {\n        return true\n    }\n    if n == 45 {\n        return true\n\
    \    }\n    if n == 46 {\n        return true\n    }\n    if n == 47 {\n     \
    \   return true\n    }\n    if n == 48 {\n        return true\n    }\n    if n\
    \ == 49 {\n        return true\n    }\n    if n == 50 {\n        return true\n\
    \    }\n    if n == 51 {\n        return true\n    }\n    if n == 52 {\n\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5agu_ogl.swift:200:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmp5agu_ogl.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmp5agu_ogl.swift:176:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    var i = 2\n    var j = 3\n\
    \    var k = 3\n    var m = 2\n    while i <= n {\n        if n % i == 0 {\n \
    \           return false\n        }\n        if m == n {\n            return true\n\
    \        }\n        if m % i == 0 {\n            return false\n        }\n   \
    \     if m % j == 0 {\n            return false\n        }\n        if m % k ==\
    \ 0 {\n            return false\n        }\n        i += 2\n        j += 2\n \
    \       k += 2\n        m += 2\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpvfp__ou4/tmpvfp__ou4.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b09ee739c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09ee430b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09ee430988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09ee42f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfp__ou4                        0x0000563830bf62b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b09ee925460 __libc_start_main +
    245

    6    tmpvfp__ou4                        0x0000563830bf5ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824476
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n == 3 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    if n % 3 == 0 {\n        return false\n    }\n    var i =\
    \ 5\n    var s = 2\n    while i * i <= n {\n        if n % i == 0 {\n        \
    \    return false\n        }\n        s += 2\n        i += 6\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmp6_2rd4nx/tmp6_2rd4nx.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1249f0cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1249c03b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1249c03988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1249c027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6_2rd4nx                        0x00005637700f277d <unavailable> + 6013

    5    libc.so.6                          0x00002b124a0f8460 __libc_start_main +
    245

    6    tmp6_2rd4nx                        0x00005637700f1ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824476
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n % 2 == 0 {\n        return false\n    }\n    if n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    var s = 2\n    while i * i <= n {\n       \
    \ if n % i == 0 {\n            return false\n        }\n        i += s\n     \
    \   s += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmp07krbmi9/tmp07krbmi9.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21ea88fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21ea586b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21ea586988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21ea5857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp07krbmi9                        0x000055d3bd28f80a <unavailable> + 6154

    5    libc.so.6                          0x00002b21eaa7b460 __libc_start_main +
    245

    6    tmp07krbmi9                        0x000055d3bd28eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824475
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    var i = 2\n    var j = 3\n\
    \    var k = n - 1\n    while i <= k {\n        if n % i == 0 {\n            return\
    \ false\n        }\n        if j % i == 0 {\n            return false\n      \
    \  }\n        i += 2\n        j += 2\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmprjaq225c/tmprjaq225c.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b79d33dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b79d30d6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b79d30d6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b79d30d57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprjaq225c                        0x000055b6bbeeb6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b79d35cb460 __libc_start_main +
    245

    6    tmprjaq225c                        0x000055b6bbeeaef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824476
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n % 2 == 0 {\n        return false\n    }\n    if n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    var j = 3\n    var k = n - 1\n    while i <=\
    \ k {\n        if n % i == 0 {\n            return false\n        }\n        if\
    \ n % j == 0 {\n            return false\n        }\n        i += 2\n        j\
    \ += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824476
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n == 3 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    var j = (3 * n) + 1\n    var k = (3 * n) +\
    \ 2\n    while i <= j {\n        if i % n == 0 {\n            return false\n \
    \       }\n        if k % n == 0 {\n            return false\n        }\n    \
    \    i += 2\n        k += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmph8hbsffj/tmph8hbsffj.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0351b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba034eb0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba034eb0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba034eaf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph8hbsffj                        0x000055c216c0b2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ba0353a5460 __libc_start_main +
    245

    6    tmph8hbsffj                        0x000055c216c0aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n == 4 {\n        return true\n    }\n    if n == 6 {\n        return true\n\
    \    }\n    if n == 8 {\n        return true\n    }\n    if n == 9 {\n       \
    \ return true\n    }\n    if n == 10 {\n        return true\n    }\n    if n ==\
    \ 11 {\n        return true\n    }\n    if n == 12 {\n        return true\n  \
    \  }\n    if n == 13 {\n        return true\n    }\n    if n == 14 {\n       \
    \ return true\n    }\n    if n == 15 {\n        return true\n    }\n    if n ==\
    \ 16 {\n        return true\n    }\n    if n == 17 {\n        return true\n  \
    \  }\n    if n == 18 {\n        return true\n    }\n    if n == 19 {\n       \
    \ return true\n    }\n    if n == 20 {\n        return true\n    }\n    if n ==\
    \ 21 {\n        return true\n    }\n    if n == 22 {\n        return true\n  \
    \  }\n    if n == 23 {\n        return true\n    }\n    if n == 24 {\n       \
    \ return true\n    }\n    if n == 25 {\n        return true\n    }\n    if n ==\
    \ 26 {\n        return true\n    }\n    if n == 27 {\n        return true\n  \
    \  }\n    if n == 28 {\n        return true\n    }\n    if n == 29 {\n       \
    \ return true\n    }\n    if n == 30 {\n        return true\n    }\n    if n ==\
    \ 31 {\n        return true\n    }\n    if n == 32 {\n        return true\n  \
    \  }\n    if n == 33 {\n        return true\n    }\n    if n == 34 {\n       \
    \ return true\n    }\n    if n == 35 {\n        return true\n    }\n    if n ==\
    \ 36 {\n        return true\n    }\n    if n == 37 {\n        return true\n  \
    \  }\n    if n == 38 {\n        return true\n    }\n    if n == 39 {\n       \
    \ return true\n    }\n    if n == 40 {\n        return true\n    }\n    if n ==\
    \ 41 {\n        return true\n    }\n    if n == 42 {\n        return true\n  \
    \  }\n    if n == 43 {\n        return true\n    }\n    if n == 44 {\n       \
    \ return true\n    }\n    if n == 45 {\n        return true\n    }\n    if n ==\
    \ 46 {\n        return true\n    }\n    if n == 47 {\n        return true\n  \
    \  }\n    if n == 48 {\n        return true\n    }\n    if n == 49 {\n       \
    \ return true\n    }\n    if n == 50 {\n        return true\n    }\n    if n ==\
    \ 51 {\n        return true\n    }\n    if n == 52 {\n        return true\n  \
    \  }\n    if n == 53 {\n        return true\n    }\n    if n == 54 {\n       \
    \ return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmph9bya_2v.swift:200:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmph9bya_2v.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmph9bya_2v.swift:172:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmph9bya_2v.swift:176:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    var i = 5\n    var j = (n\
    \ - 1) / 2\n    var k = n - 1\n    while i * i <= k {\n        if n % i == 0 {\n\
    \            return false\n        }\n        i += 2\n        j = (k - 1) / 2\n\
    \        k = n - 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824476
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    var i = 5\n    var j = (3\
    \ * n) + 1\n    var k = (3 * n) + 3\n    while i <= j {\n        if i % k == 0\
    \ {\n            return false\n        }\n        i += 2\n        k += 2\n   \
    \ }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpcnulyy9u/tmpcnulyy9u.swift:66: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2bf28d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2bf25ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2bf25cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2bf25cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcnulyy9u                        0x000055da977b26fb <unavailable> + 5883

    5    libc.so.6                          0x00002b2bf2ac1460 __libc_start_main +
    245

    6    tmpcnulyy9u                        0x000055da977b1ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n == 3 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    if n % 3 == 0 {\n        return false\n    }\n    let m =\
    \ Int(sqrt(Double(n)))\n    for _ in 0..<m {\n        if n % Int(pow(Double(2),\
    \ Double(Int(m)))) != 0 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpk0mfaze0.swift:36:17: error: cannot find 'sqrt' in scope\n    let\
    \ m = Int(sqrt(Double(n)))\n                ^~~~\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n == 2\
    \ {\n        return true\n    }\n    if n == 3 {\n        return true\n    }\n\
    \    if n % 2 == 0 {\n        return false\n    }\n    var i = 5\n    var j =\
    \ (3 * n) + 1\n    var k = (3 * n) + 3\n    while i <= j {\n        if i % k ==\
    \ 0 {\n            return false\n        }\n        i += 2\n        k += 2\n \
    \   }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmp6e8nfxsc/tmp6e8nfxsc.swift:66: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad7134edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad7131e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad7131e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad7131e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6e8nfxsc                        0x0000563dfa9bc6fb <unavailable> + 5883

    5    libc.so.6                          0x00002ad7136d9460 __libc_start_main +
    245

    6    tmp6e8nfxsc                        0x0000563dfa9bbef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n == 4 {\n        return true\n    }\n    if n == 5 {\n        return true\n\
    \    }\n    if n == 6 {\n        return true\n    }\n    if n == 7 {\n       \
    \ return true\n    }\n    if n == 8 {\n        return true\n    }\n    if n ==\
    \ 9 {\n        return true\n    }\n    if n == 10 {\n        return true\n   \
    \ }\n    if n == 11 {\n        return true\n    }\n    if n == 12 {\n        return\
    \ true\n    }\n    if n == 13 {\n        return true\n    }\n    if n == 14 {\n\
    \        return true\n    }\n    if n == 15 {\n        return true\n    }\n  \
    \  if n == 16 {\n        return true\n    }\n    if n == 17 {\n        return\
    \ true\n    }\n    if n == 18 {\n        return true\n    }\n    if n == 19 {\n\
    \        return true\n    }\n    if n == 20 {\n        return true\n    }\n  \
    \  if n == 21 {\n        return true\n    }\n    if n == 22 {\n        return\
    \ true\n    }\n    if n == 23 {\n        return true\n    }\n    if n == 24 {\n\
    \        return true\n    }\n    if n == 25 {\n        return true\n    }\n  \
    \  if n == 26 {\n        return true\n    }\n    if n == 27 {\n        return\
    \ true\n    }\n    if n == 28 {\n        return true\n    }\n    if n == 29 {\n\
    \        return true\n    }\n    if n == 30 {\n        return true\n    }\n  \
    \  if n == 31 {\n        return true\n    }\n    if n == 32 {\n        return\
    \ true\n    }\n    if n == 33 {\n        return true\n    }\n    if n == 34 {\n\
    \        return true\n    }\n    if n == 35 {\n        return true\n    }\n  \
    \  if n == 36 {\n        return true\n    }\n    if n == 37 {\n        return\
    \ true\n    }\n    if n == 38 {\n        return true\n    }\n    if n == 39 {\n\
    \        return true\n    }\n    if n == 40 {\n        return true\n    }\n  \
    \  if n == 41 {\n        return true\n    }\n    if n == 42 {\n        return\
    \ true\n    }\n    if n == 43 {\n        return true\n    }\n    if n == 44 {\n\
    \        return true\n    }\n    if n == 45 {\n        return true\n    }\n  \
    \  if n == 46 {\n        return true\n    }\n    if n == 47 {\n        return\
    \ true\n    }\n    if n == 48 {\n        return true\n    }\n    if n == 49 {\n\
    \        return true\n    }\n    if n == 50 {\n        return true\n    }\n  \
    \  if n == 51 {\n        return true\n    }\n    if n == 52 {\n        return\
    \ \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n:\
    \ 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) ==\
    \ true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5xbufwk6.swift:200:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmp5xbufwk6.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmp5xbufwk6.swift:172:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmp5xbufwk6.swift:176:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n % 2 == 0 {\n        return false\n    }\n    var i = 5\n    var s: Int\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            return false\n \
    \       }\n        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmp8cyh1w4r/tmp8cyh1w4r.swift:65: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0a92d17c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0a92a0eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0a92a0e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0a92a0d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8cyh1w4r                        0x00005653e05bd77d <unavailable> + 6013

    5    libc.so.6                          0x00002b0a92f03460 __libc_start_main +
    245

    6    tmp8cyh1w4r                        0x00005653e05bcef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824476
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\n    if n == 2\
    \ {\n        return true\n    }\n\n    if n % 2 == 0 {\n        return false\n\
    \    }\n\n    var i = 2\n    var j = 3\n    var k = 3\n\n    while i <= n {\n\
    \        if n % i == 0 {\n            return false\n        }\n\n        if k\
    \ % i == 0 {\n            return false\n        }\n\n        i += 2\n        j\
    \ += 2\n        k += 2\n    }\n\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmp9id4ssoz/tmp9id4ssoz.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b773eba1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b773e898b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b773e898988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b773e8977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9id4ssoz                        0x0000559d330586fb <unavailable> + 5883

    5    libc.so.6                          0x00002b773ed8d460 __libc_start_main +
    245

    6    tmp9id4ssoz                        0x0000559d33057ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824476
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n == 2\
    \ {\n        return true\n    }\n    if n == 3 {\n        return true\n    }\n\
    \    if n % 2 == 0 {\n        return false\n    }\n    if n % 3 == 0 {\n     \
    \   return false\n    }\n    var i = 5\n    var s: Int\n    while i * i <= n {\n\
    \        if n % i == 0 {\n            return false\n        }\n        i += 6\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpc8nl2pse/tmpc8nl2pse.swift:68: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaabd466c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaabd15db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaabd15d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaabd15c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc8nl2pse                        0x000055b2224d177d <unavailable> + 6013

    5    libc.so.6                          0x00002aaabd652460 __libc_start_main +
    245

    6    tmpc8nl2pse                        0x000055b2224d0ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n == 2\
    \ {\n        return true\n    }\n    if n == 3 {\n        return true\n    }\n\
    \    if n == 4 {\n        return true\n    }\n    if n == 5 {\n        return\
    \ true\n    }\n    if n == 6 {\n        return true\n    }\n    if n == 7 {\n\
    \        return true\n    }\n    if n == 8 {\n        return true\n    }\n   \
    \ if n == 9 {\n        return true\n    }\n    if n == 10 {\n        return true\n\
    \    }\n    if n == 11 {\n        return true\n    }\n    if n == 12 {\n     \
    \   return true\n    }\n    if n == 13 {\n        return true\n    }\n    if n\
    \ == 14 {\n        return true\n    }\n    if n == 15 {\n        return true\n\
    \    }\n    if n == 16 {\n        return true\n    }\n    if n == 17 {\n     \
    \   return true\n    }\n    if n == 18 {\n        return true\n    }\n    if n\
    \ == 19 {\n        return true\n    }\n    if n == 20 {\n        return true\n\
    \    }\n    if n == 21 {\n        return true\n    }\n    if n == 22 {\n     \
    \   return true\n    }\n    if n == 23 {\n        return true\n    }\n    if n\
    \ == 24 {\n        return true\n    }\n    if n == 25 {\n        return true\n\
    \    }\n    if n == 26 {\n        return true\n    }\n    if n == 27 {\n     \
    \   return true\n    }\n    if n == 28 {\n        return true\n    }\n    if n\
    \ == 29 {\n        return true\n    }\n    if n == 30 {\n        return true\n\
    \    }\n    if n == 31 {\n        return true\n    }\n    if n == 32 {\n     \
    \   return true\n    }\n    if n == 33 {\n        return true\n    }\n    if n\
    \ == 34 {\n        return true\n    }\n    if n == 35 {\n        return true\n\
    \    }\n    if n == 36 {\n        return true\n    }\n    if n == 37 {\n     \
    \   return true\n    }\n    if n == 38 {\n        return true\n    }\n    if n\
    \ == 39 {\n        return true\n    }\n    if n == 40 {\n        return true\n\
    \    }\n    if n == 41 {\n        return true\n    }\n    if n == 42 {\n     \
    \   return true\n    }\n    if n == 43 {\n        return true\n    }\n    if n\
    \ == 44 {\n        return true\n    }\n    if n == 45 {\n        return true\n\
    \    }\n    if n == 46 {\n        return true\n    }\n    if n == 47 {\n     \
    \   return true\n    }\n    if n == 48 {\n        return true\n    }\n    if n\
    \ == 49 {\n        return true\n    }\n    if n == 50 {\n        return true\n\
    \    }\n    if n == 51 {\n        return true\n    }\n    if n == 52 {\n\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5agu_ogl.swift:200:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmp5agu_ogl.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmp5agu_ogl.swift:176:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n == 2\
    \ {\n        return true\n    }\n    if n == 3 {\n        return true\n    }\n\
    \    if n % 2 == 0 {\n        return false\n    }\n    var i = 5\n    var j =\
    \ 3\n    var k = 3\n    while i * i <= n {\n        if n % i == 0 {\n        \
    \    return false\n        }\n        i += k\n        j += k\n        k *= 2\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmp90u0ob_9/tmp90u0ob_9.swift:68: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b544b56fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b544b266b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b544b266988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b544b2657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp90u0ob_9                        0x0000564c872b777d <unavailable> + 6013

    5    libc.so.6                          0x00002b544b75b460 __libc_start_main +
    245

    6    tmp90u0ob_9                        0x0000564c872b6ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n == 3 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    if n % 3 == 0 {\n        return false\n    }\n    let limit\
    \ = (sqrt(Double(n))).rounded(.up)\n    for d in 2...limit {\n        if n % d\
    \ == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpc9k8h8qn.swift:36:18: error: cannot find 'sqrt' in scope\n    let\
    \ limit = (sqrt(Double(n))).rounded(.up)\n                 ^~~~\n/tmp/tmpc9k8h8qn.swift:36:44:\
    \ error: cannot infer contextual base in reference to member 'up'\n    let limit\
    \ = (sqrt(Double(n))).rounded(.up)\n                                         \
    \ ~^~\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n == 3 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    if n % 3 == 0 {\n        return false\n    }\n    var i =\
    \ 5\n    var j = (3 * n) + 1\n    var k = (3 * n) + 2\n    while i <= j {\n  \
    \      if i % k == 0 {\n            return false\n        }\n        i += 6\n\
    \        k += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmpx60w01id/tmpx60w01id.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d6d96cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d6d663b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d6d663988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d6d6627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx60w01id                        0x000055ab1ce586fb <unavailable> + 5883

    5    libc.so.6                          0x00002b3d6db58460 __libc_start_main +
    245

    6    tmpx60w01id                        0x000055ab1ce57ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824476
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n == 3 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    if n % 3 == 0 {\n        return false\n    }\n    var i =\
    \ 5\n    var s = 2\n    while i * i <= n {\n        if n % i == 0 {\n        \
    \    return false\n        }\n        i += s\n        s += 2\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmperwuln06/tmperwuln06.swift:73: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b0dc8ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b0d981b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b0d981988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b0d9807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmperwuln06                        0x0000558309c8180a <unavailable> + 6154

    5    libc.so.6                          0x00002b0b0de76460 __libc_start_main +
    245

    6    tmperwuln06                        0x0000558309c80ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824476
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n % 2 == 0 {\n        return false\n    }\n    if n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    var j = 3\n    var k = 2\n    while i * j <=\
    \ n {\n        if n % i == 0 {\n            return false\n        }\n        if\
    \ n % j == 0 {\n            return false\n        }\n        if k % 3 == 0 {\n\
    \            return false\n        }\n        i += 2\n        j += 2\n       \
    \ k += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmp1f127qau/tmp1f127qau.swift:67: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2dbc23dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2dbbf34b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2dbbf34988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2dbbf337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1f127qau                        0x00005631206852b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b2dbc429460 __libc_start_main +
    245

    6    tmp1f127qau                        0x0000563120684ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824476
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    var i = 5\n    var j = (n\
    \ - 1) / 2\n    while i <= j {\n        if n % i == 0 {\n            return false\n\
    \        }\n        i += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824476
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n\
    \    var i = 2\n    var j = 3\n    while i <= n {\n        if n % i == 0 {\n \
    \           return false\n        }\n        i += j\n        j += 2\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpmgq34ney/tmpmgq34ney.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b58a8c23c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b58a891ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b58a891a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b58a89197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmgq34ney                        0x000055dd0c80a2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b58a8e0f460 __libc_start_main +
    245

    6    tmpmgq34ney                        0x000055dd0c809ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824476
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n\
    \    var i = 5\n    var s = 2\n    while i * i <= n {\n        if n % i == 0 {\n\
    \            return false\n        }\n        i += s\n        s += 2\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpmkdgdcbi/tmpmkdgdcbi.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b054c8e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b054c5e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b054c5e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b054c5df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmkdgdcbi                        0x0000563cbc6e380a <unavailable> + 6154

    5    libc.so.6                          0x00002b054cad5460 __libc_start_main +
    245

    6    tmpmkdgdcbi                        0x0000563cbc6e2ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    var i = 5\n    var j = 3\n\
    \    var m = Int(sqrt(Double(n)))\n    while i <= m {\n        if n % i == 0 {\n\
    \            return false\n        }\n        i += 2\n        j += 1\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7imzomwh.swift:32:17: error: cannot find 'sqrt' in scope\n    var\
    \ m = Int(sqrt(Double(n)))\n                ^~~~\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n == 2\
    \ {\n        return true\n    }\n    if n % 2 == 0 {\n        return false\n \
    \   }\n    var i = 2\n    var j = 3\n    while i <= n {\n        if n % i == 0\
    \ {\n            return false\n        }\n        if j > n / 2 {\n           \
    \ return true\n        }\n        i += 2\n        j += 2\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpqf7rams6/tmpqf7rams6.swift:65: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aceed290c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aceecf87b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aceecf87988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aceecf867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqf7rams6                        0x00005594c70086fb <unavailable> + 5883

    5    libc.so.6                          0x00002aceed47c460 __libc_start_main +
    245

    6    tmpqf7rams6                        0x00005594c7007ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824476
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n % 2 == 0 {\n        return false\n    }\n    if n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    var s = 2\n    while i * i <= n {\n       \
    \ if n % i == 0 {\n            return false\n        }\n        s += 2\n     \
    \   i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmp1g1yoq9w/tmp1g1yoq9w.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a880aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a87da1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a87da1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a87da07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1g1yoq9w                        0x000055dc7334b77d <unavailable> + 6013

    5    libc.so.6                          0x00002b5a88296460 __libc_start_main +
    245

    6    tmp1g1yoq9w                        0x000055dc7334aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824476
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    var i = 5\n\
    \    var s = 2\n    while i * i <= n {\n        if n % i == 0 || n % (i + 2) ==\
    \ 0 {\n            return false\n        }\n        i += s\n        s += 2\n \
    \   }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824476
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    var i = 5\n\
    \    var s = 2\n    while i * i <= n {\n        if n % i == 0 || n % (i + 2) ==\
    \ 0 {\n            return false\n        }\n        i += s\n        s += 6\n \
    \   }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmp85pbga02/tmp85pbga02.swift:67: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b124254fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1242246b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1242246988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b12422457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp85pbga02                        0x000055e092bc580a <unavailable> + 6154

    5    libc.so.6                          0x00002b124273b460 __libc_start_main +
    245

    6    tmp85pbga02                        0x000055e092bc4ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824476
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n % 2 == 0 {\n        return false\n    }\n    if n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    var j = 3\n    while i * i <= n {\n       \
    \ if n % i == 0 {\n            return false\n        }\n        if j > n / 2 {\n\
    \            return false\n        }\n        i += 2\n        j += 2\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824476
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    var i = 2\n    var j = 3\n\
    \    var k = n - 1\n    while i <= k {\n        if n % i == 0 {\n            return\
    \ false\n        }\n        if j % i == 0 {\n            return false\n      \
    \  }\n        if k % i == 0 {\n            return false\n        }\n        i\
    \ += 2\n        j += 2\n        k -= 1\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpu7mh_dle/tmpu7mh_dle.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba72d007c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba72ccfeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba72ccfe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba72ccfd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu7mh_dle                        0x000055a8ab52a2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ba72d1f3460 __libc_start_main +
    245

    6    tmpu7mh_dle                        0x000055a8ab529ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824476
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n % 2 == 0 {\n        return false\n    }\n    if n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    var j = 3\n    var k = 3\n    while i * j <=\
    \ n {\n        if n % i == 0 {\n            return false\n        }\n        if\
    \ n % j == 0 {\n            return false\n        }\n        if k % i == 0 {\n\
    \            return false\n        }\n        if k % j == 0 {\n            return\
    \ false\n        }\n        i += 2\n        j += 2\n        k += 2\n    }\n  \
    \  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpm3jsj1xy/tmpm3jsj1xy.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b994b702c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b994b3f9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b994b3f9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b994b3f87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm3jsj1xy                        0x00005629c1ad62b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b994b8ee460 __libc_start_main +
    245

    6    tmpm3jsj1xy                        0x00005629c1ad5ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n == 2\
    \ {\n        return true\n    }\n    if n == 3 {\n        return true\n    }\n\
    \    if n % 2 == 0 {\n        return false\n    }\n    if n % 3 == 0 {\n     \
    \   return false\n    }\n    let m = Int(sqrt(Double(n)))\n    for _ in 0..<m\
    \ {\n        if n % Int(pow(Double(2), Double(Int(m)))) != 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjr8343j9.swift:33:17: error: cannot find 'sqrt' in scope\n    let\
    \ m = Int(sqrt(Double(n)))\n                ^~~~\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n == 3 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    if n % 3 == 0 {\n        return false\n    }\n    var i =\
    \ 5\n    var s = 2\n    while i * i <= n {\n        if n % i == 0 {\n        \
    \    return false\n        }\n        if i == 3 {\n            if n % i == 0 {\n\
    \                return false\n            }\n        }\n        i += s\n    \
    \    s *= 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824476
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n\
    \    var i = 5\n    var j = 3\n    while i * i <= n {\n        if n % i == 0 {\n\
    \            return false\n        }\n        i += j\n        j += 2\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmp1t_1e86z/tmp1t_1e86z.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab758774c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab75846bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab75846b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab75846a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1t_1e86z                        0x0000564bf73a54ff <unavailable> + 5375

    5    libc.so.6                          0x00002ab758960460 __libc_start_main +
    245

    6    tmp1t_1e86z                        0x0000564bf73a4ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824476
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n == 2\
    \ {\n        return true\n    }\n    if n == 3 {\n        return true\n    }\n\
    \    if n % 2 == 0 {\n        return false\n    }\n    var i = 5\n    var j =\
    \ 3\n    var k = 2\n    while i * j <= n {\n        if n % i == 0 {\n        \
    \    return false\n        }\n        if n % j == 0 {\n            return false\n\
    \        }\n        if k % i == 0 {\n            return false\n        }\n   \
    \     if k % j == 0 {\n            return false\n        }\n        i += 2\n \
    \       j += 2\n        k += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n % 2 == 0 {\n        return false\n    }\n    if n % 3 == 0 {\n        return\
    \ false\n    }\n    let m = Int(sqrt(Double(n)))\n    for _ in 0..<m {\n     \
    \   if n % Int(pow(Double(2), Double(Int(m))) == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp6hg11scy.swift:35:56: error: expected ',' separator\n        if\
    \ n % Int(pow(Double(2), Double(Int(m))) == 0 {\n                            \
    \                           ^\n                                              \
    \        ,\n/tmp/tmp6hg11scy.swift:33:17: error: cannot find 'sqrt' in scope\n\
    \    let m = Int(sqrt(Double(n)))\n                ^~~~\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\n    var i = 2\n\
    \    var j = 2\n    var k = n - 1\n\n    while i <= k {\n        if n % i == 0\
    \ {\n            return false\n        }\n\n        i += j\n        j += 2\n \
    \   }\n\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpow7906fo/tmpow7906fo.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f6d5eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f6d2e5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f6d2e5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f6d2e47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpow7906fo                        0x000055ce9c9db6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b7f6d7da460 __libc_start_main +
    245

    6    tmpow7906fo                        0x000055ce9c9daef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824475
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n == 3 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    if n % 3 == 0 {\n        return false\n    }\n    var i =\
    \ 5\n    var s = 2\n    while i * i <= n {\n        if n % i == 0 {\n        \
    \    return false\n        }\n        s += 2\n        i += 6\n    }\n    return\
    \ s == n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpmh3d474t/tmpmh3d474t.swift:62: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b20df2d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b20defcab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b20defca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b20defc97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmh3d474t                        0x00005558d3be22b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b20df4bf460 __libc_start_main +
    245

    6    tmpmh3d474t                        0x00005558d3be1ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824476
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n % 2 == 0 {\n        return false\n    }\n    if n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    var j = 3\n    var k = n - 1\n    while i <=\
    \ k {\n        if n % i == 0 {\n            return false\n        }\n        if\
    \ n % j == 0 {\n            return false\n        }\n        i += 2\n        j\
    \ += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824476
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    var i = 2\n    var j = 3\n\
    \    while i <= n {\n        if n % i == 0 {\n            return false\n     \
    \   }\n        if j > n / 2 {\n            return false\n        }\n        i\
    \ += 2\n        j += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmpvdifwuf9/tmpvdifwuf9.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b35e6171c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b35e5e68b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b35e5e68988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b35e5e677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvdifwuf9                        0x000055a16cbb72b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b35e635d460 __libc_start_main +
    245

    6    tmpvdifwuf9                        0x000055a16cbb6ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824476
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n % 2 == 0 {\n        return false\n    }\n    if n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    var s = 2\n    while i * i <= n {\n       \
    \ if n % i == 0 {\n            return false\n        }\n        s += 2\n     \
    \   i += 6\n    }\n    return s == n\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmpjx9zbve4/tmpjx9zbve4.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7fb52dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7fb4fd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7fb4fd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7fb4fd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjx9zbve4                        0x000055a22a8802b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b7fb54cb460 __libc_start_main +
    245

    6    tmpjx9zbve4                        0x000055a22a87fef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824476
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n % 2 == 0 {\n        return false\n    }\n    var i = 5\n    var j = (n\
    \ - 1) / 2\n    while i <= j {\n        if n % i == 0 {\n            return false\n\
    \        }\n        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpomkmp7ok/tmpomkmp7ok.swift:66: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee629c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee626b8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee626b8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee626b77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpomkmp7ok                        0x000055e8c076880a <unavailable> + 6154

    5    libc.so.6                          0x00002aee62bad460 __libc_start_main +
    245

    6    tmpomkmp7ok                        0x000055e8c0767ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824476
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    var i = 5\n\
    \    var s = 2\n    while i * i <= n {\n        if n % i == 0 || n % (i + 2) ==\
    \ 0 {\n            return false\n        }\n        i += 6\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824476
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n\
    \    var i = 5\n    var s = 2\n    while i * i <= n {\n        if n % i == 0 {\n\
    \            return false\n        }\n        s += 2\n        i += 6\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpdbuhjg7z/tmpdbuhjg7z.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c45493c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c4518ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c4518a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c451897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdbuhjg7z                        0x000055e2f082f4ff <unavailable> + 5375

    5    libc.so.6                          0x00002b8c4567f460 __libc_start_main +
    245

    6    tmpdbuhjg7z                        0x000055e2f082eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824477
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n % 2 == 0 {\n        return false\n    }\n    if n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    var s: Int\n    while i * i <= n {\n      \
    \  if n % i == 0 {\n            return false\n        }\n        i += 6\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpxx_fywmg/tmpxx_fywmg.swift:68: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adea0268c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade9ff5fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade9ff5f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade9ff5e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxx_fywmg                        0x000055756879577d <unavailable> + 6013

    5    libc.so.6                          0x00002adea0454460 __libc_start_main +
    245

    6    tmpxx_fywmg                        0x0000557568794ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824476
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n % 2 == 0 {\n        return false\n    }\n    if n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    var s = 2\n    while i * i <= n {\n       \
    \ if n % i == 0 {\n            return false\n        }\n        s += i\n     \
    \   i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmpw92u35j7/tmpw92u35j7.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada520f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada51dedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada51ded988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada51dec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw92u35j7                        0x0000556442bc677d <unavailable> + 6013

    5    libc.so.6                          0x00002ada522e2460 __libc_start_main +
    245

    6    tmpw92u35j7                        0x0000556442bc5ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824477
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n\
    \    var i = 5\n    var j = (n - 1) / 2\n    var k = (n - 3) / 2\n    var l =\
    \ (n - 5) / 2\n    var m = n - 6\n    while i <= m {\n        if i == n {\n  \
    \          return true\n        }\n        if i % j == 0 {\n            return\
    \ false\n        }\n        if i % k == 0 {\n            return false\n      \
    \  }\n        if i % l == 0 {\n            return false\n        }\n        i\
    \ += 6\n        j += 6\n        k += 6\n        l += 6\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmphz22ocs7/tmphz22ocs7.swift:68: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0ccd7fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0cca76b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0cca76988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0cca757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphz22ocs7                        0x00005576f4d3232b <unavailable> + 4907

    5    libc.so.6                          0x00002ab0ccf6b460 __libc_start_main +
    245

    6    tmphz22ocs7                        0x00005576f4d31ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n == 4 {\n        return true\n    }\n    if n == 5 {\n        return true\n\
    \    }\n    if n == 6 {\n        return true\n    }\n    if n == 7 {\n       \
    \ return true\n    }\n    if n == 8 {\n        return true\n    }\n    if n ==\
    \ 9 {\n        return true\n    }\n    if n == 10 {\n        return true\n   \
    \ }\n    if n == 11 {\n        return true\n    }\n    if n == 12 {\n        return\
    \ true\n    }\n    if n == 13 {\n        return true\n    }\n    if n == 14 {\n\
    \        return true\n    }\n    if n == 15 {\n        return true\n    }\n  \
    \  if n == 16 {\n        return true\n    }\n    if n == 17 {\n        return\
    \ true\n    }\n    if n == 18 {\n        return true\n    }\n    if n == 19 {\n\
    \        return true\n    }\n    if n == 20 {\n        return true\n    }\n  \
    \  if n == 21 {\n        return true\n    }\n    if n == 22 {\n        return\
    \ true\n    }\n    if n == 23 {\n        return true\n    }\n    if n == 24 {\n\
    \        return true\n    }\n    if n == 25 {\n        return true\n    }\n  \
    \  if n == 26 {\n        return true\n    }\n    if n == 27 {\n        return\
    \ true\n    }\n    if n == 28 {\n        return true\n    }\n    if n == 29 {\n\
    \        return true\n    }\n    if n == 30 {\n        return true\n    }\n  \
    \  if n == 31 {\n        return true\n    }\n    if n == 32 {\n        return\
    \ true\n    }\n    if n == 33 {\n        return true\n    }\n    if n == 34 {\n\
    \        return true\n    }\n    if n == 35 {\n        return true\n    }\n  \
    \  if n == 36 {\n        return true\n    }\n    if n == 37 {\n        return\
    \ true\n    }\n    if n == 38 {\n        return true\n    }\n    if n == 39 {\n\
    \        return true\n    }\n    if n == 40 {\n        return true\n    }\n  \
    \  if n == 41 {\n        return true\n    }\n    if n == 42 {\n        return\
    \ true\n    }\n    if n == 43 {\n        return true\n    }\n    if n == 44 {\n\
    \        return true\n    }\n    if n == 45 {\n        return true\n    }\n  \
    \  if n == 46 {\n        return true\n    }\n    if n == 47 {\n        return\
    \ true\n    }\n    if n == 48 {\n        return true\n    }\n    if n == 49 {\n\
    \        return true\n    }\n    if n == 50 {\n        return true\n    }\n  \
    \  if n == 51 {\n        return true\n    }\n    if n == 52 {\n        return\
    \ \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n:\
    \ 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) ==\
    \ true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5xbufwk6.swift:200:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmp5xbufwk6.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmp5xbufwk6.swift:172:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmp5xbufwk6.swift:176:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    var i = 5\n\
    \    var j = 3\n    var k = 2\n    while i * j <= n {\n        if n % i == 0 {\n\
    \            return false\n        }\n        if n % j == 0 {\n            return\
    \ false\n        }\n        if k % i == 0 {\n            return false\n      \
    \  }\n        if k % j == 0 {\n            return false\n        }\n        i\
    \ += 2\n        j += 2\n        k += 2\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824477
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n % 2 == 0 {\n        return false\n    }\n    var i = 5\n    var j = (3\
    \ * n) + 1\n    var k = n - 1\n    while i <= k {\n        if j % i == 0 {\n \
    \           return false\n        }\n        i += 2\n        j += 2\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmppfskpx3y/tmppfskpx3y.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7d22f54c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7d22c4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7d22c4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7d22c4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppfskpx3y                        0x0000557e051ad2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b7d23140460 __libc_start_main +
    245

    6    tmppfskpx3y                        0x0000557e051acef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824476
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    var i = 2\n    var j = 3\n\
    \    var k = n - 1\n    while i <= k {\n        if n % i == 0 {\n            return\
    \ false\n        }\n        i += 2\n        j += 2\n    }\n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpmmmpf8b6/tmpmmmpf8b6.swift:66: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9199dd7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9199aceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9199ace988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9199acd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmmmpf8b6                        0x000055dc151226fb <unavailable> + 5883

    5    libc.so.6                          0x00002b9199fc3460 __libc_start_main +
    245

    6    tmpmmmpf8b6                        0x000055dc15121ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824476
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n == 2\
    \ {\n        return true\n    }\n    if n == 3 {\n        return true\n    }\n\
    \    if n % 2 == 0 {\n        return false\n    }\n    if n % 3 == 0 {\n     \
    \   return false\n    }\n    var i = 5\n    var s = 2\n    while i * i <= n {\n\
    \        if n % i == 0 {\n            return false\n        }\n        s += i\n\
    \        i += 6\n    }\n    return s == n\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmp69s7gdzx/tmp69s7gdzx.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b047f463c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b047f15ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b047f15a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b047f1597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp69s7gdzx                        0x000055b40baf32b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b047f64f460 __libc_start_main +
    245

    6    tmp69s7gdzx                        0x000055b40baf2ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824477
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n % 2 == 0 {\n        return false\n    }\n    if n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    var s = 2\n    while i * i <= n {\n       \
    \ if n % i == 0 {\n            return false\n        }\n        if n == (3 + (i\
    \ + (i - 1)) / i) {\n            return true\n        }\n        i += s\n    \
    \    s += 2\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmpk4zjctys/tmpk4zjctys.swift:62: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b868e1cac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b868dec1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b868dec1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b868dec07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk4zjctys                        0x000055a7da1012b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b868e3b6460 __libc_start_main +
    245

    6    tmpk4zjctys                        0x000055a7da100ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824477
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n % 2 == 0 {\n        return false\n    }\n    if n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    var s = 2\n    while i * i <= n {\n       \
    \ if n % i == 0 {\n            return false\n        }\n        s += 2\n     \
    \   i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmp1g1yoq9w/tmp1g1yoq9w.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a880aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a87da1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a87da1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a87da07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1g1yoq9w                        0x000055dc7334b77d <unavailable> + 6013

    5    libc.so.6                          0x00002b5a88296460 __libc_start_main +
    245

    6    tmp1g1yoq9w                        0x000055dc7334aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824476
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    var i = 2\n    var j = 3\n\
    \    var k = 3\n    while i <= n {\n        if n % i == 0 {\n            return\
    \ false\n        }\n        if k % i == 0 {\n            return false\n      \
    \  }\n        if j % i == 0 {\n            return false\n        }\n        i\
    \ += 2\n        j += 2\n        k += 2\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmp5vf6od8d/tmp5vf6od8d.swift:73: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1494aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1491a1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab1491a1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1491a07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5vf6od8d                        0x000056298672e6fb <unavailable> + 5883

    5    libc.so.6                          0x00002ab149696460 __libc_start_main +
    245

    6    tmp5vf6od8d                        0x000056298672def9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824477
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n % 2 == 0 {\n        return false\n    }\n    if n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    var s: Int = 0\n    while i * i <= n {\n  \
    \      if n % i == 0 {\n            return false\n        }\n        s += i\n\
    \        i += 6\n    }\n    return s == n\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmpogu_iyt2/tmpogu_iyt2.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1b8b9fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1b8896b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab1b8896988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1b88957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpogu_iyt2                        0x000055af79ab12b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ab1b8d8b460 __libc_start_main +
    245

    6    tmpogu_iyt2                        0x000055af79ab0ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824476
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  var i = 2\n    var j = 2\n    var k = n - 1\n    while i <= k {\n        if\
    \ n % i == 0 {\n            return false\n        }\n        i += 2\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpet2469zy/tmpet2469zy.swift:62: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1004f21c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1004c18b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1004c18988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1004c177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpet2469zy                        0x0000562a6cb036fb <unavailable> + 5883

    5    libc.so.6                          0x00002b100510d460 __libc_start_main +
    245

    6    tmpet2469zy                        0x0000562a6cb02ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824477
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    var i = 5\n\
    \    var s = 2\n    while i * i <= n {\n        if n % i == 0 || n % (i + 2) ==\
    \ 0 {\n            return false\n        }\n        i += s\n        s += 6\n \
    \   }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmp85pbga02/tmp85pbga02.swift:67: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b124254fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1242246b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1242246988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b12422457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp85pbga02                        0x000055e092bc580a <unavailable> + 6154

    5    libc.so.6                          0x00002b124273b460 __libc_start_main +
    245

    6    tmp85pbga02                        0x000055e092bc4ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824476
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n == 2\
    \ {\n        return true\n    }\n    if n % 2 == 0 {\n        return false\n \
    \   }\n    var i = 5\n    var j = (3 * n) + 1\n    var k = (3 * n) + 3\n    while\
    \ i <= j {\n        if i % n == 0 {\n            return false\n        }\n   \
    \     i += k\n        j += k\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpd_hscisk/tmpd_hscisk.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab857f7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab857c72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab857c72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab857c717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd_hscisk                        0x00005596b67962b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ab858167460 __libc_start_main +
    245

    6    tmpd_hscisk                        0x00005596b6795ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n == 4 {\n        return true\n    }\n    if n == 6 {\n        return true\n\
    \    }\n    if n == 8 {\n        return true\n    }\n    if n == 9 {\n       \
    \ return true\n    }\n    if n == 10 {\n        return true\n    }\n    if n ==\
    \ 11 {\n        return true\n    }\n    if n == 12 {\n        return true\n  \
    \  }\n    if n == 13 {\n        return true\n    }\n    if n == 14 {\n       \
    \ return true\n    }\n    if n == 15 {\n        return true\n    }\n    if n ==\
    \ 16 {\n        return true\n    }\n    if n == 17 {\n        return true\n  \
    \  }\n    if n == 18 {\n        return true\n    }\n    if n == 19 {\n       \
    \ return true\n    }\n    if n == 20 {\n        return true\n    }\n    if n ==\
    \ 21 {\n        return true\n    }\n    if n == 22 {\n        return true\n  \
    \  }\n    if n == 23 {\n        return true\n    }\n    if n == 24 {\n       \
    \ return true\n    }\n    if n == 25 {\n        return true\n    }\n    if n ==\
    \ 26 {\n        return true\n    }\n    if n == 27 {\n        return true\n  \
    \  }\n    if n == 28 {\n        return true\n    }\n    if n == 29 {\n       \
    \ return true\n    }\n    if n == 30 {\n        return true\n    }\n    if n ==\
    \ 31 {\n        return true\n    }\n    if n == 32 {\n        return true\n  \
    \  }\n    if n == 33 {\n        return true\n    }\n    if n == 34 {\n       \
    \ return true\n    }\n    if n == 35 {\n        return true\n    }\n    if n ==\
    \ 36 {\n        return true\n    }\n    if n == 37 {\n        return true\n  \
    \  }\n    if n == 38 {\n        return true\n    }\n    if n == 39 {\n       \
    \ return true\n    }\n    if n == 40 {\n        return true\n    }\n    if n ==\
    \ 41 {\n        return true\n    }\n    if n == 42 {\n        return true\n  \
    \  }\n    if n == 43 {\n        return true\n    }\n    if n == 44 {\n       \
    \ return true\n    }\n    if n == 45 {\n        return true\n    }\n    if n ==\
    \ 46 {\n        return true\n    }\n    if n == 47 {\n        return true\n  \
    \  }\n    if n == 48 {\n        return true\n    }\n    if n == 49 {\n       \
    \ return true\n    }\n    if n == 50 {\n        return true\n    }\n    if n ==\
    \ 51 {\n        return true\n    }\n    if n == 52 {\n        return true\n  \
    \  }\n    if n == 53 {\n        return true\n    }\n    if n == 54 {\n       \
    \ return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpb792dc6l.swift:200:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmpb792dc6l.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmpb792dc6l.swift:172:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmpb792dc6l.swift:176:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824477
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    var i = 5\n\
    \    var s = 2\n    while i * i <= n {\n        if n % i == 0 {\n            return\
    \ false\n        }\n        i += s\n        s += 2\n    }\n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmp1govfeir/tmp1govfeir.swift:67: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b96b8984c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b96b867bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b96b867b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b96b867a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1govfeir                        0x0000557141ea880a <unavailable> + 6154

    5    libc.so.6                          0x00002b96b8b70460 __libc_start_main +
    245

    6    tmp1govfeir                        0x0000557141ea7ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824477
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n % 2 == 0 {\n        return false\n    }\n    var i = 5\n    var j = (n\
    \ - 1) / 2\n    while i * i <= j {\n        if n % i == 0 {\n            return\
    \ false\n        }\n        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpe3j6cx94/tmpe3j6cx94.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b13658dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b13655d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b13655d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b13655d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe3j6cx94                        0x00005608a0be74ff <unavailable> + 5375

    5    libc.so.6                          0x00002b1365ac8460 __libc_start_main +
    245

    6    tmpe3j6cx94                        0x00005608a0be6ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824477
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n == 2\
    \ {\n        return true\n    }\n    if n == 3 {\n        return true\n    }\n\
    \    if n == 4 {\n        return true\n    }\n    if n == 6 {\n        return\
    \ true\n    }\n    if n == 8 {\n        return true\n    }\n    if n == 9 {\n\
    \        return true\n    }\n    if n == 10 {\n        return true\n    }\n  \
    \  if n == 12 {\n        return true\n    }\n    if n == 13 {\n        return\
    \ true\n    }\n    if n == 14 {\n        return true\n    }\n    if n == 15 {\n\
    \        return true\n    }\n    if n == 17 {\n        return true\n    }\n  \
    \  if n == 19 {\n        return true\n    }\n    if n == 20 {\n        return\
    \ true\n    }\n    if n == 21 {\n        return true\n    }\n    if n == 25 {\n\
    \        return true\n    }\n    if n == 27 {\n        return true\n    }\n  \
    \  if n == 29 {\n        return true\n    }\n    if n == 31 {\n        return\
    \ true\n    }\n    if n == 33 {\n        return true\n    }\n    if n == 35 {\n\
    \        return true\n    }\n    if n == 37 {\n        return true\n    }\n  \
    \  if n == 39 {\n        return true\n    }\n    if n == 41 {\n        return\
    \ true\n    }\n    if n == 43 {\n        return true\n    }\n    if n == 45 {\n\
    \        return true\n    }\n    if n == 47 {\n        return true\n    }\n  \
    \  if n == 49 {\n        return true\n    }\n    if n == 51 {\n        return\
    \ true\n    }\n    if n == 53 {\n        return true\n    }\n    if n == 55 {\n\
    \        return true\n    }\n    if n == 57 {\n        return true\n    }\n  \
    \  if n == 59 {\n        return true\n    }\n    if n == 61 {\n        return\
    \ true\n    }\n    if n == 65 {\n        return true\n    }\n    if n == 67 {\n\
    \        return true\n    }\n    if n == 69 {\n        return true\n    }\n  \
    \  if n == 71 {\n        return true\n    }\n    if n == 73 {\n        return\
    \ true\n    }\n    if n == 75 {\n        return true\n    }\n    if n == 77 {\n\
    \        return true\n    }\n    if n == 79 {\n        return true\n    }\n  \
    \  if n == 81 {\n        return true\n    }\n    if n == 83 {\n        return\
    \ true\n    }\n    if n == 85 {\n        return true\n    }\n    if n == 87 {\n\
    \        return true\n    }\n    if n == 89 {\n        return true\n    }\n  \
    \  if n == 91 {\n        return true\n    }\n    if n == 93 {\n        return\
    \ true\n    }\n    if n == 95 || n == 97 {\n        return true\n    }\n    if\
    \ \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n:\
    \ 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) ==\
    \ true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp1rgsimqm.swift:171:7: error: expected expression, var, or let in\
    \ 'if' condition\n    if \n      ^\n"
  stdout: ''
  timestamp: 1659824477
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n\
    \    var i = 5\n    var j = (n - 1) / 2\n    while i <= j {\n        if n % i\
    \ == 0 {\n            return false\n        }\n        i += 6\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpgu_q6c4m/tmpgu_q6c4m.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22d549ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22d5191b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22d5191988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22d51907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgu_q6c4m                        0x000055f45fb3880a <unavailable> + 6154

    5    libc.so.6                          0x00002b22d5686460 __libc_start_main +
    245

    6    tmpgu_q6c4m                        0x000055f45fb37ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824477
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n == 2\
    \ {\n        return true\n    }\n    if n % 2 == 0 {\n        return false\n \
    \   }\n    var i = 2\n    var j = 3\n    var k = 3\n    var m = n - 1\n    while\
    \ i <= m {\n        if n % i == 0 {\n            return false\n        }\n   \
    \     if k % i == 0 {\n            return false\n        }\n        if j % i ==\
    \ 0 {\n            return false\n        }\n        i += 2\n        j += 2\n \
    \       k += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmpky_u79kx/tmpky_u79kx.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed28558c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed2824fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed2824f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed2824e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpky_u79kx                        0x00005653cfc876fb <unavailable> + 5883

    5    libc.so.6                          0x00002aed28744460 __libc_start_main +
    245

    6    tmpky_u79kx                        0x00005653cfc86ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824477
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n == 4 {\n        return true\n    }\n    if n == 6 {\n        return true\n\
    \    }\n    if n == 8 {\n        return true\n    }\n    if n == 9 {\n       \
    \ return true\n    }\n    if n == 10 {\n        return true\n    }\n    if n ==\
    \ 11 {\n        return true\n    }\n    if n == 12 {\n        return true\n  \
    \  }\n    if n == 13 {\n        return true\n    }\n    if n == 14 {\n       \
    \ return true\n    }\n    if n == 15 {\n        return true\n    }\n    if n ==\
    \ 16 {\n        return true\n    }\n    if n == 17 {\n        return true\n  \
    \  }\n    if n == 18 {\n        return true\n    }\n    if n == 19 {\n       \
    \ return true\n    }\n    if n == 20 {\n        return true\n    }\n    if n ==\
    \ 21 {\n        return true\n    }\n    if n == 22 {\n        return true\n  \
    \  }\n    if n == 23 {\n        return true\n    }\n    if n == 24 {\n       \
    \ return true\n    }\n    if n == 25 {\n        return true\n    }\n    if n ==\
    \ 26 {\n        return true\n    }\n    if n == 27 {\n        return true\n  \
    \  }\n    if n == 28 {\n        return true\n    }\n    if n == 29 {\n       \
    \ return true\n    }\n    if n == 30 {\n        return true\n    }\n    if n ==\
    \ 31 {\n        return true\n    }\n    if n == 32 {\n        return true\n  \
    \  }\n    if n == 33 {\n        return true\n    }\n    if n == 34 {\n       \
    \ return true\n    }\n    if n == 35 {\n        return true\n    }\n    if n ==\
    \ 36 {\n        return true\n    }\n    if n == 37 {\n        return true\n  \
    \  }\n    if n == 38 {\n        return true\n    }\n    if n == 39 {\n       \
    \ return true\n    }\n    if n == 40 {\n        return true\n    }\n    if n ==\
    \ 41 {\n        return true\n    }\n    if n == 42 {\n        return true\n  \
    \  }\n    if n == 43 {\n        return true\n    }\n    if n == 44 {\n       \
    \ return true\n    }\n    if n == 45 {\n        return true\n    }\n    if n ==\
    \ 46 {\n        return true\n    }\n    if n == 47 {\n        return true\n  \
    \  }\n    if n == 48 {\n        return true\n    }\n    if n == 49 {\n       \
    \ return true\n    }\n    if n == 50 {\n        return true\n    }\n    if n ==\
    \ 51 {\n        return true\n    }\n    if n == 52 {\n        return true\n  \
    \  }\n    if n == 53 {\n        return true\n    }\n    if n == 54 {\n       \
    \ return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmph9bya_2v.swift:200:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmph9bya_2v.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmph9bya_2v.swift:172:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmph9bya_2v.swift:176:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  var i = 2\n    var j = 3\n    var k = 2\n    var m = 2\n    while i <= n {\n\
    \        if n % i == 0 {\n            return false\n        }\n        if i ==\
    \ m {\n            return true\n        }\n        while j <= k {\n          \
    \  if n % j == 0 {\n                return false\n            }\n            j\
    \ += 2\n        }\n        i += 2\n        k += 2\n        m += 2\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmphebwpt6c/tmphebwpt6c.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afea2c66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afea295db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afea295d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afea295c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphebwpt6c                        0x00005611550ff6fb <unavailable> + 5883

    5    libc.so.6                          0x00002afea2e52460 __libc_start_main +
    245

    6    tmphebwpt6c                        0x00005611550feef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824477
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n == 3 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    if n % 3 == 0 {\n        return false\n    }\n    var i =\
    \ 5\n    var j = 3\n    var k = 2\n    while i * j <= n {\n        if n % i ==\
    \ 0 {\n            return false\n        }\n        if n % j == 0 {\n        \
    \    return false\n        }\n        if k % 3 == 0 {\n            return false\n\
    \        }\n        i += 2\n        j += 2\n        k += 2\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmppdre109l/tmppdre109l.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b40dbaa4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b40db79bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b40db79b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b40db79a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppdre109l                        0x0000559af56ad2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b40dbc90460 __libc_start_main +
    245

    6    tmppdre109l                        0x0000559af56acef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824477
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n == 3 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    if n % 3 == 0 {\n        return false\n    }\n    var i =\
    \ 5\n    var s = 2\n    while i * i <= n {\n        if n % i == 0 {\n        \
    \    return false\n        }\n        i += s\n        s += 2\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmperwuln06/tmperwuln06.swift:73: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b0dc8ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b0d981b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b0d981988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b0d9807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmperwuln06                        0x0000558309c8180a <unavailable> + 6154

    5    libc.so.6                          0x00002b0b0de76460 __libc_start_main +
    245

    6    tmperwuln06                        0x0000558309c80ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824476
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n % 2 == 0 {\n        return false\n    }\n    if n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    var s = 2\n    while i * i <= n {\n       \
    \ if n % i == 0 {\n            return false\n        }\n        i += s\n     \
    \   s += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmp07krbmi9/tmp07krbmi9.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21ea88fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21ea586b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21ea586988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21ea5857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp07krbmi9                        0x000055d3bd28f80a <unavailable> + 6154

    5    libc.so.6                          0x00002b21eaa7b460 __libc_start_main +
    245

    6    tmp07krbmi9                        0x000055d3bd28eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824475
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    var i = 5\n    var j = 3\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            return false\n \
    \       }\n        i += j\n        j += 2\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpinje_zgi/tmpinje_zgi.swift:66: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a58ad5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a587ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a587cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a587cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpinje_zgi                        0x000055d1e417c77d <unavailable> + 6013

    5    libc.so.6                          0x00002b5a58cc1460 __libc_start_main +
    245

    6    tmpinje_zgi                        0x000055d1e417bef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824477
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    var i = 2\n    var j = 3\n\
    \    var k = 3\n    while i <= n {\n        if n % i == 0 {\n            return\
    \ false\n        }\n        if k % i == 0 {\n            return false\n      \
    \  }\n        i += 2\n        j += 2\n        k += 2\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpemdekggw/tmpemdekggw.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af8b06bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af8b03b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af8b03b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af8b03b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpemdekggw                        0x000055670618b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002af8b08aa460 __libc_start_main +
    245

    6    tmpemdekggw                        0x000055670618aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824477
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    var i = 2\n    var j = 3\n\
    \    var k = n\n    while i <= k {\n        if n % i == 0 {\n            return\
    \ false\n        }\n        if j > i {\n            j += 2\n        }\n      \
    \  i += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpl_6v5uaq/tmpl_6v5uaq.swift:68: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ce4719c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ce4410b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ce4410988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ce440f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl_6v5uaq                        0x000055f52e93b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b4ce4905460 __libc_start_main +
    245

    6    tmpl_6v5uaq                        0x000055f52e93aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824475
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n == 2\
    \ {\n        return true\n    }\n    if n % 2 == 0 {\n        return false\n \
    \   }\n    var i = 5\n    var j = 3\n    while i * i <= n {\n        if n % i\
    \ == 0 {\n            return false\n        }\n        i += j\n        j += 2\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpt7a1b40_/tmpt7a1b40_.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53a3f56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53a3c4db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53a3c4d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53a3c4c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt7a1b40_                        0x00005600ffefc77d <unavailable> + 6013

    5    libc.so.6                          0x00002b53a4142460 __libc_start_main +
    245

    6    tmpt7a1b40_                        0x00005600ffefbef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824477
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n % 2 == 0 {\n        return false\n    }\n    if n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    var j = (3 * n) + 1\n    var k = n - 1\n  \
    \  while i <= k {\n        if j % i == 0 {\n            return false\n       \
    \ }\n        i += 2\n        j += 2\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmp44wojthi/tmp44wojthi.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b633beb9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b633bbb0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b633bbb0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b633bbaf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp44wojthi                        0x00005560e2a152b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b633c0a5460 __libc_start_main +
    245

    6    tmp44wojthi                        0x00005560e2a14ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n == 4 {\n        return true\n    }\n    if n == 6 {\n        return true\n\
    \    }\n    if n == 8 {\n        return true\n    }\n    if n == 9 {\n       \
    \ return true\n    }\n    if n == 10 {\n        return true\n    }\n    if n ==\
    \ 11 {\n        return true\n    }\n    if n == 12 {\n        return true\n  \
    \  }\n    if n == 13 {\n        return true\n    }\n    if n == 14 {\n       \
    \ return true\n    }\n    if n == 15 {\n        return true\n    }\n    if n ==\
    \ 16 {\n        return true\n    }\n    if n == 17 {\n        return true\n  \
    \  }\n    if n == 18 {\n        return true\n    }\n    if n == 19 {\n       \
    \ return true\n    }\n    if n == 20 {\n        return true\n    }\n    if n ==\
    \ 21 {\n        return true\n    }\n    if n == 22 {\n        return true\n  \
    \  }\n    if n == 23 {\n        return true\n    }\n    if n == 24 {\n       \
    \ return true\n    }\n    if n == 25 {\n        return true\n    }\n    if n ==\
    \ 26 {\n        return true\n    }\n    if n == 27 {\n        return true\n  \
    \  }\n    if n == 28 {\n        return true\n    }\n    if n == 29 {\n       \
    \ return true\n    }\n    if n == 30 {\n        return true\n    }\n    if n ==\
    \ 31 {\n        return true\n    }\n    if n == 32 {\n        return true\n  \
    \  }\n    if n == 33 {\n        return true\n    }\n    if n == 34 {\n       \
    \ return true\n    }\n    if n == 35 {\n        return true\n    }\n    if n ==\
    \ 36 {\n        return true\n    }\n    if n == 37 {\n        return true\n  \
    \  }\n    if n == 38 {\n        return true\n    }\n    if n == 39 {\n       \
    \ return true\n    }\n    if n == 40 {\n        return true\n    }\n    if n ==\
    \ 41 {\n        return true\n    }\n    if n == 42 {\n        return true\n  \
    \  }\n    if n == 43 {\n        return true\n    }\n    if n == 44 {\n       \
    \ return true\n    }\n    if n == 45 {\n        return true\n    }\n    if n ==\
    \ 46 {\n        return true\n    }\n    if n == 47 {\n        return true\n  \
    \  }\n    if n == 48 {\n        return true\n    }\n    if n == 49 {\n       \
    \ return true\n    }\n    if n == 50 {\n        return true\n    }\n    if n ==\
    \ 51 {\n        return true\n    }\n    if n == 52 {\n        return true\n  \
    \  }\n    if n == 53 {\n        return true\n    }\n    if n == 54 {\n       \
    \ return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpb792dc6l.swift:200:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmpb792dc6l.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmpb792dc6l.swift:172:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmpb792dc6l.swift:176:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824477
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    var i = 2\n    var j = 3\n\
    \    var k = n\n    while i <= k {\n        if n % i == 0 {\n            return\
    \ false\n        }\n        if k % i == 0 {\n            return false\n      \
    \  }\n        i += 2\n        j += 2\n        k /= 2\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpjj4kznle/tmpjj4kznle.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab21d94dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab21d644b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab21d644988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab21d6437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjj4kznle                        0x0000555628bb339f <unavailable> + 5023

    5    libc.so.6                          0x00002ab21db39460 __libc_start_main +
    245

    6    tmpjj4kznle                        0x0000555628bb2ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824477
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n == 2\
    \ {\n        return true\n    }\n    if n % 2 == 0 {\n        return false\n \
    \   }\n    var i = 2\n    var j = 3\n    while i <= n {\n        if n % i == 0\
    \ {\n            return false\n        }\n        i += j\n        j += 2\n   \
    \ }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpxcjluklp/tmpxcjluklp.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0738f11c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0738c08b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0738c08988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0738c077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxcjluklp                        0x00005591c2e942b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b07390fd460 __libc_start_main +
    245

    6    tmpxcjluklp                        0x00005591c2e93ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824477
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n == 4 {\n        return true\n    }\n    if n == 6 {\n        return true\n\
    \    }\n    if n == 8 {\n        return true\n    }\n    if n == 9 {\n       \
    \ return true\n    }\n    if n == 10 {\n        return true\n    }\n    if n ==\
    \ 11 {\n        return true\n    }\n    if n == 12 {\n        return true\n  \
    \  }\n    if n == 13 {\n        return true\n    }\n    if n == 14 {\n       \
    \ return true\n    }\n    if n == 15 {\n        return true\n    }\n    if n ==\
    \ 16 {\n        return true\n    }\n    if n == 17 {\n        return true\n  \
    \  }\n    if n == 18 {\n        return true\n    }\n    if n == 19 {\n       \
    \ return true\n    }\n    if n == 20 {\n        return true\n    }\n    if n ==\
    \ 21 {\n        return true\n    }\n    if n == 22 {\n        return true\n  \
    \  }\n    if n == 23 {\n        return true\n    }\n    if n == 24 {\n       \
    \ return true\n    }\n    if n == 25 {\n        return true\n    }\n    if n ==\
    \ 26 {\n        return true\n    }\n    if n == 27 {\n        return true\n  \
    \  }\n    if n == 28 {\n        return true\n    }\n    if n == 29 {\n       \
    \ return true\n    }\n    if n == 30 {\n        return true\n    }\n    if n ==\
    \ 31 {\n        return true\n    }\n    if n == 32 {\n        return true\n  \
    \  }\n    if n == 33 {\n        return true\n    }\n    if n == 34 {\n       \
    \ return true\n    }\n    if n == 35 {\n        return true\n    }\n    if n ==\
    \ 36 {\n        return true\n    }\n    if n == 37 {\n        return true\n  \
    \  }\n    if n == 38 {\n        return true\n    }\n    if n == 39 {\n       \
    \ return true\n    }\n    if n == 40 {\n        return true\n    }\n    if n ==\
    \ 41 {\n        return true\n    }\n    if n == 42 {\n        return true\n  \
    \  }\n    if n == 43 {\n        return true\n    }\n    if n == 44 {\n       \
    \ return true\n    }\n    if n == 45 {\n        return true\n    }\n    if n ==\
    \ 46 {\n        return true\n    }\n    if n == 47 {\n        return true\n  \
    \  }\n    if n == 48 {\n        return true\n    }\n    if n == 49 {\n       \
    \ return true\n    }\n    if n == 50 {\n        return true\n    }\n    if n ==\
    \ 51 {\n        return true\n    }\n    if n == 52 {\n        return true\n  \
    \  }\n    if n == 53 {\n        return true\n    }\n    if n == 54 {\n       \
    \ return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpb792dc6l.swift:200:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmpb792dc6l.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmpb792dc6l.swift:172:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmpb792dc6l.swift:176:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824477
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n % 2 == 0 {\n        return false\n    }\n    if n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    var s = 2\n    while i * i <= n {\n       \
    \ if n % i == 0 {\n            return false\n        }\n        i += s\n     \
    \   s += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmp07krbmi9/tmp07krbmi9.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21ea88fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21ea586b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21ea586988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21ea5857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp07krbmi9                        0x000055d3bd28f80a <unavailable> + 6154

    5    libc.so.6                          0x00002b21eaa7b460 __libc_start_main +
    245

    6    tmp07krbmi9                        0x000055d3bd28eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n == 3 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    var j = 3\n    var k = n - 1\n    while i <=\
    \ k {\n        if n % i == 0 {\n            return false\n        }\n        i\
    \ += 2\n        j += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824477
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    var i = 5\n\
    \    var s = 2\n    while i * i <= n {\n        if n % i == 0 || n % (i + 2) ==\
    \ 0 {\n            return false\n        }\n        i += s\n        s += 6\n \
    \   }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmp85pbga02/tmp85pbga02.swift:67: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b124254fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1242246b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1242246988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b12422457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp85pbga02                        0x000055e092bc580a <unavailable> + 6154

    5    libc.so.6                          0x00002b124273b460 __libc_start_main +
    245

    6    tmp85pbga02                        0x000055e092bc4ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\n    var i = 2\n\
    \    var s = 2\n    var p = 2\n    var q = 2\n    var m = 1\n\n    while i <=\
    \ n {\n        if n % i == 0 {\n            return false\n        }\n\n      \
    \  if m == 1 {\n            m = 2\n            p = i\n        } else {\n     \
    \       if m == p {\n                p = p + 1\n                q = p\n      \
    \      } else {\n                q = p\n            }\n\n            if m == q\
    \ {\n                s = s + 1\n                m = 2\n            } else {\n\
    \                s = s\n            }\n        }\n\n        i = i + 1\n    }\n\
    \n    return s == n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmpyabn51e1.swift:48:19: error: assigning a variable to itself\n \
    \               s = s\n                ~ ^ ~\n"
  stdout: ''
  timestamp: 1659824477
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n % 2 == 0 {\n        return false\n    }\n    if n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    var j = 3\n    var k = n - 1\n    while i <=\
    \ k {\n        if n % i == 0 {\n            return false\n        }\n        if\
    \ n % j == 0 {\n            return false\n        }\n        if j % i == 0 {\n\
    \            return false\n        }\n        i += 2\n        j += 2\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824477
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n % 2 == 0 {\n        return false\n    }\n    if n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    var p: Int = 2\n    while i * i <= n {\n  \
    \      if n % i == 0 {\n            return false\n        }\n        if n % p\
    \ == 0 {\n            return false\n        }\n        i += 6\n        p = 6 +\
    \ p\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmp_pzjd5ys/tmp_pzjd5ys.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac194584c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac19427bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac19427b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac19427a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_pzjd5ys                        0x000055fa5d8e077d <unavailable> + 6013

    5    libc.so.6                          0x00002ac194770460 __libc_start_main +
    245

    6    tmp_pzjd5ys                        0x000055fa5d8dfef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824477
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n == 2\
    \ {\n        return true\n    }\n    if n == 3 {\n        return true\n    }\n\
    \    if n % 2 == 0 {\n        return false\n    }\n    if n % 3 == 0 {\n     \
    \   return false\n    }\n    var i = 5\n    var s = 2\n    while i * i <= n {\n\
    \        if n % i == 0 {\n            return false\n        }\n        i += s\n\
    \        s += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmpz1d47erd/tmpz1d47erd.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adb9d0dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adb9cdd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adb9cdd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adb9cdd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz1d47erd                        0x000055a7ee87c80a <unavailable> + 6154

    5    libc.so.6                          0x00002adb9d2cb460 __libc_start_main +
    245

    6    tmpz1d47erd                        0x000055a7ee87bef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824477
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    var i = 2\n    var j = 3\n\
    \    var k = n\n    while i <= k {\n        if n % i == 0 {\n            return\
    \ false\n        }\n        if j % i == 0 {\n            return false\n      \
    \  }\n        i += 2\n        j += 2\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpvtzqjcru/tmpvtzqjcru.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab5b90bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab5b8db2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab5b8db2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab5b8db17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvtzqjcru                        0x00005641869746fb <unavailable> + 5883

    5    libc.so.6                          0x00002ab5b92a7460 __libc_start_main +
    245

    6    tmpvtzqjcru                        0x0000564186973ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824477
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    var i = 2\n    var j = 3\n\
    \    var m = n - 1\n    while i <= m {\n        if n % i == 0 {\n            return\
    \ false\n        }\n        i += 2\n        j += 2\n    }\n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpdf0ta9bn/tmpdf0ta9bn.swift:66: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b16e75dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b16e72d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b16e72d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b16e72d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdf0ta9bn                        0x000055f876e0b6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b16e77c6460 __libc_start_main +
    245

    6    tmpdf0ta9bn                        0x000055f876e0aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824477
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n == 4 {\n        return true\n    }\n    if n == 6 {\n        return true\n\
    \    }\n    if n == 8 {\n        return true\n    }\n    if n == 9 {\n       \
    \ return true\n    }\n    if n == 10 {\n        return true\n    }\n    if n ==\
    \ 11 {\n        return true\n    }\n    if n == 12 {\n        return true\n  \
    \  }\n    if n == 13 {\n        return true\n    }\n    if n == 14 {\n       \
    \ return true\n    }\n    if n == 15 {\n        return true\n    }\n    if n ==\
    \ 16 {\n        return true\n    }\n    if n == 17 {\n        return true\n  \
    \  }\n    if n == 18 {\n        return true\n    }\n    if n == 19 {\n       \
    \ return true\n    }\n    if n == 20 {\n        return true\n    }\n    if n ==\
    \ 21 {\n        return true\n    }\n    if n == 22 {\n        return true\n  \
    \  }\n    if n == 23 {\n        return true\n    }\n    if n == 24 {\n       \
    \ return true\n    }\n    if n == 25 {\n        return true\n    }\n    if n ==\
    \ 26 {\n        return true\n    }\n    if n == 27 {\n        return true\n  \
    \  }\n    if n == 28 {\n        return true\n    }\n    if n == 29 {\n       \
    \ return true\n    }\n    if n == 30 {\n        return true\n    }\n    if n ==\
    \ 31 {\n        return true\n    }\n    if n == 32 {\n        return true\n  \
    \  }\n    if n == 33 {\n        return true\n    }\n    if n == 34 {\n       \
    \ return true\n    }\n    if n == 35 {\n        return true\n    }\n    if n ==\
    \ 36 {\n        return true\n    }\n    if n == 37 {\n        return true\n  \
    \  }\n    if n == 38 {\n        return true\n    }\n    if n == 39 {\n       \
    \ return true\n    }\n    if n == 40 {\n        return true\n    }\n    if n ==\
    \ 41 {\n        return true\n    }\n    if n == 42 {\n        return true\n  \
    \  }\n    if n == 43 {\n        return true\n    }\n    if n == 44 {\n       \
    \ return true\n    }\n    if n == 45 {\n        return true\n    }\n    if n ==\
    \ 46 {\n        return true\n    }\n    if n == 47 {\n        return true\n  \
    \  }\n    if n == 48 {\n        return true\n    }\n    if n == 49 {\n       \
    \ return true\n    }\n    if n == 50 {\n        return true\n    }\n    if n ==\
    \ 51 {\n        return true\n    }\n    if n == 52 {\n        return true\n  \
    \  }\n    if n == 53 {\n        return true\n    }\n    if n == 54 {\n       \
    \ return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpb792dc6l.swift:200:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmpb792dc6l.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmpb792dc6l.swift:172:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmpb792dc6l.swift:176:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824477
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n == 2\
    \ {\n        return true\n    }\n    if n == 3 {\n        return true\n    }\n\
    \    if n == 4 {\n        return true\n    }\n    if n == 6 {\n        return\
    \ true\n    }\n    if n == 8 {\n        return true\n    }\n    if n == 9 {\n\
    \        return true\n    }\n    if n == 10 {\n        return true\n    }\n  \
    \  if n == 12 {\n        return true\n    }\n    if n == 13 {\n        return\
    \ true\n    }\n    if n == 14 {\n        return true\n    }\n    if n == 15 {\n\
    \        return true\n    }\n    if n == 16 {\n        return true\n    }\n  \
    \  if n == 17 {\n        return true\n    }\n    if n == 18 {\n        return\
    \ true\n    }\n    if n == 19 {\n        return true\n    }\n    if n == 20 {\n\
    \        return true\n    }\n    if n == 21 {\n        return true\n    }\n  \
    \  if n == 22 {\n        return true\n    }\n    if n == 23 {\n        return\
    \ true\n    }\n    if n == 24 {\n        return true\n    }\n    if n == 25 {\n\
    \        return true\n    }\n    if n == 26 {\n        return true\n    }\n  \
    \  if n == 27 {\n        return true\n    }\n    if n == 28 {\n        return\
    \ true\n    }\n    if n == 29 {\n        return true\n    }\n    if n == 30 {\n\
    \        return true\n    }\n    if n == 31 {\n        return true\n    }\n  \
    \  if n == 32 {\n        return true\n    }\n    if n == 33 {\n        return\
    \ true\n    }\n    if n == 34 {\n        return true\n    }\n    if n == 35 {\n\
    \        return true\n    }\n    if n == 36 {\n        return true\n    }\n  \
    \  if n == 37 {\n        return true\n    }\n    if n == 38 {\n        return\
    \ true\n    }\n    if n == 39 {\n        return true\n    }\n    if n == 40 {\n\
    \        return true\n    }\n    if n == 41 {\n        return true\n    }\n  \
    \  if n == 42 {\n        return true\n    }\n    if n == 43 {\n        return\
    \ true\n    }\n    if n == 44 {\n        return true\n    }\n    if n == 45 {\n\
    \        return true\n    }\n    if n == 46 {\n        return true\n    }\n  \
    \  if n == 47 {\n        return true\n    }\n    if n == 48 {\n        return\
    \ true\n    }\n    if n == 49 {\n        return true\n    }\n    if n == 50 {\n\
    \        return true\n    }\n    if n == 51 {\n        return true\n    }\n  \
    \  if n == 52 {\n        return true\n    }\n    if n == 53 {\n        return\
    \ true\n    }\n    if n == 54 {\n        return true\n    }\n    if n == 55 {\n\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmptmyk_lxe.swift:200:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmptmyk_lxe.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmptmyk_lxe.swift:176:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824477
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n\
    \    var i = 5\n    var s: Int64 = 1\n    while i * i <= n {\n        if n % i\
    \ == 0 {\n            return false\n        }\n        s += 2\n        i += 6\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpjlla712m/tmpjlla712m.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad51ef77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad51ec6eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad51ec6e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad51ec6d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjlla712m                        0x000055bc52c0e4ff <unavailable> + 5375

    5    libc.so.6                          0x00002ad51f163460 __libc_start_main +
    245

    6    tmpjlla712m                        0x000055bc52c0def9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824477
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n % 2 == 0 {\n        return false\n    }\n    if n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    var j = 3\n    var k = 2\n    while i <= n\
    \ {\n        if n % i == 0 {\n            return false\n        }\n        if\
    \ j > n / 2 {\n            return false\n        }\n        if k != n / 2 {\n\
    \            if n % k == 0 {\n                return false\n            }\n  \
    \      }\n        i += 2\n        j += 2\n        k += 2\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmphglo6nw5/tmphglo6nw5.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc8d693c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc8d38ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc8d38a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc8d3897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphglo6nw5                        0x0000557e84b532b7 <unavailable> + 4791

    5    libc.so.6                          0x00002afc8d87f460 __libc_start_main +
    245

    6    tmphglo6nw5                        0x0000557e84b52ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824477
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n == 2\
    \ {\n        return true\n    }\n    if n == 3 {\n        return true\n    }\n\
    \    if n % 2 == 0 {\n        return false\n    }\n    var i = 5\n    var j =\
    \ 3\n    var k = 3\n    var m = 2\n    while i <= n {\n        if n % i == 0 {\n\
    \            return false\n        }\n        if i == m {\n            return\
    \ true\n        }\n        i += k\n        j += k\n        k += 2\n        m +=\
    \ 2\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpjn5eubpu/tmpjn5eubpu.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83b72d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83b6fcab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83b6fca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83b6fc97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjn5eubpu                        0x00005569113e62b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b83b74bf460 __libc_start_main +
    245

    6    tmpjn5eubpu                        0x00005569113e5ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824477
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n\
    \    var i = 2\n    var s: Int\n    while i <= n {\n        if n % i == 0 {\n\
    \            return false\n        }\n        s += i\n        i += 2\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmpzmc_td86.swift:33:11: error: variable 's' passed by reference before\
    \ being initialized\n        s += i\n          ^\n/tmp/tmpzmc_td86.swift:28:9:\
    \ note: variable defined here\n    var s: Int\n        ^\n"
  stdout: ''
  timestamp: 1659824477
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n % 2 == 0 {\n        return false\n    }\n    if n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    var s = 2\n    while i * i <= n {\n       \
    \ if n % i == 0 {\n            return false\n        }\n        i += s\n     \
    \   s += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmp6yz0hdvp/tmp6yz0hdvp.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b378f573c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b378f26ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b378f26a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b378f2697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6yz0hdvp                        0x00005585c790a4ff <unavailable> + 5375

    5    libc.so.6                          0x00002b378f75f460 __libc_start_main +
    245

    6    tmp6yz0hdvp                        0x00005585c7909ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824477
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n == 2\
    \ {\n        return true\n    }\n    if n == 3 {\n        return true\n    }\n\
    \    if n % 2 == 0 {\n        return false\n    }\n    var i = 5\n    var j =\
    \ (3 * n) + 1\n    var k = (3 * n) + 2\n    while i <= j {\n        if i % k ==\
    \ 0 {\n            return false\n        }\n        i += 2\n        k += 2\n \
    \   }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpgfi4sffk/tmpgfi4sffk.swift:66: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b920dd4cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b920da43b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b920da43988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b920da427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgfi4sffk                        0x000055b32ba806fb <unavailable> + 5883

    5    libc.so.6                          0x00002b920df38460 __libc_start_main +
    245

    6    tmpgfi4sffk                        0x000055b32ba7fef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824477
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    var i = 2\n    var j = 3\n\
    \    while i * j <= n {\n        if n % i == 0 {\n            return false\n \
    \       }\n        if n % j == 0 {\n            return false\n        }\n    \
    \    i += 2\n        j += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824477
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n == 4 {\n        return true\n    }\n    if n == 5 {\n        return true\n\
    \    }\n    if n == 6 {\n        return true\n    }\n    if n == 7 {\n       \
    \ return true\n    }\n    if n == 8 {\n        return true\n    }\n    if n ==\
    \ 9 {\n        return true\n    }\n    if n == 10 {\n        return true\n   \
    \ }\n    if n == 11 {\n        return true\n    }\n    if n == 12 {\n        return\
    \ true\n    }\n    if n == 13 {\n        return true\n    }\n    if n == 14 {\n\
    \        return true\n    }\n    if n == 15 {\n        return true\n    }\n  \
    \  if n == 16 {\n        return true\n    }\n    if n == 17 {\n        return\
    \ true\n    }\n    if n == 18 {\n        return true\n    }\n    if n == 19 {\n\
    \        return true\n    }\n    if n == 20 {\n        return true\n    }\n  \
    \  if n == 21 {\n        return true\n    }\n    if n == 22 {\n        return\
    \ true\n    }\n    if n == 23 {\n        return true\n    }\n    if n == 24 {\n\
    \        return true\n    }\n    if n == 25 {\n        return true\n    }\n  \
    \  if n == 26 {\n        return true\n    }\n    if n == 27 {\n        return\
    \ true\n    }\n    if n == 28 {\n        return true\n    }\n    if n == 29 {\n\
    \        return true\n    }\n    if n == 30 {\n        return true\n    }\n  \
    \  if n == 31 {\n        return true\n    }\n    if n == 32 {\n        return\
    \ true\n    }\n    if n == 33 {\n        return true\n    }\n    if n == 34 {\n\
    \        return true\n    }\n    if n == 35 {\n        return true\n    }\n  \
    \  if n == 36 {\n        return true\n    }\n    if n == 37 {\n        return\
    \ true\n    }\n    if n == 38 {\n        return true\n    }\n    if n == 39 {\n\
    \        return true\n    }\n    if n == 40 {\n        return true\n    }\n  \
    \  if n == 41 {\n        return true\n    }\n    if n == 42 {\n        return\
    \ true\n    }\n    if n == 43 {\n        return true\n    }\n    if n == 44 {\n\
    \        return true\n    }\n    if n == 45 {\n        return true\n    }\n  \
    \  if n == 46 {\n        return true\n    }\n    if n == 47 {\n        return\
    \ true\n    }\n    if n == 48 {\n        return true\n    }\n    if n == 49 {\n\
    \        return true\n    }\n    if n == 50 {\n        return true\n    }\n  \
    \  if n == 51 {\n        return true\n    }\n    if n == 52 {\n        return\
    \ \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n:\
    \ 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) ==\
    \ true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5xbufwk6.swift:200:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmp5xbufwk6.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmp5xbufwk6.swift:172:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmp5xbufwk6.swift:176:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n == 2\
    \ {\n        return true\n    }\n    if n == 3 {\n        return true\n    }\n\
    \    if n % 2 == 0 {\n        return false\n    }\n    var i = 5\n    var j =\
    \ 3\n    var k = n - 1\n    while i <= k {\n        if n % i == 0 {\n        \
    \    return false\n        }\n        if j % i == 0 {\n            return false\n\
    \        }\n        i += 2\n        j += 2\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824477
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    var i = 5\n\
    \    var s = 2\n    while i * i <= n {\n        if n % i == 0 || n % (i + 2) ==\
    \ 0 {\n            return false\n        }\n        i += s\n        s += 6\n \
    \   }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmp85pbga02/tmp85pbga02.swift:67: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b124254fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1242246b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1242246988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b12422457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp85pbga02                        0x000055e092bc580a <unavailable> + 6154

    5    libc.so.6                          0x00002b124273b460 __libc_start_main +
    245

    6    tmp85pbga02                        0x000055e092bc4ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824476
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    if n % 3 == 0 {\n       \
    \ return false\n    }\n    var i = 5\n    var s = 2\n    while i * i <= n {\n\
    \        if n % i == 0 {\n            return false\n        }\n        s += 2\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmp_6w7niif/tmp_6w7niif.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5c0d3aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5c0d0a1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5c0d0a1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5c0d0a07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_6w7niif                        0x000055dc58d3377d <unavailable> + 6013

    5    libc.so.6                          0x00002b5c0d596460 __libc_start_main +
    245

    6    tmp_6w7niif                        0x000055dc58d32ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824477
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    var i = 2\n    var j = 3\n\
    \    var k = n\n    while i <= k {\n        if n % i == 0 {\n            return\
    \ false\n        }\n        if j % i == 0 {\n            return false\n      \
    \  }\n        i += 2\n        j += 2\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpvtzqjcru/tmpvtzqjcru.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab5b90bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab5b8db2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab5b8db2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab5b8db17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvtzqjcru                        0x00005641869746fb <unavailable> + 5883

    5    libc.so.6                          0x00002ab5b92a7460 __libc_start_main +
    245

    6    tmpvtzqjcru                        0x0000564186973ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824477
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n\
    \    var i = 2\n    var j = 3\n    var k = n - 1\n    while i <= k {\n       \
    \ if n % i == 0 {\n            return false\n        }\n        i += 2\n     \
    \   j += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmpa50ednek/tmpa50ednek.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac5f5bdec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac5f58d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac5f58d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5f58d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa50ednek                        0x0000558fb82936fb <unavailable> + 5883

    5    libc.so.6                          0x00002ac5f5dca460 __libc_start_main +
    245

    6    tmpa50ednek                        0x0000558fb8292ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824477
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n % 2 == 0 {\n        return false\n    }\n    if n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    var s = 2\n    while i * i <= n {\n       \
    \ if n % i == 0 {\n            return false\n        }\n        i += s\n     \
    \   s += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmp07krbmi9/tmp07krbmi9.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21ea88fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21ea586b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21ea586988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21ea5857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp07krbmi9                        0x000055d3bd28f80a <unavailable> + 6154

    5    libc.so.6                          0x00002b21eaa7b460 __libc_start_main +
    245

    6    tmp07krbmi9                        0x000055d3bd28eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824475
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n == 3 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    if n % 3 == 0 {\n        return false\n    }\n    let limit\
    \ = (Int64(n) / 3) + 1\n    var i = 2\n    var j = 3\n    while i <= limit {\n\
    \        if ((i * j) % n == 0) {\n            return false\n        }\n      \
    \  i += 2\n        j += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmp_eawj8mr/tmp_eawj8mr.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad1cecfbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad1ce9f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad1ce9f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad1ce9f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_eawj8mr                        0x0000560f3115787b <unavailable> + 6267

    5    libc.so.6                          0x00002ad1ceee7460 __libc_start_main +
    245

    6    tmp_eawj8mr                        0x0000560f31157079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824477
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\n    if n == 2\
    \ {\n        return true\n    }\n\n    var i = 2\n    var j = 2\n    var m = 1\n\
    \    var prime = true\n\n    while i < n {\n        if n % i == 0 {\n        \
    \    prime = false\n            break\n        }\n\n        i += j\n        j\
    \ += 2\n        m++\n    }\n\n    if m == 2 {\n        return true\n    }\n\n\
    \    return prime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmpb3kzd9fu.swift:39:10: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        m++\n         ^~\n"
  stdout: ''
  timestamp: 1659824477
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n == 4 {\n        return true\n    }\n    if n == 6 {\n        return true\n\
    \    }\n    if n == 8 {\n        return true\n    }\n    if n == 9 {\n       \
    \ return true\n    }\n    if n == 10 {\n        return true\n    }\n    if n ==\
    \ 11 {\n        return true\n    }\n    if n == 12 {\n        return true\n  \
    \  }\n    if n == 13 {\n        return true\n    }\n    if n == 14 {\n       \
    \ return true\n    }\n    if n == 15 {\n        return true\n    }\n    if n ==\
    \ 16 {\n        return true\n    }\n    if n == 17 {\n        return true\n  \
    \  }\n    if n == 18 {\n        return true\n    }\n    if n == 19 {\n       \
    \ return true\n    }\n    if n == 20 {\n        return true\n    }\n    if n ==\
    \ 21 {\n        return true\n    }\n    if n == 22 {\n        return true\n  \
    \  }\n    if n == 23 {\n        return true\n    }\n    if n == 24 {\n       \
    \ return true\n    }\n    if n == 25 {\n        return true\n    }\n    if n ==\
    \ 26 {\n        return true\n    }\n    if n == 27 {\n        return true\n  \
    \  }\n    if n == 28 {\n        return true\n    }\n    if n == 29 {\n       \
    \ return true\n    }\n    if n == 30 {\n        return true\n    }\n    if n ==\
    \ 31 {\n        return true\n    }\n    if n == 32 {\n        return true\n  \
    \  }\n    if n == 33 {\n        return true\n    }\n    if n == 34 {\n       \
    \ return true\n    }\n    if n == 35 {\n        return true\n    }\n    if n ==\
    \ 36 {\n        return true\n    }\n    if n == 37 {\n        return true\n  \
    \  }\n    if n == 38 {\n        return true\n    }\n    if n == 39 {\n       \
    \ return true\n    }\n    if n == 40 {\n        return true\n    }\n    if n ==\
    \ 41 {\n        return true\n    }\n    if n == 42 {\n        return true\n  \
    \  }\n    if n == 43 {\n        return true\n    }\n    if n == 44 {\n       \
    \ return true\n    }\n    if n == 45 {\n        return true\n    }\n    if n ==\
    \ 46 {\n        return true\n    }\n    if n == 47 {\n        return true\n  \
    \  }\n    if n == 48 {\n        return true\n    }\n    if n == 49 {\n       \
    \ return true\n    }\n    if n == 50 {\n        return true\n    }\n    if n ==\
    \ 51 {\n        return true\n    }\n    if n == 52 {\n        return true\n  \
    \  }\n    if n == 53 {\n        return true\n    }\n    if n == 54 {\n       \
    \ return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpb792dc6l.swift:200:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmpb792dc6l.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmpb792dc6l.swift:172:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmpb792dc6l.swift:176:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824477
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n % 2 == 0 {\n        return false\n    }\n    if n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    var s = 2\n    while i * i <= n {\n       \
    \ if n % i == 0 {\n            return false\n        }\n        s += i\n     \
    \   i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmpw92u35j7/tmpw92u35j7.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada520f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada51dedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada51ded988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada51dec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw92u35j7                        0x0000556442bc677d <unavailable> + 6013

    5    libc.so.6                          0x00002ada522e2460 __libc_start_main +
    245

    6    tmpw92u35j7                        0x0000556442bc5ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824477
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n == 3 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    if n % 3 == 0 {\n        return false\n    }\n    if n % 5\
    \ == 0 {\n        return false\n    }\n    if n % 7 == 0 {\n        return false\n\
    \    }\n    if n % 11 == 0 {\n        return false\n    }\n    if n % 13 == 0\
    \ {\n        return false\n    }\n    if n % 17 == 0 {\n        return false\n\
    \    }\n    if n % 19 == 0 {\n        return false\n    }\n    if n % 23 == 0\
    \ {\n        return false\n    }\n    if n % 29 == 0 {\n        return false\n\
    \    }\n    if n % 31 == 0 {\n        return false\n    }\n    if n % 37 == 0\
    \ {\n        return false\n    }\n    if n % 41 == 0 {\n        return false\n\
    \    }\n    if n % 43 == 0 {\n        return false\n    }\n    if n % 47 == 0\
    \ {\n        return false\n    }\n    if n % 53 == 0 {\n        return false\n\
    \    }\n    if n % 59 == 0 {\n        return false\n    }\n    if n % 61 == 0\
    \ {\n        return false\n    }\n    if n % 67 == 0 {\n        return false\n\
    \    }\n    if n % 71 == 0 {\n        return false\n    }\n    if n % 73 == 0\
    \ {\n        return false\n    }\n    if n % 79 == 0 {\n        return false\n\
    \    }\n    if n % 83 == 0 {\n        return false\n    }\n    if n % 89 == 0\
    \ {\n        return false\n    }\n    if n % 97 == 0 {\n        return false\n\
    \    }\n    if n % 101 == 0 {\n        return false\n    }\n    if n % 103 ==\
    \ 0 {\n        return false\n    }\n    if n % 107 == 0 {\n        return false\n\
    \    }\n    if n % 111 == 0 {\n        return false\n    }\n    if n % 115 ==\
    \ 0 {\n        return false\n    }\n    if n % 121 == 0 {\n        return false\n\
    \    }\n    if n % 127 == 0 {\n        return false\n    }\n    if n % 131 ==\
    \ 0 {\n        return false\n    }\n    if n % 137 == 0 {\n        return false\n\
    \    }\n    if n % 141 == 0 {\n        return false\n    }\n    if n % 147 ==\
    \ 0 {\n        return false\n    }\n    if n % 151 == 0 {\n        return false\n\
    \    }\n    if n % 157 == 0 {\n        return false\n    }\n    if n % 161 ==\
    \ 0 {\n        return false\n    }\n    if n % 167 == 0 {\n        return false\n\
    \    }\n    if n % 173 == 0 {\n        return false\n    }\n    if n % 179 ==\
    \ 0 {\n        return false\n    }\n    if n % 183 == 0 {\n        return false\n\
    \    }\n    if n % 191 == 0 {\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmpw1hwha92.swift:187:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmpw1hwha92.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmpw1hwha92.swift:163:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824477
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n == 3 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    if n % 3 == 0 {\n        return false\n    }\n    var i =\
    \ 5\n    var s = 2\n    while i * i <= n {\n        if n % i == 0 {\n        \
    \    return false\n        }\n        if i == 3 {\n            if n % i == 0 {\n\
    \                return false\n            }\n        }\n        i += s\n    \
    \    s *= 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n == 4 {\n        return true\n    }\n    if n == 6 {\n        return true\n\
    \    }\n    if n == 8 {\n        return true\n    }\n    if n == 9 {\n       \
    \ return true\n    }\n    if n == 10 {\n        return true\n    }\n    if n ==\
    \ 11 {\n        return true\n    }\n    if n == 12 {\n        return true\n  \
    \  }\n    if n == 13 {\n        return true\n    }\n    if n == 14 {\n       \
    \ return true\n    }\n    if n == 15 {\n        return true\n    }\n    if n ==\
    \ 16 {\n        return true\n    }\n    if n == 17 {\n        return true\n  \
    \  }\n    if n == 18 {\n        return true\n    }\n    if n == 19 {\n       \
    \ return true\n    }\n    if n == 20 {\n        return true\n    }\n    if n ==\
    \ 21 {\n        return true\n    }\n    if n == 22 {\n        return true\n  \
    \  }\n    if n == 23 {\n        return true\n    }\n    if n == 24 {\n       \
    \ return true\n    }\n    if n == 25 {\n        return true\n    }\n    if n ==\
    \ 26 {\n        return true\n    }\n    if n == 27 {\n        return true\n  \
    \  }\n    if n == 28 {\n        return true\n    }\n    if n == 29 {\n       \
    \ return true\n    }\n    if n == 30 {\n        return true\n    }\n    if n ==\
    \ 31 {\n        return true\n    }\n    if n == 32 {\n        return true\n  \
    \  }\n    if n == 33 {\n        return true\n    }\n    if n == 34 {\n       \
    \ return true\n    }\n    if n == 35 {\n        return true\n    }\n    if n ==\
    \ 36 {\n        return true\n    }\n    if n == 37 {\n        return true\n  \
    \  }\n    if n == 38 {\n        return true\n    }\n    if n == 39 {\n       \
    \ return true\n    }\n    if n == 40 {\n        return true\n    }\n    if n ==\
    \ 41 {\n        return true\n    }\n    if n == 42 {\n        return true\n  \
    \  }\n    if n == 43 {\n        return true\n    }\n    if n == 44 {\n       \
    \ return true\n    }\n    if n == 45 {\n        return true\n    }\n    if n ==\
    \ 46 {\n        return true\n    }\n    if n == 47 {\n        return true\n  \
    \  }\n    if n == 48 {\n        return true\n    }\n    if n == 49 {\n       \
    \ return true\n    }\n    if n == 50 {\n        return true\n    }\n    if n ==\
    \ 51 {\n        return true\n    }\n    if n == 52 {\n        return true\n  \
    \  }\n    if n == 53 {\n        return true\n    }\n    if n == 54 {\n       \
    \ return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmph9bya_2v.swift:200:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmph9bya_2v.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmph9bya_2v.swift:172:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmph9bya_2v.swift:176:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  var i = 2\n    var j = 2\n    var m = 1\n    while i <= n {\n        if n %\
    \ i == 0 {\n            m = m * j\n        }\n        j = j + 2\n        i = i\
    \ + 1\n    }\n    return m == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmp_a07w5k1/tmp_a07w5k1.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0e145e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0e142e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0e142e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0e142df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_a07w5k1                        0x00005584ae2bd2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b0e147d5460 __libc_start_main +
    245

    6    tmp_a07w5k1                        0x00005584ae2bcef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824477
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n % 2 == 0 {\n        return false\n    }\n    var i = 5\n    var j = 3\n\
    \    var m = Int(sqrt(Double(n)))\n    while i <= m {\n        if n % i == 0 {\n\
    \            return false\n        }\n        if i == m {\n            return\
    \ true\n        }\n        i += 2\n        j += 2\n    }\n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpl6lq35yi.swift:32:17: error: cannot find 'sqrt' in scope\n    var\
    \ m = Int(sqrt(Double(n)))\n                ^~~~\n"
  stdout: ''
  timestamp: 1659824477
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    var i = 2\n    var j = 3\n\
    \    var k = n\n    while i <= k {\n        if n % i == 0 {\n            return\
    \ false\n        }\n        if j % i == 0 {\n            return false\n      \
    \  }\n        i += 2\n        j += 2\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpvtzqjcru/tmpvtzqjcru.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab5b90bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab5b8db2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab5b8db2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab5b8db17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvtzqjcru                        0x00005641869746fb <unavailable> + 5883

    5    libc.so.6                          0x00002ab5b92a7460 __libc_start_main +
    245

    6    tmpvtzqjcru                        0x0000564186973ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824477
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n % 2 == 0 {\n        return false\n    }\n    if n % 3 == 0 {\n        return\
    \ false\n    }\n    let limit = (Int) sqrt(Double(n))\n    var i = 5\n    var\
    \ j = 3\n    var k = 2\n    while i <= limit {\n        if ((n % i) == 0) {\n\
    \            return false\n        }\n        while ((j % k) != 0) {\n       \
    \     k += 1\n        }\n        i += 2\n        j += 1\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpv4z2377_.swift:33:22: error: consecutive statements on a line must\
    \ be separated by ';'\n    let limit = (Int) sqrt(Double(n))\n               \
    \      ^\n                     ;\n/tmp/tmpv4z2377_.swift:33:17: error: expected\
    \ member name or constructor call after type name\n    let limit = (Int) sqrt(Double(n))\n\
    \                ^\n/tmp/tmpv4z2377_.swift:33:21: note: add arguments after the\
    \ type to construct a value of the type\n    let limit = (Int) sqrt(Double(n))\n\
    \                    ^\n                     ()\n/tmp/tmpv4z2377_.swift:33:21:\
    \ note: use '.self' to reference the type object\n    let limit = (Int) sqrt(Double(n))\n\
    \                    ^\n                     .self\n/tmp/tmpv4z2377_.swift:33:23:\
    \ error: cannot find 'sqrt' in scope\n    let limit = (Int) sqrt(Double(n))\n\
    \                      ^~~~\n/tmp/tmpv4z2377_.swift:37:13: error: type '(Int).Type'\
    \ cannot conform to 'BinaryInteger'\n    while i <= limit {\n            ^\n/tmp/tmpv4z2377_.swift:37:13:\
    \ note: only concrete types such as structs, enums and classes can conform to\
    \ protocols\n    while i <= limit {\n            ^\n/tmp/tmpv4z2377_.swift:37:13:\
    \ note: required by operator function '<=' where 'Other' = '(Int).Type'\n    while\
    \ i <= limit {\n            ^\n"
  stdout: ''
  timestamp: 1659824477
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n == 4 {\n        return true\n    }\n    if n == 6 {\n        return true\n\
    \    }\n    if n == 8 {\n        return true\n    }\n    if n == 9 {\n       \
    \ return true\n    }\n    if n == 10 {\n        return true\n    }\n    if n ==\
    \ 11 {\n        return true\n    }\n    if n == 12 {\n        return true\n  \
    \  }\n    if n == 13 {\n        return true\n    }\n    if n == 14 {\n       \
    \ return true\n    }\n    if n == 15 {\n        return true\n    }\n    if n ==\
    \ 16 {\n        return true\n    }\n    if n == 17 {\n        return true\n  \
    \  }\n    if n == 18 {\n        return true\n    }\n    if n == 19 {\n       \
    \ return true\n    }\n    if n == 20 {\n        return true\n    }\n    if n ==\
    \ 21 {\n        return true\n    }\n    if n == 22 {\n        return true\n  \
    \  }\n    if n == 23 {\n        return true\n    }\n    if n == 24 {\n       \
    \ return true\n    }\n    if n == 25 {\n        return true\n    }\n    if n ==\
    \ 26 {\n        return true\n    }\n    if n == 27 {\n        return true\n  \
    \  }\n    if n == 28 {\n        return true\n    }\n    if n == 29 {\n       \
    \ return true\n    }\n    if n == 30 {\n        return true\n    }\n    if n ==\
    \ 31 {\n        return true\n    }\n    if n == 32 {\n        return true\n  \
    \  }\n    if n == 33 {\n        return true\n    }\n    if n == 34 {\n       \
    \ return true\n    }\n    if n == 35 {\n        return true\n    }\n    if n ==\
    \ 36 {\n        return true\n    }\n    if n == 37 {\n        return true\n  \
    \  }\n    if n == 38 {\n        return true\n    }\n    if n == 39 {\n       \
    \ return true\n    }\n    if n == 40 {\n        return true\n    }\n    if n ==\
    \ 41 {\n        return true\n    }\n    if n == 42 {\n        return true\n  \
    \  }\n    if n == 43 {\n        return true\n    }\n    if n == 44 {\n       \
    \ return true\n    }\n    if n == 45 {\n        return true\n    }\n    if n ==\
    \ 46 {\n        return true\n    }\n    if n == 47 {\n        return true\n  \
    \  }\n    if n == 48 {\n        return true\n    }\n    if n == 49 {\n       \
    \ return true\n    }\n    if n == 50 {\n        return true\n    }\n    if n ==\
    \ 51 {\n        return true\n    }\n    if n == 52 {\n        return true\n  \
    \  }\n    if n == 53 {\n        return true\n    }\n    if n == 54 {\n       \
    \ return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmph9bya_2v.swift:200:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmph9bya_2v.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmph9bya_2v.swift:172:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmph9bya_2v.swift:176:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n % 2 == 0 {\n        return false\n    }\n    if n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    var s = 2\n    while i * i <= n {\n       \
    \ if n % i == 0 {\n            return false\n        }\n        i += s\n     \
    \   s += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmp07krbmi9/tmp07krbmi9.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21ea88fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21ea586b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21ea586988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21ea5857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp07krbmi9                        0x000055d3bd28f80a <unavailable> + 6154

    5    libc.so.6                          0x00002b21eaa7b460 __libc_start_main +
    245

    6    tmp07krbmi9                        0x000055d3bd28eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824475
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n == 2\
    \ {\n        return true\n    }\n    if n == 3 {\n        return true\n    }\n\
    \    if n % 2 == 0 {\n        return false\n    }\n    if n % 3 == 0 {\n     \
    \   return false\n    }\n    var i = 5\n    var j = 3\n    var k = 2\n    while\
    \ i * j <= n {\n        if n % i == 0 {\n            return false\n        }\n\
    \        if n % j == 0 {\n            return false\n        }\n        if k %\
    \ i == 0 {\n            return false\n        }\n        if k % j == 0 {\n   \
    \         return false\n        }\n        i += 2\n        j += 2\n        k +=\
    \ 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824477
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    var i = 2\n    var j = 3\n\
    \    var k = n - 1\n    while i <= k {\n        if n % i == 0 {\n            return\
    \ false\n        }\n        if j % i == 0 {\n            return false\n      \
    \  }\n        i += 2\n        j += 2\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmprjaq225c/tmprjaq225c.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b79d33dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b79d30d6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b79d30d6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b79d30d57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprjaq225c                        0x000055b6bbeeb6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b79d35cb460 __libc_start_main +
    245

    6    tmprjaq225c                        0x000055b6bbeeaef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n % 2 == 0 {\n        return false\n    }\n    if n % 3 == 0 {\n        return\
    \ false\n    }\n    let m = Int(sqrt(Double(n)))\n    for _ in 0..<m {\n     \
    \   if n % m == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9lwa86xq.swift:33:17: error: cannot find 'sqrt' in scope\n    let\
    \ m = Int(sqrt(Double(n)))\n                ^~~~\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n % 2 == 0 {\n        return false\n    }\n    if n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    var s = 2\n    while i * i <= n {\n       \
    \ if n % i == 0 {\n            return false\n        }\n        i += s\n     \
    \   s += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmp6yz0hdvp/tmp6yz0hdvp.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b378f573c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b378f26ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b378f26a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b378f2697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6yz0hdvp                        0x00005585c790a4ff <unavailable> + 5375

    5    libc.so.6                          0x00002b378f75f460 __libc_start_main +
    245

    6    tmp6yz0hdvp                        0x00005585c7909ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824477
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  var i = 2\n    var j = 2\n    var k = 3\n    var m = 2\n    while i <= n {\n\
    \        if n % i == 0 {\n            return false\n        }\n        if m ==\
    \ n {\n            return true\n        }\n        if m % i == 0 {\n         \
    \   return false\n        }\n        if m % j == 0 {\n            return false\n\
    \        }\n        if m % k == 0 {\n            return false\n        }\n   \
    \     i += 2\n        j += 2\n        k += 2\n        m += 2\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmp861duvcl/tmp861duvcl.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7447271c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7446f68b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7446f68988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7446f677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp861duvcl                        0x000055cdd283c2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b744745d460 __libc_start_main +
    245

    6    tmp861duvcl                        0x000055cdd283bef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824477
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n == 3 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    var s = 2\n    while i * i <= n {\n       \
    \ if n % i == 0 {\n            return false\n        }\n        i += s\n     \
    \   s += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmpdv2zefp3/tmpdv2zefp3.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c2f9aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c2f6a1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c2f6a1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c2f6a07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdv2zefp3                        0x000055b63f64280a <unavailable> + 6154

    5    libc.so.6                          0x00002b8c2fb96460 __libc_start_main +
    245

    6    tmpdv2zefp3                        0x000055b63f641ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824477
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  var i = 2\n    var j = 3\n    var k = n\n    while i <= k {\n        if n %\
    \ i == 0 {\n            return false\n        }\n        if n % j == 0 {\n   \
    \         return false\n        }\n        if n % k == 0 {\n            return\
    \ false\n        }\n        i += 2\n        j += 2\n        k += 2\n    }\n  \
    \  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpukfn3vy4/tmpukfn3vy4.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba612b9ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba612895b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba612895988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6128947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpukfn3vy4                        0x0000559a78ce72b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ba612d8a460 __libc_start_main +
    245

    6    tmpukfn3vy4                        0x0000559a78ce6ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824477
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    var i = 5\n\
    \    var s = 2\n    while i * i <= n {\n        if n % i == 0 || n % (i + 2) ==\
    \ 0 {\n            return false\n        }\n        i += s\n        s += 6\n \
    \   }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmp85pbga02/tmp85pbga02.swift:67: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b124254fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1242246b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1242246988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b12422457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp85pbga02                        0x000055e092bc580a <unavailable> + 6154

    5    libc.so.6                          0x00002b124273b460 __libc_start_main +
    245

    6    tmp85pbga02                        0x000055e092bc4ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824476
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n == 3 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    if n % 3 == 0 {\n        return false\n    }\n    var i =\
    \ 5\n    var j = 3\n    var k = 2\n    while i * j <= n {\n        if n % i ==\
    \ 0 {\n            return false\n        }\n        if n % j == 0 {\n        \
    \    return false\n        }\n        if k % 3 == 0 {\n            return false\n\
    \        }\n        i = i + 6\n        j = j + 6\n        k = k + 6\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpw50ir39y/tmpw50ir39y.swift:80: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b87e7900c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b87e75f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b87e75f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b87e75f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw50ir39y                        0x0000562277ab877d <unavailable> + 6013

    5    libc.so.6                          0x00002b87e7aec460 __libc_start_main +
    245

    6    tmpw50ir39y                        0x0000562277ab7ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824477
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n % 2 == 0 {\n        return false\n    }\n    if n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    var s = 2\n    while i * i <= n {\n       \
    \ if n % i == 0 {\n            return false\n        }\n        if i == 3 {\n\
    \            if n % i == 0 {\n                return false\n            }\n  \
    \      }\n        i += s\n        s = 6 - s\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpoe3mgvbe/tmpoe3mgvbe.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1adad47c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1adaa3eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1adaa3e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1adaa3d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoe3mgvbe                        0x0000555fb0a344ff <unavailable> + 5375

    5    libc.so.6                          0x00002b1adaf33460 __libc_start_main +
    245

    6    tmpoe3mgvbe                        0x0000555fb0a33ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824477
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n % 2 == 0 {\n        return false\n    }\n    var i = 5\n    var s = 2\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            return false\n \
    \       }\n        i += s\n        s += 2\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpt1ay258b/tmpt1ay258b.swift:67: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee25f17c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee25c0eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee25c0e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee25c0d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt1ay258b                        0x0000555e91e7d80a <unavailable> + 6154

    5    libc.so.6                          0x00002aee26103460 __libc_start_main +
    245

    6    tmpt1ay258b                        0x0000555e91e7cef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824477
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n == 4 {\n        return true\n    }\n    if n == 6 {\n        return true\n\
    \    }\n    if n == 8 {\n        return true\n    }\n    if n == 9 {\n       \
    \ return true\n    }\n    if n == 10 {\n        return true\n    }\n    if n ==\
    \ 11 {\n        return true\n    }\n    if n == 12 {\n        return true\n  \
    \  }\n    if n == 13 {\n        return true\n    }\n    if n == 14 {\n       \
    \ return true\n    }\n    if n == 15 {\n        return true\n    }\n    if n ==\
    \ 16 {\n        return true\n    }\n    if n == 17 {\n        return true\n  \
    \  }\n    if n == 18 {\n        return true\n    }\n    if n == 19 {\n       \
    \ return true\n    }\n    if n == 20 {\n        return true\n    }\n    if n ==\
    \ 21 {\n        return true\n    }\n    if n == 22 {\n        return true\n  \
    \  }\n    if n == 23 {\n        return true\n    }\n    if n == 24 {\n       \
    \ return true\n    }\n    if n == 25 {\n        return true\n    }\n    if n ==\
    \ 26 {\n        return true\n    }\n    if n == 27 {\n        return true\n  \
    \  }\n    if n == 28 {\n        return true\n    }\n    if n == 29 {\n       \
    \ return true\n    }\n    if n == 30 {\n        return true\n    }\n    if n ==\
    \ 31 {\n        return true\n    }\n    if n == 32 {\n        return true\n  \
    \  }\n    if n == 33 {\n        return true\n    }\n    if n == 34 {\n       \
    \ return true\n    }\n    if n == 35 {\n        return true\n    }\n    if n ==\
    \ 36 {\n        return true\n    }\n    if n == 37 {\n        return true\n  \
    \  }\n    if n == 38 {\n        return true\n    }\n    if n == 39 {\n       \
    \ return true\n    }\n    if n == 40 {\n        return true\n    }\n    if n ==\
    \ 41 {\n        return true\n    }\n    if n == 42 {\n        return true\n  \
    \  }\n    if n == 43 {\n        return true\n    }\n    if n == 44 {\n       \
    \ return true\n    }\n    if n == 45 {\n        return true\n    }\n    if n ==\
    \ 46 {\n        return true\n    }\n    if n == 47 {\n        return true\n  \
    \  }\n    if n == 48 {\n        return true\n    }\n    if n == 49 {\n       \
    \ return true\n    }\n    if n == 50 {\n        return true\n    }\n    if n ==\
    \ 51 {\n        return true\n    }\n    if n == 52 {\n        return true\n  \
    \  }\n    if n == 53 {\n        return true\n    }\n    if n == 54 {\n       \
    \ return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmph9bya_2v.swift:200:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmph9bya_2v.swift:17:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmph9bya_2v.swift:172:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmph9bya_2v.swift:176:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n\
    \    var i = 5\n    var j = (n - 1) / 2\n    while i <= j {\n        if n % i\
    \ == 0 {\n            return false\n        }\n        i += 6\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpdursmv43/tmpdursmv43.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abfcbb02c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abfcb7f9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abfcb7f9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abfcb7f87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdursmv43                        0x00005578bf8564ff <unavailable> + 5375

    5    libc.so.6                          0x00002abfcbcee460 __libc_start_main +
    245

    6    tmpdursmv43                        0x00005578bf855ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824477
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n\
    \    var i = 5\n    var j = (3 * n) + 1\n    while i <= j {\n        if n % i\
    \ == 0 {\n            return false\n        }\n        i += 6\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmplq06xcuh/tmplq06xcuh.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae166e30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae166b27b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae166b27988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae166b267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplq06xcuh                        0x000055cf13b072b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ae16701c460 __libc_start_main +
    245

    6    tmplq06xcuh                        0x000055cf13b06ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824475
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n % 2 == 0 {\n        return false\n    }\n    var i = 2\n    var j = 3\n\
    \    var k = n - 1\n    while i <= k {\n        if n % i == 0 {\n            return\
    \ false\n        }\n        if j % i == 0 {\n            return false\n      \
    \  }\n        if k % i == 0 {\n            return false\n        }\n        i\
    \ += 2\n        j += 2\n        k -= 1\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpu7mh_dle/tmpu7mh_dle.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba72d007c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba72ccfeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba72ccfe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba72ccfd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu7mh_dle                        0x000055a8ab52a2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ba72d1f3460 __libc_start_main +
    245

    6    tmpu7mh_dle                        0x000055a8ab529ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824476
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  if n == 3 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    var j = (n - 1) / 2\n    while i <= j {\n \
    \       if n % i == 0 {\n            return false\n        }\n        i += 2\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824477
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n\
    \    var i = 5\n    var s = 2\n    while i * i <= n {\n        if n % i == 0 {\n\
    \            return false\n        }\n        i += s\n        s += 2\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpmkdgdcbi/tmpmkdgdcbi.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b054c8e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b054c5e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b054c5e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b054c5df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmkdgdcbi                        0x0000563cbc6e380a <unavailable> + 6154

    5    libc.so.6                          0x00002b054cad5460 __libc_start_main +
    245

    6    tmpmkdgdcbi                        0x0000563cbc6e2ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824476
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n == 3 {\n        return true\n    }\n   \
    \ if n % 2 == 0 {\n        return false\n    }\n    if n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    var j = (3 * n) + 1\n    while i <= j {\n \
    \       if n % i == 0 {\n            return false\n        }\n        i += 6\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpgeoqktlf/tmpgeoqktlf.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0ac78fdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0ac75f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0ac75f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0ac75f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgeoqktlf                        0x0000564a2b7522b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b0ac7ae9460 __libc_start_main +
    245

    6    tmpgeoqktlf                        0x0000564a2b751ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824477
