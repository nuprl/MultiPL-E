language: swift
name: HumanEval_102_choose_num
results:
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x <= y {\n        return -1\n    }\n    var even: Int\
    \ = 0\n    var odd: Int = 0\n    for num in 1...y {\n        if x % num == 0 {\n\
    \            even = num\n            break\n        }\n    }\n    for num in 1...x\
    \ {\n        if y % num == 0 {\n            odd = num\n            break\n   \
    \     }\n    }\n    if even > odd {\n        return even\n    } else {\n     \
    \   return odd\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmphlwdbfw0/tmphlwdbfw0.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b378dfeec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b378dce5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b378dce5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b378dce47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphlwdbfw0                        0x000055f5c239333d <unavailable> + 4925

    5    libc.so.6                          0x00002b378e1da460 __libc_start_main +
    245

    6    tmphlwdbfw0                        0x000055f5c2392fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824586
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    var even: Int = 0\n    var odd: Int = 0\n    var\
    \ x: Int = 0\n    var y: Int = 0\n    var evenMax: Int = 0\n    var oddMax: Int\
    \ = 0\n    var evenMin: Int = 0\n    var oddMin: Int = 0\n    var evenMaxCount:\
    \ Int = 0\n    var oddMaxCount: Int = 0\n    var evenMinCount: Int = 0\n    var\
    \ oddMinCount: Int = 0\n    var evenMaxCount2: Int = 0\n    var oddMaxCount2:\
    \ Int = 0\n    var evenMinCount2: Int = 0\n    var oddMinCount2: Int = 0\n   \
    \ var evenMaxCount3: Int = 0\n    var oddMaxCount3: Int = 0\n    var evenMinCount3:\
    \ Int = 0\n    var oddMinCount3: Int = 0\n    var evenMaxCount4: Int = 0\n   \
    \ var oddMaxCount4: Int = 0\n    var evenMinCount4: Int = 0\n    var oddMinCount4:\
    \ Int = 0\n    var evenMaxCount5: Int = 0\n    var oddMaxCount5: Int = 0\n   \
    \ var evenMinCount5: Int = 0\n    var oddMinCount5: Int = 0\n    var evenMaxCount6:\
    \ Int = 0\n    var oddMaxCount6: Int = 0\n    var evenMinCount6: Int = 0\n   \
    \ var oddMinCount6: Int = 0\n    var evenMaxCount7: Int = 0\n    var oddMaxCount7:\
    \ Int = 0\n    var evenMinCount7: Int = 0\n    var oddMinCount7: Int = 0\n   \
    \ var evenMaxCount8: Int = 0\n    var oddMaxCount8: Int = 0\n    var evenMinCount8:\
    \ Int = 0\n    var oddMinCount8: Int = 0\n    var evenMaxCount9: Int = 0\n   \
    \ var oddMaxCount9: Int = 0\n    var evenMinCount9: Int = 0\n    var oddMinCount9:\
    \ Int = 0\n    var evenMaxCount10: Int = 0\n    var oddMaxCount10: Int = 0\n \
    \   var evenMinCount10: Int = 0\n    var oddMinCount10: Int = 0\n    var evenMaxCount11:\
    \ Int = 0\n    var oddMaxCount11: Int = 0\n    var evenMinCount11: Int = 0\n \
    \   var oddMinCount11: Int = 0\n    var evenMaxCount12: Int = 0\n    var oddMaxCount12:\
    \ Int = 0\n    var evenMinCount12: Int = 0\n    var oddMinCount12: Int = 0\n \
    \   var evenMaxCount13: Int = 0\n    var oddMaxCount13: Int = 0\n    var evenMinCount13:\
    \ Int = 0\n    var oddMinCount\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpq7ufz__2.swift:74:9: error: type annotation missing in pattern\n\
    \    var oddMinCount\n        ^\n"
  stdout: ''
  timestamp: 1659824586
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x < y {\n        return -1\n    }\n    var even: Int\
    \ = 0\n    var odd: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var evenMax:\
    \ Int = 0\n    var oddMax: Int = 0\n    var evenMin: Int = 0\n    var oddMin:\
    \ Int = 0\n    var evenMaxCount: Int = 0\n    var oddMaxCount: Int = 0\n    var\
    \ evenMinCount: Int = 0\n    var oddMinCount: Int = 0\n    var evenMaxCount2:\
    \ Int = 0\n    var oddMaxCount2: Int = 0\n    var evenMinCount2: Int = 0\n   \
    \ var oddMinCount2: Int = 0\n    var evenMaxCount3: Int = 0\n    var oddMaxCount3:\
    \ Int = 0\n    var evenMinCount3: Int = 0\n    var oddMinCount3: Int = 0\n   \
    \ var evenMaxCount4: Int = 0\n    var oddMaxCount4: Int = 0\n    var evenMinCount4:\
    \ Int = 0\n    var oddMinCount4: Int = 0\n    var evenMaxCount5: Int = 0\n   \
    \ var oddMaxCount5: Int = 0\n    var evenMinCount5: Int = 0\n    var oddMinCount5:\
    \ Int = 0\n    var evenMaxCount6: Int = 0\n    var oddMaxCount6: Int = 0\n   \
    \ var evenMinCount6: Int = 0\n    var oddMinCount6: Int = 0\n    var evenMaxCount7:\
    \ Int = 0\n    var oddMaxCount7: Int = 0\n    var evenMinCount7: Int = 0\n   \
    \ var oddMinCount7: Int = 0\n    var evenMaxCount8: Int = 0\n    var oddMaxCount8:\
    \ Int = 0\n    var evenMinCount8: Int = 0\n    var oddMinCount8: Int = 0\n   \
    \ var evenMaxCount9: Int = 0\n    var oddMaxCount9: Int = 0\n    var evenMinCount9:\
    \ Int = 0\n    var oddMinCount9: Int = 0\n    var evenMaxCount10: Int = 0\n  \
    \  var oddMaxCount10: Int = 0\n    var evenMinCount10: Int = 0\n    var oddMinCount10:\
    \ Int = 0\n    var evenMaxCount11: Int = 0\n    var oddMaxCount11: Int = 0\n \
    \   var evenMinCount11: Int = 0\n    var oddMinCount11: Int = 0\n    var evenMaxCount12:\
    \ Int = 0\n    var oddMaxCount12: Int = 0\n    var evenMinCount12: Int = 0\n \
    \   var oddMinCount12: Int = 0\n    var evenMaxCount13: Int = 0\n    var oddMaxCount13:\
    \ Int = 0\n    var evenMinCount13: Int = 0\n    var oddMinCount13: Int = 0\n \
    \   var evenMaxCount\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpwwwu3wsn.swift:72:9: error: type annotation missing in pattern\n\
    \    var evenMaxCount\n        ^\n"
  stdout: ''
  timestamp: 1659824586
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    var x = x - 1\n    var y = y - 1\n\
    \    var even = 1\n    var odd = 0\n    var xEven = x - even\n    var yEven =\
    \ y - even\n    var xOdd = x - odd\n    var yOdd = y - odd\n    while even > 0\
    \ || odd > 0 {\n        if even > 0 {\n            if xEven == even {\n      \
    \          if yEven == even {\n                    result = even\n           \
    \     } else {\n                    result = xEven\n                }\n      \
    \      } else {\n                result = xEven\n            }\n            even\
    \ = even - 1\n        }\n        if odd > 0 {\n            if xOdd == odd {\n\
    \                if yOdd == odd {\n                    result = odd\n        \
    \        } else {\n                    result = xOdd\n                }\n    \
    \        } else {\n                result = xOdd\n            }\n            odd\
    \ = odd - 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13,\
    \ y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpnzi5n8nm/tmpnzi5n8nm.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b61fac2bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b61fa922b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b61fa922988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b61fa9217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnzi5n8nm                        0x00005567c7a651bd <unavailable> + 4541

    5    libc.so.6                          0x00002b61fae17460 __libc_start_main +
    245

    6    tmpnzi5n8nm                        0x00005567c7a64e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824586
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    if x % 2 == 0 && y % 2 == 0 {\n        return x\
    \ + (y - x) / 2\n    }\n    if x % 2 == 0 && y % 2 != 0 {\n        return x -\
    \ y\n    }\n    if x % 2 != 0 && y % 2 == 0 {\n        return x + y\n    }\n \
    \   if x % 2 != 0 && y % 2 != 0 {\n        return x - y\n    }\n    return -1\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpqty1_vaj/tmpqty1_vaj.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac0b9725c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac0b941cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac0b941c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac0b941b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqty1_vaj                        0x000055ba48e6224d <unavailable> + 4685

    5    libc.so.6                          0x00002ac0b9911460 __libc_start_main +
    245

    6    tmpqty1_vaj                        0x000055ba48e61ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824586
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    var x = abs(x)\n    var y = abs(y)\n\
    \    while x >= y {\n        if x % 2 == 0 {\n            if y % 2 == 0 {\n  \
    \              result = x\n                y /= 2\n            } else {\n    \
    \            result = y\n                x /= 2\n            }\n        } else\
    \ {\n            if y % 2 == 0 {\n                result = y\n               \
    \ x /= 2\n            } else {\n                result = x\n                y\
    \ /= 2\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp4cb0jlqd/tmp4cb0jlqd.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac875a1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac875714b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac875714988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8757137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4cb0jlqd                        0x000055ec7720833d <unavailable> + 4925

    5    libc.so.6                          0x00002ac875c09460 __libc_start_main +
    245

    6    tmp4cb0jlqd                        0x000055ec77207fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824586
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    var x = x - 1\n    var y = y - 1\n\
    \    var even = 1\n    var odd = 0\n    while x >= y {\n        if x % 2 == 0\
    \ {\n            even = even + x\n            x = x - 1\n        } else {\n  \
    \          odd = odd + x\n            x = y - 1\n        }\n    }\n    if even\
    \ > odd {\n        result = even\n    } else {\n        result = odd\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpo0mlmi9n/tmpo0mlmi9n.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b08bd543c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b08bd23ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b08bd23a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b08bd2397b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo0mlmi9n                        0x0000557d1c4ad24d <unavailable> + 4685

    5    libc.so.6                          0x00002b08bd72f460 __libc_start_main +
    245

    6    tmpo0mlmi9n                        0x0000557d1c4acef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824586
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    var x = x - 1\n    var y = y - 1\n\
    \    while x >= y {\n        if x % 2 == 0 && y % 2 == 0 {\n            result\
    \ = x\n            break\n        }\n        x /= 2\n        y /= 2\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp79vulrxk/tmp79vulrxk.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e4acbcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e4a9b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e4a9b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e4a9b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp79vulrxk                        0x000055e714cf524d <unavailable> + 4685

    5    libc.so.6                          0x00002b5e4aea8460 __libc_start_main +
    245

    6    tmp79vulrxk                        0x000055e714cf4ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824586
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    if x % 2 == 0 {\n        return choose_num(x / 2,\
    \ y)\n    }\n    if y % 2 == 0 {\n        return choose_num(x, y / 2)\n    }\n\
    \    return choose_num(x / 2, y / 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp4i9kmxj0.swift:16:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(x / 2, y)\n                         ^\n    \
    \                      x:     y: \n/tmp/tmp4i9kmxj0.swift:19:26: error: missing\
    \ argument labels 'x:y:' in call\n        return choose_num(x, y / 2)\n      \
    \                   ^\n                          x: y: \n/tmp/tmp4i9kmxj0.swift:21:22:\
    \ error: missing argument labels 'x:y:' in call\n    return choose_num(x / 2,\
    \ y / 2)\n                     ^\n                      x:     y: \n"
  stdout: ''
  timestamp: 1659824586
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    var even: Int = 0\n    var odd: Int = 0\n    var\
    \ x: Int\n    var y: Int\n    for x = y; x > 0; x /= 2 {\n        for y = x; y\
    \ > 0; y /= 2 {\n            if x % 2 == 0 && y % 2 == 0 {\n                even\
    \ = x + y\n                break\n            }\n            if x % 2 != 0 &&\
    \ y % 2 != 0 {\n                odd = x + y\n                break\n         \
    \   }\n        }\n    }\n    if even > odd {\n        return even\n    } else\
    \ {\n        return odd\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpoeah8cai.swift:19:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for x = y; x > 0; x /= 2 {\n    ^   ~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpoeah8cai.swift:20:9:\
    \ error: C-style for statement has been removed in Swift 3\n        for y = x;\
    \ y > 0; y /= 2 {\n        ^   ~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824586
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x > y {\n        (x, y) = (y, x)\n    }\n    var even:\
    \ Int = 0\n    var odd: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var\
    \ evenMax: Int = 0\n    var oddMax: Int = 0\n    var evenMin: Int = 0\n    var\
    \ oddMin: Int = 0\n    var evenMaxCount: Int = 0\n    var oddMaxCount: Int = 0\n\
    \    var evenMinCount: Int = 0\n    var oddMinCount: Int = 0\n    var evenMaxCount2:\
    \ Int = 0\n    var oddMaxCount2: Int = 0\n    var evenMinCount2: Int = 0\n   \
    \ var oddMinCount2: Int = 0\n    var evenMaxCount3: Int = 0\n    var oddMaxCount3:\
    \ Int = 0\n    var evenMinCount3: Int = 0\n    var oddMinCount3: Int = 0\n   \
    \ var evenMaxCount4: Int = 0\n    var oddMaxCount4: Int = 0\n    var evenMinCount4:\
    \ Int = 0\n    var oddMinCount4: Int = 0\n    var evenMaxCount5: Int = 0\n   \
    \ var oddMaxCount5: Int = 0\n    var evenMinCount5: Int = 0\n    var oddMinCount5:\
    \ Int = 0\n    var evenMaxCount6: Int = 0\n    var oddMaxCount6: Int = 0\n   \
    \ var evenMinCount6: Int = 0\n    var oddMinCount6: Int = 0\n    var evenMaxCount7:\
    \ Int = 0\n    var oddMaxCount7: Int = 0\n    var evenMinCount7: Int = 0\n   \
    \ var oddMinCount7: Int = 0\n    var evenMaxCount8: Int = 0\n    var oddMaxCount8:\
    \ Int = 0\n    var evenMinCount8: Int = 0\n    var oddMinCount8: Int = 0\n   \
    \ var evenMaxCount9: Int = 0\n    var oddMaxCount9: Int = 0\n    var evenMinCount9:\
    \ Int = 0\n    var oddMinCount9: Int = 0\n    var evenMaxCount10: Int = 0\n  \
    \  var oddMaxCount10: Int = 0\n    var evenMinCount10: Int = 0\n    var oddMinCount10:\
    \ Int = 0\n    var evenMaxCount11: Int = 0\n    var oddMaxCount11: Int = 0\n \
    \   var evenMinCount11: Int = 0\n    var oddMinCount11: Int = 0\n    var evenMaxCount12:\
    \ Int = 0\n    var oddMaxCount12: Int = 0\n    var evenMinCount12: Int = 0\n \
    \   var oddMinCount12: Int = 0\n    var evenMaxCount13: Int = 0\n    var oddMaxCount13:\
    \ Int = 0\n    var evenMinCount13: Int = 0\n    var oddMinCount13: Int = 0\n \
    \   var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpcp4c50c1.swift:72:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpcp4c50c1.swift:10:10: error: cannot assign to value: 'x' is a 'let'\
    \ constant\n        (x, y) = (y, x)\n         ^\n/tmp/tmpcp4c50c1.swift:10:13:\
    \ error: cannot assign to value: 'y' is a 'let' constant\n        (x, y) = (y,\
    \ x)\n            ^\n"
  stdout: ''
  timestamp: 1659824586
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x > y {\n        return -1\n    }\n    \n    var even:\
    \ Int = 0\n    var odd: Int = 0\n    \n    for i in 0..<y {\n        if x % 2\
    \ == 0 {\n            even = even + x\n        } else {\n            odd = odd\
    \ + x\n        }\n        x = x + 1\n    }\n    \n    if even > odd {\n      \
    \  return even\n    } else {\n        return odd\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpooeylboa.swift:22:9: error: cannot assign to value: 'x' is a 'let'\
    \ constant\n        x = x + 1\n        ^\n"
  stdout: ''
  timestamp: 1659824586
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    if x % 2 == 0 && y % 2 == 0 {\n        return (x\
    \ * y) / 2\n    }\n    if x % 2 == 0 {\n        return x / 2\n    }\n    return\
    \ y / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y: 15)\
    \ == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33, y:\
    \ 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmplo04ddgw/tmplo04ddgw.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b33dcb2ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33dc825b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b33dc825988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b33dc8247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplo04ddgw                        0x000055768eed124d <unavailable> + 4685

    5    libc.so.6                          0x00002b33dcd1a460 __libc_start_main +
    245

    6    tmplo04ddgw                        0x000055768eed0ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824586
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    if x % 2 == 0 {\n        return choose_num(x / 2,\
    \ y)\n    }\n    return choose_num(x, y / 2)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12)\
    \ == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234,\
    \ y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp6lyzbzq3.swift:16:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(x / 2, y)\n                         ^\n    \
    \                      x:     y: \n/tmp/tmp6lyzbzq3.swift:18:22: error: missing\
    \ argument labels 'x:y:' in call\n    return choose_num(x, y / 2)\n          \
    \           ^\n                      x: y: \n"
  stdout: ''
  timestamp: 1659824586
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var even: Int = 0\n    var odd: Int = 0\n    var x: Int\
    \ = 0\n    var y: Int = 0\n    \n    if x > y {\n        (x, y) = (y, x)\n   \
    \ }\n    \n    for x in stride(from: x, to: y, by: 2) {\n        if x % 2 == 0\
    \ {\n            even += x\n        } else {\n            odd += x\n        }\n\
    \    }\n    \n    if even > y {\n        return even\n    } else {\n        return\
    \ odd\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp1qbayh5w/tmp1qbayh5w.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b744e5edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b744e2e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b744e2e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b744e2e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1qbayh5w                        0x000055e28620b45d <unavailable> + 5213

    5    libc.so.6                          0x00002b744e7d9460 __libc_start_main +
    245

    6    tmp1qbayh5w                        0x000055e28620b109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1659824586
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    if x < y {\n        result = x\n\
    \    } else {\n        result = y\n    }\n    if result % 2 == 0 {\n        return\
    \ result\n    }\n    while result % 2 == 0 {\n        result /= 2\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpqk7sst97/tmpqk7sst97.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2d79d85c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2d79a7cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2d79a7c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2d79a7b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqk7sst97                        0x000055e9be23524d <unavailable> + 4685

    5    libc.so.6                          0x00002b2d79f71460 __libc_start_main +
    245

    6    tmpqk7sst97                        0x000055e9be234ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824586
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x <= y {\n        return -1\n    }\n    if x > y {\n\
    \        return -1\n    }\n    var even: Int = 0\n    var odd: Int = 0\n    var\
    \ x: Int = 0\n    var y: Int = 0\n    var evenMax: Int = 0\n    var oddMax: Int\
    \ = 0\n    var evenMin: Int = 0\n    var oddMin: Int = 0\n    var evenMaxCount:\
    \ Int = 0\n    var oddMaxCount: Int = 0\n    var evenMinCount: Int = 0\n    var\
    \ oddMinCount: Int = 0\n    var evenMaxCount2: Int = 0\n    var oddMaxCount2:\
    \ Int = 0\n    var evenMinCount2: Int = 0\n    var oddMinCount2: Int = 0\n   \
    \ var evenMaxCount3: Int = 0\n    var oddMaxCount3: Int = 0\n    var evenMinCount3:\
    \ Int = 0\n    var oddMinCount3: Int = 0\n    var evenMaxCount4: Int = 0\n   \
    \ var oddMaxCount4: Int = 0\n    var evenMinCount4: Int = 0\n    var oddMinCount4:\
    \ Int = 0\n    var evenMaxCount5: Int = 0\n    var oddMaxCount5: Int = 0\n   \
    \ var evenMinCount5: Int = 0\n    var oddMinCount5: Int = 0\n    var evenMaxCount6:\
    \ Int = 0\n    var oddMaxCount6: Int = 0\n    var evenMinCount6: Int = 0\n   \
    \ var oddMinCount6: Int = 0\n    var evenMaxCount7: Int = 0\n    var oddMaxCount7:\
    \ Int = 0\n    var evenMinCount7: Int = 0\n    var oddMinCount7: Int = 0\n   \
    \ var evenMaxCount8: Int = 0\n    var oddMaxCount8: Int = 0\n    var evenMinCount8:\
    \ Int = 0\n    var oddMinCount8: Int = 0\n    var evenMaxCount9: Int = 0\n   \
    \ var oddMaxCount9: Int = 0\n    var evenMinCount9: Int = 0\n    var oddMinCount9:\
    \ Int = 0\n    var evenMaxCount10: Int = 0\n    var oddMaxCount10: Int = 0\n \
    \   var evenMinCount10: Int = 0\n    var oddMinCount10: Int = 0\n    var evenMaxCount11:\
    \ Int = 0\n    var oddMaxCount11: Int = 0\n    var evenMinCount11: Int = 0\n \
    \   var oddMinCount11: Int = 0\n    var evenMaxCount12: Int = 0\n    var oddMaxCount12:\
    \ Int = 0\n    var evenMinCount12: Int = 0\n    var oddMinCount12: Int = 0\n \
    \   var evenMaxCount13: Int = 0\n    var oddMaxCount13: Int = 0\n    var evenMinCount13:\
    \ Int = 0\n    var oddMin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp5_psr1ul.swift:74:9: error: type annotation missing in pattern\n\
    \    var oddMin\n        ^\n"
  stdout: ''
  timestamp: 1659824586
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    if x % 2 == 0 && y % 2 == 0 {\n        return choose_num(x\
    \ / 2, y / 2)\n    }\n    if x % 2 == 0 {\n        return choose_num(x / 2, y)\n\
    \    }\n    if y % 2 == 0 {\n        return choose_num(x, y / 2)\n    }\n    return\
    \ -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\n\
    assert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) ==\
    \ 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x: 6,\
    \ y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpfdcsjs_v.swift:16:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(x / 2, y / 2)\n                         ^\n\
    \                          x:     y: \n/tmp/tmpfdcsjs_v.swift:19:26: error: missing\
    \ argument labels 'x:y:' in call\n        return choose_num(x / 2, y)\n      \
    \                   ^\n                          x:     y: \n/tmp/tmpfdcsjs_v.swift:22:26:\
    \ error: missing argument labels 'x:y:' in call\n        return choose_num(x,\
    \ y / 2)\n                         ^\n                          x: y: \n"
  stdout: ''
  timestamp: 1659824586
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    var xMin = x\n    var xMax = y\n\
    \    var yMin = y\n    var yMax = x\n    \n    while xMin <= xMax && yMin <= yMax\
    \ {\n        if (xMin + yMin == xMax + yMax) {\n            result = xMin + yMin\n\
    \            break\n        }\n        if (xMin + yMin > xMax + yMax) {\n    \
    \        yMax = xMin + yMin\n        } else {\n            xMin = xMin + yMin\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: Exception
  stderr: 'tmpqrxxo0vs/tmpqrxxo0vs.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc460c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc45dbdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc45dbd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc45dbc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqrxxo0vs                        0x0000562b13b071bd <unavailable> + 4541

    5    libc.so.6                          0x00002abc462b2460 __libc_start_main +
    245

    6    tmpqrxxo0vs                        0x0000562b13b06e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824586
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    if x % 2 == 0 && y % 2 == 0 {\n        return x\
    \ + (y - x) / 2\n    }\n    if x % 2 == 0 {\n        return x / 2\n    }\n   \
    \ if y % 2 == 0 {\n        return y / 2\n    }\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpxg1b95wq/tmpxg1b95wq.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e6968ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e69381b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e69381988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e693807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxg1b95wq                        0x0000559fa5dd824d <unavailable> + 4685

    5    libc.so.6                          0x00002b1e69876460 __libc_start_main +
    245

    6    tmpxg1b95wq                        0x0000559fa5dd7ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824586
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x <= y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    var even: Int = 0\n    var odd: Int = 0\n    for\
    \ _ in 0..<(x-y) {\n        if x % 2 == 0 {\n            even += 2\n         \
    \   x /= 2\n        } else {\n            odd += 1\n            x /= 2\n     \
    \   }\n    }\n    if even > odd {\n        return even\n    } else {\n       \
    \ return odd\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpepkamyt0.swift:20:15: error: left side of mutating operator isn't\
    \ mutable: 'x' is a 'let' constant\n            x /= 2\n            ~ ^\n/tmp/tmpepkamyt0.swift:23:15:\
    \ error: left side of mutating operator isn't mutable: 'x' is a 'let' constant\n\
    \            x /= 2\n            ~ ^\n"
  stdout: ''
  timestamp: 1659824586
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x < y {\n        swap(x, y)\n    }\n    \n    var result\
    \ = x\n    \n    for _ in 0..<y {\n        if result % 2 == 0 {\n            result\
    \ = result / 2\n        } else {\n            result /= 2\n        }\n    }\n\
    \    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpf2awjrcl.swift:10:9: error: cannot pass immutable value as inout\
    \ argument: 'x' is a 'let' constant\n        swap(x, y)\n        ^    ~\n"
  stdout: ''
  timestamp: 1659824586
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    var even = Int()\n    var odd = Int()\n    for var\
    \ i = x; i <= y; i++ {\n        if i % 2 == 0 {\n            even = i\n      \
    \  } else {\n            odd = i\n        }\n    }\n    if even > odd {\n    \
    \    return even\n    } else {\n        return odd\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpiyl3ko29.swift:17:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = x; i <= y; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824586
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    var even: Int = 0\n    var odd: Int = 0\n    var\
    \ x: Int = 0\n    var y: Int = 0\n    var evenMax: Int = 0\n    var oddMax: Int\
    \ = 0\n    while x < y {\n        if x % 2 == 0 {\n            even = even * 2\
    \ + x\n            if even > evenMax {\n                evenMax = even\n     \
    \       }\n        } else {\n            odd = odd * 2 + x\n            if odd\
    \ > oddMax {\n                oddMax = odd\n            }\n        }\n       \
    \ x += 1\n        y += 1\n    }\n    if evenMax == 0 {\n        return -1\n  \
    \  }\n    if oddMax == 0 {\n        return evenMax\n    }\n    return evenMax\
    \ * 2 + oddMax\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpp98rim6p/tmpp98rim6p.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2cb7591c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2cb7288b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2cb7288988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2cb72877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp98rim6p                        0x00005646dec8624d <unavailable> + 4685

    5    libc.so.6                          0x00002b2cb777d460 __libc_start_main +
    245

    6    tmpp98rim6p                        0x00005646dec85ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824586
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x < y {\n        return -1\n    }\n    var even: Int\
    \ = 0\n    var odd: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    for x\
    \ in stride(from: x, to: y, by: 2) {\n        if x % 2 == 0 {\n            even\
    \ = even * 2 + x\n        } else {\n            odd = odd * 2 + x\n        }\n\
    \    }\n    if even > y {\n        return even\n    } else {\n        return odd\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y: 15)\
    \ == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33, y:\
    \ 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpbiam_s35/tmpbiam_s35.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b459c03ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b459bd35b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b459bd35988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b459bd347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbiam_s35                        0x00005570335a645d <unavailable> + 5213

    5    libc.so.6                          0x00002b459c22a460 __libc_start_main +
    245

    6    tmpbiam_s35                        0x00005570335a6109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1659824586
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    if x % 2 == 0 && y % 2 == 0 {\n        return (x\
    \ * y) / 2\n    }\n    if x % 2 == 0 {\n        return x / 2\n    }\n    if y\
    \ % 2 == 0 {\n        return y / 2\n    }\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp7d1re449/tmp7d1re449.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae43115cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae430e53b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae430e53988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae430e527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d1re449                        0x0000562ca491024d <unavailable> + 4685

    5    libc.so.6                          0x00002ae431348460 __libc_start_main +
    245

    6    tmp7d1re449                        0x0000562ca490fef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824586
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var even: Int = 0\n    var odd: Int = 0\n    var x: Int\n\
    \    var y: Int\n    \n    for (x = y; x > 0; x--, even++) {\n        if ((x %\
    \ 2) == 0) {\n            even = even\n        } else {\n            odd = odd\n\
    \        }\n    }\n    \n    for (x = y; x > 0; x--, odd++) {\n        if ((x\
    \ % 2) == 1) {\n            odd = odd\n        } else {\n            even = even\n\
    \        }\n    }\n    \n    if even > odd {\n        return even\n    } else\
    \ {\n        return odd\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpxt1_11sf.swift:14:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for (x = y; x > 0; x--, even++) {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpxt1_11sf.swift:22:5: error: C-style for statement has been removed in\
    \ Swift 3\n    for (x = y; x > 0; x--, odd++) {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824586
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var even: Int = 0\n    var odd: Int = 0\n    \n    if\
    \ x > y {\n        odd = x\n        even = y\n    } else {\n        even = x\n\
    \        odd = y\n    }\n    \n    while even > 0 {\n        if even % 2 == 0\
    \ {\n            even /= 2\n        } else {\n            odd += 1\n         \
    \   even -= 1\n        }\n    }\n    \n    return odd\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13,\
    \ y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp7i59_akb/tmp7i59_akb.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0305dedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0305ae4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0305ae4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0305ae37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7i59_akb                        0x000055fed0dbc24d <unavailable> + 4685

    5    libc.so.6                          0x00002b0305fd9460 __libc_start_main +
    245

    6    tmp7i59_akb                        0x000055fed0dbbef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824586
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    if x > y {\n        result = x\n\
    \    } else {\n        result = y\n    }\n    \n    while result > 0 && result\
    \ % 2 == 0 {\n        result = result / 2\n    }\n    \n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpepy5i1vs/tmpepy5i1vs.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9eeed18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9eeea0fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9eeea0f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9eeea0e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpepy5i1vs                        0x0000557d6943e24d <unavailable> + 4685

    5    libc.so.6                          0x00002b9eeef04460 __libc_start_main +
    245

    6    tmpepy5i1vs                        0x0000557d6943def9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824586
- exit_code: -1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var even: Int = 0\n    var odd: Int = 0\n    var x: Int\
    \ = x\n    var y: Int = y\n    var evenMax: Int = -1\n    var oddMax: Int = -1\n\
    \    \n    while x >= 0 && y >= 0 {\n        if x % 2 == 0 && y % 2 == 0 {\n \
    \           even = even * x + y\n            evenMax = even\n        } else {\n\
    \            odd = odd * x + y\n            oddMax = odd\n        }\n        x\
    \ = x / 2\n        y = y / 2\n    }\n    \n    if evenMax > -1 && oddMax < 0 {\n\
    \        return evenMax\n    } else if evenMax < -1 && oddMax > 0 {\n        return\
    \ oddMax\n    } else {\n        return -1\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13,\
    \ y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824591
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    var x = abs(x)\n    var y = abs(y)\n\
    \    var biggest = y\n    var smaller = x\n    var even = 1\n    var odd = 0\n\
    \    var biggestEven = 0\n    var biggestOdd = 0\n    var smallerEven = 0\n  \
    \  var smallerOdd = 0\n    \n    while biggest < x {\n        biggest = biggest\
    \ + y\n        biggestEven = biggestEven * even\n        biggestOdd = biggestOdd\
    \ * odd\n        smaller = smaller + y\n        smallerEven = smallerEven * even\n\
    \        smallerOdd = smallerOdd * odd\n        even = even + 1\n        odd =\
    \ odd + 1\n    }\n    \n    if biggest < x {\n        result = biggest\n    }\n\
    \    \n    if biggest == x {\n        if biggest == y {\n            if biggest\
    \ == even {\n                if biggest == biggestEven {\n                   \
    \ if biggest == biggestOdd {\n                        if biggest == smaller {\n\
    \                            if biggest == smallerEven {\n                   \
    \             if biggest == smallerOdd {\n                                   \
    \ if biggest == biggestEven {\n                                        if biggest\
    \ == biggestOdd {\n                                            if biggest == smaller\
    \ {\n                                                if biggest == smallerEven\
    \ {\n                                                    if biggest == smallerOdd\
    \ {\n                                                        if biggest == biggestEven\
    \ {\n                                                            if biggest ==\
    \ biggestOdd {\n                                                             \
    \   if biggest == smaller {\n                                                \
    \    if biggest == smallerEven {\n                                           \
    \             if biggest == smallerOdd {\n                                   \
    \                         if biggest == biggestEven {\n                      \
    \                                          if biggest == biggestOdd {\n      \
    \                                              if biggest == smaller {\n     \
    \                                                   if biggest == smallerEven\
    \ {\n                                                            if biggest ==\
    \ smallerOdd {\n                                                             \
    \   if biggest == biggestEven {\n                                            \
    \                        if biggest == biggestOdd {\n                        \
    \                                                if biggest == smaller {\n   \
    \                                                                         if biggest\
    \ == smallerEven {\n                                                         \
    \                       if biggest == smallerOdd {\n                         \
    \                                                           if biggest == biggestEven\
    \ {\n                                                                        \
    \                if biggest == biggestOdd {\n                                \
    \                                                            if biggest == smaller\
    \ {\n                                                                        \
    \                        if biggest == smallerEven {\n                       \
    \                                                                            \
    \ if biggest == smallerOdd {\n                                               \
    \                                                         if biggest == biggestEven\
    \ {\n                                                                        \
    \                                    if biggest == biggestOdd {\n            \
    \                                                                            \
    \                        if biggest == small\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12)\
    \ == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234,\
    \ y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpumshywhr.swift:71:132: error: expected '{' after 'if' condition\n\
    \                                                                            \
    \                                    if biggest == small\n                   \
    \                                                                            \
    \                                    ^\n/tmp/tmpumshywhr.swift:94:42: error: expected\
    \ '}' at end of brace statement\nassert(choose_num(x: 546, y: 546) == 546)\n \
    \                                        ^\n/tmp/tmpumshywhr.swift:69:131: note:\
    \ to match this opening '{'\n                                                \
    \                                                        if biggest == biggestEven\
    \ {\n                                                                        \
    \                                                          ^\n/tmp/tmpumshywhr.swift:94:42:\
    \ error: expected '}' at end of brace statement\nassert(choose_num(x: 546, y:\
    \ 546) == 546)\n                                         ^\n/tmp/tmpumshywhr.swift:68:126:\
    \ note: to match this opening '{'\n                                          \
    \                                                          if biggest == smallerOdd\
    \ {\n                                                                        \
    \                                                     ^\n/tmp/tmpumshywhr.swift:94:42:\
    \ error: expected '}' at end of brace statement\nassert(choose_num(x: 546, y:\
    \ 546) == 546)\n                                         ^\n/tmp/tmpumshywhr.swift:67:123:\
    \ note: to match this opening '{'\n                                          \
    \                                                      if biggest == smallerEven\
    \ {\n                                                                        \
    \                                                  ^\n/tmp/tmpumshywhr.swift:94:42:\
    \ error: expected '}' at end of brace statement\nassert(choose_num(x: 546, y:\
    \ 546) == 546)\n                                         ^\n/tmp/tmpumshywhr.swift:66:115:\
    \ note: to match this opening '{'\n                                          \
    \       "
  stdout: ''
  timestamp: 1659824586
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    var x = abs(x)\n    var y = abs(y)\n\
    \    var m = 1\n    var n = 2\n    while m <= y {\n        if x % m == 0 && y\
    \ % n == 0 {\n            if m > result {\n                result = m\n      \
    \      }\n            if n > result {\n                result = n\n          \
    \  }\n        }\n        m *= 2\n        n *= 2\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpgsdan9dy/tmpgsdan9dy.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e0e363c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e0e05ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e0e05a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e0e0597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgsdan9dy                        0x0000562f475ed33d <unavailable> + 4925

    5    libc.so.6                          0x00002b5e0e54f460 __libc_start_main +
    245

    6    tmpgsdan9dy                        0x0000562f475ecfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824586
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    if x % 2 == 0 && y % 2 == 0 {\n        return x\
    \ + (y - x)/2\n    }\n    if x % 2 == 0 && y % 2 != 0 {\n        return -1\n \
    \   }\n    if x % 2 != 0 && y % 2 == 0 {\n        return -1\n    }\n    if x %\
    \ 2 != 0 && y % 2 != 0 {\n        return x + (y - x)/2\n    }\n    return -1\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpf2hh5_ye/tmpf2hh5_ye.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9668cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9665c4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9665c4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9665c37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf2hh5_ye                        0x000056510a21124d <unavailable> + 4685

    5    libc.so.6                          0x00002af966ab9460 __libc_start_main +
    245

    6    tmpf2hh5_ye                        0x000056510a210ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824586
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    var x = abs(x)\n    var y = abs(y)\n\
    \    while x > y {\n        if x % 2 == 0 {\n            x = x / 2\n        }\
    \ else {\n            y = y / 2\n        }\n    }\n    if x == y {\n        result\
    \ = x\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpyu_gl2hg/tmpyu_gl2hg.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adc86396c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc8608db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adc8608d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adc8608c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyu_gl2hg                        0x000056342374633d <unavailable> + 4925

    5    libc.so.6                          0x00002adc86582460 __libc_start_main +
    245

    6    tmpyu_gl2hg                        0x0000563423745fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824586
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    var even: Int = 0\n    var odd: Int = 0\n    while\
    \ even < y {\n        even += x\n        odd += y\n    }\n    if even > y {\n\
    \        return -1\n    }\n    return odd\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12)\
    \ == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234,\
    \ y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpt80m7a78/tmpt80m7a78.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002add67862c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002add67559b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002add67559988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002add675587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt80m7a78                        0x0000559ae0cf61bd <unavailable> + 4541

    5    libc.so.6                          0x00002add67a4e460 __libc_start_main +
    245

    6    tmpt80m7a78                        0x0000559ae0cf5e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824586
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x < y {\n        return choose_num(y, x)\n    }\n \
    \   if x == y {\n        return x\n    }\n    if x % 2 == 0 {\n        return\
    \ choose_num(x / 2, y)\n    }\n    if y % 2 == 0 {\n        return choose_num(x,\
    \ y / 2)\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp6d_640qo.swift:10:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(y, x)\n                         ^\n        \
    \                  x: y: \n/tmp/tmp6d_640qo.swift:16:26: error: missing argument\
    \ labels 'x:y:' in call\n        return choose_num(x / 2, y)\n               \
    \          ^\n                          x:     y: \n/tmp/tmp6d_640qo.swift:19:26:\
    \ error: missing argument labels 'x:y:' in call\n        return choose_num(x,\
    \ y / 2)\n                         ^\n                          x: y: \n"
  stdout: ''
  timestamp: 1659824586
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x > y {\n        return -1\n    }\n    \n    var even\
    \ = Int()\n    var odd = Int()\n    \n    for i in 0..<(x-y) {\n        if i %\
    \ 2 == 0 {\n            even += i\n        } else {\n            odd += i\n  \
    \      }\n    }\n    \n    if even > y {\n        return even\n    } else {\n\
    \        return odd\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b61b9b02c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b61b97f9561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b61b97f9286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b61b97f913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b61b97f8bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmps8dj25ix                        0x000055c7c722a837 <unavailable> + 6199

    6    tmps8dj25ix                        0x000055c7c722a2d0 <unavailable> + 4816

    7    libc.so.6                          0x00002b61b9cee460 __libc_start_main +
    245

    8    tmps8dj25ix                        0x000055c7c7229fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824586
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    var even: Int = 0\n    var odd: Int = 0\n    for\
    \ num in 1...y {\n        if num % 2 == 0 {\n            even = num\n        }\
    \ else {\n            odd = num\n        }\n    }\n    if even > x {\n       \
    \ return even\n    } else {\n        return odd\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13,\
    \ y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpk8d7d_56/tmpk8d7d_56.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9f0ab27c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9f0a81eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9f0a81e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9f0a81d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk8d7d_56                        0x00005560a8c3c33d <unavailable> + 4925

    5    libc.so.6                          0x00002b9f0ad13460 __libc_start_main +
    245

    6    tmpk8d7d_56                        0x00005560a8c3bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824586
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    var low = Int(x)\n    var high =\
    \ Int(y)\n    var mid = Int(x / 2)\n    while low <= high {\n        if low %\
    \ 2 == 0 && mid % 2 == 0 {\n            if low < mid {\n                low =\
    \ mid + 1\n            } else {\n                high = mid - 1\n            }\n\
    \        } else {\n            if low % 2 == 0 {\n                low = mid +\
    \ 1\n            } else {\n                high = mid - 1\n            }\n   \
    \     }\n        mid = Int(low / 2)\n    }\n    if low > high {\n        result\
    \ = low\n    } else {\n        result = high\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp17yo6ni2/tmp17yo6ni2.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b58876e5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b58873dcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b58873dc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b58873db7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp17yo6ni2                        0x0000557231aac37d <unavailable> + 4989

    5    libc.so.6                          0x00002b58878d1460 __libc_start_main +
    245

    6    tmp17yo6ni2                        0x0000557231aac029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1659824586
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var even: Int = 0\n    var odd: Int = 0\n    var x: Int\n\
    \    var y: Int\n    for (x = y; x > 0; x--, y += 2) {\n        if x % 2 == 0\
    \ {\n            even = even * x + y\n        } else {\n            odd = odd\
    \ * x + y\n        }\n    }\n    if even > odd { // if even is bigger than odd,\
    \ then return even\n        return even\n    } else {\n        return odd\n  \
    \  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\n\
    assert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) ==\
    \ 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x: 6,\
    \ y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpwo7knldf.swift:13:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for (x = y; x > 0; x--, y += 2) {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824586
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x <= y {\n        return -1\n    }\n    if x > y {\n\
    \        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x\
    \ % 2 == 0 && y % 2 == 0 {\n        return x + y\n    }\n    if x % 2 == 0 &&\
    \ y % 2 != 0 {\n        return x + y - 1\n    }\n    if x % 2 != 0 && y % 2 ==\
    \ 0 {\n        return x + y + 1\n    }\n    if x % 2 != 0 && y % 2 != 0 {\n  \
    \      return x + y - 1\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12)\
    \ == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234,\
    \ y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpl7033425/tmpl7033425.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5d320c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5d31db9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5d31db9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5d31db87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl7033425                        0x0000556bc1ca924d <unavailable> + 4685

    5    libc.so.6                          0x00002b5d322ae460 __libc_start_main +
    245

    6    tmpl7033425                        0x0000556bc1ca8ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824586
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var even: Int = 0\n    var odd: Int = 0\n    var x: Int\
    \ = x\n    var y: Int = y\n    \n    while x >= y {\n        if x % 2 == 0 {\n\
    \            even = even * 2 + x\n        }\n        else {\n            odd =\
    \ odd * 2 + x\n        }\n        x = x / 2\n        y = y / 2\n    }\n    \n\
    \    if even > y {\n        return even\n    }\n    else {\n        return odd\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y: 15)\
    \ == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33, y:\
    \ 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpjhro_pwp/tmpjhro_pwp.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aba2ed41c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba2ea38b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aba2ea38988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aba2ea377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjhro_pwp                        0x000055e9e802224d <unavailable> + 4685

    5    libc.so.6                          0x00002aba2ef2d460 __libc_start_main +
    245

    6    tmpjhro_pwp                        0x000055e9e8021ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824586
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    if x % 2 == 0 && y % 2 == 0 {\n        return (x\
    \ * y) / 2\n    }\n    if x % 2 == 0 {\n        return x / 2\n    }\n    if y\
    \ % 2 == 0 {\n        return y / 2\n    }\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp7d1re449/tmp7d1re449.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae43115cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae430e53b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae430e53988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae430e527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d1re449                        0x0000562ca491024d <unavailable> + 4685

    5    libc.so.6                          0x00002ae431348460 __libc_start_main +
    245

    6    tmp7d1re449                        0x0000562ca490fef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824586
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    if x < y {\n        for var i = x;\
    \ i <= y; i++ {\n            if i % 2 == 0 {\n                result = i\n   \
    \             break\n            }\n        }\n    } else {\n        for var i\
    \ = y; i <= x; i++ {\n            if i % 2 == 0 {\n                result = i\n\
    \                break\n            }\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpl6n7awmm.swift:11:9: error: C-style for statement has been removed\
    \ in Swift 3\n        for var i = x; i <= y; i++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpl6n7awmm.swift:18:9: error: C-style for statement has been removed in\
    \ Swift 3\n        for var i = y; i <= x; i++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824586
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x <= y {\n        return -1\n    }\n    var even: Int\
    \ = 0\n    var odd: Int = 0\n    for n in 1...y {\n        if x % n == 0 {\n \
    \           even = even * n + n\n        }\n        else {\n            odd =\
    \ odd * n + n\n        }\n    }\n    if even > y {\n        return even\n    }\n\
    \    return odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpu3vldgkm/tmpu3vldgkm.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3bd4e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3bd4b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3bd4b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3bd4b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu3vldgkm                        0x0000556cc272933d <unavailable> + 4925

    5    libc.so.6                          0x00002b3bd504a460 __libc_start_main +
    245

    6    tmpu3vldgkm                        0x0000556cc2728fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824586
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    if x % 2 == 0 && y % 2 == 0 {\n        return x\
    \ + y\n    }\n    if x % 2 == 0 && y % 2 != 0 {\n        return x - y\n    }\n\
    \    if x % 2 != 0 && y % 2 == 0 {\n        return x - y\n    }\n    if x % 2\
    \ != 0 && y % 2 != 0 {\n        return x + y\n    }\n    return -1\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp1972nkhe/tmp1972nkhe.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4f38e8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4f38b84b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4f38b84988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4f38b837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1972nkhe                        0x000055af1cade24d <unavailable> + 4685

    5    libc.so.6                          0x00002b4f39079460 __libc_start_main +
    245

    6    tmp1972nkhe                        0x000055af1caddef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824586
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    var x = x - 1\n    var y = y - 1\n\
    \    while x >= y {\n        if x % 2 == 0 && y % 2 == 0 {\n            result\
    \ = x\n            break\n        }\n        x /= 2\n        y /= 2\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp79vulrxk/tmp79vulrxk.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e4acbcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e4a9b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e4a9b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e4a9b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp79vulrxk                        0x000055e714cf524d <unavailable> + 4685

    5    libc.so.6                          0x00002b5e4aea8460 __libc_start_main +
    245

    6    tmp79vulrxk                        0x000055e714cf4ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824586
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    if x % 2 == 0 {\n        return choose_num(x / 2,\
    \ y)\n    }\n    return choose_num(x, y / 2)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12)\
    \ == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234,\
    \ y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp6lyzbzq3.swift:16:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(x / 2, y)\n                         ^\n    \
    \                      x:     y: \n/tmp/tmp6lyzbzq3.swift:18:22: error: missing\
    \ argument labels 'x:y:' in call\n    return choose_num(x, y / 2)\n          \
    \           ^\n                      x: y: \n"
  stdout: ''
  timestamp: 1659824586
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    if x % 2 == 0 && y % 2 == 0 {\n        return (x\
    \ * y) / 2\n    }\n    if x % 2 == 0 {\n        return x / 2\n    }\n    if y\
    \ % 2 == 0 {\n        return y / 2\n    }\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp7d1re449/tmp7d1re449.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae43115cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae430e53b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae430e53988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae430e527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d1re449                        0x0000562ca491024d <unavailable> + 4685

    5    libc.so.6                          0x00002ae431348460 __libc_start_main +
    245

    6    tmp7d1re449                        0x0000562ca490fef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824586
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x <= y {\n        return -1\n    }\n    \n    var even:\
    \ Int = 0\n    var odd: Int = 0\n    \n    for _ in 0..<(x-y) {\n        even\
    \ = even + 2\n        odd = odd + 1\n    }\n    \n    if even > y {\n        return\
    \ even\n    }\n    \n    return odd\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: Exception
  stderr: 'tmpyc3aip3b/tmpyc3aip3b.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b317c756c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b317c44db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b317c44d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b317c44c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyc3aip3b                        0x0000561a6e6cc33d <unavailable> + 4925

    5    libc.so.6                          0x00002b317c942460 __libc_start_main +
    245

    6    tmpyc3aip3b                        0x0000561a6e6cbfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824586
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    if x % 2 == 0 {\n        return choose_num(x / 2,\
    \ y)\n    }\n    if y % 2 == 0 {\n        return choose_num(x, y / 2)\n    }\n\
    \    return choose_num(x / 2, y / 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp4i9kmxj0.swift:16:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(x / 2, y)\n                         ^\n    \
    \                      x:     y: \n/tmp/tmp4i9kmxj0.swift:19:26: error: missing\
    \ argument labels 'x:y:' in call\n        return choose_num(x, y / 2)\n      \
    \                   ^\n                          x: y: \n/tmp/tmp4i9kmxj0.swift:21:22:\
    \ error: missing argument labels 'x:y:' in call\n    return choose_num(x / 2,\
    \ y / 2)\n                     ^\n                      x:     y: \n"
  stdout: ''
  timestamp: 1659824586
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x <= y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    var even: Int = 0\n    var odd: Int = 0\n    var\
    \ x: Int = 0\n    var y: Int = 0\n    var evenMax: Int = 0\n    var oddMax: Int\
    \ = 0\n    var evenMin: Int = 0\n    var oddMin: Int = 0\n    while x <= y {\n\
    \        if x % 2 == 0 {\n            even = even * 2 + x\n            if even\
    \ > evenMax {\n                evenMax = even\n            }\n            if even\
    \ < evenMin {\n                evenMin = even\n            }\n        } else {\n\
    \            odd = odd * 2 + x\n            if odd > oddMax {\n              \
    \  oddMax = odd\n            }\n            if odd < oddMin {\n              \
    \  oddMin = odd\n            }\n        }\n        x += 1\n        y += 1\n  \
    \  }\n    if evenMax < oddMax {\n        return evenMax\n    } else {\n      \
    \  return oddMax\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpfopj1664/tmpfopj1664.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6ae08ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6add81b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6add81988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6add807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfopj1664                        0x000056235f6a624d <unavailable> + 4685

    5    libc.so.6                          0x00002ba6ae276460 __libc_start_main +
    245

    6    tmpfopj1664                        0x000056235f6a5ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824586
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    if x % 2 == 0 && y % 2 == 0 {\n        return x\
    \ + (y - x) / 2\n    }\n    if x % 2 == 0 {\n        return x + y / 2\n    }\n\
    \    if y % 2 == 0 {\n        return x - y / 2\n    }\n    return -1\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpzhfrdz2k/tmpzhfrdz2k.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c95a95c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c9578cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c9578c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c9578b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhfrdz2k                        0x000055a6d75c224d <unavailable> + 4685

    5    libc.so.6                          0x00002b2c95c81460 __libc_start_main +
    245

    6    tmpzhfrdz2k                        0x000055a6d75c1ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824587
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var even: Int = 0\n    var odd: Int = 0\n    var biggest:\
    \ Int = 0\n    var evenNumber: Int = 0\n    var oddNumber: Int = 0\n    \n   \
    \ if x > y {\n        biggest = y\n        even = y\n        odd = x\n    } else\
    \ {\n        biggest = x\n        even = x\n        odd = y\n    }\n    \n   \
    \ while even > 0 && odd > 0 {\n        if even % 2 == 0 {\n            evenNumber\
    \ += even\n            even /= 2\n        } else {\n            oddNumber += odd\n\
    \            odd /= 2\n        }\n    }\n    \n    if evenNumber > biggest {\n\
    \        biggest = evenNumber\n    }\n    \n    if oddNumber > biggest {\n   \
    \     biggest = oddNumber\n    }\n    \n    return biggest\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpexang3lo/tmpexang3lo.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1cb62b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1cb5fb0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1cb5fb0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1cb5faf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpexang3lo                        0x0000562be823224d <unavailable> + 4685

    5    libc.so.6                          0x00002b1cb64a5460 __libc_start_main +
    245

    6    tmpexang3lo                        0x0000562be8231ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824587
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    if x % 2 == 0 {\n        return choose_num(x / 2,\
    \ y)\n    }\n    if y % 2 == 0 {\n        return choose_num(x, y / 2)\n    }\n\
    \    return choose_num(x / 2, y / 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp4i9kmxj0.swift:16:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(x / 2, y)\n                         ^\n    \
    \                      x:     y: \n/tmp/tmp4i9kmxj0.swift:19:26: error: missing\
    \ argument labels 'x:y:' in call\n        return choose_num(x, y / 2)\n      \
    \                   ^\n                          x: y: \n/tmp/tmp4i9kmxj0.swift:21:22:\
    \ error: missing argument labels 'x:y:' in call\n    return choose_num(x / 2,\
    \ y / 2)\n                     ^\n                      x:     y: \n"
  stdout: ''
  timestamp: 1659824586
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x < y {\n        return -1\n    }\n    \n    var even:\
    \ Int = 0\n    var odd: Int = 0\n    \n    for _ in 0..<(x-y) {\n        even\
    \ = even + 2\n        odd = odd + 1\n    }\n    \n    if even > y {\n        return\
    \ -1\n    }\n    \n    return even\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: Exception
  stderr: 'tmpfc89v6kd/tmpfc89v6kd.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaae45bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaae42b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaae42b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaae42b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfc89v6kd                        0x0000563b3c34933d <unavailable> + 4925

    5    libc.so.6                          0x00002aaae47a6460 __libc_start_main +
    245

    6    tmpfc89v6kd                        0x0000563b3c348fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824587
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    if x % 2 == 0 {\n        return choose_num(x / 2,\
    \ y)\n    }\n    if y % 2 == 0 {\n        return choose_num(x, y / 2)\n    }\n\
    \    return choose_num(x / 2, y / 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp4i9kmxj0.swift:16:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(x / 2, y)\n                         ^\n    \
    \                      x:     y: \n/tmp/tmp4i9kmxj0.swift:19:26: error: missing\
    \ argument labels 'x:y:' in call\n        return choose_num(x, y / 2)\n      \
    \                   ^\n                          x: y: \n/tmp/tmp4i9kmxj0.swift:21:22:\
    \ error: missing argument labels 'x:y:' in call\n    return choose_num(x / 2,\
    \ y / 2)\n                     ^\n                      x:     y: \n"
  stdout: ''
  timestamp: 1659824586
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x <= y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    if x % 2 == 0 && y % 2 == 0 {\n        return choose_num(x\
    \ / 2, y) / 2\n    }\n    if x % 2 == 0 {\n        return choose_num(x / 2, y)\n\
    \    }\n    return choose_num(x, y / 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpn8x1zhyt.swift:16:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(x / 2, y) / 2\n                         ^\n\
    \                          x:     y: \n/tmp/tmpn8x1zhyt.swift:19:26: error: missing\
    \ argument labels 'x:y:' in call\n        return choose_num(x / 2, y)\n      \
    \                   ^\n                          x:     y: \n/tmp/tmpn8x1zhyt.swift:21:22:\
    \ error: missing argument labels 'x:y:' in call\n    return choose_num(x, y /\
    \ 2)\n                     ^\n                      x: y: \n"
  stdout: ''
  timestamp: 1659824587
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x > y {\n        (x, y) = (y, x)\n    }\n    var even:\
    \ Int = 0\n    var odd: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var\
    \ evenMax: Int = 0\n    var oddMax: Int = 0\n    for x in stride(from: x, to:\
    \ y, by: 2) {\n        for y in stride(from: y, to: x, by: 2) {\n            if\
    \ x % 2 == 0 && y % 2 == 0 {\n                even = x + y\n                if\
    \ even > evenMax {\n                    evenMax = even\n                }\n  \
    \          } else if x % 2 != 0 && y % 2 != 0 {\n                odd = x + y\n\
    \                if odd > oddMax {\n                    oddMax = odd\n       \
    \         }\n            }\n        }\n    }\n    if evenMax == 0 {\n        return\
    \ -1\n    }\n    if evenMax < x {\n        return evenMax\n    }\n    if oddMax\
    \ < y {\n        return oddMax\n    }\n    return evenMax\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp0innqmoc.swift:10:10: error: cannot assign to value: 'x' is a 'let'\
    \ constant\n        (x, y) = (y, x)\n         ^\n/tmp/tmp0innqmoc.swift:10:13:\
    \ error: cannot assign to value: 'y' is a 'let' constant\n        (x, y) = (y,\
    \ x)\n            ^\n"
  stdout: ''
  timestamp: 1659824586
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    var xx = x\n    var yy = y\n    var\
    \ even = 1\n    var odd = 0\n    while xx <= yy {\n        if xx % 2 == 0 {\n\
    \            even = even + 1\n        } else {\n            odd = odd + 1\n  \
    \      }\n        xx = xx + 1\n    }\n    if even > odd {\n        result = even\n\
    \    } else {\n        result = odd\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp7eg1l4ws/tmp7eg1l4ws.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6685e14c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6685b0bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6685b0b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6685b0a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7eg1l4ws                        0x0000562851b0724d <unavailable> + 4685

    5    libc.so.6                          0x00002b6686000460 __libc_start_main +
    245

    6    tmp7eg1l4ws                        0x0000562851b06ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824587
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x < y {\n        (x, y) = (y, x)\n    }\n    var even:\
    \ Int = 0\n    var odd: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var\
    \ evenMax: Int = 0\n    var oddMax: Int = 0\n    var evenMin: Int = 0\n    var\
    \ oddMin: Int = 0\n    var evenMaxIndex: Int = 0\n    var oddMaxIndex: Int = 0\n\
    \    var evenMinIndex: Int = 0\n    var oddMinIndex: Int = 0\n    var evenMaxIndex2:\
    \ Int = 0\n    var oddMaxIndex2: Int = 0\n    var evenMinIndex2: Int = 0\n   \
    \ var oddMinIndex2: Int = 0\n    var evenMaxIndex3: Int = 0\n    var oddMaxIndex3:\
    \ Int = 0\n    var evenMinIndex3: Int = 0\n    var oddMinIndex3: Int = 0\n   \
    \ var evenMaxIndex4: Int = 0\n    var oddMaxIndex4: Int = 0\n    var evenMinIndex4:\
    \ Int = 0\n    var oddMinIndex4: Int = 0\n    var evenMaxIndex5: Int = 0\n   \
    \ var oddMaxIndex5: Int = 0\n    var evenMinIndex5: Int = 0\n    var oddMinIndex5:\
    \ Int = 0\n    var evenMaxIndex6: Int = 0\n    var oddMaxIndex6: Int = 0\n   \
    \ var evenMinIndex6: Int = 0\n    var oddMinIndex6: Int = 0\n    var evenMaxIndex7:\
    \ Int = 0\n    var oddMaxIndex7: Int = 0\n    var evenMinIndex7: Int = 0\n   \
    \ var oddMinIndex7: Int = 0\n    var evenMaxIndex8: Int = 0\n    var oddMaxIndex8:\
    \ Int = 0\n    var evenMinIndex8: Int = 0\n    var oddMinIndex8: Int = 0\n   \
    \ var evenMaxIndex9: Int = 0\n    var oddMaxIndex9: Int = 0\n    var evenMinIndex9:\
    \ Int = 0\n    var oddMinIndex9: Int = 0\n    var evenMaxIndex10: Int = 0\n  \
    \  var oddMaxIndex10: Int = 0\n    var evenMinIndex10: Int = 0\n    var oddMinIndex10:\
    \ Int = 0\n    var evenMaxIndex11: Int = 0\n    var oddMaxIndex11: Int = 0\n \
    \   var evenMinIndex11: Int = 0\n    var oddMinIndex11: Int = 0\n    var evenMaxIndex12:\
    \ Int = 0\n    var oddMaxIndex12: Int = 0\n    var evenMinIndex12: Int = 0\n \
    \   var oddMinIndex12: Int = 0\n    var evenMaxIndex13: Int = 0\n    var oddMaxIndex13:\
    \ Int = 0\n    var evenMinIndex13: Int = 0\n    var oddMinIndex13: Int = 0\n \
    \   var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpnr_fg_ly.swift:72:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpnr_fg_ly.swift:10:10: error: cannot assign to value: 'x' is a 'let'\
    \ constant\n        (x, y) = (y, x)\n         ^\n/tmp/tmpnr_fg_ly.swift:10:13:\
    \ error: cannot assign to value: 'y' is a 'let' constant\n        (x, y) = (y,\
    \ x)\n            ^\n"
  stdout: ''
  timestamp: 1659824586
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    var even = 1\n    var odd = 0\n \
    \   var xEven = x % 2\n    var yEven = y % 2\n    var xOdd = x % 2\n    var yOdd\
    \ = y % 2\n    while even > 0 || odd > 0 {\n        if xEven == yEven {\n    \
    \        if xEven == 1 {\n                result = x\n            } else {\n \
    \               result = y\n            }\n            even = 0\n            odd\
    \ = 0\n        } else if xOdd == yOdd {\n            if xOdd == 1 {\n        \
    \        result = x\n            } else {\n                result = y\n      \
    \      }\n            even = 0\n            odd = 0\n        } else {\n      \
    \      if xEven == 1 {\n                result = x\n            } else {\n   \
    \             result = y\n            }\n            even = 0\n            odd\
    \ = 0\n        }\n        xEven = xOdd\n        yEven = yOdd\n        xOdd = x\
    \ % 2\n        yOdd = y % 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13,\
    \ y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmplfiea9gu/tmplfiea9gu.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b73d925ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b73d8f55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b73d8f55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b73d8f547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplfiea9gu                        0x0000562ba371f24d <unavailable> + 4685

    5    libc.so.6                          0x00002b73d944a460 __libc_start_main +
    245

    6    tmplfiea9gu                        0x0000562ba371eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824587
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var even: Int = 0\n    var odd: Int = 0\n    var x: Int\
    \ = 0\n    var y: Int = 0\n    var evenMax: Int = 0\n    var oddMax: Int = 0\n\
    \    var evenMin: Int = 0\n    var oddMin: Int = 0\n    var evenMaxCount: Int\
    \ = 0\n    var oddMaxCount: Int = 0\n    var evenMinCount: Int = 0\n    var oddMinCount:\
    \ Int = 0\n    var evenMaxCount2: Int = 0\n    var oddMaxCount2: Int = 0\n   \
    \ var evenMinCount2: Int = 0\n    var oddMinCount2: Int = 0\n    var evenMaxCount3:\
    \ Int = 0\n    var oddMaxCount3: Int = 0\n    var evenMinCount3: Int = 0\n   \
    \ var oddMinCount3: Int = 0\n    var evenMaxCount4: Int = 0\n    var oddMaxCount4:\
    \ Int = 0\n    var evenMinCount4: Int = 0\n    var oddMinCount4: Int = 0\n   \
    \ var evenMaxCount5: Int = 0\n    var oddMaxCount5: Int = 0\n    var evenMinCount5:\
    \ Int = 0\n    var oddMinCount5: Int = 0\n    var evenMaxCount6: Int = 0\n   \
    \ var oddMaxCount6: Int = 0\n    var evenMinCount6: Int = 0\n    var oddMinCount6:\
    \ Int = 0\n    var evenMaxCount7: Int = 0\n    var oddMaxCount7: Int = 0\n   \
    \ var evenMinCount7: Int = 0\n    var oddMinCount7: Int = 0\n    var evenMaxCount8:\
    \ Int = 0\n    var oddMaxCount8: Int = 0\n    var evenMinCount8: Int = 0\n   \
    \ var oddMinCount8: Int = 0\n    var evenMaxCount9: Int = 0\n    var oddMaxCount9:\
    \ Int = 0\n    var evenMinCount9: Int = 0\n    var oddMinCount9: Int = 0\n   \
    \ var evenMaxCount10: Int = 0\n    var oddMaxCount10: Int = 0\n    var evenMinCount10:\
    \ Int = 0\n    var oddMinCount10: Int = 0\n    var evenMaxCount11: Int = 0\n \
    \   var oddMaxCount11: Int = 0\n    var evenMinCount11: Int = 0\n    var oddMinCount11:\
    \ Int = 0\n    var evenMaxCount12: Int = 0\n    var oddMaxCount12: Int = 0\n \
    \   var evenMinCount12: Int = 0\n    var oddMinCount12: Int = 0\n    var evenMaxCount13:\
    \ Int = 0\n    var oddMaxCount13: Int = 0\n    var evenMinCount13: Int = 0\n \
    \   var oddMinCount13: Int = 0\n    var evenMaxCount14: Int = 0\n    var oddMaxCount14\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpid8dnngy.swift:70:9: error: type annotation missing in pattern\n\
    \    var oddMaxCount14\n        ^\n"
  stdout: ''
  timestamp: 1659824587
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    var x = x - 1\n    var y = y - 1\n\
    \    var even = 1\n    var odd = 0\n    var eveneven = 1\n    var evenodd = 0\n\
    \    var oddodd = 0\n    var eveneveneven = 1\n    var evenoddodd = 0\n    var\
    \ oddoddeven = 0\n    var oddeveneven = 0\n    var evenevenodd = 0\n    var evenoddodd\
    \ = 0\n    var oddoddeven = 0\n    var eveneveneven = 0\n    var evenoddodd =\
    \ 0\n    var oddoddeven = 0\n    var eveneveneven = 0\n    var evenoddodd = 0\n\
    \    var oddoddeven = 0\n    var eveneveneven = 0\n    var evenodd = 0\n    var\
    \ oddoddeven = 0\n    var eveneveneven = 0\n    var evenodd = 0\n    var oddoddeven\
    \ = 0\n    var eveneveneven = 0\n    var evenodd = 0\n    var oddoddeven = 0\n\
    \    var eveneveneven = 0\n    var evenodd = 0\n    var oddoddeven = 0\n    var\
    \ eveneveneven = 0\n    var evenodd = 0\n    var oddoddeven = 0\n    var eveneveneven\
    \ = 0\n    var evenodd = 0\n    var oddoddeven = 0\n    var eveneveneven = 0\n\
    \    var evenodd = 0\n    var oddoddeven = 0\n    var eveneveneven = 0\n    var\
    \ evenodd = 0\n    var oddoddeven = 0\n    var eveneveneven = 0\n    var evenodd\
    \ = 0\n    var oddoddeven = 0\n    var eveneveneven = 0\n    var evenodd = 0\n\
    \    var oddoddeven = 0\n    var eveneveneven = 0\n    var evenodd = 0\n    var\
    \ oddoddeven = 0\n    var eveneveneven = 0\n    var evenodd = 0\n    var oddoddeven\
    \ = 0\n    var eveneveneven = 0\n    var evenodd = 0\n    var oddoddeven = 0\n\
    \    var eveneveneven = 0\n    var evenodd = 0\n    var oddoddeven = 0\n    var\
    \ eveneveneven = 0\n    var evenodd = 0\n    var oddoddeven = 0\n    var eveneveneven\
    \ = 0\n    var evenodd = 0\n    var oddoddeven = 0\n    var eveneveneven = 0\n\
    \    var evenodd = 0\n    var oddoddeven = 0\n    var eveneveneven = 0\n    var\
    \ evenodd = 0\n    var oddoddeven = 0\n    var eveneveneven = 0\n    var evenodd\
    \ = 0\n    var oddoddeven = 0\n    var eveneveneven = 0\n    var evenodd = 0\n\
    \    var oddoddeven = 0\n    var eveneveneven = 0\n    var evenodd = 0\n    var\
    \ oddoddeven = 0\n    var eveneveneven = 0\n    var evenodd = 0\n    var oddoddeven\
    \ = 0\n    var eveneveneven = 0\n    var evenodd = 0\n    var oddoddeven = 0\n\
    \    var eveneveneven = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpjf4bkl15.swift:22:9: error: invalid redeclaration of 'evenoddodd'\n\
    \    var evenoddodd = 0\n        ^\n/tmp/tmpjf4bkl15.swift:18:9: note: 'evenoddodd'\
    \ previously declared here\n    var evenoddodd = 0\n        ^\n/tmp/tmpjf4bkl15.swift:23:9:\
    \ error: invalid redeclaration of 'oddoddeven'\n    var oddoddeven = 0\n     \
    \   ^\n/tmp/tmpjf4bkl15.swift:19:9: note: 'oddoddeven' previously declared here\n\
    \    var oddoddeven = 0\n        ^\n/tmp/tmpjf4bkl15.swift:24:9: error: invalid\
    \ redeclaration of 'eveneveneven'\n    var eveneveneven = 0\n        ^\n/tmp/tmpjf4bkl15.swift:17:9:\
    \ note: 'eveneveneven' previously declared here\n    var eveneveneven = 1\n  \
    \      ^\n/tmp/tmpjf4bkl15.swift:25:9: error: invalid redeclaration of 'evenoddodd'\n\
    \    var evenoddodd = 0\n        ^\n/tmp/tmpjf4bkl15.swift:18:9: note: 'evenoddodd'\
    \ previously declared here\n    var evenoddodd = 0\n        ^\n/tmp/tmpjf4bkl15.swift:26:9:\
    \ error: invalid redeclaration of 'oddoddeven'\n    var oddoddeven = 0\n     \
    \   ^\n/tmp/tmpjf4bkl15.swift:19:9: note: 'oddoddeven' previously declared here\n\
    \    var oddoddeven = 0\n        ^\n/tmp/tmpjf4bkl15.swift:27:9: error: invalid\
    \ redeclaration of 'eveneveneven'\n    var eveneveneven = 0\n        ^\n/tmp/tmpjf4bkl15.swift:17:9:\
    \ note: 'eveneveneven' previously declared here\n    var eveneveneven = 1\n  \
    \      ^\n/tmp/tmpjf4bkl15.swift:28:9: error: invalid redeclaration of 'evenoddodd'\n\
    \    var evenoddodd = 0\n        ^\n/tmp/tmpjf4bkl15.swift:18:9: note: 'evenoddodd'\
    \ previously declared here\n    var evenoddodd = 0\n        ^\n/tmp/tmpjf4bkl15.swift:29:9:\
    \ error: invalid redeclaration of 'oddoddeven'\n    var oddoddeven = 0\n     \
    \   ^\n/tmp/tmpjf4bkl15.swift:19:9: note: 'oddoddeven' previously declared here\n\
    \    var oddoddeven = 0\n        ^\n/tmp/tmpjf4bkl15.swift:30:9: error: invalid\
    \ redeclaration of 'eveneveneven'\n    var eveneveneven = 0\n        ^\n/tmp/tmpjf4bkl15.swift:17:9:\
    \ note: 'eveneveneven' previously declared here\n    var eveneveneven = 1\n  \
    \      ^\n/tmp/tmpjf4bkl15.swift:31:9: error: invalid redeclaration of 'evenodd'\n\
    \    var evenodd = 0\n        ^\n/tmp/t"
  stdout: ''
  timestamp: 1659824587
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x <= y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    var even = Int()\n    var odd = Int()\n    var result\
    \ = Int()\n    var x = Int()\n    var y = Int()\n    for _ in 0..<y {\n      \
    \  x = Int()\n        y = Int()\n        for _ in 0..<x {\n            x += Int()\n\
    \            y += Int()\n        }\n        if x % 2 == 0 {\n            even\
    \ = x + 1\n        } else {\n            odd = x + 1\n        }\n        if even\
    \ > y {\n            result = even\n            break\n        }\n        if odd\
    \ > y {\n            result = odd\n            break\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpqjeq9l58/tmpqjeq9l58.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30d3686c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30d337db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30d337d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30d337c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqjeq9l58                        0x0000563629d1133d <unavailable> + 4925

    5    libc.so.6                          0x00002b30d3872460 __libc_start_main +
    245

    6    tmpqjeq9l58                        0x0000563629d10fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824587
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x <= y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    if x % 2 == 0 {\n        return choose_num(x / 2,\
    \ y)\n    }\n    if y % 2 == 0 {\n        return choose_num(x, y / 2)\n    }\n\
    \    return choose_num(x / 2, y / 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpzsuj1v8t.swift:16:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(x / 2, y)\n                         ^\n    \
    \                      x:     y: \n/tmp/tmpzsuj1v8t.swift:19:26: error: missing\
    \ argument labels 'x:y:' in call\n        return choose_num(x, y / 2)\n      \
    \                   ^\n                          x: y: \n/tmp/tmpzsuj1v8t.swift:21:22:\
    \ error: missing argument labels 'x:y:' in call\n    return choose_num(x / 2,\
    \ y / 2)\n                     ^\n                      x:     y: \n"
  stdout: ''
  timestamp: 1659824587
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var even: Int = 0\n    var odd: Int = 0\n    \n    if\
    \ x < y {\n        even = choose_num(y, x)\n    } else {\n        odd = choose_num(x,\
    \ y)\n    }\n    \n    if even > odd {\n        return even\n    } else {\n  \
    \      return odd\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpht88w_sb.swift:13:26: error: missing argument labels 'x:y:' in\
    \ call\n        even = choose_num(y, x)\n                         ^\n        \
    \                  x: y: \n/tmp/tmpht88w_sb.swift:15:25: error: missing argument\
    \ labels 'x:y:' in call\n        odd = choose_num(x, y)\n                    \
    \    ^\n                         x: y: \n"
  stdout: ''
  timestamp: 1659824587
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    if x % 2 == 0 && y % 2 == 0 {\n        return x\
    \ + (y - x)\n    }\n    if x % 2 == 0 {\n        return x - y\n    }\n    if y\
    \ % 2 == 0 {\n        return y + x\n    }\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpv3sim6os/tmpv3sim6os.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab2e2e74c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab2e2b6bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab2e2b6b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab2e2b6a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv3sim6os                        0x000055c455bef24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab2e3060460 __libc_start_main +
    245

    6    tmpv3sim6os                        0x000055c455beeef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824587
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x < y {\n        return -1\n    }\n    var result =\
    \ x\n    for _ in 0..<(y-x) {\n        if result % 2 == 0 {\n            return\
    \ result\n        }\n        result /= 2\n    }\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpfyeisg9k/tmpfyeisg9k.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b836f361c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b836f058b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b836f058988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b836f0577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfyeisg9k                        0x00005572dfd2033d <unavailable> + 4925

    5    libc.so.6                          0x00002b836f54d460 __libc_start_main +
    245

    6    tmpfyeisg9k                        0x00005572dfd1ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824587
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x <= y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    if x % 2 == 0 && y % 2 == 0 {\n        return x\
    \ + y\n    }\n    if x % 2 == 0 && y % 2 != 0 {\n        return x + y - 1\n  \
    \  }\n    if x % 2 != 0 && y % 2 == 0 {\n        return x + y + 1\n    }\n   \
    \ if x % 2 != 0 && y % 2 != 0 {\n        return x + y + 1\n    }\n    return -1\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpizk74z48/tmpizk74z48.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af578de7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af578adeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af578ade988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af578add7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpizk74z48                        0x0000556c0969f24d <unavailable> + 4685

    5    libc.so.6                          0x00002af578fd3460 __libc_start_main +
    245

    6    tmpizk74z48                        0x0000556c0969eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824587
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    var x = x - 1\n    var y = y - 1\n\
    \    while x >= y {\n        if x % 2 == 0 && y % 2 == 0 {\n            result\
    \ = x\n            break\n        }\n        x /= 2\n        y /= 2\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp79vulrxk/tmp79vulrxk.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e4acbcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e4a9b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e4a9b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e4a9b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp79vulrxk                        0x000055e714cf524d <unavailable> + 4685

    5    libc.so.6                          0x00002b5e4aea8460 __libc_start_main +
    245

    6    tmp79vulrxk                        0x000055e714cf4ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824586
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x <= y {\n        return -1\n    }\n    var even: Int\
    \ = 0\n    var odd: Int = 0\n    var x: Int\n    var y: Int\n    for (x = y; x\
    \ > 0; x /= 2) {\n        even = even * x + 1\n    }\n    for (x = y; x > 0; x\
    \ /= 2) {\n        odd = odd * x + 1\n    }\n    if even > odd {\n        return\
    \ even\n    }\n    return odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpeq0ling3.swift:16:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for (x = y; x > 0; x /= 2) {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpeq0ling3.swift:19:5: error: C-style for statement has been removed in\
    \ Swift 3\n    for (x = y; x > 0; x /= 2) {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824587
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x < y {\n        return choose_num(y, x)\n    }\n \
    \   if x == y {\n        return x\n    }\n    if x % 2 == 0 {\n        return\
    \ choose_num(x / 2, y)\n    }\n    if y % 2 == 0 {\n        return choose_num(x,\
    \ y / 2)\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp6d_640qo.swift:10:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(y, x)\n                         ^\n        \
    \                  x: y: \n/tmp/tmp6d_640qo.swift:16:26: error: missing argument\
    \ labels 'x:y:' in call\n        return choose_num(x / 2, y)\n               \
    \          ^\n                          x:     y: \n/tmp/tmp6d_640qo.swift:19:26:\
    \ error: missing argument labels 'x:y:' in call\n        return choose_num(x,\
    \ y / 2)\n                         ^\n                          x: y: \n"
  stdout: ''
  timestamp: 1659824586
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    var x = abs(x)\n    var y = abs(y)\n\
    \    var z = x\n    var w = y\n    while z != w {\n        if z % 2 == 0 {\n \
    \           z = z / 2\n        } else {\n            w = w / 2\n        }\n  \
    \  }\n    if z == w {\n        result = x\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp8avw3urd/tmp8avw3urd.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8c47cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8c44c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8c44c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8c44c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8avw3urd                        0x0000556ac975c33d <unavailable> + 4925

    5    libc.so.6                          0x00002ab8c49ba460 __libc_start_main +
    245

    6    tmp8avw3urd                        0x0000556ac975bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824587
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    var x = abs(x)\n    var y = abs(y)\n\
    \    if x > y {\n        result = x\n    } else {\n        result = y\n    }\n\
    \    if result > 0 {\n        if result % 2 == 0 {\n            return result\n\
    \        } else {\n            return -1\n        }\n    } else {\n        if\
    \ result % 2 == 1 {\n            return result\n        } else {\n           \
    \ return -1\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpesal9yp4/tmpesal9yp4.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b61f072ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b61f0421b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b61f0421988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b61f04207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpesal9yp4                        0x00005638e356233d <unavailable> + 4925

    5    libc.so.6                          0x00002b61f0916460 __libc_start_main +
    245

    6    tmpesal9yp4                        0x00005638e3561fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824587
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    if x % 2 == 0 {\n        return choose_num(x / 2,\
    \ y)\n    }\n    if y % 2 == 0 {\n        return choose_num(x, y / 2)\n    }\n\
    \    return choose_num(x / 2, y / 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp4i9kmxj0.swift:16:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(x / 2, y)\n                         ^\n    \
    \                      x:     y: \n/tmp/tmp4i9kmxj0.swift:19:26: error: missing\
    \ argument labels 'x:y:' in call\n        return choose_num(x, y / 2)\n      \
    \                   ^\n                          x: y: \n/tmp/tmp4i9kmxj0.swift:21:22:\
    \ error: missing argument labels 'x:y:' in call\n    return choose_num(x / 2,\
    \ y / 2)\n                     ^\n                      x:     y: \n"
  stdout: ''
  timestamp: 1659824586
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    if x % 2 == 0 && y % 2 == 0 {\n        return x\
    \ + y\n    }\n    if x % 2 == 0 && y % 2 != 0 {\n        return y\n    }\n   \
    \ if x % 2 != 0 && y % 2 == 0 {\n        return x\n    }\n    if x % 2 != 0 &&\
    \ y % 2 != 0 {\n        return y\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13,\
    \ y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpk0j1yikp/tmpk0j1yikp.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b939c8acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b939c5a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b939c5a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b939c5a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk0j1yikp                        0x0000563de390324d <unavailable> + 4685

    5    libc.so.6                          0x00002b939ca98460 __libc_start_main +
    245

    6    tmpk0j1yikp                        0x0000563de3902ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824587
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x < y {\n        swap(x, y)\n    }\n    var even: Int\
    \ = 0\n    var odd: Int = 0\n    var x: Int\n    var y: Int\n    for (x = y; x\
    \ > 0; x--, y += 2) {\n        if x % 2 == 0 {\n            even = even * x +\
    \ y\n        } else {\n            odd = odd * x + y\n        }\n    }\n    if\
    \ even > odd {\n        return even\n    } else {\n        return odd\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmps5_ncm3y.swift:16:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for (x = y; x > 0; x--, y += 2) {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmps5_ncm3y.swift:10:9: error: cannot pass immutable value as inout argument:\
    \ 'x' is a 'let' constant\n        swap(x, y)\n        ^    ~\n"
  stdout: ''
  timestamp: 1659824587
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    var xx = x\n    var yy = y\n    while\
    \ xx < yy {\n        if (xx % 2 == 0 && yy % 2 == 0) {\n            result = xx\n\
    \            break\n        }\n        xx /= 2\n        yy /= 2\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp15r12wus/tmp15r12wus.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3b485a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3b48298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3b48298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3b482977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp15r12wus                        0x0000559cddbab24d <unavailable> + 4685

    5    libc.so.6                          0x00002b3b4878d460 __libc_start_main +
    245

    6    tmp15r12wus                        0x0000559cddbaaef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824587
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x < y {\n        return choose_num(y, x)\n    }\n \
    \   if x == y {\n        return x\n    }\n    if x % 2 == 0 && y % 2 == 0 {\n\
    \        return x + y\n    }\n    if x % 2 == 0 && y % 2 != 0 {\n        return\
    \ y\n    }\n    if x % 2 != 0 && y % 2 == 0 {\n        return x\n    }\n    if\
    \ x % 2 != 0 && y % 2 != 0 {\n        return y\n    }\n    return -1\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpmjycm0gu.swift:10:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(y, x)\n                         ^\n        \
    \                  x: y: \n"
  stdout: ''
  timestamp: 1659824587
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x <= y {\n        return -1\n    }\n    if x > y {\n\
    \        return -1\n    }\n    if x == y {\n        return x\n    }\n    if x\
    \ % 2 == 0 {\n        return choose_num(x / 2, y)\n    }\n    if y % 2 == 0 {\n\
    \        return choose_num(x, y / 2)\n    }\n    return choose_num(x / 2, y /\
    \ 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\n\
    assert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) ==\
    \ 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x: 6,\
    \ y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpio6erlgi.swift:19:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(x / 2, y)\n                         ^\n    \
    \                      x:     y: \n/tmp/tmpio6erlgi.swift:22:26: error: missing\
    \ argument labels 'x:y:' in call\n        return choose_num(x, y / 2)\n      \
    \                   ^\n                          x: y: \n/tmp/tmpio6erlgi.swift:24:22:\
    \ error: missing argument labels 'x:y:' in call\n    return choose_num(x / 2,\
    \ y / 2)\n                     ^\n                      x:     y: \n"
  stdout: ''
  timestamp: 1659824587
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    var x = abs(x)\n    var y = abs(y)\n\
    \    var x_even = x % 2 == 0\n    var y_even = y % 2 == 0\n    if x_even && y_even\
    \ {\n        if x < y {\n            result = x\n        } else {\n          \
    \  result = y\n        }\n    } else if x_even {\n        result = x\n    } else\
    \ if y_even {\n        result = y\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpiqbhkqg0/tmpiqbhkqg0.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf27903c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf275fab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf275fa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf275f97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiqbhkqg0                        0x000056021714333d <unavailable> + 4925

    5    libc.so.6                          0x00002adf27aef460 __libc_start_main +
    245

    6    tmpiqbhkqg0                        0x0000560217142fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824587
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x > y {\n        let tmp = x\n        x = y\n     \
    \   y = tmp\n    }\n    \n    if x == y {\n        return x\n    }\n    \n   \
    \ var even: Int = 0\n    var odd: Int = 0\n    \n    for i in 0..<x {\n      \
    \  if i % 2 == 0 {\n            even += i\n        } else {\n            odd +=\
    \ i\n        }\n    }\n    \n    if even > y {\n        return even\n    }\n \
    \   \n    return odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpv5ov7t62.swift:11:9: error: cannot assign to value: 'x' is a 'let'\
    \ constant\n        x = y\n        ^\n/tmp/tmpv5ov7t62.swift:12:9: error: cannot\
    \ assign to value: 'y' is a 'let' constant\n        y = tmp\n        ^\n"
  stdout: ''
  timestamp: 1659824587
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    var x = abs(x)\n    var y = abs(y)\n\
    \    while x <= y {\n        if x % 2 == 0 && y % 2 == 0 {\n            if x >\
    \ y {\n                result = x\n            } else {\n                result\
    \ = y\n            }\n            break\n        }\n        x += 1\n        y\
    \ -= 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp9u15tpnp/tmp9u15tpnp.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6494c1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6494912b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6494912988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b64949117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9u15tpnp                        0x0000563d3ca4c33d <unavailable> + 4925

    5    libc.so.6                          0x00002b6494e07460 __libc_start_main +
    245

    6    tmp9u15tpnp                        0x0000563d3ca4bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824587
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    if x % 2 == 0 {\n        return choose_num(x / 2,\
    \ y)\n    }\n    if y % 2 == 0 {\n        return choose_num(x, y / 2)\n    }\n\
    \    return choose_num(x / 2, y / 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp4i9kmxj0.swift:16:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(x / 2, y)\n                         ^\n    \
    \                      x:     y: \n/tmp/tmp4i9kmxj0.swift:19:26: error: missing\
    \ argument labels 'x:y:' in call\n        return choose_num(x, y / 2)\n      \
    \                   ^\n                          x: y: \n/tmp/tmp4i9kmxj0.swift:21:22:\
    \ error: missing argument labels 'x:y:' in call\n    return choose_num(x / 2,\
    \ y / 2)\n                     ^\n                      x:     y: \n"
  stdout: ''
  timestamp: 1659824586
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    var xEven: Bool = false\n    var\
    \ yEven: Bool = false\n    var xEvenMax: Int = -1\n    var yEvenMax: Int = -1\n\
    \    var xEvenMin: Int = -1\n    var yEvenMin: Int = -1\n    var xEvenMaxCount:\
    \ Int = 0\n    var yEvenMaxCount: Int = 0\n    var xEvenMinCount: Int = 0\n  \
    \  var yEvenMinCount: Int = 0\n    var xEvenMaxSum: Int = 0\n    var yEvenMaxSum:\
    \ Int = 0\n    var xEvenMinSum: Int = 0\n    var yEvenMinSum: Int = 0\n    var\
    \ xEvenMaxDiff: Int = 0\n    var yEvenMaxDiff: Int = 0\n    var xEvenMinDiff:\
    \ Int = 0\n    var yEvenMinDiff: Int = 0\n    var xEvenMaxSum2: Int = 0\n    var\
    \ yEvenMaxSum2: Int = 0\n    var xEvenMinSum2: Int = 0\n    var yEvenMinSum2:\
    \ Int = 0\n    var xEvenMaxDiff2: Int = 0\n    var yEvenMaxDiff2: Int = 0\n  \
    \  var xEvenMinDiff2: Int = 0\n    var yEvenMinDiff2: Int = 0\n    var xEvenMaxSum3:\
    \ Int = 0\n    var yEvenMaxSum3: Int = 0\n    var xEvenMinSum3: Int = 0\n    var\
    \ yEvenMinSum3: Int = 0\n    var xEvenMaxDiff3: Int = 0\n    var yEvenMaxDiff3:\
    \ Int = 0\n    var xEvenMinDiff3: Int = 0\n    var yEvenMinDiff3: Int = 0\n  \
    \  var xEvenMaxSum4: Int = 0\n    var yEvenMaxSum4: Int = 0\n    var xEvenMinSum4:\
    \ Int = 0\n    var yEvenMinSum4: Int = 0\n    var xEvenMaxDiff4: Int = 0\n   \
    \ var yEvenMaxDiff4: Int = 0\n    var xEvenMinDiff4: Int = 0\n    var yEvenMinDiff4:\
    \ Int = 0\n    var xEvenMaxSum5: Int = 0\n    var yEvenMaxSum5: Int = 0\n    var\
    \ xEvenMinSum5: Int = 0\n    var yEvenMinSum5: Int = 0\n    var xEvenMaxDiff5:\
    \ Int = 0\n    var yEvenMaxDiff5: Int = 0\n    var xEvenMinDiff5: Int = 0\n  \
    \  var yEvenMinDiff5: Int = 0\n    var xEvenMaxSum6: Int = 0\n    var yEvenMaxSum6:\
    \ Int = 0\n    var xEvenMinSum6: Int = 0\n    var yEvenMinSum6: Int = 0\n    var\
    \ xEvenMaxDiff6: Int = 0\n    var yEvenMaxDiff6: Int = 0\n    var x\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp7cwvnnk3.swift:66:9: error: type annotation missing in pattern\n\
    \    var x\n        ^\n"
  stdout: ''
  timestamp: 1659824587
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x > y {\n        (x, y) = (y, x)\n    }\n    \n   \
    \ var even: Int = 0\n    var odd: Int = 0\n    \n    for i in 0..<x {\n      \
    \  if i % 2 == 0 {\n            even += i\n        } else {\n            odd +=\
    \ i\n        }\n    }\n    \n    if even > y {\n        return -1\n    }\n   \
    \ \n    if odd > y {\n        return -1\n    }\n    \n    return even\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpaioyqo4s.swift:10:10: error: cannot assign to value: 'x' is a 'let'\
    \ constant\n        (x, y) = (y, x)\n         ^\n/tmp/tmpaioyqo4s.swift:10:13:\
    \ error: cannot assign to value: 'y' is a 'let' constant\n        (x, y) = (y,\
    \ x)\n            ^\n"
  stdout: ''
  timestamp: 1659824587
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x > y {\n        (x, y) = (y, x)\n    }\n    var even:\
    \ Int = 0\n    var odd: Int = 0\n    for n in 1...y {\n        if x % n == 0 {\n\
    \            even = n\n            break\n        }\n    }\n    for n in 1...x\
    \ {\n        if y % n == 0 {\n            odd = n\n            break\n       \
    \ }\n    }\n    if even > 0 {\n        return even\n    }\n    if odd > 0 {\n\
    \        return odd\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12)\
    \ == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234,\
    \ y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp4_okzszm.swift:10:10: error: cannot assign to value: 'x' is a 'let'\
    \ constant\n        (x, y) = (y, x)\n         ^\n/tmp/tmp4_okzszm.swift:10:13:\
    \ error: cannot assign to value: 'y' is a 'let' constant\n        (x, y) = (y,\
    \ x)\n            ^\n"
  stdout: ''
  timestamp: 1659824587
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x <= y {\n        return -1\n    }\n    \n    var even:\
    \ Int = 0\n    var odd: Int = 0\n    \n    for _ in 0..<(x-y) {\n        even\
    \ = even + 2\n        odd = odd + 1\n    }\n    \n    if even > y {\n        return\
    \ even\n    }\n    \n    return odd\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: Exception
  stderr: 'tmpyc3aip3b/tmpyc3aip3b.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b317c756c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b317c44db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b317c44d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b317c44c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyc3aip3b                        0x0000561a6e6cc33d <unavailable> + 4925

    5    libc.so.6                          0x00002b317c942460 __libc_start_main +
    245

    6    tmpyc3aip3b                        0x0000561a6e6cbfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824586
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    var x = x - 1\n    var y = y - 1\n\
    \    var even = 1\n    var odd = 0\n    while x >= 0 && y >= 0 {\n        if x\
    \ % 2 == 0 && y % 2 == 0 {\n            if even > result {\n                result\
    \ = even\n            }\n            even = even + 2\n        } else {\n     \
    \       if odd > result {\n                result = odd\n            }\n     \
    \       odd = odd + 1\n        }\n        x = x - 1\n        y = y - 1\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpgu_oacsm/tmpgu_oacsm.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b236d2a7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b236cf9eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b236cf9e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b236cf9d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgu_oacsm                        0x000055ad682ff24d <unavailable> + 4685

    5    libc.so.6                          0x00002b236d493460 __libc_start_main +
    245

    6    tmpgu_oacsm                        0x000055ad682feef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824587
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    if x % 2 == 0 && y % 2 == 0 {\n        return x\
    \ + (y - x) / 2\n    }\n    if x % 2 == 0 {\n        return x / 2\n    }\n   \
    \ if y % 2 == 0 {\n        return y / 2\n    }\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpxg1b95wq/tmpxg1b95wq.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e6968ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e69381b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e69381988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e693807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxg1b95wq                        0x0000559fa5dd824d <unavailable> + 4685

    5    libc.so.6                          0x00002b1e69876460 __libc_start_main +
    245

    6    tmpxg1b95wq                        0x0000559fa5dd7ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824586
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x <= 0 || y <= 0 {\n        return -1\n    }\n    if\
    \ x > y {\n        x, y = y, x\n    }\n    var even: Int = 0\n    var odd: Int\
    \ = 0\n    for n in 0..<y {\n        if x % 2 == 0 {\n            even = even\
    \ + n\n        } else {\n            odd = odd + n\n        }\n        x = x /\
    \ 2\n    }\n    if even > odd {\n        return even\n    } else {\n        return\
    \ odd\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpackbnupw.swift:13:10: error: consecutive statements on a line must\
    \ be separated by ';'\n        x, y = y, x\n         ^\n         ;\n/tmp/tmpackbnupw.swift:13:10:\
    \ error: expected expression\n        x, y = y, x\n         ^\n/tmp/tmpackbnupw.swift:13:9:\
    \ warning: expression of type 'Int' is unused\n        x, y = y, x\n        ^\n\
    /tmp/tmpackbnupw.swift:23:9: error: cannot assign to value: 'x' is a 'let' constant\n\
    \        x = x / 2\n        ^\n"
  stdout: ''
  timestamp: 1659824587
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    if x % 2 == 0 {\n        return choose_num(x / 2,\
    \ y)\n    }\n    return choose_num(x, y / 2)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12)\
    \ == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234,\
    \ y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp6lyzbzq3.swift:16:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(x / 2, y)\n                         ^\n    \
    \                      x:     y: \n/tmp/tmp6lyzbzq3.swift:18:22: error: missing\
    \ argument labels 'x:y:' in call\n    return choose_num(x, y / 2)\n          \
    \           ^\n                      x: y: \n"
  stdout: ''
  timestamp: 1659824586
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x < y {\n        (x, y) = (y, x)\n    }\n    \n   \
    \ var even: Int = 0\n    var odd: Int = 0\n    \n    for i in 0..<(x-y) {\n  \
    \      if (x+y-1) % 2 == 0 {\n            even += x\n        } else {\n      \
    \      odd += x\n        }\n    }\n    \n    if even > y {\n        return even\n\
    \    } else {\n        return odd\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpye0nfaur.swift:10:10: error: cannot assign to value: 'x' is a 'let'\
    \ constant\n        (x, y) = (y, x)\n         ^\n/tmp/tmpye0nfaur.swift:10:13:\
    \ error: cannot assign to value: 'y' is a 'let' constant\n        (x, y) = (y,\
    \ x)\n            ^\n"
  stdout: ''
  timestamp: 1659824587
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x < y {\n        return choose_num(y, x)\n    }\n \
    \   if x == y {\n        return x\n    }\n    if x % 2 == 0 {\n        return\
    \ choose_num(x / 2, y)\n    }\n    if y % 2 == 0 {\n        return choose_num(x,\
    \ y / 2)\n    }\n    if x > y {\n        return -1\n    }\n    return choose_num(x\
    \ / 2, y / 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpif45igqe.swift:10:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(y, x)\n                         ^\n        \
    \                  x: y: \n/tmp/tmpif45igqe.swift:16:26: error: missing argument\
    \ labels 'x:y:' in call\n        return choose_num(x / 2, y)\n               \
    \          ^\n                          x:     y: \n/tmp/tmpif45igqe.swift:19:26:\
    \ error: missing argument labels 'x:y:' in call\n        return choose_num(x,\
    \ y / 2)\n                         ^\n                          x: y: \n/tmp/tmpif45igqe.swift:24:22:\
    \ error: missing argument labels 'x:y:' in call\n    return choose_num(x / 2,\
    \ y / 2)\n                     ^\n                      x:     y: \n"
  stdout: ''
  timestamp: 1659824587
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var even: Int = 0\n    var odd: Int = 0\n    var max:\
    \ Int = 0\n    var min: Int = 0\n    \n    if x > y {\n        max = x\n     \
    \   min = y\n    } else {\n        max = y\n        min = x\n    }\n    \n   \
    \ for var i = min; i <= max; i++ {\n        if i % 2 == 0 {\n            even\
    \ = i\n        } else {\n            odd = i\n        }\n        \n        if\
    \ even > max {\n            max = even\n        }\n        \n        if odd <\
    \ min {\n            min = odd\n        }\n    }\n    \n    if even == max {\n\
    \        return even\n    }\n    \n    return -1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13,\
    \ y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpup325k6l.swift:22:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = min; i <= max; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824587
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    var even: Int = 0\n    var odd: Int = 0\n    var\
    \ x: Int = 0\n    var y: Int = 0\n    while x < y {\n        even = even + x\n\
    \        odd = odd + y\n        x = x + 1\n        y = y + 1\n    }\n    if even\
    \ > odd {\n        return even\n    } else {\n        return odd\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpqwbt23e0/tmpqwbt23e0.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b074f386c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b074f07db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b074f07d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b074f07c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqwbt23e0                        0x0000560c07a061bd <unavailable> + 4541

    5    libc.so.6                          0x00002b074f572460 __libc_start_main +
    245

    6    tmpqwbt23e0                        0x0000560c07a05e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824587
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x <= y {\n        return -1\n    }\n    \n    var even:\
    \ Int = 0\n    var odd: Int = 0\n    \n    for i in 0..<x {\n        if i % 2\
    \ == 0 {\n            even += i\n        } else {\n            odd += i\n    \
    \    }\n    }\n    \n    if even > y {\n        return even\n    } else {\n  \
    \      return odd\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpf5_05wlu/tmpf5_05wlu.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b2c0edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b2bde4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1b2bde4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1b2bde37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf5_05wlu                        0x0000560b2e4a933d <unavailable> + 4925

    5    libc.so.6                          0x00002b1b2c2d9460 __libc_start_main +
    245

    6    tmpf5_05wlu                        0x0000560b2e4a8fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824587
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    var x = x - 1\n    var y = y - 1\n\
    \    while x >= y {\n        if x % 2 == 0 {\n            result = x\n       \
    \     break\n        }\n        x = x - 1\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpcpuwy6og/tmpcpuwy6og.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b97599afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b97596a6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b97596a6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b97596a57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcpuwy6og                        0x000056428effc24d <unavailable> + 4685

    5    libc.so.6                          0x00002b9759b9b460 __libc_start_main +
    245

    6    tmpcpuwy6og                        0x000056428effbef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824587
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    if x > y {\n        result = x\n\
    \    } else {\n        result = y\n    }\n    \n    while result > 0 && result\
    \ % 2 == 0 {\n        result /= 2\n    }\n    \n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpryrvk7fn/tmpryrvk7fn.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2eadcfac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ead9f1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ead9f1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ead9f07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpryrvk7fn                        0x0000562f6661424d <unavailable> + 4685

    5    libc.so.6                          0x00002b2eadee6460 __libc_start_main +
    245

    6    tmpryrvk7fn                        0x0000562f66613ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824587
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    var x = x - 1\n    var y = y - 1\n\
    \    var even = 1\n    var odd = 0\n    while even > 0 || odd > 0 {\n        if\
    \ even > 0 {\n            result += x\n            even /= 2\n        }\n    \
    \    if odd > 0 {\n            result += y\n            odd /= 2\n        }\n\
    \        x -= 1\n        y -= 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpqjh9zdmi/tmpqjh9zdmi.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b16c4504c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b16c41fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b16c41fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b16c41fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqjh9zdmi                        0x0000555f5891924d <unavailable> + 4685

    5    libc.so.6                          0x00002b16c46f0460 __libc_start_main +
    245

    6    tmpqjh9zdmi                        0x0000555f58918ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824587
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    var x = abs(x)\n    var y = abs(y)\n\
    \    var x_even = x % 2 == 0\n    var y_even = y % 2 == 0\n    if x_even && y_even\
    \ {\n        if x == y {\n            result = x\n        } else {\n         \
    \   if x < y {\n                result = x\n            } else {\n           \
    \     result = y\n            }\n        }\n    } else if x_even {\n        result\
    \ = x\n    } else if y_even {\n        result = y\n    } else {\n        if x\
    \ < y {\n            result = x\n        } else {\n            result = y\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: Exception
  stderr: 'tmpzv3x4422/tmpzv3x4422.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1532b38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b153282fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b153282f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b153282e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzv3x4422                        0x00005602fdffb33d <unavailable> + 4925

    5    libc.so.6                          0x00002b1532d24460 __libc_start_main +
    245

    6    tmpzv3x4422                        0x00005602fdffafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824587
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var even = Int()\n    var odd = Int()\n    \n    if x\
    \ > y {\n        even = choose_num(y, x)\n    } else {\n        odd = choose_num(x,\
    \ y)\n    }\n    \n    if even % 2 == 0 {\n        return even\n    } else {\n\
    \        return odd\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpr59ys7am.swift:13:26: error: missing argument labels 'x:y:' in\
    \ call\n        even = choose_num(y, x)\n                         ^\n        \
    \                  x: y: \n/tmp/tmpr59ys7am.swift:15:25: error: missing argument\
    \ labels 'x:y:' in call\n        odd = choose_num(x, y)\n                    \
    \    ^\n                         x: y: \n"
  stdout: ''
  timestamp: 1659824587
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    if x > y {\n        result = x\n\
    \    } else {\n        result = y\n    }\n    \n    if result % 2 == 0 {\n   \
    \     return result\n    }\n    \n    var even = 1\n    var odd = 1\n    \n  \
    \  while even < result {\n        even += 2\n    }\n    \n    while odd < result\
    \ {\n        odd += 2\n    }\n    \n    if even > result {\n        return even\n\
    \    } else {\n        return odd\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: Exception
  stderr: 'tmp1w5xnkip/tmp1w5xnkip.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e3e2d4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e3dfcbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e3dfcb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e3dfca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1w5xnkip                        0x0000558db62c424d <unavailable> + 4685

    5    libc.so.6                          0x00002b8e3e4c0460 __libc_start_main +
    245

    6    tmp1w5xnkip                        0x0000558db62c3ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824587
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    var even = Int()\n    var odd = Int()\n    for _\
    \ in 0..<(x-y) {\n        if x % 2 == 0 {\n            even = even + 2\n     \
    \   } else {\n            odd = odd + 1\n        }\n        x = x - 1\n    }\n\
    \    if even > odd {\n        return even\n    } else {\n        return odd\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y: 15)\
    \ == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33, y:\
    \ 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpd24l4t_9.swift:23:9: error: cannot assign to value: 'x' is a 'let'\
    \ constant\n        x = x - 1\n        ^\n"
  stdout: ''
  timestamp: 1659824587
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var even: Int = 0\n    var odd: Int = 0\n    \n    if\
    \ x > y {\n        even = choose_num(y, x)\n    } else {\n        even = choose_num(x,\
    \ y)\n    }\n    \n    if even % 2 == 0 {\n        return even\n    }\n    \n\
    \    if even > 0 {\n        odd = even - 1\n    } else {\n        odd = even +\
    \ 1\n    }\n    \n    if odd % 2 == 0 {\n        return odd\n    }\n    \n   \
    \ if odd > 0 {\n        return choose_num(odd, x)\n    } else {\n        return\
    \ choose_num(x, odd)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpdqpdlk4d.swift:13:26: error: missing argument labels 'x:y:' in\
    \ call\n        even = choose_num(y, x)\n                         ^\n        \
    \                  x: y: \n/tmp/tmpdqpdlk4d.swift:15:26: error: missing argument\
    \ labels 'x:y:' in call\n        even = choose_num(x, y)\n                   \
    \      ^\n                          x: y: \n/tmp/tmpdqpdlk4d.swift:33:26: error:\
    \ missing argument labels 'x:y:' in call\n        return choose_num(odd, x)\n\
    \                         ^\n                          x:   y: \n/tmp/tmpdqpdlk4d.swift:35:26:\
    \ error: missing argument labels 'x:y:' in call\n        return choose_num(x,\
    \ odd)\n                         ^\n                          x: y: \n"
  stdout: ''
  timestamp: 1659824587
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x <= y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    if x % 2 == 0 && y % 2 == 0 {\n        return (x\
    \ * y) / 2\n    }\n    if x % 2 == 0 {\n        return x / 2\n    }\n    if y\
    \ % 2 == 0 {\n        return y / 2\n    }\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpkmwldivo/tmpkmwldivo.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afd6f072c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afd6ed69b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afd6ed69988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afd6ed687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkmwldivo                        0x00005575f2dbd24d <unavailable> + 4685

    5    libc.so.6                          0x00002afd6f25e460 __libc_start_main +
    245

    6    tmpkmwldivo                        0x00005575f2dbcef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824587
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    if x > y {\n        var temp = x\n\
    \        x = y\n        y = temp\n    }\n    for number in stride(from: x, to:\
    \ y, by: 2) {\n        if number % 2 == 0 {\n            result = number\n   \
    \         break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13,\
    \ y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpk8x8ouqq.swift:12:9: error: cannot assign to value: 'x' is a 'let'\
    \ constant\n        x = y\n        ^\n/tmp/tmpk8x8ouqq.swift:13:9: error: cannot\
    \ assign to value: 'y' is a 'let' constant\n        y = temp\n        ^\n"
  stdout: ''
  timestamp: 1659824587
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    var even: Int = 0\n    var odd: Int = 0\n    for\
    \ n in 1...y {\n        if x % n == 0 {\n            even = even * n + n\n   \
    \     }\n        if x % n != 0 {\n            odd = odd * n + n\n        }\n \
    \   }\n    if even > odd {\n        return even\n    } else {\n        return\
    \ odd\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmprlm1o1_p/tmprlm1o1_p.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6803e4fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6803b46b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6803b46988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6803b457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprlm1o1_p                        0x000055bb2749233d <unavailable> + 4925

    5    libc.so.6                          0x00002b680403b460 __libc_start_main +
    245

    6    tmprlm1o1_p                        0x000055bb27491fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824587
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x < y {\n        return choose_num(y, x)\n    }\n \
    \   if x == y {\n        return x\n    }\n    if x % 2 == 0 && y % 2 == 0 {\n\
    \        return x + (y - x)\n    }\n    if x % 2 == 0 {\n        return choose_num(x\
    \ / 2, y)\n    }\n    if y % 2 == 0 {\n        return choose_num(x, y / 2)\n \
    \   }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpchm8dtop.swift:10:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(y, x)\n                         ^\n        \
    \                  x: y: \n/tmp/tmpchm8dtop.swift:19:26: error: missing argument\
    \ labels 'x:y:' in call\n        return choose_num(x / 2, y)\n               \
    \          ^\n                          x:     y: \n/tmp/tmpchm8dtop.swift:22:26:\
    \ error: missing argument labels 'x:y:' in call\n        return choose_num(x,\
    \ y / 2)\n                         ^\n                          x: y: \n"
  stdout: ''
  timestamp: 1659824587
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x <= y {\n        return -1\n    }\n    var even: Int\
    \ = 0\n    var odd: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var evenMax:\
    \ Int = 0\n    var oddMax: Int = 0\n    var evenMin: Int = 0\n    var oddMin:\
    \ Int = 0\n    var evenMaxCount: Int = 0\n    var oddMaxCount: Int = 0\n    var\
    \ evenMinCount: Int = 0\n    var oddMinCount: Int = 0\n    var evenMaxCount2:\
    \ Int = 0\n    var oddMaxCount2: Int = 0\n    var evenMinCount2: Int = 0\n   \
    \ var oddMinCount2: Int = 0\n    var evenMaxCount3: Int = 0\n    var oddMaxCount3:\
    \ Int = 0\n    var evenMinCount3: Int = 0\n    var oddMinCount3: Int = 0\n   \
    \ var evenMaxCount4: Int = 0\n    var oddMaxCount4: Int = 0\n    var evenMinCount4:\
    \ Int = 0\n    var oddMinCount4: Int = 0\n    var evenMaxCount5: Int = 0\n   \
    \ var oddMaxCount5: Int = 0\n    var evenMinCount5: Int = 0\n    var oddMinCount5:\
    \ Int = 0\n    var evenMaxCount6: Int = 0\n    var oddMaxCount6: Int = 0\n   \
    \ var evenMinCount6: Int = 0\n    var oddMinCount6: Int = 0\n    var evenMaxCount7:\
    \ Int = 0\n    var oddMaxCount7: Int = 0\n    var evenMinCount7: Int = 0\n   \
    \ var oddMinCount7: Int = 0\n    var evenMaxCount8: Int = 0\n    var oddMaxCount8:\
    \ Int = 0\n    var evenMinCount8: Int = 0\n    var oddMinCount8: Int = 0\n   \
    \ var evenMaxCount9: Int = 0\n    var oddMaxCount9: Int = 0\n    var evenMinCount9:\
    \ Int = 0\n    var oddMinCount9: Int = 0\n    var evenMaxCount10: Int = 0\n  \
    \  var oddMaxCount10: Int = 0\n    var evenMinCount10: Int = 0\n    var oddMinCount10:\
    \ Int = 0\n    var evenMaxCount11: Int = 0\n    var oddMaxCount11: Int = 0\n \
    \   var evenMinCount11: Int = 0\n    var oddMinCount11: Int = 0\n    var evenMaxCount12:\
    \ Int = 0\n    var oddMaxCount12: Int = 0\n    var evenMinCount12: Int = 0\n \
    \   var oddMinCount12: Int = 0\n    var evenMaxCount13: Int = 0\n    var oddMaxCount13:\
    \ Int = 0\n    var evenMinCount13: Int = 0\n    var oddMinCount13: Int = 0\n \
    \   var evenMaxCount\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmprejvp8mc.swift:72:9: error: type annotation missing in pattern\n\
    \    var evenMaxCount\n        ^\n"
  stdout: ''
  timestamp: 1659824587
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var even: Int = 0\n    var odd: Int = 0\n    var x: Int\n\
    \    var y: Int\n    for (x = y; x > 0; x--, y++) {\n        if (x%2 == 0) {\n\
    \            even = even * x + y\n        } else {\n            odd = odd + x\n\
    \        }\n    }\n    if even > odd {\n        return even\n    } else {\n  \
    \      return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp75jmcdle.swift:13:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for (x = y; x > 0; x--, y++) {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824587
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x < y {\n        (x, y) = (y, x)\n    }\n    var even:\
    \ Int = 0\n    var odd: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var\
    \ evenMax: Int = 0\n    var oddMax: Int = 0\n    var evenMin: Int = 0\n    var\
    \ oddMin: Int = 0\n    var evenMaxCount: Int = 0\n    var oddMaxCount: Int = 0\n\
    \    var evenMinCount: Int = 0\n    var oddMinCount: Int = 0\n    var evenMaxCount2:\
    \ Int = 0\n    var oddMaxCount2: Int = 0\n    var evenMinCount2: Int = 0\n   \
    \ var oddMinCount2: Int = 0\n    var evenMaxCount3: Int = 0\n    var oddMaxCount3:\
    \ Int = 0\n    var evenMinCount3: Int = 0\n    var oddMinCount3: Int = 0\n   \
    \ var evenMaxCount4: Int = 0\n    var oddMaxCount4: Int = 0\n    var evenMinCount4:\
    \ Int = 0\n    var oddMinCount4: Int = 0\n    var evenMaxCount5: Int = 0\n   \
    \ var oddMaxCount5: Int = 0\n    var evenMinCount5: Int = 0\n    var oddMinCount5:\
    \ Int = 0\n    var evenMaxCount6: Int = 0\n    var oddMaxCount6: Int = 0\n   \
    \ var evenMinCount6: Int = 0\n    var oddMinCount6: Int = 0\n    var evenMaxCount7:\
    \ Int = 0\n    var oddMaxCount7: Int = 0\n    var evenMinCount7: Int = 0\n   \
    \ var oddMinCount7: Int = 0\n    var evenMaxCount8: Int = 0\n    var oddMaxCount8:\
    \ Int = 0\n    var evenMinCount8: Int = 0\n    var oddMinCount8: Int = 0\n   \
    \ var evenMaxCount9: Int = 0\n    var oddMaxCount9: Int = 0\n    var evenMinCount9:\
    \ Int = 0\n    var oddMinCount9: Int = 0\n    var evenMaxCount10: Int = 0\n  \
    \  var oddMaxCount10: Int = 0\n    var evenMinCount10: Int = 0\n    var oddMinCount10:\
    \ Int = 0\n    var evenMaxCount11: Int = 0\n    var oddMaxCount11: Int = 0\n \
    \   var evenMinCount11: Int = 0\n    var oddMinCount11: Int = 0\n    var evenMaxCount12:\
    \ Int = 0\n    var oddMaxCount12: Int = 0\n    var evenMinCount12: Int = 0\n \
    \   var oddMinCount12: Int = 0\n    var evenMaxCount13: Int = 0\n    var oddMaxCount13:\
    \ Int = 0\n    var evenMinCount13: Int = 0\n    var oddMinCount13: Int = 0\n \
    \   var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp1cizhe3f.swift:72:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp1cizhe3f.swift:10:10: error: cannot assign to value: 'x' is a 'let'\
    \ constant\n        (x, y) = (y, x)\n         ^\n/tmp/tmp1cizhe3f.swift:10:13:\
    \ error: cannot assign to value: 'y' is a 'let' constant\n        (x, y) = (y,\
    \ x)\n            ^\n"
  stdout: ''
  timestamp: 1659824587
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    if x % 2 == 0 {\n        return choose_num(x / 2,\
    \ y)\n    }\n    if y % 2 == 0 {\n        return choose_num(x, y / 2)\n    }\n\
    \    if x > y {\n        return -1\n    }\n    return choose_num(x / 2, y / 2)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpalhri_l7.swift:16:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(x / 2, y)\n                         ^\n    \
    \                      x:     y: \n/tmp/tmpalhri_l7.swift:19:26: error: missing\
    \ argument labels 'x:y:' in call\n        return choose_num(x, y / 2)\n      \
    \                   ^\n                          x: y: \n/tmp/tmpalhri_l7.swift:24:22:\
    \ error: missing argument labels 'x:y:' in call\n    return choose_num(x / 2,\
    \ y / 2)\n                     ^\n                      x:     y: \n"
  stdout: ''
  timestamp: 1659824587
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x < y {\n        (x, y) = (y, x)\n    }\n    var result\
    \ = -1\n    var low = Int()\n    var high = Int()\n    for _ in 0..<(x-y) {\n\
    \        low = high\n        high = low + Int((y-low)/2)\n        if high > x\
    \ {\n            high = x\n        }\n        if low < high {\n            if\
    \ low % 2 == 0 {\n                low = low + 1\n            } else {\n      \
    \          low = low - 1\n            }\n            if high % 2 == 0 {\n    \
    \            high = high + 1\n            } else {\n                high = high\
    \ - 1\n            }\n            if low < high {\n                result = low\n\
    \                break\n            }\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp8ec53qi2.swift:10:10: error: cannot assign to value: 'x' is a 'let'\
    \ constant\n        (x, y) = (y, x)\n         ^\n/tmp/tmp8ec53qi2.swift:10:13:\
    \ error: cannot assign to value: 'y' is a 'let' constant\n        (x, y) = (y,\
    \ x)\n            ^\n"
  stdout: ''
  timestamp: 1659824587
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x > y {\n        (x, y) = (y, x)\n    }\n    var even:\
    \ Int = 0\n    var odd: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var\
    \ evenMax: Int = 0\n    var oddMax: Int = 0\n    while x < y {\n        if x %\
    \ 2 == 0 {\n            even = even * 2 + x\n            if even > evenMax {\n\
    \                evenMax = even\n            }\n        } else {\n           \
    \ odd = odd * 2 + x\n            if odd > oddMax {\n                oddMax = odd\n\
    \            }\n        }\n        x += 1\n        y += 1\n    }\n    if evenMax\
    \ == 0 {\n        return -1\n    }\n    if oddMax == 0 {\n        return evenMax\n\
    \    }\n    return evenMax * 2 + oddMax\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpr1llb_89.swift:10:10: error: cannot assign to value: 'x' is a 'let'\
    \ constant\n        (x, y) = (y, x)\n         ^\n/tmp/tmpr1llb_89.swift:10:13:\
    \ error: cannot assign to value: 'y' is a 'let' constant\n        (x, y) = (y,\
    \ x)\n            ^\n"
  stdout: ''
  timestamp: 1659824587
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    if x % 2 == 0 && y % 2 == 0 {\n        return x\
    \ + (y / 2)\n    }\n    if x % 2 == 0 {\n        return x + (y / 2)\n    }\n \
    \   if y % 2 == 0 {\n        return x + (y / 2)\n    }\n    return -1\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpnh99ip47/tmpnh99ip47.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad2db3abc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad2db0a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad2db0a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad2db0a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnh99ip47                        0x000055ac9792f24d <unavailable> + 4685

    5    libc.so.6                          0x00002ad2db597460 __libc_start_main +
    245

    6    tmpnh99ip47                        0x000055ac9792eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824587
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x < y {\n        (x, y) = (y, x)\n    }\n    var result\
    \ = -1\n    for n in 1...y {\n        if x % n == 0 {\n            result = n\n\
    \            break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp_c1r3gto.swift:10:10: error: cannot assign to value: 'x' is a 'let'\
    \ constant\n        (x, y) = (y, x)\n         ^\n/tmp/tmp_c1r3gto.swift:10:13:\
    \ error: cannot assign to value: 'y' is a 'let' constant\n        (x, y) = (y,\
    \ x)\n            ^\n"
  stdout: ''
  timestamp: 1659824587
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    var x = x - 1\n    var y = y - 1\n\
    \    var even = 1\n    var odd = 0\n    while even > 0 || odd < 0 {\n        if\
    \ even > 0 {\n            even -= 1\n        }\n        if odd < 0 {\n       \
    \     odd += 1\n        }\n        if even > 0 && odd < 0 {\n            if x\
    \ > y {\n                result += even\n                x -= 1\n            }\
    \ else {\n                result += odd\n                y += 1\n            }\n\
    \            even = 1\n            odd = 0\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpbem40laf/tmpbem40laf.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b92a12d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b92a0fc8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b92a0fc8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92a0fc77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbem40laf                        0x00005572694481bd <unavailable> + 4541

    5    libc.so.6                          0x00002b92a14bd460 __libc_start_main +
    245

    6    tmpbem40laf                        0x0000557269447e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824587
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    if x > y {\n        result = x\n\
    \    } else {\n        result = y\n    }\n    while result > 0 && result % 2 ==\
    \ 0 {\n        result = result / 2\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp9y1wi2t9/tmp9y1wi2t9.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b85ddaa5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b85dd79cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b85dd79c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b85dd79b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9y1wi2t9                        0x000055a21ee4024d <unavailable> + 4685

    5    libc.so.6                          0x00002b85ddc91460 __libc_start_main +
    245

    6    tmp9y1wi2t9                        0x000055a21ee3fef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824587
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    var even: Int = 0\n    var odd: Int = 0\n    var\
    \ x: Int = 0\n    var y: Int = 0\n    for x in stride(from: x, through: y, by:\
    \ 2) {\n        if x % 2 == 0 {\n            even = even + x\n        } else {\n\
    \            odd = odd + x\n        }\n    }\n    if even > odd {\n        return\
    \ even\n    } else {\n        return odd\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12)\
    \ == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234,\
    \ y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp7bxrmdn1/tmp7bxrmdn1.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4c3496ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4c34665b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4c34665988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4c346647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7bxrmdn1                        0x0000557d4165a47d <unavailable> + 5245

    5    libc.so.6                          0x00002b4c34b5a460 __libc_start_main +
    245

    6    tmp7bxrmdn1                        0x0000557d4165a129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824587
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    var x = x - 1\n    var y = y - 1\n\
    \    var even = 1\n    var odd = 0\n    while x >= y {\n        if x % 2 == 0\
    \ {\n            even = even + 1\n        } else {\n            odd = odd + 1\n\
    \        }\n        x = x - 1\n        y = y - 1\n    }\n    if even > odd {\n\
    \        result = even\n    } else {\n        result = odd\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpo0w_0i5y/tmpo0w_0i5y.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4b7916ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4b78e65b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4b78e65988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4b78e647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo0w_0i5y                        0x0000555a391c624d <unavailable> + 4685

    5    libc.so.6                          0x00002b4b7935a460 __libc_start_main +
    245

    6    tmpo0w_0i5y                        0x0000555a391c5ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824587
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    var x = x - 1\n    var y = y - 1\n\
    \    while x >= 0 && y >= 0 {\n        if x % 2 == 0 && y % 2 == 0 {\n       \
    \     if x > y {\n                result = x\n            } else {\n         \
    \       result = y\n            }\n            break\n        }\n        x /=\
    \ 2\n        y /= 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12)\
    \ == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234,\
    \ y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpbtg9i4s7/tmpbtg9i4s7.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4fdaa1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4fda714b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4fda714988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4fda7137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbtg9i4s7                        0x0000555b114ce24d <unavailable> + 4685

    5    libc.so.6                          0x00002b4fdac09460 __libc_start_main +
    245

    6    tmpbtg9i4s7                        0x0000555b114cdef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824587
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    if x % 2 == 0 && y % 2 == 0 {\n        return x\
    \ + (y - x)\n    }\n    if x % 2 == 0 {\n        return choose_num(x - 2, y)\n\
    \    }\n    if y % 2 == 0 {\n        return choose_num(x, y - 2)\n    }\n    return\
    \ -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\n\
    assert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) ==\
    \ 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x: 6,\
    \ y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpjkxizkyu.swift:19:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(x - 2, y)\n                         ^\n    \
    \                      x:     y: \n/tmp/tmpjkxizkyu.swift:22:26: error: missing\
    \ argument labels 'x:y:' in call\n        return choose_num(x, y - 2)\n      \
    \                   ^\n                          x: y: \n"
  stdout: ''
  timestamp: 1659824587
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x < y {\n        return -1\n    }\n    \n    var result\
    \ = x\n    \n    for _ in 0..<y {\n        if result % 2 == 0 {\n            result\
    \ = result / 2\n        } else {\n            return -1\n        }\n    }\n  \
    \  \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp69y00k58/tmp69y00k58.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6827575c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b682726cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b682726c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b682726b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp69y00k58                        0x00005588040e233d <unavailable> + 4925

    5    libc.so.6                          0x00002b6827761460 __libc_start_main +
    245

    6    tmp69y00k58                        0x00005588040e1fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824587
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    if x > y {\n        result = x\n\
    \    } else {\n        result = y\n    }\n    \n    for _ in 0..<(x-y) {\n   \
    \     if result % 2 == 0 {\n            result = result / 2\n        } else {\n\
    \            result = result * 3 + 1\n        }\n    }\n    \n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ae06a2b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae069fb0561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae069fb0286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae069fb013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae069fafbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpq02ka5r0                        0x000055800e179808 <unavailable> + 6152

    6    tmpq02ka5r0                        0x000055800e1792d0 <unavailable> + 4816

    7    libc.so.6                          0x00002ae06a4a5460 __libc_start_main +
    245

    8    tmpq02ka5r0                        0x000055800e178fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824587
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    if x % 2 == 0 && y % 2 == 0 {\n        return x\
    \ + (y - x)\n    }\n    if x % 2 == 0 {\n        return y\n    }\n    return -1\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp5l286n69/tmp5l286n69.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b116a3c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b116a0bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b116a0bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b116a0be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5l286n69                        0x00005650b403224d <unavailable> + 4685

    5    libc.so.6                          0x00002b116a5b4460 __libc_start_main +
    245

    6    tmp5l286n69                        0x00005650b4031ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824587
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    var remainder = x % y\n    if remainder\
    \ == 0 {\n        result = x\n    } else {\n        result = y\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp5hl8de2s/tmp5hl8de2s.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7613b63c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b761385ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b761385a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b76138597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5hl8de2s                        0x000055602683f24d <unavailable> + 4685

    5    libc.so.6                          0x00002b7613d4f460 __libc_start_main +
    245

    6    tmp5hl8de2s                        0x000055602683eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824587
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var even: Int = 0\n    var odd: Int = 0\n    var biggest:\
    \ Int = -1\n    \n    if x > y {\n        biggest = y\n        odd = x\n    }\
    \ else {\n        biggest = x\n        even = y\n    }\n    \n    while even >\
    \ 0 {\n        biggest = biggest / 2\n        even = even / 2\n    }\n    \n \
    \   while odd > 0 {\n        biggest = biggest / 2\n        odd = odd / 2\n  \
    \  }\n    \n    return biggest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpbudli89t/tmpbudli89t.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6259428c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b625911fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b625911f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b625911e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbudli89t                        0x0000563167eed24d <unavailable> + 4685

    5    libc.so.6                          0x00002b6259614460 __libc_start_main +
    245

    6    tmpbudli89t                        0x0000563167eecef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824587
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    var xMin = Int(x)\n    var xMax =\
    \ Int(y)\n    var yMin = Int(y)\n    var yMax = Int(y)\n    \n    while xMin <=\
    \ xMax && yMin <= yMax {\n        if xMin % 2 == 0 && yMin % 2 == 0 {\n      \
    \      result = xMin\n            break\n        }\n        if xMin % 2 != 0 &&\
    \ yMin % 2 != 0 {\n            result = xMin\n            break\n        }\n \
    \       xMin++\n        yMin++\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpjbmgfr7w.swift:24:13: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        xMin++\n            ^~\n/tmp/tmpjbmgfr7w.swift:25:13:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        yMin++\n\
    \            ^~\n"
  stdout: ''
  timestamp: 1659824587
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    if x % 2 == 0 && y % 2 == 0 {\n        return (x\
    \ * y) / 2\n    }\n    if x % 2 == 0 {\n        return x / 2\n    }\n    if y\
    \ % 2 == 0 {\n        return y / 2\n    }\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp7d1re449/tmp7d1re449.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae43115cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae430e53b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae430e53988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae430e527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d1re449                        0x0000562ca491024d <unavailable> + 4685

    5    libc.so.6                          0x00002ae431348460 __libc_start_main +
    245

    6    tmp7d1re449                        0x0000562ca490fef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824586
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x <= y {\n        return -1\n    }\n    if x > y {\n\
    \        return -1\n    }\n    var even: Int = 0\n    var odd: Int = 0\n    var\
    \ x: Int = 0\n    var y: Int = 0\n    var evenMax: Int = 0\n    var oddMax: Int\
    \ = 0\n    var evenMin: Int = 0\n    var oddMin: Int = 0\n    var evenMaxCount:\
    \ Int = 0\n    var oddMaxCount: Int = 0\n    var evenMinCount: Int = 0\n    var\
    \ oddMinCount: Int = 0\n    var evenMaxSum: Int = 0\n    var oddMaxSum: Int =\
    \ 0\n    var evenMinSum: Int = 0\n    var oddMinSum: Int = 0\n    var evenMaxSumCount:\
    \ Int = 0\n    var oddMaxSumCount: Int = 0\n    var evenMinSumCount: Int = 0\n\
    \    var oddMinSumCount: Int = 0\n    var evenMaxSumSum: Int = 0\n    var oddMaxSumSum:\
    \ Int = 0\n    var evenMinSumSum: Int = 0\n    var oddMinSumSum: Int = 0\n   \
    \ var evenMaxSumSumCount: Int = 0\n    var oddMaxSumSumCount: Int = 0\n    var\
    \ evenMinSumSumCount: Int = 0\n    var oddMinSumSumCount: Int = 0\n    var evenMaxSumSumSum:\
    \ Int = 0\n    var oddMaxSumSumSum: Int = 0\n    var evenMinSumSumSum: Int = 0\n\
    \    var oddMinSumSumSum: Int = 0\n    var evenMaxSumSumSumCount: Int = 0\n  \
    \  var oddMaxSumSumSumCount: Int = 0\n    var evenMinSumSumSumCount: Int = 0\n\
    \    var oddMinSumSumSumCount: Int = 0\n    var evenMaxSumSumSumSum: Int = 0\n\
    \    var oddMaxSumSumSumSum: Int = 0\n    var evenMinSumSumSumSum: Int = 0\n \
    \   var oddMinSumSumSumSum: Int = 0\n    var evenMaxSumSumSumCount: Int = 0\n\
    \    var oddMaxSumSumSumCount: Int = 0\n    var evenMinSumSumSumCount: Int = 0\n\
    \    var oddMinSumSumSumCount: Int = 0\n    var evenMaxSumSumSumSum: Int = 0\n\
    \    var oddMaxSumSumSumSum: Int = 0\n    var evenMinSumSumSumSum: Int = 0\n \
    \   var oddMinSumSumSumSum: Int = 0\n    var evenMaxSumSumSumSumCount: Int = 0\n\
    \    var oddMaxSumSumSumSumCount: Int = 0\n    var evenMinSumSumSumCount: Int\
    \ = 0\n    var oddMinSumSumSumCount: Int = 0\n    var evenMaxSum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpjfd6c2u5.swift:55:9: error: invalid redeclaration of 'evenMaxSumSumSumCount'\n\
    \    var evenMaxSumSumSumCount: Int = 0\n        ^\n/tmp/tmpjfd6c2u5.swift:47:9:\
    \ note: 'evenMaxSumSumSumCount' previously declared here\n    var evenMaxSumSumSumCount:\
    \ Int = 0\n        ^\n/tmp/tmpjfd6c2u5.swift:56:9: error: invalid redeclaration\
    \ of 'oddMaxSumSumSumCount'\n    var oddMaxSumSumSumCount: Int = 0\n        ^\n\
    /tmp/tmpjfd6c2u5.swift:48:9: note: 'oddMaxSumSumSumCount' previously declared\
    \ here\n    var oddMaxSumSumSumCount: Int = 0\n        ^\n/tmp/tmpjfd6c2u5.swift:57:9:\
    \ error: invalid redeclaration of 'evenMinSumSumSumCount'\n    var evenMinSumSumSumCount:\
    \ Int = 0\n        ^\n/tmp/tmpjfd6c2u5.swift:49:9: note: 'evenMinSumSumSumCount'\
    \ previously declared here\n    var evenMinSumSumSumCount: Int = 0\n        ^\n\
    /tmp/tmpjfd6c2u5.swift:58:9: error: invalid redeclaration of 'oddMinSumSumSumCount'\n\
    \    var oddMinSumSumSumCount: Int = 0\n        ^\n/tmp/tmpjfd6c2u5.swift:50:9:\
    \ note: 'oddMinSumSumSumCount' previously declared here\n    var oddMinSumSumSumCount:\
    \ Int = 0\n        ^\n/tmp/tmpjfd6c2u5.swift:59:9: error: invalid redeclaration\
    \ of 'evenMaxSumSumSumSum'\n    var evenMaxSumSumSumSum: Int = 0\n        ^\n\
    /tmp/tmpjfd6c2u5.swift:51:9: note: 'evenMaxSumSumSumSum' previously declared here\n\
    \    var evenMaxSumSumSumSum: Int = 0\n        ^\n/tmp/tmpjfd6c2u5.swift:60:9:\
    \ error: invalid redeclaration of 'oddMaxSumSumSumSum'\n    var oddMaxSumSumSumSum:\
    \ Int = 0\n        ^\n/tmp/tmpjfd6c2u5.swift:52:9: note: 'oddMaxSumSumSumSum'\
    \ previously declared here\n    var oddMaxSumSumSumSum: Int = 0\n        ^\n/tmp/tmpjfd6c2u5.swift:61:9:\
    \ error: invalid redeclaration of 'evenMinSumSumSumSum'\n    var evenMinSumSumSumSum:\
    \ Int = 0\n        ^\n/tmp/tmpjfd6c2u5.swift:53:9: note: 'evenMinSumSumSumSum'\
    \ previously declared here\n    var evenMinSumSumSumSum: Int = 0\n        ^\n\
    /tmp/tmpjfd6c2u5.swift:62:9: error: invalid redeclaration of 'oddMinSumSumSumSum'\n\
    \    var oddMinSumSumSumSum: Int = 0\n        ^\n/tmp/tmpjfd6c2u5.swift:54:9:\
    \ note: 'oddMinSumSumSumSum' previously declared here\n    va"
  stdout: ''
  timestamp: 1659824587
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    var x = x % 2\n    var y = y % 2\n\
    \    while x >= y {\n        if x == 0 {\n            result = y\n           \
    \ break\n        }\n        x /= 2\n        y /= 2\n    }\n    if x == 0 {\n \
    \       result = x\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12)\
    \ == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234,\
    \ y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpqpdvgn0s/tmpqpdvgn0s.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aacaf4c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aacaf1c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aacaf1c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aacaf1bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqpdvgn0s                        0x0000557ae680524d <unavailable> + 4685

    5    libc.so.6                          0x00002aacaf6b5460 __libc_start_main +
    245

    6    tmpqpdvgn0s                        0x0000557ae6804ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824587
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x < y {\n        return -1\n    }\n    \n    var even:\
    \ Int = 0\n    var odd: Int = 0\n    \n    for i in 0..<(x-y) {\n        if i\
    \ % 2 == 0 {\n            even += i\n        } else {\n            odd += i\n\
    \        }\n    }\n    \n    if even > y {\n        return even\n    }\n    \n\
    \    return odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpzhjopvn5/tmpzhjopvn5.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba47c98ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba47c685b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba47c685988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba47c6847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjopvn5                        0x000055b1b4a9c33d <unavailable> + 4925

    5    libc.so.6                          0x00002ba47cb7a460 __libc_start_main +
    245

    6    tmpzhjopvn5                        0x000055b1b4a9bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824587
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    if x % 2 == 0 && y % 2 == 0 {\n        return x\
    \ + (y - x)\n    }\n    if x % 2 == 0 && y % 2 != 0 {\n        return -1\n   \
    \ }\n    if x % 2 != 0 && y % 2 == 0 {\n        return -1\n    }\n    if x % 2\
    \ != 0 && y % 2 != 0 {\n        return -1\n    }\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpl2ve9oii/tmpl2ve9oii.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5bfb333c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5bfb02ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5bfb02a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5bfb0297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl2ve9oii                        0x000056233829924d <unavailable> + 4685

    5    libc.so.6                          0x00002b5bfb51f460 __libc_start_main +
    245

    6    tmpl2ve9oii                        0x0000562338298ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824587
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    var x = x - 1\n    var y = y - 1\n\
    \    var even = 1\n    var odd = 0\n    while even > 0 || odd > 0 {\n        if\
    \ even > 0 {\n            even = even + x\n        }\n        if odd > 0 {\n \
    \           odd = odd + y\n        }\n        if even > 0 {\n            x = x\
    \ - even\n        }\n        if odd > 0 {\n            y = y - odd\n        }\n\
    \        if even > 0 {\n            even = even + x\n        }\n        if odd\
    \ > 0 {\n            odd = odd + y\n        }\n        if even > 0 {\n       \
    \     x = x - even\n        }\n        if odd > 0 {\n            y = y - odd\n\
    \        }\n        if even > 0 {\n            even = even + x\n        }\n  \
    \      if odd > 0 {\n            odd = odd + y\n        }\n        if even > 0\
    \ {\n            x = x - even\n        }\n        if odd > 0 {\n            y\
    \ = y - odd\n        }\n        if even > 0 {\n            even = even + x\n \
    \       }\n        if odd > 0 {\n            odd = odd + y\n        }\n      \
    \  if even > 0 {\n            x = x - even\n        }\n        if odd > 0 {\n\
    \            y = y - odd\n        }\n        if even > 0 {\n            even =\
    \ even + x\n        }\n        if odd > 0 {\n            odd = odd + y\n     \
    \   }\n        if even > 0 {\n            x = x - even\n        }\n        if\
    \ odd > 0 {\n            y = y - odd\n        }\n        if even > 0 {\n     \
    \       even = even + x\n        }\n        if odd > 0 {\n            odd = odd\
    \ + y\n        }\n        if even > 0 {\n            x = x - even\n        }\n\
    \        if odd > 0 {\n            y = y - odd\n        }\n        if even > 0\
    \ {\n            even = even + x\n        }\n        if odd > 0 {\n          \
    \  odd = odd + y\n        }\n        if even > 0 {\n            x = x - even\n\
    \        }\n        if odd > 0 {\n            y = y - odd\n        }\n       \
    \ if even > 0 {\n            even = even + x\n        }\n        if odd > 0 {\n\
    \            odd = odd + y\n        }\n        if even > 0 {\n            x =\
    \ x - even\n        }\n        if odd > 0 {\n            y = y - odd\n       \
    \ }\n        if even > 0 {\n            even = even + x\n        }\n        if\
    \ odd > 0 {\n            odd = odd + y\n        }\n        if even > 0 {\n   \
    \         x = x - even\n        }\n        if odd > 0 {\n            y = y - odd\n\
    \        }\n        if even > 0 {\n            even = even + x\n        }\n  \
    \      if odd > 0 {\n            odd = odd + y\n        }\n        if even > 0\
    \ {\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\n\
    assert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) ==\
    \ 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x: 6,\
    \ y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpd1e_bi9i.swift:152:42: error: expected '}' at end of brace statement\n\
    assert(choose_num(x: 546, y: 546) == 546)\n                                  \
    \       ^\n/tmp/tmpd1e_bi9i.swift:14:31: note: to match this opening '{'\n   \
    \ while even > 0 || odd > 0 {\n                              ^\n/tmp/tmpd1e_bi9i.swift:152:42:\
    \ error: expected '}' at end of brace statement\nassert(choose_num(x: 546, y:\
    \ 546) == 546)\n                                         ^\n/tmp/tmpd1e_bi9i.swift:8:40:\
    \ note: to match this opening '{'\nfunc choose_num(x: Int, y: Int) -> Int {\n\
    \                                       ^\n/tmp/tmpd1e_bi9i.swift:133:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmpd1e_bi9i.swift:9:9:\
    \ warning: initialization of variable 'result' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var result = -1\n    ~~~~^~~~~~\n\
    \    _\n"
  stdout: ''
  timestamp: 1659824587
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var even: Int = 0\n    var odd: Int = 0\n    var biggest:\
    \ Int = 0\n    var evenMax: Int = 0\n    var oddMax: Int = 0\n    var evenMin:\
    \ Int = 0\n    var oddMin: Int = 0\n    var evenMaxIndex: Int = 0\n    var oddMaxIndex:\
    \ Int = 0\n    var evenMinIndex: Int = 0\n    var oddMinIndex: Int = 0\n    var\
    \ evenMaxCount: Int = 0\n    var oddMaxCount: Int = 0\n    var evenMinCount: Int\
    \ = 0\n    var oddMinCount: Int = 0\n    var evenMaxSum: Int = 0\n    var oddMaxSum:\
    \ Int = 0\n    var evenMinSum: Int = 0\n    var oddMinSum: Int = 0\n    var evenMaxSumIndex:\
    \ Int = 0\n    var oddMaxSumIndex: Int = 0\n    var evenMinSumIndex: Int = 0\n\
    \    var oddMinSumIndex: Int = 0\n    var evenMaxSumCount: Int = 0\n    var oddMaxSumCount:\
    \ Int = 0\n    var evenMinSumCount: Int = 0\n    var oddMinSumCount: Int = 0\n\
    \    var evenMaxSumSum: Int = 0\n    var oddMaxSumSum: Int = 0\n    var evenMinSumSum:\
    \ Int = 0\n    var oddMinSumSum: Int = 0\n    var evenMaxSumSumIndex: Int = 0\n\
    \    var oddMaxSumSumIndex: Int = 0\n    var evenMinSumSumIndex: Int = 0\n   \
    \ var oddMinSumSumIndex: Int = 0\n    var evenMaxSumSumCount: Int = 0\n    var\
    \ oddMaxSumSumCount: Int = 0\n    var evenMinSumSumCount: Int = 0\n    var oddMinSumSumCount:\
    \ Int = 0\n    var evenMaxSumSumSum: Int = 0\n    var oddMaxSumSumSum: Int = 0\n\
    \    var evenMinSumSumSum: Int = 0\n    var oddMinSumSumSum: Int = 0\n    var\
    \ evenMaxSumSumSumIndex: Int = 0\n    var oddMaxSumSumSumIndex: Int = 0\n    var\
    \ evenMinSumSumSumIndex: Int = 0\n    var oddMinSumSumSumIndex: Int = 0\n    var\
    \ evenMaxSumSumSumCount: Int = 0\n    var oddMaxSumSumSumCount: Int = 0\n    var\
    \ evenMinSumSumSumCount: Int = 0\n    var oddMinSumSumSumCount: Int = 0\n    var\
    \ evenMaxSumSumSumSum: Int = 0\n    var oddMaxSumSumSumSum: Int = 0\n    var evenMinSumSumSumSum:\
    \ Int = 0\n    var oddMinSumSumSumSum: Int = 0\n    var evenMaxSumSumSumSumIndex:\
    \ \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\n\
    assert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) ==\
    \ 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x: 6,\
    \ y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpu1vs28ku.swift:64:34: error: expected type\n    var evenMaxSumSumSumSumIndex:\
    \ \n                                 ^\n                                  <#type#>\n"
  stdout: ''
  timestamp: 1659824587
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    if x % 2 == 0 {\n        return choose_num(x / 2,\
    \ y)\n    }\n    if y % 2 == 0 {\n        return choose_num(x, y / 2)\n    }\n\
    \    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpy6fjfrvj.swift:16:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(x / 2, y)\n                         ^\n    \
    \                      x:     y: \n/tmp/tmpy6fjfrvj.swift:19:26: error: missing\
    \ argument labels 'x:y:' in call\n        return choose_num(x, y / 2)\n      \
    \                   ^\n                          x: y: \n"
  stdout: ''
  timestamp: 1659824587
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    var biggest = y\n    for num in stride(from: x,\
    \ through: y, by: 2) {\n        if num % 2 == 0 {\n            biggest = num\n\
    \        }\n    }\n    return biggest\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: Exception
  stderr: 'tmpkalghj00/tmpkalghj00.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b73f52eac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b73f4fe1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b73f4fe1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b73f4fe07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkalghj00                        0x000055645488e47d <unavailable> + 5245

    5    libc.so.6                          0x00002b73f54d6460 __libc_start_main +
    245

    6    tmpkalghj00                        0x000055645488e129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824587
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x < y {\n        return -1\n    }\n    \n    var result\
    \ = x\n    \n    for _ in 0..<y {\n        if result % 2 == 0 {\n            result\
    \ = result / 2\n        } else {\n            result = result * 3 + 1\n      \
    \  }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: Exception
  stderr: 'tmpcdafk52r/tmpcdafk52r.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4bf60cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4bf5dc4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4bf5dc4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4bf5dc37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcdafk52r                        0x0000557684dca33d <unavailable> + 4925

    5    libc.so.6                          0x00002b4bf62b9460 __libc_start_main +
    245

    6    tmpcdafk52r                        0x0000557684dc9fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824587
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    var x = x - 1\n    var y = y - 1\n\
    \    while x >= y {\n        if x % 2 == 0 && y % 2 == 0 {\n            result\
    \ = x\n        }\n        x /= 2\n        y /= 2\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpzciubc78/tmpzciubc78.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d5b602c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d5b2f9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d5b2f9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d5b2f87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzciubc78                        0x000055ecf5c3524d <unavailable> + 4685

    5    libc.so.6                          0x00002b8d5b7ee460 __libc_start_main +
    245

    6    tmpzciubc78                        0x000055ecf5c34ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824588
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x <= y {\n        return -1\n    }\n    \n    var biggest\
    \ = y\n    \n    for num in stride(from: x, through: y, by: 2) {\n        if num\
    \ % 2 == 0 {\n            biggest = num\n            break\n        }\n    }\n\
    \    \n    return biggest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpjwgbjho3/tmpjwgbjho3.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7340293c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b733ff8ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b733ff8a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b733ff897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjwgbjho3                        0x000056255dd9547d <unavailable> + 5245

    5    libc.so.6                          0x00002b734047f460 __libc_start_main +
    245

    6    tmpjwgbjho3                        0x000056255dd95129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824588
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    if x % 2 == 0 && y % 2 == 0 {\n        return x\
    \ + y\n    }\n    if x % 2 == 0 {\n        return y\n    }\n    return x\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpttkkmqo3/tmpttkkmqo3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6303b36c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b630382db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b630382d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b630382c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpttkkmqo3                        0x000056104e8cb24d <unavailable> + 4685

    5    libc.so.6                          0x00002b6303d22460 __libc_start_main +
    245

    6    tmpttkkmqo3                        0x000056104e8caef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824588
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var even: Int = 0\n    var odd: Int = 0\n    var x: Int\
    \ = 0\n    var y: Int = 0\n    var z: Int = 0\n    var evenMax: Int = 0\n    var\
    \ oddMax: Int = 0\n    var evenMin: Int = 0\n    var oddMin: Int = 0\n    var\
    \ evenMax2: Int = 0\n    var oddMax2: Int = 0\n    var evenMin2: Int = 0\n   \
    \ var oddMin2: Int = 0\n    var evenMax3: Int = 0\n    var oddMax3: Int = 0\n\
    \    var evenMin3: Int = 0\n    var oddMin3: Int = 0\n    var evenMax4: Int =\
    \ 0\n    var oddMax4: Int = 0\n    var evenMin4: Int = 0\n    var oddMin4: Int\
    \ = 0\n    var evenMax5: Int = 0\n    var oddMax5: Int = 0\n    var evenMin5:\
    \ Int = 0\n    var oddMin5: Int = 0\n    var evenMax6: Int = 0\n    var oddMax6:\
    \ Int = 0\n    var evenMin6: Int = 0\n    var oddMin6: Int = 0\n    var evenMax7:\
    \ Int = 0\n    var oddMax7: Int = 0\n    var evenMin7: Int = 0\n    var oddMin7:\
    \ Int = 0\n    var evenMax8: Int = 0\n    var oddMax8: Int = 0\n    var evenMin8:\
    \ Int = 0\n    var oddMin8: Int = 0\n    var evenMax9: Int = 0\n    var oddMax9:\
    \ Int = 0\n    var evenMin9: Int = 0\n    var oddMin9: Int = 0\n    var evenMax10:\
    \ Int = 0\n    var oddMax10: Int = 0\n    var evenMin10: Int = 0\n    var oddMin10:\
    \ Int = 0\n    var evenMax11: Int = 0\n    var oddMax11: Int = 0\n    var evenMin11:\
    \ Int = 0\n    var oddMin11: Int = 0\n    var evenMax12: Int = 0\n    var oddMax12:\
    \ Int = 0\n    var evenMin12: Int = 0\n    var oddMin12: Int = 0\n    var evenMax13:\
    \ Int = 0\n    var oddMax13: Int = 0\n    var evenMin13: Int = 0\n    var oddMin13:\
    \ Int = 0\n    var evenMax14: Int = 0\n    var oddMax14: Int = 0\n    var evenMin14:\
    \ Int = 0\n    var oddMin14: Int = 0\n    var evenMax15: Int = 0\n    var oddMax15:\
    \ Int = 0\n    var evenMin15: Int = 0\n    var oddMin15: Int = 0\n    var evenMax16:\
    \ Int = 0\n    var oddMax16: Int = 0\n    var evenMin16: Int = 0\n\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpfact9p0z.swift:9:9: warning: variable 'even' was never used; consider\
    \ replacing with '_' or removing it\n    var even: Int = 0\n        ^~~~\n   \
    \     _\n/tmp/tmpfact9p0z.swift:10:9: warning: variable 'odd' was never used;\
    \ consider replacing with '_' or removing it\n    var odd: Int = 0\n        ^~~\n\
    \        _\n/tmp/tmpfact9p0z.swift:11:9: warning: variable 'x' was never used;\
    \ consider replacing with '_' or removing it\n    var x: Int = 0\n        ^\n\
    \        _\n/tmp/tmpfact9p0z.swift:12:9: warning: variable 'y' was never used;\
    \ consider replacing with '_' or removing it\n    var y: Int = 0\n        ^\n\
    \        _\n/tmp/tmpfact9p0z.swift:13:9: warning: variable 'z' was never used;\
    \ consider replacing with '_' or removing it\n    var z: Int = 0\n        ^\n\
    \        _\n/tmp/tmpfact9p0z.swift:14:9: warning: variable 'evenMax' was never\
    \ used; consider replacing with '_' or removing it\n    var evenMax: Int = 0\n\
    \        ^~~~~~~\n        _\n/tmp/tmpfact9p0z.swift:15:9: warning: variable 'oddMax'\
    \ was never used; consider replacing with '_' or removing it\n    var oddMax:\
    \ Int = 0\n        ^~~~~~\n        _\n/tmp/tmpfact9p0z.swift:16:9: warning: variable\
    \ 'evenMin' was never used; consider replacing with '_' or removing it\n    var\
    \ evenMin: Int = 0\n        ^~~~~~~\n        _\n/tmp/tmpfact9p0z.swift:17:9: warning:\
    \ variable 'oddMin' was never used; consider replacing with '_' or removing it\n\
    \    var oddMin: Int = 0\n        ^~~~~~\n        _\n/tmp/tmpfact9p0z.swift:18:9:\
    \ warning: variable 'evenMax2' was never used; consider replacing with '_' or\
    \ removing it\n    var evenMax2: Int = 0\n        ^~~~~~~~\n        _\n/tmp/tmpfact9p0z.swift:19:9:\
    \ warning: variable 'oddMax2' was never used; consider replacing with '_' or removing\
    \ it\n    var oddMax2: Int = 0\n        ^~~~~~~\n        _\n/tmp/tmpfact9p0z.swift:20:9:\
    \ warning: variable 'evenMin2' was never used; consider replacing with '_' or\
    \ removing it\n    var evenMin2: Int = 0\n        ^~~~~~~~\n        _\n/tmp/tmpfact9p0z.swift:21:9:\
    \ warning: variable 'oddMin2' was never used; consider replacing with '_' or removing\
    \ it\n    "
  stdout: ''
  timestamp: 1659824588
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x < y {\n        return choose_num(y, x)\n    }\n \
    \   if x == y {\n        return x\n    }\n    if x % 2 == 0 && y % 2 == 0 {\n\
    \        return (x * y) / 2\n    }\n    if x % 2 == 0 {\n        return x / 2\n\
    \    }\n    if y % 2 == 0 {\n        return y / 2\n    }\n    return -1\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp2o6vunm5.swift:10:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(y, x)\n                         ^\n        \
    \                  x: y: \n"
  stdout: ''
  timestamp: 1659824588
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x < y {\n        return -1\n    }\n    \n    var even\
    \ = Int()\n    var odd = Int()\n    \n    for i in 0..<(x-y) {\n        even =\
    \ even + 2\n        odd = odd + 1\n    }\n    \n    if even > y {\n        return\
    \ even\n    }\n    \n    return odd\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: Exception
  stderr: 'tmp2by1nu4y/tmp2by1nu4y.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c87edbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c87bd2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c87bd2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c87bd17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2by1nu4y                        0x000055dfebfae33d <unavailable> + 4925

    5    libc.so.6                          0x00002b1c880c7460 __libc_start_main +
    245

    6    tmp2by1nu4y                        0x000055dfebfadfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824588
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x < y {\n        swap(x, y)\n    }\n    var even: Int\
    \ = 0\n    var odd: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z:\
    \ Int = 0\n    for z in 0..<y {\n        x = x + 1\n        y = y + 1\n      \
    \  if x % 2 == 0 {\n            even = even + 1\n        }\n        if y % 2 ==\
    \ 0 {\n            odd = odd + 1\n        }\n        if even > odd {\n       \
    \     break\n        }\n    }\n    if even > odd {\n        return even\n    }\n\
    \    return odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpa4imr1zg.swift:10:9: error: cannot pass immutable value as inout\
    \ argument: 'x' is a 'let' constant\n        swap(x, y)\n        ^    ~\n"
  stdout: ''
  timestamp: 1659824588
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x <= 0 || y <= 0 {\n        return -1\n    }\n    var\
    \ even: Int = 0\n    var odd: Int = 0\n    for _ in 0..<(x-y) {\n        if x\
    \ % 2 == 0 {\n            even += 2\n            x /= 2\n        } else {\n  \
    \          odd += 1\n            x /= 2\n        }\n    }\n    if even > odd {\n\
    \        return even\n    } else {\n        return odd\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpmskk_f69.swift:17:15: error: left side of mutating operator isn't\
    \ mutable: 'x' is a 'let' constant\n            x /= 2\n            ~ ^\n/tmp/tmpmskk_f69.swift:20:15:\
    \ error: left side of mutating operator isn't mutable: 'x' is a 'let' constant\n\
    \            x /= 2\n            ~ ^\n"
  stdout: ''
  timestamp: 1659824588
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x < y {\n        return -1\n    }\n    \n    var even:\
    \ Int = 0\n    var odd: Int = 0\n    \n    for _ in 0..<(x-y) {\n        even\
    \ = even + 2\n        odd = odd + 1\n    }\n    \n    if even > y {\n        return\
    \ even\n    } else {\n        return odd\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12)\
    \ == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234,\
    \ y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpzj_zcbgf/tmpzj_zcbgf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2d53154c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2d52e4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2d52e4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2d52e4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzj_zcbgf                        0x000055d7510af33d <unavailable> + 4925

    5    libc.so.6                          0x00002b2d53340460 __libc_start_main +
    245

    6    tmpzj_zcbgf                        0x000055d7510aefe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824588
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var biggest = y\n    var smaller = x\n    while biggest\
    \ < smaller + 1 {\n        if biggest % 2 == 0 && smaller % 2 == 0 {\n       \
    \     biggest = biggest / 2\n            smaller = smaller / 2\n        } else\
    \ if biggest % 2 == 0 && smaller % 2 != 0 {\n            biggest = biggest / 2\n\
    \        } else {\n            smaller = smaller / 2\n        }\n    }\n    return\
    \ biggest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpp0rd9bg0/tmpp0rd9bg0.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea60ff1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea60ce8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea60ce8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea60ce77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp0rd9bg0                        0x000055da3a29824d <unavailable> + 4685

    5    libc.so.6                          0x00002aea611dd460 __libc_start_main +
    245

    6    tmpp0rd9bg0                        0x000055da3a297ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824588
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x < y {\n        return -1\n    }\n    var even: Int\
    \ = 0\n    var odd: Int = 0\n    var x: Int\n    var y: Int\n    for (x = y; x\
    \ > 0; x--, y += 2) {\n        if x % 2 == 0 {\n            even = even * x +\
    \ x\n        } else {\n            odd = odd * x + x\n        }\n    }\n    if\
    \ even > odd {\n        return even\n    } else {\n        return odd\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpy4iuogm6.swift:16:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for (x = y; x > 0; x--, y += 2) {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824588
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    if x % 2 == 0 {\n        return choose_num(x / 2,\
    \ y)\n    }\n    if y % 2 == 0 {\n        return choose_num(x, y / 2)\n    }\n\
    \    return choose_num(x / 2, y / 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp4i9kmxj0.swift:16:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(x / 2, y)\n                         ^\n    \
    \                      x:     y: \n/tmp/tmp4i9kmxj0.swift:19:26: error: missing\
    \ argument labels 'x:y:' in call\n        return choose_num(x, y / 2)\n      \
    \                   ^\n                          x: y: \n/tmp/tmp4i9kmxj0.swift:21:22:\
    \ error: missing argument labels 'x:y:' in call\n    return choose_num(x / 2,\
    \ y / 2)\n                     ^\n                      x:     y: \n"
  stdout: ''
  timestamp: 1659824586
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    var even = 1\n    var odd = 0\n \
    \   var x = x - 1\n    var y = y - 1\n    \n    while x >= 0 && y >= 0 {\n   \
    \     if x % 2 == 0 && y % 2 == 0 {\n            result = x\n            even\
    \ = even + 1\n        }\n        if x % 2 != 0 && y % 2 != 0 {\n            result\
    \ = y\n            odd = odd + 1\n        }\n        x = x - 1\n        y = y\
    \ - 1\n    }\n    \n    if even > odd {\n        result = even\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpcdq236hy/tmpcdq236hy.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e1f769c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e1f460b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e1f460988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e1f45f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcdq236hy                        0x0000560c0cdb724d <unavailable> + 4685

    5    libc.so.6                          0x00002b8e1f955460 __libc_start_main +
    245

    6    tmpcdq236hy                        0x0000560c0cdb6ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824588
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    if x > y {\n        swap(x, y)\n\
    \    }\n    for number in stride(from: x, through: y, by: 2) {\n        if number\
    \ % 2 == 0 {\n            result = number\n            break\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpo0ngzr65.swift:11:9: error: cannot pass immutable value as inout\
    \ argument: 'x' is a 'let' constant\n        swap(x, y)\n        ^    ~\n"
  stdout: ''
  timestamp: 1659824588
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x <= y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    if x % 2 == 0 {\n        return choose_num(x / 2,\
    \ y)\n    }\n    if y % 2 == 0 {\n        return choose_num(x, y / 2)\n    }\n\
    \    if x > y {\n        return choose_num(x / 2, y)\n    }\n    return choose_num(x,\
    \ y / 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpm5qkeuup.swift:16:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(x / 2, y)\n                         ^\n    \
    \                      x:     y: \n/tmp/tmpm5qkeuup.swift:19:26: error: missing\
    \ argument labels 'x:y:' in call\n        return choose_num(x, y / 2)\n      \
    \                   ^\n                          x: y: \n/tmp/tmpm5qkeuup.swift:22:26:\
    \ error: missing argument labels 'x:y:' in call\n        return choose_num(x /\
    \ 2, y)\n                         ^\n                          x:     y: \n/tmp/tmpm5qkeuup.swift:24:22:\
    \ error: missing argument labels 'x:y:' in call\n    return choose_num(x, y /\
    \ 2)\n                     ^\n                      x: y: \n"
  stdout: ''
  timestamp: 1659824588
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    \n    if x >= y {\n        return\
    \ -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x %\
    \ 2 == 0 {\n        if y % 2 == 0 {\n            result = x\n        } else {\n\
    \            result = y\n        }\n    } else {\n        if y % 2 == 0 {\n  \
    \          result = y\n        } else {\n            result = x\n        }\n \
    \   }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpqfzae4q1/tmpqfzae4q1.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac1ac344c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1ac03bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1ac03b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1ac03a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqfzae4q1                        0x0000558c54a3c24d <unavailable> + 4685

    5    libc.so.6                          0x00002ac1ac530460 __libc_start_main +
    245

    6    tmpqfzae4q1                        0x0000558c54a3bef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824588
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x <= y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    var even: Int = 0\n    var odd: Int = 0\n    var\
    \ x: Int = 0\n    var y: Int = 0\n    var evenMax: Int = 0\n    var oddMax: Int\
    \ = 0\n    for x in stride(from: x, through: y, by: 1) {\n        if x % 2 ==\
    \ 0 {\n            even += x\n            if even > evenMax {\n              \
    \  evenMax = even\n            }\n        } else {\n            odd += x\n   \
    \         if odd > oddMax {\n                oddMax = odd\n            }\n   \
    \     }\n    }\n    if evenMax < y {\n        return evenMax\n    }\n    if oddMax\
    \ < y {\n        return oddMax\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13,\
    \ y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmprrpj7em6/tmprrpj7em6.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2ca7ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2ca4c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2ca4c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2ca4c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprrpj7em6                        0x000055d2d4fc247d <unavailable> + 5245

    5    libc.so.6                          0x00002ba2ca9b8460 __libc_start_main +
    245

    6    tmprrpj7em6                        0x000055d2d4fc2129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824588
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x <= 0 || y <= 0 {\n        return -1\n    }\n    var\
    \ result = x\n    for _ in 0..<y {\n        if result % 2 == 0 {\n           \
    \ result = result / 2\n        } else {\n            return -1\n        }\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpvenxk0or/tmpvenxk0or.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4dfca27c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4dfc71eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4dfc71e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4dfc71d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvenxk0or                        0x000055cc75ff833d <unavailable> + 4925

    5    libc.so.6                          0x00002b4dfcc13460 __libc_start_main +
    245

    6    tmpvenxk0or                        0x000055cc75ff7fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824588
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x > y {\n        (x, y) = (y, x)\n    }\n    var even:\
    \ Int = 0\n    var odd: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    while\
    \ x < y {\n        even = even + x\n        odd = odd + y\n        if even > odd\
    \ {\n            (x, y) = (x, y)\n        } else {\n            (x, y) = (y, x)\n\
    \        }\n    }\n    return even\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpe94mh5wp.swift:10:10: error: cannot assign to value: 'x' is a 'let'\
    \ constant\n        (x, y) = (y, x)\n         ^\n/tmp/tmpe94mh5wp.swift:10:13:\
    \ error: cannot assign to value: 'y' is a 'let' constant\n        (x, y) = (y,\
    \ x)\n            ^\n"
  stdout: ''
  timestamp: 1659824588
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x > y {\n        return -1\n    }\n    var even: Int\
    \ = 0\n    var odd: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    for x\
    \ in stride(from: x, to: y, by: 2) {\n        if x % 2 == 0 {\n            even\
    \ = even * 2 + x\n        } else {\n            odd = odd * 2 + x\n        }\n\
    \    }\n    if even > odd {\n        return even\n    } else {\n        return\
    \ odd\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpwnsjcit8/tmpwnsjcit8.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b65488a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6548599b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6548599988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65485987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwnsjcit8                        0x0000562a8aa7645d <unavailable> + 5213

    5    libc.so.6                          0x00002b6548a8e460 __libc_start_main +
    245

    6    tmpwnsjcit8                        0x0000562a8aa76109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1659824588
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    var x = abs(x)\n    var y = abs(y)\n\
    \    var z = abs(x-y)\n    while z > 0 {\n        if x % 2 == 0 && y % 2 == 0\
    \ {\n            if x == y {\n                result = x\n            } else {\n\
    \                result = y\n            }\n            break\n        }\n   \
    \     x /= 2\n        y /= 2\n        z /= 2\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpd5xwjros/tmpd5xwjros.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b77a1adfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b77a17d6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b77a17d6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b77a17d57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd5xwjros                        0x000055ade127933d <unavailable> + 4925

    5    libc.so.6                          0x00002b77a1ccb460 __libc_start_main +
    245

    6    tmpd5xwjros                        0x000055ade1278fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824588
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    if x < y {\n        result = x\n\
    \    } else {\n        result = y\n    }\n    \n    while result > 0 && result\
    \ % 2 == 0 {\n        result /= 2\n    }\n    \n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpkr6rrzfc/tmpkr6rrzfc.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae26a2ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae269ff6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae269ff6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae269ff57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkr6rrzfc                        0x000055c08347324d <unavailable> + 4685

    5    libc.so.6                          0x00002ae26a4eb460 __libc_start_main +
    245

    6    tmpkr6rrzfc                        0x000055c083472ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824588
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x <= y {\n        return -1\n    }\n    var result\
    \ = x\n    var remainder = y\n    while remainder > 0 {\n        if remainder\
    \ % 2 == 0 {\n            result = remainder\n            break\n        }\n \
    \       remainder /= 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13,\
    \ y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpinexhb1e/tmpinexhb1e.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b847d986c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b847d67db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b847d67d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b847d67c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpinexhb1e                        0x000055653513824d <unavailable> + 4685

    5    libc.so.6                          0x00002b847db72460 __libc_start_main +
    245

    6    tmpinexhb1e                        0x0000556535137ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824588
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    \n    if x > y {\n        result\
    \ = x\n    } else {\n        result = y\n    }\n    \n    if result % 2 == 0 {\n\
    \        result = (result / 2)\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp2c94nhqh/tmp2c94nhqh.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7184590c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7184287b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7184287988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71842867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2c94nhqh                        0x00005582e13cc24d <unavailable> + 4685

    5    libc.so.6                          0x00002b718477c460 __libc_start_main +
    245

    6    tmp2c94nhqh                        0x00005582e13cbef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824588
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var even: Int = 0\n    var odd: Int = 0\n    var biggest:\
    \ Int = 0\n    for var i = x; i <= y; i++ {\n        if i % 2 == 0 {\n       \
    \     even += i\n        } else {\n            odd += i\n        }\n        if\
    \ even > biggest {\n            biggest = even\n        }\n        if odd > biggest\
    \ {\n            biggest = odd\n        }\n    }\n    return biggest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp4b_e8cn4.swift:12:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = x; i <= y; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824588
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x <= y {\n        return -1\n    }\n    var even =\
    \ y\n    for _ in 0..<(x-y) {\n        even = even / 2\n    }\n    return even\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmphfykz2pi/tmphfykz2pi.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afdc3e1ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afdc3b15b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afdc3b15988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afdc3b147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphfykz2pi                        0x0000561dc73e433d <unavailable> + 4925

    5    libc.so.6                          0x00002afdc400a460 __libc_start_main +
    245

    6    tmphfykz2pi                        0x0000561dc73e3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824588
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    if x % 2 == 0 && y % 2 == 0 {\n        return x\
    \ + (y - x) / 2\n    }\n    if x % 2 == 0 {\n        return x - 1\n    }\n   \
    \ if y % 2 == 0 {\n        return y + 1\n    }\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpn_2z234q/tmpn_2z234q.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac9abba4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac9ab89bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac9ab89b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac9ab89a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn_2z234q                        0x0000560eeec3e24d <unavailable> + 4685

    5    libc.so.6                          0x00002ac9abd90460 __libc_start_main +
    245

    6    tmpn_2z234q                        0x0000560eeec3def9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824588
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x <= 0 || y <= 0 {\n        return -1\n    }\n    \n\
    \    var result = x\n    \n    for _ in 0..<y {\n        if result % 2 == 0 {\n\
    \            result = result / 2\n        } else {\n            result /= 2\n\
    \        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12)\
    \ == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234,\
    \ y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp199t5cmb/tmp199t5cmb.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4665f36c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4665c2db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4665c2d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4665c2c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp199t5cmb                        0x00005563fedd433d <unavailable> + 4925

    5    libc.so.6                          0x00002b4666122460 __libc_start_main +
    245

    6    tmp199t5cmb                        0x00005563fedd3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824588
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    if x > y {\n        var temp = x\n\
    \        x = y\n        y = temp\n    }\n    for var i = x; i <= y; i++ {\n  \
    \      if i % 2 == 0 {\n            result = i\n            break\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpo6w9zt1f.swift:15:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = x; i <= y; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpo6w9zt1f.swift:12:9: error: cannot assign to value: 'x' is a 'let' constant\n\
    \        x = y\n        ^\n/tmp/tmpo6w9zt1f.swift:13:9: error: cannot assign to\
    \ value: 'y' is a 'let' constant\n        y = temp\n        ^\n"
  stdout: ''
  timestamp: 1659824588
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    var x = x - 1\n    var y = y - 1\n\
    \    var even = 1\n    var odd = 0\n    var eveneven = 1\n    var evenodd = 0\n\
    \    var oddodd = 0\n    var eveneveneven = 1\n    var evenevenodd = 0\n    var\
    \ evenoddodd = 0\n    var oddoddeven = 1\n    var oddoddodd = 0\n    var eveneveneveneven\
    \ = 1\n    var evenevenevenodd = 0\n    var evenevenevenevenodd = 0\n    var evenevenevenoddodd\
    \ = 0\n    var evenevenevenevenodd = 0\n    var evenevenevenevenevenodd = 0\n\
    \    var evenevenevenevenevenevenodd = 0\n    var evenevenevenevenevenevenevenodd\
    \ = 0\n    var evenevenevenevenevenevenevenevenodd = 0\n    var evenevenevenevenevenevenevenevenevenodd\
    \ = 0\n    var evenevenevenevenevenevenevenevenevenevenevenodd = 0\n    var evenevenevenevenevenevenevenevenevenevenevenevenodd\
    \ = 0\n    var evenevenevenevenevenevenevenevenevenevenevenevenevenevenodd = 0\n\
    \    var evenevenevenevenevenevenevenevenevenevenevenevenevenevenevenodd = 0\n\
    \    var evenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenodd\
    \ = 0\n    var evenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenodd\
    \ = 0\n    var evenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenodd\
    \ = 0\n    var evenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenodd\
    \ = 0\n    var evenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenodd\
    \ = 0\n    var evenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenodd\
    \ = 0\n    var evenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenodd\
    \ = 0\n    var evenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenodd\
    \ = 0\n    var evenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenodd\
    \ = 0\n    var evenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenodd\
    \ = 0\n    var evenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenodd\
    \ = 0\n    var eveneveneveneven\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp3biwa9sa.swift:26:9: error: invalid redeclaration of 'evenevenevenevenodd'\n\
    \    var evenevenevenevenodd = 0\n        ^\n/tmp/tmp3biwa9sa.swift:24:9: note:\
    \ 'evenevenevenevenodd' previously declared here\n    var evenevenevenevenodd\
    \ = 0\n        ^\n/tmp/tmp3biwa9sa.swift:43:9: error: invalid redeclaration of\
    \ 'evenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenodd'\n\
    \    var evenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenodd\
    \ = 0\n        ^\n/tmp/tmp3biwa9sa.swift:42:9: note: 'evenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenodd'\
    \ previously declared here\n    var evenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenodd\
    \ = 0\n        ^\n/tmp/tmp3biwa9sa.swift:45:9: error: invalid redeclaration of\
    \ 'evenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenodd'\n\
    \    var evenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenodd\
    \ = 0\n        ^\n/tmp/tmp3biwa9sa.swift:44:9: note: 'evenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenodd'\
    \ previously declared here\n    var evenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenodd\
    \ = 0\n        ^\n/tmp/tmp3biwa9sa.swift:46:9: error: invalid redeclaration of\
    \ 'evenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenodd'\n\
    \    var evenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenodd\
    \ = 0\n        ^\n/tmp/tmp3biwa9sa.swift:44:9: note: 'evenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenodd'\
    \ previously declared here\n    var evenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenevenodd\
    \ = 0\n        ^\n/tmp/tmp3biwa9sa.swift:47:9: error: type annotation missing\
    \ in pattern\n    var eveneveneveneven\n        ^\n"
  stdout: ''
  timestamp: 1659824588
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    if x % 2 == 0 && y % 2 == 0 {\n        return (x\
    \ * y) / 2\n    }\n    if x % 2 == 0 {\n        return x / 2\n    }\n    if y\
    \ % 2 == 0 {\n        return y / 2\n    }\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp7d1re449/tmp7d1re449.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae43115cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae430e53b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae430e53988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae430e527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d1re449                        0x0000562ca491024d <unavailable> + 4685

    5    libc.so.6                          0x00002ae431348460 __libc_start_main +
    245

    6    tmp7d1re449                        0x0000562ca490fef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824586
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    var x = x - 1\n    var y = y - 1\n\
    \    while x >= y {\n        if x % 2 == 0 && y % 2 == 0 {\n            result\
    \ = x\n            break\n        }\n        x /= 2\n        y /= 2\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp79vulrxk/tmp79vulrxk.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e4acbcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e4a9b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e4a9b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e4a9b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp79vulrxk                        0x000055e714cf524d <unavailable> + 4685

    5    libc.so.6                          0x00002b5e4aea8460 __libc_start_main +
    245

    6    tmp79vulrxk                        0x000055e714cf4ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824586
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    var x = abs(x)\n    var y = abs(y)\n\
    \    var x_even = x % 2 == 0\n    var y_even = y % 2 == 0\n    if x_even && y_even\
    \ {\n        if x == y {\n            result = x\n        } else {\n         \
    \   var x_odd = x % 2 == 1\n            var y_odd = y % 2 == 1\n            if\
    \ x_odd && y_odd {\n                if x == y {\n                    result =\
    \ x\n                } else {\n                    result = y\n              \
    \  }\n            } else {\n                if x == y {\n                    result\
    \ = x\n                } else {\n                    result = y\n            \
    \    }\n            }\n        }\n    } else {\n        if x == y {\n        \
    \    result = x\n        } else {\n            result = y\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp_wa6aynh/tmp_wa6aynh.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae48e151c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae48de48b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae48de48988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae48de477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_wa6aynh                        0x0000560195a2033d <unavailable> + 4925

    5    libc.so.6                          0x00002ae48e33d460 __libc_start_main +
    245

    6    tmp_wa6aynh                        0x0000560195a1ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824588
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x < y {\n        return -1\n    }\n    var result =\
    \ x\n    var remainder = y\n    while remainder > 0 {\n        if remainder %\
    \ 2 == 0 {\n            result = result + 1\n        }\n        remainder = remainder\
    \ / 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpurcq9g8k/tmpurcq9g8k.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b523425ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5233f51b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5233f51988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5233f507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpurcq9g8k                        0x000056315334d24d <unavailable> + 4685

    5    libc.so.6                          0x00002b5234446460 __libc_start_main +
    245

    6    tmpurcq9g8k                        0x000056315334cef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824588
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    var x = x - 1\n    var y = y - 1\n\
    \    while x >= y {\n        if x % 2 == 0 && y % 2 == 0 {\n            result\
    \ = x\n            break\n        }\n        x /= 2\n        y /= 2\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp79vulrxk/tmp79vulrxk.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e4acbcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e4a9b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e4a9b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e4a9b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp79vulrxk                        0x000055e714cf524d <unavailable> + 4685

    5    libc.so.6                          0x00002b5e4aea8460 __libc_start_main +
    245

    6    tmp79vulrxk                        0x000055e714cf4ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824586
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    if x % 2 == 0 && y % 2 == 0 {\n        return (x\
    \ * y) / 2\n    }\n    if x % 2 == 0 {\n        return x / 2\n    }\n    if y\
    \ % 2 == 0 {\n        return y / 2\n    }\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp7d1re449/tmp7d1re449.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae43115cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae430e53b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae430e53988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae430e527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d1re449                        0x0000562ca491024d <unavailable> + 4685

    5    libc.so.6                          0x00002ae431348460 __libc_start_main +
    245

    6    tmp7d1re449                        0x0000562ca490fef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824586
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var even: Int = 0\n    var odd: Int = 0\n    var x: Int\n\
    \    var y: Int\n    for (x = y; x > 0; x--) { \n        for (y = 0; y > 0; y--)\
    \ { \n            if ((x % 2) == 0) {\n                even = even * x + y\n \
    \           } else {\n                odd = odd * x + y\n            }\n     \
    \   }\n    }\n    if even > odd {\n        return even\n    } else {\n       \
    \ return odd\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp21h8knzq.swift:13:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for (x = y; x > 0; x--) { \n    ^   ~~~~~~~~~~~~~~~~~~~\n/tmp/tmp21h8knzq.swift:14:9:\
    \ error: C-style for statement has been removed in Swift 3\n        for (y = 0;\
    \ y > 0; y--) { \n        ^   ~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824588
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x <= y {\n        return -1\n    }\n    \n    var even:\
    \ Int = 0\n    var odd: Int = 0\n    \n    for n in 1...y {\n        if x % n\
    \ == 0 {\n            even = even * n + n\n        }\n        else {\n       \
    \     odd = odd * n + n\n        }\n    }\n    \n    if even > y {\n        return\
    \ even\n    }\n    \n    return odd\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: Exception
  stderr: 'tmpx81rc_rm/tmpx81rc_rm.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acfc21e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acfc1ed7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acfc1ed7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acfc1ed67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx81rc_rm                        0x0000558aa906d33d <unavailable> + 4925

    5    libc.so.6                          0x00002acfc23cc460 __libc_start_main +
    245

    6    tmpx81rc_rm                        0x0000558aa906cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824588
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var even: Int = 0\n    var odd: Int = 0\n    var biggest:\
    \ Int = 0\n    \n    if x > y {\n        biggest = y\n        even = x - y\n \
    \   } else {\n        biggest = x\n        even = y - x\n    }\n    \n    if even\
    \ > 0 {\n        biggest = biggest + even\n    }\n    \n    if odd > 0 {\n   \
    \     biggest = biggest + odd\n    }\n    \n    return biggest\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpz9odjxzz/tmpz9odjxzz.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8206b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad8203adb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad8203ad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad8203ac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz9odjxzz                        0x000055587b61a1bd <unavailable> + 4541

    5    libc.so.6                          0x00002ad8208a2460 __libc_start_main +
    245

    6    tmpz9odjxzz                        0x000055587b619e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824588
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x < y {\n        return choose_num(y, x)\n    }\n \
    \   \n    var even: Int = 0\n    var odd: Int = 0\n    \n    for i in 0..<(x-y)\
    \ {\n        if x % 2 == 0 {\n            even += y\n        } else {\n      \
    \      odd += y\n        }\n    }\n    \n    if even > odd {\n        return even\n\
    \    } else {\n        return odd\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp9v7hur9v.swift:10:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(y, x)\n                         ^\n        \
    \                  x: y: \n"
  stdout: ''
  timestamp: 1659824588
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    var even: Int = 0\n    var odd: Int = 0\n    var\
    \ x: Int = 0\n    var y: Int = 0\n    for _ in 0..<(x-y) {\n        x = rand.Int()\n\
    \        y = rand.Int()\n        if x % 2 == 0 && y % 2 == 0 {\n            even\
    \ = even + x\n            odd = odd + y\n        }\n    }\n    if even > odd {\n\
    \        return even\n    } else {\n        return odd\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpzh4k4zfm.swift:20:13: error: cannot find 'rand' in scope\n    \
    \    x = rand.Int()\n            ^~~~\n/tmp/tmpzh4k4zfm.swift:21:13: error: cannot\
    \ find 'rand' in scope\n        y = rand.Int()\n            ^~~~\n"
  stdout: ''
  timestamp: 1659824588
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    var x = abs(x)\n    var y = abs(y)\n\
    \    if x > y {\n        result = x\n    } else {\n        result = y\n    }\n\
    \    if result > 0 {\n        if result % 2 == 0 {\n            return result\n\
    \        } else {\n            return -1\n        }\n    } else {\n        if\
    \ result % 2 == 0 {\n            return -1\n        } else {\n            return\
    \ result\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp__036w8d/tmp__036w8d.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab36f69ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab36f391b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab36f391988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab36f3907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__036w8d                        0x0000559f7b62733d <unavailable> + 4925

    5    libc.so.6                          0x00002ab36f886460 __libc_start_main +
    245

    6    tmp__036w8d                        0x0000559f7b626fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824588
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    if x % 2 == 0 {\n        return choose_num(x / 2,\
    \ y)\n    }\n    if y % 2 == 0 {\n        return choose_num(x, y / 2)\n    }\n\
    \    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpy6fjfrvj.swift:16:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(x / 2, y)\n                         ^\n    \
    \                      x:     y: \n/tmp/tmpy6fjfrvj.swift:19:26: error: missing\
    \ argument labels 'x:y:' in call\n        return choose_num(x, y / 2)\n      \
    \                   ^\n                          x: y: \n"
  stdout: ''
  timestamp: 1659824587
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    if x > y {\n        result = x\n\
    \    } else {\n        result = y\n    }\n    \n    for _ in 0..<(x-y) {\n   \
    \     if result % 2 == 0 {\n            result = result / 2\n        } else {\n\
    \            result = result * 3 + 1\n        }\n    }\n    \n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ae06a2b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae069fb0561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae069fb0286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae069fb013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae069fafbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpq02ka5r0                        0x000055800e179808 <unavailable> + 6152

    6    tmpq02ka5r0                        0x000055800e1792d0 <unavailable> + 4816

    7    libc.so.6                          0x00002ae06a4a5460 __libc_start_main +
    245

    8    tmpq02ka5r0                        0x000055800e178fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824587
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    if x % 2 == 0 {\n        return choose_num(x / 2,\
    \ y)\n    }\n    if y % 2 == 0 {\n        return choose_num(x, y / 2)\n    }\n\
    \    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpy6fjfrvj.swift:16:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(x / 2, y)\n                         ^\n    \
    \                      x:     y: \n/tmp/tmpy6fjfrvj.swift:19:26: error: missing\
    \ argument labels 'x:y:' in call\n        return choose_num(x, y / 2)\n      \
    \                   ^\n                          x: y: \n"
  stdout: ''
  timestamp: 1659824587
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    if x % 2 == 0 && y % 2 == 0 {\n        return (x\
    \ * y) / 2\n    }\n    if x % 2 == 0 {\n        return x / 2\n    }\n    if y\
    \ % 2 == 0 {\n        return y / 2\n    }\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp7d1re449/tmp7d1re449.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae43115cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae430e53b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae430e53988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae430e527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d1re449                        0x0000562ca491024d <unavailable> + 4685

    5    libc.so.6                          0x00002ae431348460 __libc_start_main +
    245

    6    tmp7d1re449                        0x0000562ca490fef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824586
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    if x % 2 == 0 && y % 2 == 0 {\n        return x\
    \ + (y - x) / 2\n    }\n    if x % 2 == 0 && y % 2 != 0 {\n        return -1\n\
    \    }\n    if x % 2 != 0 && y % 2 == 0 {\n        return -1\n    }\n    if x\
    \ % 2 != 0 && y % 2 != 0 {\n        return x + (y - x) / 2\n    }\n    return\
    \ -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\n\
    assert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) ==\
    \ 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x: 6,\
    \ y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp2zc_5m84/tmp2zc_5m84.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b601369fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6013396b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6013396988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b60133957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2zc_5m84                        0x0000562d5355524d <unavailable> + 4685

    5    libc.so.6                          0x00002b601388b460 __libc_start_main +
    245

    6    tmp2zc_5m84                        0x0000562d53554ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824588
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x > y {\n        (x, y) = (y, x)\n    }\n    \n   \
    \ var result: Int = 0\n    \n    for _ in 0..<(x-y) {\n        result += 2\n \
    \   }\n    \n    if result > x {\n        result = x\n    }\n    \n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpfn7ksflf.swift:10:10: error: cannot assign to value: 'x' is a 'let'\
    \ constant\n        (x, y) = (y, x)\n         ^\n/tmp/tmpfn7ksflf.swift:10:13:\
    \ error: cannot assign to value: 'y' is a 'let' constant\n        (x, y) = (y,\
    \ x)\n            ^\n"
  stdout: ''
  timestamp: 1659824588
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    if x % 2 == 0 && y % 2 == 0 {\n        return (x\
    \ * y) / 2\n    }\n    if x % 2 == 0 {\n        return x / 2\n    }\n    if y\
    \ % 2 == 0 {\n        return y / 2\n    }\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp7d1re449/tmp7d1re449.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae43115cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae430e53b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae430e53988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae430e527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d1re449                        0x0000562ca491024d <unavailable> + 4685

    5    libc.so.6                          0x00002ae431348460 __libc_start_main +
    245

    6    tmp7d1re449                        0x0000562ca490fef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824586
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x < y {\n        return -1\n    }\n    \n    var result\
    \ = x\n    \n    for _ in 0..<y {\n        if result % 2 == 0 {\n            result\
    \ = result / 2\n        } else {\n            return -1\n        }\n    }\n  \
    \  \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp69y00k58/tmp69y00k58.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6827575c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b682726cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b682726c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b682726b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp69y00k58                        0x00005588040e233d <unavailable> + 4925

    5    libc.so.6                          0x00002b6827761460 __libc_start_main +
    245

    6    tmp69y00k58                        0x00005588040e1fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824587
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x < y {\n        return choose_num(y, x)\n    }\n \
    \   if x == y {\n        return x\n    }\n    if x % 2 == 0 && y % 2 == 0 {\n\
    \        return x + y\n    }\n    if x % 2 == 0 {\n        return y\n    }\n \
    \   return x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpe2suqkwh.swift:10:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(y, x)\n                         ^\n        \
    \                  x: y: \n"
  stdout: ''
  timestamp: 1659824588
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x <= y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    if x <= y {\n        return -1\n    }\n    if x\
    \ == y {\n        return x\n    }\n    if x <= y {\n        return -1\n    }\n\
    \    if x == y {\n        return x\n    }\n    if x <= y {\n        return -1\n\
    \    }\n    if x == y {\n        return x\n    }\n    if x <= y {\n        return\
    \ -1\n    }\n    if x == y {\n        return x\n    }\n    if x <= y {\n     \
    \   return -1\n    }\n    if x == y {\n        return x\n    }\n    if x <= y\
    \ {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if\
    \ x <= y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n\
    \    if x <= y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    if x <= y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x <= y {\n        return -1\n    }\n    if x == y {\n     \
    \   return x\n    }\n    if x <= y {\n        return -1\n    }\n    if x == y\
    \ {\n        return x\n    }\n    if x <= y {\n        return -1\n    }\n    if\
    \ x == y {\n        return x\n    }\n    if x <= y {\n        return -1\n    }\n\
    \    if x == y {\n        return x\n    }\n    if x <= y {\n        return -1\n\
    \    }\n    if x == y {\n        return x\n    }\n    if x <= y {\n        return\
    \ -1\n    }\n    if x == y {\n        return x\n    }\n    if x <= y {\n     \
    \   return -1\n    }\n    if x == y {\n        return x\n    }\n    if x <= y\
    \ {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n    if\
    \ x <= y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n\
    \    if x <= y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    if x <= y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x <= y {\n        return -1\n    }\n    if x == y {\n     \
    \   return x\n    }\n    if x <= y {\n        return -1\n    }\n    if x == y\
    \ {\n        return x\n    }\n    if x <= y {\n        return -1\n    }\n    if\
    \ x == y {\n        return x\n    }\n    if x <= y {\n        return -1\n    }\n\
    \    if x == y {\n        return x\n    }\n    if x <= y {\n        return -1\n\
    \    }\n    if x == y {\n        return x\n    }\n    if x <= y {\n        return\
    \ -1\n    }\n    if x == y {\n        return x\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13,\
    \ y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: '/tmp/tmpmmrlrfux.swift:171:1: error: missing return in global function
    expected to return ''Int''

    }

    ^

    '
  stdout: ''
  timestamp: 1659824588
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    var xMin = x\n    var xMax = y\n\
    \    var yMin = y\n    var yMax = x\n    \n    while xMin <= xMax && yMin <= yMax\
    \ {\n        if (xMin + yMin == xMax + yMax) {\n            result = xMin + yMin\n\
    \            break\n        }\n        if (xMin + yMin > xMax + yMax) {\n    \
    \        yMax = xMax + yMax - xMin + yMin\n        } else {\n            xMin\
    \ = xMin + xMax - xMin + yMin\n        }\n    }\n    \n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpdmsyjw1x/tmpdmsyjw1x.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4a360ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4a3301b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4a3301988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4a33007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdmsyjw1x                        0x0000564027fe81bd <unavailable> + 4541

    5    libc.so.6                          0x00002ae4a37f6460 __libc_start_main +
    245

    6    tmpdmsyjw1x                        0x0000564027fe7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824588
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    if x > y {\n        (x, y) = (y,\
    \ x)\n    }\n    for number in stride(from: x, through: y, by: 2) {\n        if\
    \ number % 2 == 0 {\n            if number > result {\n                result\
    \ = number\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpi8w1q2l_.swift:11:10: error: cannot assign to value: 'x' is a 'let'\
    \ constant\n        (x, y) = (y, x)\n         ^\n/tmp/tmpi8w1q2l_.swift:11:13:\
    \ error: cannot assign to value: 'y' is a 'let' constant\n        (x, y) = (y,\
    \ x)\n            ^\n"
  stdout: ''
  timestamp: 1659824588
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n\
    \        return x\n    }\n    var even: Int = 0\n    var odd: Int = 0\n    var\
    \ x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    \n    for z in 0..<y\
    \ {\n        x = x + 1\n        y = y + 1\n        if x % 2 == 0 {\n         \
    \   even = even + 1\n        }\n        if y % 2 == 0 {\n            odd = odd\
    \ + 1\n        }\n        if even > odd {\n            return even\n        }\n\
    \        if odd > even {\n            return odd\n        }\n    }\n    return\
    \ -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\n\
    assert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) ==\
    \ 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x: 6,\
    \ y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpij70e2s6/tmpij70e2s6.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d7488bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d74582b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d74582988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d745817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpij70e2s6                        0x00005583a657d33d <unavailable> + 4925

    5    libc.so.6                          0x00002b4d74a77460 __libc_start_main +
    245

    6    tmpij70e2s6                        0x00005583a657cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824588
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    var x = abs(x)\n    var y = abs(y)\n\
    \    var xMinusY = x - y\n    if xMinusY > 0 {\n        result = x\n    } else\
    \ {\n        result = y\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13,\
    \ y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpzzio1ya8/tmpzzio1ya8.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0e31099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0e30d90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0e30d90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0e30d8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzzio1ya8                        0x000055964306a2ad <unavailable> + 4781

    5    libc.so.6                          0x00002b0e31285460 __libc_start_main +
    245

    6    tmpzzio1ya8                        0x0000559643069f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1659824588
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    var x = abs(x)\n    var y = abs(y)\n\
    \    var x_even = x % 2 == 0\n    var y_even = y % 2 == 0\n    if x_even && y_even\
    \ {\n        if x > y {\n            result = x\n        } else {\n          \
    \  result = y\n        }\n    } else if x_even {\n        result = x\n    } else\
    \ if y_even {\n        result = y\n    } else {\n        if x > y {\n        \
    \    result = x\n        } else {\n            result = y\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpadfy3815/tmpadfy3815.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3428fb0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3428ca7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3428ca7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3428ca67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpadfy3815                        0x00005654e878133d <unavailable> + 4925

    5    libc.so.6                          0x00002b342919c460 __libc_start_main +
    245

    6    tmpadfy3815                        0x00005654e8780fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824588
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x <= y {\n        return -1\n    }\n    var even =\
    \ Int()\n    var odd = Int()\n    var result = Int()\n    for var i = x; i <=\
    \ y; i++ {\n        if i % 2 == 0 {\n            even = i\n        } else {\n\
    \            odd = i\n        }\n        if even > odd {\n            result =\
    \ even\n        } else {\n            result = odd\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpr7hgdtu7.swift:15:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = x; i <= y; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824588
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x <= y {\n        return -1\n    }\n    var even: Int\
    \ = 0\n    var odd: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    \n  \
    \  while x < y {\n        if x % 2 == 0 {\n            even = even + x\n     \
    \   }\n        else {\n            odd = odd + x\n        }\n        x = x + 1\n\
    \    }\n    \n    if even > odd {\n        return even\n    }\n    else {\n  \
    \      return odd\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpjats38hm/tmpjats38hm.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae0e9f6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae0e9c65b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae0e9c65988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae0e9c647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjats38hm                        0x000055bf591bd24d <unavailable> + 4685

    5    libc.so.6                          0x00002ae0ea15a460 __libc_start_main +
    245

    6    tmpjats38hm                        0x000055bf591bcef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824588
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var even: Int = 0\n    var odd: Int = 0\n    var biggest:\
    \ Int = -1\n\n    if x < y {\n        for _ in 0..<(x-y) {\n            even +=\
    \ 2\n        }\n        for _ in 0..<(y-x) {\n            odd += 2\n        }\n\
    \    } else {\n        for _ in 0..<(y-x) {\n            even += 2\n        }\n\
    \        for _ in 0..<(x-y) {\n            odd += 2\n        }\n    }\n\n    if\
    \ even > odd {\n        biggest = even\n    } else {\n        biggest = odd\n\
    \    }\n\n    return biggest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b93540e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9353dd7561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b9353dd7286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b9353dd713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b9353dd6bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpk7dx6eka                        0x000055c36efbd890 <unavailable> + 6288

    6    tmpk7dx6eka                        0x000055c36efbd2d0 <unavailable> + 4816

    7    libc.so.6                          0x00002b93542cc460 __libc_start_main +
    245

    8    tmpk7dx6eka                        0x000055c36efbcfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824588
