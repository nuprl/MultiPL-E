name: HumanEval_104_unique_digits
language: swift
prompt: "\n/// Given a list of positive integers x. return a sorted list of all \n\
  /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
  \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422, 1])\n\
  /// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\nfunc unique_digits(x:\
  \ [Int]) -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1,\
  \ 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
  \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31])\
  \ == [31, 135])"
completions: ["    var result = [Int]()\n    var i = 0\n    for n in x {\n       \
    \ if n % 10 == 0 {\n            result.append(n)\n        }\n    }\n    for n\
    \ in result {\n        if n % 2 == 0 {\n            result.remove(n)\n       \
    \ }\n    }\n    return result", "    var result = [Int]()\n    var evenDigits\
    \ = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n            evenDigits.append(n)\n\
    \        } else {\n            if evenDigits.contains(n) == false {\n        \
    \        result.append(n)\n            }\n        }\n    }\n    return result",
  "    var result = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n         \
    \   result.append(n)\n        }\n    }\n    result.sort()\n    return result",
  "    var result = [Int]()\n    var i = 0\n    for num in x {\n        if num % 2\
    \ == 0 {\n            result.append(num)\n        }\n    }\n    for num in result\
    \ {\n        if num % 2 != 0 {\n            i += 1\n        }\n    }\n    return\
    \ result.sorted(by: {$0 < $1})", "    var result = [Int]()\n    var index = 0\n\
    \    for n in x {\n        if n % 2 == 0 {\n            result[index] = n\n  \
    \          index += 1\n        }\n    }\n    return result", "    var result =\
    \ [Int]()\n    var i = 0\n    for n in x {\n        if n % 10 == 0 {\n       \
    \     result.append(n)\n        }\n    }\n    for n in result {\n        if n\
    \ % 2 == 0 {\n            result.remove(n)\n        }\n    }\n    return result",
  "    var result = [Int]()\n    var evenDigit = [Int]()\n    for n in x {\n     \
    \   if n % 2 == 0 {\n            evenDigit.append(n)\n        } else {\n     \
    \       for d in evenDigit {\n                if d == n {\n                  \
    \  result.append(n)\n                    break\n                }\n          \
    \  }\n        }\n    }\n    return result", "    var result = [Int]()\n    var\
    \ i = 0\n    for v in x {\n        if i % 2 == 0 {\n            result.append(v)\n\
    \        }\n        i += 1\n    }\n    return result", "    var result = [Int]()\n\
    \    var last: Int = 0\n    for n in x {\n        if n % 10 == 0 {\n         \
    \   last = last * 10 + n\n        } else {\n            if last > 0 {\n      \
    \          result.append(last)\n            }\n            last = n\n        }\n\
    \    }\n    if last > 0 {\n        result.append(last)\n    }\n    return result",
  "    var result = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n         \
    \   result.append(n)\n        }\n    }\n    result.sort()\n    return result",
  "    var result = [Int]()\n    var even = [Int]()\n    for n in x {\n        if\
    \ n % 2 == 0 {\n            even.append(n)\n        } else {\n            if even.contains(n)\
    \ {\n                continue\n            }\n            result.append(n)\n \
    \       }\n    }\n    return result", "    var result = [Int]()\n    var evenDigit\
    \ = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n            evenDigit.append()\n\
    \        } else {\n            result.append(n)\n        }\n    }\n    for n in\
    \ evenDigit {\n        result.remove(n)\n    }\n    return result", "    var result\
    \ = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        }\n    }\n    result.sort()\n    return result", "    var result = [Int]()\n\
    \    var evenDigitCount = 0\n    for element in x {\n        if element % 2 ==\
    \ 0 {\n            evenDigitCount += 1\n        }\n    }\n    for element in x\
    \ {\n        if element % 2 != 0 && evenDigitCount > 0 {\n            result.append(element)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    for n in\
    \ x {\n        if n % 2 == 0 {\n            result.append(n)\n        }\n    }\n\
    \    result.sort()\n    return result", "    var result = [Int]()\n    var i =\
    \ 0\n    for num in x {\n        if num % 2 == 0 {\n            result.append(num)\n\
    \        }\n    }\n    for num in x {\n        if num % 2 != 0 {\n           \
    \ i += 1\n        }\n    }\n    for num in result {\n        if num % 2 != 0 {\n\
    \            result.removeLast()\n        }\n    }\n    return result", "    var\
    \ result = [Int]()\n    var index = 0\n    for n in x {\n        if n % 2 == 0\
    \ {\n            result[index] = n\n            index++\n        }\n    }\n  \
    \  result.sort()\n    return result", "    var result = [Int]()\n    var i = 0\n\
    \    for num in x {\n        if num % 2 == 0 {\n            result.append(num)\n\
    \        }\n    }\n    for num in result {\n        if num % 2 != 0 {\n      \
    \      i += 1\n        }\n    }\n    return result.sorted()", "    var result\
    \ = [Int]()\n    var evenDigits = [Int]()\n    for n in x {\n        if n % 2\
    \ == 0 {\n            evenDigits.append(n)\n        } else {\n            for\
    \ e in evenDigits {\n                if e == n {\n                    break\n\
    \                }\n            }\n            if !result.contains(n) {\n    \
    \            result.append(n)\n            }\n        }\n    }\n    return result",
  "    var result = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n         \
    \   result.append(n)\n        }\n    }\n    result.sort()\n    return result"]
stop_tokens:
- "\n}"
