language: swift
name: HumanEval_91_is_bored
results:
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    var count = 0\n    for s in S.split(separator: \".?!\") {\n        if s.starts(with:\
    \ \"I\") {\n            count += 1\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmpgk7eepz_/tmpgk7eepz_.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb510dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb50dd5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb50dd5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb50dd47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgk7eepz_                        0x000056348235a72b <unavailable> + 5931

    5    libc.so.6                          0x00002acb512ca460 __libc_start_main +
    245

    6    tmpgk7eepz_                        0x000056348235a309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.components(separatedBy: \".?!\")\n        .filter({ $0.hasPrefix(\"\
    I\") })\n        .count\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp6lv1pewq.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\")\n      \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    return is_bored_helper(S, \"\", 0, 0, 0)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpjqd71s0g.swift:11:12: error: cannot find 'is_bored_helper' in scope\n\
    \    return is_bored_helper(S, \"\", 0, 0, 0)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    var count = 0\n    for s in S.split(separator: \".?!\") {\n        if s.starts(with:\
    \ \"I\") {\n            count += 1\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmpgk7eepz_/tmpgk7eepz_.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb510dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb50dd5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb50dd5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb50dd47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgk7eepz_                        0x000056348235a72b <unavailable> + 5931

    5    libc.so.6                          0x00002acb512ca460 __libc_start_main +
    245

    6    tmpgk7eepz_                        0x000056348235a309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    return is_bored_impl(S, \"\")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp728az053.swift:11:12: error: cannot find 'is_bored_impl' in scope\n\
    \    return is_bored_impl(S, \"\")\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.split(separator: \".?!\").filter({ $0.hasPrefix(\"I\") }).count\n\
    \    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmp4vtmcr76/tmp4vtmcr76.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba478e87c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba478b7eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba478b7e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba478b7d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4vtmcr76                        0x00005648a690a66b <unavailable> + 5739

    5    libc.so.6                          0x00002ba479073460 __libc_start_main +
    245

    6    tmp4vtmcr76                        0x00005648a690a249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"\
    I\")}\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpddmwe37w.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"\
    I\")}\n                   ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    var boredoms = 0\n    for s in S.split(separator: \".?!\") {\n        if\
    \ s.starts(with: \"I\") {\n            boredoms += 1\n        }\n    }\n    return\
    \ boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello\
    \ world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpia98daa8/tmpia98daa8.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b60acbaec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b60ac8a5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b60ac8a5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b60ac8a47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpia98daa8                        0x000055a7c40d972b <unavailable> + 5931

    5    libc.so.6                          0x00002b60acd9a460 __libc_start_main +
    245

    6    tmpia98daa8                        0x000055a7c40d9309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659824531
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    var count = 0\n    for s in S.split(separator: \".,?!\") {\n        if s.starts(with:\
    \ \"I\") {\n            count += 1\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmpu7imi01z/tmpu7imi01z.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac2668d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac2665ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac2665ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac2665cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu7imi01z                        0x0000560f2ff4672b <unavailable> + 5931

    5    libc.so.6                          0x00002ac266ac3460 __libc_start_main +
    245

    6    tmpu7imi01z                        0x0000560f2ff46309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.components(separatedBy: \".?!\")\n    return boredoms.count\
    \ { $0.hasPrefix(\"I\") }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp444vx7ra.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\")\n      \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    return is_bored_helper(S, \"\", 0, 0, 0)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpjqd71s0g.swift:11:12: error: cannot find 'is_bored_helper' in scope\n\
    \    return is_bored_helper(S, \"\", 0, 0, 0)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.components(separatedBy: \".?!\")\n        .filter{$0.hasPrefix(\"\
    I\")}\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp3eesug5p.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\")\n      \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    var bored = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n\
    \    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n \
    \   var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n  \
    \  var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var A = 0\n   \
    \ var B = 0\n    var C = 0\n    var D = 0\n    var E = 0\n    var F = 0\n    var\
    \ G = 0\n    var H = 0\n    var I = 0\n    var J = 0\n    var K = 0\n    var L\
    \ = 0\n    var M = 0\n    var N = 0\n    var O = 0\n    var P = 0\n    var Q =\
    \ 0\n    var R = 0\n    var S = 0\n    var T = 0\n    var U = 0\n    var V = 0\n\
    \    var W = 0\n    var X = 0\n    var Y = 0\n    var Z = 0\n    var a = 0\n \
    \   var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n  \
    \  var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n   \
    \ var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var\
    \ q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v\
    \ = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var A =\
    \ 0\n    var B = 0\n    var C = 0\n    var D = 0\n    var E = 0\n    var F = 0\n\
    \    var G = 0\n    var H = 0\n    var I = 0\n    var J = 0\n    var K = 0\n \
    \   var L = 0\n    var M = 0\n    var N = 0\n    var O = 0\n    var P = 0\n  \
    \  var Q = 0\n    var R = 0\n    var S = 0\n    var T = 0\n    var U = 0\n   \
    \ var V = 0\n    var W = 0\n    var X = 0\n    var Y = 0\n    var Z = 0\n    var\
    \ a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f\
    \ = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k =\
    \ 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n\
    \    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n \
    \   var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n  \
    \  var A = 0\n    var B = 0\n    var C = 0\n    var D = 0\n    var E = 0\n   \
    \ var F = 0\n    var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp7cp18kh4.swift:140:8: error: expected pattern\n    var \n     \
    \  ^\n/tmp/tmp7cp18kh4.swift:64:9: error: invalid redeclaration of 'i'\n    var\
    \ i = 0\n        ^\n/tmp/tmp7cp18kh4.swift:12:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmp7cp18kh4.swift:65:9: error: invalid\
    \ redeclaration of 'j'\n    var j = 0\n        ^\n/tmp/tmp7cp18kh4.swift:13:9:\
    \ note: 'j' previously declared here\n    var j = 0\n        ^\n/tmp/tmp7cp18kh4.swift:66:9:\
    \ error: invalid redeclaration of 'k'\n    var k = 0\n        ^\n/tmp/tmp7cp18kh4.swift:14:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmp7cp18kh4.swift:67:9:\
    \ error: invalid redeclaration of 'l'\n    var l = 0\n        ^\n/tmp/tmp7cp18kh4.swift:15:9:\
    \ note: 'l' previously declared here\n    var l = 0\n        ^\n/tmp/tmp7cp18kh4.swift:68:9:\
    \ error: invalid redeclaration of 'm'\n    var m = 0\n        ^\n/tmp/tmp7cp18kh4.swift:16:9:\
    \ note: 'm' previously declared here\n    var m = 0\n        ^\n/tmp/tmp7cp18kh4.swift:69:9:\
    \ error: invalid redeclaration of 'n'\n    var n = 0\n        ^\n/tmp/tmp7cp18kh4.swift:17:9:\
    \ note: 'n' previously declared here\n    var n = 0\n        ^\n/tmp/tmp7cp18kh4.swift:70:9:\
    \ error: invalid redeclaration of 'o'\n    var o = 0\n        ^\n/tmp/tmp7cp18kh4.swift:18:9:\
    \ note: 'o' previously declared here\n    var o = 0\n        ^\n/tmp/tmp7cp18kh4.swift:71:9:\
    \ error: invalid redeclaration of 'p'\n    var p = 0\n        ^\n/tmp/tmp7cp18kh4.swift:19:9:\
    \ note: 'p' previously declared here\n    var p = 0\n        ^\n/tmp/tmp7cp18kh4.swift:72:9:\
    \ error: invalid redeclaration of 'q'\n    var q = 0\n        ^\n/tmp/tmp7cp18kh4.swift:20:9:\
    \ note: 'q' previously declared here\n    var q = 0\n        ^\n/tmp/tmp7cp18kh4.swift:73:9:\
    \ error: invalid redeclaration of 'r'\n    var r = 0\n        ^\n/tmp/tmp7cp18kh4.swift:21:9:\
    \ note: 'r' previously declared here\n    var r = 0\n        ^\n/tmp/tmp7cp18kh4.swift:74:9:\
    \ error: invalid redeclaration of 's'\n    var s = 0\n        ^\n/tmp/tmp7cp18kh4.swift:22:9:\
    \ note: 's' previously declared here\n    var s = 0\n        ^\n/tmp/tmp7cp18kh4.swift:75:9: "
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    guard S.count > 0 else {\n        return 0\n    }\n    var bored = 0\n  \
    \  var last = 0\n    for c in S {\n        if c == '.' || c == '?' || c == '!'\
    \ {\n            bored++\n        }\n        if last == c {\n            bored++\n\
    \        }\n        last = c\n    }\n    return bored\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpr3d44fda.swift:17:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '.' || c == '?' || c == '!' {\n                ^~~\n\
    \                \".\"\n/tmp/tmpr3d44fda.swift:17:29: error: single-quoted string\
    \ literal found, use '\"'\n        if c == '.' || c == '?' || c == '!' {\n   \
    \                         ^~~\n                            \"?\"\n/tmp/tmpr3d44fda.swift:17:41:\
    \ error: single-quoted string literal found, use '\"'\n        if c == '.' ||\
    \ c == '?' || c == '!' {\n                                        ^~~\n      \
    \                                  \"!\"\n/tmp/tmpr3d44fda.swift:18:18: error:\
    \ cannot find operator '++' in scope; did you mean '+= 1'?\n            bored++\n\
    \                 ^~\n/tmp/tmpr3d44fda.swift:20:17: error: binary operator '=='\
    \ cannot be applied to operands of type 'Int' and 'Character'\n        if last\
    \ == c {\n           ~~~~ ^  ~\n/tmp/tmpr3d44fda.swift:20:17: note: overloads\
    \ for '==' exist with these partially matching parameter lists: (Character, Character),\
    \ (Int, Int)\n        if last == c {\n                ^\n/tmp/tmpr3d44fda.swift:21:18:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  bored++\n                 ^~\n/tmp/tmpr3d44fda.swift:23:16: error: cannot assign\
    \ value of type 'Character' to type 'Int'\n        last = c\n               ^\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    \n    let boredoms = S.components(separatedBy: \".\")\n    \n    if boredoms.count\
    \ < 1 {\n        return 0\n    }\n    \n    if boredoms.first == \"I\" {\n   \
    \     return 1\n    }\n    \n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpvyi_q10i.swift:12:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".\")\n        \
    \           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.components(separatedBy: \".?!\")\n    return boredoms.filter({\
    \ $0.hasPrefix(\"I\") }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp0keth5xg.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\")\n      \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.components(separatedBy: \".?!\").filter({ $0.hasPrefix(\"\
    I\") }).count\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp6_dbrf0i.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\").filter({\
    \ $0.hasPrefix(\"I\") }).count\n                   ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.components(separatedBy: \".?!\")\n        .filter({ $0.hasPrefix(\"\
    I\") })\n        .count\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp6lv1pewq.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\")\n      \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.components(separatedBy: \".?!\")\n    return boredoms.filter({\
    \ $0.hasPrefix(\"I\") }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp0keth5xg.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\")\n      \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.components(separatedBy: \".?!\").filter{ $0.hasPrefix(\"\
    I\") }\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpj6243i99.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\").filter{\
    \ $0.hasPrefix(\"I\") }\n                   ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    var bored = 0\n    for s in S.split(separator: \".,?!\") {\n        if s.starts(with:\
    \ \"I\") {\n            bored += 1\n        }\n    }\n    return bored\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmprobb616p/tmprobb616p.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d66412c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d66109b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d66109988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d661087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprobb616p                        0x0000560d4006572b <unavailable> + 5931

    5    libc.so.6                          0x00002b8d665fe460 __libc_start_main +
    245

    6    tmprobb616p                        0x0000560d40065309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659824531
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    \n    // TODO: Write a function that takes a string and returns the number\
    \ of boredoms.\n    // HINT: Look at the string S and see if you can find the\
    \ pattern \"I love this weather\".\n    // If so, return 1, otherwise return 0.\n\
    \    \n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello\
    \ world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmps2tqfei8/tmps2tqfei8.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1dfb28fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1dfaf86b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1dfaf86988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1dfaf857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps2tqfei8                        0x000055d3b98893b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b1dfb47b460 __libc_start_main +
    245

    6    tmps2tqfei8                        0x000055d3b9888ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    return is_bored_1(S)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp3msaeeqk.swift:11:12: error: cannot find 'is_bored_1' in scope\n\
    \    return is_bored_1(S)\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.components(separatedBy: \".?!\")\n    return boredoms.filter({\
    \ $0.hasPrefix(\"I\") }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp0keth5xg.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\")\n      \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    return is_bored(S, 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp8calk8lb.swift:11:24: error: extra argument in call\n    return\
    \ is_bored(S, 0)\n                   ~~~~^~\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"\
    I\")}\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpddmwe37w.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"\
    I\")}\n                   ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    var boredoms = 0\n    for s in S.split(separator: \".?!\") {\n        if\
    \ s.starts(with: \"I\") {\n            boredoms += 1\n        }\n    }\n    return\
    \ boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello\
    \ world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpia98daa8/tmpia98daa8.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b60acbaec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b60ac8a5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b60ac8a5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b60ac8a47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpia98daa8                        0x000055a7c40d972b <unavailable> + 5931

    5    libc.so.6                          0x00002b60acd9a460 __libc_start_main +
    245

    6    tmpia98daa8                        0x000055a7c40d9309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.components(separatedBy: \".?!\")\n    return boredoms.filter({\
    \ $0.hasPrefix(\"I\") }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp0keth5xg.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\")\n      \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"\
    I\")}\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpddmwe37w.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"\
    I\")}\n                   ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.components(separatedBy: \".?!\")\n        .filter { $0.hasPrefix(\"\
    I\") }\n        .count\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp1df0txoz.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\")\n      \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.components(separatedBy: \".?!\")\n    return boredoms.filter({\
    \ $0.hasPrefix(\"I\") }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp0keth5xg.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\")\n      \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    return count_boredoms(S, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp9dhdv7ux.swift:11:12: error: cannot find 'count_boredoms' in scope\n\
    \    return count_boredoms(S, true)\n           ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    return count_boredoms(S, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp9dhdv7ux.swift:11:12: error: cannot find 'count_boredoms' in scope\n\
    \    return count_boredoms(S, true)\n           ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    var bored = 0\n    var boredom = 0\n    var boredom_count = 0\n    var boredom_word\
    \ = \"\"\n    var boredom_word_count = 0\n    var boredom_word_index = 0\n   \
    \ var boredom_word_length = 0\n    var boredom_word_start = 0\n    var boredom_word_end\
    \ = 0\n    var boredom_word_word_length = 0\n    var boredom_word_word_start =\
    \ 0\n    var boredom_word_word_end = 0\n    var boredom_word_word_word_length\
    \ = 0\n    var boredom_word_word_word_start = 0\n    var boredom_word_word_word_end\
    \ = 0\n    var boredom_word_word_word_word_length = 0\n    var boredom_word_word_word_word_start\
    \ = 0\n    var boredom_word_word_word_word_end = 0\n    var boredom_word_word_word_word_word_length\
    \ = 0\n    var boredom_word_word_word_word_word_start = 0\n    var boredom_word_word_word_word_word_word_end\
    \ = 0\n    var boredom_word_word_word_word_word_word_word_length = 0\n    var\
    \ boredom_word_word_word_word_word_word_word_start = 0\n    var boredom_word_word_word_word_word_word_word_word_end\
    \ = 0\n    var boredom_word_word_word_word_word_word_word_word_word_length = 0\n\
    \    var boredom_word_word_word_word_word_word_word_word_word_word_start = 0\n\
    \    var boredom_word_word_word_word_word_word_word_word_word_word_word_end =\
    \ 0\n    var boredom_word_word_word_word_word_word_word_word_word_word_word_word_length\
    \ = 0\n    var boredom_word_word_word_word_word_word_word_word_word_word_word_word_word_word_start\
    \ = 0\n    var boredom_word_word_word_word_word_word_word_word_word_word_word_word_word_word_end\
    \ = 0\n    var boredom_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_length\
    \ = 0\n    var boredom_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_start\
    \ = 0\n    var boredom_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_end\
    \ = 0\n    var boredom_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpcdr9y1f1.swift:44:9: error: type annotation missing in pattern\n\
    \    var boredom_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_word_\n\
    \        ^\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    guard let s = S.split(separator: \".\", maxSplit: 1).first else {\n     \
    \   return 0\n    }\n    if s.hasPrefix(\"I\") {\n        return 1\n    }\n  \
    \  return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello\
    \ world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpm6hovfow.swift:11:21: error: no exact matches in call to instance\
    \ method 'split'\n    guard let s = S.split(separator: \".\", maxSplit: 1).first\
    \ else {\n                    ^\nSwift.Sequence:2:40: note: incorrect labels for\
    \ candidate (have: '(separator:maxSplit:)', expected: '(separator:maxSplits:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n\
    \                                       ^\nSwift.Collection:2:40: note: incorrect\
    \ labels for candidate (have: '(separator:maxSplit:)', expected: '(separator:maxSplits:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659824532
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    return count_boredoms(S, \"I\")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpqjtnfl09.swift:11:12: error: cannot find 'count_boredoms' in scope\n\
    \    return count_boredoms(S, \"I\")\n           ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824532
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    var bored = 0\n    for s in S.split(separator: \".?!\") {\n        if s.starts(with:\
    \ \"I\") {\n            bored += 1\n        }\n    }\n    return bored\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmp9leg0jc7/tmp9leg0jc7.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b27f9187c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b27f8e7eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b27f8e7e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b27f8e7d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9leg0jc7                        0x00005648366c672b <unavailable> + 5931

    5    libc.so.6                          0x00002b27f9373460 __libc_start_main +
    245

    6    tmp9leg0jc7                        0x00005648366c6309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659824532
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    var count = 0\n    for s in S.split(separator: \".,?!\") {\n        if s.starts(with:\
    \ \"I\") {\n            count += 1\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmpu7imi01z/tmpu7imi01z.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac2668d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac2665ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac2665ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac2665cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu7imi01z                        0x0000560f2ff4672b <unavailable> + 5931

    5    libc.so.6                          0x00002ac266ac3460 __libc_start_main +
    245

    6    tmpu7imi01z                        0x0000560f2ff46309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    return is_bored(S, \"\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpip72m4pp.swift:11:24: error: extra argument in call\n    return\
    \ is_bored(S, \"\")\n                   ~~~~^~~\n"
  stdout: ''
  timestamp: 1659824532
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    \n    // TODO: Write a function that takes a string and returns the number\
    \ of boredoms.\n    // HINT: Look at the string S and see if you can find the\
    \ substring \"I\".\n    // If so, return the number of characters to the left\
    \ of the substring \"I\".\n    // If not, return 0.\n    \n    return 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmpdho7vxas/tmpdho7vxas.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acfa543ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acfa5131b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acfa5131988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acfa51307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdho7vxas                        0x000055c74399c3b2 <unavailable> + 5042

    5    libc.so.6                          0x00002acfa5626460 __libc_start_main +
    245

    6    tmpdho7vxas                        0x000055c74399bee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824532
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"\
    I\")}\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpddmwe37w.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"\
    I\")}\n                   ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.components(separatedBy: \".?!\").filter {\n        !$0.isEmpty\n\
    \    }.count\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp6k97014j.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\").filter {\n\
    \                   ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824532
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    guard let s = S.split(separator: \".?!\") else {\n        return 0\n    }\n\
    \    return s.filter({ $0.hasPrefix(\"I\") }).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"\
    Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpweszj1mk.swift:11:11: error: initializer for conditional binding\
    \ must have Optional type, not '[String.SubSequence]' (aka 'Array<Substring>')\n\
    \    guard let s = S.split(separator: \".?!\") else {\n          ^       ~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824532
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.components(separatedBy: \".?!\")\n    return boredoms.filter({\
    \ $0.hasPrefix(\"I\") }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp0keth5xg.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\")\n      \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"\
    I\")}\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpddmwe37w.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"\
    I\")}\n                   ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    var count = 0\n    for s in S.split(separator: \".,?!\") {\n        if s.starts(with:\
    \ \"I\") {\n            count += 1\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmpu7imi01z/tmpu7imi01z.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac2668d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac2665ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac2665ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac2665cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu7imi01z                        0x0000560f2ff4672b <unavailable> + 5931

    5    libc.so.6                          0x00002ac266ac3460 __libc_start_main +
    245

    6    tmpu7imi01z                        0x0000560f2ff46309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659824531
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    var count = 0\n    for s in S.split(separator: \".,?!\") {\n        if s.starts(with:\
    \ \"I\") {\n            count += 1\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmpu7imi01z/tmpu7imi01z.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac2668d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac2665ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac2665ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac2665cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu7imi01z                        0x0000560f2ff4672b <unavailable> + 5931

    5    libc.so.6                          0x00002ac266ac3460 __libc_start_main +
    245

    6    tmpu7imi01z                        0x0000560f2ff46309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.components(separatedBy: \".?!\")\n    return boredoms.filter{$0.hasPrefix(\"\
    I\")}.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello\
    \ world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpqozrg2l3.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\")\n      \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824532
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    \n    let boredoms = S.split(separator: \".?!\").filter({ $0.hasPrefix(\"\
    I\") }).count\n    \n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpggi4kikf/tmpggi4kikf.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad0fb53dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad0fb234b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad0fb234988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0fb2337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpggi4kikf                        0x000056035220b66b <unavailable> + 5739

    5    libc.so.6                          0x00002ad0fb729460 __libc_start_main +
    245

    6    tmpggi4kikf                        0x000056035220b249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824532
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    return is_bored_helper(S, \"\", 0, 0, 0)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpjqd71s0g.swift:11:12: error: cannot find 'is_bored_helper' in scope\n\
    \    return is_bored_helper(S, \"\", 0, 0, 0)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    var bored = 0\n    for s in S.split(separator: \".,?!\") {\n        if s.starts(with:\
    \ \"I\") {\n            bored += 1\n        }\n    }\n    return bored\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmprobb616p/tmprobb616p.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d66412c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d66109b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d66109988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d661087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprobb616p                        0x0000560d4006572b <unavailable> + 5931

    5    libc.so.6                          0x00002b8d665fe460 __libc_start_main +
    245

    6    tmprobb616p                        0x0000560d40065309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659824531
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.split(separator: \".?!\").filter({ $0.hasPrefix(\"I\") }).count\n\
    \    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmp4vtmcr76/tmp4vtmcr76.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba478e87c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba478b7eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba478b7e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba478b7d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4vtmcr76                        0x00005648a690a66b <unavailable> + 5739

    5    libc.so.6                          0x00002ba479073460 __libc_start_main +
    245

    6    tmp4vtmcr76                        0x00005648a690a249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824531
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    var boredomCount = 0\n    for s in S.split(separator: \".?!\") {\n      \
    \  if s.starts(with: \"I\") {\n            boredomCount += 1\n        }\n    }\n\
    \    return boredomCount\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpmso7l8kv/tmpmso7l8kv.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b223dd8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b223da84b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b223da84988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b223da837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmso7l8kv                        0x000056143c64a72b <unavailable> + 5931

    5    libc.so.6                          0x00002b223df79460 __libc_start_main +
    245

    6    tmpmso7l8kv                        0x000056143c64a309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659824532
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.components(separatedBy: \".?!\")\n    return boredoms.filter({\
    \ $0.hasPrefix(\"I\") }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp0keth5xg.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\")\n      \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    \n    // TODO: Write a function that takes a string and returns the number\
    \ of boredoms.\n    // HINT: Use a regular expression to find all the sentences\
    \ that start with the word \"I\".\n    // The function should return the number\
    \ of boredoms.\n    \n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmp85fcf9c8/tmp85fcf9c8.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af6d49a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af6d4698b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af6d4698988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af6d46977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp85fcf9c8                        0x000055fc3a6613b2 <unavailable> + 5042

    5    libc.so.6                          0x00002af6d4b8d460 __libc_start_main +
    245

    6    tmp85fcf9c8                        0x000055fc3a660ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824532
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.components(separatedBy: \".?!\")\n    return boredoms.filter({\
    \ $0.hasPrefix(\"I\") }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp0keth5xg.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\")\n      \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.components(separatedBy: \".?!\")\n    return boredoms.filter({\
    \ $0.hasPrefix(\"I\") }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp0keth5xg.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\")\n      \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    var boredoms = 0\n    var sentences = S.split(\".\")\n    for sentence in\
    \ sentences {\n        if sentence.startsWith(\"I\") {\n            boredoms +=\
    \ 1\n        }\n    }\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpbbg7uwmx.swift:12:23: error: no exact matches in call to instance\
    \ method 'split'\n    var sentences = S.split(\".\")\n                      ^\n\
    Swift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)', expected:\
    \ '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element,\
    \ maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n\
    \                                       ^\nSwift.Collection:2:40: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable\
    \ public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max,\
    \ omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n            \
    \                           ^\n"
  stdout: ''
  timestamp: 1659824532
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.components(separatedBy: \".?!\")\n    return boredoms.filter{$0.hasPrefix(\"\
    I\")}.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello\
    \ world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpqozrg2l3.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\")\n      \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824532
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.components(separatedBy: \".?!\")\n    return boredoms.filter({\
    \ $0.hasPrefix(\"I\") }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp0keth5xg.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\")\n      \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"\
    I\")}\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpddmwe37w.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"\
    I\")}\n                   ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"\
    I\")}\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpddmwe37w.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"\
    I\")}\n                   ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    var bored = 0\n    for s in S.split(separator: \".?!\") {\n        if s.starts(with:\
    \ \"I\") {\n            bored += 1\n        }\n    }\n    return bored\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmp9leg0jc7/tmp9leg0jc7.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b27f9187c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b27f8e7eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b27f8e7e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b27f8e7d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9leg0jc7                        0x00005648366c672b <unavailable> + 5931

    5    libc.so.6                          0x00002b27f9373460 __libc_start_main +
    245

    6    tmp9leg0jc7                        0x00005648366c6309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659824532
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.components(separatedBy: \".?!\")\n    return boredoms.filter({\
    \ $0.hasPrefix(\"I\") }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp0keth5xg.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\")\n      \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    guard let words = S.components(separatedBy: \".?!\") else {\n        return\
    \ 0\n    }\n    return words.filter({ $0.hasPrefix(\"I\") }).count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpg1m0bh8w.swift:11:25: error: value of type 'String' has no member\
    \ 'components'\n    guard let words = S.components(separatedBy: \".?!\") else\
    \ {\n                      ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824532
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    var count = 0\n    for s in S.split(separator: \".,?!\") {\n        if s.starts(with:\
    \ \"I\") {\n            count += 1\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmpu7imi01z/tmpu7imi01z.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac2668d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac2665ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac2665ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac2665cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu7imi01z                        0x0000560f2ff4672b <unavailable> + 5931

    5    libc.so.6                          0x00002ac266ac3460 __libc_start_main +
    245

    6    tmpu7imi01z                        0x0000560f2ff46309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.components(separatedBy: \".?!\")\n    return boredoms.count\
    \ { $0.hasPrefix(\"I\") }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp444vx7ra.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\")\n      \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"\
    I\")}\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpddmwe37w.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"\
    I\")}\n                   ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"\
    I\")}\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpddmwe37w.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"\
    I\")}\n                   ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.components(separatedBy: \".?!\")\n    return boredoms.filter({\
    \ $0.hasPrefix(\"I\") }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp0keth5xg.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\")\n      \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    var count = 0\n    for s in S.split(separator: \".?!\") {\n        if s.starts(with:\
    \ \"I\") {\n            count += 1\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmpgk7eepz_/tmpgk7eepz_.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb510dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb50dd5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb50dd5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb50dd47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgk7eepz_                        0x000056348235a72b <unavailable> + 5931

    5    libc.so.6                          0x00002acb512ca460 __libc_start_main +
    245

    6    tmpgk7eepz_                        0x000056348235a309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    return count_boredoms(S, false)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpbbn5mp11.swift:11:12: error: cannot find 'count_boredoms' in scope\n\
    \    return count_boredoms(S, false)\n           ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824532
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    var bored = 0\n    for s in S.split(separator: \".,?!\") {\n        if s.starts(with:\
    \ \"I\") {\n            bored += 1\n        }\n    }\n    return bored\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmprobb616p/tmprobb616p.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d66412c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d66109b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d66109988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d661087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprobb616p                        0x0000560d4006572b <unavailable> + 5931

    5    libc.so.6                          0x00002b8d665fe460 __libc_start_main +
    245

    6    tmprobb616p                        0x0000560d40065309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"\
    I\")}\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpddmwe37w.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"\
    I\")}\n                   ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    var bored = 0\n    var i = 0\n    for c in S {\n        if c == '.' || c\
    \ == '?' || c == '!' {\n            bored += 1\n        }\n        i += 1\n  \
    \  }\n    return bored\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpa70fwljs.swift:14:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '.' || c == '?' || c == '!' {\n                ^~~\n\
    \                \".\"\n/tmp/tmpa70fwljs.swift:14:29: error: single-quoted string\
    \ literal found, use '\"'\n        if c == '.' || c == '?' || c == '!' {\n   \
    \                         ^~~\n                            \"?\"\n/tmp/tmpa70fwljs.swift:14:41:\
    \ error: single-quoted string literal found, use '\"'\n        if c == '.' ||\
    \ c == '?' || c == '!' {\n                                        ^~~\n      \
    \                                  \"!\"\n"
  stdout: ''
  timestamp: 1659824532
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    var bored = 0\n    var i = 0\n    for c in S {\n        switch c {\n    \
    \    case \"I\":\n            bored += 1\n        case \"!\", \"?\", \".\":\n\
    \            i += 1\n            if i == 3 {\n                bored += 1\n   \
    \             i = 0\n            }\n        }\n    }\n    return bored\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpzolmz2kz.swift:14:9: error: switch must be exhaustive\n       \
    \ switch c {\n        ^\n/tmp/tmpzolmz2kz.swift:14:9: note: do you want to add\
    \ a default clause?\n        switch c {\n        ^\n"
  stdout: ''
  timestamp: 1659824532
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.components(separatedBy: \".?!\")\n    return boredoms.filter{$0.starts(with:\
    \ \"I\")}.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello\
    \ world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpb66y3t9p.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\")\n      \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824532
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    var count = 0\n    for s in S.split(separator: \".?!\") {\n        if s.starts(with:\
    \ \"I\") {\n            count += 1\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmpgk7eepz_/tmpgk7eepz_.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb510dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb50dd5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb50dd5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb50dd47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgk7eepz_                        0x000056348235a72b <unavailable> + 5931

    5    libc.so.6                          0x00002acb512ca460 __libc_start_main +
    245

    6    tmpgk7eepz_                        0x000056348235a309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659824531
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.split(separator: \".?!\").filter({ $0.hasPrefix(\"I\") }).count\n\
    \    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmp4vtmcr76/tmp4vtmcr76.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba478e87c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba478b7eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba478b7e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba478b7d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4vtmcr76                        0x00005648a690a66b <unavailable> + 5739

    5    libc.so.6                          0x00002ba479073460 __libc_start_main +
    245

    6    tmp4vtmcr76                        0x00005648a690a249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824531
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    var bored = 0\n    for s in S.split(separator: \".,?!\") {\n        if s.starts(with:\
    \ \"I\") {\n            bored += 1\n        }\n    }\n    return bored\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmprobb616p/tmprobb616p.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d66412c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d66109b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d66109988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d661087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprobb616p                        0x0000560d4006572b <unavailable> + 5931

    5    libc.so.6                          0x00002b8d665fe460 __libc_start_main +
    245

    6    tmprobb616p                        0x0000560d40065309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    \n    // TODO: Write a function that takes a string and returns the number\
    \ of boredoms.\n    // HINT: Use a regular expression to find sentences that start\
    \ with the word \"I\".\n    // The regular expression pattern will look like \"\
    ^I.*\"\n    // The function should ignore all punctuation and only count the initial\
    \ \"I\".\n    // The function should ignore all numbers and only count the initial\
    \ \"I\".\n    // The function should ignore all uppercase and only count the initial\
    \ \"I\".\n    // The function should ignore all lowercase and only count the initial\
    \ \"I\".\n    // The function should ignore all special characters and only count\
    \ the initial \"I\".\n    // The function should ignore all whitespace and only\
    \ count the initial \"I\".\n    // The function should ignore all words and only\
    \ count the initial \"I\".\n    // The function should ignore all sentences and\
    \ only count the initial \"I\".\n    // The function should ignore all boredoms\
    \ and only count the initial \"I\".\n    // The function should ignore all numbers\
    \ and only count the initial \"I\".\n    // The function should ignore all uppercase\
    \ and only count the initial \"I\".\n    // The function should ignore all lowercase\
    \ and only count the initial \"I\".\n    // The function should ignore all special\
    \ characters and only count the initial \"I\".\n    // The function should ignore\
    \ all whitespace and only count the initial \"I\".\n    // The function should\
    \ ignore all words and only count the initial \"I\".\n    // The function should\
    \ ignore all sentences and only count the initial \"I\".\n    // The function\
    \ should ignore all boredoms and only count the initial \"I\".\n    // The function\
    \ should ignore all numbers and only count the initial \"I\".\n    // The function\
    \ should ignore all uppercase and only count the initial \"I\".\n    // The function\
    \ should ignore all lowercase and only count the initial \"I\".\n    // The function\
    \ should ignore all special characters and only count the initial \"I\".\n   \
    \ // The function should ignore all whitespace and only count the initial \"I\"\
    .\n    // The function should ignore all words and only count the initial \"I\"\
    .\n    // The function should ignore all sentences and only count the initial\
    \ \"I\".\n    // The function should ignore all boredoms and only count the initial\
    \ \"I\".\n    // The function should ignore all numbers and only count the initial\
    \ \"I\".\n    // The function should ignore all uppercase and only count the initial\
    \ \"I\".\n    // The function should ignore all lowercase and only count the initial\
    \ \"I\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello world\"\
    ) == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"\
    I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S: \"\
    I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: '/tmp/tmp6oizlien.swift:43:1: error: missing return in global function expected
    to return ''Int''

    }

    ^

    '
  stdout: ''
  timestamp: 1659824532
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.components(separatedBy: \".?!\")\n    return boredoms.filter({\
    \ $0.hasPrefix(\"I\") }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp0keth5xg.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\")\n      \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    var bored = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n\
    \    var m = S.count\n\n    while i < m {\n        if S[i] == \"I\" {\n      \
    \      bored++\n        }\n        i += 1\n    }\n\n    return bored\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp4hy5mlhx.swift:19:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if S[i] ==\
    \ \"I\" {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmp4hy5mlhx.swift:20:18: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n            bored++\n                 ^~\n"
  stdout: ''
  timestamp: 1659824532
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.components(separatedBy: \".?!\")\n    return boredoms.count\
    \ { $0.starts(with: \"I\") }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpjmgu3eo4.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\")\n      \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824532
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"\
    I\")}\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpddmwe37w.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"\
    I\")}\n                   ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    var boredoms = 0\n    for s in S.split(separator: \".?!\") {\n        if\
    \ s.starts(with: \"I\") {\n            boredoms += 1\n        }\n    }\n    return\
    \ boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello\
    \ world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpia98daa8/tmpia98daa8.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b60acbaec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b60ac8a5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b60ac8a5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b60ac8a47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpia98daa8                        0x000055a7c40d972b <unavailable> + 5931

    5    libc.so.6                          0x00002b60acd9a460 __libc_start_main +
    245

    6    tmpia98daa8                        0x000055a7c40d9309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    return is_bored_str(S, \"\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp23qp288w.swift:11:12: error: cannot find 'is_bored_str' in scope\n\
    \    return is_bored_str(S, \"\")\n           ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824532
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"\
    I\")}\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpddmwe37w.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"\
    I\")}\n                   ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.components(separatedBy: \".?!\")\n    return boredoms.count\
    \ { $0.hasPrefix(\"I\") }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp444vx7ra.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\")\n      \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    var count = 0\n    for s in S.split(separator: \".,?!\") {\n        if s.starts(with:\
    \ \"I\") {\n            count += 1\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmpu7imi01z/tmpu7imi01z.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac2668d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac2665ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac2665ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac2665cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu7imi01z                        0x0000560f2ff4672b <unavailable> + 5931

    5    libc.so.6                          0x00002ac266ac3460 __libc_start_main +
    245

    6    tmpu7imi01z                        0x0000560f2ff46309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"\
    I\")}\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpddmwe37w.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"\
    I\")}\n                   ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    guard let S = S.lowercased() else {\n        return 0\n    }\n    let boredoms\
    \ = S.components(separatedBy: \".?!\")\n    return boredoms.filter({ $0.hasPrefix(\"\
    i\") }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello\
    \ world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpb_8ksnrm.swift:11:11: error: initializer for conditional binding\
    \ must have Optional type, not 'String'\n    guard let S = S.lowercased() else\
    \ {\n          ^       ~~~~~~~~~~~~~~\n/tmp/tmpb_8ksnrm.swift:14:22: error: value\
    \ of type 'String' has no member 'components'\n    let boredoms = S.components(separatedBy:\
    \ \".?!\")\n                   ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824532
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    return is_bored_str(S).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpn20ehnrv.swift:11:12: error: cannot find 'is_bored_str' in scope\n\
    \    return is_bored_str(S).count\n           ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824532
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    return is_bored_helper(S, \"\")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpgiseg24d.swift:11:12: error: cannot find 'is_bored_helper' in scope\n\
    \    return is_bored_helper(S, \"\")\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824532
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    var boredoms = 0\n    for s in S.split(separator: \".?!\") {\n        if\
    \ s.starts(with: \"I\") {\n            boredoms += 1\n        }\n    }\n    return\
    \ boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello\
    \ world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpia98daa8/tmpia98daa8.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b60acbaec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b60ac8a5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b60ac8a5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b60ac8a47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpia98daa8                        0x000055a7c40d972b <unavailable> + 5931

    5    libc.so.6                          0x00002b60acd9a460 __libc_start_main +
    245

    6    tmpia98daa8                        0x000055a7c40d9309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.components(separatedBy: \".?!\")\n        .filter({$0.hasPrefix(\"\
    I\")})\n        .count\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpf0twbynz.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\")\n      \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824532
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    var count = 0\n    for s in S.split(separator: \".?!\") {\n        if s.starts(with:\
    \ \"I\") {\n            count += 1\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmpgk7eepz_/tmpgk7eepz_.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb510dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb50dd5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb50dd5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb50dd47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgk7eepz_                        0x000056348235a72b <unavailable> + 5931

    5    libc.so.6                          0x00002acb512ca460 __libc_start_main +
    245

    6    tmpgk7eepz_                        0x000056348235a309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.components(separatedBy: \".?!\")\n    return boredoms.count\
    \ { $0.hasPrefix(\"I\") }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp444vx7ra.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\")\n      \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.components(separatedBy: \".?!\").filter{$0.starts(with:\
    \ \"I\")}\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpwvexdye4.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\").filter{$0.starts(with:\
    \ \"I\")}\n                   ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824532
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"\
    I\")}\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpddmwe37w.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"\
    I\")}\n                   ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    var bored = 0\n    for s in S.split(separator: \".,?!\") {\n        if s.starts(with:\
    \ \"I\") {\n            bored += 1\n        }\n    }\n    return bored\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmprobb616p/tmprobb616p.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d66412c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d66109b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d66109988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d661087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprobb616p                        0x0000560d4006572b <unavailable> + 5931

    5    libc.so.6                          0x00002b8d665fe460 __libc_start_main +
    245

    6    tmprobb616p                        0x0000560d40065309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659824531
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    var count = 0\n    for s in S.split(separator: \".,?!\") {\n        if s.starts(with:\
    \ \"I\") {\n            count += 1\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmpu7imi01z/tmpu7imi01z.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac2668d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac2665ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac2665ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac2665cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu7imi01z                        0x0000560f2ff4672b <unavailable> + 5931

    5    libc.so.6                          0x00002ac266ac3460 __libc_start_main +
    245

    6    tmpu7imi01z                        0x0000560f2ff46309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659824531
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    var bored = 0\n    for s in S.split(separator: \".,?!\") {\n        if s.starts(with:\
    \ \"I\") {\n            bored += 1\n        }\n    }\n    return bored\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmprobb616p/tmprobb616p.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d66412c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d66109b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d66109988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d661087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprobb616p                        0x0000560d4006572b <unavailable> + 5931

    5    libc.so.6                          0x00002b8d665fe460 __libc_start_main +
    245

    6    tmprobb616p                        0x0000560d40065309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659824531
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    var bored = 0\n    for s in S.split(separator: \".,?!\") {\n        if s.starts(with:\
    \ \"I\") {\n            bored += 1\n        }\n    }\n    return bored\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmprobb616p/tmprobb616p.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d66412c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d66109b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d66109988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d661087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprobb616p                        0x0000560d4006572b <unavailable> + 5931

    5    libc.so.6                          0x00002b8d665fe460 __libc_start_main +
    245

    6    tmprobb616p                        0x0000560d40065309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659824531
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    \n    // TODO: Write a function that takes a string and returns the number\
    \ of boredoms.\n    // HINT: Look at the string S and count the number of times\
    \ \"I\" appears.\n    // If that number is even, then the sentence is bored.\n\
    \    // If that number is odd, then the sentence is not bored.\n    // Do not\
    \ count periods or question marks. Think about what happens if a sentence starts\
    \ with a question mark.\n    \n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmpm7hqg5kh/tmpm7hqg5kh.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab11756cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab117263b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab117263988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1172627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm7hqg5kh                        0x000055d4d89f53b2 <unavailable> + 5042

    5    libc.so.6                          0x00002ab117758460 __libc_start_main +
    245

    6    tmpm7hqg5kh                        0x000055d4d89f4ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824532
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.components(separatedBy: \".?!\").filter{$0.starts(with:\
    \ \"I\")}\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpwvexdye4.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\").filter{$0.starts(with:\
    \ \"I\")}\n                   ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824532
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    var count = 0\n    var last = 0\n    for c in S {\n        if c == '.' ||\
    \ c == '?' || c == '!' {\n            count += 1\n            last = c\n     \
    \   }\n    }\n    if last == '.' {\n        count += 1\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp_r2cmjfx.swift:14:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '.' || c == '?' || c == '!' {\n                ^~~\n\
    \                \".\"\n/tmp/tmp_r2cmjfx.swift:14:29: error: single-quoted string\
    \ literal found, use '\"'\n        if c == '.' || c == '?' || c == '!' {\n   \
    \                         ^~~\n                            \"?\"\n/tmp/tmp_r2cmjfx.swift:14:41:\
    \ error: single-quoted string literal found, use '\"'\n        if c == '.' ||\
    \ c == '?' || c == '!' {\n                                        ^~~\n      \
    \                                  \"!\"\n/tmp/tmp_r2cmjfx.swift:19:16: error:\
    \ single-quoted string literal found, use '\"'\n    if last == '.' {\n       \
    \        ^~~\n               \".\"\n/tmp/tmp_r2cmjfx.swift:16:20: error: cannot\
    \ assign value of type 'Character' to type 'Int'\n            last = c\n     \
    \              ^\n/tmp/tmp_r2cmjfx.swift:19:13: error: binary operator '==' cannot\
    \ be applied to operands of type 'Int' and 'String'\n    if last == '.' {\n  \
    \     ~~~~ ^  ~~~\n/tmp/tmp_r2cmjfx.swift:19:13: note: overloads for '==' exist\
    \ with these partially matching parameter lists: (Int, Int), (String, String)\n\
    \    if last == '.' {\n            ^\n"
  stdout: ''
  timestamp: 1659824532
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    var bored = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n\
    \    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n \
    \   var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n  \
    \  var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var A = 0\n   \
    \ var B = 0\n    var C = 0\n    var D = 0\n    var E = 0\n    var F = 0\n    var\
    \ G = 0\n    var H = 0\n    var I = 0\n    var J = 0\n    var K = 0\n    var L\
    \ = 0\n    var M = 0\n    var N = 0\n    var O = 0\n    var P = 0\n    var Q =\
    \ 0\n    var R = 0\n    var S = 0\n    var T = 0\n    var U = 0\n    var V = 0\n\
    \    var W = 0\n    var X = 0\n    var Y = 0\n    var Z = 0\n    var a = 0\n \
    \   var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n  \
    \  var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n   \
    \ var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var\
    \ q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v\
    \ = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var A =\
    \ 0\n    var B = 0\n    var C = 0\n    var D = 0\n    var E = 0\n    var F = 0\n\
    \    var G = 0\n    var H = 0\n    var I = 0\n    var J = 0\n    var K = 0\n \
    \   var L = 0\n    var M = 0\n    var N = 0\n    var O = 0\n    var P = 0\n  \
    \  var Q = 0\n    var R = 0\n    var S = 0\n    var T = 0\n    var U = 0\n   \
    \ var V = 0\n    var W = 0\n    var X = 0\n    var Y = 0\n    var Z = 0\n    var\
    \ a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f\
    \ = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k =\
    \ 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n\
    \    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n \
    \   var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n  \
    \  var A = 0\n    var B = 0\n    var C = 0\n    var D = 0\n    var E = 0\n   \
    \ var F = 0\n    var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp7cp18kh4.swift:140:8: error: expected pattern\n    var \n     \
    \  ^\n/tmp/tmp7cp18kh4.swift:64:9: error: invalid redeclaration of 'i'\n    var\
    \ i = 0\n        ^\n/tmp/tmp7cp18kh4.swift:12:9: note: 'i' previously declared\
    \ here\n    var i = 0\n        ^\n/tmp/tmp7cp18kh4.swift:65:9: error: invalid\
    \ redeclaration of 'j'\n    var j = 0\n        ^\n/tmp/tmp7cp18kh4.swift:13:9:\
    \ note: 'j' previously declared here\n    var j = 0\n        ^\n/tmp/tmp7cp18kh4.swift:66:9:\
    \ error: invalid redeclaration of 'k'\n    var k = 0\n        ^\n/tmp/tmp7cp18kh4.swift:14:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmp7cp18kh4.swift:67:9:\
    \ error: invalid redeclaration of 'l'\n    var l = 0\n        ^\n/tmp/tmp7cp18kh4.swift:15:9:\
    \ note: 'l' previously declared here\n    var l = 0\n        ^\n/tmp/tmp7cp18kh4.swift:68:9:\
    \ error: invalid redeclaration of 'm'\n    var m = 0\n        ^\n/tmp/tmp7cp18kh4.swift:16:9:\
    \ note: 'm' previously declared here\n    var m = 0\n        ^\n/tmp/tmp7cp18kh4.swift:69:9:\
    \ error: invalid redeclaration of 'n'\n    var n = 0\n        ^\n/tmp/tmp7cp18kh4.swift:17:9:\
    \ note: 'n' previously declared here\n    var n = 0\n        ^\n/tmp/tmp7cp18kh4.swift:70:9:\
    \ error: invalid redeclaration of 'o'\n    var o = 0\n        ^\n/tmp/tmp7cp18kh4.swift:18:9:\
    \ note: 'o' previously declared here\n    var o = 0\n        ^\n/tmp/tmp7cp18kh4.swift:71:9:\
    \ error: invalid redeclaration of 'p'\n    var p = 0\n        ^\n/tmp/tmp7cp18kh4.swift:19:9:\
    \ note: 'p' previously declared here\n    var p = 0\n        ^\n/tmp/tmp7cp18kh4.swift:72:9:\
    \ error: invalid redeclaration of 'q'\n    var q = 0\n        ^\n/tmp/tmp7cp18kh4.swift:20:9:\
    \ note: 'q' previously declared here\n    var q = 0\n        ^\n/tmp/tmp7cp18kh4.swift:73:9:\
    \ error: invalid redeclaration of 'r'\n    var r = 0\n        ^\n/tmp/tmp7cp18kh4.swift:21:9:\
    \ note: 'r' previously declared here\n    var r = 0\n        ^\n/tmp/tmp7cp18kh4.swift:74:9:\
    \ error: invalid redeclaration of 's'\n    var s = 0\n        ^\n/tmp/tmp7cp18kh4.swift:22:9:\
    \ note: 's' previously declared here\n    var s = 0\n        ^\n/tmp/tmp7cp18kh4.swift:75:9: "
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    guard let s = S.split(separator: \".\", maxSplit: 1).first else {\n     \
    \   return 0\n    }\n    guard let i = s.range(of: \"^I\") else {\n        return\
    \ 0\n    }\n    return s.distance(from: s.startIndex, to: i) == 0\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp206kuajf.swift:11:21: error: no exact matches in call to instance\
    \ method 'split'\n    guard let s = S.split(separator: \".\", maxSplit: 1).first\
    \ else {\n                    ^\nSwift.Sequence:2:40: note: incorrect labels for\
    \ candidate (have: '(separator:maxSplit:)', expected: '(separator:maxSplits:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n\
    \                                       ^\nSwift.Collection:2:40: note: incorrect\
    \ labels for candidate (have: '(separator:maxSplit:)', expected: '(separator:maxSplits:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n/tmp/tmp206kuajf.swift:17:50: error:\
    \ cannot convert return expression of type 'Bool' to return type 'Int'\n    return\
    \ s.distance(from: s.startIndex, to: i) == 0\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~\n"
  stdout: ''
  timestamp: 1659824532
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    return count_boredoms(S, \"I\")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpqjtnfl09.swift:11:12: error: cannot find 'count_boredoms' in scope\n\
    \    return count_boredoms(S, \"I\")\n           ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824532
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    var count = 0\n    for s in S.split(separator: \".?!\") {\n        if s.starts(with:\
    \ \"I\") {\n            count += 1\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmpgk7eepz_/tmpgk7eepz_.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb510dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb50dd5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb50dd5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb50dd47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgk7eepz_                        0x000056348235a72b <unavailable> + 5931

    5    libc.so.6                          0x00002acb512ca460 __libc_start_main +
    245

    6    tmpgk7eepz_                        0x000056348235a309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    var bored = 0\n    var i = 0\n    for c in S {\n        if c == '.' || c\
    \ == '?' || c == '!' {\n            bored += 1\n        }\n        i += 1\n  \
    \  }\n    return bored\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpa70fwljs.swift:14:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '.' || c == '?' || c == '!' {\n                ^~~\n\
    \                \".\"\n/tmp/tmpa70fwljs.swift:14:29: error: single-quoted string\
    \ literal found, use '\"'\n        if c == '.' || c == '?' || c == '!' {\n   \
    \                         ^~~\n                            \"?\"\n/tmp/tmpa70fwljs.swift:14:41:\
    \ error: single-quoted string literal found, use '\"'\n        if c == '.' ||\
    \ c == '?' || c == '!' {\n                                        ^~~\n      \
    \                                  \"!\"\n"
  stdout: ''
  timestamp: 1659824532
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.components(separatedBy: \".?!\")\n    return boredoms.count\
    \ { $0.hasPrefix(\"I\") }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp444vx7ra.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\")\n      \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    var bored = 0\n    for s in S.split(separator: \".?!\") {\n        if s.starts(with:\
    \ \"I\") {\n            bored += 1\n        }\n    }\n    return bored\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmp9leg0jc7/tmp9leg0jc7.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b27f9187c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b27f8e7eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b27f8e7e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b27f8e7d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9leg0jc7                        0x00005648366c672b <unavailable> + 5931

    5    libc.so.6                          0x00002b27f9373460 __libc_start_main +
    245

    6    tmp9leg0jc7                        0x00005648366c6309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659824532
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"\
    I\")}\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpddmwe37w.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"\
    I\")}\n                   ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.components(separatedBy: \".?!\")\n        .filter{$0.hasPrefix(\"\
    I\")}\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp3eesug5p.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\")\n      \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    return count_bored(S, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpmet8ypy6.swift:11:12: error: cannot find 'count_bored' in scope\n\
    \    return count_bored(S, true)\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824532
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    var bored = 0\n    for s in S.split(separator: \".,?!\") {\n        if s.starts(with:\
    \ \"I\") {\n            bored += 1\n        }\n    }\n    return bored\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmprobb616p/tmprobb616p.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d66412c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d66109b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d66109988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d661087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprobb616p                        0x0000560d4006572b <unavailable> + 5931

    5    libc.so.6                          0x00002b8d665fe460 __libc_start_main +
    245

    6    tmprobb616p                        0x0000560d40065309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659824531
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    var boredoms = 0\n    for s in S.split(separator: \".,?!\") {\n        if\
    \ s.starts(with: \"I\") {\n            boredoms += 1\n        }\n    }\n    return\
    \ boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello\
    \ world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpz7okcz2h/tmpz7okcz2h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9c36215c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9c35f0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9c35f0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9c35f0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz7okcz2h                        0x0000564d53f9772b <unavailable> + 5931

    5    libc.so.6                          0x00002b9c36401460 __libc_start_main +
    245

    6    tmpz7okcz2h                        0x0000564d53f97309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659824532
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.components(separatedBy: \".?!\")\n    return boredoms.filter({\
    \ $0.hasPrefix(\"I\") }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp0keth5xg.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\")\n      \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.components(separatedBy: \".?!\")\n    return boredoms.filter({\
    \ $0.hasPrefix(\"I\") }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp0keth5xg.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\")\n      \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    var bored = 0\n    var i = 0\n    for s in S.split(separator: \".,?!\") {\n\
    \        if s.starts(with: \"I\") {\n            bored += 1\n        }\n     \
    \   i += 1\n    }\n    return bored\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmp_vysojbz/tmp_vysojbz.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba00f0f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba00edebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba00edeb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba00edea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_vysojbz                        0x000056037697872b <unavailable> + 5931

    5    libc.so.6                          0x00002ba00f2e0460 __libc_start_main +
    245

    6    tmp_vysojbz                        0x0000560376978309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659824532
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    \n    // TODO: Write a function that takes a string and returns the number\
    \ of boredoms.\n    // HINT: Use a regular expression to find all the sentences\
    \ that start with the word \"I\".\n    // The function should return the number\
    \ of boredoms.\n    \n    // BEGIN PSEUDOCODE\n    \n    // END PSEUDOCODE\n \
    \   \n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello\
    \ world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpf_pn_is8/tmpf_pn_is8.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b07af545c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b07af23cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b07af23c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b07af23b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf_pn_is8                        0x000055aa97ab63b2 <unavailable> + 5042

    5    libc.so.6                          0x00002b07af731460 __libc_start_main +
    245

    6    tmpf_pn_is8                        0x000055aa97ab5ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824532
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    var boredoms = 0\n    for s in S.split(separator: \".,?!\") {\n        if\
    \ s.starts(with: \"I\") {\n            boredoms += 1\n        }\n    }\n    return\
    \ boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello\
    \ world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpz7okcz2h/tmpz7okcz2h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9c36215c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9c35f0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9c35f0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9c35f0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz7okcz2h                        0x0000564d53f9772b <unavailable> + 5931

    5    libc.so.6                          0x00002b9c36401460 __libc_start_main +
    245

    6    tmpz7okcz2h                        0x0000564d53f97309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659824532
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    return is_bored_helper(S, \"\", 0, 0, 0)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpjqd71s0g.swift:11:12: error: cannot find 'is_bored_helper' in scope\n\
    \    return is_bored_helper(S, \"\", 0, 0, 0)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    return is_bored_impl(S, \"\")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp728az053.swift:11:12: error: cannot find 'is_bored_impl' in scope\n\
    \    return is_bored_impl(S, \"\")\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    var count = 0\n    for s in S.split(separator: \".?!\") {\n        if s.starts(with:\
    \ \"I\") {\n            count += 1\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmpgk7eepz_/tmpgk7eepz_.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb510dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb50dd5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb50dd5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb50dd47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgk7eepz_                        0x000056348235a72b <unavailable> + 5931

    5    libc.so.6                          0x00002acb512ca460 __libc_start_main +
    245

    6    tmpgk7eepz_                        0x000056348235a309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659824531
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    var count = 0\n    for s in S.split(separator: \".?!\") {\n        if s.starts(with:\
    \ \"I\") {\n            count += 1\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmpgk7eepz_/tmpgk7eepz_.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb510dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb50dd5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb50dd5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb50dd47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgk7eepz_                        0x000056348235a72b <unavailable> + 5931

    5    libc.so.6                          0x00002acb512ca460 __libc_start_main +
    245

    6    tmpgk7eepz_                        0x000056348235a309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659824531
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    var count = 0\n    for s in S.split(separator: \".,?!\") {\n        if s.starts(with:\
    \ \"I\") {\n            count += 1\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmpu7imi01z/tmpu7imi01z.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac2668d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac2665ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac2665ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac2665cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu7imi01z                        0x0000560f2ff4672b <unavailable> + 5931

    5    libc.so.6                          0x00002ac266ac3460 __libc_start_main +
    245

    6    tmpu7imi01z                        0x0000560f2ff46309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"\
    I\")}\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpddmwe37w.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"\
    I\")}\n                   ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.components(separatedBy: \".?!\").filter {\n        $0.hasPrefix(\"\
    I\")\n    }.count\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpclpp5i13.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\").filter {\n\
    \                   ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824532
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.components(separatedBy: \".?!\")\n    return boredoms.count\
    \ { $0.hasPrefix(\"I\") }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp444vx7ra.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\")\n      \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    var count = 0\n    var last = 0\n    for c in S {\n        switch c {\n \
    \       case 'I':\n            count += 1\n            last = count\n        default:\n\
    \            if last > 0 {\n                count -= last\n                last\
    \ = 0\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpe_rcdog8.swift:15:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'I':\n             ^~~\n             \"I\"\n"
  stdout: ''
  timestamp: 1659824532
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    var bored = 0\n    for s in S.split(separator: \".,?!\") {\n        if s.starts(with:\
    \ \"I\") {\n            bored += 1\n        }\n    }\n    return bored\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmprobb616p/tmprobb616p.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d66412c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d66109b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d66109988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d661087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprobb616p                        0x0000560d4006572b <unavailable> + 5931

    5    libc.so.6                          0x00002b8d665fe460 __libc_start_main +
    245

    6    tmprobb616p                        0x0000560d40065309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    return is_bored(S, \"\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpip72m4pp.swift:11:24: error: extra argument in call\n    return\
    \ is_bored(S, \"\")\n                   ~~~~^~~\n"
  stdout: ''
  timestamp: 1659824532
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.components(separatedBy: \".?!\")\n    return boredoms.filter({\
    \ $0.hasPrefix(\"I\") }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp0keth5xg.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\")\n      \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    guard let s = S.split(separator: \".?!\").map(String.init) else {\n     \
    \   return 0\n    }\n    return s.filter({ $0.hasPrefix(\"I\") }).count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpxgxdy7ig.swift:11:11: error: initializer for conditional binding\
    \ must have Optional type, not '[String]'\n    guard let s = S.split(separator:\
    \ \".?!\").map(String.init) else {\n          ^       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824532
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.split(separator: \".?!\").filter({ $0.hasPrefix(\"I\") }).count\n\
    \    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmp4vtmcr76/tmp4vtmcr76.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba478e87c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba478b7eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba478b7e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba478b7d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4vtmcr76                        0x00005648a690a66b <unavailable> + 5739

    5    libc.so.6                          0x00002ba479073460 __libc_start_main +
    245

    6    tmp4vtmcr76                        0x00005648a690a249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.components(separatedBy: \".?!\")\n    return boredoms.count\
    \ { $0.hasPrefix(\"I\") }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp444vx7ra.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\")\n      \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    return is_bored_impl(S, \"\", \"\")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp4svtyp0c.swift:11:12: error: cannot find 'is_bored_impl' in scope\n\
    \    return is_bored_impl(S, \"\", \"\")\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824532
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    var bored = 0\n    for s in S.split(separator: \".,?!\") {\n        if s.starts(with:\
    \ \"I\") {\n            bored += 1\n        }\n    }\n    return bored\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmprobb616p/tmprobb616p.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d66412c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d66109b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d66109988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d661087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprobb616p                        0x0000560d4006572b <unavailable> + 5931

    5    libc.so.6                          0x00002b8d665fe460 __libc_start_main +
    245

    6    tmprobb616p                        0x0000560d40065309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.components(separatedBy: \".?!\")\n    return boredoms.filter({\
    \ $0.hasPrefix(\"I\") }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp0keth5xg.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\")\n      \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    return is_bored_impl(S, \"\")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp728az053.swift:11:12: error: cannot find 'is_bored_impl' in scope\n\
    \    return is_bored_impl(S, \"\")\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.components(separatedBy: \".?!\")\n    return boredoms.filter({\
    \ $0.hasPrefix(\"I\") }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp0keth5xg.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\")\n      \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"\
    I\")}\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpddmwe37w.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"\
    I\")}\n                   ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"\
    I\")}\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpddmwe37w.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"\
    I\")}\n                   ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"\
    I\")}\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpddmwe37w.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"\
    I\")}\n                   ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.components(separatedBy: \".?!\")\n    return boredoms.count\
    \ { $0.hasPrefix(\"I\") }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp444vx7ra.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\")\n      \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    var boredoms = 0\n    for s in S.split(separator: \".,?!\") {\n        if\
    \ s.starts(with: \"I\") {\n            boredoms += 1\n        }\n    }\n    return\
    \ boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_bored(S: \"Hello\
    \ world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpz7okcz2h/tmpz7okcz2h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9c36215c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9c35f0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9c35f0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9c35f0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz7okcz2h                        0x0000564d53f9772b <unavailable> + 5931

    5    libc.so.6                          0x00002b9c36401460 __libc_start_main +
    245

    6    tmpz7okcz2h                        0x0000564d53f97309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659824532
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"\
    I\")}\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpddmwe37w.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"\
    I\")}\n                   ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    \n    let boredoms = S.split(separator: \".?!\").filter({ $0.hasPrefix(\"\
    I\") }).count\n    \n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpggi4kikf/tmpggi4kikf.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad0fb53dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad0fb234b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad0fb234988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0fb2337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpggi4kikf                        0x000056035220b66b <unavailable> + 5739

    5    libc.so.6                          0x00002ad0fb729460 __libc_start_main +
    245

    6    tmpggi4kikf                        0x000056035220b249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824532
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.components(separatedBy: \".?!\")\n        .filter{$0.hasPrefix(\"\
    I\")}\n        .count\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp_3ue0jcl.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\")\n      \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824532
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.components(separatedBy: \".?!\")\n    return boredoms.filter({\
    \ $0.hasPrefix(\"I\") }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp0keth5xg.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\")\n      \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"\
    I\")}\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpddmwe37w.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"\
    I\")}\n                   ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    return count_boredoms(S, true)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp9dhdv7ux.swift:11:12: error: cannot find 'count_boredoms' in scope\n\
    \    return count_boredoms(S, true)\n           ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    return is_bored(S, \"\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpip72m4pp.swift:11:24: error: extra argument in call\n    return\
    \ is_bored(S, \"\")\n                   ~~~~^~~\n"
  stdout: ''
  timestamp: 1659824532
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    var bored = 0\n    for s in S.split(separator: \".,?!\") {\n        if s.starts(with:\
    \ \"I\") {\n            bored += 1\n        }\n    }\n    return bored\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmprobb616p/tmprobb616p.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d66412c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d66109b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d66109988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d661087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprobb616p                        0x0000560d4006572b <unavailable> + 5931

    5    libc.so.6                          0x00002b8d665fe460 __libc_start_main +
    245

    6    tmprobb616p                        0x0000560d40065309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.components(separatedBy: \".?!\")\n    return boredoms.filter({\
    \ $0.hasPrefix(\"I\") }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp0keth5xg.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\")\n      \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.components(separatedBy: \".?!\")\n    return boredoms.filter({\
    \ $0.hasPrefix(\"I\") }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp0keth5xg.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\")\n      \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    var bored = 0\n    for s in S.split(separator: \".,?!\") {\n        if s.starts(with:\
    \ \"I\") {\n            bored += 1\n        }\n    }\n    return bored\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmprobb616p/tmprobb616p.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d66412c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d66109b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d66109988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d661087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprobb616p                        0x0000560d4006572b <unavailable> + 5931

    5    libc.so.6                          0x00002b8d665fe460 __libc_start_main +
    245

    6    tmprobb616p                        0x0000560d40065309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    var boredoms = 0\n    var lastChar = \"\"\n    for c in S {\n        if lastChar\
    \ == \"I\" && c == \"I\" {\n            boredoms += 1\n        }\n        lastChar\
    \ = c\n    }\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpqqi9hs15.swift:17:20: error: cannot assign value of type 'Character'\
    \ to type 'String'\n        lastChar = c\n                   ^\n"
  stdout: ''
  timestamp: 1659824532
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    guard let words = S.split(separator: \".?!\") else {\n        return 0\n\
    \    }\n    return words.filter({ $0.hasPrefix(\"I\") }).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmph2p9e4yu.swift:11:11: error: initializer for conditional binding\
    \ must have Optional type, not '[String.SubSequence]' (aka 'Array<Substring>')\n\
    \    guard let words = S.split(separator: \".?!\") else {\n          ^       \
    \    ~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824532
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    var bored = 0\n    for s in S.split(separator: \".?!\") {\n        if s.starts(with:\
    \ \"I\") {\n            bored += 1\n        }\n    }\n    return bored\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmp9leg0jc7/tmp9leg0jc7.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b27f9187c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b27f8e7eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b27f8e7e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b27f8e7d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9leg0jc7                        0x00005648366c672b <unavailable> + 5931

    5    libc.so.6                          0x00002b27f9373460 __libc_start_main +
    245

    6    tmp9leg0jc7                        0x00005648366c6309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659824532
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    var boredoms = 0\n    var bored = false\n    for s in S.split(separator:\
    \ \".?!\") {\n        if s.starts(with: \"I\") {\n            bored = true\n \
    \       } else {\n            bored = false\n        }\n        if bored {\n \
    \           boredoms += 1\n        }\n    }\n    return boredoms\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmpbt97nq2l/tmpbt97nq2l.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af67273cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af672433b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af672433988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af6724327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbt97nq2l                        0x000055f50887272b <unavailable> + 5931

    5    libc.so.6                          0x00002af672928460 __libc_start_main +
    245

    6    tmpbt97nq2l                        0x000055f508872309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659824532
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"\
    I\")}\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpddmwe37w.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"\
    I\")}\n                   ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.components(separatedBy: \".?!\")\n    return boredoms.filter({\
    \ $0.hasPrefix(\"I\") }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp0keth5xg.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\")\n      \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.components(separatedBy: \".?!\")\n    return boredoms.filter({\
    \ $0.hasPrefix(\"I\") }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp0keth5xg.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\")\n      \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    guard let s = S.split(separator: \".\", maxSplit: 1).first,\n        let\
    \ s = S.split(separator: \"?\", maxSplit: 1).first,\n        let s = S.split(separator:\
    \ \"!\", maxSplit: 1).first else { return 0 }\n    return s.range(of: \"I\", options:\
    \ .caseInsensitive).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp75ibbrc8.swift:11:21: error: no exact matches in call to instance\
    \ method 'split'\n    guard let s = S.split(separator: \".\", maxSplit: 1).first,\n\
    \                    ^\nSwift.Sequence:2:40: note: incorrect labels for candidate\
    \ (have: '(separator:maxSplit:)', expected: '(separator:maxSplits:)')\n    @inlinable\
    \ public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max,\
    \ omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n    \
    \                                   ^\nSwift.Collection:2:40: note: incorrect\
    \ labels for candidate (have: '(separator:maxSplit:)', expected: '(separator:maxSplits:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n/tmp/tmp75ibbrc8.swift:12:19: error:\
    \ no exact matches in call to instance method 'split'\n        let s = S.split(separator:\
    \ \"?\", maxSplit: 1).first,\n                  ^\nSwift.Sequence:2:40: note:\
    \ incorrect labels for candidate (have: '(separator:maxSplit:)', expected: '(separator:maxSplits:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n\
    \                                       ^\nSwift.Collection:2:40: note: incorrect\
    \ labels for candidate (have: '(separator:maxSplit:)', expected: '(separator:maxSplits:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n/tmp/tmp75ibbrc8.swift:13:19: error:\
    \ no exact matches in call to instance method 'split'\n        let s = S.split(separator:\
    \ \"!\", maxSplit: 1).first else { return 0 }\n                  ^\nSwift.Sequence:2:40:\
    \ note: incorrect labels for candidate (have: '(separator:maxSplit:)', expected:\
    \ '(separator:maxSplits:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxS"
  stdout: ''
  timestamp: 1659824532
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"\
    I\")}\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpddmwe37w.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"\
    I\")}\n                   ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.components(separatedBy: \".?!\")\n    return boredoms.count\
    \ { $0.starts(with: \"I\") }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpjmgu3eo4.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\")\n      \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824532
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.split(separator: \".?!\").filter({ $0.hasPrefix(\"I\") }).count\n\
    \    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmp4vtmcr76/tmp4vtmcr76.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba478e87c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba478b7eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba478b7e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba478b7d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4vtmcr76                        0x00005648a690a66b <unavailable> + 5739

    5    libc.so.6                          0x00002ba479073460 __libc_start_main +
    245

    6    tmp4vtmcr76                        0x00005648a690a249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    return is_bored_1(S).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp3obhhpso.swift:11:12: error: cannot find 'is_bored_1' in scope\n\
    \    return is_bored_1(S).count\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824532
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.split(separator: \".?!\").filter({ $0.hasPrefix(\"I\") }).count\n\
    \    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmp4vtmcr76/tmp4vtmcr76.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba478e87c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba478b7eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba478b7e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba478b7d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4vtmcr76                        0x00005648a690a66b <unavailable> + 5739

    5    libc.so.6                          0x00002ba479073460 __libc_start_main +
    245

    6    tmp4vtmcr76                        0x00005648a690a249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824531
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.split(separator: \".?!\").filter({ $0.hasPrefix(\"I\") }).count\n\
    \    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmp4vtmcr76/tmp4vtmcr76.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba478e87c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba478b7eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba478b7e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba478b7d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4vtmcr76                        0x00005648a690a66b <unavailable> + 5739

    5    libc.so.6                          0x00002ba479073460 __libc_start_main +
    245

    6    tmp4vtmcr76                        0x00005648a690a249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.components(separatedBy: \".?!\").filter{$0.starts(with:\
    \ \"I\")}\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpwvexdye4.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\").filter{$0.starts(with:\
    \ \"I\")}\n                   ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824532
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.components(separatedBy: \".?!\")\n    return boredoms.filter({\
    \ $0.hasPrefix(\"I\") }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp0keth5xg.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\")\n      \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.components(separatedBy: \".?!\")\n    return boredoms.filter({\
    \ $0.hasPrefix(\"I\") }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp0keth5xg.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\")\n      \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.split(separator: \".?!\").filter({ $0.hasPrefix(\"I\") }).count\n\
    \    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmp4vtmcr76/tmp4vtmcr76.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba478e87c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba478b7eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba478b7e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba478b7d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4vtmcr76                        0x00005648a690a66b <unavailable> + 5739

    5    libc.so.6                          0x00002ba479073460 __libc_start_main +
    245

    6    tmp4vtmcr76                        0x00005648a690a249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824531
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    var count = 0\n    for s in S.split(separator: \".,?!\") {\n        if s.starts(with:\
    \ \"I\") {\n            count += 1\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmpu7imi01z/tmpu7imi01z.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac2668d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac2665ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac2665ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac2665cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu7imi01z                        0x0000560f2ff4672b <unavailable> + 5931

    5    libc.so.6                          0x00002ac266ac3460 __libc_start_main +
    245

    6    tmpu7imi01z                        0x0000560f2ff46309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659824531
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.split(separator: \".?!\").filter({ $0.starts(with: \"I\"\
    ) }).count\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmpycx_obmz/tmpycx_obmz.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acbbef0fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acbbec06b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acbbec06988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acbbec057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpycx_obmz                        0x0000560a4dfc168b <unavailable> + 5771

    5    libc.so.6                          0x00002acbbf0fb460 __libc_start_main +
    245

    6    tmpycx_obmz                        0x0000560a4dfc1269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659824532
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"\
    I\")}\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpddmwe37w.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"\
    I\")}\n                   ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    var boredoms = 0\n    var lastChar = S.characters.last!\n    for char in\
    \ S.characters {\n        switch char {\n        case \"I\":\n            if lastChar\
    \ == \"I\" {\n                boredoms += 1\n            }\n        default:\n\
    \            lastChar = char\n        }\n    }\n    return boredoms\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpw6hy9zrj.swift:12:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    var lastChar = S.characters.last!\n               \
    \      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpw6hy9zrj.swift:13:19:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in S.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824532
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.components(separatedBy: \".?!\")\n        .filter{$0.hasPrefix(\"\
    I\")}\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp3eesug5p.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\")\n      \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"\
    I\")}\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpddmwe37w.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"\
    I\")}\n                   ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    var count = 0\n    for s in S.split(separator: \".,?!\") {\n        if s.starts(with:\
    \ \"I\") {\n            count += 1\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmpu7imi01z/tmpu7imi01z.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac2668d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac2665ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac2665ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac2665cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu7imi01z                        0x0000560f2ff4672b <unavailable> + 5931

    5    libc.so.6                          0x00002ac266ac3460 __libc_start_main +
    245

    6    tmpu7imi01z                        0x0000560f2ff46309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    var boredoms = 0\n    var sentences = S.split(\".\")\n    for sentence in\
    \ sentences {\n        if sentence.startsWith(\"I\") {\n            boredoms +=\
    \ 1\n        }\n    }\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpbbg7uwmx.swift:12:23: error: no exact matches in call to instance\
    \ method 'split'\n    var sentences = S.split(\".\")\n                      ^\n\
    Swift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)', expected:\
    \ '(separator:)')\n    @inlinable public __consuming func split(separator: Self.Element,\
    \ maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true) -> [ArraySlice<Self.Element>]\n\
    \                                       ^\nSwift.Collection:2:40: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable\
    \ public __consuming func split(separator: Self.Element, maxSplits: Int = Int.max,\
    \ omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n            \
    \                           ^\n"
  stdout: ''
  timestamp: 1659824532
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.split(separator: \".?!\").filter{$0.starts(with: \"I\")}\n\
    \    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmp0bduwp_c/tmp0bduwp_c.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a86113c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a85e0ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a85e0a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a85e097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0bduwp_c                        0x000055ad102ca68b <unavailable> + 5771

    5    libc.so.6                          0x00002b8a862ff460 __libc_start_main +
    245

    6    tmp0bduwp_c                        0x000055ad102ca269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659824532
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.components(separatedBy: \".?!\")\n    return boredoms.filter({\
    \ $0.hasPrefix(\"I\") }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp0keth5xg.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\")\n      \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"\
    I\")}\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpddmwe37w.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"\
    I\")}\n                   ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    return is_bored(S, \"\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpip72m4pp.swift:11:24: error: extra argument in call\n    return\
    \ is_bored(S, \"\")\n                   ~~~~^~~\n"
  stdout: ''
  timestamp: 1659824532
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    var count = 0\n    for s in S.split(separator: \".,?!\") {\n        if s.starts(with:\
    \ \"I\") {\n            count += 1\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmpu7imi01z/tmpu7imi01z.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac2668d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac2665ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac2665ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac2665cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu7imi01z                        0x0000560f2ff4672b <unavailable> + 5931

    5    libc.so.6                          0x00002ac266ac3460 __libc_start_main +
    245

    6    tmpu7imi01z                        0x0000560f2ff46309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659824531
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    return is_bored(S, 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp8calk8lb.swift:11:24: error: extra argument in call\n    return\
    \ is_bored(S, 0)\n                   ~~~~^~\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    var bored = 0\n    var i = 0\n    for s in S.split(separator: \".,?!\") {\n\
    \        if s.starts(with: \"I\") {\n            bored += 1\n        }\n     \
    \   i += 1\n    }\n    return bored\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\"\
    ) == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\"\
    ) == 0)\nassert(is_bored(S: \"I feel good today. I will be productive. will kill\
    \ It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\") == 0)"
  status: Exception
  stderr: 'tmp_vysojbz/tmp_vysojbz.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba00f0f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba00edebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba00edeb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba00edea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_vysojbz                        0x000056037697872b <unavailable> + 5931

    5    libc.so.6                          0x00002ba00f2e0460 __libc_start_main +
    245

    6    tmp_vysojbz                        0x0000560376978309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659824532
- exit_code: 0
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    var boredoms = 0\n    var lastChar: Character?\n    for c in S {\n      \
    \  if lastChar == nil {\n            lastChar = c\n            continue\n    \
    \    }\n        if lastChar == c {\n            boredoms += 1\n            lastChar\
    \ = nil\n            continue\n        }\n        if lastChar == \".\" || lastChar\
    \ == \"?\" || lastChar == \"!\" {\n            boredoms += 1\n            lastChar\
    \ = nil\n        }\n    }\n    return boredoms\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S: \"Is the\
    \ sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824532
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"\
    I\")}\n    return boredoms.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpddmwe37w.swift:11:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\").filter{$0.hasPrefix(\"\
    I\")}\n                   ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824531
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    var bored = 0\n    for s in S.split(separator: \".?!\") {\n        if s.starts(with:\
    \ \"I\") {\n            bored += 1\n        }\n    }\n    return bored\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmp9leg0jc7/tmp9leg0jc7.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b27f9187c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b27f8e7eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b27f8e7e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b27f8e7d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9leg0jc7                        0x00005648366c672b <unavailable> + 5931

    5    libc.so.6                          0x00002b27f9373460 __libc_start_main +
    245

    6    tmp9leg0jc7                        0x00005648366c6309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659824532
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    return is_bored_str(S, \"\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_bored(S:\
    \ \"Hello world\") == 0)\nassert(is_bored(S: \"Is the sky blue?\") == 0)\nassert(is_bored(S:\
    \ \"I love It !\") == 1)\nassert(is_bored(S: \"bIt\") == 0)\nassert(is_bored(S:\
    \ \"I feel good today. I will be productive. will kill It\") == 2)\nassert(is_bored(S:\
    \ \"You and I are going for a walk\") == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp23qp288w.swift:11:12: error: cannot find 'is_bored_str' in scope\n\
    \    return is_bored_str(S, \"\")\n           ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824532
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    var bored = 0\n    for s in S.split(separator: \".?!\") {\n        if s.starts(with:\
    \ \"I\") {\n            bored += 1\n        }\n    }\n    return bored\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmp9leg0jc7/tmp9leg0jc7.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b27f9187c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b27f8e7eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b27f8e7e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b27f8e7d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9leg0jc7                        0x00005648366c672b <unavailable> + 5931

    5    libc.so.6                          0x00002b27f9373460 __libc_start_main +
    245

    6    tmp9leg0jc7                        0x00005648366c6309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659824532
- exit_code: 1
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    \n    let boredoms = S.components(separatedBy: \".?!\").filter {\n      \
    \  !$0.isEmpty && $0.hasPrefix(\"I\")\n    }.count\n    \n    return boredoms\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp11hu6_jw.swift:12:22: error: value of type 'String' has no member\
    \ 'components'\n    let boredoms = S.components(separatedBy: \".?!\").filter {\n\
    \                   ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824532
- exit_code: -4
  program: "\n/// You'll be given a string of words, and your task is to count the\
    \ number\n/// of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>>\
    \ is_bored(\"Hello world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n\
    \    var count = 0\n    for s in S.split(separator: \".,?!\") {\n        if s.starts(with:\
    \ \"I\") {\n            count += 1\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
    \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
    \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
    \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\"\
    ) == 0)"
  status: Exception
  stderr: 'tmpu7imi01z/tmpu7imi01z.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac2668d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac2665ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac2665ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac2665cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu7imi01z                        0x0000560f2ff4672b <unavailable> + 5931

    5    libc.so.6                          0x00002ac266ac3460 __libc_start_main +
    245

    6    tmpu7imi01z                        0x0000560f2ff46309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659824531
