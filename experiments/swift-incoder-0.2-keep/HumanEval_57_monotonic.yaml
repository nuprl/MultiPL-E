name: HumanEval_57_monotonic
language: swift
prompt: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
  /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
  /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
  \ -> Bool {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
  \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
  \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
  \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\n\
  assert(monotonic(l: [9, 9, 9, 9]) == true)"
completions: ["    let sorted = l.sorted()\n    if sorted.first > sorted.last {\n\
    \        return true\n    }\n    return false", '    return isMonotonic(l)', " \
    \   let n = l.count\n    if n < 2 {\n        return true\n    }\n    var i = 0\n\
    \    var j = n - 1\n    var k = 0\n    while i < j {\n        if l[i] < l[j] {\n\
    \            k = j\n        } else {\n            k = i\n        }\n        if\
    \ k > i {\n            j = k\n        } else {\n            i = k + 1\n      \
    \  }\n    }\n    return l[i] > l[j]", "    var i = 0\n    var j = l.count - 1\n\
    \    while i < j {\n        if l[i] < l[j] {\n            i += 1\n        } else\
    \ if l[i] > l[j] {\n            j -= 1\n        } else {\n            return true\n\
    \        }\n    }\n    return false", "    var i = 0\n    var j = l.count - 1\n\
    \    var k = j\n    var m = Int64(l.count)\n    var n = Int64(l.count)\n    var\
    \ o = Int64(l.count)\n    var p = Int64(l.count)\n    var q = Int64(l.count)\n\
    \    var r = Int64(l.count)\n    var s = Int64(l.count)\n    var t = Int64(l.count)\n\
    \    var u = Int64(l.count)\n    var v = Int64(l.count)\n    var w = Int64(l.count)\n\
    \    var x = Int64(l.count)\n    var y = Int64(l.count)\n    var z = Int64(l.count)\n\
    \    var A = Int64(l.count)\n    var B = Int64(l.count)\n    var C = Int64(l.count)\n\
    \    var D = Int64(l.count)\n    var E = Int64(l.count)\n    var F = Int64(l.count)\n\
    \    var G = Int64(l.count)\n    var H = Int64(l.count)\n    var I = Int64(l.count)\n\
    \    var J = Int64(l.count)\n    var K = Int64(l.count)\n    var L = Int64(l.count)\n\
    \    var M = Int64(l.count)\n    var N = Int64(l.count)\n    var O = Int64(l.count)\n\
    \    var P = Int64(l.count)\n    var Q = Int64(l.count)\n    var R = Int64(l.count)\n\
    \    var S = Int64(l.count)\n    var T = Int64(l.count)\n    var U = Int64(l.count)\n\
    \    var V = Int64(l.count)\n    var W = Int64(l.count)\n    var X = Int64(l.count)\n\
    \    var Y = Int64(l.count)\n    var Z = Int64(l.count)\n    var _1 = Int64(l.count)\n\
    \    var _2 = Int64(l.count)\n    var _3 = Int64(l.count)\n    var _4 = Int64(l.count)\n\
    \    var _5 = Int64(l.count)\n    var _6 = Int64(l.count)\n    var _7 = Int64(l.count)\n\
    \    var _8 = Int64(l.count)\n    var _9 = Int64(l.count)\n    var _10 = Int64(l.count)\n\
    \    var _11 = Int64(l.count)\n    var _12 = Int64(l.count)\n    var _13 = Int64(l.count)\n\
    \    var _14 = Int64(l.count)\n    var _15 = Int64(l.count)\n    var _16 = Int64(l.count)\n\
    \    var _17 = Int64(l.count)\n    var _18 = Int64(l.count)\n    var _19 = Int64(l.count)\n\
    \    var _20 = Int64(l.count)\n    var _21 = Int64(l.count)\n    var _22 = Int64(l.count)\n\
    \    var _23 = Int64(l.count)\n    var _24 = Int64(l.count)\n    var _25 = Int64(",
  '    return isMonotonic(l)', "    var i = 0\n    var j = l.count - 1\n    var k\
    \ = j - 1\n    while i < j {\n        if l[i] < l[j] {\n            i += 1\n \
    \       } else if l[i] > l[j] {\n            j -= 1\n        } else {\n      \
    \      return false\n        }\n        if i == k {\n            return true\n\
    \        }\n        if l[i] > l[k] {\n            k += 1\n        }\n    }\n \
    \   return false", "    var max = 0\n    for x in l {\n        if x > max {\n\
    \            max = x\n        }\n    }\n    for x in l {\n        if x < max {\n\
    \            return false\n        }\n    }\n    return true", '    return isMonotonic(l)',
  '    return isMonotonic(l)', "    var i = 0\n    for e in l {\n        if e < l[i]\
    \ {\n            return false\n        }\n        if e > l[i] {\n            return\
    \ true\n        }\n        i += 1\n    }\n    return true", "    let n = l.count\n\
    \    if n < 1 {\n        return true\n    }\n    if n == 1 {\n        return l[0]\
    \ > l[1]\n    }\n    if n == 2 {\n        return l[0] > l[1] || l[0] == l[1]\n\
    \    }\n    if n == 3 {\n        return l[0] > l[1] || l[0] == l[1] || l[0] ==\
    \ l[2]\n    }\n    if n == 4 {\n        return l[0] > l[1] || l[0] == l[1] ||\
    \ l[0] == l[2] || l[0] == l[3]\n    }\n    if n == 5 {\n        return l[0] >\
    \ l[1] || l[0] == l[1] || l[0] == l[2] || l[0] == l[3] || l[0] == l[4]\n    }\n\
    \    if n == 6 {\n        return l[0] > l[1] || l[0] == l[1] || l[0] == l[2] ||\
    \ l[0] == l[3] || l[0] == l[4] || l[0] == l[5]\n    }\n    if n == 7 {\n     \
    \   return l[0] > l[1] || l[0] == l[1] || l[0] == l[2] || l[0] == l[3] || l[0]\
    \ == l[4] || l[0] == l[5] || l[0] == l[6]\n    }\n    if n == 8 {\n        return\
    \ l[0] > l[1] || l[0] == l[1] || l[0] == l[2] || l[0] == l[3] || l[0] == l[4]\
    \ || l[0] == l[5] || l[0] == l[6] || l[0] == l[7]\n    }\n    if n == 9 {\n  \
    \      return l[0] > l[1] || l[0] == l[1] || l[0] == l[2] || l[0] == l[3] || l[0]\
    \ == l[4] || l[0] == l[5] || l[0] == l[6] || l[0] == l[7] || l[0] == l[8]\n  \
    \  }\n    if n == 10 {\n        return l[0] > l[1] || l[0] == l[1] || l[0] ==\
    \ l[2] || l[0] == l[3] || l[0] == l[4] || l[0] == l[5] || l[0] == l[6] || l[0]\
    \ == l[7] || l[0] == l[8] || l[0] == l[9]\n    }\n    if n == 11 {\n        return\
    \ l[0] > l[1] || l[0] == l[1] || l[0] == l[2] || l[0] == l[3] || l[0] == l[4]\
    \ || l[0] == l[5] || l[0] == l[6] || l[0] == l[7] || l[0] == l[8] || l[0] == l[9]\
    \ || l[0] == l[10]\n    }\n    if n == 12 {\n        return l[0] > l[1] || l[0]\
    \ == l[1] || l[0] == l[2] || l[0] == l[3] || l[0] == l[4] || l[0] == l[5] || l[0]\
    \ == l[6] || l[0] == l[7] || l[0] == l[8] || l[0] == l[9] || l[0] == l[10] ||\
    \ l[0] == l[11]", '    return isMonotonic(l)', "    var max = 0\n    var min =\
    \ 0\n    for x in l {\n        if x > max {\n            max = x\n        }\n\
    \        if x < min {\n            min = x\n        }\n    }\n    return min <=\
    \ max", "    var i = 0\n    var j = l.count\n    var k = j - 1\n    var m = Int64(l.count)\n\
    \    var n = Int64(j)\n    var o = Int64(1)\n    var p = Int64(0)\n    var q =\
    \ Int64(0)\n    var r = Int64(0)\n    var s = Int64(0)\n    var t = Int64(0)\n\
    \    var u = Int64(0)\n    var v = Int64(0)\n    var w = Int64(0)\n    var x =\
    \ Int64(0)\n    var y = Int64(0)\n    var z = Int64(0)\n    var aa = Int64(0)\n\
    \    var ab = Int64(0)\n    var ac = Int64(0)\n    var ad = Int64(0)\n    var\
    \ ae = Int64(0)\n    var af = Int64(0)\n    var ag = Int64(0)\n    var ah = Int64(0)\n\
    \    var ai = Int64(0)\n    var aj = Int64(0)\n    var ak = Int64(0)\n    var\
    \ al = Int64(0)\n    var am = Int64(0)\n    var an = Int64(0)\n    var ao = Int64(0)\n\
    \    var ap = Int64(0)\n    var aq = Int64(0)\n    var ar = Int64(0)\n    var\
    \ as = Int64(0)\n    var at = Int64(0)\n    var au = Int64(0)\n    var av = Int64(0)\n\
    \    var aw = Int64(0)\n    var ax = Int64(0)\n    var ay = Int64(0)\n    var\
    \ az = Int64(0)\n    var aA = Int64(0)\n    var aB = Int64(0)\n    var aC = Int64(0)\n\
    \    var aD = Int64(0)\n    var aE = Int64(0)\n    var aF = Int64(0)\n    var\
    \ aG = Int64(0)\n    var aH = Int64(0)\n    var aI = Int64(0)\n    var aJ = Int64(0)\n\
    \    var aK = Int64(0)\n    var aL = Int64(0)\n    var aM = Int64(0)\n    var\
    \ aN = Int64(0)\n    var aO = Int64(0)\n    var aP = Int64(0)\n    var aQ = Int64(0)\n\
    \    var aR = Int64(0)\n    var aS = Int64(0)\n    var aT = Int64(0)\n    var\
    \ aU = Int64(0)\n    var aV = Int64(0)\n    var aW = Int64(0)\n    var aX = Int64(0)\n\
    \    var aY = Int64(0)\n    var aZ = Int64(0)\n    var aA = Int64(0)\n    var\
    \ aB = Int64(0)\n    var aC = Int64(0)\n    var aD = Int64(0)\n    var aE = Int64(0)\n\
    \    var aF = Int64(0)", "    var i = 0\n    var j = l.count\n    var k = j -\
    \ 1\n    while i < j {\n        if l[i] < l[k] {\n            i += 1\n       \
    \ } else if l[i] > l[k] {\n            j -= 1\n        } else {\n            return\
    \ true\n        }\n        k += 1\n    }\n    return false", "    var i = 0\n\
    \    for x in l {\n        if x > l[i] {\n            return false\n        }\n\
    \        i += 1\n    }\n    return true", '    return isMonotonic(l)', "    var\
    \ i = 0\n    var j = l.count - 1\n    var k = j - 1\n    while i < j {\n     \
    \   if l[i] < l[j] {\n            i += 1\n        } else if l[i] > l[j] {\n  \
    \          j -= 1\n        } else {\n            return false\n        }\n   \
    \     if i == k {\n            return true\n        }\n        if l[i] > l[k]\
    \ {\n            k += 1\n        }\n    }\n    return false", "    var i = 0\n\
    \    for v in l {\n        if v < l[i] {\n            return false\n        }\n\
    \        if v > l[i] {\n            return true\n        }\n        i += 1\n \
    \   }\n    return true"]
stop_tokens:
- "\n}"
